{
    "expand": "html",
    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-7089",
    "key": "ZF-7089",
    "fields": {
        "summary": {
            "name": "summary",
            "type": "java.lang.String",
            "value": "Zend_Application_Resource_Modules::init() bootstraps all existing module bootstrap classes regardless of request"
        },
        "timetracking": {
            "name": "timetracking",
            "type": "com.atlassian.jira.issue.fields.TimeTrackingSystemField"
        },
        "issuetype": {
            "name": "issuetype",
            "type": "com.atlassian.jira.issue.issuetype.IssueType",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issueType\/1",
                "name": "Bug",
                "subtask": false
            }
        },
        "votes": {
            "name": "votes",
            "type": "com.atlassian.jira.issue.fields.VotesSystemField",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-7089\/votes",
                "votes": 0,
                "hasVoted": false
            }
        },
        "security": {
            "name": "security",
            "type": "com.atlassian.jira.issue.security.IssueSecurityLevel"
        },
        "resolution": {
            "name": "resolution",
            "type": "com.atlassian.jira.issue.resolution.Resolution",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/resolution\/2",
                "name": "Won't Fix"
            }
        },
        "fixVersions": {
            "name": "fixVersions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [

            ]
        },
        "resolutiondate": {
            "name": "resolutiondate",
            "type": "java.util.Date",
            "value": "2009-06-23T04:38:58.000+0000"
        },
        "reporter": {
            "name": "reporter",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=matthijs@vandenbos.org",
                "name": "matthijs@vandenbos.org",
                "displayName": "Matthijs van den Bos",
                "active": true
            }
        },
        "created": {
            "name": "created",
            "type": "java.util.Date",
            "value": "2009-06-22T16:34:35.000+0000"
        },
        "updated": {
            "name": "updated",
            "type": "java.util.Date",
            "value": "2009-09-30T05:22:58.000+0000"
        },
        "customfield_10041": {
            "name": "Tags",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:labels",
            "value": [
                "modules",
                "resources"
            ]
        },
        "description": {
            "name": "description",
            "type": "java.lang.String",
            "value": "h4. Behaviour:\nIn Zend_Application_Resource_Modules::init(), all Bootstrap classes for all modules are loaded, regardless of what module was requested.\n\nh4. Effect:\nThis has the following side-effect: config ini keys that are set for each module are overwritten by each module when its bootstrap() method is called. The (unwanted) result is that the key is set for the last module encountered, not for the module requested.\n\nh4. Example: \nsetting layout resource in the config ini:\n{noformat}resources.layout.layout = \"default\"\n\nresources.modules[] =\nextranet.resources.layout.layout = \"extranet\"\nintranet.resources.layout.layout = \"intranet\"{noformat} \nAlso the module paths are not set explicitly, but by only setting \n{noformat}resources.frontController.moduleDirectory = APPLICATION_PATH \"\/modules\"{noformat} \nThat means modules are registered in the order they are encountered when iterating through the modules directory.\n\nh4. Result: \nthe layout is set to 'intranet', even if the default or extranet module were requested.\n\nh4. Suggested solution:\nZend_Application_Resource_Modules::init() should check for the requested module and only instantiate that bootstrap class.\n\nThe problem is that the request is not yet set in the frontcontroller when this is run. Is there a workaround?\nIf the request was set, it could be something like this:\n\nthe foreach starting on line 65:\n{noformat}foreach (array_keys($modules) as $module) {\n    if ($module === $default) {\n        continue;\n    }\n\n\t...\n}{noformat} \n\nshould be changed to:\n{noformat}$current = $front->getRequest()->getModuleName();\nforeach (array_keys($modules) as $module) {\n    if ($module === $default) {\n        continue;\n    }\n    if ($module === $current) {\n        continue;\n    }\n\n\t...\n}{noformat} \n"
        },
        "priority": {
            "name": "priority",
            "type": "com.atlassian.jira.issue.priority.Priority",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/priority\/3",
                "name": "Major"
            }
        },
        "duedate": {
            "name": "duedate",
            "type": "java.util.Date"
        },
        "customfield_10022": {
            "name": "Fix Version Priority",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:select"
        },
        "watcher": {
            "name": "watcher",
            "type": "watcher",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-7089\/watchers",
                "isWatching": false,
                "watchCount": 0
            }
        },
        "worklog": {
            "name": "worklog",
            "type": "worklog",
            "value": [

            ]
        },
        "status": {
            "name": "status",
            "type": "com.atlassian.jira.issue.status.Status",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/status\/5",
                "name": "Resolved"
            }
        },
        "labels": {
            "name": "labels",
            "type": "com.atlassian.jira.issue.label.Label",
            "value": [

            ]
        },
        "assignee": {
            "name": "assignee",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                "name": "matthew",
                "displayName": "Matthew Weier O'Phinney",
                "active": true
            }
        },
        "links": {
            "name": "links",
            "type": "issuelinks",
            "value": [
                {
                    "issueKey": "ZF-7095",
                    "issue": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-7095",
                    "type": {
                        "name": "Related",
                        "direction": "INBOUND",
                        "description": "is related to"
                    }
                }
            ]
        },
        "attachment": {
            "name": "attachment",
            "type": "attachment",
            "value": [

            ]
        },
        "sub-tasks": {
            "name": "sub-tasks",
            "type": "issuelinks",
            "value": [

            ]
        },
        "versions": {
            "name": "versions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/version\/10331",
                    "id": 10331,
                    "description": "Mini Release",
                    "name": "1.8.3",
                    "userReleaseDate": "09\/Jun\/09",
                    "archived": false,
                    "releaseDate": "2009-06-09",
                    "released": true
                }
            ]
        },
        "project": {
            "name": "project",
            "type": "com.atlassian.jira.project.Project",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/project\/ZF",
                "key": "ZF",
                "name": "Zend Framework",
                "roles": {

                }
            }
        },
        "components": {
            "name": "components",
            "type": "com.atlassian.jira.bc.project.component.ProjectComponent",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/component\/10390",
                    "id": 10390,
                    "name": "Zend_Application",
                    "isAssigneeTypeValid": false
                }
            ]
        },
        "comment": {
            "name": "comment",
            "type": "com.atlassian.jira.issue.fields.CommentSystemField",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/32088",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=thierry@jossermoz.net",
                        "name": "thierry@jossermoz.net",
                        "displayName": "Thierry Jossermoz",
                        "active": true
                    },
                    "body": "That's indeed a bit unclear how the modules resource is tied to the actual application modules.\n\nA solution could be to delegate the role of bootstrapping the modules to a plugin on routeShutdown.\n\nThis can be done by replacing the following line in Zend_Application_Resource_Modules\n\n{noformat} $moduleBootstrap->bootstrap();{noformat} \n\nby this one\n\n{noformat} $front->registerPlugin(new Zend_Controller_Plugin_ModulesBootstrapper(), 0);{noformat} \n\nand creating a Zend_Controller_Plugin_ModulesBootstrapper plugin as follows:\n\n{noformat} class Zend_Controller_Plugin_ModulesBootstrapper extends Zend_Controller_Plugin_Abstract\n{\n    public function routeShutdown(Zend_Controller_Request_Abstract $request)\n    {\n\n        $bootstrap = Zend_Controller_Front::getInstance()->getParam('bootstrap');\n\n        $bootstraps = $bootstrap->getResource('modules');\n        $module = $request->getModuleName();\n        \n        if (isset($bootstraps[$module])) {\n            $bootstraps[$module]->bootstrap();\n        }\n\n    }\n}{noformat} \n\nAlthough the side effects of this method need to be evaluated.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=thierry@jossermoz.net",
                        "name": "thierry@jossermoz.net",
                        "displayName": "Thierry Jossermoz",
                        "active": true
                    },
                    "created": "2009-06-22T20:38:10.000+0000",
                    "updated": "2009-06-22T20:38:10.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/32089",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=thierry@jossermoz.net",
                        "name": "thierry@jossermoz.net",
                        "displayName": "Thierry Jossermoz",
                        "active": true
                    },
                    "body": "Quick precision:\n{noformat} $front->registerPlugin(new Zend_Controller_Plugin_ModulesBootstrapper(), 0);{noformat} \n\nis actually to be added after the foreach.\n",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=thierry@jossermoz.net",
                        "name": "thierry@jossermoz.net",
                        "displayName": "Thierry Jossermoz",
                        "active": true
                    },
                    "created": "2009-06-22T20:57:33.000+0000",
                    "updated": "2009-06-22T20:57:33.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/32100",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                        "name": "matthew",
                        "displayName": "Matthew Weier O'Phinney",
                        "active": true
                    },
                    "body": "There were some specific problems addressed in the design goals of Zend_Application:\n* Autoloading for all modules should be setup up-front. This way code may selectively use information from any module without needing to know where that module resides.\n* Modules may need to setup front controller plugins; in particular, any given module may need to setup routes appropriate to its own controllers. The appropriate time to do this is during bootstrapping, as new routeStartup() plugins may not be added *during* routeStartup().\n* Bootstrapping occurs *prior* to dispatch, and thus is request agnostic. This is to facilitate the re-use of bootstrapping in order to create service end points, one-off scripts, and to bootstrap tests. Thus, bootstrapping must occur outside of the front controller dispatch loop.\n\nWhat you are suggesting goes counter to these goals entirely, and is actually impossible in the current design. The module is not known until after routing -- and routing happens during the front controller dispatch sequence. Additionally, based on the sequence of actions triggered, the module selected may change (as an example, if an exception is thrown, the ErrorController in the default module will likely be selected). I'd recommend registering a postDispatch() plugin either from your individual modules or at the application level that selects the layout based on the module.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                        "name": "matthew",
                        "displayName": "Matthew Weier O'Phinney",
                        "active": true
                    },
                    "created": "2009-06-23T04:35:21.000+0000",
                    "updated": "2009-06-23T04:35:21.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/34997",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=diego.malatesta",
                        "name": "diego.malatesta",
                        "displayName": "Diego Malatesta",
                        "active": true
                    },
                    "body": "As I've also made the same mistake as Matthijs, I think that the whole point of Zend_Application_Resource_Modules should be better clarified in the docs, as it's a bit confusing right now (in my opinion). Thanks.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=diego.malatesta",
                        "name": "diego.malatesta",
                        "displayName": "Diego Malatesta",
                        "active": true
                    },
                    "created": "2009-09-30T05:22:56.000+0000",
                    "updated": "2009-09-30T05:22:56.000+0000"
                }
            ]
        }
    },
    "transitions": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-7089\/transitions"
}