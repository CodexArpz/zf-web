{
    "expand": "html",
    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-702",
    "key": "ZF-702",
    "fields": {
        "summary": {
            "name": "summary",
            "type": "java.lang.String",
            "value": "Zend_Locale_Format : supporting number scripts in getNumber \/ isNumber \/ getFloat \/ ...etc"
        },
        "timetracking": {
            "name": "timetracking",
            "type": "com.atlassian.jira.issue.fields.TimeTrackingSystemField"
        },
        "issuetype": {
            "name": "issuetype",
            "type": "com.atlassian.jira.issue.issuetype.IssueType",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/issueType\/2",
                "name": "New Feature",
                "subtask": false
            }
        },
        "votes": {
            "name": "votes",
            "type": "com.atlassian.jira.issue.fields.VotesSystemField",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-702\/votes",
                "votes": 0,
                "hasVoted": false
            }
        },
        "security": {
            "name": "security",
            "type": "com.atlassian.jira.issue.security.IssueSecurityLevel"
        },
        "resolution": {
            "name": "resolution",
            "type": "com.atlassian.jira.issue.resolution.Resolution",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/resolution\/1",
                "name": "Fixed"
            }
        },
        "fixVersions": {
            "name": "fixVersions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/version\/10021",
                    "id": 10021,
                    "description": "Preview release; DB, Filter, Log",
                    "name": "0.8.0",
                    "userReleaseDate": "21\/Feb\/07",
                    "archived": true,
                    "releaseDate": "2007-02-21",
                    "released": true
                }
            ]
        },
        "resolutiondate": {
            "name": "resolutiondate",
            "type": "java.util.Date",
            "value": "2007-01-19T16:10:48.000+0000"
        },
        "reporter": {
            "name": "reporter",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=shreef",
                "name": "shreef",
                "displayName": "Ahmed Shreef",
                "active": true
            }
        },
        "created": {
            "name": "created",
            "type": "java.util.Date",
            "value": "2006-12-29T20:06:51.000+0000"
        },
        "updated": {
            "name": "updated",
            "type": "java.util.Date",
            "value": "2007-07-05T14:43:37.000+0000"
        },
        "customfield_10041": {
            "name": "Tags",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:labels"
        },
        "description": {
            "name": "description",
            "type": "java.lang.String",
            "value": "{code}\nIndex: Format.php\n===================================================================\n--- Format.php\t(revision 2551)\n+++ Format.php\t(working copy)\n@@ -101,18 +101,32 @@\n      * @param $input  - string\n      * @param $locale - OPTIONAL locale \n      * @param $precision - OPTIONAL precision of float value\n+     * @param $script - OPTIONAL the script of the numbers\n      * @return string\n      *\/\n-    public static function getNumber($input, $precision = false, $locale = false)\n+    public static function getNumber($input, $precision = false, $locale = false, $script = false)\n     {\n         if (!is_string($input))\n             return $input;\n \n-        if (!is_int($precision) and ($locale == false)) {\n-            $locale    = $precision;\n-            $precision = false;\n+        if (!is_int($precision) and ($script == false) ) {\n+            \n+            if ($locale == false) {\n+                $script    = $precision;\n+                $locale    = false;\n+                $precision = false;                \n+            } else {\n+                $script    = $locale;\n+                $locale    = $precision;\n+                $precision = false;\n+            }\n+            \n         }\n \n+        if ($script !== false){\n+            $input = self::toNumberSystem($input, $script, 'Engl');\n+        }\n+        \n         \/\/ Get correct signs for this locale\n         $symbols = Zend_Locale_Data::getContent($locale,'numbersymbols');\n \n@@ -268,10 +282,16 @@\n      * \n      * @param  $input  - localized number string\n      * @param  $locale - OPTIONAL locale\n+     * @param  $script - OPTIONAL the script of the numbers\n      * @return boolean\n      *\/\n-    public static function isNumber($input, $locale = false)\n+    public static function isNumber($input, $locale = false, $script = false)\n     {\n+\n+        if ($script !== false){\n+            $input = self::toNumberSystem($input, $script, 'Engl');\n+        }\n+        \n         \/\/ Get correct signs for this locale\n         $symbols = Zend_Locale_Data::getContent($locale,'numbersymbols');\n \n@@ -291,11 +311,12 @@\n      * @param $input     - string\n      * @param $locale    - OPTIONAL locale \n      * @param $precision - OPTIONAL precision of float value\n+     * @param $script    - OPTIONAL the script of the numbers\n      * @return float\n      *\/\n-    public static function getFloat($input, $precision = false, $locale = false)\n+    public static function getFloat($input, $precision = false, $locale = false, $script = false)\n     {\n-        return floatval(self::getNumber($input, $precision, $locale));\n+        return floatval(self::getNumber($input, $precision, $locale, $script));\n     }\n \n \n@@ -320,11 +341,12 @@\n      * \n      * @param  $input  - localized number string\n      * @param  $locale - OPTIONAL locale\n+     * @param  $script - OPTIONAL the script of the numbers\n      * @return boolean\n      *\/\n-    public static function isFloat($value, $locale = false)\n+    public static function isFloat($value, $locale = false, $script = false)\n     {\n-        return self::isNumber($value, $locale);\n+        return self::isNumber($value, $locale, $script);\n     }\n \n \n@@ -342,11 +364,12 @@\n      * \n      * @param $input     - string\n      * @param $locale    - OPTIONAL locale \n+     * @param $script    - OPTIONAL the script of the numbers\n      * @return float\n      *\/\n-    public static function getInteger($input, $locale = false)\n+    public static function getInteger($input, $locale = false, $script = false)\n     {\n-        return intval(self::getFloat($input, 0, $locale));\n+        return intval(self::getFloat($input, 0, $locale, $script));\n     }\n \n \n@@ -368,11 +391,12 @@\n      * \n      * @param  $input  - localized number string\n      * @param  $locale - OPTIONAL locale\n+     * @param  $script - OPTIONAL the script of the numbers\n      * @return boolean\n      *\/\n-    public static function isInteger($value, $locale = false)\n+    public static function isInteger($value, $locale = false, $script = false)\n     {\n-        return self::isNumber($value, $locale);\n+        return self::isNumber($value, $locale, $script);\n     }\n \n \n@@ -580,10 +604,16 @@\n      * @param string $date    date string\n      * @param string $format  date type CLDR format !!!\n      * @param locale $locale  OPTIONAL locale of date string\n+     * @param string $script  OPTIONAL the script of the numbers\n      * @return array\n      *\/\n-    public static function getDate($date, $format = false, $locale = false)\n+    public static function getDate($date, $format = false, $locale = false, $script = false)\n     {\n+    \n+        if ($script !== false){\n+            $date = self::toNumberSystem($date, $script, 'Engl');\n+        }\n+    \n         if ($format === false) {\n             $format = Zend_Locale_Data::getContent($locale, 'defdateformat', 'gregorian');\n             $format = $format['default'];\n@@ -602,10 +632,16 @@\n      * @param string $date    date string\n      * @param string $format  date type CLDR format !!!\n      * @param locale $locale  OPTIONAL locale of date string\n+     * @param string $script  OPTIONAL the script of the numbers\n      * @return boolean\n      *\/\n-    public static function isDate($date, $format = false, $locale = false)\n+    public static function isDate($date, $format = false, $locale = false, $script = false)\n     {\n+    \n+        if ($script !== false){\n+            $date = self::toNumberSystem($date, $script, 'Engl');\n+        }\n+        \n         try {\n             $date = self::getDate($date, $format, $locale);\n         } catch (Exception $e) {\n@@ -623,10 +659,16 @@\n      * @param string $time    time string\n      * @param string $format  time type CLDR format !!!\n      * @param locale $locale  OPTIONAL locale of time string\n+     * @param string $script  OPTIONAL the script of the numbers\n      * @return array\n      *\/\n-    public static function getTime($time, $format = false, $locale = false)\n+    public static function getTime($time, $format = false, $locale = false, $script = false)\n     {\n+    \n+        if ($script !== false){\n+            $time = self::toNumberSystem($time, $script, 'Engl');\n+        }\n+        \n         if ($format === false) {\n             $format = Zend_Locale_Data::getContent($locale, 'deftimeformat', 'gregorian');\n             $format = $format['default'];\n@@ -647,10 +689,16 @@\n      * @param string $time    time string\n      * @param string $format  time type CLDR format !!!\n      * @param locale $locale  OPTIONAL locale of time string\n+     * @param string $script  OPTIONAL the script of the numbers\n      * @return boolean\n      *\/\n     public static function isTime($time, $format = false, $locale = false)\n     {\n+    \n+        if ($script !== false){\n+            $time = self::toNumberSystem($time, $script, 'Engl');\n+        }\n+        \n         try {\n             $date = self::getTime($time, $format, $locale);\n         } catch (Exception $e) {\n\n{code}"
        },
        "priority": {
            "name": "priority",
            "type": "com.atlassian.jira.issue.priority.Priority",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/priority\/4",
                "name": "Minor"
            }
        },
        "duedate": {
            "name": "duedate",
            "type": "java.util.Date"
        },
        "customfield_10022": {
            "name": "Fix Version Priority",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:select"
        },
        "watcher": {
            "name": "watcher",
            "type": "watcher",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-702\/watchers",
                "isWatching": false,
                "watchCount": 0
            }
        },
        "worklog": {
            "name": "worklog",
            "type": "worklog",
            "value": [

            ]
        },
        "status": {
            "name": "status",
            "type": "com.atlassian.jira.issue.status.Status",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/status\/5",
                "name": "Resolved"
            }
        },
        "labels": {
            "name": "labels",
            "type": "com.atlassian.jira.issue.label.Label",
            "value": [

            ]
        },
        "assignee": {
            "name": "assignee",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                "name": "thomas",
                "displayName": "Thomas Weidner",
                "active": true
            }
        },
        "links": {
            "name": "links",
            "type": "issuelinks",
            "value": [

            ]
        },
        "attachment": {
            "name": "attachment",
            "type": "attachment",
            "value": [

            ]
        },
        "sub-tasks": {
            "name": "sub-tasks",
            "type": "issuelinks",
            "value": [

            ]
        },
        "versions": {
            "name": "versions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/version\/10040",
                    "id": 10040,
                    "description": "Preview Release; MVC maturation, HTTP client, Gdata",
                    "name": "0.6.0",
                    "userReleaseDate": "16\/Dec\/06",
                    "archived": true,
                    "releaseDate": "2006-12-16",
                    "released": true
                }
            ]
        },
        "project": {
            "name": "project",
            "type": "com.atlassian.jira.project.Project",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/project\/ZF",
                "key": "ZF",
                "name": "Zend Framework",
                "roles": {

                }
            }
        },
        "components": {
            "name": "components",
            "type": "com.atlassian.jira.bc.project.component.ProjectComponent",
            "value": [
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/component\/10073",
                    "id": 10073,
                    "name": "Zend_Locale",
                    "description": "Zend_Locale is a basic wrapper for all I18N and L10N issues for the Zend Framework. It provides the userbasically with access to translation functionality. It can handle different source file types for translation.",
                    "isAssigneeTypeValid": false
                }
            ]
        },
        "comment": {
            "name": "comment",
            "type": "com.atlassian.jira.issue.fields.CommentSystemField",
            "value": [
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/12115",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "body": "Changing issue type to \"new feature\", since this is a cool, new feature and not just a patch ;)",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "created": "2007-01-05T14:21:51.000+0000",
                    "updated": "2007-01-05T14:21:51.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/12303",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "body": "The API change above is not part of the proposal.  After releasing 0.7, we have reviewed this proposed change.\n\nI think we should not add the optional $script parameter to the API methods in Format.php for toNumber(), isNumber(), getNumber(), getFloat(), toFloat(), isFloat(), getInteger(), isInteger(), toInteger(), _parseDate(), isDate(), getTime(), and isTime().\n\nIt is sufficient and simpler for developers to explicitly write:\n\n{code}Zend_Locale_Format::getNumber(Zend_Locale_Format::toNumberSystem($input, $from, $to), $precision, $locale);{code}\n\nThe changes overcomplicate the API with no real added benefit (the code above is easy to write, easy for tools to work with, and easy to understand).\n",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "created": "2007-01-19T16:10:04.000+0000",
                    "updated": "2007-01-19T16:10:04.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/12304",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "body": "Integrated with SVN 2905 within all Zend_Locale_Format functions",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "created": "2007-01-19T16:10:48.000+0000",
                    "updated": "2007-01-19T16:10:48.000+0000"
                }
            ]
        }
    },
    "transitions": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-702\/transitions"
}