{
    "expand": "html",
    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-11158",
    "key": "ZF-11158",
    "fields": {
        "summary": {
            "name": "summary",
            "type": "java.lang.String",
            "value": "Zend_Auth_Adapter_MongoDb"
        },
        "timetracking": {
            "name": "timetracking",
            "type": "com.atlassian.jira.issue.fields.TimeTrackingSystemField"
        },
        "issuetype": {
            "name": "issuetype",
            "type": "com.atlassian.jira.issue.issuetype.IssueType",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issueType\/2",
                "name": "New Feature",
                "subtask": false
            }
        },
        "votes": {
            "name": "votes",
            "type": "com.atlassian.jira.issue.fields.VotesSystemField",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-11158\/votes",
                "votes": 0,
                "hasVoted": false
            }
        },
        "security": {
            "name": "security",
            "type": "com.atlassian.jira.issue.security.IssueSecurityLevel"
        },
        "resolution": {
            "name": "resolution",
            "type": "com.atlassian.jira.issue.resolution.Resolution",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/resolution\/7",
                "name": "Needs Proposal"
            }
        },
        "fixVersions": {
            "name": "fixVersions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [

            ]
        },
        "resolutiondate": {
            "name": "resolutiondate",
            "type": "java.util.Date",
            "value": "2011-03-13T14:48:26.000+0000"
        },
        "reporter": {
            "name": "reporter",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=zedroxymur",
                "name": "zedroxymur",
                "displayName": "ZedroXyMur",
                "active": true
            }
        },
        "created": {
            "name": "created",
            "type": "java.util.Date",
            "value": "2011-03-10T07:12:40.000+0000"
        },
        "updated": {
            "name": "updated",
            "type": "java.util.Date",
            "value": "2011-03-13T14:48:26.000+0000"
        },
        "customfield_10041": {
            "name": "Tags",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:labels"
        },
        "description": {
            "name": "description",
            "type": "java.lang.String",
            "value": "Zend Auth Adapter for MongoDB:\r\n\r\n{code}\r\n<?php\r\n\r\nclass Zend_Auth_Adapter_MongoDb implements Zend_Auth_Adapter_Interface\r\n{\r\n\r\n    \/**\r\n     * Database collection\r\n     *\r\n     * @var MongoCollection\r\n     *\/\r\n    protected $_collection = null;\r\n\r\n    \/**\r\n     * $_identityKeyPath - the column to use as the identity\r\n     *\r\n     * @var string\r\n     *\/\r\n    protected $_identityKeyPath = null;\r\n\r\n    \/**\r\n     * $_credentialKeyPaths - columns to be used as the credentials\r\n     *\r\n     * @var string\r\n     *\/\r\n    protected $_credentialKeyPath = null;\r\n\r\n    \/**\r\n     * $_identity - Identity value\r\n     *\r\n     * @var string\r\n     *\/\r\n    protected $_identity = null;\r\n\r\n    \/**\r\n     * $_credential - Credential values\r\n     *\r\n     * @var string\r\n     *\/\r\n    protected $_credential = null;\r\n\r\n    \/**\r\n     * $_credentialTreatment - Treatment applied to the credential, such as MD5() or PASSWORD()\r\n     *\r\n     * @var string\r\n     *\/\r\n    protected $_credentialTreatment = null;\r\n\r\n    \/**\r\n     * $_authenticateResultInfo\r\n     *\r\n     * @var array\r\n     *\/\r\n    protected $_authenticateResultInfo = null;\r\n\r\n    \/**\r\n     * $_resultDoc - Results of database authentication query\r\n     *\r\n     * @var array\r\n     *\/\r\n    protected $_resultDoc = null;\r\n\r\n    \/**\r\n     * $_ambiguityIdentity - Flag to indicate same Identity can be used with\r\n     * different credentials. Default is FALSE and need to be set to true to\r\n     * allow ambiguity usage.\r\n     *\r\n     * @var boolean\r\n     *\/\r\n    protected $_ambiguityIdentity = false;\r\n\r\n    \/**\r\n     * __construct() - Sets configuration options\r\n     *\r\n     * @param  MongoCollection $collection If null, default database adapter assumed\r\n     * @param  string                   $identityKeyPath\r\n     * @param  string                   $credentialKeyPath\r\n     * @param  string                   $credentialTreatment\r\n     * @return void\r\n     *\/\r\n    public function __construct(MongoCollection $collection = null, $identityKeyPath = null,\r\n                                $credentialKeyPath = null, $credentialTreatment = null)\r\n    {\r\n        $this->_setCollection($collection);\r\n\r\n        if (null !== $identityKeyPath) {\r\n            $this->setIdentityKeyPath($identityKeyPath);\r\n        }\r\n\r\n        if (null !== $credentialKeyPath) {\r\n            $this->setCredentialKeyPath($credentialKeyPath);\r\n        }\r\n\r\n        if (null !== $credentialTreatment) {\r\n            $this->setCredentialTreatment($credentialTreatment);\r\n        }\r\n    }\r\n\r\n    \/**\r\n     * _setCollection() - set the database adapter to be used for quering\r\n     *\r\n     * @param MongoCollection\r\n     * @throws Zend_Auth_Adapter_Exception\r\n     * @return Ik_Auth_Adapter_MongoDb\r\n     *\/\r\n    protected function _setCollection(MongoCollection $collection = null)\r\n    {\r\n        $this->_collection = $collection;\r\n\r\n        \/**\r\n         * If no adapter is specified, fetch default database adapter.\r\n         *\/\r\n        if(null === $this->_collection) {\r\n            $this->_collection = Zend_Db_Collection_Abstract::getDefaultAdapter();\r\n            if (null === $this->_collection) {\r\n                throw new Zend_Auth_Adapter_Exception('No database adapter present');\r\n            }\r\n        }\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * setIdentityKeyPath() - set the column name to be used as the identity column\r\n     *\r\n     * @param  string $identityKeyPath\r\n     * @return Ik_Auth_Adapter_MongoDb Provides a fluent interface\r\n     *\/\r\n    public function setIdentityKeyPath($identityKeyPath)\r\n    {\r\n        $this->_identityKeyPath = $identityKeyPath;\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * setCredentialKeyPath() - set the column name to be used as the credential column\r\n     *\r\n     * @param  string $credentialKeyPath\r\n     * @return Ik_Auth_Adapter_MongoDb Provides a fluent interface\r\n     *\/\r\n    public function setCredentialKeyPath($credentialKeyPath)\r\n    {\r\n        $this->_credentialKeyPath = $credentialKeyPath;\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * setCredentialTreatment() - allows the developer to pass a parameterized string that is\r\n     * used to transform or treat the input credential data.\r\n     *\r\n     * In many cases, passwords and other sensitive data are encrypted, hashed, encoded,\r\n     * obscured, or otherwise treated through some function or algorithm. By specifying a\r\n     * parameterized treatment string with this method, a developer may apply arbitrary SQL\r\n     * upon input credential data.\r\n     *\r\n     * Examples:\r\n     *\r\n     *  'PASSWORD(?)'\r\n     *  'MD5(?)'\r\n     *\r\n     * @param  string $treatment\r\n     * @return Ik_Auth_Adapter_MongoDb Provides a fluent interface\r\n     *\/\r\n    public function setCredentialTreatment($treatment)\r\n    {\r\n        $this->_credentialTreatment = $treatment;\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * setIdentity() - set the value to be used as the identity\r\n     *\r\n     * @param  string $value\r\n     * @return Ik_Auth_Adapter_MongoDb Provides a fluent interface\r\n     *\/\r\n    public function setIdentity($value)\r\n    {\r\n        $this->_identity = $value;\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * setCredential() - set the credential value to be used, optionally can specify a treatment\r\n     * to be used, should be supplied in parameterized form, such as 'MD5(?)' or 'PASSWORD(?)'\r\n     *\r\n     * @param  string $credential\r\n     * @return Ik_Auth_Adapter_MongoDb Provides a fluent interface\r\n     *\/\r\n    public function setCredential($credential)\r\n    {\r\n        $this->_credential = $credential;\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * setAmbiguityIdentity() - sets a flag for usage of identical identities\r\n     * with unique credentials. It accepts integers (0, 1) or boolean (true,\r\n     * false) parameters. Default is false.\r\n     *\r\n     * @param  int|bool $flag\r\n     * @return Ik_Auth_Adapter_MongoDb\r\n     *\/\r\n    public function setAmbiguityIdentity($flag)\r\n    {\r\n        if (is_integer($flag)) {\r\n            $this->_ambiguityIdentity = (1 === $flag ? true : false);\r\n        } elseif (is_bool($flag)) {\r\n            $this->_ambiguityIdentity = $flag;\r\n        }\r\n        return $this;\r\n    }\r\n    \/**\r\n     * getAmbiguityIdentity() - returns TRUE for usage of multiple identical\r\n     * identies with different credentials, FALSE if not used.\r\n     *\r\n     * @return bool\r\n     *\/\r\n    public function getAmbiguityIdentity()\r\n    {\r\n        return $this->_ambiguityIdentity;\r\n    }\r\n\r\n    \/**\r\n     * getResultDocObject() - Returns the result row as a stdClass object\r\n     *\r\n     * @param  string|array $returnColumns\r\n     * @param  string|array $omitColumns\r\n     * @return stdClass|boolean\r\n     *\/\r\n    public function getResultDocObject($returnColumns = null, $omitColumns = null)\r\n    {\r\n        if (!$this->_resultDoc) {\r\n            return false;\r\n        }\r\n        \r\n        return $this->_resultDoc; \r\n    }\r\n\r\n    \/**\r\n     * authenticate() - defined by Zend_Auth_Adapter_Interface.  This method is called to\r\n     * attempt an authentication.  Previous to this call, this adapter would have already\r\n     * been configured with all necessary information to successfully connect to a database\r\n     * collection and attempt to find a record matching the provided identity.\r\n     *\r\n     * @throws Zend_Auth_Adapter_Exception if answering the authentication query is impossible\r\n     * @return Zend_Auth_Result\r\n     *\/\r\n    public function authenticate()\r\n    {\r\n        $this->_authenticateSetup();\r\n        \r\n        $cursor = $this->_collection->find(array(\r\n            $this->_identityKeyPath => $this->_identity\r\n        ));\r\n\r\n        $count = $cursor->count(); \r\n        if ($count == 0) {\r\n            $this->_authenticateResultInfo['code'] = Zend_Auth_Result::FAILURE_IDENTITY_NOT_FOUND;\r\n            $this->_authenticateResultInfo['messages'][] = 'A record with the supplied identity could not be found.';\r\n        } elseif ($count == 1) {\r\n            $resultIdentity = $cursor->getNext();\r\n            $this->_resultDoc = $resultIdentity;\r\n            if ($resultIdentity[$this->_credentialKeyPath] == $this->_credential) {\r\n                $this->_authenticateResultInfo['code'] = Zend_Auth_Result::SUCCESS;\r\n                $this->_authenticateResultInfo['messages'][] = 'Authentication successful.';\r\n            } else {\r\n                $this->_authenticateResultInfo['code'] = Zend_Auth_Result::FAILURE_CREDENTIAL_INVALID;\r\n                $this->_authenticateResultInfo['messages'][] = 'Supplied credential is invalid.';\r\n            }   \r\n        } elseif ($count > 1) {\r\n            $this->_authenticateResultInfo['code'] = Zend_Auth_Result::FAILURE_IDENTITY_AMBIGUOUS;\r\n            $this->_authenticateResultInfo['messages'][] = 'More than one record matches the supplied identity.';\r\n        }\r\n        \r\n        $authResult = $this->_authenticateCreateAuthResult();        \r\n\r\n        return $authResult;\r\n    }\r\n\r\n    \/**\r\n     * _authenticateSetup() - This method abstracts the steps involved with\r\n     * making sure that this adapter was indeed setup properly with all\r\n     * required pieces of information.\r\n     *\r\n     * @throws Zend_Auth_Adapter_Exception - in the event that setup was not done properly\r\n     * @return true\r\n     *\/\r\n    protected function _authenticateSetup()\r\n    {\r\n        $exception = null;\r\n\r\n        if ($this->_identityKeyPath == '') {\r\n            $exception = 'An identity column must be supplied for the Ik_Auth_Adapter_MongoDb authentication adapter.';\r\n        } elseif ($this->_credentialKeyPath == '') {\r\n            $exception = 'A credential column must be supplied for the Ik_Auth_Adapter_MongoDb authentication adapter.';\r\n        } elseif ($this->_identity == '') {\r\n            $exception = 'A value for the identity was not provided prior to authentication with Ik_Auth_Adapter_MongoDb.';\r\n        } elseif ($this->_credential === null) {\r\n            $exception = 'A credential value was not provided prior to authentication with Ik_Auth_Adapter_MongoDb.';\r\n        }\r\n\r\n        if (null !== $exception) {\r\n            throw new Zend_Auth_Adapter_Exception($exception);\r\n        }\r\n\r\n        $this->_authenticateResultInfo = array(\r\n            'code'     => Zend_Auth_Result::FAILURE,\r\n            'identity' => $this->_identity,\r\n            'messages' => array()\r\n            );\r\n\r\n        return true;\r\n    }\r\n\r\n    \/**\r\n     * _authenticateCreateAuthResult() - Creates a Zend_Auth_Result object from\r\n     * the information that has been collected during the authenticate() attempt.\r\n     *\r\n     * @return Zend_Auth_Result\r\n     *\/\r\n    protected function _authenticateCreateAuthResult()\r\n    {\r\n        return new Zend_Auth_Result(\r\n            $this->_authenticateResultInfo['code'],\r\n            $this->_authenticateResultInfo['identity'],\r\n            $this->_authenticateResultInfo['messages']\r\n            );\r\n    }\r\n\r\n}\r\n{code} "
        },
        "priority": {
            "name": "priority",
            "type": "com.atlassian.jira.issue.priority.Priority",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/priority\/3",
                "name": "Major"
            }
        },
        "duedate": {
            "name": "duedate",
            "type": "java.util.Date"
        },
        "customfield_10022": {
            "name": "Fix Version Priority",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:select"
        },
        "watcher": {
            "name": "watcher",
            "type": "watcher",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-11158\/watchers",
                "isWatching": false,
                "watchCount": 0
            }
        },
        "worklog": {
            "name": "worklog",
            "type": "worklog",
            "value": [

            ]
        },
        "status": {
            "name": "status",
            "type": "com.atlassian.jira.issue.status.Status",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/status\/6",
                "name": "Closed"
            }
        },
        "labels": {
            "name": "labels",
            "type": "com.atlassian.jira.issue.label.Label",
            "value": [

            ]
        },
        "assignee": {
            "name": "assignee",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=ralph",
                "name": "ralph",
                "displayName": "Ralph Schindler",
                "active": true
            }
        },
        "links": {
            "name": "links",
            "type": "issuelinks",
            "value": [

            ]
        },
        "attachment": {
            "name": "attachment",
            "type": "attachment",
            "value": [

            ]
        },
        "sub-tasks": {
            "name": "sub-tasks",
            "type": "issuelinks",
            "value": [

            ]
        },
        "versions": {
            "name": "versions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [

            ]
        },
        "project": {
            "name": "project",
            "type": "com.atlassian.jira.project.Project",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/project\/ZF",
                "key": "ZF",
                "name": "Zend Framework",
                "roles": {

                }
            }
        },
        "components": {
            "name": "components",
            "type": "com.atlassian.jira.bc.project.component.ProjectComponent",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/component\/10084",
                    "id": 10084,
                    "name": "Zend_Auth",
                    "description": "A abstraction for various concrete web application authentication implementations.",
                    "isAssigneeTypeValid": false
                }
            ]
        },
        "comment": {
            "name": "comment",
            "type": "com.atlassian.jira.issue.fields.CommentSystemField",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/45508",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=intiilapa",
                        "name": "intiilapa",
                        "displayName": "Beno\u00eet Durand",
                        "active": true
                    },
                    "body": "@ZedroXyMur, you must sign the [CLA|http:\/\/framework.zend.com\/cla] to contribute with a new class. Any new class requires a [proposal|http:\/\/framework.zend.com\/wiki\/display\/ZFPROP\/Home] to be accepted by the community.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=intiilapa",
                        "name": "intiilapa",
                        "displayName": "Beno\u00eet Durand",
                        "active": true
                    },
                    "created": "2011-03-13T14:47:13.000+0000",
                    "updated": "2011-03-13T14:47:13.000+0000"
                }
            ]
        }
    },
    "transitions": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-11158\/transitions"
}