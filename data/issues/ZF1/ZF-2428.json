{
    "expand": "html",
    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-2428",
    "key": "ZF-2428",
    "fields": {
        "summary": {
            "name": "summary",
            "type": "java.lang.String",
            "value": "Patch to make line and file information available in log events"
        },
        "timetracking": {
            "name": "timetracking",
            "type": "com.atlassian.jira.issue.fields.TimeTrackingSystemField"
        },
        "issuetype": {
            "name": "issuetype",
            "type": "com.atlassian.jira.issue.issuetype.IssueType",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issueType\/11",
                "name": "Patch",
                "subtask": false
            }
        },
        "votes": {
            "name": "votes",
            "type": "com.atlassian.jira.issue.fields.VotesSystemField",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-2428\/votes",
                "votes": 5,
                "hasVoted": false
            }
        },
        "security": {
            "name": "security",
            "type": "com.atlassian.jira.issue.security.IssueSecurityLevel"
        },
        "fixVersions": {
            "name": "fixVersions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [

            ]
        },
        "reporter": {
            "name": "reporter",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=mim",
                "name": "mim",
                "displayName": "Mark Maynereid",
                "active": true
            }
        },
        "created": {
            "name": "created",
            "type": "java.util.Date",
            "value": "2008-01-13T19:47:58.000+0000"
        },
        "updated": {
            "name": "updated",
            "type": "java.util.Date",
            "value": "2011-08-07T12:27:50.000+0000"
        },
        "customfield_10041": {
            "name": "Tags",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:labels"
        },
        "description": {
            "name": "description",
            "type": "java.lang.String",
            "value": "I personally find it hard to track down where log entries are originating from sometimes, so I wanted to add line and file info to my log format like this:\n\n        $format = '%timestamp% %priorityName% (%priority%): %message% at line %line% in file %file%' . PHP_EOL;\n        $formatter = new Zend_Log_Formatter_Simple($format);\n        $writer->setFormatter($formatter);\n\nHowever, \"line\" and \"file\" are not currently available in Zend_Log's $events array. So I wrote a patch to provide it. Hope it might be considered for inclusion. \n\n\nRegards,\nMark Maynereid\n\n{code:none}\ndiff Log.php LogNew.php\n106c106\n<             $this->log(array_shift($params), $priority);\n---\n>             $this->log(array_shift($params), $priority, array_slice(debug_backtrace(), 1));\n130a131,137\n>         \/\/ obtain line and file from where we have been called\n>         if (func_num_args() > 2) {\n>             $backtrace = func_get_arg(2);\n>         } else {\n>             $backtrace = debug_backtrace();\n>         }\n>\n135c142,144\n<                                     'priorityName' => $this->_priorities[$priority]),\n---\n>                                     'priorityName' => $this->_priorities[$priority],\n>                                     'line'         => $backtrace[0]['line'],\n>                                     'file'         => $backtrace[0]['file']),\n{code}"
        },
        "priority": {
            "name": "priority",
            "type": "com.atlassian.jira.issue.priority.Priority",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/priority\/4",
                "name": "Minor"
            }
        },
        "duedate": {
            "name": "duedate",
            "type": "java.util.Date"
        },
        "customfield_10022": {
            "name": "Fix Version Priority",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:select"
        },
        "watcher": {
            "name": "watcher",
            "type": "watcher",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-2428\/watchers",
                "isWatching": false,
                "watchCount": 8
            }
        },
        "worklog": {
            "name": "worklog",
            "type": "worklog",
            "value": [

            ]
        },
        "status": {
            "name": "status",
            "type": "com.atlassian.jira.issue.status.Status",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/status\/10000",
                "name": "Postponed"
            }
        },
        "labels": {
            "name": "labels",
            "type": "com.atlassian.jira.issue.label.Label",
            "value": [

            ]
        },
        "assignee": {
            "name": "assignee",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=karnaf",
                "name": "karnaf",
                "displayName": "Eddo Rotman",
                "active": true
            }
        },
        "links": {
            "name": "links",
            "type": "issuelinks",
            "value": [

            ]
        },
        "attachment": {
            "name": "attachment",
            "type": "attachment",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/attachment\/11488",
                    "filename": "zend_log_tracing.patch",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=hagerd",
                        "name": "hagerd",
                        "displayName": "Darien Hager",
                        "active": true
                    },
                    "created": "2008-08-20T13:05:45.000+0000",
                    "size": 8951,
                    "mimeType": "text\/plain",
                    "content": "http:\/\/fw02.zend.com\/issues\/secure\/attachment\/11488\/zend_log_tracing.patch"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/attachment\/11489",
                    "filename": "zend_log_tracing2.patch",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=hagerd",
                        "name": "hagerd",
                        "displayName": "Darien Hager",
                        "active": true
                    },
                    "created": "2008-08-20T13:24:37.000+0000",
                    "size": 10016,
                    "mimeType": "text\/plain",
                    "content": "http:\/\/fw02.zend.com\/issues\/secure\/attachment\/11489\/zend_log_tracing2.patch"
                }
            ]
        },
        "sub-tasks": {
            "name": "sub-tasks",
            "type": "issuelinks",
            "value": [

            ]
        },
        "versions": {
            "name": "versions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [

            ]
        },
        "project": {
            "name": "project",
            "type": "com.atlassian.jira.project.Project",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/project\/ZF",
                "key": "ZF",
                "name": "Zend Framework",
                "roles": {

                }
            }
        },
        "components": {
            "name": "components",
            "type": "com.atlassian.jira.bc.project.component.ProjectComponent",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/component\/10017",
                    "id": 10017,
                    "name": "Zend_Log",
                    "description": "classic logging utility functions",
                    "isAssigneeTypeValid": false
                }
            ]
        },
        "comment": {
            "name": "comment",
            "type": "com.atlassian.jira.issue.fields.CommentSystemField",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/18424",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=mim",
                        "name": "mim",
                        "displayName": "Mark Maynereid",
                        "active": true
                    },
                    "body": "I've since added \"class\" and \"function\" which seems to need the index set at 1 so for in my sub-classed version I've added:\n\n{code}\n        $this->setEventItem('function', isset($backtrace[1]['function']) ? $backtrace[1]['function'] : '');\n        $this->setEventItem('class', isset($backtrace[1]['class']) ? $backtrace[1]['class'] : '');\n{code}\n\nwhich lets me:\n\n{code}\n$format = '%timestamp% %priorityName% (%priority%) %class%::%function%: %message% at line %line% in file %file%' . PHP_EOL;\n{code}",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=mim",
                        "name": "mim",
                        "displayName": "Mark Maynereid",
                        "active": true
                    },
                    "created": "2008-01-21T14:22:26.000+0000",
                    "updated": "2008-01-21T14:22:26.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/18701",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=mim",
                        "name": "mim",
                        "displayName": "Mark Maynereid",
                        "active": true
                    },
                    "body": "I only found out about svn diff today (as opposed to plain old diff) so here's the patch reworked to include all useful backtrace items:\n\n{code}\nIndex: library\/Zend\/Log.php\n===================================================================\n--- library\/Zend\/Log.php        (revision 7698)\n+++ library\/Zend\/Log.php        (working copy)\n@@ -103,7 +103,7 @@\n     {\n         $priority = strtoupper($method);\n         if (($priority = array_search($priority, $this->_priorities)) !== false) {\n-            $this->log(array_shift($params), $priority);\n+            $this->log(array_shift($params), $priority, array_slice(debug_backtrace(), 1));\n         } else {\n             throw new Zend_Log_Exception('Bad log priority');\n         }\n@@ -128,12 +128,26 @@\n             throw new Zend_Log_Exception('Bad log priority');\n         }\n\n+        if (func_num_args() > 2) {\n+            $backtrace = func_get_arg(2);\n+        } else {\n+            $backtrace = debug_backtrace();\n+        }\n+\n         \/\/ pack into event required by filters and writers\n-        $event = array_merge(array('timestamp'    => date('c'),\n-                                    'message'      => $message,\n-                                    'priority'     => $priority,\n-                                    'priorityName' => $this->_priorities[$priority]),\n-                              $this->_extras);\n+        $event = array_merge(\n+            array(\n+                'class'         => isset($backtrace[1]['class']) ? $backtrace[1]['class'] : '',\n+                'file'          => $backtrace[0]['file'],\n+                'function'      => isset($backtrace[1]['function']) ? $backtrace[1]['function'] : '',\n+                'line'          => $backtrace[0]['line'],\n+                'message'       => $message,\n+                'priority'      => $priority,\n+                'priorityName'  => $this->_priorities[$priority],\n+                'timestamp'     => date('c'),\n+            ),\n+            $this->_extras\n+        );\n\n         \/\/ abort if rejected by the global filters\n         foreach ($this->_filters as $filter) {\n{code}",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=mim",
                        "name": "mim",
                        "displayName": "Mark Maynereid",
                        "active": true
                    },
                    "created": "2008-01-30T12:02:04.000+0000",
                    "updated": "2008-01-30T12:02:04.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/22592",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=panman",
                        "name": "panman",
                        "displayName": "Ryan Panning",
                        "active": true
                    },
                    "body": "One note about the backtrace stack. You'll need to detect which trace in the stack to use. Because if someone calls the \"priority magic function\" ex: $log->info('test');  it will add another trace in the stack from the logger. I've worked around it by detecting the class name, ex:\n\n{code}\n\/\/ Detect what trace to use\nforeach ($backtrace as $number => $trace) {\n    if (!isset($trace['class']) || $trace['class'] != 'Zend_Log') {\n        break;\n    }\n}\n\n\/\/ Find the file and line from previous trace\n$line = $backtrace[$number - 1]['line'];\n$file = $backtrace[$number - 1]['file'];\n\n\/\/ Find the calling info\n$function = $backtrace[$number]['function'];\n\/\/ etc...\n{code}",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=panman",
                        "name": "panman",
                        "displayName": "Ryan Panning",
                        "active": true
                    },
                    "created": "2008-06-20T08:55:26.000+0000",
                    "updated": "2008-06-20T08:55:26.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/22593",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=panman",
                        "name": "panman",
                        "displayName": "Ryan Panning",
                        "active": true
                    },
                    "body": "Ignore my previous comment. I noticed that the backtrace stack is passed from __call() as well which is another solution.\n\nIs any of the other backtrace info usefull? Ex: type, args",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=panman",
                        "name": "panman",
                        "displayName": "Ryan Panning",
                        "active": true
                    },
                    "created": "2008-06-20T09:11:20.000+0000",
                    "updated": "2008-06-20T09:11:20.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/23551",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=hagerd",
                        "name": "hagerd",
                        "displayName": "Darien Hager",
                        "active": true
                    },
                    "body": "I've just started messing with Zend_Log and I think that trace information would be a very valuable addition. (My ideal is Java's Logger class.)\n\nI'd suggest that in addition to timestamp, priority name, message, etc:\n\n* Filename\n* Line Number\n* Method name (if applicable)\n* Class name (if applicable)\n* Full trace data (arrays) that a custom formatter can access\n\nFunction arguments? Probably not: If those were important I would expect that to be part of the log message the developer chooses.\n\nLastly, there needs to be a way to turn this on or off for performance purposes (debug_backtrace can be expensive) and possibly on or off depending on the priority level. \n\nIt seems the recent Zend_Log_Writer_Firebug class supports it's own tracing, but that's done in the Zend_Wildfire stuff rather than Zend_Log. I'll mess around and see if I can come up with something.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=hagerd",
                        "name": "hagerd",
                        "displayName": "Darien Hager",
                        "active": true
                    },
                    "created": "2008-08-20T10:56:59.000+0000",
                    "updated": "2008-08-20T10:56:59.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/23554",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=hagerd",
                        "name": "hagerd",
                        "displayName": "Darien Hager",
                        "active": true
                    },
                    "body": "This is a diff against the 1.5.3 release tag.\n\nIt adds support for toggling \"tracing\" for various priority levels. When enabled on a certain level, all messages in that level are accompanied by call-stack information.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=hagerd",
                        "name": "hagerd",
                        "displayName": "Darien Hager",
                        "active": true
                    },
                    "created": "2008-08-20T13:05:47.000+0000",
                    "updated": "2008-08-20T13:05:47.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/23555",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=hagerd",
                        "name": "hagerd",
                        "displayName": "Darien Hager",
                        "active": true
                    },
                    "body": "Patch attached. OOPS! Leftover var_dump() call  in there on line 203, my fault.\n\nHad to modify Zend_Log_Formatter_Simple to keep it from choking on non-string data.\n\nAdded Zend_Log_Formatter_Tracer to allow formatting trace output as text.\n\nTracing on a given level is off by default.\n\nNo \"getTracing()' function at the moment.\n\n",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=hagerd",
                        "name": "hagerd",
                        "displayName": "Darien Hager",
                        "active": true
                    },
                    "created": "2008-08-20T13:08:02.000+0000",
                    "updated": "2008-08-20T13:08:02.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/23557",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=hagerd",
                        "name": "hagerd",
                        "displayName": "Darien Hager",
                        "active": true
                    },
                    "body": "Revised version",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=hagerd",
                        "name": "hagerd",
                        "displayName": "Darien Hager",
                        "active": true
                    },
                    "created": "2008-08-20T13:24:37.000+0000",
                    "updated": "2008-08-20T13:24:37.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/23559",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=hagerd",
                        "name": "hagerd",
                        "displayName": "Darien Hager",
                        "active": true
                    },
                    "body": "I may have an off-by-one error in there, will test some more.\n\nBut I realize there's a conceptual problem: \n\n(A) In this patch, backtraces are made at the instant that the log message is generated, but suppose they're all filtered out later? That could be a big way to lose performance in a high-log environment, with some time-consuming operations (debug_backtrace()) that you can't bypass it with a filter.\n\n(B) On the other side, what if you want to make a filter which filters *based on* the stack trace or a file whitelist\/blacklist? \n\nI *think* (A) is more likely, myself.\n",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=hagerd",
                        "name": "hagerd",
                        "displayName": "Darien Hager",
                        "active": true
                    },
                    "created": "2008-08-20T16:13:07.000+0000",
                    "updated": "2008-08-20T16:13:07.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/23566",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=panman",
                        "name": "panman",
                        "displayName": "Ryan Panning",
                        "active": true
                    },
                    "body": "I would agree that (A) is more likely and the trace should be more informational than anything. What if the filter is applied at time of event creation? I know it could be changed during runtime but that would be an option.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=panman",
                        "name": "panman",
                        "displayName": "Ryan Panning",
                        "active": true
                    },
                    "created": "2008-08-21T05:56:06.000+0000",
                    "updated": "2008-08-21T05:56:06.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/23709",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=hagerd",
                        "name": "hagerd",
                        "displayName": "Darien Hager",
                        "active": true
                    },
                    "body": "I'm afraid I don't have access to the code anymore, but I did successfully test a version where the backtracing was done immediately after logger-level filters were applied. (Before writer-level filtering.)\n\n",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=hagerd",
                        "name": "hagerd",
                        "displayName": "Darien Hager",
                        "active": true
                    },
                    "created": "2008-08-26T02:32:49.000+0000",
                    "updated": "2008-08-26T02:32:49.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/26430",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=beberlei",
                        "name": "beberlei",
                        "displayName": "Benjamin Eberlei",
                        "active": true
                    },
                    "body": "The idea of using the backtrace is genious i have to say.\n\nWhat i personally think of this patch, how much performance impact does debug_backtrace() have? its a debug function and many people use the logger on production systems, so its an important question how performance is impacted by say 100-1000 debug_backtrace calls.\n\nSo i wrote a little performance checking script, looping 100000 times and doing syslog in the one case and syslog + debug_backtrace in the other case. there was no huge impact in performance, so i guess this should be added in the future.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=beberlei",
                        "name": "beberlei",
                        "displayName": "Benjamin Eberlei",
                        "active": true
                    },
                    "created": "2008-11-16T04:00:26.000+0000",
                    "updated": "2008-11-16T04:00:26.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/26435",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=mim",
                        "name": "mim",
                        "displayName": "Mark Maynereid",
                        "active": true
                    },
                    "body": "Performance is surely a potential concern here.\n\nPerhaps the best answer is to have this additional information functionality enabled\/disabled by a flag on construction?  That way in development one could typically have it on and in live mode off, but could override either as required.  And it would be off by default.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=mim",
                        "name": "mim",
                        "displayName": "Mark Maynereid",
                        "active": true
                    },
                    "created": "2008-11-16T11:00:18.000+0000",
                    "updated": "2008-11-16T11:00:18.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/28374",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=wil",
                        "name": "wil",
                        "displayName": "Wil Sinclair",
                        "active": true
                    },
                    "body": "This is a great feature that I think many would find useful. We (the ZF team at Zend) also have concerns about performance, but we can also mention features like this that may affect performance in the performance guide.\nThe one change we suggest is moving this functionality over to Zend_Debug, where not only people can use it for Zend_Log and any other component\/applicaiton code, but it also fills out our relatively weak Zend_Debug component with functionality that would be useful in any PHP 5 application.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=wil",
                        "name": "wil",
                        "displayName": "Wil Sinclair",
                        "active": true
                    },
                    "created": "2009-01-21T14:06:50.000+0000",
                    "updated": "2009-01-21T14:06:50.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/28478",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=wil",
                        "name": "wil",
                        "displayName": "Wil Sinclair",
                        "active": true
                    },
                    "body": "I'm postponing this since we don't have the resources to implement it in the next few weeks. Any community member can volunteer to implement this (if the code above is used, the author must sign a CLA) and provide appropriate unit tests. If a community member commits to implementing this, I will re-assign the issue to him\/her.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=wil",
                        "name": "wil",
                        "displayName": "Wil Sinclair",
                        "active": true
                    },
                    "created": "2009-01-26T09:38:38.000+0000",
                    "updated": "2009-01-26T09:38:38.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/28495",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=mim",
                        "name": "mim",
                        "displayName": "Mark Maynereid",
                        "active": true
                    },
                    "body": "I see Benjamin above has done some speed testing suggesting there is no huge impact (apols I missed the post before).  That's encouraging :)\n\nI am hopefully still on record as having signed the CLA if anyone wants to push this patch forward.  Am still a novice at SVN and unit testing and a community contribution virgin. If I can get time to get up to speed more safely I'll return to this and have a crack at Will's invitation, but anyone more capable is welcome to advance it in the meantime as far as I'm concerned.\n\nI note the mention of backtrace args above.  I deliberately thought to exclude them from the patch as it struck me as mission creep and personally that kind of (core dump like stuff) seems more to do with Zend_Debug to me.  In fact I wonder if Zend_Debug ought to become a singleton issuing unique IDs in managing PHP var dumps (like 'core dumps' to disk).  Perhaps Zend_Log and Zend_Debug could plug into each other in some way but keep their roles nicely separated? eg.  log message \"Critical error blah bla in file:class:function:line blah blah, var core dump ID: (MD5 hash of file:class:function)\".  I like that because it seems to me it could facilitate automated bug logging\/recurrance counts with vardumps dumped tidily to disk, a third party bugs DB entry made\/updated and a lovely message to the user \"Sorry but an unrecoverable error has occurred.  This error is caused by a (new|known) bug and is logged for attention of the The Support Team. Please accept our apologies for the inconvenience rhubarb rhubarb..\"\n\nWell returning to the patch, as a stopgap and if anyone finds it useful, here's my own sub-classing version:\n\n{code}\n<?php\n\nclass Mm_Log extends Zend_Log\n{\n    public function log($message, $priority)\n    {\n        if (func_num_args() > 2) {\n            $backtrace = func_get_arg(2);\n        } else {\n            $backtrace = debug_backtrace();\n        }\n        $this->setEventItem('function', isset($backtrace[1]['function']) ? $backtrace[1]['function'] : '');\n        $this->setEventItem('class', isset($backtrace[1]['class']) ? $backtrace[1]['class'] : '');\n        $this->setEventItem('line', $backtrace[0]['line']);\n        $this->setEventItem('file', $backtrace[0]['file']);\n\n        parent::log($message, $priority);\n    }\n\n    public function __call($method, $params)\n    {\n        $priority = strtoupper($method);\n        if (($priority = array_search($priority, $this->_priorities)) !== false) {\n            $this->log(array_shift($params), $priority, array_slice(debug_backtrace(), 1));\n        } else {\n            throw new Zend_Log_Exception('Bad log priority');\n        }\n    }\n\n}\n{code}",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=mim",
                        "name": "mim",
                        "displayName": "Mark Maynereid",
                        "active": true
                    },
                    "created": "2009-01-26T21:28:05.000+0000",
                    "updated": "2009-01-26T21:28:05.000+0000"
                }
            ]
        }
    },
    "transitions": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-2428\/transitions"
}