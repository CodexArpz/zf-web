{
    "expand": "html",
    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-7540",
    "key": "ZF-7540",
    "fields": {
        "summary": {
            "name": "summary",
            "type": "java.lang.String",
            "value": "Allow certain class within checking datatype of variable  "
        },
        "timetracking": {
            "name": "timetracking",
            "type": "com.atlassian.jira.issue.fields.TimeTrackingSystemField"
        },
        "issuetype": {
            "name": "issuetype",
            "type": "com.atlassian.jira.issue.issuetype.IssueType",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issueType\/4",
                "name": "Improvement",
                "subtask": false
            }
        },
        "votes": {
            "name": "votes",
            "type": "com.atlassian.jira.issue.fields.VotesSystemField",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-7540\/votes",
                "votes": 0,
                "hasVoted": false
            }
        },
        "security": {
            "name": "security",
            "type": "com.atlassian.jira.issue.security.IssueSecurityLevel"
        },
        "resolution": {
            "name": "resolution",
            "type": "com.atlassian.jira.issue.resolution.Resolution",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/resolution\/2",
                "name": "Won't Fix"
            }
        },
        "fixVersions": {
            "name": "fixVersions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/version\/10360",
                    "id": 10360,
                    "description": "Minor Release",
                    "name": "1.10.0",
                    "userReleaseDate": "27\/Jan\/10",
                    "archived": false,
                    "releaseDate": "2010-01-27",
                    "released": true
                }
            ]
        },
        "resolutiondate": {
            "name": "resolutiondate",
            "type": "java.util.Date",
            "value": "2009-09-04T12:51:38.000+0000"
        },
        "reporter": {
            "name": "reporter",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=tracer",
                "name": "tracer",
                "displayName": "Marius M\u00fchlberger",
                "active": true
            }
        },
        "created": {
            "name": "created",
            "type": "java.util.Date",
            "value": "2009-08-09T12:04:56.000+0000"
        },
        "updated": {
            "name": "updated",
            "type": "java.util.Date",
            "value": "2009-09-04T12:51:38.000+0000"
        },
        "customfield_10041": {
            "name": "Tags",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:labels",
            "value": [
                "Invalid_type_given",
                "Validate",
                "check_type"
            ]
        },
        "description": {
            "name": "description",
            "type": "java.lang.String",
            "value": "Since 1.9.0 the within validation the type is checked.\n\nIn Basic this is a good idea, but it also has some great disadvantages.\n\nScenario:\n- Inside a form I have implemented some Filters, which make me an object out of the given string (e.g. formating output, l18n, etc.)\n- this object implements a __toString() function which gave the (unformated) value to validator so far, which worked fine\n\nSolution:\nIt would be a great improvement to implment an interface eg.\n\n{code:none} \ninterface Zend_Validate_ValidateAble {\n    public function getValidationValue();\n}\n{code} \n\nand check at the top of each \"isValid($value)\" function:\n\n{code:none} \nif ($value instanceof  Zend_Validate_ValidateAble)  {\n    $value = $value->getValidationValue();\n}\n\n\/\/ new type check introduced in 1.9.0 starts here\n{code} \nThis improvement may be helpful to fix ZF-7414"
        },
        "priority": {
            "name": "priority",
            "type": "com.atlassian.jira.issue.priority.Priority",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/priority\/3",
                "name": "Major"
            }
        },
        "duedate": {
            "name": "duedate",
            "type": "java.util.Date"
        },
        "customfield_10022": {
            "name": "Fix Version Priority",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:select"
        },
        "watcher": {
            "name": "watcher",
            "type": "watcher",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-7540\/watchers",
                "isWatching": false,
                "watchCount": 1
            }
        },
        "worklog": {
            "name": "worklog",
            "type": "worklog",
            "value": [

            ]
        },
        "status": {
            "name": "status",
            "type": "com.atlassian.jira.issue.status.Status",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/status\/5",
                "name": "Resolved"
            }
        },
        "labels": {
            "name": "labels",
            "type": "com.atlassian.jira.issue.label.Label",
            "value": [

            ]
        },
        "assignee": {
            "name": "assignee",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                "name": "thomas",
                "displayName": "Thomas Weidner",
                "active": true
            }
        },
        "links": {
            "name": "links",
            "type": "issuelinks",
            "value": [
                {
                    "issueKey": "ZF-7414",
                    "issue": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-7414",
                    "type": {
                        "name": "Related",
                        "direction": "OUTBOUND",
                        "description": "is related to"
                    }
                }
            ]
        },
        "attachment": {
            "name": "attachment",
            "type": "attachment",
            "value": [

            ]
        },
        "sub-tasks": {
            "name": "sub-tasks",
            "type": "issuelinks",
            "value": [

            ]
        },
        "versions": {
            "name": "versions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/version\/10320",
                    "id": 10320,
                    "description": "Minor Release",
                    "name": "1.9.0",
                    "userReleaseDate": "31\/Jul\/09",
                    "archived": false,
                    "releaseDate": "2009-07-31",
                    "released": true
                }
            ]
        },
        "project": {
            "name": "project",
            "type": "com.atlassian.jira.project.Project",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/project\/ZF",
                "key": "ZF",
                "name": "Zend Framework",
                "roles": {

                }
            }
        },
        "components": {
            "name": "components",
            "type": "com.atlassian.jira.bc.project.component.ProjectComponent",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/component\/10140",
                    "id": 10140,
                    "name": "Zend_Validate",
                    "isAssigneeTypeValid": false
                }
            ]
        },
        "comment": {
            "name": "comment",
            "type": "com.atlassian.jira.issue.fields.CommentSystemField",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/33342",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=tracer",
                        "name": "tracer",
                        "displayName": "Marius M\u00fchlberger",
                        "active": true
                    },
                    "body": "without getting into detail with ZF-7414 I guess this improvement should be the solution for this issue, too",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=tracer",
                        "name": "tracer",
                        "displayName": "Marius M\u00fchlberger",
                        "active": true
                    },
                    "created": "2009-08-09T12:06:31.000+0000",
                    "updated": "2009-08-09T12:06:31.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/33343",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=tracer",
                        "name": "tracer",
                        "displayName": "Marius M\u00fchlberger",
                        "active": true
                    },
                    "body": "If it helps I can post some files showing the scenario with filters returning objects - I also implemented another interface to get the value formated for the database, another one for localised user output and so on. I just need to declare the filter, everything else is done be the Object being returned from the filter...",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=tracer",
                        "name": "tracer",
                        "displayName": "Marius M\u00fchlberger",
                        "active": true
                    },
                    "created": "2009-08-09T12:18:42.000+0000",
                    "updated": "2009-08-09T12:18:42.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/33344",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "body": "No, for the proposed interface.\nCan you give an reproducable example of a validator and the value you provide ?\n\nThe Problem:\nCasting an object could also lead to the problem to get a non-string (as it depends on the user implementation).",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "created": "2009-08-09T12:32:15.000+0000",
                    "updated": "2009-08-09T12:32:15.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/33346",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=tracer",
                        "name": "tracer",
                        "displayName": "Marius M\u00fchlberger",
                        "active": true
                    },
                    "body": "The Problem:\nYes, there could be an user implementation which returns a non-string, but this should not be the problem:\n{code:none:title:NotEmpty Validator}\n    public function isValid($value)\n    {\n        if ($value instanceof  Zend_Validate_ValidateAble)  {\n            $value = $value->getValidationValue();\n        }\n\n        if (!is_string($value) && !is_int($value) && !is_float($value) && !is_bool($value)) {\n            $this->_error(self::INVALID);\n            \/\/ if \"getValidationValue()\" would not be a non-string the validation process would end here!\n            return false;\n        }\n\n        \/\/ [...]\n\n    }\n{code}\n",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=tracer",
                        "name": "tracer",
                        "displayName": "Marius M\u00fchlberger",
                        "active": true
                    },
                    "created": "2009-08-09T12:52:01.000+0000",
                    "updated": "2009-08-09T12:52:01.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/33348",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=tracer",
                        "name": "tracer",
                        "displayName": "Marius M\u00fchlberger",
                        "active": true
                    },
                    "body": "The example:\n{code:none}\nclass Co_Date extends Zend_Date implements Co_Db_DatabaseString, Co_Validate_ValidateAble\n{\n\tprotected $_defaultFormat = null; \n\t\t\n    public function __toString()\n    {\n        return $this->toString($this->_defaultFormat, $this->_locale);        \n    }\n    \n    public function getValidationValue()\n\t{\n\t\treturn $this->__toString();\n\t}\n    \n    public function setDefaultFormat($value)\n    {\n        $this->_defaultFormat = $value;\n        return $this;\n    }\t\n\t\n    public function getDefaultFormat()\n    {\n        return $this->_defaultFormat;\n    }\t\n\t\n\t\/**\n\t * get the string to be inserted to the database\n\t *\n\t * @param string $dataType meta type of db-field\n\t * @return string\n\t *\/\n    public function getDatabaseValue($dataType = null)\n    {\n        switch ($dataType) {\n            case 'date':\n                return $this->toString('y-MM-dd');\n            case 'datetime':\n                return $this->toString('y-MM-dd HH:mm:ss');\n            case 'int':\n                return $this->getTimestamp();\n            default:\n                return null;\n        }\n    }    \n}\n{code}\n\nI create a new object and pass it to the validator:\n\n{code:none}\n$myDate = new CoDate('09.08.2009'); \/\/ Locale set do DE_de via Registry\n\n$dateValidator = new Zend_Validate_Date();\n\nvar_dump($dateValidator->isValid($myDate));\n{code}\n\n",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=tracer",
                        "name": "tracer",
                        "displayName": "Marius M\u00fchlberger",
                        "active": true
                    },
                    "created": "2009-08-09T12:57:58.000+0000",
                    "updated": "2009-08-09T12:57:58.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/33872",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "body": "Is this the only example ? Or do you have other problems too. :-)\n\nBecause the Date validator accepts Zend_Date objects. (1.9.2\/1.10 seperate issue)\n\nFor other validators I see more problems by allowing objects than throwing an error.\nExample... Int validator... objects are never casted to int...\n\nSuch a change must be thought of seperately for each validator.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "created": "2009-08-24T14:27:29.000+0000",
                    "updated": "2009-08-24T14:27:29.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/33883",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=tracer",
                        "name": "tracer",
                        "displayName": "Marius M\u00fchlberger",
                        "active": true
                    },
                    "body": "Hello Thomas,\n\nunfortunately I have other problems, too :-(\n\nEvery value which will be inserted into the database is casted into an Object, also Floats and Int. This objects implment two Interfaces: Co_Db_DatabaseString and Co_Validate_ValidateAble. \n\nThis has following three reasons:\n- All values are localized (eg. \".\" and \",\" in double and float) => this could be done in another way, but it fits great into this solution\n- The object adds validators automatically based on the meta-data of the db, so if there is a int and db-type is TINYINT, the validator Between 0-255 is added\n- The object returns a well-formated value for the database via the function \"toDbString, eg. if a double has more decimal numbers then the db allows it's rounded correctly, not just cut (some db's also return warnings in the case of to much decimal numbers).\n\nSo supporting a interface would be a great solution. \n\nCurrently I'm writting on a scientific paper on building an application with zend framework for a german university and I don't have to much time left to finish this work. But I could write a documentation of the way I implemented this hole thing after the scientific paper is finished.\n\nKind regards,\nMarius",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=tracer",
                        "name": "tracer",
                        "displayName": "Marius M\u00fchlberger",
                        "active": true
                    },
                    "created": "2009-08-25T03:21:54.000+0000",
                    "updated": "2009-08-25T03:21:54.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/33884",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "body": "No for an additional interface.\nThere is no benefit over casting to string when validating (which would be more common).\n\nExample:\nWhy should the NotEmpty validator allow objects as input... casting an object to string produces never a null value nor a integer 0 nor a false as it is casted to string.\n\nYou can do in userland code whatever you want, but for the framework (we have to think of other usecases, environments, usability and other things) it makes no sense.\n\nBtw: For localizing\/normlizing values there is a Zend_Filter_NormalizeToLocalize and reverse... also Zend_Validate_Int\/Float accept localized values when the locale is set.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "created": "2009-08-25T03:38:02.000+0000",
                    "updated": "2009-08-25T03:38:02.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/34251",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "body": "Closing as Won't Fix.\n\nWhen there are good reasons for a single validator to accept objects (for example Zend_Date for the date validator) then a seperate issue should be given for these validators.\n\nA generic interface as proposed here to allow typeless validation would integrate the same problems as we had before by allowing all types (even ressources) and do casting regardless of the given input.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "created": "2009-09-04T12:51:29.000+0000",
                    "updated": "2009-09-04T12:51:29.000+0000"
                }
            ]
        }
    },
    "transitions": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-7540\/transitions"
}