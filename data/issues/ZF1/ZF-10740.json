{
    "expand": "html",
    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-10740",
    "key": "ZF-10740",
    "fields": {
        "summary": {
            "name": "summary",
            "type": "java.lang.String",
            "value": "Add methods:  $db->updateWhere()   $db->deleteWhere() to  Zend_Db_Adapter_Abstract"
        },
        "timetracking": {
            "name": "timetracking",
            "type": "com.atlassian.jira.issue.fields.TimeTrackingSystemField"
        },
        "issuetype": {
            "name": "issuetype",
            "type": "com.atlassian.jira.issue.issuetype.IssueType",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issueType\/4",
                "name": "Improvement",
                "subtask": false
            }
        },
        "votes": {
            "name": "votes",
            "type": "com.atlassian.jira.issue.fields.VotesSystemField",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-10740\/votes",
                "votes": 0,
                "hasVoted": false
            }
        },
        "security": {
            "name": "security",
            "type": "com.atlassian.jira.issue.security.IssueSecurityLevel"
        },
        "resolution": {
            "name": "resolution",
            "type": "com.atlassian.jira.issue.resolution.Resolution",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/resolution\/2",
                "name": "Won't Fix"
            }
        },
        "fixVersions": {
            "name": "fixVersions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [

            ]
        },
        "resolutiondate": {
            "name": "resolutiondate",
            "type": "java.util.Date",
            "value": "2010-11-24T09:01:57.000+0000"
        },
        "reporter": {
            "name": "reporter",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=ronny+stalker",
                "name": "ronny stalker",
                "displayName": "jw",
                "active": true
            }
        },
        "created": {
            "name": "created",
            "type": "java.util.Date",
            "value": "2010-11-24T08:57:21.000+0000"
        },
        "updated": {
            "name": "updated",
            "type": "java.util.Date",
            "value": "2010-11-24T12:00:25.000+0000"
        },
        "customfield_10041": {
            "name": "Tags",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:labels"
        },
        "description": {
            "name": "description",
            "type": "java.lang.String",
            "value": "I suggest adding two more method to Zend_Db_Adapter_Abstract\r\n * updateWhere() \r\n * deleteWhere() \r\n\r\nThese will be equivalent to the the {{update()}} and {{delete()}} methods except they will throw an Exception if no WHERE conditions are passed. Thus preventing ALL rows of a table from being accidentally deleted or updated. \r\n\r\n(This is a different tangent to issues already raised by : ZF-9298 and ZF-3571)\r\n\r\n\r\n*The problem*\r\n\r\nUsing the current methods of Zend Db Adaptor there is a high chance of accidentally updating\/deleting ALL rows of db table if no WHERE is passed in as an argument to the method. Naturally, no error is thrown.\r\n\r\nIt is argued that the behaviour of the {{update()}} and {{delete()}} methods is in keeping with an SQL query, in that if no 'where CLAUSE' is provided, then the query affects all rows. \r\n\r\nIn SQL it would *not* throw an error if you submitted a query like :\r\n{code} \r\n$whereClause = '';\r\n\"UPDATE tblEvents SET colIsSoldOut='1' \" . $whereClause;\r\n{code} \r\n\r\nThis is correct. Therefore, we should keep the update() and delete() methods as they are.\r\n\r\n*But how often do you update or delete ALL rows?*\r\n\r\nIt is rare to have code that updates or deletes ALL rows of a db table. \r\n\r\nIt makes sense to add methods to Zend_Db_Adapter_Abstract that are consistent with the 'normal case', most common, type of update and delete SQL behaviour, that is: \r\n\r\nRunning an UPDATE without a WHERE *condition* in a WHERE clause will NOT update all rows and WILL throw an Error.\r\n\r\nIn SQL it *would* throw an error if you submitted a query like :\r\n{code} \r\n$whereConditions = '';\r\n\"UPDATE tblEvents SET colIsSoldOut='1' WHERE \" . $whereConditions;\r\n{code} \r\n\r\nThis behaviour can be represented by the two, newly proposed methods {{updateWhere()}} and {{deleteWhere()}} which can be used *explicitly* in code that never, ever, ever, will feel the need to update or delete ALL rows of table.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"
        },
        "priority": {
            "name": "priority",
            "type": "com.atlassian.jira.issue.priority.Priority",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/priority\/4",
                "name": "Minor"
            }
        },
        "duedate": {
            "name": "duedate",
            "type": "java.util.Date"
        },
        "customfield_10022": {
            "name": "Fix Version Priority",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:select"
        },
        "watcher": {
            "name": "watcher",
            "type": "watcher",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-10740\/watchers",
                "isWatching": false,
                "watchCount": 0
            }
        },
        "worklog": {
            "name": "worklog",
            "type": "worklog",
            "value": [

            ]
        },
        "status": {
            "name": "status",
            "type": "com.atlassian.jira.issue.status.Status",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/status\/5",
                "name": "Resolved"
            }
        },
        "labels": {
            "name": "labels",
            "type": "com.atlassian.jira.issue.label.Label",
            "value": [

            ]
        },
        "assignee": {
            "name": "assignee",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=ralph",
                "name": "ralph",
                "displayName": "Ralph Schindler",
                "active": true
            }
        },
        "links": {
            "name": "links",
            "type": "issuelinks",
            "value": [
                {
                    "issueKey": "ZF-9298",
                    "issue": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-9298",
                    "type": {
                        "name": "Related",
                        "direction": "OUTBOUND",
                        "description": "is related to"
                    }
                },
                {
                    "issueKey": "ZF-3571",
                    "issue": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-3571",
                    "type": {
                        "name": "Related",
                        "direction": "OUTBOUND",
                        "description": "is related to"
                    }
                }
            ]
        },
        "attachment": {
            "name": "attachment",
            "type": "attachment",
            "value": [

            ]
        },
        "sub-tasks": {
            "name": "sub-tasks",
            "type": "issuelinks",
            "value": [

            ]
        },
        "versions": {
            "name": "versions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [

            ]
        },
        "project": {
            "name": "project",
            "type": "com.atlassian.jira.project.Project",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/project\/ZF",
                "key": "ZF",
                "name": "Zend Framework",
                "roles": {

                }
            }
        },
        "components": {
            "name": "components",
            "type": "com.atlassian.jira.bc.project.component.ProjectComponent",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/component\/10012",
                    "id": 10012,
                    "name": "Zend_Db",
                    "description": "interfaces, APIs, and adapters for various third-party data stores",
                    "isAssigneeTypeValid": false
                }
            ]
        },
        "comment": {
            "name": "comment",
            "type": "com.atlassian.jira.issue.fields.CommentSystemField",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/43306",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=bittarman",
                        "name": "bittarman",
                        "displayName": "Ryan Mauger",
                        "active": true
                    },
                    "body": "The update and delete methods of the db adapters already take a second argument for a where clause, which takes an array of clauses \/ paramaters as so:\r\n\r\n{code}\r\n$db->delete('tablename', array('id = ?' => $id));\r\n{code}\r\n\r\n{code}\r\n$db->update('tablename', $data, array('id = ?' => $id));\r\n{code}\r\n\r\nClosing as won't fix because an  adequate solution already exists.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=bittarman",
                        "name": "bittarman",
                        "displayName": "Ryan Mauger",
                        "active": true
                    },
                    "created": "2010-11-24T09:01:57.000+0000",
                    "updated": "2010-11-24T09:01:57.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/43307",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=ronny+stalker",
                        "name": "ronny stalker",
                        "displayName": "jw",
                        "active": true
                    },
                    "body": "I disagree that an adequate solution already exists - but fair enough, I agree its not a high priority issue.\r\n",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=ronny+stalker",
                        "name": "ronny stalker",
                        "displayName": "jw",
                        "active": true
                    },
                    "created": "2010-11-24T09:17:56.000+0000",
                    "updated": "2010-11-24T09:57:33.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/43311",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=bittarman",
                        "name": "bittarman",
                        "displayName": "Ryan Mauger",
                        "active": true
                    },
                    "body": "Apologies, I also meant to mention, that even with a where clause supplied, it could still be possible to accidentally truncate a table, especially where the clause is built programmatically. \r\n\r\nHaving a method which claims to prevent truncation would lead to complacent usage, and when it is not possible to create this function to be 100% safe, would result in potentially more harm.\r\n\r\nThe responsibility for ensuring truncation cannot occur unless its wanted needs to lie with the developer, and not the framework. After-all, you wouldn't send the same query directly to the db without the where clause.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=bittarman",
                        "name": "bittarman",
                        "displayName": "Ryan Mauger",
                        "active": true
                    },
                    "created": "2010-11-24T10:00:32.000+0000",
                    "updated": "2010-11-24T10:00:32.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/43312",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=mjh_ca",
                        "name": "mjh_ca",
                        "displayName": "Marc Hodgins",
                        "active": true
                    },
                    "body": "@Ryan: I do like this approach.  Sort of a \"safety\" method.  Something similar was proposed and rejected in ZF-3571 and ZF-9298 (linking here) but I think yours is a better approach because it doesn't change the existing behavior like those other tickets proposed to do.  +1 from me on this.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=mjh_ca",
                        "name": "mjh_ca",
                        "displayName": "Marc Hodgins",
                        "active": true
                    },
                    "created": "2010-11-24T10:04:50.000+0000",
                    "updated": "2010-11-24T10:04:50.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/43316",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=ronny+stalker",
                        "name": "ronny stalker",
                        "displayName": "jw",
                        "active": true
                    },
                    "body": "I see where you are coming from Ryan. If it claims to 'prevent truncation' then it would be dangerous. If it claims to throw Exception on \"no where condition at all\" then I don't think it would induce complacency. \r\n\r\nTo be honest I am not 100% sure how to check the $where variable for \"no where condition at all\" in client code and in a safe way that is future compatible. This is why, as a developer, I currently avoid using the update() and delete() methods and end up building the queries myself and calling $db->query().\r\n\r\nIf I was inside the class I could do exactly the same check against the result of \"_whereExpr()\" that is done by the ternary operation that decides whether or not to append the word \"WHERE\" when building the query:\r\ni.e.\r\n{code}\r\nabstract class Zend_Db_Adapter_Abstract \r\n ...\r\n public function delete($table, $where = '')\r\n        ...\r\n        $where = $this->_whereExpr($where);\r\n           ...\r\n           . (($where) ? \" WHERE $where\" : '');\r\n           ...\r\n\r\n{code}\r\n\r\nSo the whole the method would simply do:\r\n{code}\r\nabstract class Zend_Db_Adapter_Abstract \r\n ...\r\n    \/**\r\n     * Deletes table rows based on a REQUIRED WHERE clause.\r\n     * Behaves the same as delete() except $where parameter is required.\r\n     *\r\n     * @param  mixed        $table The table to update.\r\n     * @param  mixed        $where DELETE WHERE clause(s).\r\n     * @throws Zend_Db_Adapter_Exception if where conditions result in false  \r\n     * @return int          The number of affected rows.\r\n     *\/\r\n    public function deleteWhere($table, $where)\r\n    {\r\n\r\n        if (!$this->_whereExpr($where)) {\r\n            \/** @see Zend_Db_Adapter_Exception *\/\r\n            require_once 'Zend\/Db\/Adapter\/Exception.php';\r\n            throw new Zend_Db_Adapter_Exception(\"_whereExpr($where) returned FALSE\");\r\n            } \r\n\r\n        return $this->delete($table, $where);\r\n    }\r\n{code}\r\n\r\nAs I write this I realise what I am really asking for is some form of access to the boolean test that is used in the ternary operation that appends the where conditions to the query (see above).    \r\n\r\nI suppose an alternative would be to have an equivalent public method that behaves exactly like \"_whereExpr()\" so clients can perform that 'if-throw' logic outside the class. If there is one, then I must have missed it and yes I'd agree an adequate solution already exists and sorry for wasting time.\r\n\r\n@Marc - thanks for the +1",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=ronny+stalker",
                        "name": "ronny stalker",
                        "displayName": "jw",
                        "active": true
                    },
                    "created": "2010-11-24T10:52:55.000+0000",
                    "updated": "2010-11-24T12:00:25.000+0000"
                }
            ]
        }
    },
    "transitions": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-10740\/transitions"
}