{
    "expand": "html",
    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-1870",
    "key": "ZF-1870",
    "fields": {
        "summary": {
            "name": "summary",
            "type": "java.lang.String",
            "value": "Support default field values in Zend_Db_Table::createRow()"
        },
        "timetracking": {
            "name": "timetracking",
            "type": "com.atlassian.jira.issue.fields.TimeTrackingSystemField",
            "value": {
                "timeoriginalestimate": 240,
                "timeestimate": 240
            }
        },
        "issuetype": {
            "name": "issuetype",
            "type": "com.atlassian.jira.issue.issuetype.IssueType",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issueType\/4",
                "name": "Improvement",
                "subtask": false
            }
        },
        "votes": {
            "name": "votes",
            "type": "com.atlassian.jira.issue.fields.VotesSystemField",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-1870\/votes",
                "votes": 17,
                "hasVoted": false
            }
        },
        "security": {
            "name": "security",
            "type": "com.atlassian.jira.issue.security.IssueSecurityLevel"
        },
        "resolution": {
            "name": "resolution",
            "type": "com.atlassian.jira.issue.resolution.Resolution",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/resolution\/1",
                "name": "Fixed"
            }
        },
        "fixVersions": {
            "name": "fixVersions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/version\/10241",
                    "id": 10241,
                    "description": "Minor Release",
                    "name": "1.8.0",
                    "userReleaseDate": "30\/Apr\/09",
                    "archived": false,
                    "releaseDate": "2009-04-30",
                    "released": true
                }
            ]
        },
        "resolutiondate": {
            "name": "resolutiondate",
            "type": "java.util.Date",
            "value": "2009-01-09T14:53:04.000+0000"
        },
        "reporter": {
            "name": "reporter",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=jacksleight",
                "name": "jacksleight",
                "displayName": "Jack Sleight",
                "active": true
            }
        },
        "created": {
            "name": "created",
            "type": "java.util.Date",
            "value": "2007-08-22T11:33:05.000+0000"
        },
        "updated": {
            "name": "updated",
            "type": "java.util.Date",
            "value": "2009-01-09T14:53:04.000+0000"
        },
        "customfield_10041": {
            "name": "Tags",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:labels"
        },
        "description": {
            "name": "description",
            "type": "java.lang.String",
            "value": "The createRow method does not set default data based on the table metadata. Looking at the source it seems that it was intended, but the feature was never added:\n\n{code}\n$defaults = array_combine($this->_cols, array_fill(0, count($this->_cols), null));\n$keys = array_flip($this->_cols);\n$data = array_intersect_key($data, $keys);\n$data = array_merge($defaults, $data);\n{code}\n\nThe $defaults variable is currently just filled with nulls. Simple enough to add:\n\n{code}\n$defaults = array_combine($this->_cols, array_fill(0, count($this->_cols), null));\nforeach ($this->_cols as $col) {\n\tif (isset($this->_metadata[$col]['DEFAULT'])) {\n\t\t$defaults[$col] = $this->_metadata[$col]['DEFAULT'];\n\t}\n}\n{code}"
        },
        "priority": {
            "name": "priority",
            "type": "com.atlassian.jira.issue.priority.Priority",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/priority\/3",
                "name": "Major"
            }
        },
        "duedate": {
            "name": "duedate",
            "type": "java.util.Date"
        },
        "customfield_10022": {
            "name": "Fix Version Priority",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:select",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/customFieldOption\/10039",
                "value": "  Should Have"
            }
        },
        "watcher": {
            "name": "watcher",
            "type": "watcher",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-1870\/watchers",
                "isWatching": false,
                "watchCount": 17
            }
        },
        "worklog": {
            "name": "worklog",
            "type": "worklog",
            "value": [

            ]
        },
        "status": {
            "name": "status",
            "type": "com.atlassian.jira.issue.status.Status",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/status\/6",
                "name": "Closed"
            }
        },
        "labels": {
            "name": "labels",
            "type": "com.atlassian.jira.issue.label.Label",
            "value": [

            ]
        },
        "assignee": {
            "name": "assignee",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=ralph",
                "name": "ralph",
                "displayName": "Ralph Schindler",
                "active": true
            }
        },
        "links": {
            "name": "links",
            "type": "issuelinks",
            "value": [
                {
                    "issueKey": "ZF-2450",
                    "issue": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-2450",
                    "type": {
                        "name": "Dependency",
                        "direction": "INBOUND",
                        "description": "is dependecy of"
                    }
                }
            ]
        },
        "attachment": {
            "name": "attachment",
            "type": "attachment",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/attachment\/11033",
                    "filename": "Zend_Db_Table_Abstract defaults.diff",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=jplock",
                        "name": "jplock",
                        "displayName": "Justin Plock",
                        "active": true
                    },
                    "created": "2008-01-04T09:32:57.000+0000",
                    "size": 903,
                    "mimeType": "application\/octet-stream",
                    "content": "http:\/\/fw02.zend.com\/issues\/secure\/attachment\/11033\/Zend_Db_Table_Abstract+defaults.diff"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/attachment\/11031",
                    "filename": "Zend_Db_Table_Abstract defaults.diff",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=jplock",
                        "name": "jplock",
                        "displayName": "Justin Plock",
                        "active": true
                    },
                    "created": "2008-01-03T13:44:16.000+0000",
                    "size": 753,
                    "mimeType": "application\/octet-stream",
                    "content": "http:\/\/fw02.zend.com\/issues\/secure\/attachment\/11031\/Zend_Db_Table_Abstract+defaults.diff"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/attachment\/11030",
                    "filename": "Zend_Db_Table_Abstract defaults.diff",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=jplock",
                        "name": "jplock",
                        "displayName": "Justin Plock",
                        "active": true
                    },
                    "created": "2008-01-03T11:51:29.000+0000",
                    "size": 720,
                    "mimeType": "application\/octet-stream",
                    "content": "http:\/\/fw02.zend.com\/issues\/secure\/attachment\/11030\/Zend_Db_Table_Abstract+defaults.diff"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/attachment\/11091",
                    "filename": "Zend_Db_Table_Abstract_diffraport.htm",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=kamiln",
                        "name": "kamiln",
                        "displayName": "Kamil Nowakowski",
                        "active": true
                    },
                    "created": "2008-01-14T16:19:51.000+0000",
                    "size": 173438,
                    "mimeType": "text\/html",
                    "content": "http:\/\/fw02.zend.com\/issues\/secure\/attachment\/11091\/Zend_Db_Table_Abstract_diffraport.htm"
                }
            ]
        },
        "sub-tasks": {
            "name": "sub-tasks",
            "type": "issuelinks",
            "value": [

            ]
        },
        "versions": {
            "name": "versions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [

            ]
        },
        "project": {
            "name": "project",
            "type": "com.atlassian.jira.project.Project",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/project\/ZF",
                "key": "ZF",
                "name": "Zend Framework",
                "roles": {

                }
            }
        },
        "components": {
            "name": "components",
            "type": "com.atlassian.jira.bc.project.component.ProjectComponent",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/component\/10133",
                    "id": 10133,
                    "name": "Zend_Db_Table",
                    "description": "Lightweight OO interface to database tables and rowsets.",
                    "isAssigneeTypeValid": false
                }
            ]
        },
        "comment": {
            "name": "comment",
            "type": "com.atlassian.jira.issue.fields.CommentSystemField",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/16437",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=bkarwin",
                        "name": "bkarwin",
                        "displayName": "Bill Karwin",
                        "active": true
                    },
                    "body": "Assign to Bill Karwin.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=bkarwin",
                        "name": "bkarwin",
                        "displayName": "Bill Karwin",
                        "active": true
                    },
                    "created": "2007-08-24T17:49:55.000+0000",
                    "updated": "2007-08-24T17:49:55.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/17390",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=bkarwin",
                        "name": "bkarwin",
                        "displayName": "Bill Karwin",
                        "active": true
                    },
                    "body": "Note that {{isset()}} returns {{false}} if the default is 0 or empty string.\n\nAlso note that if the default is {{NULL}}, then setting {{$defaults[$col]}} to string 'NULL' won't work -- it'll try to insert a string instead of the SQL {{NULL}} state.\n\nIt would be better in cases where the user does not specify a value, to set the insert value to the SQL expression 'DEFAULT'.  This is valid and standard SQL syntax.  For example:\n{code}\nINSERT INTO mytable (a, b, c) VALUES (10, 'string', DEFAULT)\n{code}\n\nThis automatically picks up the default value for the respective column.  With the Zend_Db interface, you'd have to insert a Zend_Db_Expr('DEFAULT').",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=bkarwin",
                        "name": "bkarwin",
                        "displayName": "Bill Karwin",
                        "active": true
                    },
                    "created": "2007-11-05T12:58:02.000+0000",
                    "updated": "2007-11-05T12:58:02.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/17449",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=jacksleight",
                        "name": "jacksleight",
                        "displayName": "Jack Sleight",
                        "active": true
                    },
                    "body": "{code}\nINSERT INTO mytable (a, b, c) VALUES (10, 'string', DEFAULT)\n{code}\n\nAh ha, I didn't know you could do that, thanks. That would certianly be a better way to do it.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=jacksleight",
                        "name": "jacksleight",
                        "displayName": "Jack Sleight",
                        "active": true
                    },
                    "created": "2007-11-07T14:55:50.000+0000",
                    "updated": "2007-11-07T14:55:50.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/17450",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=darby",
                        "name": "darby",
                        "displayName": "Darby Felton",
                        "active": true
                    },
                    "body": "Can we resolve this as not an issue?",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=darby",
                        "name": "darby",
                        "displayName": "Darby Felton",
                        "active": true
                    },
                    "created": "2007-11-07T15:12:10.000+0000",
                    "updated": "2007-11-07T15:12:10.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/17457",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=jacksleight",
                        "name": "jacksleight",
                        "displayName": "Jack Sleight",
                        "active": true
                    },
                    "body": "I don't thinks so. This is still an issue, Bill just provided an alternative (and better) solution to the one I posted.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=jacksleight",
                        "name": "jacksleight",
                        "displayName": "Jack Sleight",
                        "active": true
                    },
                    "created": "2007-11-07T15:58:41.000+0000",
                    "updated": "2007-11-07T15:58:41.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/17460",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=aaroncampbell",
                        "name": "aaroncampbell",
                        "displayName": "Aaron D. Campbell",
                        "active": true
                    },
                    "body": "I agree with Jack.  It's still an issue, any non-specified data should default to DEFAULT.  I think it would be the most intuitive way to do it.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=aaroncampbell",
                        "name": "aaroncampbell",
                        "displayName": "Aaron D. Campbell",
                        "active": true
                    },
                    "created": "2007-11-07T18:29:19.000+0000",
                    "updated": "2007-11-07T18:29:19.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/17461",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=darby",
                        "name": "darby",
                        "displayName": "Darby Felton",
                        "active": true
                    },
                    "body": "Okay, thanks guys; I must have misunderstood the comments. :)",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=darby",
                        "name": "darby",
                        "displayName": "Darby Felton",
                        "active": true
                    },
                    "created": "2007-11-07T18:43:56.000+0000",
                    "updated": "2007-11-07T18:43:56.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/17509",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=beeboo",
                        "name": "beeboo",
                        "displayName": "B. Charbonneau",
                        "active": true
                    },
                    "body": "Coming across this issue recently, I resolved it by subclassing Zend_Db_Table and Zend_Db_Table_Row.\n\nFrom what I could tell, the null-filled-data-array arose because of _Row's only means of determining a valid column was through the array_keys of it's $_data property. Without a null-filled $_data property, _Row objects created from createRow() will throw \"not in row\" exceptions whenever anything is set.\n\nI tried to figure out a way to get around the issues Bill metioned above with prefilling the $data array with the default values but couldn't come up with one. I instead came up with this solution.\n\nSince _Row is already connecting to it's _Table parent class and getting the primary key, I figured it might as well also grab an array of valid column names too, and then use that to validate get & set calls, rather than just the data array.\n\nmy subclassed _Db_Table replaces the createRow() function with:\n{quote}\n    public function createRow(array $data = array())\n    {\n        \/\/ the only difference from this to the parent are the commented-out-lines\n        \/* $defaults = array_combine($this->_cols, array_fill(0, count($this->_cols), null)); *\/\n        $keys = array_flip($this->_cols);\n        $data = array_intersect_key($data, $keys);\n        \/* $data = array_merge($defaults, $data); *\/\n        \n        $config = array(\n            'table'   => $this,\n            'data'    => $data,\n            'stored'  => false\n        );\n\n        Zend_Loader::loadClass($this->_rowClass);\n        return new $this->_rowClass($config);\n    }\n{quote}\n\nAnd my _Db_Table_Row class is:\n{quote}\nclass Tabkey_Db_Table_Row extends Zend_Db_Table_Row_Abstract  {\n\n    \/**\n     * The table column names derived from Zend_Db_Adapter_Abstract::describeTable().\n     *\n     * @var array\n     *\/\n    protected $_cols;\n\n\t\n    \/**\n     * Constructor.\n     *\n     * Supported params for $config are:-\n     * - table       = class name or object of type Zend_Db_Table_Abstract\n     * - data        = values of columns in this row.\n     *\n     * @param  array $config OPTIONAL Array of user-specified config options.\n     * @return void\n     * @throws Zend_Db_Table_Row_Exception\n     *\/\n    public function __construct(array $config) {\n        parent::__construct($config);\n\n        \/\/ Retrieve column names from table schema\n        if ($table = $this->_getTable()) {\n            $info = $table->info();\n            $this->_cols = array_keys((array)$info['metadata']);\n        }\n        \n    }\n    \n    \/**\n     * Retrieve row field value\n     *\n     * @param  string $columnName The user-specified column name.\n     * @return string             The corresponding column value.\n     * @throws Zend_Db_Table_Row_Exception if the $columnName is not a column in the row.\n     *\/\n    public function __get($columnName)\n    {\n        $columnName = $this->_transformColumn($columnName);\n        if (!array_key_exists($columnName, $this->_data) AND !in_array($columnName, $this->_cols)) {\n            require_once 'Zend\/Db\/Table\/Row\/Exception.php';\n            throw new Zend_Db_Table_Row_Exception(\"Specified column \\\"$columnName\\\" is not in the row\");\n        }\n        return $this->_data[$columnName];\n    }\n\n    \/**\n     * Set row field value\n     *\n     * @param  string $columnName The column key.\n     * @param  mixed  $value      The value for the property.\n     * @return void\n     * @throws Zend_Db_Table_Row_Exception\n     *\/\n    public function __set($columnName, $value)\n    {\n        $columnName = $this->_transformColumn($columnName);\n        if (!array_key_exists($columnName, $this->_data) AND !in_array($columnName, $this->_cols)) {\n            require_once 'Zend\/Db\/Table\/Row\/Exception.php';\n            throw new Zend_Db_Table_Row_Exception(\"Specified column \\\"$columnName\\\" is not in the row\");\n        }\n        $this->_data[$columnName] = $value;\n    }\n\n    \/**\n     * Test existence of row field\n     *\n     * @param  string  $columnName   The column key.\n     * @return boolean\n     *\/\n    public function __isset($columnName)\n    {\n        $columnName = $this->_transformColumn($columnName);\n        return array_key_exists($columnName, $this->_data);\n    }\n    \n}\n{quote}",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=beeboo",
                        "name": "beeboo",
                        "displayName": "B. Charbonneau",
                        "active": true
                    },
                    "created": "2007-11-09T21:45:55.000+0000",
                    "updated": "2007-11-09T21:45:55.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/17510",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=beeboo",
                        "name": "beeboo",
                        "displayName": "B. Charbonneau",
                        "active": true
                    },
                    "body": "Wow, thats a mess. Let me attach these as a file...\n\n",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=beeboo",
                        "name": "beeboo",
                        "displayName": "B. Charbonneau",
                        "active": true
                    },
                    "created": "2007-11-09T21:48:28.000+0000",
                    "updated": "2007-11-09T21:48:28.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/17511",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=beeboo",
                        "name": "beeboo",
                        "displayName": "B. Charbonneau",
                        "active": true
                    },
                    "body": "http:\/\/apathyant.com\/~inertia\/create_row_subclassing.phps",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=beeboo",
                        "name": "beeboo",
                        "displayName": "B. Charbonneau",
                        "active": true
                    },
                    "created": "2007-11-09T21:56:55.000+0000",
                    "updated": "2007-11-09T21:56:55.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/18157",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=jplock",
                        "name": "jplock",
                        "displayName": "Justin Plock",
                        "active": true
                    },
                    "body": "I think this patch should fix the issue and be applied before the next minor release.  I can commit this if needed to both the trunk and release-1.0.  Let me know.  Thanks.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=jplock",
                        "name": "jplock",
                        "displayName": "Justin Plock",
                        "active": true
                    },
                    "created": "2008-01-03T11:51:29.000+0000",
                    "updated": "2008-01-03T11:51:29.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/18159",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=jplock",
                        "name": "jplock",
                        "displayName": "Justin Plock",
                        "active": true
                    },
                    "body": "Re-organized the column checks in the if() statement",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=jplock",
                        "name": "jplock",
                        "displayName": "Justin Plock",
                        "active": true
                    },
                    "created": "2008-01-03T13:44:16.000+0000",
                    "updated": "2008-01-03T13:44:16.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/18163",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=eric",
                        "name": "eric",
                        "displayName": "Eric Coleman",
                        "active": true
                    },
                    "body": "Justin, for that patch to work, you need to make the following modification:\n\nZend\/Db\/Table\/Abstract.php line 776:\n\nreplace:\n{code}\nif ($this->_sequence === true && !isset($data[$pkIdentity])) {\n{code}\n\nwith:\n{code}\nif ($this->_sequence === true && (!isset($data[$pkIdentity]) || $data[$pkIdentity] instanceof Zend_Db_Expr)) {\n{code}",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=eric",
                        "name": "eric",
                        "displayName": "Eric Coleman",
                        "active": true
                    },
                    "created": "2008-01-04T02:44:07.000+0000",
                    "updated": "2008-01-04T02:44:07.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/18164",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=eric",
                        "name": "eric",
                        "displayName": "Eric Coleman",
                        "active": true
                    },
                    "body": "I messed up :p\n\nZend\/Db\/Table\/Abstract.php line 761:\n\nfind:\n{code}if (array_key_exists($pkIdentity, $data) && $data[$pkIdentity] === null) {{code}\n\nreplace with:\n{code}if (array_key_exists($pkIdentity, $data) && ($data[$pkIdentity] === null || $data[$pkIdentity] instanceof Zend_Db_Expr)) {{code}\n\n",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=eric",
                        "name": "eric",
                        "displayName": "Eric Coleman",
                        "active": true
                    },
                    "created": "2008-01-04T02:49:30.000+0000",
                    "updated": "2008-01-04T02:49:30.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/18166",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=jplock",
                        "name": "jplock",
                        "displayName": "Justin Plock",
                        "active": true
                    },
                    "body": "If a column is part of the primary key, the default will be set to null, otherwise if the column has metadata and the DEFAULT field exists, the column will have a default value of Zend_Db_Expr('DEFAULT')",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=jplock",
                        "name": "jplock",
                        "displayName": "Justin Plock",
                        "active": true
                    },
                    "created": "2008-01-04T09:32:57.000+0000",
                    "updated": "2008-01-04T09:32:57.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/18167",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=jplock",
                        "name": "jplock",
                        "displayName": "Justin Plock",
                        "active": true
                    },
                    "body": "I just uploaded a new patch which does what I described in my comment note above.  I think that should work.  It does assume that most people will set their primary key values to null on a single primary key or if it's a composite key, they would set the other, non-autoincrementating parts at least.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=jplock",
                        "name": "jplock",
                        "displayName": "Justin Plock",
                        "active": true
                    },
                    "created": "2008-01-04T09:34:52.000+0000",
                    "updated": "2008-01-04T09:34:52.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/18303",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=kamiln",
                        "name": "kamiln",
                        "displayName": "Kamil Nowakowski",
                        "active": true
                    },
                    "body": "Hi  Justin Plock nice patch, but   \nearlier was only \n$defaults = array_combine($this->_cols, array_fill(0, count($this->_cols), null)); \nSo  all columns have null value\nI think you shoud add this line  \n      else\n            \t$defaults[$col] = null;",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=kamiln",
                        "name": "kamiln",
                        "displayName": "Kamil Nowakowski",
                        "active": true
                    },
                    "created": "2008-01-14T04:05:23.000+0000",
                    "updated": "2008-01-14T04:05:23.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/18312",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=jplock",
                        "name": "jplock",
                        "displayName": "Justin Plock",
                        "active": true
                    },
                    "body": "The reason I didn't include the else is because from what I could tell in the Zend_Db_Adapters, $this->_metadata[$col]['DEFAULT'] is always populated no matter what, so the else would never be executed.  We can definitely add it though on the rare edge case when DEFAULT doesn't exist.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=jplock",
                        "name": "jplock",
                        "displayName": "Justin Plock",
                        "active": true
                    },
                    "created": "2008-01-14T08:28:48.000+0000",
                    "updated": "2008-01-14T08:28:48.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/18313",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=jplock",
                        "name": "jplock",
                        "displayName": "Justin Plock",
                        "active": true
                    },
                    "body": "The one thing I noticed with this patch though is that it does break cases where people were doing (myself included):\n{code}\npublic function insert($data) {\n  if (!isset($data['created'])) {\n    $data['created'] = time();\n  }\n  return parent::insert($data);\n}\n{code}\nThis will no longer work because isset($data['created']) will always return true now.  You'd need to do:\n{code}\npublic function insert($data) {\n  if (!isset($data['created']) || ($data['created'] instanceof Zend_Db_Expr)) {\n    $data['created'] = time();\n  }\n  return parent::insert($data);\n}\n{code}\nNot sure how big of a deal this is for people.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=jplock",
                        "name": "jplock",
                        "displayName": "Justin Plock",
                        "active": true
                    },
                    "created": "2008-01-14T08:32:16.000+0000",
                    "updated": "2008-01-14T08:32:16.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/18319",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=kamiln",
                        "name": "kamiln",
                        "displayName": "Kamil Nowakowski",
                        "active": true
                    },
                    "body": "I have found solution for your issue with insert\nI use your patch,  but now it is in function insert , you can also set up using defaults\ni am attaching  diff raport sorry for the format but  i don't have any good tool to do it ",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=kamiln",
                        "name": "kamiln",
                        "displayName": "Kamil Nowakowski",
                        "active": true
                    },
                    "created": "2008-01-14T16:19:51.000+0000",
                    "updated": "2008-01-14T16:19:51.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/19184",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=peptolab",
                        "name": "peptolab",
                        "displayName": "Simon Mundy",
                        "active": true
                    },
                    "body": "This all sounds a bit too much work for me. Surely the default values are only meant to be set when the data is actually committed? In this case, what I believe we should be doing is passing as little information to the 'insert' method as possible.\n\nE.g. If I create a new row, set a 'name' and 'description' field and don't touch anything else, then only those two fields are passed to the INSERT, thereby allowing the database to manage its own defaults and there's less possibility of messing up something on the ZF side.\n\nSo the short answer is - track changes to a new row via the 'clean'\/'dirty' tags in Zend_Db_Table_Row and for an insert, only send the fields that have been explicitly set. For updates, naturally the entire row of 'clean' and 'dirty' changes would be sent.\n\nI'd like to resolve this ASAP as it's similar to another issue I'm trying to fix - any comments?",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=peptolab",
                        "name": "peptolab",
                        "displayName": "Simon Mundy",
                        "active": true
                    },
                    "created": "2008-02-16T21:20:52.000+0000",
                    "updated": "2008-02-16T21:20:52.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/19190",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=jacksleight",
                        "name": "jacksleight",
                        "displayName": "Jack Sleight",
                        "active": true
                    },
                    "body": "Simon: I agree, that sounds like the obvious and ideal solution, more or less the same as Bill Karwin's idea in his seconds comment, only without the DEFAULT keyword. I've no idea why anything more complicated would be required.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=jacksleight",
                        "name": "jacksleight",
                        "displayName": "Jack Sleight",
                        "active": true
                    },
                    "created": "2008-02-17T05:31:03.000+0000",
                    "updated": "2008-02-17T05:31:03.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/19193",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=aaroncampbell",
                        "name": "aaroncampbell",
                        "displayName": "Aaron D. Campbell",
                        "active": true
                    },
                    "body": "That would fix the issue for me.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=aaroncampbell",
                        "name": "aaroncampbell",
                        "displayName": "Aaron D. Campbell",
                        "active": true
                    },
                    "created": "2008-02-17T08:40:30.000+0000",
                    "updated": "2008-02-17T08:40:30.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/19205",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=peptolab",
                        "name": "peptolab",
                        "displayName": "Simon Mundy",
                        "active": true
                    },
                    "body": "Committed to trunk - I'll close this issue for now but please let me know ASAP if, for some reason, it's still not satisfying the requirements of this issue.\n\nThe major reason for applying this strategy is to allow default values to be evaluated, rather than having them simply passed as a string. Off the top of my head 'CURRENT_TIMESTAMP' is one such defaults keyword from MySQL. If you still wish to explicitly pass default values to a row before it is inserted, the best bet is to subclass 'Zend_Db_Table_Row' and pass in values via the '_update' method.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=peptolab",
                        "name": "peptolab",
                        "displayName": "Simon Mundy",
                        "active": true
                    },
                    "created": "2008-02-17T15:52:31.000+0000",
                    "updated": "2008-02-17T15:52:31.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/20110",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=wil",
                        "name": "wil",
                        "displayName": "Wil Sinclair",
                        "active": true
                    },
                    "body": "This issue should have been fixed for the 1.5 release.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=wil",
                        "name": "wil",
                        "displayName": "Wil Sinclair",
                        "active": true
                    },
                    "created": "2008-03-21T17:05:32.000+0000",
                    "updated": "2008-03-21T17:05:32.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/20288",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=wil",
                        "name": "wil",
                        "displayName": "Wil Sinclair",
                        "active": true
                    },
                    "body": "Please categorize\/fix as needed.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=wil",
                        "name": "wil",
                        "displayName": "Wil Sinclair",
                        "active": true
                    },
                    "created": "2008-03-25T20:43:51.000+0000",
                    "updated": "2008-03-25T20:43:51.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/21043",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=wil",
                        "name": "wil",
                        "displayName": "Wil Sinclair",
                        "active": true
                    },
                    "body": "This doesn't appear to have been fixed in 1.5.0. Please update if this is not correct.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=wil",
                        "name": "wil",
                        "displayName": "Wil Sinclair",
                        "active": true
                    },
                    "created": "2008-04-18T13:12:03.000+0000",
                    "updated": "2008-04-18T13:12:03.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/22663",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=elazar",
                        "name": "elazar",
                        "displayName": "Matthew Turland",
                        "active": true
                    },
                    "body": "Within createRow is the following block:\n\n{code:php}\n$config = array(\n            'table'    => $this,\n            'data'     => $defaults,\n            'readOnly' => false,\n            'stored'   => false\n        );\n{\/code}\n\nI believe the value for 'data' should be $data rather than $defaults here.\n\nRegardless of whether support for default values is added or not, I think this is an issue that should be addressed.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=elazar",
                        "name": "elazar",
                        "displayName": "Matthew Turland",
                        "active": true
                    },
                    "created": "2008-06-26T14:16:11.000+0000",
                    "updated": "2008-06-26T14:16:11.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/22668",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=elazar",
                        "name": "elazar",
                        "displayName": "Matthew Turland",
                        "active": true
                    },
                    "body": "Actually, disregard my last comment. Took me a bit to see why $defaults is used instead of $data. Sorry about that.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=elazar",
                        "name": "elazar",
                        "displayName": "Matthew Turland",
                        "active": true
                    },
                    "created": "2008-06-27T08:48:29.000+0000",
                    "updated": "2008-06-27T08:48:29.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/22919",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=cortex",
                        "name": "cortex",
                        "displayName": "sebastien crocquesel",
                        "active": true
                    },
                    "body": "I'm not sure if it's a good idea to use the DEFAULT value as one will need to do save() and thus refresh() (2 queries) to obtain the value and work with it while the metadata should already have it.\nAnd, i'm doing things were one of my row need to know this value before being saved.\nAs for the problem with default value being set while you override insert to put another one, then i think there is a problem in the design. The question is \"default value should be set by the database or by code logic\", but i guess trying to have both is not a good idea.\n\nFinally, i don't have use the Zend_Data_Table with something else than MySql. MySql doesn't accept expression as default value only constant but for timestamp column. Other RDBMS accept expressions like now() or getdate() for example. I don't know how and if it's possible to obtain this and wrap wih a Zend_Db_Expr when appropriate. In this situation, i must admit that there is no other way than saving and refresh to get the value, but this is clearly defined when designing the database schema.\n",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=cortex",
                        "name": "cortex",
                        "displayName": "sebastien crocquesel",
                        "active": true
                    },
                    "created": "2008-07-17T11:18:24.000+0000",
                    "updated": "2008-07-17T11:18:24.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/22938",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=ralph",
                        "name": "ralph",
                        "displayName": "Ralph Schindler",
                        "active": true
                    },
                    "body": "Ok, I have done some testing and lots of reading and I think I have come up with a solution to this problem\/feature request.\n\nEssentially, we have two sources (and two minds) of where default values should come from (when no value for a specific property\/column has been supplied) - The code logic and the database itself, both are valid paradigms of data storage & data maintainability.\n\nAt current, this method actually does the correct logic, even though the name of the method is a little amibious.  (You are not actually getting a row from the database, you are creating an object that IF SAVED, could become a new row in the database.\n\nKeep in mind, defaulting values IS NOT something that should be default behavior, but it should be configured for.  Some applications will want to set default values by code, and some applications will defer to the DB for default values (either implied by the table structure, or set upon first save).\n\nSo, here is what I propose we do:\n\n1) a Class level property to control how createRow() handles defaults.  Its default setting is $_defaultSource = self::DEFAULTS_NONE.  Other options would be self::DEFAULTS_CLASS and self::DEFAULTS_DB.   DEFAULTS_CLASS will be allowed to get\/define default values from a new class property $_defaultData.  DEFAULTS_DB will take \"static only\" values from the database and set them as defaults.\n\n(Another option I am not yet supporting is the ability to set the defaultSource to DEFAULTS_DB_DYNAMIC.  This option would allow (at create time, the class to call all the dynamic functions, like now(), timestamp() and any custom expressions to retrieve a value for the new row.  Keep in mind though, these values would not represent the time the actual record was inserted, but the time and data returned when the object was created - this could be good or bad, tell me what you think about that).\n\n2) an option parameter to createRow() - public function createRow(array $data = array(), $defaultSource = null) -- options for this will be the same as above, this will allow for explicitly calling for particular functionality at call time instead of at class definition time.\n\n3) in cases where the row has been created and $_defaultSource = DEFAULTS_DB, the save() routine will refresh automatically after the first save().\n\nIf we are to do the above, we maintain backwards-compatibility as well as allow for userland centric application data to have just as much control over default values as applications that are database centric thus allowing for the most flexibility for all developers.\n\nOk - What do you think? Go.\n\n-ralph",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=ralph",
                        "name": "ralph",
                        "displayName": "Ralph Schindler",
                        "active": true
                    },
                    "created": "2008-07-18T09:27:40.000+0000",
                    "updated": "2008-07-18T09:27:40.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/22939",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=elazar",
                        "name": "elazar",
                        "displayName": "Matthew Turland",
                        "active": true
                    },
                    "body": "I think Ralph's suggestion is well thought-out and a good compromise to implement the two differing behaviors requested while maintaining BC. I say go for it! :D",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=elazar",
                        "name": "elazar",
                        "displayName": "Matthew Turland",
                        "active": true
                    },
                    "created": "2008-07-18T10:09:00.000+0000",
                    "updated": "2008-07-18T10:09:00.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/22956",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=kamiln",
                        "name": "kamiln",
                        "displayName": "Kamil Nowakowski",
                        "active": true
                    },
                    "body": " +1 for Ralph suggestion ",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=kamiln",
                        "name": "kamiln",
                        "displayName": "Kamil Nowakowski",
                        "active": true
                    },
                    "created": "2008-07-20T02:44:31.000+0000",
                    "updated": "2008-07-20T02:44:31.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/22963",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=ralph",
                        "name": "ralph",
                        "displayName": "Ralph Schindler",
                        "active": true
                    },
                    "body": "This has been implemented in trunk as of r10259.\n\nBelow is a sample usage script that demonstrates all of the capabilities.   Please let me know if this suites your needs.\n\n{code}\n\n<?php\n\n\nset_include_path(\n    \/\/ set your include path here to sample run this.\n    '\/Users\/ralphschindler\/Projects\/repositories\/framework\/standard\/trunk\/library\/'\n    );\nrequire_once 'Zend\/Loader.php';\nZend_Loader::registerAutoload();\n\n\/\/ change this if need be to something that has access to the test table\n$db = Zend_Db::factory('PDO_MYSQL', array('host'=> 'localhost', 'username'=>'test','password'=>'test','dbname'=>'test'));\n\n\n$db->query('DROP TABLE IF EXISTS `people_test`');\n$db->query('\n    CREATE TABLE IF NOT EXISTS `people_test` (\n      `id` int(11) NOT NULL auto_increment,\n      `first_name` varchar(255) NOT NULL,\n      `last_name` varchar(255) NOT NULL,\n      `political_party` varchar(255) default \\'Independent\\',\n      `gender` enum(\\'M\\',\\'F\\') NOT NULL default \\'M\\',\n      `graduation_year` year(2) NOT NULL default \\'95\\',\n      `created_on` date NOT NULL,\n      `updated_on` timestamp NOT NULL default CURRENT_TIMESTAMP,\n      PRIMARY KEY  (`id`)\n    ) ENGINE=MyISAM;\n    ');\n\nZend_Db_Table_Abstract::setDefaultAdapter($db);\n\n\n\/**\n * NO DEFAULTS TEST\n *\n *\/\n\n\nclass MyTable_NoDefaults extends Zend_Db_Table_Abstract\n{\n    protected $_name = 'people_test';\n}\n\n$tableNoDefaults = new MyTable_NoDefaults();\n$rowNoDefaults = $tableNoDefaults->createRow(array('first_name'=>'Joe', 'last_name'=>'Smith'));\n\necho '\/\/ DEMONSTRATE no defaults: ' . PHP_EOL;\nZend_Debug::dump($rowNoDefaults->toArray());\n\n\n\n\n\n\/**\n * DEFAULTS FROM DB \n *\n *\/\n\n\n\nclass MyTable_DefaultsInDb extends Zend_Db_Table_Abstract\n{\n    protected $_name = 'people_test';\n    protected $_defaultSource = self::DEFAULT_DB;\n    \/**\n     * in these values when defaultSource is set to Db, true will implictly take the default\n     * value even if its NULLABLE, and setting a property to false will disclude any properties\n     * default value explicitly.  This is useful when a property might have a default value for example\n     * such as CURRENT_TIMESTAMP\n     *\/ \n    protected $_defaultValues = array('updated_on' => false);\n}\n\n$tableDefaultsDb = new MyTable_DefaultsInDb();\n$rowDefaultsDb = $tableDefaultsDb->createRow(array('first_name'=>'Joe', 'last_name'=>'Smith'));\n\necho '\/\/ DEMONSTRATE Db Defaults: ' . PHP_EOL;\nZend_Debug::dump($rowDefaultsDb->toArray());\n\n\n\n\n\n\/**\n * DEFAULTS FROM CLASS\n *\n *\/\n\n\nclass MyTable_DefaultsInClass extends Zend_Db_Table_Abstract\n{\n    protected $_name = 'people_test';\n    protected $_defaultSource = self::DEFAULT_CLASS;\n    protected $_defaultValues = array(\n        'gender' => 'F',\n        'graduation_year' => 97\n        );\n}\n\n$tableDefaultsClass = new MyTable_DefaultsInClass();\n$rowDefaultsClass = $tableDefaultsClass->createRow(array('first_name'=>'Joe', 'last_name'=>'Smith'));\n\necho '\/\/ DEMONSTRATE Class Defaults: ' . PHP_EOL;\nZend_Debug::dump($rowDefaultsClass->toArray());\n\n\n\/\/ cleanup\n$db->query('DROP TABLE IF EXISTS `people_test`');\n\n{code}",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=ralph",
                        "name": "ralph",
                        "displayName": "Ralph Schindler",
                        "active": true
                    },
                    "created": "2008-07-21T09:18:58.000+0000",
                    "updated": "2008-07-21T09:18:58.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/22990",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=bkarwin",
                        "name": "bkarwin",
                        "displayName": "Bill Karwin",
                        "active": true
                    },
                    "body": "I understand the objective of this feature (which has evolved from the initial report):  a new, unsaved Row object has fields missing, or uses the value {{Zend_Db_Expr('DEFAULT')}}, which doesn't have enough information to be useful.  Ideally, a developer wants all fields of the Row object to be populated with values, so he can read the fields and choose to change them before a newly created Row object has been saved.  Fields he has not specified in the initial {{createRow()}} call should be populated automatically with defaults, either from the table class or from the database metadata.\n\nThere are some tricky cases here.  How should a field represent auto-increment columns, or columns for which the default is defined using special values like {{USER}} or {{CURRENT_TIMESTAMP}}?  \n\nAlso triggers can override some fields during insert or update, but there's no way predict what a trigger will do, so don't try to account for this case in the Framework (same decision was made with respect to fetching a primary key value that is altered by a trigger -- i.e. don't handle this case).\n\nI'm not in favor of specifying defaults in the class.  That's what the {{DEFAULT}} declaration in the database is for.  Allowing defaults to be specified in the class opens the possibility that these defaults will be different from those defined in the database, which leads to confusion.\n\nFor example, suppose I {{createRow()}} and leave a couple of columns unspecified, expecting the db's definition for column defaults to take effect, but they aren't -- the class had different defaults of its own.  This sort of blurs the definition of \"defaults\".  It's even more confusing because I can use a special value like {{Zend_Db_Expr('DEFAULT')}} as I create the Row object, bypassing the class' idea of defaults, instead using the db's idea of defaults.\n\nIf it were me, I wouldn't allow the table class to have the ability to declare defaults at all.  Just let the db metadata determine default values.\n\nOne of the goals stated for ZF when I joined the project was to avoid the philosophy that people hated about Perl: TMTOWTDI (\"There's More Than One Way To Do It\").  Customers told Zend that they didn't want infinite choices, they wanted a framework that would guide them to one solution -- the \"right\" solution -- that is easiest to use, serves most needs, and represents the best practice.  ZF will \"jump the shark\" if it tries to support every suggested idea as optional behavior.\n\nbq. By the way, I have a similar opinion regarding implementing cascading update and delete in the Table class.  What a bad idea! You can't implement cascading operations outside the database engine and preserve atomicity and consistency.  This is another case of excessive TMTOWTDI.  The database already has metadata to handle cascading operations -- safely, in fact -- so this should be the solution the framework guides developers to use.  I believe the same is true for column defaults, and I wouldn't like to see the same mistake made here as was made with cascading operations.\n\nJustin Plock also had a comment up there (14\/Jan\/08) that is important:  auto-filling unspecified fields defeats some types of custom Row logic that the developer had implemented.  *This change therefore breaks existing ZF applications in silent ways.*  I would say that for this reason alone, the behavior of auto-filling unspecified fields should be postponed until ZF 2.0, since severe BC breakage is permitted only at major versions.\n\nAnyway back to the code Ralph committed, I think there might be some logic errors in the complex {{if()}} statement under the {{DEFAULT_DB}} case.  Perhaps some uses of {{&&}} need to be {{||}}.  \n\nBut I'm not sure why the logic is needed at all.  Isn't it simpler and will achieve the same effect to do the following:\n{code}\nif ($defaultSource == self::DEFAULT_DB) {\n  foreach ($this->_metadata as $metadataName => $metadata) {\n    $defaults[$metadataName] = $metadata['DEFAULT'];\n  }\n}\n{code}\nI.e. if I configure my table class with {{DEFAULT_DB}} as the source of defaults, shouldn't it use the database metadata for defaults, and ignore any {{$_defaultValues}} defined?  And again, unnecessary if defaults are always taken from metadata rather than any class-defined values.\n\nYou need to write a *lot* of tests to prove that your solution behaves as intended in every case.  Basically write out a matrix of every permutation of how a PHP table class can be configured with respect to:\n- Definition of {{$defaultSource}} and {{$_defaultValues}} in the table class;\n- Definition of {{NULLABLE}} and {{DEFAULT}} in the database table;\n- Values, if any, you supply for the given column to the {{createRow()}} function, including {{Zend_Db_Expr('DEFAULT')}} and {{Zend_Db_Expr('NULL')}}.\n\nSo there are dozens of permutations you need to account for.  You don't necessarily need a separate unit test for every single permutation, because some may be mutually exclusive.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=bkarwin",
                        "name": "bkarwin",
                        "displayName": "Bill Karwin",
                        "active": true
                    },
                    "created": "2008-07-22T13:37:12.000+0000",
                    "updated": "2008-07-22T13:37:12.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/22996",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=jacksleight",
                        "name": "jacksleight",
                        "displayName": "Jack Sleight",
                        "active": true
                    },
                    "body": "Hi, \nWhen I reported this issue I had no idea it would become so complicated :) .\n\nFirst of all, for the same reasons as Bill states, I think the DEFAULTS_CLASS option is a bad idea. It doesn't make any sense to be able to define defaults in two separate places, and I cant think of any situation where you would want to, or need to.\n\nSecondly, am I correct in assuming that DEFAULTS_NONE pre-fills a new row object with nulls, and sends those nulls as part of the INSERT statement (current behaviour), and DEFAULTS_DB does the same, but excludes any rows that have not been explicitly set, thereby allowing the database to use its own defaults? If so, there's currently no method to pre-fill the row object with the values from the metadata, DEFAULTS_METADATA?\n\nThirdly, I cant see this as an option you'd use on a per row, or even per table basis, it wouldn't make any sense to use different methods within the same application, it'd just cause inconsistency and confusion. Therefore I think it should be set as a static property of the Zend_Db_Table_Abstract class.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=jacksleight",
                        "name": "jacksleight",
                        "displayName": "Jack Sleight",
                        "active": true
                    },
                    "created": "2008-07-23T01:54:24.000+0000",
                    "updated": "2008-07-23T01:54:24.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/23003",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=ralph",
                        "name": "ralph",
                        "displayName": "Ralph Schindler",
                        "active": true
                    },
                    "body": "\nSo Bill, let me preface all of this by saying that I am of two minds when it comes to this component.  The first is the database purist mind.  In this sense, I believe it makes the most sense when the database is developed first, and by the book, with a proper schema, proper naming conventions, proper constraints, proper indices, etc.  These types of systems are built by senior application developers who have an EXCELLENT understanding of proper database design, or they are designed by database architects -- in these systems, the database is not a product of the application.\n\nOn the other hand, I am of a mind that there are developers who build applications in a very \"code centric\" approach, and to these developers - a database is a datastore, and typically it is developed in tandem with an application.  This is not to say this is an improper paradigm of building an application - I am simply stating that this is as a fact of nature.  Not everyone can afford to have a DBA (or DB architect) in house.\n\nThat being said lets get into the specifics of the issues raised here.\n\nFrom my understanding - the original issue is asking simply for a means by which the column defaults (presumably when not NULLABLE), can become part of the $_data array prior to any call to save() (thus the unsaved row can still have the notions of these default before any communication with the database itself regarding this row - its an unattached row.)  To developers, this is ideal since it will allow them to create new \"rows\", interact with them at runtime, and have a single call to save().  Currently, if one wants default values defined within the db, it is necessary to make 2 calls to the database - createRow() -> save() -> interact with attached row -> save().\n\nThis bug report was filed because the above situation is not ideal. The REASON why this is not ideal is because developers are utilizing Zend_Db_Table as their model, which is not out of the scope of applications built on ZF.  Unfortunately, at current, to extend Zend_Db_Table as an application model means that the classes themselves must be extended instead of configured, this means that minimally, people have to extend Zend_Db_Table_Abstract.  If someone wanted to have custom \"row\"\/\"model\" behavior (like defaults), they now have to extend Zend_Db_Table_Row_Abstract, and configure it to work with their corresponding Zend_Db_Table table.  Again, when treating Zend_Db_Table as a model directly, the current situation is not ideal.\n\nLets talk about the proposed solution.\n\nThere are technically two features implemented here.  1) the ability to set default values in newly created (unattached rows) from database metadata, and 2) the ability to set default values in newly created unattached rows via configuration.  These two new features are MUTUALLY EXCLUSIVE.\n\nFor $_defaultSource = DEFAULT_DB, the $_defaultValues array is only used to explicitly include or exclude columns from utilizing database metadata.  Why would one want to do this?  In two situations.  One would want to explicitly INCLUDE a columns default value when that column is NULLABLE.  By setting its $_DefaultValue = array('somecolumn' => true), the default value will be used even if the column supports null values.  ON THE OTHER hand, a developer would want to explicitly EXCLUDE a value that might be the result of a trigger, user defined function or whatever... An example of this would be excluding default metadata where the columns default is actually CURRENT_TIMESTAMP.\n\nFor $_defaultSource = DEFAULT_CLASS, this is a little more straight forward.  This option allows a developer to set a list of default values for the columns to be used as the default values for $_data when a new row is created.\n\nLike I said before, these two usage scenarios are mutually exclusive.  The source can either be from DB or from CLASS, but not from both.  Also keep in mind, that without doing anything, the default behavior is DEFAULT_NONE where no defaults are set.  This is an OPT-IN feature, one would turn it on after deciding that defaults in unattached rows are something they need to support in their application and their applications models.\n\nSo, to bring this full circle.  The reason the are both DEFAULT_DB and DEFAULT_CLASS is to appease the two differing paradigms of development.  I understand where one might say that this is TMTOWTDI, but when applying that to an entire paradigm of development, you run into a few issues.  I liken it to saying - there is only one way to develop on the desktop - with an IDE.  This statement would exclude developers that are still working in notepad - and who is to say that they are not effective individuals.\n\nMore comments inline below:\n\n\nbq. There are some tricky cases here. How should a field represent auto-increment columns, or columns for which the default is defined using special values like USER or CURRENT_TIMESTAMP?\n\nbq. Also triggers can override some fields during insert or update, but there's no way predict what a trigger will do, so don't try to account for this case in the Framework (same decision was made with respect to fetching a primary key value that is altered by a trigger - i.e. don't handle this case).\n\nThe feature as implemented is not a silver bullet approach.  It is simply there to give the developer as much useful information about a row object as possible so that they are not locked into the 2 query update scheme.  See the explicit exclude above.\n\n\nbq. I'm not in favor of specifying defaults in the class. That's what the DEFAULT declaration in the database is for. Allowing defaults to be specified in the class opens the possibility that these defaults will be different from those defined in the database, which leads to confusion.\n\nYou are making 2 assumptions here.  The first is that the Zend_Db_Table is simply a gateway between the model and the database - and is actually not the model itself.  The second assumption is that the developer has made the decision to use the database as a RDBMS and not simply as a datastore.  Most times, developers will put their eggs in the code basket before they put them in the database basket.  Maybe thats wrong, I cannot say for sure, I'm simply saying that its a common scenario.\n\nbq. For example, suppose I createRow() and leave a couple of columns unspecified, expecting the db's definition for column defaults to take effect, but they aren't - the class had different defaults of its own. This sort of blurs the definition of \"defaults\". It's even more confusing because I can use a special value like Zend_Db_Expr('DEFAULT') as I create the Row object, bypassing the class' idea of defaults, instead using the db's idea of defaults.\n\nDEFAULT_DB and DEFAULT_CLASS are mutually exclusive - the values must come from one or the other.\n\n\nbq. By the way, I have a similar opinion regarding implementing cascading update and delete in the Table class. What a bad idea! You can't implement cascading operations outside the database engine and preserve atomicity and consistency. This is another case of excessive TMTOWTDI. The database already has metadata to handle cascading operations - safely, in fact - so this should be the solution the framework guides developers to use. I believe the same is true for column defaults, and I wouldn't like to see the same mistake made here as was made with cascading operations.\n\nI can understand this from a DBA's perspective.  But the same DBA would also advocate against using MyISAM in those situations.  Another unfortunate reality is that MyISAM doesnt support constraints and cascading operations.  And, considering MyISAM is STILL such a popular storage engine, it seems only prudent that code handle the cascades where the DB was unable to.\n\n\nbq. Justin Plock also had a comment up there (14\/Jan\/08) that is important: auto-filling unspecified fields defeats some types of custom Row logic that the developer had implemented. This change therefore breaks existing ZF applications in silent ways. I would say that for this reason alone, the behavior of auto-filling unspecified fields should be postponed until ZF 2.0, since severe BC breakage is permitted only at major versions.\n\nWell, first, it is an OPT-IN feature.  So as for existing applications, no defaults will be set unless the developer explicitly changes DEFAULT_NONE to DEFAULT_SOMETHINGELSE. Second, this is an OPT-IN feature ;)  In situations where the developer knows there is custom logic in the database, they would not use this feature in this way, and they should resort to the double save (or override createRow to return an attached row).\n\n\nbq. Anyway back to the code Ralph committed, I think there might be some logic errors in the complex if() statement under the DEFAULT_DB case. Perhaps some uses of && need to be ||.\n\nI think you are referring to the capability of explicitly including or excluding $metadata['DEFAULT'] based on $_defaultValues?\n\nbq. But I'm not sure why the logic is needed at all. Isn't it simpler and will achieve the same effect to do the following:\n\nbq. {code} if ($defaultSource == self::DEFAULT_DB) {\n   foreach ($this->_metadata as $metadataName => $metadata) {\n     $defaults[$metadataName] = $metadata['DEFAULT'];\n   }\n }\n{code}\n\nThis would be fine if we ONLY supported implicit inclusion of metatdata default.  As I mentioned before, there might be columns you want to explicitly exclude from your default values.\n\n\n\n----\n\nPhew, thats alot to digest :)\n\nBill, from my perspective, thats the state of the union.  \n\nI am gonna pull [~matthew] into this discussion as he might have some insight from the overall \"Architect\" position.  Again, thanks for your critique and insight - you are much more the DB Wizard\/Master than I :)\n\n-Ralph\n\n\n\n\n\n\n\n\n",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=ralph",
                        "name": "ralph",
                        "displayName": "Ralph Schindler",
                        "active": true
                    },
                    "created": "2008-07-23T09:02:39.000+0000",
                    "updated": "2008-07-23T09:02:39.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/23011",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=bkarwin",
                        "name": "bkarwin",
                        "displayName": "Bill Karwin",
                        "active": true
                    },
                    "body": "@Jack Sleight - 23\/Jul\/08 01:54 AM\n\nbq. Secondly, am I correct in assuming...\n\nIn Ralph's code, {{DEFAULTS_NONE}} does nothing, so unset fields are left unset.  The Row object may give missing fields the Row's idea of default values.  Fields that are still unset when they reach the db are given defaults according to db metadata.  \n\nNote that specifying {{NULL}} does not activate a db's {{DEFAULT}} if the column permits {{NULL}}.  For example:\n{code}\nCREATE TABLE foo (id SERIAL PRIMARY KEY, col INTEGER DEFAULT 123);\nINSERT INTO foo (col) VALUES (NULL);\nINSERT INTO foo () VALUES (); -- yes this is legal; try it!\n{code}\nThe first insert stores {{NULL}}, the second statement stores 123.\n\nRalph's code pre-fills the row with values, but allows for yet more override behavior so you can control this column-by-column.\n\nThe {{$_defaultValues}} array needs to be a non-static member of the Table class, so you can specify this column-by-column treatment of defaults according to the table.  This associative array has keys that need to be the names of columns in the database table it maps to.  So it can't be a static member of {{Zend_Db_Table_Abstract}}.\n\nHere's a simple test class for the above table {{foo}}:\n{code}\nclass foo extends Zend_Db_Table_Abstract\n{\n  protected $_defaultSource = self::DEFAULT_DB;\n  protected $_defaultValues = array('col' => true);\n}\n\n$foo = new foo($db);\n$row = $foo->createRow();\n\nvar_dump($row->toArray());\n{code}\n\nThis uses the database's metadata to assign the default value 123 to {{$foo->col}} upon creation of the object.  If you use {{array('col' => false)}} then it does not assign that field, and leaves it unset.\n\nIf you use {{$_defaultSource = self::DEFAULT_CLASS}} then the {{$_defaultValues}} array is interpreted differently.  The array is a map of field names to literal values to use as defaults.  Fields unspecified in this map are not set with defaults.  \n\n{code}\nclass foo extends Zend_Db_Table_Abstract\n{\n  protected $_defaultSource = self::DEFAULT_CLASS;\n  protected $_defaultValues = array('col' => 456);\n}\n{code}\n\nIf the array itself is not declared in the class, it sets no default values for any fields.  Likewise if you declare {{$_defaultSource = self::DEFAULT_NONE}}, no fields are given defaults.  This is the behavior of {{Zend_Db_Table_Abstract}}, so Ralph is right that it's opt-in and won't break custom Row behavior unless a developer deliberately changes that property of his class.  We assume he does this knowledgeably.\n\n@Ralph Schindler - 23\/Jul\/08 09:02 AM\n\nbq. I am of a mind that there are developers who build applications in a very \"code centric\" approach, and to these developers - a database is a datastore...\n\nYes, I realize that.  I think it's a pity, because without understanding how to employ metadata and ACID properties, developers might as well be using flat files.  But I acknowledge that many developers are in fact working in that mode.\n\nI also realize that there are legitimate reasons to implement business logic as code in application space instead of as metadata in the database.  Developer tools for application space are more sophisticated, you can make rules behave dynamically at runtime, etc.  Not to mention that most people are more comfortable programming in one language at a time.\n\nbq. Currently, if one wants default values defined within the db, it is necessary to make 2 calls to the database - createRow() -> save() -> interact with attached row -> save().\nbq. The REASON why this is not ideal is because developers are utilizing Zend_Db_Table as their model...\n\nI agree that using a Table as synonymous with a Model is not appropriate, but I don't agree that this is the reason for the feature request of populating the row with default values.  A Row object is still an object whether it's used as the Model or not.  Filling the unsaved object's fields with its default values is the most staightforward OO interface for seeing what value is expected to be inserted into your database.\n\nbq. One would want to explicitly INCLUDE a columns default value when that column is NULLABLE. By setting its $_DefaultValue = array('somecolumn' => true), the default value will be used even if the column supports null values. ON THE OTHER hand, a developer would want to explicitly EXCLUDE a value that might be the result of a trigger, user defined function or whatever... An example of this would be excluding default metadata where the columns default is actually CURRENT_TIMESTAMP.\n\nRight.  Those are reasonable use cases.\n\nbq. Like I said before, these two usage scenarios are mutually exclusive. The source can either be from DB or from CLASS, but not from both.\n\nInteresting.  I wonder if one could unify all three modes, and eliminate the need for the {{$_defaultSource}} property.  In other words, the behavior is determined solely by the value in {{$_defaultValues}}:\n\n{code}\nclass foo extends Zend_Db_Table_Abstract\n{\n  protected $_defaultValues = array(\n    'col1' => 456,   -- set field value to specified literal\n    'col2' => true,  -- set field value based on table metadata\n    'col3' => false, -- do not set field value\n                     -- do not set field value for missing 'col4'\n  );\n}\n{code}\n\nThis allows the developer to use either class-defined or db-defined defaults on a column-by-column basis.  This may seem like it runs even more afoul of the offensive TMTOWTDI.  But on the other hand, it simplifies the usage by eliminating {{$_defaultSource}}.\n\nbq. Also keep in mind, that without doing anything, the default behavior is DEFAULT_NONE where no defaults are set. This is an OPT-IN feature...\n\nYes, fair enough; I did not make that connection in my previous comment.\n\nbq. The second assumption is that the developer has made the decision to use the database as a RDBMS and not simply as a datastore.\n\n_Sigh._  Yes, that is my assumption.  Unfortunately you are correct that the prevailing state of web software development eschews RDBMS principles.  I think it is to their disadvantage, and it could be the role of frameworks to guide them to better behavior, but at this point it's like pushing water uphill.  \n\nI apologize for being negative.  I just read a bunch of blogosphere announcements for \"Drizzle\" -- a fork of MySQL to \"refactor\" out a lot of the features that make it SQL-compliant.  I say fie on them!\n\n----\n\nOkay, I retract my objection to this feature.  If this is what people want, then go for it.  I'm satisfied that the implementation is opt-in, so it won't break BC.  Please consider the change I suggested to make the usage simpler.\n",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=bkarwin",
                        "name": "bkarwin",
                        "displayName": "Bill Karwin",
                        "active": true
                    },
                    "created": "2008-07-23T13:26:05.000+0000",
                    "updated": "2008-07-23T13:26:05.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/23014",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=jacksleight",
                        "name": "jacksleight",
                        "displayName": "Jack Sleight",
                        "active": true
                    },
                    "body": "@Bill Karwin - 23\/Jul\/08 01:26 PM\n\n{quote}In Ralph's code, DEFAULTS_NONE does nothing, so unset fields are left unset. The Row object may give missing fields the Row's idea of default values. Fields that are still unset when they reach the db are given defaults according to db metadata.{quote}\n\nSorry, I got confused because Zend_Db_Table's behaviour when I created this issue vs. 1.5.2 is different. When I created this the row was pre filled with NULLs and those NULLs were sent in the INSERT statement, thereby stopping the DB using it's own defaults. Thanks to Simon Mundy's change on the 17\/Feb\/08 this is no longer the case, only changed fields are sent in the INSERT, allowing the table defaults.\n\n{quote}The $_defaultValues array needs to be a non-static member of the Table class, so you can specify this column-by-column treatment of defaults according to the table. This associative array has keys that need to be the names of columns in the database table it maps to. So it can't be a static member of Zend_Db_Table_Abstract.{quote}\n\nTo clarify, I didn't mean the $_defaultValues property, I meant the $_defaultSource property, which could be set as a static property of Zend_Db_Table_Abstract as a global setting for all tables.\n\n@Everyone\n\nAs far as I'm concerned this issue was resolved by Simon Mundy's change on the 17\/Feb\/08. I've no idea why THIS issue was re-opened, because what we're now discussing is really a completely separate feature. Regardless of that, the current (1.5.2) behaviour does exactly what I was after when I originally created the issue, and so long as this new feature is OPT-IN (which I shouldn't think I'll be doing), I have nothing further to add.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=jacksleight",
                        "name": "jacksleight",
                        "displayName": "Jack Sleight",
                        "active": true
                    },
                    "created": "2008-07-23T13:56:36.000+0000",
                    "updated": "2008-07-23T13:56:36.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/27947",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=ralph",
                        "name": "ralph",
                        "displayName": "Ralph Schindler",
                        "active": true
                    },
                    "body": "This was fixed in 1.7.0",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=ralph",
                        "name": "ralph",
                        "displayName": "Ralph Schindler",
                        "active": true
                    },
                    "created": "2009-01-09T14:53:03.000+0000",
                    "updated": "2009-01-09T14:53:03.000+0000"
                }
            ]
        }
    },
    "transitions": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-1870\/transitions"
}