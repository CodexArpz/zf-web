{
    "expand": "html",
    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-11066",
    "key": "ZF-11066",
    "fields": {
        "summary": {
            "name": "summary",
            "type": "java.lang.String",
            "value": "Inconsistent use of __get() in ControllerTestCase"
        },
        "timetracking": {
            "name": "timetracking",
            "type": "com.atlassian.jira.issue.fields.TimeTrackingSystemField"
        },
        "issuetype": {
            "name": "issuetype",
            "type": "com.atlassian.jira.issue.issuetype.IssueType",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issueType\/11",
                "name": "Patch",
                "subtask": false
            }
        },
        "votes": {
            "name": "votes",
            "type": "com.atlassian.jira.issue.fields.VotesSystemField",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-11066\/votes",
                "votes": 1,
                "hasVoted": false
            }
        },
        "security": {
            "name": "security",
            "type": "com.atlassian.jira.issue.security.IssueSecurityLevel"
        },
        "fixVersions": {
            "name": "fixVersions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [

            ]
        },
        "reporter": {
            "name": "reporter",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=ashawley",
                "name": "ashawley",
                "displayName": "Aaron S. Hawley",
                "active": true
            }
        },
        "created": {
            "name": "created",
            "type": "java.util.Date",
            "value": "2011-02-11T08:17:39.000+0000"
        },
        "updated": {
            "name": "updated",
            "type": "java.util.Date",
            "value": "2012-05-29T15:39:44.000+0000"
        },
        "customfield_10041": {
            "name": "Tags",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:labels"
        },
        "description": {
            "name": "description",
            "type": "java.lang.String",
            "value": "It is hard to read parts of this class because some parts of it use the {{\\__get()}} method to access members, and some sections use accessor methods.  I suggest that Zend Framework avoid using {{\\__get()}} internally of a class since at first glance, {{$this->frontController}} appears to be a typo for {{$this->_frontController}} to the novice."
        },
        "priority": {
            "name": "priority",
            "type": "com.atlassian.jira.issue.priority.Priority",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/priority\/5",
                "name": "Trivial"
            }
        },
        "duedate": {
            "name": "duedate",
            "type": "java.util.Date"
        },
        "customfield_10022": {
            "name": "Fix Version Priority",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:select"
        },
        "watcher": {
            "name": "watcher",
            "type": "watcher",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-11066\/watchers",
                "isWatching": false,
                "watchCount": 1
            }
        },
        "worklog": {
            "name": "worklog",
            "type": "worklog",
            "value": [

            ]
        },
        "status": {
            "name": "status",
            "type": "com.atlassian.jira.issue.status.Status",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/status\/4",
                "name": "Reopened"
            }
        },
        "labels": {
            "name": "labels",
            "type": "com.atlassian.jira.issue.label.Label",
            "value": [

            ]
        },
        "assignee": {
            "name": "assignee",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                "name": "matthew",
                "displayName": "Matthew Weier O'Phinney",
                "active": true
            }
        },
        "links": {
            "name": "links",
            "type": "issuelinks",
            "value": [

            ]
        },
        "attachment": {
            "name": "attachment",
            "type": "attachment",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/attachment\/15111",
                    "filename": "ZF-11066.patch",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=adamlundrigan",
                        "name": "adamlundrigan",
                        "displayName": "Adam Lundrigan",
                        "active": true
                    },
                    "created": "2012-05-29T15:39:44.000+0000",
                    "size": 20721,
                    "mimeType": "text\/x-patch",
                    "content": "http:\/\/fw02.zend.com\/issues\/secure\/attachment\/15111\/ZF-11066.patch"
                }
            ]
        },
        "sub-tasks": {
            "name": "sub-tasks",
            "type": "issuelinks",
            "value": [

            ]
        },
        "versions": {
            "name": "versions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [

            ]
        },
        "project": {
            "name": "project",
            "type": "com.atlassian.jira.project.Project",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/project\/ZF",
                "key": "ZF",
                "name": "Zend Framework",
                "roles": {

                }
            }
        },
        "components": {
            "name": "components",
            "type": "com.atlassian.jira.bc.project.component.ProjectComponent",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/component\/10011",
                    "id": 10011,
                    "name": "Zend_Controller",
                    "description": "front controller, including router and dispatcher",
                    "isAssigneeTypeValid": false
                }
            ]
        },
        "comment": {
            "name": "comment",
            "type": "com.atlassian.jira.issue.fields.CommentSystemField",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/44343",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=ashawley",
                        "name": "ashawley",
                        "displayName": "Aaron S. Hawley",
                        "active": true
                    },
                    "body": "{noformat}\r\nIndex: library\/Zend\/Test\/PHPUnit\/ControllerTestCase.php\r\n===================================================================\r\n--- library\/Zend\/Test\/PHPUnit\/ControllerTestCase.php\t(revision 23692)\r\n+++ library\/Zend\/Test\/PHPUnit\/ControllerTestCase.php\t(working copy)\r\n@@ -160,7 +160,7 @@\r\n                 }\r\n             }\r\n         }\r\n-        $this->frontController\r\n+        $this->getFrontController()\r\n              ->setRequest($this->getRequest())\r\n              ->setResponse($this->getResponse());\r\n     }\r\n@@ -193,7 +193,7 @@\r\n         $request->setPathInfo(null);\r\n \r\n         $controller = $this->getFrontController();\r\n-        $this->frontController\r\n+        $this->getFrontController()\r\n              ->setRequest($request)\r\n              ->setResponse($this->getResponse())\r\n              ->throwExceptions(false)\r\n@@ -202,7 +202,7 @@\r\n         if ($this->bootstrap instanceof Zend_Application) {\r\n             $this->bootstrap->run();\r\n         } else {\r\n-            $this->frontController->dispatch();\r\n+            $this->getFrontController()->dispatch();\r\n         }\r\n     }\r\n \r\n@@ -225,7 +225,7 @@\r\n         $this->resetResponse();\r\n         Zend_Layout::resetMvcInstance();\r\n         Zend_Controller_Action_HelperBroker::resetHelpers();\r\n-        $this->frontController->resetInstance();\r\n+        $this->getFrontController()->resetInstance();\r\n         Zend_Session::$_unitTestEnabled = true;\r\n     }\r\n \r\n@@ -292,7 +292,7 @@\r\n         $this->_incrementAssertionCount();\r\n         require_once 'Zend\/Test\/PHPUnit\/Constraint\/DomQuery.php';\r\n         $constraint = new Zend_Test_PHPUnit_Constraint_DomQuery($path);\r\n-        $content    = $this->response->outputBody();\r\n+        $content    = $this->getResponse()->outputBody();\r\n         if (!$constraint->evaluate($content, __FUNCTION__)) {\r\n             $constraint->fail($path, $message);\r\n         }\r\n@@ -310,7 +310,7 @@\r\n         $this->_incrementAssertionCount();\r\n         require_once 'Zend\/Test\/PHPUnit\/Constraint\/DomQuery.php';\r\n         $constraint = new Zend_Test_PHPUnit_Constraint_DomQuery($path);\r\n-        $content    = $this->response->outputBody();\r\n+        $content    = $this->getResponse()->outputBody();\r\n         if (!$constraint->evaluate($content, __FUNCTION__)) {\r\n             $constraint->fail($path, $message);\r\n         }\r\n@@ -329,7 +329,7 @@\r\n         $this->_incrementAssertionCount();\r\n         require_once 'Zend\/Test\/PHPUnit\/Constraint\/DomQuery.php';\r\n         $constraint = new Zend_Test_PHPUnit_Constraint_DomQuery($path);\r\n-        $content    = $this->response->outputBody();\r\n+        $content    = $this->getResponse()->outputBody();\r\n         if (!$constraint->evaluate($content, __FUNCTION__, $match)) {\r\n             $constraint->fail($path, $message);\r\n         }\r\n@@ -348,7 +348,7 @@\r\n         $this->_incrementAssertionCount();\r\n         require_once 'Zend\/Test\/PHPUnit\/Constraint\/DomQuery.php';\r\n         $constraint = new Zend_Test_PHPUnit_Constraint_DomQuery($path);\r\n-        $content    = $this->response->outputBody();\r\n+        $content    = $this->getResponse()->outputBody();\r\n         if (!$constraint->evaluate($content, __FUNCTION__, $match)) {\r\n             $constraint->fail($path, $message);\r\n         }\r\n@@ -367,7 +367,7 @@\r\n         $this->_incrementAssertionCount();\r\n         require_once 'Zend\/Test\/PHPUnit\/Constraint\/DomQuery.php';\r\n         $constraint = new Zend_Test_PHPUnit_Constraint_DomQuery($path);\r\n-        $content    = $this->response->outputBody();\r\n+        $content    = $this->getResponse()->outputBody();\r\n         if (!$constraint->evaluate($content, __FUNCTION__, $pattern)) {\r\n             $constraint->fail($path, $message);\r\n         }\r\n@@ -386,7 +386,7 @@\r\n         $this->_incrementAssertionCount();\r\n         require_once 'Zend\/Test\/PHPUnit\/Constraint\/DomQuery.php';\r\n         $constraint = new Zend_Test_PHPUnit_Constraint_DomQuery($path);\r\n-        $content    = $this->response->outputBody();\r\n+        $content    = $this->getResponse()->outputBody();\r\n         if (!$constraint->evaluate($content, __FUNCTION__, $pattern)) {\r\n             $constraint->fail($path, $message);\r\n         }\r\n@@ -405,7 +405,7 @@\r\n         $this->_incrementAssertionCount();\r\n         require_once 'Zend\/Test\/PHPUnit\/Constraint\/DomQuery.php';\r\n         $constraint = new Zend_Test_PHPUnit_Constraint_DomQuery($path);\r\n-        $content    = $this->response->outputBody();\r\n+        $content    = $this->getResponse()->outputBody();\r\n         if (!$constraint->evaluate($content, __FUNCTION__, $count)) {\r\n             $constraint->fail($path, $message);\r\n         }\r\n@@ -424,7 +424,7 @@\r\n         $this->_incrementAssertionCount();\r\n         require_once 'Zend\/Test\/PHPUnit\/Constraint\/DomQuery.php';\r\n         $constraint = new Zend_Test_PHPUnit_Constraint_DomQuery($path);\r\n-        $content    = $this->response->outputBody();\r\n+        $content    = $this->getResponse()->outputBody();\r\n         if (!$constraint->evaluate($content, __FUNCTION__, $count)) {\r\n             $constraint->fail($path, $message);\r\n         }\r\n@@ -443,7 +443,7 @@\r\n         $this->_incrementAssertionCount();\r\n         require_once 'Zend\/Test\/PHPUnit\/Constraint\/DomQuery.php';\r\n         $constraint = new Zend_Test_PHPUnit_Constraint_DomQuery($path);\r\n-        $content    = $this->response->outputBody();\r\n+        $content    = $this->getResponse()->outputBody();\r\n         if (!$constraint->evaluate($content, __FUNCTION__, $count)) {\r\n             $constraint->fail($path, $message);\r\n         }\r\n@@ -462,7 +462,7 @@\r\n         $this->_incrementAssertionCount();\r\n         require_once 'Zend\/Test\/PHPUnit\/Constraint\/DomQuery.php';\r\n         $constraint = new Zend_Test_PHPUnit_Constraint_DomQuery($path);\r\n-        $content    = $this->response->outputBody();\r\n+        $content    = $this->getResponse()->outputBody();\r\n         if (!$constraint->evaluate($content, __FUNCTION__, $count)) {\r\n             $constraint->fail($path, $message);\r\n         }\r\n@@ -492,7 +492,7 @@\r\n         require_once 'Zend\/Test\/PHPUnit\/Constraint\/DomQuery.php';\r\n         $constraint = new Zend_Test_PHPUnit_Constraint_DomQuery($path);\r\n         $constraint->registerXpathNamespaces($this->_xpathNamespaces);\r\n-        $content    = $this->response->outputBody();\r\n+        $content    = $this->getResponse()->outputBody();\r\n         if (!$constraint->evaluate($content, __FUNCTION__)) {\r\n             $constraint->fail($path, $message);\r\n         }\r\n@@ -511,7 +511,7 @@\r\n         require_once 'Zend\/Test\/PHPUnit\/Constraint\/DomQuery.php';\r\n         $constraint = new Zend_Test_PHPUnit_Constraint_DomQuery($path);\r\n         $constraint->registerXpathNamespaces($this->_xpathNamespaces);\r\n-        $content    = $this->response->outputBody();\r\n+        $content    = $this->getResponse()->outputBody();\r\n         if (!$constraint->evaluate($content, __FUNCTION__)) {\r\n             $constraint->fail($path, $message);\r\n         }\r\n@@ -531,7 +531,7 @@\r\n         require_once 'Zend\/Test\/PHPUnit\/Constraint\/DomQuery.php';\r\n         $constraint = new Zend_Test_PHPUnit_Constraint_DomQuery($path);\r\n         $constraint->registerXpathNamespaces($this->_xpathNamespaces);\r\n-        $content    = $this->response->outputBody();\r\n+        $content    = $this->getResponse()->outputBody();\r\n         if (!$constraint->evaluate($content, __FUNCTION__, $match)) {\r\n             $constraint->fail($path, $message);\r\n         }\r\n@@ -551,7 +551,7 @@\r\n         require_once 'Zend\/Test\/PHPUnit\/Constraint\/DomQuery.php';\r\n         $constraint = new Zend_Test_PHPUnit_Constraint_DomQuery($path);\r\n         $constraint->registerXpathNamespaces($this->_xpathNamespaces);\r\n-        $content    = $this->response->outputBody();\r\n+        $content    = $this->getResponse()->outputBody();\r\n         if (!$constraint->evaluate($content, __FUNCTION__, $match)) {\r\n             $constraint->fail($path, $message);\r\n         }\r\n@@ -571,7 +571,7 @@\r\n         require_once 'Zend\/Test\/PHPUnit\/Constraint\/DomQuery.php';\r\n         $constraint = new Zend_Test_PHPUnit_Constraint_DomQuery($path);\r\n         $constraint->registerXpathNamespaces($this->_xpathNamespaces);\r\n-        $content    = $this->response->outputBody();\r\n+        $content    = $this->getResponse()->outputBody();\r\n         if (!$constraint->evaluate($content, __FUNCTION__, $pattern)) {\r\n             $constraint->fail($path, $message);\r\n         }\r\n@@ -591,7 +591,7 @@\r\n         require_once 'Zend\/Test\/PHPUnit\/Constraint\/DomQuery.php';\r\n         $constraint = new Zend_Test_PHPUnit_Constraint_DomQuery($path);\r\n         $constraint->registerXpathNamespaces($this->_xpathNamespaces);\r\n-        $content    = $this->response->outputBody();\r\n+        $content    = $this->getResponse()->outputBody();\r\n         if (!$constraint->evaluate($content, __FUNCTION__, $pattern)) {\r\n             $constraint->fail($path, $message);\r\n         }\r\n@@ -611,7 +611,7 @@\r\n         require_once 'Zend\/Test\/PHPUnit\/Constraint\/DomQuery.php';\r\n         $constraint = new Zend_Test_PHPUnit_Constraint_DomQuery($path);\r\n         $constraint->registerXpathNamespaces($this->_xpathNamespaces);\r\n-        $content    = $this->response->outputBody();\r\n+        $content    = $this->getResponse()->outputBody();\r\n         if (!$constraint->evaluate($content, __FUNCTION__, $count)) {\r\n             $constraint->fail($path, $message);\r\n         }\r\n@@ -631,7 +631,7 @@\r\n         require_once 'Zend\/Test\/PHPUnit\/Constraint\/DomQuery.php';\r\n         $constraint = new Zend_Test_PHPUnit_Constraint_DomQuery($path);\r\n         $constraint->registerXpathNamespaces($this->_xpathNamespaces);\r\n-        $content    = $this->response->outputBody();\r\n+        $content    = $this->getResponse()->outputBody();\r\n         if (!$constraint->evaluate($content, __FUNCTION__, $count)) {\r\n             $constraint->fail($path, $message);\r\n         }\r\n@@ -651,7 +651,7 @@\r\n         require_once 'Zend\/Test\/PHPUnit\/Constraint\/DomQuery.php';\r\n         $constraint = new Zend_Test_PHPUnit_Constraint_DomQuery($path);\r\n         $constraint->registerXpathNamespaces($this->_xpathNamespaces);\r\n-        $content    = $this->response->outputBody();\r\n+        $content    = $this->getResponse()->outputBody();\r\n         if (!$constraint->evaluate($content, __FUNCTION__, $count)) {\r\n             $constraint->fail($path, $message);\r\n         }\r\n@@ -671,7 +671,7 @@\r\n         require_once 'Zend\/Test\/PHPUnit\/Constraint\/DomQuery.php';\r\n         $constraint = new Zend_Test_PHPUnit_Constraint_DomQuery($path);\r\n         $constraint->registerXpathNamespaces($this->_xpathNamespaces);\r\n-        $content    = $this->response->outputBody();\r\n+        $content    = $this->getResponse()->outputBody();\r\n         if (!$constraint->evaluate($content, __FUNCTION__, $count)) {\r\n             $constraint->fail($path, $message);\r\n         }\r\n@@ -688,7 +688,7 @@\r\n         $this->_incrementAssertionCount();\r\n         require_once 'Zend\/Test\/PHPUnit\/Constraint\/Redirect.php';\r\n         $constraint = new Zend_Test_PHPUnit_Constraint_Redirect();\r\n-        $response   = $this->response;\r\n+        $response   = $this->getResponse();\r\n         if (!$constraint->evaluate($response, __FUNCTION__)) {\r\n             $constraint->fail($response, $message);\r\n         }\r\n@@ -705,7 +705,7 @@\r\n         $this->_incrementAssertionCount();\r\n         require_once 'Zend\/Test\/PHPUnit\/Constraint\/Redirect.php';\r\n         $constraint = new Zend_Test_PHPUnit_Constraint_Redirect();\r\n-        $response   = $this->response;\r\n+        $response   = $this->getResponse();\r\n         if (!$constraint->evaluate($response, __FUNCTION__)) {\r\n             $constraint->fail($response, $message);\r\n         }\r\n@@ -723,7 +723,7 @@\r\n         $this->_incrementAssertionCount();\r\n         require_once 'Zend\/Test\/PHPUnit\/Constraint\/Redirect.php';\r\n         $constraint = new Zend_Test_PHPUnit_Constraint_Redirect();\r\n-        $response   = $this->response;\r\n+        $response   = $this->getResponse();\r\n         if (!$constraint->evaluate($response, __FUNCTION__, $url)) {\r\n             $constraint->fail($response, $message);\r\n         }\r\n@@ -741,7 +741,7 @@\r\n         $this->_incrementAssertionCount();\r\n         require_once 'Zend\/Test\/PHPUnit\/Constraint\/Redirect.php';\r\n         $constraint = new Zend_Test_PHPUnit_Constraint_Redirect();\r\n-        $response   = $this->response;\r\n+        $response   = $this->getResponse();\r\n         if (!$constraint->evaluate($response, __FUNCTION__, $url)) {\r\n             $constraint->fail($response, $message);\r\n         }\r\n@@ -759,7 +759,7 @@\r\n         $this->_incrementAssertionCount();\r\n         require_once 'Zend\/Test\/PHPUnit\/Constraint\/Redirect.php';\r\n         $constraint = new Zend_Test_PHPUnit_Constraint_Redirect();\r\n-        $response   = $this->response;\r\n+        $response   = $this->getResponse();\r\n         if (!$constraint->evaluate($response, __FUNCTION__, $pattern)) {\r\n             $constraint->fail($response, $message);\r\n         }\r\n@@ -777,7 +777,7 @@\r\n         $this->_incrementAssertionCount();\r\n         require_once 'Zend\/Test\/PHPUnit\/Constraint\/Redirect.php';\r\n         $constraint = new Zend_Test_PHPUnit_Constraint_Redirect();\r\n-        $response   = $this->response;\r\n+        $response   = $this->getResponse();\r\n         if (!$constraint->evaluate($response, __FUNCTION__, $pattern)) {\r\n             $constraint->fail($response, $message);\r\n         }\r\n@@ -795,7 +795,7 @@\r\n         $this->_incrementAssertionCount();\r\n         require_once 'Zend\/Test\/PHPUnit\/Constraint\/ResponseHeader.php';\r\n         $constraint = new Zend_Test_PHPUnit_Constraint_ResponseHeader();\r\n-        $response   = $this->response;\r\n+        $response   = $this->getResponse();\r\n         if (!$constraint->evaluate($response, __FUNCTION__, $code)) {\r\n             $constraint->fail($response, $message);\r\n         }\r\n@@ -814,7 +814,7 @@\r\n         require_once 'Zend\/Test\/PHPUnit\/Constraint\/ResponseHeader.php';\r\n         $constraint = new Zend_Test_PHPUnit_Constraint_ResponseHeader();\r\n         $constraint->setNegate(true);\r\n-        $response   = $this->response;\r\n+        $response   = $this->getResponse();\r\n         if (!$constraint->evaluate($response, __FUNCTION__, $code)) {\r\n             $constraint->fail($response, $message);\r\n         }\r\n@@ -832,7 +832,7 @@\r\n         $this->_incrementAssertionCount();\r\n         require_once 'Zend\/Test\/PHPUnit\/Constraint\/ResponseHeader.php';\r\n         $constraint = new Zend_Test_PHPUnit_Constraint_ResponseHeader();\r\n-        $response   = $this->response;\r\n+        $response   = $this->getResponse();\r\n         if (!$constraint->evaluate($response, __FUNCTION__, $header)) {\r\n             $constraint->fail($response, $message);\r\n         }\r\n@@ -851,7 +851,7 @@\r\n         require_once 'Zend\/Test\/PHPUnit\/Constraint\/ResponseHeader.php';\r\n         $constraint = new Zend_Test_PHPUnit_Constraint_ResponseHeader();\r\n         $constraint->setNegate(true);\r\n-        $response   = $this->response;\r\n+        $response   = $this->getResponse();\r\n         if (!$constraint->evaluate($response, __FUNCTION__, $header)) {\r\n             $constraint->fail($response, $message);\r\n         }\r\n@@ -870,7 +870,7 @@\r\n         $this->_incrementAssertionCount();\r\n         require_once 'Zend\/Test\/PHPUnit\/Constraint\/ResponseHeader.php';\r\n         $constraint = new Zend_Test_PHPUnit_Constraint_ResponseHeader();\r\n-        $response   = $this->response;\r\n+        $response   = $this->getResponse();\r\n         if (!$constraint->evaluate($response, __FUNCTION__, $header, $match)) {\r\n             $constraint->fail($response, $message);\r\n         }\r\n@@ -890,7 +890,7 @@\r\n         require_once 'Zend\/Test\/PHPUnit\/Constraint\/ResponseHeader.php';\r\n         $constraint = new Zend_Test_PHPUnit_Constraint_ResponseHeader();\r\n         $constraint->setNegate(true);\r\n-        $response   = $this->response;\r\n+        $response   = $this->getResponse();\r\n         if (!$constraint->evaluate($response, __FUNCTION__, $header, $match)) {\r\n             $constraint->fail($response, $message);\r\n         }\r\n@@ -909,7 +909,7 @@\r\n         $this->_incrementAssertionCount();\r\n         require_once 'Zend\/Test\/PHPUnit\/Constraint\/ResponseHeader.php';\r\n         $constraint = new Zend_Test_PHPUnit_Constraint_ResponseHeader();\r\n-        $response   = $this->response;\r\n+        $response   = $this->getResponse();\r\n         if (!$constraint->evaluate($response, __FUNCTION__, $header, $pattern)) {\r\n             $constraint->fail($response, $message);\r\n         }\r\n@@ -929,7 +929,7 @@\r\n         require_once 'Zend\/Test\/PHPUnit\/Constraint\/ResponseHeader.php';\r\n         $constraint = new Zend_Test_PHPUnit_Constraint_ResponseHeader();\r\n         $constraint->setNegate(true);\r\n-        $response   = $this->response;\r\n+        $response   = $this->getResponse();\r\n         if (!$constraint->evaluate($response, __FUNCTION__, $header, $pattern)) {\r\n             $constraint->fail($response, $message);\r\n         }\r\n@@ -945,9 +945,9 @@\r\n     public function assertModule($module, $message = '')\r\n     {\r\n         $this->_incrementAssertionCount();\r\n-        if ($module != $this->request->getModuleName()) {\r\n+        if ($module != $this->getRequest()->getModuleName()) {\r\n             $msg = sprintf('Failed asserting last module used <\"%s\"> was \"%s\"',\r\n-                $this->request->getModuleName(),\r\n+                $this->getRequest()->getModuleName(),\r\n                 $module\r\n             );\r\n             if (!empty($message)) {\r\n@@ -967,7 +967,7 @@\r\n     public function assertNotModule($module, $message = '')\r\n     {\r\n         $this->_incrementAssertionCount();\r\n-        if ($module == $this->request->getModuleName()) {\r\n+        if ($module == $this->getRequest()->getModuleName()) {\r\n             $msg = sprintf('Failed asserting last module used was NOT \"%s\"', $module);\r\n             if (!empty($message)) {\r\n                 $msg = $message . \"\\n\" . $msg;\r\n@@ -986,9 +986,9 @@\r\n     public function assertController($controller, $message = '')\r\n     {\r\n         $this->_incrementAssertionCount();\r\n-        if ($controller != $this->request->getControllerName()) {\r\n+        if ($controller != $this->getRequest()->getControllerName()) {\r\n             $msg = sprintf('Failed asserting last controller used <\"%s\"> was \"%s\"',\r\n-                $this->request->getControllerName(),\r\n+                $this->getRequest()->getControllerName(),\r\n                 $controller\r\n             );\r\n             if (!empty($message)) {\r\n@@ -1008,9 +1008,9 @@\r\n     public function assertNotController($controller, $message = '')\r\n     {\r\n         $this->_incrementAssertionCount();\r\n-        if ($controller == $this->request->getControllerName()) {\r\n+        if ($controller == $this->getRequest()->getControllerName()) {\r\n             $msg = sprintf('Failed asserting last controller used <\"%s\"> was NOT \"%s\"',\r\n-                $this->request->getControllerName(),\r\n+                $this->getRequest()->getControllerName(),\r\n                 $controller\r\n             );\r\n             if (!empty($message)) {\r\n@@ -1030,8 +1030,8 @@\r\n     public function assertAction($action, $message = '')\r\n     {\r\n         $this->_incrementAssertionCount();\r\n-        if ($action != $this->request->getActionName()) {\r\n-            $msg = sprintf('Failed asserting last action used <\"%s\"> was \"%s\"', $this->request->getActionName(), $action);\r\n+        if ($action != $this->getRequest()->getActionName()) {\r\n+            $msg = sprintf('Failed asserting last action used <\"%s\"> was \"%s\"', $this->getRequest()->getActionName(), $action);\r\n             if (!empty($message)) {\r\n                 $msg = $message . \"\\n\" . $msg;\r\n             }\r\n@@ -1049,8 +1049,8 @@\r\n     public function assertNotAction($action, $message = '')\r\n     {\r\n         $this->_incrementAssertionCount();\r\n-        if ($action == $this->request->getActionName()) {\r\n-            $msg = sprintf('Failed asserting last action used <\"%s\"> was NOT \"%s\"', $this->request->getActionName(), $action);\r\n+        if ($action == $this->getRequest()->getActionName()) {\r\n+            $msg = sprintf('Failed asserting last action used <\"%s\"> was NOT \"%s\"', $this->getRequest()->getActionName(), $action);\r\n             if (!empty($message)) {\r\n                 $msg = $message . \"\\n\" . $msg;\r\n             }\r\n@@ -1068,7 +1068,7 @@\r\n     public function assertRoute($route, $message = '')\r\n     {\r\n         $this->_incrementAssertionCount();\r\n-        $router = $this->frontController->getRouter();\r\n+        $router = $this->getFrontController()->getRouter();\r\n         if ($route != $router->getCurrentRouteName()) {\r\n             $msg = sprintf('Failed asserting matched route was \"%s\", actual route is %s',\r\n                 $route,\r\n@@ -1091,7 +1091,7 @@\r\n     public function assertNotRoute($route, $message = '')\r\n     {\r\n         $this->_incrementAssertionCount();\r\n-        $router = $this->frontController->getRouter();\r\n+        $router = $this->getFrontController()->getRouter();\r\n         if ($route == $router->getCurrentRouteName()) {\r\n             $msg = sprintf('Failed asserting route matched was NOT \"%s\"', $route);\r\n             if (!empty($message)) {\r\n\r\n{noformat}",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=ashawley",
                        "name": "ashawley",
                        "displayName": "Aaron S. Hawley",
                        "active": true
                    },
                    "created": "2011-02-11T08:19:33.000+0000",
                    "updated": "2011-02-11T08:19:33.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/46022",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=kblomqvist",
                        "name": "kblomqvist",
                        "displayName": "Kim Blomqvist",
                        "active": true
                    },
                    "body": "I have wondered this too so the fix gets my vote.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=kblomqvist",
                        "name": "kblomqvist",
                        "displayName": "Kim Blomqvist",
                        "active": true
                    },
                    "created": "2011-04-24T19:27:45.000+0000",
                    "updated": "2011-04-24T19:27:45.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/46035",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                        "name": "matthew",
                        "displayName": "Matthew Weier O'Phinney",
                        "active": true
                    },
                    "body": "Changing this in ZF1 is a no-go as it would create a backwards compatibility break. In ZF2, from the prototypes I've been doing, we may not even need ControllerTestCase anymore. As such, I'm going to close this as \"won't fix\".",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                        "name": "matthew",
                        "displayName": "Matthew Weier O'Phinney",
                        "active": true
                    },
                    "created": "2011-04-25T13:42:13.000+0000",
                    "updated": "2011-04-25T13:42:13.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/46043",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=ashawley",
                        "name": "ashawley",
                        "displayName": "Aaron S. Hawley",
                        "active": true
                    },
                    "body": "Huh?  The patch shouldn't break anything externally since it is an internal change with no semantic difference.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=ashawley",
                        "name": "ashawley",
                        "displayName": "Aaron S. Hawley",
                        "active": true
                    },
                    "created": "2011-04-25T16:34:25.000+0000",
                    "updated": "2011-04-25T16:34:25.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/46045",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                        "name": "matthew",
                        "displayName": "Matthew Weier O'Phinney",
                        "active": true
                    },
                    "body": "Sorry -- I was looking more at the \"do not use __get()\" as a request to remove it entirely.\n\nI'll look into the patch this week.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                        "name": "matthew",
                        "displayName": "Matthew Weier O'Phinney",
                        "active": true
                    },
                    "created": "2011-04-25T22:17:59.000+0000",
                    "updated": "2011-04-25T22:17:59.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/46278",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=ashawley",
                        "name": "ashawley",
                        "displayName": "Aaron S. Hawley",
                        "active": true
                    },
                    "body": "No worries.\r\n\r\nI ran the tests for this particular file and they succeeded.  I hadn't done so before.\r\n\r\n{{monospaced}}\r\nOK (42 tests, 77 assertions)\r\n{{monospaced}}\r\n",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=ashawley",
                        "name": "ashawley",
                        "displayName": "Aaron S. Hawley",
                        "active": true
                    },
                    "created": "2011-05-02T16:35:06.000+0000",
                    "updated": "2011-05-02T16:35:06.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/50819",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=adamlundrigan",
                        "name": "adamlundrigan",
                        "displayName": "Adam Lundrigan",
                        "active": true
                    },
                    "body": "I have applied the suggested patch and the {{Zend_Test}} test suite still passes.  Attached a patch file which should apply cleanly against trunk. ",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=adamlundrigan",
                        "name": "adamlundrigan",
                        "displayName": "Adam Lundrigan",
                        "active": true
                    },
                    "created": "2012-05-29T15:37:07.000+0000",
                    "updated": "2012-05-29T15:37:07.000+0000"
                }
            ]
        }
    },
    "transitions": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-11066\/transitions"
}