{
    "expand": "html",
    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-9586",
    "key": "ZF-9586",
    "fields": {
        "summary": {
            "name": "summary",
            "type": "java.lang.String",
            "value": "A NonArray Subform with equal Name like a chain segment from a previous attached SubForm overwrites data in getValidValues"
        },
        "timetracking": {
            "name": "timetracking",
            "type": "com.atlassian.jira.issue.fields.TimeTrackingSystemField"
        },
        "issuetype": {
            "name": "issuetype",
            "type": "com.atlassian.jira.issue.issuetype.IssueType",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issueType\/5",
                "name": "Sub-task",
                "subtask": true
            }
        },
        "votes": {
            "name": "votes",
            "type": "com.atlassian.jira.issue.fields.VotesSystemField",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-9586\/votes",
                "votes": 0,
                "hasVoted": false
            }
        },
        "security": {
            "name": "security",
            "type": "com.atlassian.jira.issue.security.IssueSecurityLevel"
        },
        "resolution": {
            "name": "resolution",
            "type": "com.atlassian.jira.issue.resolution.Resolution",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/resolution\/1",
                "name": "Fixed"
            }
        },
        "fixVersions": {
            "name": "fixVersions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/version\/10451",
                    "id": 10451,
                    "description": "Mini Release",
                    "name": "1.10.4",
                    "userReleaseDate": "28\/Apr\/10",
                    "archived": false,
                    "releaseDate": "2010-04-28",
                    "released": true
                }
            ]
        },
        "resolutiondate": {
            "name": "resolutiondate",
            "type": "java.util.Date",
            "value": "2010-04-16T12:42:04.000+0000"
        },
        "reporter": {
            "name": "reporter",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=alab",
                "name": "alab",
                "displayName": "Christian Albrecht",
                "active": true
            }
        },
        "customfield_10041": {
            "name": "Tags",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:labels"
        },
        "created": {
            "name": "created",
            "type": "java.util.Date",
            "value": "2010-04-01T08:24:00.000+0000"
        },
        "updated": {
            "name": "updated",
            "type": "java.util.Date",
            "value": "2010-04-16T12:42:04.000+0000"
        },
        "description": {
            "name": "description",
            "type": "java.lang.String",
            "value": "While fixing getErrors i had a closer look at [ZF-5222] again,\r\nas Vivek Chandran states there, mixing !isArray() SubForm with\r\nSubForms and interferencing Name and elementsBelongTo segments,\r\ndata will be stripped because of array_merge or not merging at all.\r\n\r\n{code}\r\n$sub1->setElementsBelongTo('foo[bar]');\r\n$sub2->setIsArray(false);\r\n$form->addSubForm($sub1, 'bar')\r\n     ->addSubForm($sub2, 'foo');\r\n...\r\n$values = array_merge($values, $this->_attachToArray($sub1->getValidValues(...), 'foo[bar]'));\r\n\/\/ $values === array('foo' => array('bar' => ... ))\r\n...\r\n\/\/ next cycle\r\nif (!$sub2->isArray()) {\r\n    $values['foo'] = $sub2->getValidValues(...);\r\n    \/\/ o.O\r\n}\r\n{code}\r\n\r\n{code}\r\n$sub1->setIsArray(false);\r\n$sub2->setElementsBelongTo('foo[bar]');\r\n$form->addSubForm($sub1, 'foo')\r\n     ->addSubForm($sub2, 'bar');\r\n...\r\nif (!$sub1->isArray()) {\r\n    $values['foo'] = $sub1->getValidValues(...);\r\n    \/\/ $values === array('foo' => array('elem' => 'thisShouldBeKept'))\r\n}\r\n\/\/ next cycle\r\n$values = array_merge($values, $this->_attachToArray($sub2->getValidValues(...), 'foo[bar]'));\r\n\/\/ $values === array('foo' => array( 'elem' => 'thrownAway' ))\r\n...\r\n\r\n{code}\r\n\r\n\r\nTo check against similar failures in this parents previous SubTasks\r\ni updated their tests to use the new Setup as well, however getValidValues\r\nis the only one to fail from the commited patches.\r\n\r\nbefore Patch\r\n{code}\r\n...\r\n        foreach ($this->getSubForms() as $key => $form) {\r\n            if (isset($data[$key]) && !$form->isArray()) {\r\n                $tmp = $form->getValidValues($data[$key]);\r\n                if (!empty($tmp)) {\r\n                    $values[$key] = $tmp;\r\n                }\r\n            } else {\r\n                $tmp = $form->getValidValues($data, true);\r\n                if (!empty($tmp)) {\r\n                    $fValues = $this->_attachToArray($tmp, $form->getElementsBelongTo());\r\n                    $values = array_merge($values, $fValues);\r\n                }\r\n            }\r\n        }\r\n...\r\n\r\n{code}\r\n\r\nafter Patch\r\n{code}\r\n...\r\n        foreach ($this->getSubForms() as $key => $form) {\r\n            $merge = array();\r\n            if (isset($data[$key]) && !$form->isArray()) {\r\n                $tmp = $form->getValidValues($data[$key]);\r\n                if (!empty($tmp)) {\r\n                    $merge[$key] = $tmp;\r\n                }\r\n            } else {\r\n                $tmp = $form->getValidValues($data, true);\r\n                if (!empty($tmp)) {\r\n                    $merge = $this->_attachToArray($tmp, $form->getElementsBelongTo());\r\n                }\r\n            }\r\n            $values = array_merge_recursive($values, $merge);\r\n        }\r\n...\r\n\r\n{code}\r\n\r\nThe New Test Setup\r\n{code}\r\n    public function _setup9350()\r\n    {\r\n        $this->form->addSubForm(new Zend_Form_SubForm(), 'foo')\r\n                   ->foo->setElementsBelongTo('foo[foo]')            \/\/ foo[foo]\r\n                        ->addSubForm(new Zend_Form_SubForm(), 'foo') \/\/ foo[foo][foo]\r\n                        ->foo->setIsArray(false)\r\n                             ->addElement('text', 'foo')             \/\/ foo[foo][foo][foo]\r\n                             ->foo->addValidator('Identical',\r\n                                                 false,\r\n                                                 array('foo Value'));\r\n\r\n        $this->form->foo->addSubForm(new Zend_Form_SubForm(), 'baz') \/\/ foo[foo][baz]\r\n                   ->baz->setIsArray(false)\r\n                        ->addSubForm(new Zend_Form_SubForm(), 'baz')\r\n                        ->baz->setElementsBelongTo('baz[baz]')       \/\/ foo[foo][baz][baz][baz]\r\n                             ->addElement('text', 'baz')             \/\/ foo[foo][baz][baz][baz][baz]\r\n                             ->baz->addValidator('Identical',\r\n                                                 false,\r\n                                                 array('baz Value'));\r\n\r\n        \/\/ This is appending a different named SubForm and setting\r\n        \/\/ elementsBelongTo to a !isArray() Subform name from same level\r\n        $this->form->foo->addSubForm(new Zend_Form_SubForm(), 'quo')\r\n                        ->quo->setElementsBelongTo('foo')            \/\/ foo[foo][foo] !!!!\r\n                             ->addElement('text', 'quo')             \/\/ foo[foo][foo][quo]\r\n                             ->quo->addValidator('Identical',\r\n                                                 false,\r\n                                                 array('quo Value'));\r\n        \r\n        \/\/ This is setting elementsBelongTo point into the middle of \r\n        \/\/ a chain of another SubForms elementsBelongTo\r\n        $this->form->addSubForm(new Zend_Form_SubForm(), 'duh')\r\n                   ->duh->setElementsBelongTo('foo[zoo]')            \/\/ foo[zoo] !!!!\r\n                        ->addElement('text', 'zoo')                  \/\/ foo[zoo][zoo]\r\n                        ->zoo->addValidator('Identical',\r\n                                            false,\r\n                                            array('zoo Value'));\r\n\r\n        \/\/ This is !isArray SubForms Name equal to the last segment\r\n        \/\/ of another SubForms elementsBelongTo\r\n        $this->form->addSubForm(new Zend_Form_SubForm(), 'iek')\r\n                   ->iek->setElementsBelongTo('foo')                 \/\/ foo !!!!\r\n                        ->addSubForm(new Zend_Form_SubForm(), 'zoo') \/\/ foo[zoo] !!!!\r\n                        ->zoo->setIsArray(false)\r\n                             ->addElement('text', 'iek')             \/\/ foo[zoo][iek]\r\n                             ->iek->addValidator('Identical',\r\n                                                 false,\r\n                                                 array('iek Value'));\r\n\r\n        $data = array('valid'   => array('foo' =>\r\n                                         array('foo' =>\r\n                                               array('foo' =>\r\n                                                     array('foo' => 'foo Value',\r\n                                                           'quo' => 'quo Value'),\r\n                                                     'baz' => \r\n                                                     array('baz' => \r\n                                                           array('baz' =>\r\n                                                                 array('baz' => 'baz Value')))),\r\n                                               'zoo' =>\r\n                                               array('zoo' => 'zoo Value',\r\n                                                     'iek' => 'iek Value'))),\r\n                      'invalid' => array('foo' =>\r\n                                         array('foo' =>\r\n                                               array('foo' =>\r\n                                                     array('foo' => 'foo Invalid',\r\n                                                           'quo' => 'quo Value'),\r\n                                                     'baz' => \r\n                                                     array('baz' => \r\n                                                           array('baz' =>\r\n                                                                 array('baz' => 'baz Value')))),\r\n                                               'zoo' =>\r\n                                               array('zoo' => 'zoo Value',\r\n                                                     'iek' => 'iek Invalid'))),\r\n                      'partial' => array('foo' =>\r\n                                         array('foo' =>\r\n                                               array('baz' => \r\n                                                     array('baz' => \r\n                                                           array('baz' =>\r\n                                                                 array('baz' => 'baz Value'))),\r\n                                                    'foo' => \r\n                                                     array('quo' => 'quo Value')),\r\n                                               'zoo' =>\r\n                                               array('zoo' => 'zoo Value'))));\r\n        return $data;\r\n    }\r\n\r\n    public function testGetValidValuesWithElementsBelongTo()\r\n    {\r\n        $data = $this->_setup9350();\r\n        $this->assertSame($this->form->getValidValues($data['invalid']), $data['partial']);\r\n    }\r\n{code}\r\n\r\nThis patch fixes the issue and updates the Unit Tests of previous SubTasks\r\nwithin this group as well, to make sure they do not suffer from similar\r\nissues.\r\n\r\n{code}\r\nIndex: tests\/Zend\/Form\/FormTest.php\r\n===================================================================\r\n--- tests\/Zend\/Form\/FormTest.php\t(Revision 21732)\r\n+++ tests\/Zend\/Form\/FormTest.php\t(Arbeitskopie)\r\n@@ -1473,106 +1473,118 @@\r\n         $this->assertTrue($this->form->isValid($data));\r\n     }\r\n \r\n-    public function testIsValidEqualSubFormAndElementName()\r\n-    {\r\n-        $this->form->addSubForm(new Zend_Form_SubForm(), 'foo')\r\n-                   ->foo->addElement('text', 'foo')\r\n-                        ->foo->setRequired(true)\r\n-                             ->addValidator('Identical',\r\n-                                            false,\r\n-                                            array('Foo Value'));\r\n-        $foo = array('foo' =>\r\n-                     array('foo' => 'Foo Value'));\r\n-\r\n-        $this->assertTrue($this->form->isValid($foo));\r\n-\r\n-        $this->form->foo->setIsArray(false);\r\n-\r\n-        $this->assertTrue($this->form->isValid($foo));\r\n-    } \r\n-\r\n-    public function testIsValidPartialEqualSubFormAndElementName()\r\n-    {\r\n-        $this->form->addSubForm(new Zend_Form_SubForm(), 'foo')\r\n-                   ->foo->addElement('text', 'foo')\r\n-                        ->foo->setRequired(true)\r\n-                             ->addValidator('Identical',\r\n-                                            false,\r\n-                                            array('Foo Value'));\r\n-        $foo = array('foo' =>\r\n-                     array('foo' => 'Foo Value'));\r\n-\r\n-        $this->assertTrue($this->form->isValidPartial($foo));\r\n-\r\n-        $this->form->foo->setIsArray(false);\r\n-\r\n-        $this->assertTrue($this->form->isValidPartial($foo));\r\n-    } \r\n-\r\n-    public function testPopulateWithElementsBelongTo()\r\n-    {\r\n-        $this->form->addSubForm(new Zend_Form_SubForm(), 'foo')\r\n-                   ->foo->setElementsBelongTo('foo[foo]')\r\n-                        ->addSubForm(new Zend_Form_SubForm(), 'foo')\r\n-                        ->foo->setIsArray(false)\r\n-                             ->addElement('text', 'foo');\r\n-\r\n-        $foo = array('foo' =>\r\n-                     array('foo' =>\r\n-                           array('foo' =>\r\n-                                 array('foo' => 'foo Value'))));\r\n-\r\n-        $this->form->setView($this->getView())\r\n-                   ->populate($foo);\r\n-\r\n-        $this->assertRegexp('\/value=.foo Value.\/', $this->form->render());\r\n-    }\r\n-\r\n     public function _setup9350()\r\n     {\r\n         $this->form->addSubForm(new Zend_Form_SubForm(), 'foo')\r\n-                   ->foo->setElementsBelongTo('foo[foo]')\r\n-                        ->addSubForm(new Zend_Form_SubForm(), 'foo')\r\n+                   ->foo->setElementsBelongTo('foo[foo]')            \/\/ foo[foo]\r\n+                        ->addSubForm(new Zend_Form_SubForm(), 'foo') \/\/ foo[foo][foo]\r\n                         ->foo->setIsArray(false)\r\n-                             ->addElement('text', 'foo')\r\n+                             ->addElement('text', 'foo')             \/\/ foo[foo][foo][foo]\r\n                              ->foo->addValidator('Identical',\r\n                                                  false,\r\n                                                  array('foo Value'));\r\n \r\n-        $this->form->foo->addSubForm(new Zend_Form_SubForm(), 'baz')\r\n+        $this->form->foo->addSubForm(new Zend_Form_SubForm(), 'baz') \/\/ foo[foo][baz]\r\n                    ->baz->setIsArray(false)\r\n                         ->addSubForm(new Zend_Form_SubForm(), 'baz')\r\n-                        ->baz->setElementsBelongTo('baz[baz]')\r\n-                             ->addElement('text', 'baz')\r\n+                        ->baz->setElementsBelongTo('baz[baz]')       \/\/ foo[foo][baz][baz][baz]\r\n+                             ->addElement('text', 'baz')             \/\/ foo[foo][baz][baz][baz][baz]\r\n                              ->baz->addValidator('Identical',\r\n                                                  false,\r\n                                                  array('baz Value'));\r\n \r\n-        $data = array('valid' => array('foo' =>\r\n-                                       array('foo' =>\r\n-                                             array('foo' =>\r\n-                                                   array('foo' => 'foo Value'),\r\n-                                                   'baz' => \r\n-                                                   array('baz' => \r\n-                                                         array('baz' =>\r\n-                                                               array('baz' => 'baz Value')))))),\r\n+        \/\/ This is appending a different named SubForm and setting\r\n+        \/\/ elementsBelongTo to a !isArray() Subform name from same level\r\n+        $this->form->foo->addSubForm(new Zend_Form_SubForm(), 'quo')\r\n+                        ->quo->setElementsBelongTo('foo')            \/\/ foo[foo][foo] !!!!\r\n+                             ->addElement('text', 'quo')             \/\/ foo[foo][foo][quo]\r\n+                             ->quo->addValidator('Identical',\r\n+                                                 false,\r\n+                                                 array('quo Value'));\r\n+        \r\n+        \/\/ This is setting elementsBelongTo point into the middle of \r\n+        \/\/ a chain of another SubForms elementsBelongTo\r\n+        $this->form->addSubForm(new Zend_Form_SubForm(), 'duh')\r\n+                   ->duh->setElementsBelongTo('foo[zoo]')            \/\/ foo[zoo] !!!!\r\n+                        ->addElement('text', 'zoo')                  \/\/ foo[zoo][zoo]\r\n+                        ->zoo->addValidator('Identical',\r\n+                                            false,\r\n+                                            array('zoo Value'));\r\n+\r\n+        \/\/ This is !isArray SubForms Name equal to the last segment\r\n+        \/\/ of another SubForms elementsBelongTo\r\n+        $this->form->addSubForm(new Zend_Form_SubForm(), 'iek')\r\n+                   ->iek->setElementsBelongTo('foo')                 \/\/ foo !!!!\r\n+                        ->addSubForm(new Zend_Form_SubForm(), 'zoo') \/\/ foo[zoo] !!!!\r\n+                        ->zoo->setIsArray(false)\r\n+                             ->addElement('text', 'iek')             \/\/ foo[zoo][iek]\r\n+                             ->iek->addValidator('Identical',\r\n+                                                 false,\r\n+                                                 array('iek Value'));\r\n+\r\n+        $data = array('valid'   => array('foo' =>\r\n+                                         array('foo' =>\r\n+                                               array('foo' =>\r\n+                                                     array('foo' => 'foo Value',\r\n+                                                           'quo' => 'quo Value'),\r\n+                                                     'baz' => \r\n+                                                     array('baz' => \r\n+                                                           array('baz' =>\r\n+                                                                 array('baz' => 'baz Value')))),\r\n+                                               'zoo' =>\r\n+                                               array('zoo' => 'zoo Value',\r\n+                                                     'iek' => 'iek Value'))),\r\n                       'invalid' => array('foo' =>\r\n                                          array('foo' =>\r\n                                                array('foo' =>\r\n-                                                     array('foo' => 'foo Invalid'),\r\n+                                                     array('foo' => 'foo Invalid',\r\n+                                                           'quo' => 'quo Value'),\r\n                                                      'baz' => \r\n                                                      array('baz' => \r\n                                                            array('baz' =>\r\n-                                                                 array('baz' => 'baz Value')))))),\r\n+                                                                 array('baz' => 'baz Value')))),\r\n+                                               'zoo' =>\r\n+                                               array('zoo' => 'zoo Value',\r\n+                                                     'iek' => 'iek Invalid'))),\r\n                       'partial' => array('foo' =>\r\n-                                       array('foo' =>\r\n-                                             array('baz' => \r\n-                                                   array('baz' => \r\n-                                                         array('baz' =>\r\n-                                                               array('baz' => 'baz Value')))))));\r\n+                                         array('foo' =>\r\n+                                               array('baz' => \r\n+                                                     array('baz' => \r\n+                                                           array('baz' =>\r\n+                                                                 array('baz' => 'baz Value'))),\r\n+                                                    'foo' => \r\n+                                                     array('quo' => 'quo Value')),\r\n+                                               'zoo' =>\r\n+                                               array('zoo' => 'zoo Value'))));\r\n         return $data;\r\n     }\r\n \r\n+    public function testIsValidEqualSubFormAndElementName()\r\n+    {\r\n+        $data = $this->_setup9350();\r\n+        $this->assertTrue($this->form->isValid($data['valid']));\r\n+    } \r\n+\r\n+    public function testIsValidPartialEqualSubFormAndElementName()\r\n+    {\r\n+        $data = $this->_setup9350();\r\n+        $this->assertTrue($this->form->isValidPartial($data['partial']));\r\n+    } \r\n+\r\n+    public function testPopulateWithElementsBelongTo()\r\n+    {\r\n+        $data = $this->_setup9350();\r\n+\r\n+        $this->form->setView($this->getView())->populate($data['valid']);\r\n+        $html = $this->form->render();\r\n+\r\n+        $this->assertRegexp('\/value=.foo Value.\/', $html);\r\n+        $this->assertRegexp('\/value=.baz Value.\/', $html);\r\n+        $this->assertRegexp('\/value=.quo Value.\/', $html);\r\n+        $this->assertRegexp('\/value=.zoo Value.\/', $html);\r\n+        $this->assertRegexp('\/value=.iek Value.\/', $html);\r\n+    }\r\n+\r\n     public function testGetValidValuesWithElementsBelongTo()\r\n     {\r\n         $data = $this->_setup9350();\r\nIndex: library\/Zend\/Form.php\r\n===================================================================\r\n--- library\/Zend\/Form.php\t(Revision 21732)\r\n+++ library\/Zend\/Form.php\t(Arbeitskopie)\r\n@@ -1343,18 +1343,19 @@\r\n             }\r\n         }\r\n         foreach ($this->getSubForms() as $key => $form) {\r\n+            $merge = array();\r\n             if (isset($data[$key]) && !$form->isArray()) {\r\n                 $tmp = $form->getValidValues($data[$key]);\r\n                 if (!empty($tmp)) {\r\n-                    $values[$key] = $tmp;\r\n+                    $merge[$key] = $tmp;\r\n                 }\r\n             } else {\r\n                 $tmp = $form->getValidValues($data, true);\r\n                 if (!empty($tmp)) {\r\n-                    $fValues = $this->_attachToArray($tmp, $form->getElementsBelongTo());\r\n-                    $values = array_merge($values, $fValues);\r\n+                    $merge = $this->_attachToArray($tmp, $form->getElementsBelongTo());\r\n                 }\r\n             }\r\n+            $values = array_merge_recursive($values, $merge);\r\n         }\r\n         if (!$suppressArrayNotation && $this->isArray() && !empty($values)) {\r\n             $values = $this->_attachToArray($values, $this->getElementsBelongTo());\r\n{code}"
        },
        "priority": {
            "name": "priority",
            "type": "com.atlassian.jira.issue.priority.Priority",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/priority\/3",
                "name": "Major"
            }
        },
        "duedate": {
            "name": "duedate",
            "type": "java.util.Date"
        },
        "customfield_10022": {
            "name": "Fix Version Priority",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:select"
        },
        "watcher": {
            "name": "watcher",
            "type": "watcher",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-9586\/watchers",
                "isWatching": false,
                "watchCount": 0
            }
        },
        "worklog": {
            "name": "worklog",
            "type": "worklog",
            "value": [

            ]
        },
        "status": {
            "name": "status",
            "type": "com.atlassian.jira.issue.status.Status",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/status\/5",
                "name": "Resolved"
            }
        },
        "labels": {
            "name": "labels",
            "type": "com.atlassian.jira.issue.label.Label",
            "value": [

            ]
        },
        "assignee": {
            "name": "assignee",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=alab",
                "name": "alab",
                "displayName": "Christian Albrecht",
                "active": true
            }
        },
        "parent": {
            "name": "parent",
            "type": "issuelinks",
            "value": {
                "issueKey": "ZF-9350",
                "issue": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-9350",
                "type": {
                    "name": "Parent",
                    "direction": "INBOUND"
                }
            }
        },
        "links": {
            "name": "links",
            "type": "issuelinks",
            "value": [
                {
                    "issueKey": "ZF-8078",
                    "issue": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-8078",
                    "type": {
                        "name": "Related",
                        "direction": "INBOUND",
                        "description": "is related to"
                    }
                },
                {
                    "issueKey": "ZF-8097",
                    "issue": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-8097",
                    "type": {
                        "name": "Related",
                        "direction": "INBOUND",
                        "description": "is related to"
                    }
                }
            ]
        },
        "attachment": {
            "name": "attachment",
            "type": "attachment",
            "value": [

            ]
        },
        "sub-tasks": {
            "name": "sub-tasks",
            "type": "issuelinks",
            "value": [

            ]
        },
        "versions": {
            "name": "versions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [

            ]
        },
        "project": {
            "name": "project",
            "type": "com.atlassian.jira.project.Project",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/project\/ZF",
                "key": "ZF",
                "name": "Zend Framework",
                "roles": {

                }
            }
        },
        "components": {
            "name": "components",
            "type": "com.atlassian.jira.bc.project.component.ProjectComponent",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/component\/10029",
                    "id": 10029,
                    "name": "Zend_Form",
                    "isAssigneeTypeValid": false
                }
            ]
        },
        "comment": {
            "name": "comment",
            "type": "com.atlassian.jira.issue.fields.CommentSystemField",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/39722",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=alab",
                        "name": "alab",
                        "displayName": "Christian Albrecht",
                        "active": true
                    },
                    "body": "Updated Unit Test",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=alab",
                        "name": "alab",
                        "displayName": "Christian Albrecht",
                        "active": true
                    },
                    "created": "2010-04-02T00:02:02.000+0000",
                    "updated": "2010-04-02T00:02:02.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/40077",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                        "name": "matthew",
                        "displayName": "Matthew Weier O'Phinney",
                        "active": true
                    },
                    "body": "Patch applied to trunk and 1.10 release branch.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                        "name": "matthew",
                        "displayName": "Matthew Weier O'Phinney",
                        "active": true
                    },
                    "created": "2010-04-16T12:42:04.000+0000",
                    "updated": "2010-04-16T12:42:04.000+0000"
                }
            ]
        }
    },
    "transitions": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-9586\/transitions"
}