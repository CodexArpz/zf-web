{
    "expand": "html",
    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-4599",
    "key": "ZF-4599",
    "fields": {
        "summary": {
            "name": "summary",
            "type": "java.lang.String",
            "value": "Zend_Date::isDate() and Zend_Validate_Date do not reliably check format"
        },
        "timetracking": {
            "name": "timetracking",
            "type": "com.atlassian.jira.issue.fields.TimeTrackingSystemField"
        },
        "issuetype": {
            "name": "issuetype",
            "type": "com.atlassian.jira.issue.issuetype.IssueType",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issueType\/1",
                "name": "Bug",
                "subtask": false
            }
        },
        "votes": {
            "name": "votes",
            "type": "com.atlassian.jira.issue.fields.VotesSystemField",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-4599\/votes",
                "votes": 0,
                "hasVoted": false
            }
        },
        "security": {
            "name": "security",
            "type": "com.atlassian.jira.issue.security.IssueSecurityLevel"
        },
        "resolution": {
            "name": "resolution",
            "type": "com.atlassian.jira.issue.resolution.Resolution",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/resolution\/5",
                "name": "Cannot Reproduce"
            }
        },
        "fixVersions": {
            "name": "fixVersions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/version\/10250",
                    "id": 10250,
                    "description": "Mini Release",
                    "name": "1.7.3",
                    "userReleaseDate": "19\/Jan\/09",
                    "archived": false,
                    "releaseDate": "2009-01-19",
                    "released": true
                }
            ]
        },
        "resolutiondate": {
            "name": "resolutiondate",
            "type": "java.util.Date",
            "value": "2008-12-16T01:41:51.000+0000"
        },
        "reporter": {
            "name": "reporter",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=ajbrown",
                "name": "ajbrown",
                "displayName": "A.J. Brown",
                "active": true
            }
        },
        "created": {
            "name": "created",
            "type": "java.util.Date",
            "value": "2008-10-14T16:30:26.000+0000"
        },
        "updated": {
            "name": "updated",
            "type": "java.util.Date",
            "value": "2012-11-21T08:08:54.000+0000"
        },
        "customfield_10041": {
            "name": "Tags",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:labels"
        },
        "description": {
            "name": "description",
            "type": "java.lang.String",
            "value": "Neither Zend_Date::isDate() or Zend_Validate_Date can be used to reliably check the date for format AND existence.  Take the following unit test and it's results as an example.  \n\nBelow, we expect all dates to be in this format:  `2008-01-01` and be a date that exists on the calendar:\n\n{code:php} \nclass BPDateValidatorTest extends PHPUnit_Framework_TestCase\n{\n\n    \/**\n     * @var Zend_Validate_Date\n     *\/\n    private $_oValidator;\n\n    public function setUp()\n    {\n        $this->_oValidator = new Zend_Validate_Date( 'YYYY-MM-DD' );\n    }\n    public function testValidDatesSHouldNotFail1()\n    {\n        $sDate = date( 'Y-m-d' );\n\n        $bResult = $this->_oValidator->isValid( $sDate );\n        $this->assertTrue( $bResult, $sDate . ' did not validate correctly: ' . $this->_oValidator->getMessages() );\n    }\n\n    public function testValidDatesSHouldNotFail2()\n    {\n        $sDate = '1984-03-08';\n        $bResult = $this->_oValidator->isValid( $sDate );\n        $this->assertTrue( $bResult, $sDate . ' did not validate correctly: ' . $this->_oValidator->getMessages() );\n    }\n\n    public function testInvalidDateFormatShouldBeInvalid1()\n    {\n        $sDate = 'fooo-ba-rs';\n        $bResult = Zend_Date::isDate( $sDate, 'yyyy-MM-dd' );\n        $this->assertFalse( $bResult, $sDate . ' validated correctly' );\n    }\n\n    public function testInvalidDateFormatShouldBeInvalid2()\n    {\n        $sDate = date( 'Y\/m\/d' );\n        $bResult = $this->_oValidator->isValid( $sDate );\n        $this->assertFalse( $bResult, $sDate . ' validated correctly' );\n    }\n\n\n    public function testInvalidDateFormatShouldBeInvalid3()\n    {\n        $sDate = date( 'r' );\n        $bResult = $this->_oValidator->isValid( $sDate );\n        $this->assertFalse( $bResult, $sDate . ' validated correctly' );\n    }\n\n\n    public function testInvalidDateFormatShouldBeInvalid4()\n    {\n        $sDate = date( 'Y:m:d' );\n        $bResult = $this->_oValidator->isValid( $sDate );\n        $this->assertFalse( $bResult, $sDate . ' validated correctly' );\n    }\n\n    public function testInvalidDateFormatShouldBeInvalid5()\n    {\n        $sDate = date( 'Y-m-d H:i' );\n        $bResult = $this->_oValidator->isValid( $sDate );\n        $this->assertFalse( $bResult, $sDate . ' validated correctly' );\n    }\n\n    public function testLeapYearFebruaryWith29DaysShouldPass1()\n    {\n        $sDate = '2008-02-29';\n        $bResult = $this->_oValidator->isValid( $sDate );\n        $this->assertTrue( $bResult, $sDate . ' did not validate correctly' );\n    }\n\n    public function testNonLeapYearFebruaryWith29DaysShouldBeInvalid1()\n    {\n        $sDate = '2009-02-29';\n        $bResult = $this->_oValidator->isValid( $sDate );\n        $this->assertFalse( $bResult, $sDate . ' validated correctly' );\n    }\n\n    \/**\n     * This handles the fact that 1900 and 2100 are NOT leap years.  Since\n     * The validator will not acceppt a date after 2099, we don't have to\n     * worry about that date, but 1900-04-29 shouldn't validate.\n     *\n     *\/\n    public function testNonLeapYearFebruaryWith29DaysShouldBeInvalid2()\n    {\n        $sDate = '1900-02-29';\n        $bResult = $this->_oValidator->isValid( $sDate );\n        $this->assertFalse( $bResult, $sDate . ' validated correctly' );\n    }\n\n    public function testFebruaryWith30DaysShouldBeInvalid()\n    {\n        $sDate = '2008-02-30';\n        $bResult = $this->_oValidator->isValid( $sDate );\n        $this->assertFalse( $bResult, $sDate . ' validated correctly' );\n    }\n\n    public function testShortMonthsWith31DaysShouldBeInvalid()\n    {\n        $sDate = '2008-09-31';\n        $bResult = $this->_oValidator->isValid( $sDate );\n        $this->assertFalse( $bResult, $sDate . ' validated correctly' );\n    }\n\n    public function testLongMonthsWith31DaysShouldPass()\n    {\n        $sDate = '2008-10-31';\n        $bResult = $this->_oValidator->isValid( $sDate );\n        $this->assertTrue( $bResult, $sDate . ' did not validate correctly' );\n    }\n\n}\n{code} \n\n{noformat} \n-----------------------------------------------------\nTEST RESULTS:\n-----------------------------------------------------\n\n Test Valid Dates S Hould Not Fail1: SUCCESS\n Test Valid Dates S Hould Not Fail2: SUCCESS\n Test Invalid Date Format Should Be Invalid1: SUCCESS\n Test Invalid Date Format Should Be Invalid2: FAILURE\n Test Invalid Date Format Should Be Invalid3: SUCCESS\n Test Invalid Date Format Should Be Invalid4: FAILURE\n Test Invalid Date Format Should Be Invalid5: FAILURE\n Test Leap Year February With29 Days Should Pass1: SUCCESS\n Test Non Leap Year February With29 Days Should Be Invalid1: SUCCESS\n Test Non Leap Year February With29 Days Should Be Invalid2: SUCCESS\n Test February With30 Days Should Be Invalid: SUCCESS\n Test Short Months With31 Days Should Be Invalid: SUCCESS\n Test Long Months With31 Days Should Pass: SUCCESS\n{noformat} \n\n\nnotice that the following formats are actually validating correctly, despite me strictly specifying the format:\n\ndate( 'Y\/m\/d' );\ndate( 'Y:m:d' );\ndate( 'Y-m-d H:i' );\n\n\nWhen using Zend_Date::isDate(), I get similar results except with date( 'r' ) passing validation as well.\n\n\n\n\n"
        },
        "priority": {
            "name": "priority",
            "type": "com.atlassian.jira.issue.priority.Priority",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/priority\/3",
                "name": "Major"
            }
        },
        "duedate": {
            "name": "duedate",
            "type": "java.util.Date"
        },
        "customfield_10022": {
            "name": "Fix Version Priority",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:select"
        },
        "watcher": {
            "name": "watcher",
            "type": "watcher",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-4599\/watchers",
                "isWatching": false,
                "watchCount": 1
            }
        },
        "worklog": {
            "name": "worklog",
            "type": "worklog",
            "value": [

            ]
        },
        "status": {
            "name": "status",
            "type": "com.atlassian.jira.issue.status.Status",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/status\/5",
                "name": "Resolved"
            }
        },
        "labels": {
            "name": "labels",
            "type": "com.atlassian.jira.issue.label.Label",
            "value": [

            ]
        },
        "assignee": {
            "name": "assignee",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                "name": "thomas",
                "displayName": "Thomas Weidner",
                "active": true
            }
        },
        "links": {
            "name": "links",
            "type": "issuelinks",
            "value": [

            ]
        },
        "attachment": {
            "name": "attachment",
            "type": "attachment",
            "value": [

            ]
        },
        "sub-tasks": {
            "name": "sub-tasks",
            "type": "issuelinks",
            "value": [

            ]
        },
        "versions": {
            "name": "versions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/version\/10201",
                    "id": 10201,
                    "description": "Mini Release",
                    "name": "1.6.1",
                    "userReleaseDate": "15\/Sep\/08",
                    "archived": false,
                    "releaseDate": "2008-09-15",
                    "released": true
                }
            ]
        },
        "project": {
            "name": "project",
            "type": "com.atlassian.jira.project.Project",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/project\/ZF",
                "key": "ZF",
                "name": "Zend Framework",
                "roles": {

                }
            }
        },
        "components": {
            "name": "components",
            "type": "com.atlassian.jira.bc.project.component.ProjectComponent",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/component\/10072",
                    "id": 10072,
                    "name": "Zend_Date",
                    "description": "Zend_Date is the basic library for the handling of all date, time and calendar-related issues.",
                    "isAssigneeTypeValid": false
                }
            ]
        },
        "comment": {
            "name": "comment",
            "type": "com.atlassian.jira.issue.fields.CommentSystemField",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/27157",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "body": "Your testInvalidDateFormatShouldBeInvalid2, 4 and 5 does not test properly.\n\nWhy should a Y.m.d where . is the separator not be valid ?\nYou are testing for the date and not if the string contains this separators.\n\nSeparators are independently from the date and you can use any separator as long as the date is correct.\n",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "created": "2008-12-09T00:55:40.000+0000",
                    "updated": "2008-12-09T00:55:40.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/27345",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "body": "Closed due to no response",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "created": "2008-12-16T01:41:50.000+0000",
                    "updated": "2008-12-16T01:41:50.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/27348",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=ajbrown",
                        "name": "ajbrown",
                        "displayName": "A.J. Brown",
                        "active": true
                    },
                    "body": "I apologize. When I went to respond, I did not have sufficient rights to leave a comment for some reason.  This was fixed a few days ago, and I since forgot.\n\nWhen a format is passed in, you would expect the date to validate the format as well.  Seperator characters fall into the category \"expected format\" as loosely described:\n\nhttp:\/\/framework.zend.com\/manual\/en\/zend.validate.set.html#zend.validate.set.date\n\"And if the optional format option is set this format is used for the validation. \"\n\nAND\n\nhttp:\/\/framework.zend.com\/manual\/en\/zend.date.additional.html#zend.date.additional.checking\n\"The second parameter can be the format which the date is expected to have.\"\n\n\nEither the functionality should be changed to match the description, or the documentation should be ammended. ",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=ajbrown",
                        "name": "ajbrown",
                        "displayName": "A.J. Brown",
                        "active": true
                    },
                    "created": "2008-12-16T09:50:39.000+0000",
                    "updated": "2008-12-16T09:50:39.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/52909",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=nike+shox",
                        "name": "nike shox",
                        "displayName": "nike shox",
                        "active": true
                    },
                    "body": "En Hvit Vulkaniseret only supports skoen http:\/\/www.nikeshoxsko.biz under and avsluttes with a brun gummi under f\u00f8ttene. Each par will completely with a sett av Kork innleggss\u00e5ler, extra Blonder and Stov bags.More detaljerte Pictures of \"Woodgrain\" Janoski below. You can http:\/\/www.nikeshoxsko.biz plukke opp et par achieve with forhandlere as Primitive.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=nike+shox",
                        "name": "nike shox",
                        "displayName": "nike shox",
                        "active": true
                    },
                    "created": "2012-11-21T08:08:54.000+0000",
                    "updated": "2012-11-21T08:08:54.000+0000"
                }
            ]
        }
    },
    "transitions": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-4599\/transitions"
}