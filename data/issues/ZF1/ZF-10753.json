{
    "expand": "html",
    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-10753",
    "key": "ZF-10753",
    "fields": {
        "summary": {
            "name": "summary",
            "type": "java.lang.String",
            "value": "Add SOA design to Zend_Soap AutoDiscovery"
        },
        "timetracking": {
            "name": "timetracking",
            "type": "com.atlassian.jira.issue.fields.TimeTrackingSystemField"
        },
        "issuetype": {
            "name": "issuetype",
            "type": "com.atlassian.jira.issue.issuetype.IssueType",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issueType\/5",
                "name": "Sub-task",
                "subtask": true
            }
        },
        "votes": {
            "name": "votes",
            "type": "com.atlassian.jira.issue.fields.VotesSystemField",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-10753\/votes",
                "votes": 0,
                "hasVoted": false
            }
        },
        "security": {
            "name": "security",
            "type": "com.atlassian.jira.issue.security.IssueSecurityLevel"
        },
        "fixVersions": {
            "name": "fixVersions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [

            ]
        },
        "reporter": {
            "name": "reporter",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=jboffel",
                "name": "jboffel",
                "displayName": "Jeannie BOFFEL",
                "active": true
            }
        },
        "created": {
            "name": "created",
            "type": "java.util.Date",
            "value": "2010-11-28T06:27:45.000+0000"
        },
        "updated": {
            "name": "updated",
            "type": "java.util.Date",
            "value": "2012-11-20T21:37:41.000+0000"
        },
        "customfield_10041": {
            "name": "Tags",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:labels"
        },
        "description": {
            "name": "description",
            "type": "java.lang.String",
            "value": "SOA design is based on reporting error through SOAP Fault.\r\nOf course SOAP Fault is already supported by current SOAP Server and Zend_Soap_Wsdl (even it's still with bug, see linked issue).\r\n\r\nBut currently it's impossible to use it through AutoDiscovery system.\r\nHere is a possible design I implemented successfully:\r\n\r\n{code}\r\n\/**\r\n * @xsd element\r\n * @xsd sequence\r\n *\/\r\nclass wsGetUserInfosException extends SoapFault\r\n{\r\n\t\/**\r\n\t * @var int $code\r\n\t *\/\r\n\tpublic $code;\r\n\t\/**\r\n\t * @var string $string\r\n\t *\/\r\n\tpublic $message;\r\n\t\/**\r\n\t * @var object $trace\r\n\t *\/\r\n\tpublic $trace;\r\n\t\r\n\tpublic function __construct($params=array(0, \"\"), $faultactor=null, $headerfault=null) {\r\n\t\tparent::__construct('Client', 'wsGetUserInfos: Fatal error', $faultactor, $this, __CLASS__, $headerfault);\r\n\t\t$this->code=$params[0];\r\n\t\t$this->message=$params[1];\r\n\t\t$this->trace=arrayToObject($this->getTrace());\r\n\t}\r\n\t\r\n}\r\n{code}\r\n\r\nIt's directly using improvment of parent task. So it's required dependecy.\r\nFor now we just declare a new element in the WSDL, we also need to declare our new custom SoapFault:\r\n\r\n{code}\r\nclass wsGetUserInfos\r\n{\r\n\t\/**\r\n     * @param\tstring\t$name\r\n     * @return\twsGetUserInfosResult\r\n     * @xsd\tfault \twsGetUserInfosException\r\n     *\/\r\n\tpublic function getUserInfos($name) {\r\n\t\tif ($name=='')\r\n\t\t\tthrow new wsGetUserInfosException(array(1, \"Parameter name missing !\"));\r\n\r\n\t\t$details=new detailsBrotherList();\r\n\t\t$details->addBrotherDetail(new brotherDetail(\"Jean\", 1, 10));\r\n\t\t$details->addBrotherDetail(new brotherDetail(\"Jack\", 2, 20));\r\n\t\t$details->addBrotherDetail(new brotherDetail(\"Martin\", 3, 30));\r\n\t\t\r\n\t\t\r\n\t\treturn new wsGetUserInfosResult($name, \"Dupont\", 33, $details);\r\n\t\t\r\n\t}\r\n\t\r\n}\r\n\r\n{code}\r\n\r\nAnd so the modified part of AutoDiscovery to handle the new @xsd fault:\r\n\r\n{code}\r\n    \/**\r\n     * Add a function to the WSDL document.\r\n     *\r\n     * @param $function Zend_Server_Reflection_Function_Abstract function to add\r\n     * @param $wsdl Zend_Soap_Wsdl WSDL document\r\n     * @param $port object wsdl:portType\r\n     * @param $binding object wsdl:binding\r\n     * @return void\r\n     *\/\r\n    protected function _addFunctionToWsdl($function, $wsdl, $port, $binding)\r\n    {\r\n        $uri = $this->getUri();\r\n\r\n        \/\/ We only support one prototype: the one with the maximum number of arguments\r\n        $prototype = null;\r\n        $maxNumArgumentsOfPrototype = -1;\r\n        foreach ($function->getPrototypes() as $tmpPrototype) {\r\n            $numParams = count($tmpPrototype->getParameters());\r\n            if ($numParams > $maxNumArgumentsOfPrototype) {\r\n                $maxNumArgumentsOfPrototype = $numParams;\r\n                $prototype = $tmpPrototype;\r\n            }\r\n        }\r\n        if ($prototype === null) {\r\n            require_once \"Zend\/Soap\/AutoDiscover\/Exception.php\";\r\n            throw new Zend_Soap_AutoDiscover_Exception(\"No prototypes could be found for the '\" . $function->getName() . \"' function\");\r\n        }\r\n\r\n        \/\/ Add the input message (parameters)\r\n        $args = array();\r\n        if ($this->_bindingStyle['style'] == 'document') {\r\n            \/\/ Document style: wrap all parameters in a sequence element\r\n            $sequence = array();\r\n            foreach ($prototype->getParameters() as $param) {\r\n                $sequenceElement = array(\r\n                    'name' => $param->getName(),\r\n                    'type' => $wsdl->getType($param->getType())\r\n                );\r\n                if ($param->isOptional()) {\r\n                    $sequenceElement['nillable'] = 'true';\r\n                }\r\n                $sequence[] = $sequenceElement;\r\n            }\r\n            $element = array(\r\n                'name' => $function->getName(),\r\n                'sequence' => $sequence\r\n            );\r\n            \/\/ Add the wrapper element part, which must be named 'parameters'\r\n            $args['parameters'] = array('element' => $wsdl->addElement($element));\r\n        } else {\r\n            \/\/ RPC style: add each parameter as a typed part\r\n            foreach ($prototype->getParameters() as $param) {\r\n                $args[$param->getName()] = array('type' => $wsdl->getType($param->getType()));\r\n            }\r\n        }\r\n        $wsdl->addMessage($function->getName() . 'In', $args);\r\n\r\n        $isOneWayMessage = false;\r\n        if($prototype->getReturnType() == \"void\") {\r\n            $isOneWayMessage = true;\r\n        }\r\n\r\n        if($isOneWayMessage == false) {\r\n            \/\/ Add the output message (return value)\r\n            $args = array();\r\n            if ($this->_bindingStyle['style'] == 'document') {\r\n                \/\/ Document style: wrap the return value in a sequence element\r\n                $sequence = array();\r\n                if ($prototype->getReturnType() != \"void\") {\r\n                    $sequence[] = array(\r\n                        'name' => $function->getName() . 'Result',\r\n                        'type' => $wsdl->getType($prototype->getReturnType())\r\n                    );\r\n                }\r\n                $element = array(\r\n                    'name' => $function->getName() . 'Response',\r\n                    'sequence' => $sequence\r\n                );\r\n                \/\/ Add the wrapper element part, which must be named 'parameters'\r\n                $args['parameters'] = array('element' => $wsdl->addElement($element));\r\n            } else if ($prototype->getReturnType() != \"void\") {\r\n                \/\/ RPC style: add the return value as a typed part\r\n                $args['return'] = array('type' => $wsdl->getType($prototype->getReturnType()));\r\n            }\r\n            $wsdl->addMessage($function->getName() . 'Out', $args);\r\n        }\r\n        \r\n        $isUsingCustomFault = false;\r\n        if (preg_match_all('\/@xsd\\s+fault\\s+([^\\s]+)\/m', $function->getDocComment(), $matches)) {\r\n\t\t\t$classNameCustomFault = $matches[1][0];\r\n\t\t\tif (class_exists($classNameCustomFault)) {\r\n\t\t\t\t$isUsingCustomFault = true;\r\n\t\t\t\t$class = new ReflectionClass($classNameCustomFault);\r\n\t\t\t}\r\n        }\r\n        \r\n        if ($isUsingCustomFault) {\r\n\t    \tif (preg_match_all('\/@xsd\\s+element\\s+(.*)\/m', $class->getDocComment(), $matches)) {\r\n\t\t\t\t$classNameTypeStrategy = 'element';   \r\n\t        } else if (preg_match_all('\/@xsd\\s+complexType\\s+(.*)\/m', $class->getDocComment(), $matches)) {\r\n\t\t\t\t$classNameTypeStrategy = 'type';   \r\n\t        }\r\n        }\r\n\t\t\r\n        if ($isUsingCustomFault) {\r\n\t\t\t$wsdl->addMessage($classNameCustomFault, array('fault' => array($classNameTypeStrategy => $wsdl->getType($classNameCustomFault))));\r\n        }\r\n        \r\n        \/\/ Add the portType operation\r\n        if($isOneWayMessage == false) {\r\n            $portOperation = $wsdl->addPortOperation($port, $function->getName(), 'tns:' . $function->getName() . 'In', 'tns:' . $function->getName() . 'Out', $isUsingCustomFault ? $wsdl->getType($classNameCustomFault) : false);\r\n        } else {\r\n            $portOperation = $wsdl->addPortOperation($port, $function->getName(), 'tns:' . $function->getName() . 'In', false, $isUsingCustomFault ? $wsdl->getType($classNameCustomFault) : false);\r\n        }\r\n        $desc = $function->getDescription();\r\n        if (strlen($desc) > 0) {\r\n            $wsdl->addDocumentation($portOperation, $desc);\r\n        }\r\n\r\n        \/\/ When using the RPC style, make sure the operation style includes a 'namespace' attribute (WS-I Basic Profile 1.1 R2717)\r\n        if ($this->_bindingStyle['style'] == 'rpc' && !isset($this->_operationBodyStyle['namespace'])) {\r\n            $this->_operationBodyStyle['namespace'] = ''.$uri;\r\n        }\r\n\r\n        \/\/ Add the binding operation\r\n        $operation = $wsdl->addBindingOperation($binding, $function->getName(),  $this->_operationBodyStyle, $this->_operationBodyStyle, $isUsingCustomFault ? array('name' => $classNameCustomFault) : false);\r\n        $wsdl->addSoapOperation($operation, $uri . '#' .$function->getName());\r\n\r\n        \/\/ Add the function name to the list\r\n        $this->_functions[] = $function->getName();\r\n    }\r\n{code}"
        },
        "priority": {
            "name": "priority",
            "type": "com.atlassian.jira.issue.priority.Priority",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/priority\/4",
                "name": "Minor"
            }
        },
        "duedate": {
            "name": "duedate",
            "type": "java.util.Date"
        },
        "customfield_10022": {
            "name": "Fix Version Priority",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:select"
        },
        "watcher": {
            "name": "watcher",
            "type": "watcher",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-10753\/watchers",
                "isWatching": false,
                "watchCount": 1
            }
        },
        "worklog": {
            "name": "worklog",
            "type": "worklog",
            "value": [

            ]
        },
        "status": {
            "name": "status",
            "type": "com.atlassian.jira.issue.status.Status",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/status\/3",
                "name": "In Progress"
            }
        },
        "labels": {
            "name": "labels",
            "type": "com.atlassian.jira.issue.label.Label",
            "value": [

            ]
        },
        "assignee": {
            "name": "assignee",
            "type": "com.opensymphony.user.User"
        },
        "parent": {
            "name": "parent",
            "type": "issuelinks",
            "value": {
                "issueKey": "ZF-9180",
                "issue": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-9180",
                "type": {
                    "name": "Parent",
                    "direction": "INBOUND"
                }
            }
        },
        "links": {
            "name": "links",
            "type": "issuelinks",
            "value": [
                {
                    "issueKey": "ZF-10754",
                    "issue": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-10754",
                    "type": {
                        "name": "Dependency",
                        "direction": "OUTBOUND",
                        "description": "depends on"
                    }
                }
            ]
        },
        "attachment": {
            "name": "attachment",
            "type": "attachment",
            "value": [

            ]
        },
        "sub-tasks": {
            "name": "sub-tasks",
            "type": "issuelinks",
            "value": [

            ]
        },
        "versions": {
            "name": "versions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/version\/10501",
                    "id": 10501,
                    "description": "Mini Release",
                    "name": "1.11.1",
                    "userReleaseDate": "30\/Nov\/10",
                    "archived": false,
                    "releaseDate": "2010-11-30",
                    "released": true
                }
            ]
        },
        "project": {
            "name": "project",
            "type": "com.atlassian.jira.project.Project",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/project\/ZF",
                "key": "ZF",
                "name": "Zend Framework",
                "roles": {

                }
            }
        },
        "components": {
            "name": "components",
            "type": "com.atlassian.jira.bc.project.component.ProjectComponent",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/component\/10098",
                    "id": 10098,
                    "name": "Zend_Soap_Wsdl",
                    "description": "Class for accessing SOAP WSDL documents.",
                    "isAssigneeTypeValid": false
                }
            ]
        },
        "comment": {
            "name": "comment",
            "type": "com.atlassian.jira.issue.fields.CommentSystemField",
            "value": [

            ]
        }
    },
    "transitions": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-10753\/transitions"
}