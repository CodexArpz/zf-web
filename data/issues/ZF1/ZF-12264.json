{
    "expand": "html",
    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-12264",
    "key": "ZF-12264",
    "fields": {
        "summary": {
            "name": "summary",
            "type": "java.lang.String",
            "value": "Lost value from first file element in form with several file elements."
        },
        "timetracking": {
            "name": "timetracking",
            "type": "com.atlassian.jira.issue.fields.TimeTrackingSystemField"
        },
        "issuetype": {
            "name": "issuetype",
            "type": "com.atlassian.jira.issue.issuetype.IssueType",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issueType\/1",
                "name": "Bug",
                "subtask": false
            }
        },
        "votes": {
            "name": "votes",
            "type": "com.atlassian.jira.issue.fields.VotesSystemField",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-12264\/votes",
                "votes": 0,
                "hasVoted": false
            }
        },
        "security": {
            "name": "security",
            "type": "com.atlassian.jira.issue.security.IssueSecurityLevel"
        },
        "fixVersions": {
            "name": "fixVersions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [

            ]
        },
        "reporter": {
            "name": "reporter",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=kimonniez",
                "name": "kimonniez",
                "displayName": "Kirill Brus",
                "active": true
            }
        },
        "created": {
            "name": "created",
            "type": "java.util.Date",
            "value": "2012-05-30T06:41:39.000+0000"
        },
        "updated": {
            "name": "updated",
            "type": "java.util.Date",
            "value": "2012-05-30T12:02:48.000+0000"
        },
        "customfield_10041": {
            "name": "Tags",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:labels",
            "value": [
                "file",
                "form"
            ]
        },
        "description": {
            "name": "description",
            "type": "java.lang.String",
            "value": "I have a form which allows to manage an information in DB. This form contains few text inputs, textareas and three file elements. When I submit the form, information is saved to DB (from file elements are saved names of files). In a class for this form I've set a 'required' only for first file element. And when I submit form, to DB get only second and third names of files. But in any another cases (first and second, first and third, only first) name of the first file gets to DB. And if I remove 'required' condition for first file element and submit form - everething is ok and all three names get to DB.\r\n\r\nIf you need little more information - ask.\r\nThx in advance.\r\n\r\nUPD: sorry for Form class view. I dont know why it looks like piece of text.\r\n\r\nClass for my form:\r\n{code}\r\nclass Form_AdminHotels extends Zend_Form\r\n{\r\n   \tpublic function init() {\t\r\n\t\t$this->setMethod('POST');\r\n\t\t$this->setAttrib('enctype', 'multipart\/form-data');\t\t\r\n\t\t$this->setDecorators(array( \r\n\t\t\t'FormElements', \r\n\t\t\tarray('HtmlTag', array('tag' => 'table')), \r\n\t\t\t'Form' \r\n\t\t)); \r\n\t\t\r\n\t\t$this->setElementDecorators(array( \r\n\t\t\t'ViewHelper', \r\n\t\t\t'Errors', \r\n\t\t\tarray('decorator' => array('td' => 'HtmlTag'), 'options' => array('tag' => 'td')), \r\n\t\t\tarray('Label', array('tag' => 'td')), \r\n\t\t\tarray('decorator' => array('tr' => 'HtmlTag'), 'options' => array('tag' => 'tr')), \r\n\t\t)); \r\n\t\r\n\t\t$this->addElement('text', 'id', array(\r\n            'label' => '#',\r\n            'attribs' => array(\r\n                'maxlength' => 100,\r\n                'size' => 30,\r\n\t\t\t\t'readonly' => 'readonly'\r\n            ),\r\n            \r\n            \r\n        ));\r\n\t\t\r\n\t\t$this->addElement('text', 'name', array(\r\n            'label' => '\u0418\u043c\u044f*',\r\n            'attribs' => array(\r\n                'maxlength' => 100,\r\n                'size' => 30\r\n            ),\r\n            'validators' => array(\r\n                array('StringLength', false, array(3,100, 'messages' => '\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0435 \u0438\u043c\u044f')),\r\n                array('NotEmpty', true, array('messages' => '\u0418\u043c\u044f \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0443\u0441\u0442\u044b\u043c')),\r\n            ),\t\t\t\r\n            'required' => TRUE\r\n        ));\r\n\t\t\r\n\t\t\t\t\t\t\t\r\n\t\t$this->addElement('textarea', 'description', array(\r\n            'label' => '\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435',\r\n            'attribs' => array(\r\n                'maxlength' => 1000,\r\n\t\t\t\t'rows' => 10,\r\n\t\t\t\t'cols' => 35,\r\n\t\t\t\t'id' => 'replaced1'\r\n            ),           \r\n            'required' => TRUE\r\n        ));\r\n\t\t\r\n\t\t\r\n\t\t$this->addElement('file', 'img1', array(\r\n            'label' => '\u041a\u0430\u0440\u0442\u0438\u043d\u043a\u0430 1',\r\n            'attribs' => array(\r\n                'maxlength' => 100,\r\n                'size' => 30\r\n            ),    \r\n\t\t\t\r\n           \/\/'required' => TRUE    <-- remove this comment\r\n        ));\r\n\t\t$this->getElement('img1')->setDecorators(\r\n\t\t\tarray(\r\n\t\t\t\t'File',\r\n\t\t\t\t'Errors',\r\n\t\t\t\tarray(array('data' => 'HtmlTag'), array('tag' => 'td')),\r\n\t\t\t\tarray('Label', array('tag' => 'th')),\r\n\t\t\t\tarray(array('row' => 'HtmlTag'), array('tag' => 'tr'))\r\n\t\t\t)\r\n\t\t);\r\n\t\t\r\n\t\t$this->addElement('file', 'img2', array(\r\n            'label' => '\u041a\u0430\u0440\u0442\u0438\u043d\u043a\u0430 2',\r\n            'attribs' => array(\r\n                'maxlength' => 100,\r\n                'size' => 30\r\n            ),\r\n           \t\t\r\n            \r\n        ));\r\n\t\t$this->getElement('img2')->setDecorators(\r\n\t\t\tarray(\r\n\t\t\t\t'File',\r\n\t\t\t\t'Errors',\r\n\t\t\t\tarray(array('data' => 'HtmlTag'), array('tag' => 'td')),\r\n\t\t\t\tarray('Label', array('tag' => 'th')),\r\n\t\t\t\tarray(array('row' => 'HtmlTag'), array('tag' => 'tr'))\r\n\t\t\t)\r\n\t\t);\r\n\t\t$this->addElement('file', 'img3', array(\r\n            'label' => '\u041a\u0430\u0440\u0442\u0438\u043d\u043a\u0430 3',\r\n            'attribs' => array(\r\n                'maxlength' => 100,\r\n                'size' => 30\r\n            ),\r\n            \r\n        ));\r\n\t\t$this->getElement('img3')->setDecorators(\r\n\t\t\tarray(\r\n\t\t\t\t'File',\r\n\t\t\t\t'Errors',\r\n\t\t\t\tarray(array('data' => 'HtmlTag'), array('tag' => 'td')),\r\n\t\t\t\tarray('Label', array('tag' => 'th')),\r\n\t\t\t\tarray(array('row' => 'HtmlTag'), array('tag' => 'tr'))\r\n\t\t\t)\r\n\t\t);\r\n\t\t\r\n\t\t$this->addElement('textarea', 'inside', array(\r\n            'label' => '\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435',\r\n            'attribs' => array(\r\n                'maxlength' => 100000,\r\n\t\t\t\t'rows' => 10,\r\n\t\t\t\t'cols' => 35,\r\n\t\t\t\t'id' => 'replaced2'\r\n            ),           \r\n            'required' => TRUE\r\n        ));\r\n\t\t\r\n\t\t$this->addElement('textarea', 'inHotel', array(\r\n            'label' => '\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435',\r\n            'attribs' => array(\r\n                'maxlength' => 100000,\r\n\t\t\t\t'rows' => 10,\r\n\t\t\t\t'cols' => 35,\r\n\t\t\t\t'id' => 'replaced3'\r\n            ),           \r\n            'required' => TRUE\r\n        ));\r\n\t\t\r\n\t\t$this->addElement('textarea', 'outside', array(\r\n            'label' => '\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435',\r\n            'attribs' => array(\r\n                'maxlength' => 100000,\r\n\t\t\t\t'rows' => 10,\r\n\t\t\t\t'cols' => 35,\r\n\t\t\t\t'id' => 'replaced4'\r\n            ),           \r\n            'required' => TRUE\r\n        ));\r\n\t\t\r\n\t\t\r\n\t}\r\n\r\n}\t\r\n{code}\r\n\r\nAction from controller:\r\n{code}\r\npublic function hotelseditAction() {\r\n\t\t$this->view->ckeditor = 1;\r\n\t\t$this->view->datepicker = 1;\t\t\r\n\t\t$hotelsMapper = new Application_Model_HotelsMapper();\r\n\t\t$id = $this->getRequest()->getParam('hotelId');\r\n\t\t$form = new Form_AdminHotels;\r\n\t\t$this->view->form = $form;\r\n\t\tif($id != 0) {\r\n\t\t\t$hotel = $hotelsMapper->getHotelById($id);\r\n\t\t\t\/\/die(print_r($hotel->toArray()));\r\n\t\t\t$form->populate($hotel->toArray());\t\t\t\r\n\t\t} \r\n\t\tif ($this->getRequest()->isPost()) {\r\n\t\t\t$values = $this->getRequest()->getParams();\t\r\n\t\t\tif($form->isValid($values)){\t\r\n\t\t\t\t$adapter = new Zend_File_Transfer_Adapter_Http();\t\t\r\n\t\t\t\t$adapter->setDestination(APPLICATION_PATH.'\/uploads');\r\n\t\t\t\t$adapter->receive();\r\n\t\t\t\tif (!$adapter->receive()) {\r\n\t\t\t\t\t$messages = $adapter->getMessages();\r\n\t\t\t\t\techo implode(\"\\n\", $messages);\r\n\t\t\t\t\t\/\/die(print_r());\r\n\t\t\t\t}\r\n\t\t\t\t\/\/die(print_r($form->getValues()));\r\n\t\t\t\t$hotel = new Application_Model_Hotels($form->getValues());\t\t\t\r\n\t\t\t\t$hotelsMapper->save($hotel);\r\n\t\t\t\t\r\n\t\t\t\t$this->_helper->getHelper('redirector')->goToUrlAndExit($this->view->url(array(),'admin_hotels'));\r\n\t\t\t} else {\r\n\t\t\t\t$form->populate($values);\r\n\t\t\t}\t\r\n\t\t}\r\n\t}\r\n{code}\r\nApplication_Model_HotelsMapper class\r\n{code}\r\nclass Application_Model_HotelsMapper\r\n{\r\n    protected $_dbTable;\r\n\tprotected $_dbTableClass = 'Application_Model_DbTable_Hotels';\r\n\tprotected $_select;\r\n\r\n\tpublic function __construct() {\r\n\t\t$this->_select = $this->getDbTable()->select();\r\n\t}\r\n\t\r\n    public function setDbTable($dbTable)\r\n    {\t\t\r\n        if (is_string($dbTable)) {\t\t\t\r\n            $dbTable = new $dbTable();\r\n        }\r\n        if (!$dbTable instanceof Zend_Db_Table_Abstract) {\r\n            throw new Exception('Invalid table data gateway provided');\r\n        }\r\n        $this->_dbTable = $dbTable;\r\n        return $this;\r\n    }\r\n\r\n    public function getDbTable()\r\n    {\t\t\r\n        if (null === $this->_dbTable) {\r\n            $this->setDbTable($this->_dbTableClass);\r\n        }\t\t\r\n        return $this->_dbTable;\r\n    }\r\n\r\n\tpublic function setJoins() {\r\n\t\t\r\n\t}\r\n\t\r\n    public function save(Application_Model_Hotels $tour)\r\n    {\r\n\t\t$data = array(            \r\n            'description' => $tour->getDescription(),            \r\n\t\t\t'name' => $tour->getName(),\r\n\t\t\t'img1' => $tour->getImg1(),\r\n\t\t\t'img2' => $tour->getImg2(),\r\n\t\t\t'img3' => $tour->getImg3(),\r\n\t\t\t'inside' => $tour->getInside(),\r\n\t\t\t'inHotel' => $tour->getInHotel(),\t\t\t\r\n\t\t\t'outside' => $tour->getOutside(),\t\t\t\r\n        );\t\t\r\n        if (null === ($id = $tour->getId())) {\r\n            unset($data['id']);\r\n            $this->getDbTable()->insert($data);\r\n        } else {\r\n            $this->getDbTable()->update($data, array('id = ?' => $id));\r\n        }\r\n    }\r\n\t\t\t\t\r\n\tpublic function getHotelById($hotelId) {\r\n\t\t$select = $this->_select->where('id = ?', $hotelId);\r\n\t\treturn $this->getDbTable()->fetchRow($select);\r\n\t}\r\n\t\r\n\tpublic function deleteHotel($idList) {\r\n\t\t$this->getDbTable()->delete('id in ('.$idList.')');\r\n\t} \r\n\t\r\n\tpublic function getAll() {\t\t\r\n\t\t$select = $this->_select;\t\t\r\n\t\treturn $this->getDbTable()->fetchAll($select);\r\n\t}\r\n\t\r\n\t\r\n}\r\n{code}\r\nApplication_Model_Hotels Class\r\n{code}\r\nclass Application_Model_Hotels\r\n{\r\n    protected $_name;\r\n\tprotected $_id;\r\n\tprotected $_description;\t\r\n\tprotected $_img1;\r\n\tprotected $_img2;\r\n\tprotected $_img3;\r\n\tprotected $_inside;\r\n\tprotected $_inHotel;\r\n\tprotected $_outside;\r\n\t\r\n    public function __construct(array $options = null)\r\n    {\r\n        if (is_array($options)) {\r\n            $this->setOptions($options);\r\n        }\r\n    }\r\n\r\n    public function __set($name, $value)\r\n    {\r\n        $method = 'set' . $name;\r\n        if (('mapper' == $name) || !method_exists($this, $method)) {\r\n            throw new Exception('Invalid comment property');\r\n        }\r\n        $this->$method($value);\r\n    }\r\n\r\n    public function __get($name)\r\n    {\r\n        $method = 'get' . $name;\r\n        if (('mapper' == $name) || !method_exists($this, $method)) {\r\n            throw new Exception('Invalid comment property');\r\n        }\r\n        return $this->$method();\r\n    }\r\n\r\n    public function setOptions(array $options)\r\n    {\t\t\r\n        $methods = get_class_methods($this);\t\t\r\n        foreach ($options as $key => $value) {\t\t\t\t\r\n            $method = 'set' . ucfirst($key);\t\t\t\t\r\n            if (in_array($method, $methods)) {\r\n\t\t\t\t\t\t\r\n                $this->$method($value);\r\n            }\t\t\t\r\n        }\r\n        return $this;\r\n    }\r\n\r\n    public function setDescription($description)\r\n    {\r\n        $this->_description = $description;\r\n        return $this;\r\n    }\r\n\r\n    public function getDescription()\r\n    {\r\n        return $this->_description;\r\n    }   \r\n\r\n    public function setName($name)\r\n    {\t\t\r\n        $this->_name =  $name;\t\t\r\n        return $this;\r\n    }\r\n\r\n    public function getName()\r\n    {\r\n        return $this->_name;\r\n    }\r\n\t\r\n\tpublic function setId($id)\r\n    {\r\n        $this->_id = (int) $id;\r\n        return $this;\r\n    }\r\n\r\n    public function getId()\r\n    {\r\n        return $this->_id;\r\n    }\r\n\t\r\n\t\t\r\n\tpublic function setImg1($img1)\r\n    {\r\n        $this->_img1 = $img1;\r\n        return $this;\r\n    }\r\n\r\n    public function getImg1()\r\n    {\r\n        return $this->_img1;\r\n    }\r\n\t\r\n\tpublic function setImg2($img2)\r\n    {\r\n        $this->_img2 = $img2;\r\n        return $this;\r\n    }\r\n\r\n    public function getImg2()\r\n    {\r\n        return $this->_img2;\r\n    }\r\n\t\r\n\tpublic function setImg3($img3)\r\n    {\r\n        $this->_img3 = $img3;\r\n        return $this;\r\n    }\r\n\r\n    public function getImg3()\r\n    {\r\n        return $this->_img3;\r\n    }\r\n\t\r\n\tpublic function setInside($inside)\r\n    {\r\n        $this->_inside = $inside;\r\n        return $this;\r\n    }\r\n\r\n    public function getInside()\r\n    {\r\n        return $this->_inside;\r\n    }\r\n\t\r\n\tpublic function setInHotel($inHotel)\r\n    {\r\n        $this->_inHotel = $inHotel;\r\n        return $this;\r\n    }\r\n\r\n    public function getInHotel()\r\n    {\r\n        return $this->_inHotel;\r\n    }\r\n\t\r\n\tpublic function setOutside($outside)\r\n    {\r\n        $this->_outside = $outside;\r\n        return $this;\r\n    }\r\n\r\n    public function getOutside()\r\n    {\r\n        return $this->_outside;\r\n    }\r\n\t\r\n}\r\n{code}\r\nTable into DB:\r\n{code:sql}\r\nCREATE TABLE IF NOT EXISTS `hotels` (\r\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\r\n  `description` text COLLATE utf8_unicode_ci NOT NULL,\r\n  `name` varchar(100) COLLATE utf8_unicode_ci NOT NULL,\r\n  `img1` varchar(255) COLLATE utf8_unicode_ci NOT NULL,\r\n  `img2` varchar(255) COLLATE utf8_unicode_ci NOT NULL,\r\n  `img3` varchar(255) COLLATE utf8_unicode_ci NOT NULL,\r\n  `inside` text COLLATE utf8_unicode_ci NOT NULL,\r\n  `inHotel` text COLLATE utf8_unicode_ci NOT NULL,\r\n  `outside` text COLLATE utf8_unicode_ci NOT NULL,\r\n  PRIMARY KEY (`id`),\r\n  UNIQUE KEY `name` (`name`)\r\n) ENGINE=InnoDB  DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci AUTO_INCREMENT=2 ;\r\n{code}"
        },
        "priority": {
            "name": "priority",
            "type": "com.atlassian.jira.issue.priority.Priority",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/priority\/4",
                "name": "Minor"
            }
        },
        "duedate": {
            "name": "duedate",
            "type": "java.util.Date"
        },
        "customfield_10022": {
            "name": "Fix Version Priority",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:select"
        },
        "watcher": {
            "name": "watcher",
            "type": "watcher",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-12264\/watchers",
                "isWatching": false,
                "watchCount": 0
            }
        },
        "worklog": {
            "name": "worklog",
            "type": "worklog",
            "value": [

            ]
        },
        "status": {
            "name": "status",
            "type": "com.atlassian.jira.issue.status.Status",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/status\/1",
                "name": "Open"
            }
        },
        "labels": {
            "name": "labels",
            "type": "com.atlassian.jira.issue.label.Label",
            "value": [

            ]
        },
        "assignee": {
            "name": "assignee",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=alab",
                "name": "alab",
                "displayName": "Christian Albrecht",
                "active": true
            }
        },
        "links": {
            "name": "links",
            "type": "issuelinks",
            "value": [

            ]
        },
        "attachment": {
            "name": "attachment",
            "type": "attachment",
            "value": [

            ]
        },
        "sub-tasks": {
            "name": "sub-tasks",
            "type": "issuelinks",
            "value": [

            ]
        },
        "versions": {
            "name": "versions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [

            ]
        },
        "project": {
            "name": "project",
            "type": "com.atlassian.jira.project.Project",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/project\/ZF",
                "key": "ZF",
                "name": "Zend Framework",
                "roles": {

                }
            }
        },
        "components": {
            "name": "components",
            "type": "com.atlassian.jira.bc.project.component.ProjectComponent",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/component\/10029",
                    "id": 10029,
                    "name": "Zend_Form",
                    "isAssigneeTypeValid": false
                }
            ]
        },
        "comment": {
            "name": "comment",
            "type": "com.atlassian.jira.issue.fields.CommentSystemField",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/50862",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=kimonniez",
                        "name": "kimonniez",
                        "displayName": "Kirill Brus",
                        "active": true
                    },
                    "body": "UPD: if you upload all files and before it set them as 'required' in form class - all names of files will not put into DB",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=kimonniez",
                        "name": "kimonniez",
                        "displayName": "Kirill Brus",
                        "active": true
                    },
                    "created": "2012-05-30T10:41:30.000+0000",
                    "updated": "2012-05-30T10:41:30.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/50865",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=frosch",
                        "name": "frosch",
                        "displayName": "Frank Br\u00fcckner",
                        "active": true
                    },
                    "body": "Code tags added.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=frosch",
                        "name": "frosch",
                        "displayName": "Frank Br\u00fcckner",
                        "active": true
                    },
                    "created": "2012-05-30T12:02:48.000+0000",
                    "updated": "2012-05-30T12:02:48.000+0000"
                }
            ]
        }
    },
    "transitions": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-12264\/transitions"
}