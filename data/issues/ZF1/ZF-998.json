{
    "expand": "html",
    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-998",
    "key": "ZF-998",
    "fields": {
        "summary": {
            "name": "summary",
            "type": "java.lang.String",
            "value": "Possibility to merge two Zend_Config objects"
        },
        "timetracking": {
            "name": "timetracking",
            "type": "com.atlassian.jira.issue.fields.TimeTrackingSystemField"
        },
        "issuetype": {
            "name": "issuetype",
            "type": "com.atlassian.jira.issue.issuetype.IssueType",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/issueType\/2",
                "name": "New Feature",
                "subtask": false
            }
        },
        "votes": {
            "name": "votes",
            "type": "com.atlassian.jira.issue.fields.VotesSystemField",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-998\/votes",
                "votes": 3,
                "hasVoted": false
            }
        },
        "security": {
            "name": "security",
            "type": "com.atlassian.jira.issue.security.IssueSecurityLevel"
        },
        "resolution": {
            "name": "resolution",
            "type": "com.atlassian.jira.issue.resolution.Resolution",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/resolution\/1",
                "name": "Fixed"
            }
        },
        "fixVersions": {
            "name": "fixVersions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/version\/10130",
                    "id": 10130,
                    "description": "Mini Release",
                    "name": "1.0.2",
                    "userReleaseDate": "25\/Sep\/07",
                    "archived": true,
                    "releaseDate": "2007-09-25",
                    "released": true
                }
            ]
        },
        "resolutiondate": {
            "name": "resolutiondate",
            "type": "java.util.Date",
            "value": "2007-09-17T13:38:36.000+0000"
        },
        "reporter": {
            "name": "reporter",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=roro",
                "name": "roro",
                "displayName": "Romain Lalaut",
                "active": true
            }
        },
        "created": {
            "name": "created",
            "type": "java.util.Date",
            "value": "2007-03-01T16:19:07.000+0000"
        },
        "updated": {
            "name": "updated",
            "type": "java.util.Date",
            "value": "2008-01-23T14:40:49.000+0000"
        },
        "customfield_10041": {
            "name": "Tags",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:labels"
        },
        "description": {
            "name": "description",
            "type": "java.lang.String",
            "value": "I propose the ability to merge two Zend_Config objects.\nThe purpose is to overload a default configuration with another.\n\nFor example, this is the default conf inside a package\n{code}\n$default_conf_array = array(\n    'wonderful_feature_but_instable' => false,\n    'some_files' => array(\n        'foo'=>'dir\/foo.xml',\n        'bar'=>'dir\/bar.xml',\n    ),\n);\n$default_conf = new Zend_Config($default_conf_array);\n{code}\n\nThen this is my own conf outside the previous package\n{code}\n$user_conf_array = array(\n    'wonderful_feature_but_instable'=>true,\n    'some_files' => array(\n       'bar' => 'myDir\/bar.xml',\n       'baz' => 'myDir\/baz.xml,\n    ),\n);\n$user_conf = new Zend_Config($user_conf_array);\n{code}\n\nNow  i want to overload the package default conf\nthe result could be into a new object\n{code}\n$merged_conf = Zend_Config::merge($default_conf, $user_conf);\n{code}\nor updated with a method\n{code}\n$default_conf->merge($user_conf);\n{code}\n\nanyway the expected result should be\n{code}\narray(    \n    'wonderful_feature_but_instable'=>true,\n    'some_files' => array(\n       'foo' => 'dir\/foo.xml',\n       'bar' => 'myDir\/bar.xml',\n       'baz' => 'myDir\/baz.xml,\n    ),\n);\n{code}\n\nIt will be very useful for my needs (hoping that i'm not alone :)\nIf you like the idea but don't have enough time, i can do the work."
        },
        "priority": {
            "name": "priority",
            "type": "com.atlassian.jira.issue.priority.Priority",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/priority\/4",
                "name": "Minor"
            }
        },
        "duedate": {
            "name": "duedate",
            "type": "java.util.Date"
        },
        "customfield_10022": {
            "name": "Fix Version Priority",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:select"
        },
        "watcher": {
            "name": "watcher",
            "type": "watcher",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-998\/watchers",
                "isWatching": false,
                "watchCount": 2
            }
        },
        "worklog": {
            "name": "worklog",
            "type": "worklog",
            "value": [

            ]
        },
        "status": {
            "name": "status",
            "type": "com.atlassian.jira.issue.status.Status",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/status\/5",
                "name": "Resolved"
            }
        },
        "labels": {
            "name": "labels",
            "type": "com.atlassian.jira.issue.label.Label",
            "value": [

            ]
        },
        "assignee": {
            "name": "assignee",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=rob",
                "name": "rob",
                "displayName": "Rob Allen",
                "active": true
            }
        },
        "links": {
            "name": "links",
            "type": "issuelinks",
            "value": [

            ]
        },
        "attachment": {
            "name": "attachment",
            "type": "attachment",
            "value": [
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/attachment\/10810",
                    "filename": "zf-998.patch",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=rob",
                        "name": "rob",
                        "displayName": "Rob Allen",
                        "active": true
                    },
                    "created": "2007-09-15T15:25:23.000+0000",
                    "size": 1171,
                    "mimeType": "text\/plain",
                    "content": "http:\/\/framework.zend.com\/issues\/secure\/attachment\/10810\/zf-998.patch"
                }
            ]
        },
        "sub-tasks": {
            "name": "sub-tasks",
            "type": "issuelinks",
            "value": [

            ]
        },
        "versions": {
            "name": "versions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/version\/10022",
                    "id": 10022,
                    "description": "Beta Release; all components feature complete for 1.0",
                    "name": "0.9.0",
                    "userReleaseDate": "17\/Mar\/07",
                    "archived": true,
                    "releaseDate": "2007-03-17",
                    "released": true
                }
            ]
        },
        "project": {
            "name": "project",
            "type": "com.atlassian.jira.project.Project",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/project\/ZF",
                "key": "ZF",
                "name": "Zend Framework",
                "roles": {

                }
            }
        },
        "components": {
            "name": "components",
            "type": "com.atlassian.jira.bc.project.component.ProjectComponent",
            "value": [
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/component\/10010",
                    "id": 10010,
                    "name": "Zend_Config",
                    "description": "property based interface to an array",
                    "isAssigneeTypeValid": false
                }
            ]
        },
        "comment": {
            "name": "comment",
            "type": "com.atlassian.jira.issue.fields.CommentSystemField",
            "value": [
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/13086",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=rob",
                        "name": "rob",
                        "displayName": "Rob Allen",
                        "active": true
                    },
                    "body": "Doesn't something like:\n\n{code}\n$merged = new Zend_Config(array_merge($default_conf->asArray(), $user_conf->asArray()));\n{code}\n\nwork?\n",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=rob",
                        "name": "rob",
                        "displayName": "Rob Allen",
                        "active": true
                    },
                    "created": "2007-03-02T01:03:04.000+0000",
                    "updated": "2007-03-02T01:03:04.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/13099",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=roro",
                        "name": "roro",
                        "displayName": "Romain Lalaut",
                        "active": true
                    },
                    "body": "No because array_merge() is not recursive... and array_merge_recursive() has a bad behaviour with the keys (see comments http:\/\/php.net\/manual\/en\/function.array-merge-recursive.php)\n\nI used this static method for a personal project \n{code}\n\tpublic static function mergeArrays( &$offset1, $offset2 )\n\t{\n\t\t$type1 = is_array($offset1);\n\t\t$type2 = is_array($offset2);\n\t\t\n\t\t\/\/ if both offsets don't have same type : problem\n\t\tif( $type1 != $type2 )\n\t\t\t\tthrow new MergeArraysException( $offset1, $offset2 );\n\t\t\n\t\t\/\/ both are not an array (string, int, ...) ? it means we must replace the current value\n\t\tif( !$type1 ) \/\/ && !$type2\n\t\t\t$offset1 = $offset2;\n\t\t\n\t\t\/\/ both are an array : recursivity \n\t\telse\n\t\t\tforeach ( $offset2 as $key2=>$foo )\n\t\t\t\tself::mergeArrays($offset1[$key2], $offset2[$key2]);\n\t}\n{code}",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=roro",
                        "name": "roro",
                        "displayName": "Romain Lalaut",
                        "active": true
                    },
                    "created": "2007-03-02T07:36:26.000+0000",
                    "updated": "2007-03-02T07:36:26.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/13140",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=sekundek",
                        "name": "sekundek",
                        "displayName": "Uros",
                        "active": true
                    },
                    "body": "Hi, \n\nI modified Config like this\n\n{code}\n\npublic function __construct($array, $allowModifications = false)\n    {\n        $this->_allowModifications = (boolean) $allowModifications;\n        $this->_loadedSection = null;\n        $this->_index = 0;\n        $this->_data = array();\n        foreach ($array as $key => $value) {\n            if ($this->_isValidKeyName($key)) {\n                if (is_array($value)) {\n                    $this->_data[$key] = new Zend_Config($value, $this->_allowModifications);\n                } else {\n                    $this->_data[$key] = $value;\n                }\n            } elseif ( $value instanceof Zend_Config ) {\n                foreach ($value as $key => $v) {\n\t                if ($this->_isValidKeyName($key)) {\n\t\t                if (is_array($v)) {\n\t\t                    $this->_data[$key] = new Zend_Config($v, $this->_allowModifications);\n\t\t                } else {\n\t\t                    $this->_data[$key] = $v;\n\t\t                }\n\t                }  else {\n                        throw new Zend_Config_Exception(\"Invalid key: '$key'\");\n                    }             \n                }\n            } else {\n                throw new Zend_Config_Exception(\"Invalid key: '$key'\");\n            }\n        }\n        $this->_count = count($this->_data);\n\n{\/code}",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=sekundek",
                        "name": "sekundek",
                        "displayName": "Uros",
                        "active": true
                    },
                    "created": "2007-03-05T07:51:20.000+0000",
                    "updated": "2007-03-05T07:51:20.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/13198",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=darby",
                        "name": "darby",
                        "displayName": "Darby Felton",
                        "active": true
                    },
                    "body": "Why does inter-section inheritance not fulfill your need to inherit and override configuration data? I'm unsure from the problem description that you could not structure your configuration data into sections:\n\n{code}\n; ini format example\n\n[development]\ndatabase.host = 'db.dev.example.com'\ndatabase.name = 'mydata'\n; ...\n\n[production : development]\ndatabase.host = 'db.example.com'\n; ...\n{code}\n\nIn the above example, you could load the {{development}} or the {{production}} section. If you load the {{production}} section, it inherits all the values from {{development}}, and, as you can see, {{database.host}} has been overridden to a different server. The {{database.name}} value, however, would remain equal to {{mydata}}.\n\nZend_Config was specifically designed to support config data inheritance; for what reasons can you not use the built-in support?",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=darby",
                        "name": "darby",
                        "displayName": "Darby Felton",
                        "active": true
                    },
                    "created": "2007-03-07T15:42:39.000+0000",
                    "updated": "2007-03-07T15:42:39.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/14882",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=rob",
                        "name": "rob",
                        "displayName": "Rob Allen",
                        "active": true
                    },
                    "body": "I have resolved this issue as discussion has stalled as to the benefits a merge system would have over using inter-section inheritance.",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=rob",
                        "name": "rob",
                        "displayName": "Rob Allen",
                        "active": true
                    },
                    "created": "2007-05-30T16:18:36.000+0000",
                    "updated": "2007-05-30T16:18:36.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/15610",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=mratzloff",
                        "name": "mratzloff",
                        "displayName": "Matthew Ratzloff",
                        "active": true
                    },
                    "body": "This functionality is useful when you want a settings file that can be checked in to your repository and one that is developer\/environment-specific, but that you don't want checked in.  Having two separate files is essential, but having multiple Zend_Config objects is a hassle.\n\nFor example, say I have the basic configuration file:\n\n{code}\n[production]\n; settings...\n\n[development : production]\n; other settings...\n{code}\n\nIn groups, an individual developer will need to supply his own settings that might override development settings.  For example, they will need to change {{database.port}} to their database instance.  You don't want this file checked in accidentally and somehow missed by QA--that would be bad.  Thus, separate configurations that are merged together.\n\nHere's one way to do it.  I've implemented this functionality based on a function written by Keith Devens (i.e., _mergeArrays(), posted on [his blog|http:\/\/keithdevens.com\/weblog\/archive\/2003\/Jul\/10\/MergeTwoArraysV2]).  I'm not sure about the licensing, but he has [his own license|http:\/\/keithdevens.com\/software\/license].  I have contacted him to get clarification.\n\nIn Zend_Config:\n{code}\n    \/**\n     * Merge two configurations.\n     *\n     * @see    _mergeArrays()\n     * @param  Zend_Config $otherConfig Configuration to merge with\n     * @return Dna_Configuration\n     *\/\n    public function mergeWith(Zend_Config $otherConfig)\n    {\n        $array = $this->_mergeArrays($this->toArray(), $otherConfig->toArray());\n        $this->__construct($array, $this->_allowModifications);\n\n        return $this;\n    }\n\n    \/**\n     * Recursively merges two arrays and returns the result.\n     *\n     * Where there is duplication, values from the second array overwrite \n     * values from the first.  This differs from array_merge_recursive() and \n     * the + operator, which append those values into a new array.\n     *\n     * @param  array $a First array\n     * @param  array $b Second array (supercedes first array)\n     * @return array Merged array\n     *\/\n    protected function _mergeArrays($a, $b)\n    {\n        if (is_array($a) and is_array($b) and !array_key_exists(0, $a)) {\n            while (list($key) = each($b)) {\n                if (array_key_exists($key, $a)) {\n                    $a[$key] = $this->_mergeArrays($a[$key], $b[$key]);\n                } else {\n                    $a[$key] = $b[$key];\n                }\n            }\n        } else {\n            $a = $b;\n        }\n        return $a;\n    }\n{code}",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=mratzloff",
                        "name": "mratzloff",
                        "displayName": "Matthew Ratzloff",
                        "active": true
                    },
                    "created": "2007-06-29T14:34:29.000+0000",
                    "updated": "2007-06-29T14:34:29.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/15617",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=darby",
                        "name": "darby",
                        "displayName": "Darby Felton",
                        "active": true
                    },
                    "body": "Alternatively, you can solve the problem by having each developer with his own settings that inherit from the \"{{development}}\" section. If committing such information is undesirable, this is also easily solved by using [svn:ignore|http:\/\/svnbook.red-bean.com\/nightly\/en\/svn-book.html#svn.advanced.props.special.ignore]. There is a configuration file that is in the repository and used by default, but if a copy of it exists at a known location, then the copy is used (and ignored by SVN). (Similar functionality is available in other SCM programs like CVS.)\n\nThis is the same methodology used in the test suite, where TestConfiguration.php.dist is the default configuration, and users can copy this file to TestConfiguration.php, making whatever changes they like, and SVN ignores the file so that it is not committed with other work.",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=darby",
                        "name": "darby",
                        "displayName": "Darby Felton",
                        "active": true
                    },
                    "created": "2007-06-29T17:28:30.000+0000",
                    "updated": "2007-06-29T17:28:30.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/16656",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=ixulai",
                        "name": "ixulai",
                        "displayName": "Mike Simons",
                        "active": true
                    },
                    "body": "I don't like hacking classes; Here is a non-destructive OO approach\n{code} \nclass Ixulai_Config_Compound extends Zend_Config\n{\n\tpublic function __construct(Array $configs, $allowModifications = false)\n\t{\n\t\t$compoundConfig = array();\n\n\t\tforeach($configs as $config) {\n\n\t\t\tif(!($config instanceof Zend_Config)) {\n\t\t\t\tthrow new Zend_Config_Exception('All elements of config array must be an instance of Zend_Config');\n\t\t\t}\n\n\t\t\t$compoundConfig = $this->_mergeRecursive($compoundConfig, $config->toArray());\n\t\t}\n\n\t\tparent::__construct($compoundConfig, $allowModifications);\n\t}\n\n\tprotected function _mergeRecursive($array1, $array2)\n\t{\n\t\tif(is_array($array1) && is_array($array2)) {\n\t\t\t$keys = array_keys($array2);\n\t\t\tforeach($keys as $key) {\n\t\t\t\tif(isset($array1[$key])) {\n\t\t\t\t\t$array1[$key] = $this->_mergeRecursive($array1[$key], $array2[$key]);\n\t\t\t\t} else {\n                    $array1[$key] = $array2[$key];\n                }\n\t\t\t}\n\t\t} else {\n            $array1 = $array2;\n\t\t}\n\n        return $array1;\n\t}\n}\n{code}\n\nI believe I may have borrowed the mergeRecursive function from the same place as the one above though mine looks a bit different. I've had it kicking around for a while. It doesn't matter; any recursive merge function would work, even array_merge_recursive if thats what you need.\n\nYou can compound configs as many times as you like...\n{code}\n$config1 = new Zend_Config_Xml('test.xml');\n$config2 = new Zend_Config_Ini('test.ini');\n$config3 = new Zend_Config(array('moo'));\n\/\/Create a merge of 1 & 2\n$config4 = new Ixulai_Config_Compound($config1, $config2);\n\/\/Create a merge of 3 with the result from merging 1 & 2\n$config5 = new Ixulai_Config_Compound($config3, $config4);\n{code}",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=ixulai",
                        "name": "ixulai",
                        "displayName": "Mike Simons",
                        "active": true
                    },
                    "created": "2007-09-13T15:37:04.000+0000",
                    "updated": "2007-09-13T15:37:04.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/16660",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=ixulai",
                        "name": "ixulai",
                        "displayName": "Mike Simons",
                        "active": true
                    },
                    "body": "Doh; Examples above for config4 and 5 should have arguments in an array.\nThats what you get for not testing examples.",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=ixulai",
                        "name": "ixulai",
                        "displayName": "Mike Simons",
                        "active": true
                    },
                    "created": "2007-09-13T15:41:05.000+0000",
                    "updated": "2007-09-13T15:41:05.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/16680",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=darby",
                        "name": "darby",
                        "displayName": "Darby Felton",
                        "active": true
                    },
                    "body": "Pasting from [original message|http:\/\/www.nabble.com\/Re%3A-Merging-Zend_Config-objects--p12674222s16154.html] by [~nico]:\n\n{code}\n<?php\nfunction _fix_merge($array) {\n    foreach($array as $k => $v) {\n        if (!is_array($v)) {\n            continue;\n        }\n        if (is_int(key($v))) {\n            $array[$k] = $v[1];\n        } else {\n            $array[$k] = _fix_merge($v);\n        }\n    }\n    \n    return $array;\n}\n\n$config1 = new Zend_Config_Ini(...);\n$config2 = new Zend_Config_Ini(...);\n$config = new Zend_Config(_fix_merge(array_merge_recursive($config1->toArray(), $config2->toArray())));\n?>\n{code}",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=darby",
                        "name": "darby",
                        "displayName": "Darby Felton",
                        "active": true
                    },
                    "created": "2007-09-14T07:52:00.000+0000",
                    "updated": "2007-09-14T07:52:00.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/16703",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=rob",
                        "name": "rob",
                        "displayName": "Rob Allen",
                        "active": true
                    },
                    "body": "Suggested patch:\n\n{code}\n\/**\n * Merge another Zend_Config with this one. The items\n * in $merge will override the same named items in\n * the current config.\n *\n * @param Zend_Config $merge\n * @return Zend_Config\n *\/\npublic function merge(Zend_Config $merge)\n{\n    foreach($merge as $key => $item) {\n        if(array_key_exists($key, $this->_data)) {\n            if(get_class($item) == 'Zend_Config'  && get_class($this->$key) == 'Zend_Config') {\n                $this->$key = $this->$key->merge($item);\n            } else {\n                $this->$key = $item;\n            }\n        } else {\n            $this->$key = $item;\n        }\n    }\n    \n    return $this;\n}\n{code}\n\n\nTest:\n\n{code}\npublic function testMerge()\n{\n    $stdArray = array(\n        'test_feature' => false,\n        'some_files' => array(\n            'foo'=>'dir\/foo.xml',\n            'bar'=>'dir\/bar.xml',\n        ),\n        2 => 123,\n    );\n    $stdConfig = new Zend_Config($stdArray, true);\n    \n    $devArray = array(\n        'test_feature'=>true,\n        'some_files' => array(\n           'bar' => 'myDir\/bar.xml',\n           'baz' => 'myDir\/baz.xml',\n        ),\n        2 => 456,\n    );\n    $devConfig = new Zend_Config($devArray);\n    \n    $stdConfig->merge($devConfig);\n    \n    $this->assertTrue($stdConfig->test_feature);\n    $this->assertEquals('myDir\/bar.xml', $stdConfig->some_files->bar);\n    $this->assertEquals('myDir\/baz.xml', $stdConfig->some_files->baz);\n    $this->assertEquals('dir\/foo.xml', $stdConfig->some_files->foo);\n    $this->assertEquals(456, $stdConfig->{2});\n}\n{code}\n\nAnyone have any objections to me committing this to the trunk?\n\nRegards,\n\nRob...",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=rob",
                        "name": "rob",
                        "displayName": "Rob Allen",
                        "active": true
                    },
                    "created": "2007-09-15T15:25:23.000+0000",
                    "updated": "2007-09-15T15:25:23.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/16731",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=darby",
                        "name": "darby",
                        "displayName": "Darby Felton",
                        "active": true
                    },
                    "body": "I like this patch, Rob. Why did you choose {{get_class()}} over {{instanceof}}? The former approach does not support extending Zend_Config as easily, since one will have to override the {{merge()}} method in such cases where the method will be used in an extending class. Otherwise, I think this would be a nice, self-contained feature we could squeeze into 1.0.2.",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=darby",
                        "name": "darby",
                        "displayName": "Darby Felton",
                        "active": true
                    },
                    "created": "2007-09-17T08:38:18.000+0000",
                    "updated": "2007-09-17T08:38:18.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/16736",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=rob",
                        "name": "rob",
                        "displayName": "Rob Allen",
                        "active": true
                    },
                    "body": "I forgot all about instanceof !  I'll change it this evening and get it onto the trunk.\n\nRob...",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=rob",
                        "name": "rob",
                        "displayName": "Rob Allen",
                        "active": true
                    },
                    "created": "2007-09-17T09:45:31.000+0000",
                    "updated": "2007-09-17T09:45:31.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/16739",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=rob",
                        "name": "rob",
                        "displayName": "Rob Allen",
                        "active": true
                    },
                    "body": "Updated merge function:\n\n{code}\npublic function merge(Zend_Config $merge)\n{\n    foreach($merge as $key => $item) {\n        if(array_key_exists($key, $this->_data)) {\n            if($item instanceof Zend_Config && $this->$key instanceof Zend_Config) {\n                $this->$key = $this->$key->merge($item);\n            } else {\n                $this->$key = $item;\n            }\n        } else {\n            $this->$key = $item;\n        }\n    }\n    \n    return $this;\n}\n{code}\n\nCommited to trunk in svn revision 6387.",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=rob",
                        "name": "rob",
                        "displayName": "Rob Allen",
                        "active": true
                    },
                    "created": "2007-09-17T13:38:34.000+0000",
                    "updated": "2007-09-17T13:38:34.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/16740",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=rob",
                        "name": "rob",
                        "displayName": "Rob Allen",
                        "active": true
                    },
                    "body": "Merged to 1.0.2 in r6389.",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=rob",
                        "name": "rob",
                        "displayName": "Rob Allen",
                        "active": true
                    },
                    "created": "2007-09-17T14:05:15.000+0000",
                    "updated": "2007-09-17T14:05:15.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/16880",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=mratzloff",
                        "name": "mratzloff",
                        "displayName": "Matthew Ratzloff",
                        "active": true
                    },
                    "body": "Thanks, Rob.  Now I can get rid of my custom class.  :-)",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=mratzloff",
                        "name": "mratzloff",
                        "displayName": "Matthew Ratzloff",
                        "active": true
                    },
                    "created": "2007-09-21T12:40:11.000+0000",
                    "updated": "2007-09-21T12:40:11.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/18482",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=wil",
                        "name": "wil",
                        "displayName": "Wil Sinclair",
                        "active": true
                    },
                    "body": "Fixing Fix Version to follow issue tracker conventions.",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=wil",
                        "name": "wil",
                        "displayName": "Wil Sinclair",
                        "active": true
                    },
                    "created": "2008-01-23T14:40:49.000+0000",
                    "updated": "2008-01-23T14:40:49.000+0000"
                }
            ]
        }
    },
    "transitions": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-998\/transitions"
}