{
    "expand": "html",
    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-12020",
    "key": "ZF-12020",
    "fields": {
        "summary": {
            "name": "summary",
            "type": "java.lang.String",
            "value": "Modify Zend_Form::isValid() to ignore flagged elements"
        },
        "timetracking": {
            "name": "timetracking",
            "type": "com.atlassian.jira.issue.fields.TimeTrackingSystemField"
        },
        "issuetype": {
            "name": "issuetype",
            "type": "com.atlassian.jira.issue.issuetype.IssueType",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issueType\/4",
                "name": "Improvement",
                "subtask": false
            }
        },
        "votes": {
            "name": "votes",
            "type": "com.atlassian.jira.issue.fields.VotesSystemField",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-12020\/votes",
                "votes": 0,
                "hasVoted": false
            }
        },
        "security": {
            "name": "security",
            "type": "com.atlassian.jira.issue.security.IssueSecurityLevel"
        },
        "fixVersions": {
            "name": "fixVersions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [

            ]
        },
        "reporter": {
            "name": "reporter",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=dgray90",
                "name": "dgray90",
                "displayName": "Derek Gray",
                "active": true
            }
        },
        "created": {
            "name": "created",
            "type": "java.util.Date",
            "value": "2012-01-23T18:43:13.000+0000"
        },
        "updated": {
            "name": "updated",
            "type": "java.util.Date",
            "value": "2012-02-26T19:19:45.000+0000"
        },
        "customfield_10041": {
            "name": "Tags",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:labels",
            "value": [
                "Zend_Form"
            ]
        },
        "description": {
            "name": "description",
            "type": "java.lang.String",
            "value": "http:\/\/framework.zend.com\/issues\/browse\/ZF-2661\r\nhttp:\/\/framework.zend.com\/issues\/browse\/ZF-6909\r\n\r\nIn both of these older tickets, Matthew Weier O'Phinney states that by setting a form element's ignore status to 'true', both Zend_Form::getValues() and Zend_Form::isValid() will ignore that element. This is indeed the case for Zend_Form::getValues(), but Zend_Form::isValid() does not effectively ignore user input from elements that are supposed to be ignored. A glance at the source code confirms that the phrase 'ignore' appears nowhere in the isValid() function of either Zend_Form or Zend_Form_Element.\r\n\r\nSay I have a read-only 'due date' field which is flagged to be ignored -- the user might manipulate this field using a browser such as Chrome, and when the isValid() method is called on the form, the value of 'due date' is set to the user-modified value. Not exactly the behavior one might expect."
        },
        "priority": {
            "name": "priority",
            "type": "com.atlassian.jira.issue.priority.Priority",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/priority\/4",
                "name": "Minor"
            }
        },
        "duedate": {
            "name": "duedate",
            "type": "java.util.Date"
        },
        "customfield_10022": {
            "name": "Fix Version Priority",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:select"
        },
        "watcher": {
            "name": "watcher",
            "type": "watcher",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-12020\/watchers",
                "isWatching": false,
                "watchCount": 1
            }
        },
        "worklog": {
            "name": "worklog",
            "type": "worklog",
            "value": [

            ]
        },
        "status": {
            "name": "status",
            "type": "com.atlassian.jira.issue.status.Status",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/status\/1",
                "name": "Open"
            }
        },
        "labels": {
            "name": "labels",
            "type": "com.atlassian.jira.issue.label.Label",
            "value": [
                "validating",
                "zf-crteam-review"
            ]
        },
        "assignee": {
            "name": "assignee",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=alab",
                "name": "alab",
                "displayName": "Christian Albrecht",
                "active": true
            }
        },
        "links": {
            "name": "links",
            "type": "issuelinks",
            "value": [
                {
                    "issueKey": "ZF-6909",
                    "issue": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-6909",
                    "type": {
                        "name": "Related",
                        "direction": "OUTBOUND",
                        "description": "is related to"
                    }
                },
                {
                    "issueKey": "ZF-10056",
                    "issue": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-10056",
                    "type": {
                        "name": "Related",
                        "direction": "OUTBOUND",
                        "description": "is related to"
                    }
                }
            ]
        },
        "attachment": {
            "name": "attachment",
            "type": "attachment",
            "value": [

            ]
        },
        "sub-tasks": {
            "name": "sub-tasks",
            "type": "issuelinks",
            "value": [

            ]
        },
        "versions": {
            "name": "versions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/version\/10981",
                    "id": 10981,
                    "description": "Mini Release",
                    "name": "1.11.11",
                    "userReleaseDate": "29\/Sep\/11",
                    "archived": false,
                    "releaseDate": "2011-09-29",
                    "released": true
                }
            ]
        },
        "project": {
            "name": "project",
            "type": "com.atlassian.jira.project.Project",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/project\/ZF",
                "key": "ZF",
                "name": "Zend Framework",
                "roles": {

                }
            }
        },
        "components": {
            "name": "components",
            "type": "com.atlassian.jira.bc.project.component.ProjectComponent",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/component\/10029",
                    "id": 10029,
                    "name": "Zend_Form",
                    "isAssigneeTypeValid": false
                }
            ]
        },
        "comment": {
            "name": "comment",
            "type": "com.atlassian.jira.issue.fields.CommentSystemField",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/49563",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=dgray90",
                        "name": "dgray90",
                        "displayName": "Derek Gray",
                        "active": true
                    },
                    "body": "I suppose there are instances where a developer may want to ignore an element when calling getValues() but still validate that element (CSRF, as mentioned by Adam Lundrigan. (http:\/\/framework.zend.com\/issues\/browse\/ZF-10056)) Perhaps a new property\/getter\/setter can be defined? Something along the lines of $element->setProtected(true)?\r\n\r\nOr might the populate() method be patched to NOT populate fields flagged as 'ignore'? This way, one might write:\r\n\r\nif ($this->_request->getPost()){\r\n    $this->form->populate($this->_request->getPost());\r\n    if ($this->form->isValid()){\r\n        \/\/ Do whatever suits you here\r\n    }\r\n}",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=dgray90",
                        "name": "dgray90",
                        "displayName": "Derek Gray",
                        "active": true
                    },
                    "created": "2012-01-24T03:43:18.000+0000",
                    "updated": "2012-01-24T03:43:18.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/49564",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=dgray90",
                        "name": "dgray90",
                        "displayName": "Derek Gray",
                        "active": true
                    },
                    "body": "Oh, that's right, isValid() requires an array. The form can't just check itself after being populated, I guess. Nevermind that idea.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=dgray90",
                        "name": "dgray90",
                        "displayName": "Derek Gray",
                        "active": true
                    },
                    "created": "2012-01-24T03:52:34.000+0000",
                    "updated": "2012-01-24T03:52:34.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/49569",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=dgray90",
                        "name": "dgray90",
                        "displayName": "Derek Gray",
                        "active": true
                    },
                    "body": "I don't know how to upload patch files or whatever. But I see nobody is apparently checking these issues. Perhaps because they are busy developing ZF which I can greatly appreciate. :)\r\n\r\nAnyways, what I have done is patched Zend_Form and Zend_Form_Element as such: In Zend_Form::isValid() and Zend_Form::isValidPartial(), following lines of code have been added:\r\n\r\n        foreach ($this->getElements() as $key => $element) { \/\/Included to show where I have inserted\r\n            if ($element->getProtect()) {\r\n                continue;\r\n            }\r\n\r\nAnd then in Zend_Form_Element, this has been added:\r\n\r\n    \/**\r\n     * Protect flag (causes an element to be ignored during validation)\r\n     * @var bool\r\n     *\/\r\n    protected $_protect = false;\r\n\r\n    \/**\r\n     * Set protect flag (causes an element to be ignored during validation)\r\n     *\r\n     * @param  bool $flag\r\n     * @return Zend_Form_Element\r\n     *\/\r\n    public function setProtect($flag)\r\n    {\r\n        $this->_protect = (bool) $flag;\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * Get protect flag (used when retrieving values at form level)\r\n     *\r\n     * @return bool\r\n     *\/\r\n    public function getProtect()\r\n    {\r\n        return $this->_protect;\r\n    }\r\n\r\n\r\n\r\nIf anyone knows how I can turn these into code blocks, please let me know. I hope the development team considers this addition and the functionality it will provide without conflicting with CSRF and other element that may need to be ignored while still validated.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=dgray90",
                        "name": "dgray90",
                        "displayName": "Derek Gray",
                        "active": true
                    },
                    "created": "2012-01-25T22:21:20.000+0000",
                    "updated": "2012-01-25T22:21:20.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/49571",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=frosch",
                        "name": "frosch",
                        "displayName": "Frank Br\u00fcckner",
                        "active": true
                    },
                    "body": "{quote}If anyone knows how I can turn these into code blocks, please let me know.{quote}\r\nPress the question mark below the text area and you get the help for the markup.\r\n\r\nHere is an example:\r\n{noformat}{code}$foo = true;{code}{noformat}",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=frosch",
                        "name": "frosch",
                        "displayName": "Frank Br\u00fcckner",
                        "active": true
                    },
                    "created": "2012-01-26T10:17:53.000+0000",
                    "updated": "2012-01-26T10:17:53.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/49573",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=dgray90",
                        "name": "dgray90",
                        "displayName": "Derek Gray",
                        "active": true
                    },
                    "body": "Thank you so much Frank. Now I will be able to provide a better look at the 'patch'.\r\n\r\n{code:title=Zend_Form|borderStyle=solid}\r\n    \/**\r\n     * Validate the form\r\n     *\r\n     * @param  array $data\r\n     * @return boolean\r\n     *\/\r\n    public function isValid($data)\r\n    {\r\n        if (!is_array($data)) {\r\n            require_once 'Zend\/Form\/Exception.php';\r\n            throw new Zend_Form_Exception(__METHOD__ . ' expects an array');\r\n        }\r\n        $translator = $this->getTranslator();\r\n        $valid      = true;\r\n        $eBelongTo  = null;\r\n\r\n        if ($this->isArray()) {\r\n            $eBelongTo = $this->getElementsBelongTo();\r\n            $data = $this->_dissolveArrayValue($data, $eBelongTo);\r\n        }\r\n        $context = $data;\r\n        foreach ($this->getElements() as $key => $element) {\r\n            if ($element->getProtect()) {\r\n                continue;\r\n            }\r\n            if (null !== $translator && $this->hasTranslator()\r\n                    && !$element->hasTranslator()) {\r\n                $element->setTranslator($translator);\r\n            }\r\n            $check = $data;\r\n            if (($belongsTo = $element->getBelongsTo()) !== $eBelongTo) {\r\n                $check = $this->_dissolveArrayValue($data, $belongsTo);\r\n            }\r\n            if (!isset($check[$key])) {\r\n                $valid = $element->isValid(null, $context) && $valid;\r\n            } else {\r\n                $valid = $element->isValid($check[$key], $context) && $valid;\r\n                $data = $this->_dissolveArrayUnsetKey($data, $belongsTo, $key);\r\n            }\r\n        }\r\n        foreach ($this->getSubForms() as $key => $form) {\r\n            if (null !== $translator && !$form->hasTranslator()) {\r\n                $form->setTranslator($translator);\r\n            }\r\n            if (isset($data[$key]) && !$form->isArray()) {\r\n                $valid = $form->isValid($data[$key]) && $valid;\r\n            } else {\r\n                $valid = $form->isValid($data) && $valid;\r\n            }\r\n        }\r\n\r\n        $this->_errorsExist = !$valid;\r\n\r\n        \/\/ If manually flagged as an error, return invalid status\r\n        if ($this->_errorsForced) {\r\n            return false;\r\n        }\r\n\r\n        return $valid;\r\n    }\r\n\r\n    \/**\r\n     * Validate a partial form\r\n     *\r\n     * Does not check for required flags.\r\n     *\r\n     * @param  array $data\r\n     * @return boolean\r\n     *\/\r\n    public function isValidPartial(array $data)\r\n    {\r\n        $eBelongTo  = null;\r\n\r\n        if ($this->isArray()) {\r\n            $eBelongTo = $this->getElementsBelongTo();\r\n            $data = $this->_dissolveArrayValue($data, $eBelongTo);\r\n        }\r\n\r\n        $translator = $this->getTranslator();\r\n        $valid      = true;\r\n        $context    = $data;\r\n\r\n        foreach ($this->getElements() as $key => $element) {\r\n            if ($element->getProtect()) {\r\n                continue;\r\n            }\r\n            $check = $data;\r\n            if (($belongsTo = $element->getBelongsTo()) !== $eBelongTo) {\r\n                $check = $this->_dissolveArrayValue($data, $belongsTo);\r\n            }\r\n            if (isset($check[$key])) {\r\n                if (null !== $translator && !$element->hasTranslator()) {\r\n                    $element->setTranslator($translator);\r\n                }\r\n                $valid = $element->isValid($check[$key], $context) && $valid;\r\n                $data = $this->_dissolveArrayUnsetKey($data, $belongsTo, $key);\r\n            }\r\n        }\r\n        foreach ($this->getSubForms() as $key => $form) {\r\n            if (null !== $translator && !$form->hasTranslator()) {\r\n                $form->setTranslator($translator);\r\n            }\r\n            if (isset($data[$key]) && !$form->isArray()) {\r\n                $valid = $form->isValidPartial($data[$key]) && $valid;\r\n            } else {\r\n                $valid = $form->isValidPartial($data) && $valid;\r\n            }\r\n        }\r\n\r\n        $this->_errorsExist = !$valid;\r\n        return $valid;\r\n    }\r\n{code}\r\n\r\n{code:title=Zend_Form_Element|borderStyle=solid}\r\n    \/**\r\n     * Protect flag (causes an element to be ignored during validation)\r\n     * @var bool\r\n     *\/\r\n    protected $_protect = false;\r\n\r\n    \/**\r\n     * Set protect flag (causes an element to be ignored during validation)\r\n     *\r\n     * @param  bool $flag\r\n     * @return Zend_Form_Element\r\n     *\/\r\n    public function setProtect($flag)\r\n    {\r\n        $this->_protect = (bool) $flag;\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * Get protect flag (used when retrieving values at form level)\r\n     *\r\n     * @return bool\r\n     *\/\r\n    public function getProtect()\r\n    {\r\n        return $this->_protect;\r\n    }\r\n{code}",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=dgray90",
                        "name": "dgray90",
                        "displayName": "Derek Gray",
                        "active": true
                    },
                    "created": "2012-01-26T16:58:05.000+0000",
                    "updated": "2012-01-26T16:58:05.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/49574",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=dgray90",
                        "name": "dgray90",
                        "displayName": "Derek Gray",
                        "active": true
                    },
                    "body": "Yeah... just checked the ZF 2.0.0 Beta 2 source and this feature is not there either.\r\n\r\nPlease, ZF team, consider this simple and unobtrusive improvement!",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=dgray90",
                        "name": "dgray90",
                        "displayName": "Derek Gray",
                        "active": true
                    },
                    "created": "2012-01-26T23:03:41.000+0000",
                    "updated": "2012-01-26T23:03:41.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/49575",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=frosch",
                        "name": "frosch",
                        "displayName": "Frank Br\u00fcckner",
                        "active": true
                    },
                    "body": "@Derek\r\nThe work on Zend_Form 2.0 has not started yet!\r\n\r\nCan you provide some unit tests for your patch?\r\nYou must sign the [CLA|http:\/\/framework.zend.com\/wiki\/display\/ZFPROP\/Contributor+License+Agreement], otherwise your patch is not accepted.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=frosch",
                        "name": "frosch",
                        "displayName": "Frank Br\u00fcckner",
                        "active": true
                    },
                    "created": "2012-01-27T07:44:43.000+0000",
                    "updated": "2012-01-27T07:44:43.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/49579",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=dgray90",
                        "name": "dgray90",
                        "displayName": "Derek Gray",
                        "active": true
                    },
                    "body": "I see. I will read about the CLA and unit testing right away. Thank you!",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=dgray90",
                        "name": "dgray90",
                        "displayName": "Derek Gray",
                        "active": true
                    },
                    "created": "2012-01-27T14:40:10.000+0000",
                    "updated": "2012-01-27T14:40:10.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/49580",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=dgray90",
                        "name": "dgray90",
                        "displayName": "Derek Gray",
                        "active": true
                    },
                    "body": "Okay. I will sign and submit the CLA. And honestly, Zend can have all rights to this. It's nothing. I looked at unit testing, and while intriguing, at this time I must put full focus on the application I am currently developing. I don't know when or if I could get to a unit test -- but this is an *extremely* simple patch. ",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=dgray90",
                        "name": "dgray90",
                        "displayName": "Derek Gray",
                        "active": true
                    },
                    "created": "2012-01-27T16:44:26.000+0000",
                    "updated": "2012-01-27T16:44:26.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/49785",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=adamlundrigan",
                        "name": "adamlundrigan",
                        "displayName": "Adam Lundrigan",
                        "active": true
                    },
                    "body": "Derek:  Could you provide a diff against SVN trunk?  I can take a look and see if it's something that we can push for ZF 1.12, and if so I don't mind writing the unit tests to go with it. ",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=adamlundrigan",
                        "name": "adamlundrigan",
                        "displayName": "Adam Lundrigan",
                        "active": true
                    },
                    "created": "2012-02-25T19:17:51.000+0000",
                    "updated": "2012-02-25T19:17:51.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/49786",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=adamlundrigan",
                        "name": "adamlundrigan",
                        "displayName": "Adam Lundrigan",
                        "active": true
                    },
                    "body": "I believe that this will also be addressed in ZF2's Zend\\Form component.  The RFC ([here|http:\/\/framework.zend.com\/wiki\/display\/ZFDEV2\/RFC+-+Forms]) has this as part of it's design goals:\r\n{quote}\r\n* MUST allow partial validations\r\n** SHOULD allow indicating which specific elements must be valid\r\n{quote}\r\n\r\nCould you have a quick read-through that RFC to ensure that i'm correct in thinking that it takes into account the situation you're encounting?",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=adamlundrigan",
                        "name": "adamlundrigan",
                        "displayName": "Adam Lundrigan",
                        "active": true
                    },
                    "created": "2012-02-25T19:24:22.000+0000",
                    "updated": "2012-02-25T19:24:22.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/49797",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=dgray90",
                        "name": "dgray90",
                        "displayName": "Derek Gray",
                        "active": true
                    },
                    "body": "That RFC does seem to address it. Instead of saying 'indicating which specific elements must be valid', what I have implemented is 'indicating which specific elements should not be validated\/populated with user input.' \r\n\r\nHere are this difs for 1.11.11:\r\n\r\n{code}\r\n\r\n--- Element.php 2012-02-25 17:17:19.000000000 -0600\r\n+++ Element.php.orig    2012-02-25 17:07:04.000000000 -0600\r\n@@ -121,12 +121,6 @@\r\n      * @var bool\r\n      *\/\r\n     protected $_ignore = false;\r\n-\r\n-    \/**\r\n-     * Protect flag (causes an element to be ignored during validation)\r\n-     * @var bool\r\n-     *\/\r\n-    protected $_protect = false;\r\n\r\n     \/**\r\n      * Does the element represent an array?\r\n@@ -783,28 +777,6 @@\r\n     {\r\n         return $this->_ignore;\r\n     }\r\n-\r\n-    \/**\r\n-     * Set protect flag (causes an element to be ignored during validation)\r\n-     *\r\n-     * @param  bool $flag\r\n-     * @return Zend_Form_Element\r\n-     *\/\r\n-    public function setProtect($flag)\r\n-    {\r\n-        $this->_protect = (bool) $flag;\r\n-        return $this;\r\n-    }\r\n-\r\n-    \/**\r\n-     * Get protect flag (used when retrieving values at form level)\r\n-     *\r\n-     * @return bool\r\n-     *\/\r\n-    public function getProtect()\r\n-    {\r\n-        return $this->_protect;\r\n-    }\r\n\r\n     \/**\r\n      * Set flag indicating if element represents an array\r\n{code}\r\n\r\n{code}\r\n--- Form.php    2012-02-25 17:02:15.000000000 -0600\r\n+++ Form.php.orig       2012-02-25 17:06:53.000000000 -0600\r\n@@ -2238,9 +2238,6 @@\r\n         }\r\n         $context = $data;\r\n         foreach ($this->getElements() as $key => $element) {\r\n-            if ($element->getProtect()) {\r\n-                continue;\r\n-            }\r\n             if (null !== $translator && $this->hasTranslator()\r\n                     && !$element->hasTranslator()) {\r\n                 $element->setTranslator($translator);\r\n@@ -2299,9 +2296,6 @@\r\n         $context    = $data;\r\n\r\n         foreach ($this->getElements() as $key => $element) {\r\n-            if ($element->getProtect()) {\r\n-                continue;\r\n-            }\r\n             $check = $data;\r\n             if (($belongsTo = $element->getBelongsTo()) !== $eBelongTo) {\r\n                 $check = $this->_dissolveArrayValue($data, $belongsTo);\r\n\r\n{code}\r\n\r\nThank you for your response and attention, I greatly appreciate it. :)",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=dgray90",
                        "name": "dgray90",
                        "displayName": "Derek Gray",
                        "active": true
                    },
                    "created": "2012-02-25T23:19:45.000+0000",
                    "updated": "2012-02-25T23:19:45.000+0000"
                }
            ]
        }
    },
    "transitions": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-12020\/transitions"
}