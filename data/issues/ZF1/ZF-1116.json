{
    "expand": "html",
    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-1116",
    "key": "ZF-1116",
    "fields": {
        "summary": {
            "name": "summary",
            "type": "java.lang.String",
            "value": "Proposed new convenience function: stranslate()"
        },
        "timetracking": {
            "name": "timetracking",
            "type": "com.atlassian.jira.issue.fields.TimeTrackingSystemField"
        },
        "issuetype": {
            "name": "issuetype",
            "type": "com.atlassian.jira.issue.issuetype.IssueType",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issueType\/2",
                "name": "New Feature",
                "subtask": false
            }
        },
        "votes": {
            "name": "votes",
            "type": "com.atlassian.jira.issue.fields.VotesSystemField",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-1116\/votes",
                "votes": 0,
                "hasVoted": false
            }
        },
        "security": {
            "name": "security",
            "type": "com.atlassian.jira.issue.security.IssueSecurityLevel"
        },
        "resolution": {
            "name": "resolution",
            "type": "com.atlassian.jira.issue.resolution.Resolution",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/resolution\/1",
                "name": "Fixed"
            }
        },
        "fixVersions": {
            "name": "fixVersions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [

            ]
        },
        "resolutiondate": {
            "name": "resolutiondate",
            "type": "java.util.Date",
            "value": "2007-03-22T18:09:20.000+0000"
        },
        "reporter": {
            "name": "reporter",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                "name": "gavin",
                "displayName": "Gavin",
                "active": true
            }
        },
        "created": {
            "name": "created",
            "type": "java.util.Date",
            "value": "2007-03-22T17:44:20.000+0000"
        },
        "updated": {
            "name": "updated",
            "type": "java.util.Date",
            "value": "2007-07-05T14:43:58.000+0000"
        },
        "customfield_10041": {
            "name": "Tags",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:labels"
        },
        "description": {
            "name": "description",
            "type": "java.lang.String",
            "value": "Zend_Translate could easily support something like:\n\nNEW way:\n{code}\n\/\/ in a view:\n<?= $this->escape($translator->stranslate($string, $locale, $param1, $param2, $param3)); ?>\n<?= $this->escape($translator->stranslate(\"Mr. %1\\$s has an appointment on %2\\$s in %3\\$s.\", $locale, $param1, $param2, $param3)); ?>\n{code}\n\nDifferent languages will need to reorder the sequence of the parameters due to differences in grammar.  The order of the parameters defines the numerical position assignments for these parameters (i.e. $param1 is '%1\\$s', $param2 is '%2\\$s', etc.).\n\nOLD way:\n{code}\n\/\/ in a view:\n<?= $this->escape(sprintf($translator->translate($string, $locale), $param1, $param2, $param3)); ?>\n{code}\n\nFor implementation tricks, see:\n* http:\/\/php.net\/func_get_args\n* http:\/\/php.net\/vsprintf"
        },
        "priority": {
            "name": "priority",
            "type": "com.atlassian.jira.issue.priority.Priority",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/priority\/5",
                "name": "Trivial"
            }
        },
        "duedate": {
            "name": "duedate",
            "type": "java.util.Date"
        },
        "customfield_10022": {
            "name": "Fix Version Priority",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:select"
        },
        "watcher": {
            "name": "watcher",
            "type": "watcher",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-1116\/watchers",
                "isWatching": false,
                "watchCount": 1
            }
        },
        "worklog": {
            "name": "worklog",
            "type": "worklog",
            "value": [

            ]
        },
        "status": {
            "name": "status",
            "type": "com.atlassian.jira.issue.status.Status",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/status\/5",
                "name": "Resolved"
            }
        },
        "labels": {
            "name": "labels",
            "type": "com.atlassian.jira.issue.label.Label",
            "value": [

            ]
        },
        "assignee": {
            "name": "assignee",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                "name": "thomas",
                "displayName": "Thomas Weidner",
                "active": true
            }
        },
        "links": {
            "name": "links",
            "type": "issuelinks",
            "value": [
                {
                    "issueKey": "ZF-1096",
                    "issue": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-1096",
                    "type": {
                        "name": "Related",
                        "direction": "OUTBOUND",
                        "description": "is related to"
                    }
                }
            ]
        },
        "attachment": {
            "name": "attachment",
            "type": "attachment",
            "value": [

            ]
        },
        "sub-tasks": {
            "name": "sub-tasks",
            "type": "issuelinks",
            "value": [

            ]
        },
        "versions": {
            "name": "versions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [

            ]
        },
        "project": {
            "name": "project",
            "type": "com.atlassian.jira.project.Project",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/project\/ZF",
                "key": "ZF",
                "name": "Zend Framework",
                "roles": {

                }
            }
        },
        "components": {
            "name": "components",
            "type": "com.atlassian.jira.bc.project.component.ProjectComponent",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/component\/10099",
                    "id": 10099,
                    "name": "Zend_Translate",
                    "description": "Provides translation functionality, based on standards such as TMX and Gettext.",
                    "isAssigneeTypeValid": false
                }
            ]
        },
        "comment": {
            "name": "comment",
            "type": "com.atlassian.jira.issue.fields.CommentSystemField",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/13645",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "body": "I know we already discussed a closely related idea, but this variant might avoid the concerns voiced previously.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "created": "2007-03-22T17:50:07.000+0000",
                    "updated": "2007-03-22T17:50:07.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/13646",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "body": "This is already integrated...\n\nSee the latest documentation.\n\nThe following ways are supported:\n{code}\n$trans->translate('mystring', array('%1\\$d' => '2007', '%1\\$s' => 'date', '%2\\$s' => 'other'), $locale);\n$trans->translate('mystring', $locale);\n$trans->translate('mystring');\n{code}\n\nThe useage of sprintf or printf is not needed and this is already documented.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "created": "2007-03-22T18:09:20.000+0000",
                    "updated": "2007-03-22T18:09:20.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/13647",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "body": "I see you just committed the change described above.\n\nHowever, I believe the method prototype for translate() and _() as just committed in changeset 4189 is confusing, not intuitive, and not tool\/IDE friendly.  For example, in order to specify a locale, I would have to insert null value for the second operand of translate().\n\nhttp:\/\/framework.zend.com\/fisheye\/browse\/Zend_Framework\/trunk\/library\/Zend\/Translate.php?r1=3933&r2=4189\nhttp:\/\/framework.zend.com\/fisheye\/browse\/Zend_Framework\/trunk\/library\/Zend\/Translate\/Adapter.php?r1=3933&r2=4189",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "created": "2007-03-22T18:38:31.000+0000",
                    "updated": "2007-03-22T18:38:31.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/13661",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "body": "No...\nStandard behaviour is to set the locale within Zend_Translate with \"setLocale()\"...\n\nBut ok... I just wanted to simplify things for our users.\nI will erase this feature as it seems not to be accepted by devteam.\n\nSorry for being too fast with implementations.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "created": "2007-03-23T02:15:54.000+0000",
                    "updated": "2007-03-23T02:15:54.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/13728",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "body": "I continue to believe there is a chance the devteam\/community might accept the proposed {{stranslate()}} method, as presented in the description of this issue.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "created": "2007-03-26T18:28:21.000+0000",
                    "updated": "2007-03-26T18:28:21.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/13735",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=mratzloff",
                        "name": "mratzloff",
                        "displayName": "Matthew Ratzloff",
                        "active": true
                    },
                    "body": "Thomas, you are forever adding, and subsequently removing, features.  ;-)\n\nWhy not make {{setLocale()}} the only way of declaring the locale?  It seems to me that most people are not going to be jumping back and forth and printing German, Japanese, and English side by side on the same page.\n\nThen, {{translate()}} can work as I suggested in [ZF-1096], minus {{$locale}}:\n\n{code}\nprint $translator->translate('my string');\n\/\/ or\nprint $translator->translate('my string', array($paramter1, $parameter2, $etc));\n{code}\n\nHave parameters be defined in order, as with {{sprintf}}, and every parameter must be declared (even if just a {{null}} value).\n\nEasy.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=mratzloff",
                        "name": "mratzloff",
                        "displayName": "Matthew Ratzloff",
                        "active": true
                    },
                    "created": "2007-03-27T13:05:59.000+0000",
                    "updated": "2007-03-27T13:05:59.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/13738",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "body": "I like the idea of having a setter for the object's locale property.\n\nWhy list the parameters inside an array, instead of:\n{code}print $translator->translate(\"My %2\\s string: %1\\s\", $paramter1, $parameter2, $etc));{code}\n\nFor example, the implementation of the function will know that $parameter1 is the first parameter, and can then substitute it for '%1\\s'.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "created": "2007-03-27T13:18:18.000+0000",
                    "updated": "2007-03-27T13:18:18.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/13741",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "body": "@Gavin:\n\nWe can not only accept a list of parameters like you proposed because within an translation string there can not only be a %x\\$s...\nTranslation Strings are often declared like this:\n\n{code}\n('%1\\$d lines of %1\\$s', 23, 'documentation');\n{code}\n\nWhat I mean is that not only strings should be supported but also all other tokens like digit or char.\nAnd this can only be done if we accept key-value pairs and default to string if no key (integer) is given.\n\n@Matthew:\nYes, you are right... but it's not often that a new included feature is killed two hours after it's commit. ;-)\n\n@All:\nThe complete I18N API makes it possible to have the locale as optional LAST parameter.\nAnd within all I18N classes the locale can be set with setLocale() for all future uses.\n\nMy implementation does wether brake the API nor make problems with users.\nThe documentation describes the usage of setLocale\/setLanguage and does not mention the optional locale parameter which seems to be a problem in your two opinions.\n\nEven Zend_Date makes use of the optional locale parameter as third or even fourth parameter. Why does this not make problems ?\nBecause setLocale is proposed to be used for standard workflow.\n\nThe implementation as already done and reverted by me is no problem in my opinion and would completly fit within the API.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "created": "2007-03-27T13:55:21.000+0000",
                    "updated": "2007-03-27T13:55:21.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/13745",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=mratzloff",
                        "name": "mratzloff",
                        "displayName": "Matthew Ratzloff",
                        "active": true
                    },
                    "body": "{quote}\nThe complete I18N API makes it possible to have the locale as optional LAST parameter.\nAnd within all I18N classes the locale can be set with setLocale() for all future uses.\n\nMy implementation does wether [neither?] brake the API nor make problems with users.\nThe documentation describes the usage of setLocale\/setLanguage and does not mention the optional locale parameter which seems to be a problem in your two opinions.\n\nEven Zend_Date makes use of the optional locale parameter as third or even fourth parameter. Why does this not make problems ?\nBecause setLocale is proposed to be used for standard workflow.\n\nThe implementation as already done and reverted by me is no problem in my opinion and would completly fit within the API.\n{quote}\n\nI don't quite follow your comment.  I don't think the optional {{$locale}} parameter is necessarily worthwhile to keep in this particular case.  Can you explain why it is?  The second of three arguments being optional based on context has precedent in PHP itself, but I wouldn't exactly call that a thumbs up for that approach.  :-)  But it sounds like you do that already with existing components like {{Zend_Date}}, so I suppose it wouldn't be out of the ordinary.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=mratzloff",
                        "name": "mratzloff",
                        "displayName": "Matthew Ratzloff",
                        "active": true
                    },
                    "created": "2007-03-27T17:58:07.000+0000",
                    "updated": "2007-03-27T17:58:07.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/13750",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "body": "Actually the API works like this\n\n{code}\n$date->set($value, $type = null, $locale = null);\n{code}\n\nThe documentation describes the usage the following way\n{code}\n$date->setLocale('de');\n$date->set('M\u00e4rz', Zend_Date::MONTH);\n\n\/\/ optionally overriding the general settings just for this operation\n$date->set('March', Zend_Date::MONTH, 'en');\n{code}\nThis is how the complete I18N API works... all locale settings can be optionally set to override the general settings.\nActually the documentation describes translation-handling like this:\n{code}\n$trans->setLocale('de');\n$trans->translate('My string');\n\n\/\/ optionally overriding the general settings just for this operation\n$trans->translate('My string', 'fr');\n{code}\n\nSo if we cancel the optional locale parameter for this particular case it does no longer fit within the API. We should then strip all optional locale parameters for the complete API, but I think they are quite usefull.\n\nHaving the locale as second parameter is not acceptable.\nStripping the locale from Zend_Translate would mean to strip it within the complete API.\n\nActually all optional parameters can be forgotten and the function works the same way\n{code}\n$date->set('March', Zend_Date::MONTH, 'en');\n$date->set('March', Zend_Date::MONTH);\n$date->set('March', 'en');\n{code}\nThe third case is what gavin meant with non tool friendly because it's possible to forget the middle parameter and the function works like it should do...\nBut a tool will display param1, param2 OPTIONAL, param3 OPTIONAL\nAnd a user will then do \n{code}\n$trans->translate('My string', null, 'de');\n{code}\nif he is in need of this optional parameter.\nAnyway, I see no problems with this approach because the language is always OPTIONAL as every example and the documentation describes only the use of setLocale() for setting the language. Therefor I do not accept the \"non-tool-friendly\".\n\nBtw:\n{quote}The second of three arguments being optional based on context has precedent in PHP itself, but I wouldn't exactly call that a thumbs up for that approach.{quote}\nBut there are 2 optional parameters... not only the array but also the locale itself is optional and should only be used in special cases.\nIt is more common that the array will be used than the third optional parameter, the locale.\nThere are much functions in PHP which do not only accept one optional parameter but also two or more. This is no precedence.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "created": "2007-03-28T02:53:01.000+0000",
                    "updated": "2007-03-28T02:53:01.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/13769",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "body": "The ZF strives for extreme simplicity.\n\nIs \"%1\\$d lines of %1\\$s\" the simplest way of expressing two place holders?\n\nWhy can't we infer types from the arguments supplied by the user?",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "created": "2007-03-28T12:34:38.000+0000",
                    "updated": "2007-03-28T12:34:38.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/13771",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "body": "This has nothing to do with simplest way... \nthis is how translators work.\n\nThe problem is that you can not say if the $s is the first or the second parameter.\nIn some languages you have to switch the location and then you have the problem.\n\nAnd if the translator has more types integrated than $s we could not work with it...\nThis would mean that this is not possible with the framework.\nThere are 7 Integer types avaiable for sprintf which actualy many work with, and which we would not support in the case that we only accept strings '$s'. As all of these types are integer we would have no chance of detecting the type automatically by supplied arguments.\n\nWhen we make it possible to work with array-keys we have another advantage:\n{code}\n\/\/ working only with strings the standard way\n$trans->translate('%1\\$s : %2\\$s', array('Dates', '2006'));\n\n\/\/ working with more than strings\n$trans->translate('$s : $d', array('$s' => 'Dates', '$d' => 2006));\n\n\/\/ working with self defined tags\n$trans->translate('My name is Thomas, I am 8.5 years old', array('Thomas' => $myname, '8.5' => $myage));\n{code}\nThe third option as described here has the advantage that the original string is much more readable as only having %1\\$s included within the code. And this is what I wanted to work within the ZF.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "created": "2007-03-28T13:42:44.000+0000",
                    "updated": "2007-03-28T13:42:44.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/13772",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "body": "Ok, so you are saying that translators must choose the types to use with each conversion specification for each phrase in each language?\n\nFor example, there is a one character difference in the following two examples (the conversion specification \"$d\" is changed to \"$e\").\n\n{code}\n\/\/ English:\n<?= $this->escape($translator->stranslate(\"Hello! Mr. %1\\$s has %2\\$d oranges at %3\\$s.\", $locale, $param1, $param2, $param3)); ?>\n\n\/\/ Vietnamese:\n<?= $this->escape($translator->stranslate(\"Chao' Anh! %2\\$e tra'i cam o*? %3\\$s cu?a Anh.\", $locale, $param1, $param2, $param3)); ?>\n{code}\n\nWould you provide some example use cases showing why a translator must choose *different* conversion specifications for the *same* phrase expressed in a *different* language?  My example above is contrived and and does not need dynamic selection of different conversion specifiers, since the quantity should be expressed using Zend_Locale_Format::toNumber() and not using the \"%e\" or \"%d\" conversion specifier for sprintf() as shown below:\n\n{code}\nZend_Locale_Format::toNumber($param2, array('locale' => $locale));\n\n\/\/ English:\n<?= $this->escape($translator->stranslate(\"Hello! Mr. %1 has %2 oranges at %3.\", $param1, $param2, $param3)); ?>\n\n\/\/ Vietnamese:\n<?= $this->escape($translator->stranslate(\"Chao' Anh! %2 tra'i cam o*? %3 cu?a Anh %1.\", $param1, $param2, $param3)); ?>\n{code}\n\nRegarding a \"locale\" parameter, the parameter can specify the source locale of input data, or the locale of output data.  I think code is more readable when the \"output\" locale is specified by setting a property on the object (e.g. \"{{$translator->setLocale($locale);}}\", before calling translate().\n\nPerhaps if you posted a patch that supports the second example above, and the \"self defined tags\", then more community members could experiment with this new feature and give more feedback?  If the function only returns a string (no echo\/print), then nobody can object to the function \"printing data to the output\".",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "created": "2007-03-28T14:34:40.000+0000",
                    "updated": "2007-03-28T14:34:40.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/13775",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "body": "{quote}Ok, so you are saying that translators must choose the types to use with each conversion specification for each phrase in each language?{quote}\n\nNo... I did not say that.\nThe search-value has only be given if it's not %x\\$s. This is the standard identifier for strings.\nUsing the standard (strings) no search-value has to be given.\n\nYour example is quite irritating as $e is no avaiable type identifier.\n\n{quote}Would you provide some example use cases showing why a translator must choose different conversion specifications for the same phrase expressed in a different language?{quote}\n{code}\n$translator->translate(\"Binary $b is added to $d\", array(100, 200));\n{code}\nIn one language the translation could be \"Zu $d wird der Bin\u00e4rwert $b addiert\".\n\nSo now there is no way to produce a correct translation.\n\nThe problem is that you can not define only to accept %x identifiers as this would mean to exclude existing code not to be used with Zend_Translate. Having the identifier if needed solves the problem\n{code}\n$translator->translate(\"Binary $b is added to $d\", array('$b' => 100, '$d' => 200));\n{code}\n\n{quote}Regarding a \"locale\" parameter, the parameter can specify the source locale of input data, or the locale of output data. I think code is more readable when the \"output\" locale is specified by setting a property on the object (e.g. \"$translator->setLocale($locale);\", before calling translate().{quote}\n\nAs already written, the language can already be set by using the setLocale() function. This is already described within the documentation.\nWhen Zend_Translate brakes the API by deleting the optional locale parameter we would have to change the complete I18N API for all other classes. This would mean to erase the optional locale parameter for all classes.\nIt is no option to have one class which is not API conform. This is not acceptable.\n\n{quote}Perhaps if you posted a patch that supports the second example above, and the \"self defined tags\", then more community members could experiment with this new feature and give more feedback? If the function only returns a string (no echo\/print), then nobody can object to the function \"printing data to the output\".{quote}\nThere was already a implementation which had this included. SVN 4189. It was not a complete implementation as it worked only with set key but it displayed what I wanted to integrate. It already, did not print, but only return a string.\n\nBut this was not acceptable as you wrote in you second reply so I had to revert the already made change.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "created": "2007-03-28T15:24:21.000+0000",
                    "updated": "2007-03-28T15:24:21.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/13776",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "body": "The \"type specifiers\" are listed here, include \"e\":\nhttp:\/\/www.php.net\/sprintf\n\nOk, now I see an example showing the use case you are concerned about.  Repeating the type information (both in the array and in the format string) is not DRY.  Regardless, I think this is an edge case, and will not occur frequently.  The ZF normally provides *simple* ways to solve the most common use cases.  If needed, the ZF sometimes supports additional edge cases using additional methods.  Perhaps we can all work together to provide an extremely simple method to solve the common, simple use cases, and a more complex method for edge cases?\n\nThere is a difference between setLocale() setting a static class variable and an instance property.  I think the example I gave (as written above) works fine, without including an optional $locale parameter.  Why would \"the complete I18N API for all other classes\" need to change, if the following is used?\n{code}\n$translator->setLocale($someLocale);\n$translator->translate($string, $param1, $param2, $param3);\n{code}\n\n\n",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "created": "2007-03-28T15:45:25.000+0000",
                    "updated": "2007-03-28T15:45:25.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/13777",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "body": "{quote}There was already a implementation which had this included. SVN 4189. It was not a complete implementation as it worked only with set key but it displayed what I wanted to integrate. It already, did not print, but only return a string.\n\nBut this was not acceptable as you wrote in you second reply so I had to revert the already made change.{quote}\n\nI did not say this, and the patch in 4189 did not \"supports the second example above\" (the one using Zend_Locale_Format::toNumber() ).",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "created": "2007-03-28T15:48:04.000+0000",
                    "updated": "2007-03-28T15:48:04.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/13785",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "body": "{quote}The \"type specifiers\" are listed here, include \"e\":{quote}\nMy documentation from 21.Nov.2006. It includes PHP 5.1.4 which is the minimum requirement for ZF and does not mention this identifier. But this has nothing to do with this issue.\n\n{quote}Repeating the type information (both in the array and in the format string) is not DRY{quote}\nWe are not repeating the type information... we are defining the tokens which have to be changed.\nThis could also be strings like 'Thomas' as mentioned above.\n\nThis would be a real benefit for users not familiar with sprinft tokens.\n%1\\$s would therefor only be the token to search for... not a way to change the given content to a binary representation or scientific formatting.\n\nWe would therefor not integrate the sprintf function itself because it changes the content which should be added. We would only change the expected tokens with the given values.\n\nOf course the sprintf function could be used as actually with no loss of information or problems.\n\n{quote}There is a difference between setLocale() setting a static class variable and an instance property.{quote}\nsetLocale set's a instance property because you could have several translation objects with each set to it's own language. This is the same behaviour as Zend_Date.\nWhy is this a problem ??\n\n{quote}Perhaps we can all work together to provide an extremely simple method to solve the common, simple use cases, and a more complex method for edge cases?{quote}\nWhat is the problem with the actual proposed method which can be used simple or also complex if needed ???\n\n{code}\n\/\/ case 1: standard\n$x->translate('My string');\n\n\/\/ case 2: only string parameters\n$x->translate('My string %1\\$s %2\\$s', array('value1', 'value2'));\n\n\/\/ case 3: special tags which can not automatically be detected\n$x->translate('My string $e $d', array('$e' => 'value1', '$d' => 'value2'));\n\n\/\/ case 4: self defined tags\n$x->translate('My string with %date% and %name%', array('%date%' => $mydate, '%name%' => $myname));\n\n\/\/ case 5: standard with locale overriding actual settings for this string\n$x->translate('My string', null, 'de');\n\n\/\/ case 6: only string parameters with locale overriding actual settings for this string\n$x->translate('My string %1\\$s %2\\$s', array('value1', 'value2'), 'de');\n\n\/\/ case 7: special tags which can not automatically be detected with locale\n$x->translate('My string $e $d', array('$e' => 'value1', '$d' => 'value2'), 'de');\n\n\/\/ case 8: self defined tags with locale overriding actual settings\n$x->translate('My string with %date% and %name%', array('%date%' => $mydate, '%name%' => $myname), 'de');\n{code}\n\nThis would support all possible cases easy and also complex.\n\n{quote}the patch in 4189 did not \"supports the second example above\"{quote}\nAs I said before the implementation was not finished.\nAnd having 3 optional parameters for 3 tokens is also not acceptable. It does not fit within the API.\nThis is the same as with the locale parameter.\n\nAs several people have mentioned the framework is inconsistent with a couple of it's classes.\nI am not willing to add inconsistency myself to the I18N core only because it's easier to implement.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "created": "2007-03-28T17:10:41.000+0000",
                    "updated": "2007-03-28T17:10:41.000+0000"
                }
            ]
        }
    },
    "transitions": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-1116\/transitions"
}