{
    "expand": "html",
    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-9248",
    "key": "ZF-9248",
    "fields": {
        "summary": {
            "name": "summary",
            "type": "java.lang.String",
            "value": "The argument in the method Zend_Filter_File_Rename::filter() should be optional"
        },
        "timetracking": {
            "name": "timetracking",
            "type": "com.atlassian.jira.issue.fields.TimeTrackingSystemField"
        },
        "issuetype": {
            "name": "issuetype",
            "type": "com.atlassian.jira.issue.issuetype.IssueType",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issueType\/4",
                "name": "Improvement",
                "subtask": false
            }
        },
        "votes": {
            "name": "votes",
            "type": "com.atlassian.jira.issue.fields.VotesSystemField",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-9248\/votes",
                "votes": 0,
                "hasVoted": false
            }
        },
        "security": {
            "name": "security",
            "type": "com.atlassian.jira.issue.security.IssueSecurityLevel"
        },
        "resolution": {
            "name": "resolution",
            "type": "com.atlassian.jira.issue.resolution.Resolution",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/resolution\/2",
                "name": "Won't Fix"
            }
        },
        "fixVersions": {
            "name": "fixVersions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/version\/10440",
                    "id": 10440,
                    "description": "Mini Release",
                    "name": "1.10.3",
                    "userReleaseDate": "01\/Apr\/10",
                    "archived": false,
                    "releaseDate": "2010-04-01",
                    "released": true
                }
            ]
        },
        "resolutiondate": {
            "name": "resolutiondate",
            "type": "java.util.Date",
            "value": "2010-02-25T13:15:48.000+0000"
        },
        "reporter": {
            "name": "reporter",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=verysimple",
                "name": "verysimple",
                "displayName": "Michael Ekoka",
                "active": true
            }
        },
        "created": {
            "name": "created",
            "type": "java.util.Date",
            "value": "2010-02-24T01:13:28.000+0000"
        },
        "updated": {
            "name": "updated",
            "type": "java.util.Date",
            "value": "2010-03-05T16:51:51.000+0000"
        },
        "customfield_10041": {
            "name": "Tags",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:labels"
        },
        "description": {
            "name": "description",
            "type": "java.lang.String",
            "value": "When instantiating a Zend_Filter_File_Rename object, or when calling one of its various setter methods the object can receive a complete set of arguments to allow a proper transfer, including the \"source\" path of a file. Normally, there are 2 expected behaviors for the filter() method under these conditions:\r\n1- If invoked with no parameters, it should simply transfer everything that the object has in its set of files.\r\n2- If an argument is given, it should only transfer the one file. \r\n\r\nThe first of these expectations is not currently met as the present implementation again requires the \"source\" file argument for the filter() method. The argument should be optional.\r\n\r\n$fileFilter = new Zend_Filter_File_Rename(array(\r\n    \"source\" => \"\/home\/mike\/tmp\/photo.jpg\",\r\n    \"overwrite\" => true,\r\n    \"target\" => \"\/home\/mike\/pics\"\r\n));\r\n\r\n$fileFilter->filter(); \/\/ currently throws an exception"
        },
        "priority": {
            "name": "priority",
            "type": "com.atlassian.jira.issue.priority.Priority",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/priority\/4",
                "name": "Minor"
            }
        },
        "duedate": {
            "name": "duedate",
            "type": "java.util.Date"
        },
        "customfield_10022": {
            "name": "Fix Version Priority",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:select"
        },
        "watcher": {
            "name": "watcher",
            "type": "watcher",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-9248\/watchers",
                "isWatching": false,
                "watchCount": 0
            }
        },
        "worklog": {
            "name": "worklog",
            "type": "worklog",
            "value": [

            ]
        },
        "status": {
            "name": "status",
            "type": "com.atlassian.jira.issue.status.Status",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/status\/5",
                "name": "Resolved"
            }
        },
        "labels": {
            "name": "labels",
            "type": "com.atlassian.jira.issue.label.Label",
            "value": [

            ]
        },
        "assignee": {
            "name": "assignee",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                "name": "thomas",
                "displayName": "Thomas Weidner",
                "active": true
            }
        },
        "links": {
            "name": "links",
            "type": "issuelinks",
            "value": [

            ]
        },
        "attachment": {
            "name": "attachment",
            "type": "attachment",
            "value": [

            ]
        },
        "sub-tasks": {
            "name": "sub-tasks",
            "type": "issuelinks",
            "value": [

            ]
        },
        "versions": {
            "name": "versions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/version\/10360",
                    "id": 10360,
                    "description": "Minor Release",
                    "name": "1.10.0",
                    "userReleaseDate": "27\/Jan\/10",
                    "archived": false,
                    "releaseDate": "2010-01-27",
                    "released": true
                }
            ]
        },
        "project": {
            "name": "project",
            "type": "com.atlassian.jira.project.Project",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/project\/ZF",
                "key": "ZF",
                "name": "Zend Framework",
                "roles": {

                }
            }
        },
        "components": {
            "name": "components",
            "type": "com.atlassian.jira.bc.project.component.ProjectComponent",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/component\/10013",
                    "id": 10013,
                    "name": "Zend_Filter",
                    "description": "methods for filtering data",
                    "isAssigneeTypeValid": false
                }
            ]
        },
        "comment": {
            "name": "comment",
            "type": "com.atlassian.jira.issue.fields.CommentSystemField",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/38763",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "body": "Why should a sub-component of Zend_File be changed when Zend_File itself is not changed?\r\n\r\nThe actual implementation is needed for the multifile feature where you could define any source with \"*\" and must give the uploaded file as filter value. The reason is that you may define several files in that filter and process each file afterwards one by one.\r\n\r\nAllowing to use a filter without a filtered value makes this component unusable for Zend_File. In it's actual implementation this change will not be done.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "created": "2010-02-25T13:15:48.000+0000",
                    "updated": "2010-02-25T13:15:48.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/38932",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=verysimple",
                        "name": "verysimple",
                        "displayName": "Michael Ekoka",
                        "active": true
                    },
                    "body": "I see this ticket is marked as resolved, but this since this is an improvement proposal, allow me to waste a few more minutes of my life on this, if only for the sake of a different perspective.\r\n\r\n[Why should a sub-component of Zend_File be changed when Zend_File itself is not changed?]\r\nI'm not really concerned with Zend_File, I assume you meant a sub-component of Zend_Filter since this component has no dependency on Zend_File. Granted, the Zend_Filter_Interface::filter() method specifies that the method should take an argument. However, the very nature of this filter allows for this argument to be introduced even before the filter has been called. The Interface doesn't prevent Zend_Filter_File_Rename to provide another proxy method that would automatically rename these preregistered files, without requiring to yet again provide the parameter. How about Zend_Filter_File_Rename::autoFilter()? It would simply loop through the currently registered files and rename them.\r\n\r\n[The actual implementation is needed for the multifile feature where you could define any source with \"*\" and must give the uploaded file as filter value. The reason is that you may define several files in that filter and process each file afterwards one by one.]\r\nThe feature I mention does not impede in the current functionality. I'm just stating that the present design of this component makes for some \"nonDRY\" code when used as an independent component, which tells me that maybe something could be improved, hence this ticket. If the new behavior was implemented as explained, to simply rename all preregistered files it would resolve the redundancies.\r\n\r\n[Allowing to use a filter without a filtered value makes this component unusable for Zend_File. In it's actual implementation this change will not be done.]\r\nI am aware that Zend_File uses this component, but I don't think it would be advisable to start discussing improvement of independent components while worrying about how one design may affect another. Zend_File is still free to expose a different rename API to its clients, while proxying to the Zend_Filter_File_Rename as it pleases. In any case, I doubt that the proposed behavior would even affect its current usage of the filter.\r\n\r\n0.02$",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=verysimple",
                        "name": "verysimple",
                        "displayName": "Michael Ekoka",
                        "active": true
                    },
                    "created": "2010-03-02T10:47:26.000+0000",
                    "updated": "2010-03-02T10:47:26.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/38933",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "body": "Zend_Filter_File is a subcomponent from Zend_File...\r\n\r\nJust because I was forced to exclude the filters from Zend_File does not mean that these filters can be used independently.\r\n\r\nAdditionally, and this is what you really missed, the interfaces forces all filters to have minimum ONE parameter. It does not allow to have 0 parameters.\r\n\r\nThe reason is that you create your filter, and then give the \"filter()\" method that value you want to filter. In our case the filename. There is no way to prevent this.\r\n\r\nYou could of course give a explicit \"null\", but even in this case you provide one parameter (filter(null);)... and you can not call filter(); in any case.\r\n\r\nTherefor this issue will stay as won't fix.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "created": "2010-03-02T13:31:10.000+0000",
                    "updated": "2010-03-02T13:31:10.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/39005",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=verysimple",
                        "name": "verysimple",
                        "displayName": "Michael Ekoka",
                        "active": true
                    },
                    "body": "[Just because I was forced to exclude the filters from Zend_File does not mean that these filters can be used independently.]\r\nJust because these 2 components happen to have the same author doesn't mean one is a subcomponent of the other. I'm not sure most developers would agree with you on this. One of ZF's prime tenets is loose coupling. I should be able to browse through the Filters available in the API, pick one of my liking and just use it. Zend_File is listed nowhere when looking at Zend_Filter_File_Rename's API. If the usage of this filter is meant to be coupled with Zend_File, maybe it should be renamed Zend_File_Filter_Rename.\r\n\r\n[Additionally, and this is what you really missed, the interfaces forces all filters to have minimum ONE parameter. It does not allow to have 0 parameters.]\r\nI did acknowledge this in my precedent reply: [Granted, the Zend_Filter_Interface::filter() method specifies that the method should take an argument. ]\r\nBut I also stated that implementing an interface doesn't prevent to go beyond it, especially in our case where it solves a design issue. Yes, Zend_Filter_File_Rename fulfills the contract laid out by Zend_Filter_Interface, but it does this at the cost of a sometimes unnecessary redundancy when using it. Unlike most other Filters, Zend_Filter_File_Rename already offers the possibility to specify what has to be filtered well before its filter() method is called. My proposed solution was the addition of a proxy method \"autoFilter()\", that would simply internally loop through the current registered files and pass each one to the filter() method. This simple solution adds some \"DRYness\" to the class' usage without impeding on either the interface, or its current usage by Zend_File for that matter.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=verysimple",
                        "name": "verysimple",
                        "displayName": "Michael Ekoka",
                        "active": true
                    },
                    "created": "2010-03-05T14:09:30.000+0000",
                    "updated": "2010-03-05T14:09:30.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/39007",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "body": "{quote}\r\nIf the usage of this filter is meant to be coupled with Zend_File, maybe it should be renamed Zend_File_Filter_Rename.\r\n{quote}\r\n\r\nThis is ridiculous. You can't blame me for the naming.\r\nOriginally it was Zend_File_Filter... then I was forced to move all filters to Zend_Filter otherwise those components would not have been added.\r\n\r\n{quote}\r\nBut I also stated that implementing an interface doesn't prevent to go beyond it, especially in our case where it solves a design issue. Yes, Zend_Filter_File_Rename fulfills the contract laid out by Zend_Filter_Interface, but it does this at the cost of a sometimes unnecessary redundancy when using it.{quote}\r\n\r\nSorry, but your arguments are not valid for the core.\r\nYou say that Zend_Filter_File_* filters should not implement the interface. Otherwise there would be no way to have no parameter for filter(). But when doing this these are no filters anymore. A filter MUST impelement the filter interface.\r\n\r\nAs with all component you are free to do your own implementation of them, but we will not erase the interface from core filters.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "created": "2010-03-05T14:41:59.000+0000",
                    "updated": "2010-03-05T14:41:59.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/39017",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=verysimple",
                        "name": "verysimple",
                        "displayName": "Michael Ekoka",
                        "active": true
                    },
                    "body": "{quote}This is ridiculous. You can't blame me for the naming.\r\nOriginally it was Zend_File_Filter... then I was forced to move all filters to Zend_Filter otherwise those components would not have been added. {quote}\r\nThomas, I don't know where you're getting the idea that I'm attacking you. I opened a ticket because I'm using a component of the ZF and I'm raising an issue that I believe should be addressed. It so happens that you were the one to whom the ticket was assigned and dismissed my pov without displaying that you understood my arguments. Since you're the man on the trigger, my only recourse is to keep arguing my perspective. It could have been anybody else, I still wouldn't care. Peer review is the only way to build a better framework. We're two professionals exchanging on the matter and there's no need for petty egos to get in the way. This isn't my first ticket and in the past I've seen some of the issues that I raised addressed. I like to think that the time that I spent defending my pov and my stubbornness has paid off for the great many in the end.\r\n\r\nThe current issue is Zend_Filter_File_Rename. I will reiterate my points. I ask you to please pay closer attention to my arguments, because I sense that despite my attempts at being as clear as possible there is a latent misunderstanding. \r\n\r\n1) Just because you are the author of the component and say it's a subcomponent of Zend_File, it doesn't make it so. What would make it so is the convention we all agree to follow and which is an inherent part of ZF. According to the convention the file should have been named Zend_File_Filter_Rename if it was part of Zend_File. This, simply, is a fact. I'm not blaming anybody here, we're not in the business of pointing fingers, this is an issue tracker that helps to clarify things with this framework. You were not allowed to name it Zend_File_Filter_Rename, fine. This simply means one of 2 things: either the maintainers of the framework originally intended for this component to be independent from Zend_File, or you have to convince them that the component is indeed part of Zend_File and should be renamed accordingly as you originally wanted. When someone currently opens the API, nothing indicates this. One of the reasons we have this naming convention is to emulate a packaging system and it doesn't make sense to have components of one package (or module) located in another.\r\n\r\n{quote}\r\nYou say that Zend_Filter_File_* filters should not implement the interface. Otherwise there would be no way to have no parameter for filter(). But when doing this these are no filters anymore. A filter MUST impelement the filter interface.\r\n{quote}\r\n2) In *none* of my previous interventions have I said this. This is what I said. Zend_Filter_File_Rename implements the Zend_Filter_Interface. Fine. No problems with that, except that when I'm using it, I get repetition in my code. Not so good. How do we go about fixing this? We've already established that filter() can't be redefined since its interface specifies a parameter. However, interfaces don't prevent to add other methods. I proposed to add a Zend_Filter_File_Rename::autoFilter() method that would automatically loop through preregistered files and filter them. It is kosher, unobtrusive and it fixes the redundancy. \r\n",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=verysimple",
                        "name": "verysimple",
                        "displayName": "Michael Ekoka",
                        "active": true
                    },
                    "created": "2010-03-05T16:51:51.000+0000",
                    "updated": "2010-03-05T16:51:51.000+0000"
                }
            ]
        }
    },
    "transitions": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-9248\/transitions"
}