{
    "expand": "html",
    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-908",
    "key": "ZF-908",
    "fields": {
        "summary": {
            "name": "summary",
            "type": "java.lang.String",
            "value": "Consistency of character format code used for minutes and months."
        },
        "timetracking": {
            "name": "timetracking",
            "type": "com.atlassian.jira.issue.fields.TimeTrackingSystemField"
        },
        "issuetype": {
            "name": "issuetype",
            "type": "com.atlassian.jira.issue.issuetype.IssueType",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/issueType\/4",
                "name": "Improvement",
                "subtask": false
            }
        },
        "votes": {
            "name": "votes",
            "type": "com.atlassian.jira.issue.fields.VotesSystemField",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-908\/votes",
                "votes": 0,
                "hasVoted": false
            }
        },
        "security": {
            "name": "security",
            "type": "com.atlassian.jira.issue.security.IssueSecurityLevel"
        },
        "resolution": {
            "name": "resolution",
            "type": "com.atlassian.jira.issue.resolution.Resolution",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/resolution\/1",
                "name": "Fixed"
            }
        },
        "fixVersions": {
            "name": "fixVersions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/version\/10022",
                    "id": 10022,
                    "description": "Beta Release; all components feature complete for 1.0",
                    "name": "0.9.0",
                    "userReleaseDate": "17\/Mar\/07",
                    "archived": true,
                    "releaseDate": "2007-03-17",
                    "released": true
                }
            ]
        },
        "resolutiondate": {
            "name": "resolutiondate",
            "type": "java.util.Date",
            "value": "2007-03-02T15:19:11.000+0000"
        },
        "reporter": {
            "name": "reporter",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                "name": "gavin",
                "displayName": "Gavin",
                "active": true
            }
        },
        "created": {
            "name": "created",
            "type": "java.util.Date",
            "value": "2007-02-13T19:15:08.000+0000"
        },
        "updated": {
            "name": "updated",
            "type": "java.util.Date",
            "value": "2007-07-05T14:43:49.000+0000"
        },
        "customfield_10041": {
            "name": "Tags",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:labels"
        },
        "description": {
            "name": "description",
            "type": "java.lang.String",
            "value": "http:\/\/www.php.net\/date\n\nHow many of you have memorized and\/or prefer the ZF to be consistent with the format characters used with PHP's date() function?\n\nSpecifically, the CLDR data set uses 'm' inconsistently with PHP and GNU's \"date\" program, where 'm' means \"month\".  In CLDR and ZF i18n components, the CLDR meaning was preserved (i.e. 'm' for minute, instead of 'i').\n\nI'm proposing the i18n components remain consistent with PHP for the format character 'm'.\n\nh3. Edit:\nSummary:  The ZF i18n components could support both ISO and PHP date() function date format specifier tokens when inputting and outputting custom formatted dates.\n\nI think the i18n components are becoming a true gem in the Zend Framework. I realize this change is not simple and requires substantial effort, but the resulting flexibility justifies the effort.  How many frameworks will have easy-to-use date format input\/output specifiers using the developer's choice of either ISO\/CLDR date format specifiers or PHP date()'s specifiers?\n\nThis flexibility is not two solutions to do the same thing. Instead, this flexibility allows for flexible input\/output (import\/export) of data in formats convenient to the developer, and possibly interoperating with existing code.  We face some challenges to preserve the elegance and ease-of-use already in the i18n components, but I am confident we will succeed in offering developer specified input\/output date formats using PHP's date() format specifiers, without limiting or restricting existing functionality. "
        },
        "priority": {
            "name": "priority",
            "type": "com.atlassian.jira.issue.priority.Priority",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/priority\/4",
                "name": "Minor"
            }
        },
        "duedate": {
            "name": "duedate",
            "type": "java.util.Date"
        },
        "customfield_10022": {
            "name": "Fix Version Priority",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:select"
        },
        "watcher": {
            "name": "watcher",
            "type": "watcher",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-908\/watchers",
                "isWatching": false,
                "watchCount": 1
            }
        },
        "worklog": {
            "name": "worklog",
            "type": "worklog",
            "value": [

            ]
        },
        "status": {
            "name": "status",
            "type": "com.atlassian.jira.issue.status.Status",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/status\/5",
                "name": "Resolved"
            }
        },
        "labels": {
            "name": "labels",
            "type": "com.atlassian.jira.issue.label.Label",
            "value": [

            ]
        },
        "assignee": {
            "name": "assignee",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                "name": "thomas",
                "displayName": "Thomas Weidner",
                "active": true
            }
        },
        "links": {
            "name": "links",
            "type": "issuelinks",
            "value": [
                {
                    "issueKey": "ZF-999",
                    "issue": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-999",
                    "type": {
                        "name": "Dependency",
                        "direction": "OUTBOUND",
                        "description": "depends on"
                    }
                },
                {
                    "issueKey": "ZF-926",
                    "issue": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-926",
                    "type": {
                        "name": "Dependency",
                        "direction": "OUTBOUND",
                        "description": "depends on"
                    }
                }
            ]
        },
        "attachment": {
            "name": "attachment",
            "type": "attachment",
            "value": [
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/attachment\/10270",
                    "filename": "zf-908.patch",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "created": "2007-02-16T08:58:01.000+0000",
                    "size": 103093,
                    "mimeType": "text\/x-patch",
                    "content": "http:\/\/framework.zend.com\/issues\/secure\/attachment\/10270\/zf-908.patch"
                }
            ]
        },
        "sub-tasks": {
            "name": "sub-tasks",
            "type": "issuelinks",
            "value": [

            ]
        },
        "versions": {
            "name": "versions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/version\/10020",
                    "id": 10020,
                    "description": "Preview Release; I18N, Acl, Auth, Session",
                    "name": "0.7.0",
                    "userReleaseDate": "18\/Jan\/07",
                    "archived": true,
                    "releaseDate": "2007-01-18",
                    "released": true
                }
            ]
        },
        "project": {
            "name": "project",
            "type": "com.atlassian.jira.project.Project",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/project\/ZF",
                "key": "ZF",
                "name": "Zend Framework",
                "roles": {

                }
            }
        },
        "components": {
            "name": "components",
            "type": "com.atlassian.jira.bc.project.component.ProjectComponent",
            "value": [
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/component\/10072",
                    "id": 10072,
                    "name": "Zend_Date",
                    "description": "Zend_Date is the basic library for the handling of all date, time and calendar-related issues.",
                    "isAssigneeTypeValid": false
                }
            ]
        },
        "comment": {
            "name": "comment",
            "type": "com.atlassian.jira.issue.fields.CommentSystemField",
            "value": [
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/12720",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "body": "{quote}How many of you have memorized and\/or prefer the ZF to be consistent with the format characters used with PHP's date() function?{quote}\n\nNon for now...\nOtherwise I would have been mailed or announced of that because this class is avaiable since several months.\nI know several people which are using this class and have from none of them heared that this is a problem.\n\n{quote}Specifically, the CLDR data set uses 'm' inconsistently with PHP and GNU's \"date\" program, where 'm' means \"month\". In CLDR and ZF i18n components, the CLDR meaning was preserved (i.e. 'm' for minute, instead of 'i').{quote}\n\nCLDR and ZF are not using 'm' inconsistently, they are using the ISO Standard 8601 where this notation is defined.\n\nThe complete framework is build upon the ISO standard  and the CLDR.\nSee here for details: \nISO - http:\/\/www.iso.org\/iso\/en\/prods-services\/popstds\/datesandtime.html\nCLDR - http:\/\/www.unicode.org\/reports\/tr35\/#Date_Format_Patterns\n\nIf someone is in need of php's date notation he should use Zend_Date->date();\nwhere the format letters are the same as within php itself.\n\nThe date functions from php are included so if someone is in need of the \"old\" php behaviour he is expected to use the related functions\nZend_Date->date() \nZend_Date->mktime().\n\nFor myself as non native english the ISO standard is more native than the old php notation.\nAlso in my opinion the old php format letters are much overloaded and unlogic...\n\nj for month day\nn for month number\nF for month string\nl (small L) for day of week\nand so on...\n\nThe ISO notation is much more native.\nMM - month number, 2 digits\nMMMM - full month string\nand so on...\n\n\nMy opinion is that having the ISO standard integrated is no problem because it is very simple. You will know them once u read the docu or api doc.\nAnd if you are in need of the php behaviour (linux properitary format) you can use ->date() also.",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "created": "2007-02-14T03:03:53.000+0000",
                    "updated": "2007-02-14T03:03:53.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/12776",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "body": "The PHP strftime() function wraps the underlying C function strftime(), which is usually based on:\n\nhttp:\/\/www.opengroup.org\/onlinepubs\/009695399\/functions\/strftime.html\nhttp:\/\/opengroup.org\/onlinepubs\/007908799\/xsh\/strftime.html\n\nThus, the strftime() function intentionally does not mimick the \"normal\" date format specifiers elsewhere in PHP.  The ZF devteam was unanimous in wanting public methods in the ZF to follow the date format specifiers already used in PHP's date() function, when reasonable and possible.  When no conflict exists, I don't see a problem with augmenting PHP's date() function with additional specifiers supported by CLDR\/ISO standards.\n\nPrimarily, the decision to remain consistent with PHP's date() function results from the ZF's goal of simplicity and avoiding unecessary learning curves for those already familiar with PHP, when possible.\n",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "created": "2007-02-15T13:26:24.000+0000",
                    "updated": "2007-02-15T13:26:24.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/12780",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "body": "The \"normal\" date function from php are only unproblematic for people which\nare using gnu\/linux... all others would have a greater learning curve for php's format.\n\nPHP's date format uses 32 formating letters\nThe ISO format uses only 20 formatting letters and can do much more.\n\nWe would have problems for example with the following formating letters:\n\n       ISO                     PHP's Date                                   Differences by same format letters\nG    - Era, abbreviated      | 24h without zero                           | AD  -> 06\nGGGG - Era, complete         | gives 4 times the 24h format               | Anno Domini -> 06060606\ny    - year, 1-4 digit       | year, 2 digit                              | 2007 -> 07\nyyyy - year, 4 digit         | 4 times 2 digit year                       | 2007 -> 07070707\nY    - ISO Year, 1-4 digit   | 4 digit year                               | 2008 -> 2007\nYYYY - ISO Year, 4 digit     | 4  times 4 digit year                      | 2008 -> 2007200720072007\nM    - Month, 1-2 digit      | Month, 3 letters only english              | 3    -> Mar\nMM   - Month, 2 digit        | 2 times 3 lettered english month           | 03   -> MarMar\nMMM  - Monthname short       | 3 times 3 lettered english month           | M\u00e4r  -> MarMarMar\nMMMM - Monthname full        | 4 times 3 lettered english month           | M\u00e4rz -> MarMarMarMar\nw    - week of year,1-2 digit| day of week 0-6                            | 5    -> 2\nW    - week of month         | week of year                               | 3    -> 05\nd    - day of month,1-2digit | day of month 2 digit                       | 9    -> 09\ndd   - day of month, 2 digit | 2 times 2 digit day of month               | 09   -> 0909\nD    - day of year,1 digit   | day of week, 3 letters only english        | 70   -> Tue\nDDD  - day of year,3 digit   | 3 times 3 lettered english day of week     | 070  -> TueTueTue\nh    - hour 1-12, 1-2 digit  | hour 01-12, 2 digit                        | 6    -> 06\nhh   - hour 1-12, 2 digit    | 2 times 2 digit hour 01-12                 | 06   -> 0606\nH    - hour 0-23, 1 digit    | hour 0-23, 2 digit                         | 4    -> 04\nHH   - hour 0-23, 2 digit    | 2 times 2 digit 0-23                       | 04   -> 0404\nm    - minute, 1-2 digit     | month, 2 digit                             | 9    -> 09\nmm   - minute, 2 digit       | 2 times 2 digit month                      | 09   -> 0909\ns    - second, 1-2 digit     | second, 2 digit                            | 6    -> 06\nss   - second, 2 digit       | 2 times 2 digit second                     | 06   -> 0606\nS    - fractional second     | day attachment sign for english days       | 1425 -> st\nz    - short timezone name   | day of year                                | PDT  -> 070\nZ    - GMT offset in hours   | GMT offset in seconds                      | 100  -> 3600\nZZZZ - GMT offset, 4 digit   | 4 times GMT offset                         | GMT+01:00 -> 3600360036003600\n\nAlso keep in mind that the standard formats from CLDR which are used for DATES, DATE_FULL, TIME_FULL and so on \nfor all languages are defined with ISO and not PHP date format.\n\nIn my eyes this change would be very problematic with only very small benefit for a small amount of users.\nI would vote for the 90\/10 rule and let things as they are.",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "created": "2007-02-15T14:32:02.000+0000",
                    "updated": "2007-02-15T14:32:02.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/12791",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "body": "Consistency and completeness are not the same.  I think consistency is sufficient.  Consistency can be achieved without implementing all of PHP date()'s format specifiers.  Further, supporting non-conflicting format specifiers (e.g. MMMM) from CLDR do not seem to pose a problem, in my opinion.",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "created": "2007-02-15T18:58:33.000+0000",
                    "updated": "2007-02-15T18:58:33.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/12792",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "body": "We would have to throw away the implemented ISO standard, create a new non-standard which handles both by creating new letters.\nAnd we would have to write an parser which would have to change ISO to php date()...\n\nI see big problems on this... although it is nonsense in my eyes...\nZend Date works completly another way than php's date function.\nThe implemented CLDR uses ISO format for all date and time issues.\n\nIf someone does not want to use Zend Date he should use php's internal date functions... \nAlso the Gnu format is not locale aware. All name outputs are strict english.\n\nHaving both format's thrown into one format makes handling very problematic.\n\nExample for some month letters :\nM - 3 lettered english monthname\nMM - 2 digit monthnumber\nMMM - 3 lettered localized monthname\nMMMM - full localized monthname\nm - 2 digit monthnumber\nmm - 2 digit minute\n\nnew letter for 1 digit monthname\nnew letter for 1 digit minute\n\nSuch a new generated format is unlogic in it's handling...\nIn my eyes this would complicate things and increases problems for users.\n\nIf devteam decides that we MUST support ye' old php date format because Zend Date would otherwise be useless, maybe it would be better to\n\n1.) have an own parameter to switch from ISO to GNU format.\n2.) have new functions which uses GNU format instead of ISO format (f.e. toPhpString)\n3.) have an format-wrapper integrated (Zend_Locale_Format::toIsoFormat('Y-m-d H:i:s') --> \"YYYY-MM-dd HH:mm:ss\"\n\nAs Zend Date is build upon Zend Locale\/CLDR and CLDR uses ISO this would probably be the best way also to support gnu format if we have to do so.\n\nBut my opinion is, that maybe 2-5% of the ZF users would have problems with ISO format and use Gnu format. The people which I know to use Zend Date already since it is in incubator did not have any problems with ISO.  But they were europeans and no americans :-)",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "created": "2007-02-16T02:05:05.000+0000",
                    "updated": "2007-02-16T02:05:05.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/12796",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "body": "I have a simpler solution planned that mostly avoids the issues you mentioned.\nI'm committing the patch very soon.  I think the code will clarify things much more than words.\n\nBasically, _parseDate is changed slightly to become consistent with date(), without harming current operation.\nThen, toString() is renamed to toStringIso(), and I added toString() which wraps Zend_Date_DateObject's date().",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "created": "2007-02-16T06:12:14.000+0000",
                    "updated": "2007-02-16T06:12:14.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/12798",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "body": "Please wait until the code freeze is lifted up\nor commit it to incubator...\n\nHaving non verified code integrated into core would be a great headache and very unprofessional in this stage of the framework.\n\nWe should not make the same mistakes as with 0.7 once again.",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "created": "2007-02-16T08:21:59.000+0000",
                    "updated": "2007-02-16T08:21:59.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/12800",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "body": "I agree.  Bill asked me to make the changes Thursday and commit it Thursday, but the changes are large and complex.  I have been working on the changes for many hours now .. since Thursday (hard drive crashing on community server, so I had to reconstruct some of my work).  I see no way to make such large changes within one day, just before a release.  Instead, I have committed some very tiny changes that are easy to verify.  I will post a large patch to this issue for community review.",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "created": "2007-02-16T08:34:41.000+0000",
                    "updated": "2007-02-16T08:34:41.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/12804",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "body": "The patch involved fixing some other bugs discovered while making the requested changes.\n\nTODO:  Not all of the weekday name format specifiers support the $locale parameter yet in Zend_Date_DateObject's date() method.",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "created": "2007-02-16T08:58:01.000+0000",
                    "updated": "2007-02-16T08:58:01.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/12805",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=bkarwin",
                        "name": "bkarwin",
                        "displayName": "Bill Karwin",
                        "active": true
                    },
                    "body": "In your patch, why does __toString() call toStringIso()?  \n\nI thought that since the Date constructor and the Date_Object::date() method uses the PHP-style format specifiers, shouldn't the default __toString() method also use PHP-style formatting?\n\nAlso I'm looking at the patched example in the doc Zend_Date-Overview.xml file.  I'm not sure I understand the difference between the three calls.  Are you saying the Feb 31 outputs March 3 no matter what input spec you use?\n\nThe patch is full of trivial differences related to removing ^M characters and reversing \"public static\" vs. \"static public\" function declarations.  When you make patches for review, please do not mix functional changes with code style changes.  It makes it very hard to see where the substantial changes are.",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=bkarwin",
                        "name": "bkarwin",
                        "displayName": "Bill Karwin",
                        "active": true
                    },
                    "created": "2007-02-16T13:03:03.000+0000",
                    "updated": "2007-02-16T13:03:03.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/12806",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "body": "I see several great problems which makes me headache :\n\ntoString versus date\n--------------------\nAll standard short functions produce ISO output.\nThis is standard for complete Zend_Date.\nget\/getxxx does ISO output,\nonly toString does not...\n\nBut __toString which is called by f.e. print $date does ISO...\nIn my eyes it would be better to have the new functionality also \nimplemented with an new name.\n\ntoDate \/ toDateString \/ toPhpString \/ toGnuString .... whatever\n\nThis would be better comform to the existing API\n\n\nInternal format changes\n-----------------------\nsetTime no longer supports CLDR format\nf.e. setTime('10:20:30', 'HH:mm:ss'); no longer works\n\nsetDate no longer supports CLDR format\nsetDate('10.Feb.2007, 'dd.MM.YYYY); no longer works\n\nZend_Locale_Format now failes on time formats because m is parsed as minute instead of month\nif not getDate is used but an self defined CLDR format or if the format is taken directly from CLDR.\n\n\nConstant changes\n----------------\nZend_Date::WEEKDAY_SHORT is no longer locale aware and does only output english, but Zend_Date::WEEKDAY is\nZend_Date::MONTH_NAME is no longer locale aware and does only output english\nZend_Date::MONTH_NAME_SHORT is no longer locale aware and does only output english\n\n\nPHP date wrapper\n----------------\nZend_Date_DateObject->date is no longer compatible to php's date function.\nGiven Format letters produce non php conform output\nPossible internal use of gmt is deleted but could be needed by Zend_Calendar or extending classes.\n\nPrincipially date has to be a wrapper to php's date function to add 64bit timestamp awareness as mktime.\nThis is now no longer given.\n\nPossible problems with ARPA\/RFCxxx\/RSS\/W3C functions due to changed date().\n\n\nConclusion\n----------\nOnly having the patch I can not verify all exactly.\nBut this change is not a bug fix, this is an complete API change.\nAnd the proposed changes are not \"simple\", they propose other problems.\n\nIt would be better and much simpler to have toDate is something where the outputformat is changed to ISO format.\nAlso we \"could\" make date() public.\n\nI would like to have things as they are...\n\nFor php date format add a new function toDate or make date public.\nThis would be API conform and would not make the problems which I've seen by looking through the code snippets above.\n\nThe ISO Format is used within CLDR... also within Zend Date... please do not change this, backwards compatibility can be archived simper as by changing the format to a non standard.",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "created": "2007-02-16T13:49:32.000+0000",
                    "updated": "2007-02-16T13:49:32.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/12812",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "body": "{quote}In your patch, why does __toString() call toStringIso()?{quote}\n\n\"It is worth noting that the __toString method will only be called when it is directly combined with echo() or print().\"\n\nAlso note that there are no arguments with this magic method, thus implying that reasonable defaults should be used.  The existing behavior of toStringIso() is correct when no arguments are given.  Thus, __toString() and also toString() should both call toStringIso() when the developer has not explicitly provided a date output format string.\n\n\n{quote}Also I'm looking at the patched example in the doc Zend_Date-Overview.xml file. I'm not sure I understand the difference between the three calls. Are you saying the Feb 31 outputs March 3 no matter what input spec you use?{quote}\n\nYes, all three \"input specs\" should result in the same effect, since all three are sufficient to define a date format specification matching the input.  However, there are numerous other \"input specs\" that would fail to match the date string in that example.  However, after a little sleep and reading this again, I see it needs more explanation, and probably should be moved to an advanced section, since it highlights an advanced feature (wrapping dates forward when the days indicated exceeds the number of days in the month).\n\n{quote}I thought that since the Date constructor and the Date_Object::date() method uses the PHP-style format specifiers, shouldn't the default __toString() method also use PHP-style formatting?{quote}\n\nTo clarify, there is no such thing as \"PHP's standard date output format\".  Instead we are preserving the API used by PHP's date() allowing developers to explicitly choose custom date output formats using date format specifiers, as documented in PHP's date() function.\n\nCurrently, Zend_Date has no notion of associating specific date formatting strings with individual objects, although this might make an interesting feature in a later release.  If we do add this feature, then the developer would choose which standard they want to use (ISO or PHP's date()), and __toString() should then use the appropriate output method - either toString() or toStringIso().\n",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "created": "2007-02-16T15:50:06.000+0000",
                    "updated": "2007-02-16T15:50:06.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/12815",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "body": "*I realize this change is not simple and requires substantial effort, but I think the i18n components are becoming a true gem in the Zend Framework.*  How many frameworks will have easy-to-use date format input\/output specifiers using the developer's choice (whichever standard they are familiar with)?\n\nThis flexibility is *not* two solutions to do the same thing.  Instead, this flexibility allows for flexible input\/output (import\/export) of data in formats convenient to the developer, and possibly existing code they already have.\n\n{quote}All standard short functions produce ISO output.{quote}\n\nThe primary methods facing users will be \nZend_Date::toString() and Zend_Locale_Format::getDate(), which wraps _parseDate() and also supports \"new Zend_Date($dateString, $format)\".\n\n{quote}All standard short functions produce ISO output.\nThis is standard for complete Zend_Date.\nget\/getxxx does ISO output,\nonly toString does not...{quote}\nThe idea of \"ISO output\" is not relevant.  We are discussing and working with format specifiers explicitly supplied by developers.  The issue relates to supporting format specifiers following the ISO conventions in CLDR or PHP's date().  There is no \"conflict\" between the new toString() using PHP's date format specifiers and Zend_Date::get() since the latter accepts Zend_Date constants to choose date formats instead of using developer-supplied date format specifiers.  I see no problems or conflicts between Zend_Date::get() and the new Zend_Date::toString().\n\n{quote}setTime no longer supports CLDR format\nf.e. setTime('10:20:30', 'HH:mm:ss'); no longer works{quote}\n\nYes, and the unit tests do not test the above for these methods:\n{code}\n    public function setTime($time, $format = null, $locale = null)\n    public function addTime($time, $format = null, $locale = null)\n    public function subTime($time, $format = null, $locale = null)\n    public function compareTime($time, $format = null, $locale = null)\n    public function setDate($date, $format = null, $locale = null)\n    public function addDate($date, $format = null, $locale = null)\n    public function subDate($date, $format = null, $locale = null)\n    public function compareDate($date, $format = null, $locale = null)\n{code}\n\nWould you like to add unit tests for this?\n\nIn order to make these functions use date format specifiers consistent with PHP's date(), we could renamed them *Iso(), and then replace the originals with ones using a date parsing function that complies with PHP's date() format specifiers.  I think the patched version of Zend_Locale_Format::_parseDate() handles 95% of the cases when users would want to provide a date using a format specifier consistent\/compatible with PHP's date() function.\n\n{quote}Zend_Date::WEEKDAY_SHORT is no longer locale aware and does only output english, but Zend_Date::WEEKDAY is{quote}\n\nNo.  Remember, all the unit tests work with the patch, except for the ones relating to the bug in ZF-926:\n{code}\n$d = new Zend_Date();\necho \"Today in de_AT is: \", $d->get(Zend_Date::WEEKDAY_SHORT, 'de_AT'), \"\\n\";\necho \"Today in en_US is: \", $d->get(Zend_Date::WEEKDAY_SHORT, 'en_US'), \"\\n\";\n\nToday in de_AT is: Fre\nToday in en_US is: Fri\n\necho \"Today in fr_CA is: \", $d->get(Zend_Date::MONTH_NAME, 'fr_CA'), \"\\n\";\necho \"Today in en_US is: \", $d->get(Zend_Date::MONTH_NAME, 'en_US'), \"\\n\";\nToday in de_AT is: fAcvrier\nToday in en_US is: February\n\necho \"Today in fr_CA is: \", $d->get(Zend_Date::MONTH_NAME_SHORT, 'fr_CA'), \"\\n\";\necho \"Today in en_US is: \", $d->get(Zend_Date::MONTH_NAME_SHORT, 'en_US'), \"\\n\";\nToday in de_AT is: fAcvr.\nToday in en_US is: Feb\n{code}\n\nRegarding the constants below WEEKDAY_SHORT in get(), I have not finished coding for those yet.  After working all night until 7:30am, I finally fell asleep.  I can finish converting the format specifiers in Zend_Date_DateObject::date() to complete the support for PHP's date() format specifiers within Zend_Date.  TODO: 'F', 'M', 'a', 'A', and 'e'.\n\n\n{quote}Zend_Date_DateObject->date is no longer compatible to php's date function.\nGiven Format letters produce non php conform output\n{quote}\nIt never was compatible, but is \"more\" compatible now.  \nWould you be more specific?\n\n{quote}Possible internal use of gmt is deleted but could be needed by Zend_Calendar or extending classes.{quote}\n\nCould you provide use cases to help justify the inclusion of code that is never used?\nIf necessary, it can be added back later, as a trailing optional parameter.\nThe patch makes it possible to add the $gmt flag at the end of the parameter list, without a resulting break in BC.  Specifically, we need $locale parameter now (it is used in the patch), but we do not need $gmt.  By adding $locale now, future versions will not need to break backward-compatibility, if $gmt is added back in (provided sufficient justification exists).\n\n{quote}Principially date has to be a wrapper to php's date function to add 64bit timestamp awareness as mktime.\nThis is now no longer given.{quote}\n\nIf there is a problem associated with the changes to Zend_Date_DateObject::date(), would you please explain?\n\n{quote}Possible problems with ARPA\/RFCxxx\/RSS\/W3C functions due to changed date().{quote}\n\nWould you please provide examples of problems?\n\n{quote}But this change is not a bug fix, this is an complete API change.{quote}\n\nYes, this patch does affect the API, as requested by the devteam to make the i18n components easier to use by those who are familiar with PHP's date() function (and many other programs using these date format character specifiers).\n\n{quote}And the proposed changes are not \"simple\", they propose other problems.{quote}\n\nI agree.  Careful thought and planning are required.  Most of the problems are already solved in the patch, or proposed solutions are listed above.\n\n{quote}Also we \"could\" make date() public.{quote}\n\nI think we should keep it protected, and instead give access to it using the new toString() which wraps Zend_Date_DateObject::date() in a smart way to do the \"right\" things.\n\n{quote}I would like to have things as they are...\n\nFor php date format add a new function toDate or make date public.\nThis would be API conform and would not make the problems which I've seen by looking through the code snippets above.{quote}\nI have no strong feelings about choosing between:\n1) renaming old toString() => toStringIso(), and creating new toString() using PHP date() format\n2) add new toStringPhpFormat() using PHP date() format\n\nHowever, I think all problems mentioned above either do not exist, or have relatively simple solutions.",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "created": "2007-02-16T16:58:22.000+0000",
                    "updated": "2007-02-16T16:58:22.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/12828",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "body": "For reference, here is a table mapping PHP's date() format specifier tokens to Zend_Date constants and CLDR's interpretation of ISO standards:\n||PHP || Zend_Date Constant || CLDR's interpretation of ISO||\n|d | DAY | dd|\n|D | WEEKDAY_SHORT | EEE|\n|j | DAY_SHORT | d|\n|l | WEEKDAY | EEEE|\n|N | WEEKDAY_8601 | e|\n|S | DAY_SUFFIX | no equivalent|\n|w | WEEKDAY_DIGIT | no equivalent|\n|z | DAY_OF_YEAR | D|\n|W | WEEK | w|\n|F | MONTH_NAME | MMMM|\n|m | MONTH | MM|\n|M | MONTH_NAME_SHORT | MMM|\n|n | MONTH_SHORT | M|\n|t | MONTH_DAYS | no equivalent|\n|L | LEAPYEAR | no equivalent|\n|o | YEAR_8601 | YYYY|\n|Y | YEAR | yyyy|\n|y | YEAR_SHORT | yy|\n|a | MERIDIEM | a (sort of, but likely to uppercase)|\n|A | not supported | a (sort of, but no guarantee that the format is uppercase)|\n|B | SWATCH | no equivalent|\n|g | HOUR_SHORT_AM | h|\n|G | HOUR_SHORT | H|\n|h | HOUR_AM | hh|\n|H | HOUR_SHORT | HH|\n|i | MINUTE | mm|\n|s | SECOND | ss|\n|e | TIMEZONE_NAME | zzzz|\n|I | DAYLIGHT | no equivalent|\n|O | GMT_DIFF | Z\/ZZ\/ZZZ|\n|P | GMT_DIFF_SEP | ZZZZ|\n|T | TIMEZONE | z\/zz\/zzz|\n|Z | TIMEZONE_SECS | no equivalent|\n|c | ISO_8601 | no equivalent|\n|r | RFC_2822 | no equivalent|\n|U | TIMESTAMP | no equivalent|\n",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "created": "2007-02-16T20:09:55.000+0000",
                    "updated": "2007-02-16T20:09:55.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/12848",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "body": "After thinking about these changes over the holiday weekend, I will vote to support ISO formats by default, but allow Zend_Date object's to have a user-selectable behavior (input\/output using either ISO or PHP date() format specifiers).",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "created": "2007-02-20T14:11:49.000+0000",
                    "updated": "2007-02-20T14:11:49.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/12849",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "body": "I am very happy if we can leave ISO implemented as it already is.\n\nImplementation Details:\n------------------------------\nInternal Zend_Date should always work with ISO Format.\nThis way we have no problem with CLDR.\n\nSpend Zend_Date an additional internal\/public function which converts the PHP date format string into an ISO format string.\n\nBtw: related to format letters:\n\nWEEKDAY_DIGIT is in Iso 'e'\nISO and RFC can be built by the other format letters but Zend_Date support these natively.\n\nPERIOD can not be defined upper or lowercase as with PHP because in several locales we have upper and lowercase letters, some have only upper, some only lower case.\n\nAll other mentioned formats are supported by Zend_Date itself and can be used with the proper function. So these are no problem on output. And the ones which can not be written with ISO letters as daylight or period can not be used as input, so there is no problem.",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "created": "2007-02-20T15:05:50.000+0000",
                    "updated": "2007-02-20T15:05:50.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/12852",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "body": "I agree, the initial request I received for supporting the PHP \"way\" as the *default* was difficult and leads to solvable complications.  However, making the ISO format specifiers the default avoids most of the complications, and seems quite preferable.\n\nIf conversions are done internally, then conversions are an implementation detail not seen by developer.  Instead, I like the idea of $date->usePhpDateFormat() ... or something named similar.  Then conversions are not added to the API and develoeprs do not need to learn about using conversion functions.",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "created": "2007-02-20T15:54:00.000+0000",
                    "updated": "2007-02-20T15:54:00.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/12855",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "body": "That's what I meant...\n\nA user has to decide that he NOW wants to use the PHP format \n\nZend_Date::ISOFORMAT = FALSE for example.\nConstant or function... how ever... the user has to do the decision.\n\nAnd after he has done so, the given php date formats are changed to iso format so they can be processed by Zend_date internally.\n\nSo I think we speak about the same API detail as he just has to call one function to use his \"je old\" php date format strings.",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "created": "2007-02-20T16:59:53.000+0000",
                    "updated": "2007-02-20T16:59:53.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/12861",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "body": "Removed \"fix version\", since this feature addition does not have a clear \"fix by\" version date anymore.",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "created": "2007-02-20T19:54:01.000+0000",
                    "updated": "2007-02-20T19:54:01.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/12872",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "body": "Using a constant would make it difficult for a developer who wants to use ISO formats for new code he writes, when he must also integrate existing code using PHP date() format specifiers.  Perhaps we can do both for Zend_Date:\n\n1) constant specifies default behavior for new Zend_Date objects\n2) individual objects have a property that toggles between ISO formats and PHP date() style formats\n\nFor Zend_Locale, I see more advantages to simply using two functions:\n1) getDate() - no changes\n2) getDatePhpFormat() - uses PHP date() format",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "created": "2007-02-21T11:45:36.000+0000",
                    "updated": "2007-02-21T11:45:36.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/12939",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "body": "With SVN 3613 two new function were implemented.\n\nconvertPhpToIsoFormat()\n   - converts PHP date format strings to the same strings in ISO format. This function can also be used by users (not only internally) as it's static.\n\ntoPhpString()\n  - accepts only PHP date format strings to do the same as toString() for a Zend_Date object\n\nThese functionallity is not complete, but I think the actual way supports about 80-90% of the use cases.",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "created": "2007-02-25T05:51:47.000+0000",
                    "updated": "2007-02-25T05:51:47.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/12941",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "body": "Fixed as with SVN 3617.\n\nPHP date formats are now accepted if the static function\nZend_Date::usePhpDateFormat (true);\nis called once before working with php date format strings.",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "created": "2007-02-25T08:54:42.000+0000",
                    "updated": "2007-02-25T08:54:42.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/13007",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "body": "Either we need to add unit tests (see @todo in {{testUsePhpDateFormat()}}) and update the docu, or we need to create new issues when this issue is closed to track these two other tasks (docu + unit tests).",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "created": "2007-02-26T16:59:36.000+0000",
                    "updated": "2007-02-26T16:59:36.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/13079",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "body": "Documentation added with SVN 3682",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "created": "2007-03-01T17:07:36.000+0000",
                    "updated": "2007-03-01T17:07:36.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/13081",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "body": "I also added more docu.",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "created": "2007-03-01T19:34:49.000+0000",
                    "updated": "2007-03-01T19:34:49.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/13112",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "body": "Unit tests were added as with SVN 3697.\n\nNow also an exception will be thrown if unsupported tokens will be found within an given format string. This way users will see instantly problems and not get some dates returned as expected and some not... this makes the function more failsave.",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "created": "2007-03-02T15:19:11.000+0000",
                    "updated": "2007-03-02T15:19:11.000+0000"
                }
            ]
        }
    },
    "transitions": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-908\/transitions"
}