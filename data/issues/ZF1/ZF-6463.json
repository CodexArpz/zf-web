{
    "expand": "html",
    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-6463",
    "key": "ZF-6463",
    "fields": {
        "summary": {
            "name": "summary",
            "type": "java.lang.String",
            "value": "Binding params in where clause"
        },
        "timetracking": {
            "name": "timetracking",
            "type": "com.atlassian.jira.issue.fields.TimeTrackingSystemField"
        },
        "issuetype": {
            "name": "issuetype",
            "type": "com.atlassian.jira.issue.issuetype.IssueType",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issueType\/4",
                "name": "Improvement",
                "subtask": false
            }
        },
        "votes": {
            "name": "votes",
            "type": "com.atlassian.jira.issue.fields.VotesSystemField",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-6463\/votes",
                "votes": 11,
                "hasVoted": false
            }
        },
        "security": {
            "name": "security",
            "type": "com.atlassian.jira.issue.security.IssueSecurityLevel"
        },
        "fixVersions": {
            "name": "fixVersions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [

            ]
        },
        "reporter": {
            "name": "reporter",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=byraul",
                "name": "byraul",
                "displayName": "Raul Simiciuc",
                "active": true
            }
        },
        "created": {
            "name": "created",
            "type": "java.util.Date",
            "value": "2009-04-29T01:14:10.000+0000"
        },
        "updated": {
            "name": "updated",
            "type": "java.util.Date",
            "value": "2011-09-14T10:04:54.000+0000"
        },
        "customfield_10041": {
            "name": "Tags",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:labels",
            "value": [
                "bind",
                "db",
                "where"
            ]
        },
        "description": {
            "name": "description",
            "type": "java.lang.String",
            "value": "Hello,\nThere is a big problem in fetch* methods on Zend_Db_Table and update, delete methods on Zend_Db_Adapter_Abstract because the where conditions parameters are not binded, they are just escaped and replaced into the condition.  Here is an example:\n\n{code}\n$myTable = new Zend_Db_Table_MyTable();\n$result = $myTable->fetchAll(array('label = ?' => 'MyLabel'));\n{code}\n\nWhat is the query executed?\n{code:sql}\nSELECT MY_TABLE.* FROM MY_TABLE WHERE (label = 'MyLabel')\n{code}\n\nWich is wrong!!\nthe query should be  \n{code:sql}\nSELECT MY_TABLE.* FROM MY_TABLE WHERE (label = ?)\n{code}\nand MyLabel send as parameter.\n\nFor fetch methods the problem is in Db_Table_Abstract. The '?' is just replaced using the _whereExpr() function.\n\nFor update\/delete methods the problem is in Db_Adapter_Abstract.\n\nWhy this problem is so important? Because in Oracle we have a limited number of unique queries to execute and this bug will create many queries in db instead of only one."
        },
        "priority": {
            "name": "priority",
            "type": "com.atlassian.jira.issue.priority.Priority",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/priority\/6",
                "name": "N\/A"
            }
        },
        "duedate": {
            "name": "duedate",
            "type": "java.util.Date"
        },
        "customfield_10022": {
            "name": "Fix Version Priority",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:select"
        },
        "watcher": {
            "name": "watcher",
            "type": "watcher",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-6463\/watchers",
                "isWatching": false,
                "watchCount": 12
            }
        },
        "worklog": {
            "name": "worklog",
            "type": "worklog",
            "value": [

            ]
        },
        "status": {
            "name": "status",
            "type": "com.atlassian.jira.issue.status.Status",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/status\/1",
                "name": "Open"
            }
        },
        "labels": {
            "name": "labels",
            "type": "com.atlassian.jira.issue.label.Label",
            "value": [

            ]
        },
        "assignee": {
            "name": "assignee",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=ralph",
                "name": "ralph",
                "displayName": "Ralph Schindler",
                "active": true
            }
        },
        "links": {
            "name": "links",
            "type": "issuelinks",
            "value": [
                {
                    "issueKey": "ZF-5262",
                    "issue": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-5262",
                    "type": {
                        "name": "Related",
                        "direction": "OUTBOUND",
                        "description": "is related to"
                    }
                },
                {
                    "issueKey": "ZF-6517",
                    "issue": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-6517",
                    "type": {
                        "name": "Related",
                        "direction": "INBOUND",
                        "description": "is related to"
                    }
                }
            ]
        },
        "attachment": {
            "name": "attachment",
            "type": "attachment",
            "value": [

            ]
        },
        "sub-tasks": {
            "name": "sub-tasks",
            "type": "issuelinks",
            "value": [

            ]
        },
        "versions": {
            "name": "versions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/version\/10300",
                    "id": 10300,
                    "description": "Mini Release",
                    "name": "1.7.8",
                    "userReleaseDate": "30\/Mar\/09",
                    "archived": false,
                    "releaseDate": "2009-03-30",
                    "released": true
                }
            ]
        },
        "project": {
            "name": "project",
            "type": "com.atlassian.jira.project.Project",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/project\/ZF",
                "key": "ZF",
                "name": "Zend Framework",
                "roles": {

                }
            }
        },
        "components": {
            "name": "components",
            "type": "com.atlassian.jira.bc.project.component.ProjectComponent",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/component\/10012",
                    "id": 10012,
                    "name": "Zend_Db",
                    "description": "interfaces, APIs, and adapters for various third-party data stores",
                    "isAssigneeTypeValid": false
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/component\/10133",
                    "id": 10133,
                    "name": "Zend_Db_Table",
                    "description": "Lightweight OO interface to database tables and rowsets.",
                    "isAssigneeTypeValid": false
                }
            ]
        },
        "comment": {
            "name": "comment",
            "type": "com.atlassian.jira.issue.fields.CommentSystemField",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/30628",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=rhunwicks",
                        "name": "rhunwicks",
                        "displayName": "Roger Hunwicks",
                        "active": true
                    },
                    "body": "But as of ZF 1.8.0 Zend_Db_Table_Select does allow bind variables, and this is now the approach recommended by the documentation (see http:\/\/framework.zend.com\/manual\/en\/zend.db.table.html#zend.db.table.fetch-all):\n{code}\n$myTable = new Zend_Db_Table_MyTable();\n$result = $myTable->fetchAll($myTable->select()->where('label=:LABEL')\n                                         ->bind(array(':LABEL'=>'MyLabel')));\n{code}\n\nThis is the approach we are using with Oracle at the moment.\n\nHowever, I think than now that Zend_Db_Select supports bind variables, Zend_Db should be upgraded to take advantage of them. For example, in Zend_Db_Select::_where() replace:\n{code}\n        if ($value !== null) {\n            $condition = $this->_adapter->quoteInto($condition, $value, $type);\n        }\n{code}\nwith something like:\n{code}\n        if ($value !== null) {\n            if ($this->_adapter->supportsParameters('named')) {\n                $bind=$this->getBind();\n                $bindVariable = ':' . count($bind)+1;\n                if (isset($bind[$bindVariable]) then {\n                    require_once 'Zend\/Db\/Select\/Exception.php';\n                    throw new Zend_Db_Select_Exception(\"Invalid use of both named and positional parameters');\n                }\n                $condition = str_replace('?', $bindVariable, $condition);\n                $bind[$bindVariable] = $value;\n                $this->bind($bind);\n            } else {\n                $condition = $this->_adapter->quoteInto($condition, $value, $type);\n            }\n        }\n{code}\n\nThis would make Zend_Db_Table_Select (and Zend_Db_Table::fetchAll()) generate queries using bind parameters for the old - $result = $myTable->fetchAll(array('label = ?' => 'MyLabel')); - syntax too.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=rhunwicks",
                        "name": "rhunwicks",
                        "displayName": "Roger Hunwicks",
                        "active": true
                    },
                    "created": "2009-05-04T04:12:26.000+0000",
                    "updated": "2009-05-04T04:12:26.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/30629",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=byraul",
                        "name": "byraul",
                        "displayName": "Raul Simiciuc",
                        "active": true
                    },
                    "body": "For Db_Table this can be a solution, but what about Db_Adapter (update and delete function) where i need to bind parameters in condition?",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=byraul",
                        "name": "byraul",
                        "displayName": "Raul Simiciuc",
                        "active": true
                    },
                    "created": "2009-05-04T04:35:18.000+0000",
                    "updated": "2009-05-04T04:35:18.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/30630",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=rhunwicks",
                        "name": "rhunwicks",
                        "displayName": "Roger Hunwicks",
                        "active": true
                    },
                    "body": "Raul, I agree that Zend_Db_Table_Adapter_Abstract::_whereExpr() should be updated to allow bind parameters in the where clause.\n\nWe have been using bind parameters on Zend_Db_Table for a while (initially using our own subclass of Zend_Db_Table), but I haven't found the time to look at ..Adapter::update and ::delete yet.\n\nMy guess is that something similar to my suggestion for Zend_Db_Select::_where() above should work, although the ::update is using positional parameters if possible, so you would need to default to using those, instead of named parameters. You would also need to add $bind as an optional parameter to ::_whereExpr() so that it could update the bind array.\n",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=rhunwicks",
                        "name": "rhunwicks",
                        "displayName": "Roger Hunwicks",
                        "active": true
                    },
                    "created": "2009-05-04T04:51:32.000+0000",
                    "updated": "2009-05-04T04:51:32.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/31114",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=ralph",
                        "name": "ralph",
                        "displayName": "Ralph Schindler",
                        "active": true
                    },
                    "body": "It sounds like this is not a bug as its not preventing execution of queries.  So I can changing to feature request.\n\nAlso, I am mostly unclear on what is being asked to be done and exactly what is asked to be supported.  Can you please provide simple use case that demonstrate what is not possible and what you think *should* be possible?",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=ralph",
                        "name": "ralph",
                        "displayName": "Ralph Schindler",
                        "active": true
                    },
                    "created": "2009-05-18T12:38:29.000+0000",
                    "updated": "2009-05-18T12:38:29.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/32504",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=acid24",
                        "name": "acid24",
                        "displayName": "Stefan Alexandru",
                        "active": true
                    },
                    "body": "@Ralph Schindler\n\nIndeed the execution of queries is not affected. This is rather an optimization issue with some of the RDBMS (Oracle is one of them). So here is the problem. Let's say I have a Zend Db Table instance and I want to update a row in the table. I can do the following\n\n$callId = 5;\n$calls = new Demo_Db_Table_Calls();\n$where = $calls->getAdapter()->quoteInto( 'call_id = ?', $callId );\n$data = array( 'is_winner'  => 1 );\n$calls->update( $data, $where );\n\nThe query sent out to the database server is:\n\nUPDATE \"winning_call\".\"call_id\" SET \"is_winner\" = ? WHERE (call_id = '5');\n\nThe query sent out to the database server should be:\n\nUPDATE \"winning_call\".\"call_id\" SET \"is_winner\" = ? WHERE (call_id = ?)\n\nSending queries with hard coded literals like this:\n\nUPDATE \"winning_call\".\"call_id\" SET \"is_winner\" = ? WHERE (call_id = '5')\nUPDATE \"winning_call\".\"call_id\" SET \"is_winner\" = ? WHERE (call_id = '6')\nUPDATE \"winning_call\".\"call_id\" SET \"is_winner\" = ? WHERE (call_id = '7')\nUPDATE \"winning_call\".\"call_id\" SET \"is_winner\" = ? WHERE (call_id = '8')\n\nwill make the Oracle database server to think that it's dealing with unique queries (when in fact they are not, except the literal value) and create a new execution plan (which is costly in terms of resources) for each of this queries. The bottom line is the queries will take longer. If queries like:\n\nUPDATE \"winning_call\".\"call_id\" SET \"is_winner\" = ? WHERE (call_id = ?)\n\nwere to be sent out to the Oracle database server an execution plan will be created ONCE (the first time) and then subsequent queries will benefit from cached execution plan.\n\nIn large application where every second lost matters and speed is of the essence, this is a big problem.\n\nTo be fair I apparently googled a possible solution to this problem, but it involves editing an oracle configuration file and as we know not everybody is in control of their database server to be able to benefit from it. You can read about it here http:\/\/www.oracle.com\/technology\/oramag\/oracle\/06-jan\/o16asktom.html.\n\nI should mention that this problem is also present when making use of the Zend_Db_Abstract::delete() method and possibly others.\n\nThank you.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=acid24",
                        "name": "acid24",
                        "displayName": "Stefan Alexandru",
                        "active": true
                    },
                    "created": "2009-07-09T23:53:00.000+0000",
                    "updated": "2009-07-09T23:53:00.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/32511",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=byraul",
                        "name": "byraul",
                        "displayName": "Raul Simiciuc",
                        "active": true
                    },
                    "body": "This problem is still present in 1.8 and i don't think that this can be categorized as minor priority, because can be a big problem on large applications or even a blocker in applications with limited resources.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=byraul",
                        "name": "byraul",
                        "displayName": "Raul Simiciuc",
                        "active": true
                    },
                    "created": "2009-07-10T00:07:20.000+0000",
                    "updated": "2009-07-10T00:07:20.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/34090",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=geeni.in",
                        "name": "geeni.in",
                        "displayName": "asif ali",
                        "active": true
                    },
                    "body": "Any status on this issue. I am curious to know whether there is a possibility to use binding for update\/delete actions?\n\nI am using Zend 1.7.7 version with Oracle 10g\n\n\n-Asif",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=geeni.in",
                        "name": "geeni.in",
                        "displayName": "asif ali",
                        "active": true
                    },
                    "created": "2009-08-30T19:58:21.000+0000",
                    "updated": "2009-08-30T19:58:21.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/36922",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=xpertindia",
                        "name": "xpertindia",
                        "displayName": "Manuel",
                        "active": true
                    },
                    "body": "ZF 1.9.6 (Not Resolved)\r\n\r\nI use this - $myTableObject is Zend_Db_Table object\r\n\r\n$select1 = $myTableObject->select()->limit(10,0)->order('upper(name) asc')->where(\" name like :name \")->bind(array(':name'=>'5%'));\r\n$data = $myTableObject->fetchAll($select1);\r\n\r\n\r\n\r\nAnd it throws an exception -\r\n\r\nException information:\r\nMessage: Invalid bind-variable name ':name' \r\n\r\n\r\n#0 C:\\ZF-1.8.1\\library\\Zend\\Db\\Statement.php(114): Zend_Db_Statement->_parseParameters('SELECT `re_prop...')\r\n#1 C:\\ZF-1.8.1\\library\\Zend\\Db\\Adapter\\Mysqli.php(381): Zend_Db_Statement->__construct(Object(Zend_Db_Adapter_Mysqli), 'SELECT `re_prop...')\r\n#2 C:\\ZF-1.8.1\\library\\Zend\\Db\\Adapter\\Abstract.php(467): Zend_Db_Adapter_Mysqli->prepare('SELECT `re_prop...')\r\n#3 C:\\ZF-1.8.1\\library\\Zend\\Db\\Table\\Abstract.php(1509): Zend_Db_Adapter_Abstract->query(Object(Zend_Db_Table_Select))\r\n\r\nA dump of  Zend_Db_Select object $select1 shows that the information exists in the class\r\n\r\n[\"_bind:protected\"] => array(1) {\r\n    [\":name\"] => string(2) \"5%\"\r\n\r\n[\"_bind:protected\"] => array(1) {\r\n    [\":name\"] => string(2) \"5%\"\r\n  }\r\n\r\nI suppose this binding needs to be implemented to enable queries that are more optimized for Oracle as well as MySql. We are working with 100's of thousands of rows and is a bottle-neck. \r\n\r\n",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=xpertindia",
                        "name": "xpertindia",
                        "displayName": "Manuel",
                        "active": true
                    },
                    "created": "2009-12-14T14:54:20.000+0000",
                    "updated": "2009-12-14T14:54:20.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/38714",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=t.zander",
                        "name": "t.zander",
                        "displayName": "Tobias Zander",
                        "active": true
                    },
                    "body": "This is also a real problem when using the Sqlsrv Adapter with Microsoft SQL Server and trying to delete or update something querying with a unicode string.\r\n\r\nAs the _quote method of Zend_Db_Adapter_Sqlsrv quotes only in a non-unicode matter. (For Microsoft SQL Server it's required to prepend a \"N\" before a string to flag it as unicode)\r\nSo we must use prepared statements for every query to the server which could contain a unicode string.\r\n\r\nQuerying a japanese database row:\r\n\r\nCorrect:\r\n$myTableObject->select()->where('myColumn = ?', '\u6f22\u5b57');\r\n\r\nFails:\r\n$myDatabase->query('SELECT * FROM myTable WHERE myColumn = ' . $myDatabase->quote('\u6f22\u5b57'));\r\nAs it's transformed to SELECT * FROM myTable WHERE myColumn = '\u6f22\u5b57', which is not a Unicode string in Microsoft SQL Server way. Query should be SELECT * FROM myTable WHERE myColumn = N'\u6f22\u5b57'\r\n\r\nSo missing binding for updates and deletes it's not possible to manipulate these rows without losing the option to replace the adapter and database system.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=t.zander",
                        "name": "t.zander",
                        "displayName": "Tobias Zander",
                        "active": true
                    },
                    "created": "2010-02-24T06:13:02.000+0000",
                    "updated": "2010-02-24T06:13:02.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/45657",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=ploeger",
                        "name": "ploeger",
                        "displayName": "Dennis Ploeger",
                        "active": true
                    },
                    "body": "People, could you please update the documentation until this bug\/feature request is fixed? I just wanted to use bind variables with the DB_ADAPTER->delete method and found out (by interpreting the source and searching the issue tracker), that this problem exists.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=ploeger",
                        "name": "ploeger",
                        "displayName": "Dennis Ploeger",
                        "active": true
                    },
                    "created": "2011-03-29T08:04:56.000+0000",
                    "updated": "2011-03-29T08:04:56.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/48424",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=mirian01",
                        "name": "mirian01",
                        "displayName": "Miriam N",
                        "active": true
                    },
                    "body": "I also have problems with binding in wheres...\r\nand have 2 additional questions:\r\n1. Why there is a difference between the \"fetch\" behavior between the adapter and the db_Table?? the first \r\nsupports binding in \"fetch\" functions while the latter- does not.\r\n\r\n2. I see in the documentation that in the past there was a way to bind parameters to the where db select. see here: http:\/\/framework.zend.com\/manual\/en\/zend.db.table.html#zend.db.table.fetch-all):\r\nand here is a sample of the code example:\r\n$rows = $table->fetchAll(\r\n    $table->select()\r\n        ->where('bug_status = :status')\r\n        ->bind(array(':status'=>'NEW')\r\n        ->order('bug_id ASC')\r\n        ->limit(10, 0)\r\n    );\r\n But I don't want to use this old version....\r\n\r\n \r\n",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=mirian01",
                        "name": "mirian01",
                        "displayName": "Miriam N",
                        "active": true
                    },
                    "created": "2011-09-14T10:04:54.000+0000",
                    "updated": "2011-09-14T10:04:54.000+0000"
                }
            ]
        }
    },
    "transitions": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-6463\/transitions"
}