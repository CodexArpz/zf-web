{
    "expand": "html",
    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-3314",
    "key": "ZF-3314",
    "fields": {
        "summary": {
            "name": "summary",
            "type": "java.lang.String",
            "value": "Create consistences to test before invoking array_key_exists on Adapter.php Line 398"
        },
        "timetracking": {
            "name": "timetracking",
            "type": "com.atlassian.jira.issue.fields.TimeTrackingSystemField"
        },
        "issuetype": {
            "name": "issuetype",
            "type": "com.atlassian.jira.issue.issuetype.IssueType",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issueType\/4",
                "name": "Improvement",
                "subtask": false
            }
        },
        "votes": {
            "name": "votes",
            "type": "com.atlassian.jira.issue.fields.VotesSystemField",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-3314\/votes",
                "votes": 0,
                "hasVoted": false
            }
        },
        "security": {
            "name": "security",
            "type": "com.atlassian.jira.issue.security.IssueSecurityLevel"
        },
        "resolution": {
            "name": "resolution",
            "type": "com.atlassian.jira.issue.resolution.Resolution",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/resolution\/6",
                "name": "Not an Issue"
            }
        },
        "fixVersions": {
            "name": "fixVersions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [

            ]
        },
        "resolutiondate": {
            "name": "resolutiondate",
            "type": "java.util.Date",
            "value": "2008-05-23T00:11:22.000+0000"
        },
        "reporter": {
            "name": "reporter",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=rpaiva",
                "name": "rpaiva",
                "displayName": "Ramses Paiva",
                "active": true
            }
        },
        "created": {
            "name": "created",
            "type": "java.util.Date",
            "value": "2008-05-22T22:53:44.000+0000"
        },
        "updated": {
            "name": "updated",
            "type": "java.util.Date",
            "value": "2008-05-24T13:41:51.000+0000"
        },
        "customfield_10041": {
            "name": "Tags",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:labels"
        },
        "description": {
            "name": "description",
            "type": "java.lang.String",
            "value": "To avoid the warning below, it's needed to create consistences testing if the $messageId really is an integer or a string.\n\nWarning: array_key_exists(): The first argument should be either a string or an integer in \\Zend\\Translate\\Adapter.php on line 398\n\nMaybe using is_string() and is_int() PHP functions like below:\n\n{code}\n    \/**\n     * Translates the given string\n     * returns the translation\n     *\n     * @param  string              $messageId  Translation string\n     * @param  string|Zend_Locale  $locale     OPTIONAL Locale\/Language to use, identical with locale identifier,\n     *                                         see Zend_Locale for more information\n     * @return string\n     *\/\n    public function translate($messageId, $locale = null)\n    {\n        if ($locale === null) {\n            $locale = $this->_options['locale'];\n        }\n\n        if (!$locale = Zend_Locale::isLocale($locale)) {\n            \/\/ language does not exist, return original string\n            return $messageId;\n        }\n\n        if ((is_array($this->_translate) and array_key_exists($locale, $this->_translate)) and\n            (is_string($messageId) or is_int($messageId)) and\n            (is_array($this->_translate[$locale]) and array_key_exists($messageId, $this->_translate[$locale]))) {\n            \/\/ return original translation\n            return $this->_translate[$locale][$messageId];\n        } else if (strlen($locale) != 2) {\n            \/\/ faster than creating a new locale and separate the leading part\n            $locale = substr($locale, 0, -strlen(strrchr($locale, '_')));\n\n            if ((is_array($this->_translate) and array_key_exists($locale, $this->_translate)) and\n                (is_string($messageId) or is_int($messageId)) and\n            \t(is_array($this->_translate[$locale]) and array_key_exists($messageId, $this->_translate[$locale]))) {\n                \/\/ return regionless translation (en_US -> en)\n                return $this->_translate[$locale][$messageId];\n            }\n        }\n\n        \/\/ no translation found, return original\n        return $messageId;\n    }\n{code}"
        },
        "priority": {
            "name": "priority",
            "type": "com.atlassian.jira.issue.priority.Priority",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/priority\/3",
                "name": "Major"
            }
        },
        "duedate": {
            "name": "duedate",
            "type": "java.util.Date"
        },
        "customfield_10022": {
            "name": "Fix Version Priority",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:select"
        },
        "watcher": {
            "name": "watcher",
            "type": "watcher",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-3314\/watchers",
                "isWatching": false,
                "watchCount": 0
            }
        },
        "worklog": {
            "name": "worklog",
            "type": "worklog",
            "value": [

            ]
        },
        "status": {
            "name": "status",
            "type": "com.atlassian.jira.issue.status.Status",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/status\/5",
                "name": "Resolved"
            }
        },
        "labels": {
            "name": "labels",
            "type": "com.atlassian.jira.issue.label.Label",
            "value": [

            ]
        },
        "assignee": {
            "name": "assignee",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                "name": "thomas",
                "displayName": "Thomas Weidner",
                "active": true
            }
        },
        "links": {
            "name": "links",
            "type": "issuelinks",
            "value": [

            ]
        },
        "attachment": {
            "name": "attachment",
            "type": "attachment",
            "value": [

            ]
        },
        "sub-tasks": {
            "name": "sub-tasks",
            "type": "issuelinks",
            "value": [

            ]
        },
        "versions": {
            "name": "versions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/version\/10174",
                    "id": 10174,
                    "description": "Mini Release",
                    "name": "1.5.1",
                    "userReleaseDate": "25\/Mar\/08",
                    "archived": true,
                    "releaseDate": "2008-03-25",
                    "released": true
                }
            ]
        },
        "project": {
            "name": "project",
            "type": "com.atlassian.jira.project.Project",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/project\/ZF",
                "key": "ZF",
                "name": "Zend Framework",
                "roles": {

                }
            }
        },
        "components": {
            "name": "components",
            "type": "com.atlassian.jira.bc.project.component.ProjectComponent",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/component\/10099",
                    "id": 10099,
                    "name": "Zend_Translate",
                    "description": "Provides translation functionality, based on standards such as TMX and Gettext.",
                    "isAssigneeTypeValid": false
                }
            ]
        },
        "comment": {
            "name": "comment",
            "type": "com.atlassian.jira.issue.fields.CommentSystemField",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/21895",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=rpaiva",
                        "name": "rpaiva",
                        "displayName": "Ramses Paiva",
                        "active": true
                    },
                    "body": "My suggestion would implement the code like this:\n\n    \/**\n     * Translates the given string\n     * returns the translation\n     *\n     * @param  string              $messageId  Translation string\n     * @param  string|Zend_Locale  $locale     OPTIONAL Locale\/Language to use, identical with locale identifier,\n     *                                         see Zend_Locale for more information\n     * @return string\n     *\/\n    public function translate($messageId, $locale = null)\n    {\n        if ($locale === null) {\n            $locale = $this->_options['locale'];\n        }\n\n        if (!$locale = Zend_Locale::isLocale($locale)) {\n            \/\/ language does not exist, return original string\n            return $messageId;\n        }\n\n        if ((is_array($this->_translate) and array_key_exists($locale, $this->_translate)) and\n        \t(is_string($messageId) or is_int($messageId)) and\n            (is_array($this->_translate[$locale]) and array_key_exists($messageId, $this->_translate[$locale]))) {\n            \/\/ return original translation\n            return $this->_translate[$locale][$messageId];\n        } else if (strlen($locale) != 2) {\n            \/\/ faster than creating a new locale and separate the leading part\n            $locale = substr($locale, 0, -strlen(strrchr($locale, '_')));\n\n            if ((is_array($this->_translate) and array_key_exists($locale, $this->_translate)) and\n        \t\t(is_string($messageId) or is_int($messageId)) and\n            \t(is_array($this->_translate[$locale]) and array_key_exists($messageId, $this->_translate[$locale]))) {\n                \/\/ return regionless translation (en_US -> en)\n                return $this->_translate[$locale][$messageId];\n            }\n        }\n\n        \/\/ no translation found, return original\n        return $messageId;\n    }\n",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=rpaiva",
                        "name": "rpaiva",
                        "displayName": "Ramses Paiva",
                        "active": true
                    },
                    "created": "2008-05-22T22:56:42.000+0000",
                    "updated": "2008-05-22T22:56:42.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/21896",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "body": "This issue has already been fixed several months ago and was integrated within 1.5.2",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "created": "2008-05-23T00:11:21.000+0000",
                    "updated": "2008-05-23T00:11:21.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/21914",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=rpaiva",
                        "name": "rpaiva",
                        "displayName": "Ramses Paiva",
                        "active": true
                    },
                    "body": "Hi, Thomas! Yes, I just saw it. You're using is_array() to test the param's type.\nBut I still believe that would be better to use is_string() combined to is_int() to validate it, because you could receive other invalid types in the function that could be not an array type, like an object, for example.\nThen you fix the param only for the valid types to be received on the next tests.\nWhat about?\n\nHere, an example:\n\n{code}\nif (!(is_string($messageId) or !is_int($messageId))) {\n    return $messageId;\n}\n{code}",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=rpaiva",
                        "name": "rpaiva",
                        "displayName": "Ramses Paiva",
                        "active": true
                    },
                    "created": "2008-05-24T11:47:33.000+0000",
                    "updated": "2008-05-24T11:47:33.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/21915",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "body": "Still no issue...\n\nWhen you give an issue the __toString method will automatically be called.\nThis is better than involving several other checks.\n\nYou must have in mind that this is the base method for all translations and when you have a multilingual application you will have really much translations. And even with the two checks (which are useless in my eyes) you will still not have the expected output.\n\nWhen you give a object you will get exactly this object returned as it's not translatable. So you will have problems anyway.\n\nTranslation itself MUST NOT RETURN EXCEPTIONS !!!\nIf anything goes wrong we MUST return the input as output which is done in case of an object. You will get the object returned.\n\n",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "created": "2008-05-24T13:41:51.000+0000",
                    "updated": "2008-05-24T13:41:51.000+0000"
                }
            ]
        }
    },
    "transitions": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-3314\/transitions"
}