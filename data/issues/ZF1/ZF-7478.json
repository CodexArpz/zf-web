{
    "expand": "html",
    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-7478",
    "key": "ZF-7478",
    "fields": {
        "summary": {
            "name": "summary",
            "type": "java.lang.String",
            "value": "Issue when JSON encoding an dojo-ified view containing a datastore"
        },
        "timetracking": {
            "name": "timetracking",
            "type": "com.atlassian.jira.issue.fields.TimeTrackingSystemField"
        },
        "issuetype": {
            "name": "issuetype",
            "type": "com.atlassian.jira.issue.issuetype.IssueType",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issueType\/1",
                "name": "Bug",
                "subtask": false
            }
        },
        "votes": {
            "name": "votes",
            "type": "com.atlassian.jira.issue.fields.VotesSystemField",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-7478\/votes",
                "votes": 0,
                "hasVoted": false
            }
        },
        "security": {
            "name": "security",
            "type": "com.atlassian.jira.issue.security.IssueSecurityLevel"
        },
        "resolution": {
            "name": "resolution",
            "type": "com.atlassian.jira.issue.resolution.Resolution",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/resolution\/6",
                "name": "Not an Issue"
            }
        },
        "fixVersions": {
            "name": "fixVersions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [

            ]
        },
        "resolutiondate": {
            "name": "resolutiondate",
            "type": "java.util.Date",
            "value": "2009-08-05T04:33:11.000+0000"
        },
        "reporter": {
            "name": "reporter",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=jeanfabrice",
                "name": "jeanfabrice",
                "displayName": "Jean-Fabrice",
                "active": true
            }
        },
        "created": {
            "name": "created",
            "type": "java.util.Date",
            "value": "2009-08-04T16:04:02.000+0000"
        },
        "updated": {
            "name": "updated",
            "type": "java.util.Date",
            "value": "2009-08-05T04:33:11.000+0000"
        },
        "customfield_10041": {
            "name": "Tags",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:labels"
        },
        "description": {
            "name": "description",
            "type": "java.lang.String",
            "value": "I'm using this excellent tip  http:\/\/framework.zend.com\/wiki\/display\/ZFUSER\/Using+Zend_Dojo+dijit+elements+in+AJAX+requests.\nThis is the only and unique solution I found to render dojo enabled view retrieved using ajax request in a content pane.\n\nThe issue I have is that Zend_Json::encode of $this->layout()->content doesn't generate the javascript snippet of code for declaring a datastore when I'm using a filteringelect of combobox based on a datastore in this view.\n\nEg. :\nWhen rendering the following code the *normal* way  (i.e in a pure html layout) : \n{code}\n$form->addElement(\n    'ComboBox',\n    'foo',\n    array(\n        'label'       => 'ComboBox (datastore)',\n        'storeId'     => 'stateStore',\n        'storeType'   => 'dojo.data.ItemFileReadStore',\n        'storeParams' => array(\n            'url' => '\/js\/states.txt',\n        ),\n        'dijitParams' => array(\n            'searchAttr' => 'name',\n        ),\n    )\n);\n{code}\nZF automagically produced a few line of javascript to declare the datastore in the resulting page header.\n\nIf you decided to Zend_Json::encode the resulting html (i.e this->layout()->content), ZF doesn't generate nor output the javascript code needed to declare the datastore. ComboBox is then empty.\n\nHope this is clear. Let me know if you need further information.\n\nJean-Fabrice\n"
        },
        "priority": {
            "name": "priority",
            "type": "com.atlassian.jira.issue.priority.Priority",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/priority\/3",
                "name": "Major"
            }
        },
        "duedate": {
            "name": "duedate",
            "type": "java.util.Date"
        },
        "customfield_10022": {
            "name": "Fix Version Priority",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:select"
        },
        "watcher": {
            "name": "watcher",
            "type": "watcher",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-7478\/watchers",
                "isWatching": false,
                "watchCount": 1
            }
        },
        "worklog": {
            "name": "worklog",
            "type": "worklog",
            "value": [

            ]
        },
        "status": {
            "name": "status",
            "type": "com.atlassian.jira.issue.status.Status",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/status\/5",
                "name": "Resolved"
            }
        },
        "labels": {
            "name": "labels",
            "type": "com.atlassian.jira.issue.label.Label",
            "value": [

            ]
        },
        "assignee": {
            "name": "assignee",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                "name": "matthew",
                "displayName": "Matthew Weier O'Phinney",
                "active": true
            }
        },
        "links": {
            "name": "links",
            "type": "issuelinks",
            "value": [

            ]
        },
        "attachment": {
            "name": "attachment",
            "type": "attachment",
            "value": [

            ]
        },
        "sub-tasks": {
            "name": "sub-tasks",
            "type": "issuelinks",
            "value": [

            ]
        },
        "versions": {
            "name": "versions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/version\/10340",
                    "id": 10340,
                    "description": "Mini Release",
                    "name": "1.8.4",
                    "userReleaseDate": "23\/Jun\/09",
                    "archived": false,
                    "releaseDate": "2009-06-23",
                    "released": true
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/version\/10320",
                    "id": 10320,
                    "description": "Minor Release",
                    "name": "1.9.0",
                    "userReleaseDate": "31\/Jul\/09",
                    "archived": false,
                    "releaseDate": "2009-07-31",
                    "released": true
                }
            ]
        },
        "project": {
            "name": "project",
            "type": "com.atlassian.jira.project.Project",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/project\/ZF",
                "key": "ZF",
                "name": "Zend Framework",
                "roles": {

                }
            }
        },
        "components": {
            "name": "components",
            "type": "com.atlassian.jira.bc.project.component.ProjectComponent",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/component\/10311",
                    "id": 10311,
                    "name": "Zend_Dojo",
                    "description": "Dojo integration with Zend Framework",
                    "isAssigneeTypeValid": false
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/component\/10016",
                    "id": 10016,
                    "name": "Zend_Json",
                    "description": "serializes native PHP to JSON and decodes JSON to native PHP",
                    "isAssigneeTypeValid": false
                }
            ]
        },
        "comment": {
            "name": "comment",
            "type": "com.atlassian.jira.issue.fields.CommentSystemField",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/33205",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=jeanfabrice",
                        "name": "jeanfabrice",
                        "displayName": "Jean-Fabrice",
                        "active": true
                    },
                    "body": "I went deeper into this issue and found that the tip I'm using lacks the encoding of the javascript statements (eg. : using $this->dojo()->getJavascript() in the ajax layout). So, in ZF 1.8.3, adding a few lines to deal with the javascript statement in both ajax layout and in the load callback function is OK.\n\nBut in ZF 1.8.4 and over, Zend_Dojo_View_Helper_ComboBox::_renderStore() is now calling $this->dojo->prependOnLoad($js) (line 151) instead of $this->dojo()->addJavascript($js), according to http:\/\/framework.zend.com\/issues\/browse\/ZF-6148. \n\ndojo()->getJavascript (ZF 1.8.4 and over) is now returning an array of anonymous function when it was returning simple javascript code lines in ZF 1.8.3 (easy to deals with). These anonymous function first declare the store and the register the store against their digits\n\nQuestions are : \n1\/ How can  I deal with this array of anonymous functions when I retrieve and display a page using xhr ? AddOnLoad functions are useless in such case.\n2\/ Could it be an option defining where to insert the javascript : prependonload when using full rendering html, and\/or something else when we want javascript code to be inserted directly in the flow (for ajax request)\n\nJF",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=jeanfabrice",
                        "name": "jeanfabrice",
                        "displayName": "Jean-Fabrice",
                        "active": true
                    },
                    "created": "2009-08-05T02:11:19.000+0000",
                    "updated": "2009-08-05T02:11:19.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/33212",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                        "name": "matthew",
                        "displayName": "Matthew Weier O'Phinney",
                        "active": true
                    },
                    "body": "When using XHR, the dojo() view helper is not and should not be rendered; it should only be rendered during the initial page call.\n\nHowever, as you note, this leads to issues when you return Dojo content via XHR, as you're now missing information.\n\nThe way to handle this requires work, and it's unfortunately not something that ZF can do for you. The way I handle it is as follows:\n* First, identify any content that will be returned via XHR, and make sure you have requireModule() calls for any Dijits you use. Place those into your bootstrap where you configure Dojo, or, better yet, into a layer file (so that you can modify only that, and not your PHP code). This ensures your Dijits will be present.\n* Second, return declarative markup in your XHR payloads, and then use the Dojo parser to parse it, which will initialize the appropriate objects. This means you'll need to call dojo.parser.parse() on a block surrounding the content you inject. So, if you inject your content into a <div> with id=\"foo\", in your XHR call, after placing the new content, you would call \"dojo.parser.parse('foo')\". (To turn on declarative markup, call Zend_Dojo_View_Helper_Dojo::setUseDeclarative(true) in the view script returning the XHR payload.) This works for tings like ComboBoxes and FilteringSelects as well, as the dojo.data store will be created using declarative markup.\n\nDojo also provides ways to attach code to events using declarative markup. You can typically include blocks like this:\n{code}\n<script type=\"dojo\/method\" event=\"onSubmit\" args=\"e\">\ne.preventDefault();\nif (!this.isValid()) {\n    console.log(\"Invalid form\");\n}\n<\/script>\n{code}\n(Note, the above may be incorrect or invalid scripting, but the idea is sane.) If you include markup such as this via a form decorator, you can then provide custom events to forms returned via XHR.\n\nAnother technique is to return JSON that includes things such as your form, but also your data stores. In your XHR handler, you would then parse through the JSON and do what you need to do -- such as triggering events, using metadata to determine where to place content, etc.\n\nThese are things that require a collaboration between client and server, and as such, ZF can't really do much more. If you need help with the above techniques, ping me on one of the mailing lists or directly via email; reference this issue when you do.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                        "name": "matthew",
                        "displayName": "Matthew Weier O'Phinney",
                        "active": true
                    },
                    "created": "2009-08-05T04:32:57.000+0000",
                    "updated": "2009-08-05T04:32:57.000+0000"
                }
            ]
        }
    },
    "transitions": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-7478\/transitions"
}