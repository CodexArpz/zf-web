{
    "expand": "html",
    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-2468",
    "key": "ZF-2468",
    "fields": {
        "summary": {
            "name": "summary",
            "type": "java.lang.String",
            "value": "using own frontends and\/or backends"
        },
        "timetracking": {
            "name": "timetracking",
            "type": "com.atlassian.jira.issue.fields.TimeTrackingSystemField"
        },
        "issuetype": {
            "name": "issuetype",
            "type": "com.atlassian.jira.issue.issuetype.IssueType",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issueType\/4",
                "name": "Improvement",
                "subtask": false
            }
        },
        "votes": {
            "name": "votes",
            "type": "com.atlassian.jira.issue.fields.VotesSystemField",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-2468\/votes",
                "votes": 2,
                "hasVoted": false
            }
        },
        "security": {
            "name": "security",
            "type": "com.atlassian.jira.issue.security.IssueSecurityLevel"
        },
        "resolution": {
            "name": "resolution",
            "type": "com.atlassian.jira.issue.resolution.Resolution",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/resolution\/1",
                "name": "Fixed"
            }
        },
        "fixVersions": {
            "name": "fixVersions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/version\/10240",
                    "id": 10240,
                    "description": "Minor Release",
                    "name": "1.6.0",
                    "userReleaseDate": "02\/Sep\/08",
                    "archived": false,
                    "releaseDate": "2008-09-02",
                    "released": true
                }
            ]
        },
        "resolutiondate": {
            "name": "resolutiondate",
            "type": "java.util.Date",
            "value": "2008-04-04T17:30:10.000+0000"
        },
        "reporter": {
            "name": "reporter",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=mben",
                "name": "mben",
                "displayName": "Marc Bennewitz (GIATA mbH)",
                "active": true
            }
        },
        "created": {
            "name": "created",
            "type": "java.util.Date",
            "value": "2008-01-23T10:15:08.000+0000"
        },
        "updated": {
            "name": "updated",
            "type": "java.util.Date",
            "value": "2008-09-02T10:39:37.000+0000"
        },
        "customfield_10041": {
            "name": "Tags",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:labels"
        },
        "description": {
            "name": "description",
            "type": "java.lang.String",
            "value": "Now the way to use own frontend or backend objects this objects must named Zend_Cache_[Frontend|Backend], because the static arrays in Zend_Cache only contain the last class name (e.g 'File' for Zend_Cache_[Frontend|Backend]_File )\n\nI think it is better to store the last class name as lower case and the full class name in this arrays like:\n{code}\npublic static $standardFrontends = array(\n    'core' => 'Zend_Cache_Core',\n    'output' => 'Zend_Cache_Frontend_Output',\n    'class' => 'Zend_Cache_Frontend_Class',\n    \/\/ ...\n);\n{code}\nand the same for the backend array.\n\nThen in the method Zend_Cache::factory you can handle it as follow:\n{code}\n$frontendLower = strtolower($frontend);\nif (isset(self::$standardFrontends[$frontendLower])) {\n    $frontendClass = self::$standardFrontends[$frontendLower];\n} else {\n    $frontendClass = self::_normalizeName($frontend);\n}\n\/\/ self::$standardFrontends is public and can therefore be change from the outside\nZend_Loader::loadClass($frontendClass);\n$frontendObject = new $frontendClass($frontendOptions);\n\n$backendLower  = strtolower($backend);\nif (isset(self::$standardBackends[$backendLower])) {\n    $backendClass = self::$standardBackends[$backendLower];\n} else {\n    $backendClass = self::_normalizeName($backend);\n}\n\/\/ self::$standardBackends is public and can therefore be change from the outside\nZend_Loader::loadClass($backendClass);\n$backendObject = new $backendClass($backendOptions);\n\/\/ ...\n{code}\nI use the self::$standard* arrays because on the self::$available* arrays is the comment \"Only for backward compatibily (will be removed in 1.2.0)\"\n\n\n\nNow you can use the factory methode as follow:\n{code}\nZend_Cache::factory('Core', 'File');\n\/\/ or\nZend_Cache::factory('My_Own_Frontend', 'My_Own_Backend');\n\/\/ or\nZend_Cache::$standardFrontends['Core'] = 'My_Own_Frontend';\nZend_Cache::$standardBackends['File'] = 'My_Own_Backend';\nZend_Cache::factory('core', 'file');\n{code}\n"
        },
        "priority": {
            "name": "priority",
            "type": "com.atlassian.jira.issue.priority.Priority",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/priority\/3",
                "name": "Major"
            }
        },
        "duedate": {
            "name": "duedate",
            "type": "java.util.Date"
        },
        "customfield_10022": {
            "name": "Fix Version Priority",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:select"
        },
        "watcher": {
            "name": "watcher",
            "type": "watcher",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-2468\/watchers",
                "isWatching": false,
                "watchCount": 2
            }
        },
        "worklog": {
            "name": "worklog",
            "type": "worklog",
            "value": [

            ]
        },
        "status": {
            "name": "status",
            "type": "com.atlassian.jira.issue.status.Status",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/status\/5",
                "name": "Resolved"
            }
        },
        "labels": {
            "name": "labels",
            "type": "com.atlassian.jira.issue.label.Label",
            "value": [

            ]
        },
        "assignee": {
            "name": "assignee",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=fab",
                "name": "fab",
                "displayName": "Fabien MARTY",
                "active": true
            }
        },
        "links": {
            "name": "links",
            "type": "issuelinks",
            "value": [
                {
                    "issueKey": "ZF-2705",
                    "issue": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-2705",
                    "type": {
                        "name": "Dependency",
                        "direction": "INBOUND",
                        "description": "is dependecy of"
                    }
                }
            ]
        },
        "attachment": {
            "name": "attachment",
            "type": "attachment",
            "value": [

            ]
        },
        "sub-tasks": {
            "name": "sub-tasks",
            "type": "issuelinks",
            "value": [

            ]
        },
        "versions": {
            "name": "versions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/version\/10160",
                    "id": 10160,
                    "description": "Major Release",
                    "name": "Next Major Release",
                    "archived": false,
                    "released": false
                }
            ]
        },
        "project": {
            "name": "project",
            "type": "com.atlassian.jira.project.Project",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/project\/ZF",
                "key": "ZF",
                "name": "Zend Framework",
                "roles": {

                }
            }
        },
        "components": {
            "name": "components",
            "type": "com.atlassian.jira.bc.project.component.ProjectComponent",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/component\/10028",
                    "id": 10028,
                    "name": "Zend_Cache",
                    "isAssigneeTypeValid": false
                }
            ]
        },
        "comment": {
            "name": "comment",
            "type": "com.atlassian.jira.issue.fields.CommentSystemField",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/20017",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=vdelau",
                        "name": "vdelau",
                        "displayName": "Vincent de Lau",
                        "active": true
                    },
                    "body": "I realy like the array approach for determining standard classes in the factory, but a cleaner solution to modify the array  might be to add:\n{code}\npublic static function addFrontendClass($name, $classname);\npublic static function addBackendClass($name, $classname);\n{code}\n\nAnother approach might be to move the classname resolution to seperate protected functions, so that subclassing Zend_Cache is easier.\n\n\n",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=vdelau",
                        "name": "vdelau",
                        "displayName": "Vincent de Lau",
                        "active": true
                    },
                    "created": "2008-03-20T04:47:56.000+0000",
                    "updated": "2008-03-20T04:47:56.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/20030",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=mben",
                        "name": "mben",
                        "displayName": "Marc Bennewitz (GIATA mbH)",
                        "active": true
                    },
                    "body": "this sounds good",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=mben",
                        "name": "mben",
                        "displayName": "Marc Bennewitz (GIATA mbH)",
                        "active": true
                    },
                    "created": "2008-03-20T17:59:27.000+0000",
                    "updated": "2008-03-20T17:59:27.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/20698",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=fab",
                        "name": "fab",
                        "displayName": "Fabien MARTY",
                        "active": true
                    },
                    "body": "I just commited something in trunk SVN. \n\nCan you have a look at it ?\n\n{code} \n    \/**\n     * Factory\n     *\n     * @param string $frontend        frontend name\n     * @param string $backend         backend name\n     * @param array  $frontendOptions associative array of options for the corresponding frontend constructor\n     * @param array  $backendOptions  associative array of options for the corresponding backend constructor\n     * @param boolean $customFrontendNaming if true, the frontend argument is used as a complete class name ; if false, the frontend argument is used as the end of \"Zend_Cache_Frontend_[...]\" class name\n     * @param boolean $customBackendNaming if true, the backend argument is used as a complete class name ; if false, the backend argument is used as the end of \"Zend_Cache_Backend_[...]\" class name\n     * @param boolean $autoload if true, there will no require_once for backend and frontend (usefull only for custom backends\/frontends)\n     * @throws Zend_Cache_Exception\n     * @return Zend_Cache_Frontend\n     *\/\n{code}\n\nSo, to use a completly custom frontend, you can use something like :\n\nZend_Cache::factory('MyCustomFrontend','MyCustomBackend',array(...),array(...), true, true, false);\n(without autoload)\n\nZend_Cache will do a require_once \"My\/Custom\/Frontend.php\" (the include_path must be ok for that)\n\nor :\n\nZend_Cache::factory('MyCustomFrontend','MyCustomBackend',array(...),array(...), true, true, true);\n(with autoload)\n\nZend_Cache won't do any require_once at all (but the autoload has to work for MyCustomFrontend)\n\n\n",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=fab",
                        "name": "fab",
                        "displayName": "Fabien MARTY",
                        "active": true
                    },
                    "created": "2008-04-04T17:29:39.000+0000",
                    "updated": "2008-04-04T17:29:39.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/20709",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=vdelau",
                        "name": "vdelau",
                        "displayName": "Vincent de Lau",
                        "active": true
                    },
                    "body": "In my current project, i had to have my dummy backend. I subclassed Zend_Cache like this:\n\n{code}\n<?php\n\n\/** FIXME: this is a modified version of Zend_Cache, because ZF doesn't have a\n *  clean way to add custom front\/backends.\n *  See http:\/\/framework.zend.com\/issues\/browse\/ZF-2468\n *\/\n\nabstract class My_Cache extends Zend_Cache\n{\n    \/\/ FIXME: these arrays could be pre-loaded, but that would break inheritance\n    protected static $frontendClasses = null;\n    protected static $backendClasses = null;\n\n    protected static function _loadDefaultClasses() {\n        if(!is_array(self::$frontendClasses)) {\n            foreach(self::$standardFrontends as $name) {\n                self::addFrontendClass($name, 'Zend_Cache_' . ($name != 'Core' ? 'Frontend_' : '') . $name);\n            }\n        }\n        if(!is_array(self::$backendClasses)) {\n            foreach(self::$standardBackends as $name) {\n                self::addBackendClass($name, 'Zend_Cache_Backend_' . $name);\n            }\n        }\n    }\n    protected static function _normalizeKey($name) {\n        return strtolower(str_replace(array(' ','-','_','.'),'',$name));\n    }\n    public static function addFrontendClass($name, $classname) {\n        self::$frontendClasses[self::_normalizeKey($name)] = $classname;\n    }\n    public static function addBackendClass($name, $classname) {\n        self::$backendClasses[self::_normalizeKey($name)] = $classname;\n    }\n    \/**\n     * Factory\n     *\n     * @param string $frontend frontend name\n     * @param string $backend backend name\n     * @param array $frontendOptions associative array of options for the corresponding frontend constructor\n     * @param array $backendOptions associative array of options for the corresponding backend constructor\n     *\/\n    public static function factory($frontend, $backend, $frontendOptions = array(), $backendOptions = array())\n    {\n        \/\/ FIXME: these arrays could be pre-loaded, but that would break inheritance\n        self::_loadDefaultClasses();\n\n        \/\/ working on the frontend\n        if (array_key_exists(self::_normalizeKey($frontend), self::$frontendClasses)) {\n            \/\/ we use a standard frontend\n            $frontendClass = self::$frontendClasses[self::_normalizeKey($frontend)];\n        } else {\n            \/\/ we use a custom frontend\n            $frontendClass = $frontend;\n        }\n        Zend_Loader::loadClass($frontendClass);\n\n        \/\/ working on the backend\n        if (array_key_exists(self::_normalizeKey($backend), self::$backendClasses)) {\n            \/\/ we use a standard frontend\n            $backendClass = self::$backendClasses[self::_normalizeKey($backend)];\n        } else {\n            \/\/ we use a custom frontend\n            $backendClass = $backend;\n        }\n        Zend_Loader::loadClass($backendClass);\n\n        \/\/ Making objects\n        $frontendObject = new $frontendClass($frontendOptions);\n        $backendObject = new $backendClass($backendOptions);\n        $frontendObject->setBackend($backendObject);\n        return $frontendObject;\n    }\n}\n{code}\n\nOf course I used the occasion to use the Zend_Loader instead of require, although I also use an autoloader. I would like to see this add* interface and only a fifth argument on the factory to enable autoloading. Default classed should be in the assoc. array, instead of using this workaround. This makes loading custom classes transparent and keeps the argumentlist clean.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=vdelau",
                        "name": "vdelau",
                        "displayName": "Vincent de Lau",
                        "active": true
                    },
                    "created": "2008-04-05T04:04:24.000+0000",
                    "updated": "2008-04-05T04:04:24.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/24170",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=wil",
                        "name": "wil",
                        "displayName": "Wil Sinclair",
                        "active": true
                    },
                    "body": "Updating for the 1.6.0 release.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=wil",
                        "name": "wil",
                        "displayName": "Wil Sinclair",
                        "active": true
                    },
                    "created": "2008-09-02T10:39:37.000+0000",
                    "updated": "2008-09-02T10:39:37.000+0000"
                }
            ]
        }
    },
    "transitions": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-2468\/transitions"
}