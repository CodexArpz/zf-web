{
    "expand": "html",
    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-4352",
    "key": "ZF-4352",
    "fields": {
        "summary": {
            "name": "summary",
            "type": "java.lang.String",
            "value": "Zend_Validate_Alpha \/ Zend_Validate_Alnum CAST to string"
        },
        "timetracking": {
            "name": "timetracking",
            "type": "com.atlassian.jira.issue.fields.TimeTrackingSystemField",
            "value": {
                "timeoriginalestimate": 30,
                "timeestimate": 30
            }
        },
        "issuetype": {
            "name": "issuetype",
            "type": "com.atlassian.jira.issue.issuetype.IssueType",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issueType\/1",
                "name": "Bug",
                "subtask": false
            }
        },
        "votes": {
            "name": "votes",
            "type": "com.atlassian.jira.issue.fields.VotesSystemField",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-4352\/votes",
                "votes": 0,
                "hasVoted": false
            }
        },
        "security": {
            "name": "security",
            "type": "com.atlassian.jira.issue.security.IssueSecurityLevel"
        },
        "resolution": {
            "name": "resolution",
            "type": "com.atlassian.jira.issue.resolution.Resolution",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/resolution\/1",
                "name": "Fixed"
            }
        },
        "fixVersions": {
            "name": "fixVersions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/version\/10320",
                    "id": 10320,
                    "description": "Minor Release",
                    "name": "1.9.0",
                    "userReleaseDate": "31\/Jul\/09",
                    "archived": false,
                    "releaseDate": "2009-07-31",
                    "released": true
                }
            ]
        },
        "resolutiondate": {
            "name": "resolutiondate",
            "type": "java.util.Date",
            "value": "2009-06-08T13:44:47.000+0000"
        },
        "reporter": {
            "name": "reporter",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=cvogt",
                "name": "cvogt",
                "displayName": "Christopher Vogt",
                "active": true
            }
        },
        "created": {
            "name": "created",
            "type": "java.util.Date",
            "value": "2008-09-22T12:26:20.000+0000"
        },
        "updated": {
            "name": "updated",
            "type": "java.util.Date",
            "value": "2009-06-08T13:44:47.000+0000"
        },
        "customfield_10041": {
            "name": "Tags",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:labels"
        },
        "description": {
            "name": "description",
            "type": "java.lang.String",
            "value": "{{$v = new Zend_Validate_Alpha();\necho $v->isValid( array('%&$!!') ) ? 'valid' : 'invalid';}}\n--------------------------\nexpected result:\ninvalid\n--------------------------\nactual result:\nvalid\n--------------------------\n\nThe reason is, that _Alpha and _Alnum cast the validation target to string in the line {{$valueString = (string) $value;}}. I think a validator should never cast the value it validates without examining the type. It should rather check if the value has an expected type. So the line {{$valueString = (string) $value;}} should be replaced by something like\n{{ if( is_int($value) ){\n$valueString = (string) $value;\n} elseif( is_string($value) ) {\n$valueString = $value;\n} else {\nreturn false;\n}\n}}"
        },
        "priority": {
            "name": "priority",
            "type": "com.atlassian.jira.issue.priority.Priority",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/priority\/3",
                "name": "Major"
            }
        },
        "duedate": {
            "name": "duedate",
            "type": "java.util.Date"
        },
        "customfield_10022": {
            "name": "Fix Version Priority",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:select"
        },
        "watcher": {
            "name": "watcher",
            "type": "watcher",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-4352\/watchers",
                "isWatching": false,
                "watchCount": 2
            }
        },
        "worklog": {
            "name": "worklog",
            "type": "worklog",
            "value": [

            ]
        },
        "status": {
            "name": "status",
            "type": "com.atlassian.jira.issue.status.Status",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/status\/5",
                "name": "Resolved"
            }
        },
        "labels": {
            "name": "labels",
            "type": "com.atlassian.jira.issue.label.Label",
            "value": [

            ]
        },
        "assignee": {
            "name": "assignee",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                "name": "thomas",
                "displayName": "Thomas Weidner",
                "active": true
            }
        },
        "links": {
            "name": "links",
            "type": "issuelinks",
            "value": [

            ]
        },
        "attachment": {
            "name": "attachment",
            "type": "attachment",
            "value": [

            ]
        },
        "sub-tasks": {
            "name": "sub-tasks",
            "type": "issuelinks",
            "value": [

            ]
        },
        "versions": {
            "name": "versions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/version\/10201",
                    "id": 10201,
                    "description": "Mini Release",
                    "name": "1.6.1",
                    "userReleaseDate": "15\/Sep\/08",
                    "archived": false,
                    "releaseDate": "2008-09-15",
                    "released": true
                }
            ]
        },
        "project": {
            "name": "project",
            "type": "com.atlassian.jira.project.Project",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/project\/ZF",
                "key": "ZF",
                "name": "Zend Framework",
                "roles": {

                }
            }
        },
        "components": {
            "name": "components",
            "type": "com.atlassian.jira.bc.project.component.ProjectComponent",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/component\/10013",
                    "id": 10013,
                    "name": "Zend_Filter",
                    "description": "methods for filtering data",
                    "isAssigneeTypeValid": false
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/component\/10140",
                    "id": 10140,
                    "name": "Zend_Validate",
                    "isAssigneeTypeValid": false
                }
            ]
        },
        "comment": {
            "name": "comment",
            "type": "com.atlassian.jira.issue.fields.CommentSystemField",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/24830",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=yoshida@zend.co.jp",
                        "name": "yoshida@zend.co.jp",
                        "displayName": "old of Satoru Yoshida",
                        "active": true
                    },
                    "body": "I think fear of  inconsistency between these modules and another Zend_Validate_* (and Zend_Filter_*) modules if we carry out as this report.\n\nFor example , Zend_Validate_Digits also returns 'invalid' against array.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=yoshida@zend.co.jp",
                        "name": "yoshida@zend.co.jp",
                        "displayName": "old of Satoru Yoshida",
                        "active": true
                    },
                    "created": "2008-10-07T00:28:49.000+0000",
                    "updated": "2008-10-07T00:28:49.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/24833",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=yoshida@zend.co.jp",
                        "name": "yoshida@zend.co.jp",
                        "displayName": "old of Satoru Yoshida",
                        "active": true
                    },
                    "body": "Sorry, I mistook to write.\n\nCorrect  : Zend_Validate_Digits also returns 'valid' against array.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=yoshida@zend.co.jp",
                        "name": "yoshida@zend.co.jp",
                        "displayName": "old of Satoru Yoshida",
                        "active": true
                    },
                    "created": "2008-10-07T00:32:12.000+0000",
                    "updated": "2008-10-07T00:32:12.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/24860",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=cvogt",
                        "name": "cvogt",
                        "displayName": "Christopher Vogt",
                        "active": true
                    },
                    "body": "The current Zend_Validate_Alpha \/ Zend_Validate_Alnum behavior is clearly broken in my eyes. People use these classes to validate their input and they expect that Alpha or Alnum strings to be valid. Arrays are neither neither strings, nor does Alpha or Alnum make sense for them.\n\nIf you fear inconsistency this means the bug could be in other Classes as well. However this does not mean that not fixing it makes the situation any better. It should be fixed in every broken class then. Besides, I cannot replicate Zend_Validate_Digits validating an array as valid.\n\nFixing this bug does not break backwards compatibility in my eyes. I don't see any reason for not fixing it and I strongly oppose against \"Won't Fix\". ",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=cvogt",
                        "name": "cvogt",
                        "displayName": "Christopher Vogt",
                        "active": true
                    },
                    "created": "2008-10-08T05:06:24.000+0000",
                    "updated": "2008-10-08T05:06:24.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/24920",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=yoshida@zend.co.jp",
                        "name": "yoshida@zend.co.jp",
                        "displayName": "old of Satoru Yoshida",
                        "active": true
                    },
                    "body": "Hi, Christopher.\nI reopen this issue for you.\n\nI will be happy if more useful idea will come on there.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=yoshida@zend.co.jp",
                        "name": "yoshida@zend.co.jp",
                        "displayName": "old of Satoru Yoshida",
                        "active": true
                    },
                    "created": "2008-10-08T23:00:32.000+0000",
                    "updated": "2008-10-08T23:00:32.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/24937",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=cvogt",
                        "name": "cvogt",
                        "displayName": "Christopher Vogt",
                        "active": true
                    },
                    "body": "Thanks :).\n\nI would take a white-listing approach for types and return false for all types not white-listed. The question is what should be on the white-list.\n\nstring: yes\nobject: rather yes, maybe only if it implements __toString ?\ninteger: yes, but only for Alnum\nboolean: maybe yes for backwards-compatibility?\nNULL: maybe yes for backwards-compatibility?\nfloat: maybe yes for Alnum for backwards-compatibility? (because: (string) 1.0 === \"1\")\narray: no\nresource: no\n\nThe implementation could be like the following at the beginning of the isValid method:\n\nif( !is_string($value) && !is_int($value) && !etc. ){\n    return false;\n}",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=cvogt",
                        "name": "cvogt",
                        "displayName": "Christopher Vogt",
                        "active": true
                    },
                    "created": "2008-10-09T03:40:16.000+0000",
                    "updated": "2008-10-09T03:40:16.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/29933",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=budcha",
                        "name": "budcha",
                        "displayName": "Nils Bujny",
                        "active": true
                    },
                    "body": "Hi,\nstumbled today into this \"bug\".\n\nUsed Zend_Validate not for user input from Forms etc, but for field validation before its saved in the Storage Engine. My UnitTest failed, where i expected failure from the Zend_Alnum class, because the validation was successful. \"The Coder\" can (shouldnt, but ...) write something like this:\n<code>\n$wrongData = array();\n$role = new Role();\n$role->setName($wrongData);\n<\/code>\n\nThrough the (string) cast the empty Array becomes \"Array\", even the empty string check is in this case useless ...\n\nMy Solution, for compatibility would be to make a static flag if my projects wants to use STRICT validation. (disable cast if STRICT). (And this for all Zend_Validate_* Classes), Or put this flag in the Zend_Validate constructor.\n\n<code>\n$valueString = Zend_Validate::STRICT ? $value : (string) $value;\n<\/code>\nor\n<code>\n$valueString = $this->validateStrict ? $value : (string) $value;\n<\/code>\n\nsomething like this.\nmy best regards.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=budcha",
                        "name": "budcha",
                        "displayName": "Nils Bujny",
                        "active": true
                    },
                    "created": "2009-04-04T10:26:55.000+0000",
                    "updated": "2009-04-04T10:26:55.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/31678",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "body": "Fixed with r15951.\nPlease test this fix hard to prevent possible problems for the next release.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "created": "2009-06-08T13:44:47.000+0000",
                    "updated": "2009-06-08T13:44:47.000+0000"
                }
            ]
        }
    },
    "transitions": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-4352\/transitions"
}