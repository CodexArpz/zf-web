{
    "expand": "html",
    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-190",
    "key": "ZF-190",
    "fields": {
        "summary": {
            "name": "summary",
            "type": "java.lang.String",
            "value": "Make Zend_Db_Rowset, Zend_Db_Row serialisable"
        },
        "timetracking": {
            "name": "timetracking",
            "type": "com.atlassian.jira.issue.fields.TimeTrackingSystemField"
        },
        "issuetype": {
            "name": "issuetype",
            "type": "com.atlassian.jira.issue.issuetype.IssueType",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/issueType\/4",
                "name": "Improvement",
                "subtask": false
            }
        },
        "votes": {
            "name": "votes",
            "type": "com.atlassian.jira.issue.fields.VotesSystemField",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-190\/votes",
                "votes": 0,
                "hasVoted": false
            }
        },
        "security": {
            "name": "security",
            "type": "com.atlassian.jira.issue.security.IssueSecurityLevel"
        },
        "resolution": {
            "name": "resolution",
            "type": "com.atlassian.jira.issue.resolution.Resolution",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/resolution\/1",
                "name": "Fixed"
            }
        },
        "fixVersions": {
            "name": "fixVersions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/version\/10022",
                    "id": 10022,
                    "description": "Beta Release; all components feature complete for 1.0",
                    "name": "0.9.0",
                    "userReleaseDate": "17\/Mar\/07",
                    "archived": true,
                    "releaseDate": "2007-03-17",
                    "released": true
                }
            ]
        },
        "resolutiondate": {
            "name": "resolutiondate",
            "type": "java.util.Date",
            "value": "2007-03-16T00:09:24.000+0000"
        },
        "reporter": {
            "name": "reporter",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=peptolab",
                "name": "peptolab",
                "displayName": "Simon Mundy",
                "active": true
            }
        },
        "created": {
            "name": "created",
            "type": "java.util.Date",
            "value": "2006-07-03T19:30:48.000+0000"
        },
        "updated": {
            "name": "updated",
            "type": "java.util.Date",
            "value": "2007-07-05T14:43:12.000+0000"
        },
        "customfield_10041": {
            "name": "Tags",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:labels"
        },
        "description": {
            "name": "description",
            "type": "java.lang.String",
            "value": "Currently a Db_Table (and consequently Rows and Rowsets) store a copy of a Zend_Db adapter in each and every instance, which IMO is not ideal. It would sometimes make sense to serialise a Table or Row (storing a model within a session,for example) but currently this isn't possible as a PDO connection cannot be serialised. There is also the issue of duplication and (less significantly) memory usage for each instance.\n\nInstead, I would like to propose some form of named Db Adapter storage, so that each Model (= Zend_Db_Table) can simply call a static method to retrieve a registered instance of a Zend_Db_Adapter.\n\nE.g.\n\n{code}\n$db = Zend_Db::factory(\n\t$config->db->connection,\n\t$config->db->asArray());\n$db->setFetchMode(Zend_Db::FETCH_OBJ);\nZend_Db::register('myConnection1', $db);\n{code}\n\nand then when a new Zend_Table is instantiated, it can be assigned a named connection (e.g. 'myConnection1') or simply default to the first registered connection.\n\nE.g.\n\n{code}\n$myTable = new Zend_Db_Table('myConnection1');\n{code}\n\nMy only slight concern would be a slight performance hit, but believe this would be outweighed by the ability to serialise Tables so that database connections are only called when actually needed."
        },
        "priority": {
            "name": "priority",
            "type": "com.atlassian.jira.issue.priority.Priority",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/priority\/4",
                "name": "Minor"
            }
        },
        "duedate": {
            "name": "duedate",
            "type": "java.util.Date"
        },
        "customfield_10022": {
            "name": "Fix Version Priority",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:select"
        },
        "watcher": {
            "name": "watcher",
            "type": "watcher",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-190\/watchers",
                "isWatching": false,
                "watchCount": 0
            }
        },
        "worklog": {
            "name": "worklog",
            "type": "worklog",
            "value": [

            ]
        },
        "status": {
            "name": "status",
            "type": "com.atlassian.jira.issue.status.Status",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/status\/5",
                "name": "Resolved"
            }
        },
        "labels": {
            "name": "labels",
            "type": "com.atlassian.jira.issue.label.Label",
            "value": [

            ]
        },
        "assignee": {
            "name": "assignee",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=bkarwin",
                "name": "bkarwin",
                "displayName": "Bill Karwin",
                "active": true
            }
        },
        "links": {
            "name": "links",
            "type": "issuelinks",
            "value": [

            ]
        },
        "attachment": {
            "name": "attachment",
            "type": "attachment",
            "value": [

            ]
        },
        "sub-tasks": {
            "name": "sub-tasks",
            "type": "issuelinks",
            "value": [

            ]
        },
        "versions": {
            "name": "versions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/version\/10010",
                    "id": 10010,
                    "description": "Preview Release",
                    "name": "0.1.3",
                    "userReleaseDate": "18\/Apr\/06",
                    "archived": true,
                    "releaseDate": "2006-04-18",
                    "released": true
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/version\/10000",
                    "id": 10000,
                    "description": "Preview Release",
                    "name": "0.1.4",
                    "userReleaseDate": "29\/Jun\/06",
                    "archived": true,
                    "releaseDate": "2006-06-29",
                    "released": true
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/version\/10001",
                    "id": 10001,
                    "description": "Preview Release",
                    "name": "0.1.5",
                    "userReleaseDate": "11\/Jul\/06",
                    "archived": true,
                    "releaseDate": "2006-07-11",
                    "released": true
                }
            ]
        },
        "project": {
            "name": "project",
            "type": "com.atlassian.jira.project.Project",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/project\/ZF",
                "key": "ZF",
                "name": "Zend Framework",
                "roles": {

                }
            }
        },
        "components": {
            "name": "components",
            "type": "com.atlassian.jira.bc.project.component.ProjectComponent",
            "value": [
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/component\/10133",
                    "id": 10133,
                    "name": "Zend_Db_Table",
                    "description": "Lightweight OO interface to database tables and rowsets.",
                    "isAssigneeTypeValid": false
                }
            ]
        },
        "comment": {
            "name": "comment",
            "type": "com.atlassian.jira.issue.fields.CommentSystemField",
            "value": [
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/10284",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "body": "In PHP5, objects are always passed by reference. Thus, objects \"assigned\" to variables, only result in variables containing handles to the object.  Object cloning performs shallow copies, but cloning is not used.\n\nWould you provide some example use cases, where a Db_Table_Row, Db_Table_Rowset, or Db_Table needs access to the original Db_Adapter?",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "created": "2006-07-04T13:54:37.000+0000",
                    "updated": "2006-07-04T13:54:37.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/10295",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=peptolab",
                        "name": "peptolab",
                        "displayName": "Simon Mundy",
                        "active": true
                    },
                    "body": "A real-world scenario might be:-\n\n\/\/ Do a user login and serialise it ready for session storage:-\n\n$db = Zend_Db::factory('pdoMysql', $params);\nZend_Db_Table::setDefaultAdapter($db);\n\nclass UserList extends Zend_Db_Table {}\n\n$user = new UserList();\nserialize($user);\n\n...boom...\n\nIf the Zend_Db_Table didn't store a copy of the Db adapter instance, it would serialize just fine.\n\nIt would take something like replacing all the $this->_db with $this->getDbConnection($this->_dbname) where $this->_dbname is a named connection and is populated during the _setup()\n",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=peptolab",
                        "name": "peptolab",
                        "displayName": "Simon Mundy",
                        "active": true
                    },
                    "created": "2006-07-05T07:35:02.000+0000",
                    "updated": "2006-07-05T07:35:02.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/10298",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "body": "The use case above appears to serialize an empty Zend_Db_Table object, which doesn't appear to provide any useful purpose.\n\nI understand that the instance variable holding a *reference* to a Db adapter causes serialize() for Db_Table* objects to go \"... boom ..\".\n\nHowever, I don't yet see a reason (common use case) why we would want to serialize Db_Table_Row, Db_Table_Rowset, or Db_Table, where \"[they] need access to the original Db_Adapter\".  In the situations I'm thinking of, it seems more straightforward to either serialize the object without the _db instance variable, or to recreate the object, populated with up-to-date information, rather than a stale, serialized copy that needs to have its database connection auto-magically restored.\n\nSpecifically, if we don't have some reasonable use cases, for needing to *also* serialize the Db adapter along with the Db_Table* object, then why wouldn't it be trivially easy to use __sleep() and __wakeup() to enable support for serialize()?\n\nhttp:\/\/www.zend.com\/manual\/language.oop5.magic.php",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "created": "2006-07-05T12:47:27.000+0000",
                    "updated": "2006-07-05T12:47:27.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/10302",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=peptolab",
                        "name": "peptolab",
                        "displayName": "Simon Mundy",
                        "active": true
                    },
                    "body": "Hi Gavin\n\nSorry about the example above - it saved the wrong copy when I copied and pasted (is there any way to edit these posts?). What I meant to show was that you could find a user record and store that like\n\n$record = $user->find('1');\n$_SESSION['user'] = $record;\n\nindeed, I was suggesting that the reference to the Db adapter is removed entirely. So instead of storing the connection in the _db property, a method like getDbConnection() is called that performs a static call to a Db registry - see the Zend_Log class as an example. \n\n",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=peptolab",
                        "name": "peptolab",
                        "displayName": "Simon Mundy",
                        "active": true
                    },
                    "created": "2006-07-05T16:58:31.000+0000",
                    "updated": "2006-07-05T16:58:31.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/10303",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "body": "Wouldn't  __sleep() accomplish this, by simply returning an array of the names of the object's variables excluding '_db'?\n\nThen serialize should work as desired.",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "created": "2006-07-05T17:13:13.000+0000",
                    "updated": "2006-07-05T17:13:13.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/10304",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=peptolab",
                        "name": "peptolab",
                        "displayName": "Simon Mundy",
                        "active": true
                    },
                    "body": "How would the row or rowset then re-establish the Db link (or get a reference to it) on __wakeup()?",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=peptolab",
                        "name": "peptolab",
                        "displayName": "Simon Mundy",
                        "active": true
                    },
                    "created": "2006-07-05T17:17:42.000+0000",
                    "updated": "2006-07-05T17:17:42.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/10305",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "body": "That is one reason why I was asking for a practical example \"where a Db_Table_Row, Db_Table_Rowset, or Db_Table needs access to the original Db_Adapter\".  Upon unserializing, in most cases, I'd expect the data to be \"stale\" and probably used as \"read-only\" data.\n\n\nRegardless, I suppose __sleep() could simply add an object property containing textual information about $this->_db for use by __wakeup().  However, I don't see a way to remove the added property after serialize does its work, which might not be an issue, if the program is shutting down (hence the need for serialize).  If the program is simply transmitting a serialized copy to another program, and plan to continue using these objects, then the overhead of the added properties might become an issue.  I still don't see a practical, common need for saving any information about the adapter with the object when calling serialize().",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "created": "2006-07-05T18:16:38.000+0000",
                    "updated": "2006-07-05T18:16:38.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/11377",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=bkarwin",
                        "name": "bkarwin",
                        "displayName": "Bill Karwin",
                        "active": true
                    },
                    "body": "Changing fix version to 0.8.0.",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=bkarwin",
                        "name": "bkarwin",
                        "displayName": "Bill Karwin",
                        "active": true
                    },
                    "created": "2006-11-13T15:15:30.000+0000",
                    "updated": "2006-11-13T15:15:30.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/12148",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=bkarwin",
                        "name": "bkarwin",
                        "displayName": "Bill Karwin",
                        "active": true
                    },
                    "body": "Recategorize as Zend_Db_Table component.",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=bkarwin",
                        "name": "bkarwin",
                        "displayName": "Bill Karwin",
                        "active": true
                    },
                    "created": "2007-01-05T17:06:25.000+0000",
                    "updated": "2007-01-05T17:06:25.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/13393",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=bkarwin",
                        "name": "bkarwin",
                        "displayName": "Bill Karwin",
                        "active": true
                    },
                    "body": "Update summary, format description.",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=bkarwin",
                        "name": "bkarwin",
                        "displayName": "Bill Karwin",
                        "active": true
                    },
                    "created": "2007-03-15T19:35:56.000+0000",
                    "updated": "2007-03-15T19:35:56.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/13407",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=bkarwin",
                        "name": "bkarwin",
                        "displayName": "Bill Karwin",
                        "active": true
                    },
                    "body": "A solution for serializing (sic) Row and Rowset objects has been committed in revision 3995.\n\nA Row or Rowset has an internal instance variable $_connected.  Under normal circumstances, $_connected is true.  This means that the object has a reference to a Zend_Db_Table, which in turn has a reference to a connected Zend_Db_Adapter.  Therefore applying changes to the Row to the database is permitted.\n\nWhen a Row or Rowset is serialized, object variables are stored, but _not_ the Zend_Db_Table reference.  When a Row or Rowset is deserialized, the $_connected variable is set to false.  A \"disconnected\" Row or Rowset is effectively read-only.  The save() method, delete() method, and any find() methods for table relationships throw an exception.\n\nThe deserialized Row or Rowset can be \"reconnected\" to a live database connection using the setTable() method.  The app developer specifies a Table object.  After setting the Row\/Rowset's Table reference using setTable(), that deserialized Row or Rowset can run methods that require a live database connection.\n\nThe table specified in the setTable() method must be an instance of the same class (or a class derived from) that which was used to create the Row or Rowset originally.  That table class name is stored in the serialized Row or Rowset.",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=bkarwin",
                        "name": "bkarwin",
                        "displayName": "Bill Karwin",
                        "active": true
                    },
                    "created": "2007-03-16T00:09:24.000+0000",
                    "updated": "2007-03-16T00:09:24.000+0000"
                }
            ]
        }
    },
    "transitions": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-190\/transitions"
}