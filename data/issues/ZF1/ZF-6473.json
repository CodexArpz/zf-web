{
    "expand": "html",
    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-6473",
    "key": "ZF-6473",
    "fields": {
        "summary": {
            "name": "summary",
            "type": "java.lang.String",
            "value": "Can not insert data in Oracle BLOB column"
        },
        "timetracking": {
            "name": "timetracking",
            "type": "com.atlassian.jira.issue.fields.TimeTrackingSystemField"
        },
        "issuetype": {
            "name": "issuetype",
            "type": "com.atlassian.jira.issue.issuetype.IssueType",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issueType\/1",
                "name": "Bug",
                "subtask": false
            }
        },
        "votes": {
            "name": "votes",
            "type": "com.atlassian.jira.issue.fields.VotesSystemField",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-6473\/votes",
                "votes": 6,
                "hasVoted": false
            }
        },
        "security": {
            "name": "security",
            "type": "com.atlassian.jira.issue.security.IssueSecurityLevel"
        },
        "fixVersions": {
            "name": "fixVersions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [

            ]
        },
        "reporter": {
            "name": "reporter",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=neo123",
                "name": "neo123",
                "displayName": "Vik Paul",
                "active": true
            }
        },
        "created": {
            "name": "created",
            "type": "java.util.Date",
            "value": "2009-04-29T13:27:37.000+0000"
        },
        "updated": {
            "name": "updated",
            "type": "java.util.Date",
            "value": "2011-12-27T17:56:39.000+0000"
        },
        "customfield_10041": {
            "name": "Tags",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:labels",
            "value": [
                "blob",
                "oracle"
            ]
        },
        "description": {
            "name": "description",
            "type": "java.lang.String",
            "value": "I have oracle 10g as backend database. We need to store user uploaded files in a table with BLOB column. I attempted to do so by passing form variable and then with using php global $_FILES array. Both cases oracle throws error identifying passed value as string. \nI did not see any documentation if Zend supports Oracle BLOB datatype management. We are using zend core 2.5.0. Is this functionality supported?"
        },
        "priority": {
            "name": "priority",
            "type": "com.atlassian.jira.issue.priority.Priority",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/priority\/6",
                "name": "N\/A"
            }
        },
        "duedate": {
            "name": "duedate",
            "type": "java.util.Date"
        },
        "customfield_10022": {
            "name": "Fix Version Priority",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:select"
        },
        "watcher": {
            "name": "watcher",
            "type": "watcher",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-6473\/watchers",
                "isWatching": false,
                "watchCount": 6
            }
        },
        "worklog": {
            "name": "worklog",
            "type": "worklog",
            "value": [

            ]
        },
        "status": {
            "name": "status",
            "type": "com.atlassian.jira.issue.status.Status",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/status\/1",
                "name": "Open"
            }
        },
        "labels": {
            "name": "labels",
            "type": "com.atlassian.jira.issue.label.Label",
            "value": [

            ]
        },
        "assignee": {
            "name": "assignee",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=mikaelkael",
                "name": "mikaelkael",
                "displayName": "Mickael Perraud",
                "active": true
            }
        },
        "links": {
            "name": "links",
            "type": "issuelinks",
            "value": [
                {
                    "issueKey": "ZFINC-71",
                    "issue": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZFINC-71",
                    "type": {
                        "name": "Dependency",
                        "direction": "INBOUND",
                        "description": "is dependecy of"
                    }
                }
            ]
        },
        "attachment": {
            "name": "attachment",
            "type": "attachment",
            "value": [

            ]
        },
        "sub-tasks": {
            "name": "sub-tasks",
            "type": "issuelinks",
            "value": [

            ]
        },
        "versions": {
            "name": "versions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [

            ]
        },
        "project": {
            "name": "project",
            "type": "com.atlassian.jira.project.Project",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/project\/ZF",
                "key": "ZF",
                "name": "Zend Framework",
                "roles": {

                }
            }
        },
        "components": {
            "name": "components",
            "type": "com.atlassian.jira.bc.project.component.ProjectComponent",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/component\/10135",
                    "id": 10135,
                    "name": "Zend_Db_Adapter_Oracle",
                    "isAssigneeTypeValid": false
                }
            ]
        },
        "comment": {
            "name": "comment",
            "type": "com.atlassian.jira.issue.fields.CommentSystemField",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/32322",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=rhunwicks",
                        "name": "rhunwicks",
                        "displayName": "Roger Hunwicks",
                        "active": true
                    },
                    "body": "We started using ZF at version 1.5 or so, and at that time it didn't seem to support BLOBs - I haven't looked recently to see if this has changed. \n\nWe have a My_Db_Adapter_Oracle which overrides Zend_Db_Adapter_Oracle and overrides the insert() function as follows (there is some extra stuff to track whether a transaction is already open):\n{code}\n    \/**\n     * @var boolean\n     *\/\n    protected $_transactionOpen = null;\n\n    \/**\n     * Identifies whether the adapter has an open transaction\n     *\n     * @return boolean\n     *\/\n    protected function _hasOpenTransaction()\n    {\n        return $this->_transactionOpen;\n    }\n\n    \/**\n     * Leave autocommit mode and begin a transaction.\n     *\n     * Overloads Zend_Db_Adapter_Oracle::_beginTransaction to\n     * track the open transaction\n     *  \n     * @return void\n     *\/\n    protected function _beginTransaction()\n    {\n        \/\/ Do the parent code\n        parent::_beginTransaction();\n\n        $this->_transactionOpen = true;       \n    }\n\n    \/**\n     * Commit a transaction and return to autocommit mode.\n     *\n     * Overloads Zend_Db_Adapter_Oracle::_commit to track\n     * the open transaction\n     * \n     * @return void\n     * @throws Zend_Db_Adapter_Oracle_Exception\n     *\/\n    protected function _commit()\n    {\n        $this->_transactionOpen = false;\n\n        \/\/ Do the parent code\n        parent::_commit();        \n    }\n\n    \/**\n     * Roll back a transaction and return to autocommit mode.\n     *\n     * Overloads Zend_Db_Adapter_Oracle::_rollBack to track\n     * the open transaction\n     * \n     * @return void\n     * @throws Zend_Db_Adapter_Oracle_Exception\n     *\/\n    protected function _rollBack()\n    {\n        $this->_transactionOpen = false;\n        \n        \/\/ Do the parent code\n        parent::_rollBack();\n    }\n\n    \/**\n     * Inserts a table row with specified data.\n     *\n     * Overloads Zend_Db_Adapter_Oracle to support BLOB columns\n     *\n     * Oracle does not support anonymous ('?') binds.\n     *\n     * @param mixed $table The table to insert data into.\n     * @param array $bind Column-value pairs.\n     * @return int The number of affected rows.\n     *\/\n    public function insert($table, array $bind)\n    {\n        \/\/ Use transaction management rather than commit on success\n        $transactionOpenedHere = false;\n        if (!$this->_hasOpenTransaction()) {\n            $this->beginTransaction();\n            $transactionOpenedHere = true;\n        }\n\n        \/\/ Get the table metadata\n        $columns = $this->describeTable($table);\n        \n        \/\/ Check the columns in the array against the database table\n        \/\/ to identify BLOB (or CLOB) columns\n        foreach (array_keys($bind) as $column) {\n            if ( in_array($columns[$column]['DATA_TYPE'], array('BLOB', 'CLOB'))) {\n                $lobs[]=$column;\n            }\n        }\n\n        \/\/ If there are no blob columns then use the normal insert procedure\n        if ( !isset($lobs)) {\n            $result = parent::insert($table, $bind);\n\n        } else {            \n            \/\/ There are blobs in the $bind array so insert them separately\n            $ociTypes = array('BLOB' => OCI_B_BLOB, 'CLOB' => OCI_B_CLOB);\n\n            \/\/ Extract and quote col names from the array keys\n            $i = 0;\n            $cols = array();\n            $vals = array();\n            foreach ($bind as $col => $val) {\n                $cols[] = $this->quoteIdentifier($col, true);\n                if (in_array($col, $lobs)) {\n                    $vals[] = 'EMPTY_' . $columns[$col]['DATA_TYPE'] . '()';\n                    $lobData[':'.$col.$i] = array('ociType' => $ociTypes[$columns[$col]['DATA_TYPE']],\n                                                  'data'    => $val);\n                    unset($bind[$col]);\n                    $lobDescriptors[':'.$col.$i] = oci_new_descriptor($this->_connection, OCI_D_LOB);\n                    $returning[] = ':'.$col.$i;\n                    $bind[':'.$col.$i] = $lobDescriptors[':'.$col.$i];\n                } elseif ($val instanceof Zend_Db_Expr) {\n                    $vals[] = $val->__toString();\n                    unset($bind[$col]);\n                } else {\n                    $vals[] = ':'.$col.$i;\n                    unset($bind[$col]);\n                    $bind[':'.$col.$i] = $val;\n                }\n                $i++;\n            }\n            \n            \/\/ build the statement\n            $sql = \"INSERT INTO \"\n                 . $this->quoteIdentifier($table, true)\n                 . ' (' . implode(', ', $cols) . ') '\n                 . 'VALUES (' . implode(', ', $vals) . ') '\n                 . 'RETURNING ' . implode(', ', $lobs) . ' '\n                 . 'INTO '  . implode(', ', $returning);\n\n            \/\/ Execute the statement\n            $stmt = new Zend_Db_Statement_Oracle($this, $sql);\n            foreach (array_keys($bind) as $name) {\n                if (in_array($name, array_keys($lobData))) {\n                    $stmt->bindParam($name, $bind[$name], $lobData[$name]['ociType'], -1);\n                } else {\n                    $stmt->bindParam($name, $bind[$name]);\n                }\n            }\n\n            \/\/Execute without committing\n            $stmt->execute();\n            $result = $stmt->rowCount();\n            \n            \/\/ Write the LOB data & free the descriptor\n            foreach ( $lobDescriptors as $name => $lobDescriptor) {            \n                $lobDescriptor->write($lobData[$name]['data']);\n                $lobDescriptor->free();\n            }\n            \n        }\n\n        \/\/ Commit\n        if ($transactionOpenedHere) {\n            $this->commit();\n        }\n        \n        \/\/ Return result\n        return $result;\n\n    }\n{code}\n\nIt shouldn't be too hard for you to take this approach with your application. \n\nIt should also be possible to add this code into Zend_Db_Adapter_Oracle if any of the maintainers are interested. \n\nI would be happy to help with it if one of the maintainers can tell me what needs to be done.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=rhunwicks",
                        "name": "rhunwicks",
                        "displayName": "Roger Hunwicks",
                        "active": true
                    },
                    "created": "2009-07-01T10:49:03.000+0000",
                    "updated": "2009-07-01T10:49:03.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/33237",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=gabrielbaez",
                        "name": "gabrielbaez",
                        "displayName": "Gabriel Baez",
                        "active": true
                    },
                    "body": "We use zend framework at work with a Oracle Database  this feature would definitely make things easier to deal with BLOBs.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=gabrielbaez",
                        "name": "gabrielbaez",
                        "displayName": "Gabriel Baez",
                        "active": true
                    },
                    "created": "2009-08-05T10:36:26.000+0000",
                    "updated": "2009-08-05T10:36:26.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/34243",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=gpsa",
                        "name": "gpsa",
                        "displayName": "Guilherme Pereira",
                        "active": true
                    },
                    "body": "I would like to give my contribution. \nAdvantage the insert function, I changed it to recognize the situation \nwhere hava SCHEMA and TABLE in $table var, and we can use this idea to the update option:\n\\\\\n\\\\\n{code:title=Db\/Adapter\/Oracle.php}\n\/**\n     * Inserts a table row with specified data.\n     *\n     * Overloads Zend_Db_Adapter_Oracle to support BLOB columns\n     *\n     * Oracle does not support anonymous ('?') binds.\n     * Altera\u00e7\u00e3o para funcionar com campos BLOB e CLOB\n     * @param mixed $table The table to insert data into.\n     * @param array $bind Column-value pairs.\n     * @return int The number of affected rows.\n     *\/\n    public function insert($table, array $bind)\n    {\n        \/\/ Use transaction management rather than commit on success\n        $transactionOpenedHere = false;\n        if (!$this->_hasOpenTransaction()) {\n            $this->beginTransaction();\n            $transactionOpenedHere = true;\n        }\n        $tb = explode(\".\", $table);\n        if(count($tb) == 2)\n        {\n            $tbName = $tb[1];\n            $tbSchema = $tb[0];\n        }else\n            $tbName = $tb[0];\n        \/\/ Get the table metadata\n        $columns = $this->describeTable($tbName, @$tbSchema);\n\n        \/\/ Check the columns in the array against the database table\n        \/\/ to identify BLOB (or CLOB) columns\n        foreach (array_keys($bind) as $column) {\n            if ( in_array($columns[$column]['DATA_TYPE'], array('BLOB', 'CLOB'))) {\n                $lobs[]=$column;\n            }\n        }\n\n        \/\/ If there are no blob columns then use the normal insert procedure\n        if ( !isset($lobs)) {\n            $result = parent::insert($table, $bind);\n\n        } else {\n            \/\/ There are blobs in the $bind array so insert them separately\n            $ociTypes = array('BLOB' => OCI_B_BLOB, 'CLOB' => OCI_B_CLOB);\n\n            \/\/ Extract and quote col names from the array keys\n            $i = 0;\n            $cols = array();\n            $vals = array();\n            foreach ($bind as $col => $val) {\n                $cols[] = $this->quoteIdentifier($col, true);\n                if (in_array($col, $lobs)) {\n                    $vals[] = 'EMPTY_' . $columns[$col]['DATA_TYPE'] . '()';\n                    $lobData[':'.$col.$i] = array('ociType' => $ociTypes[$columns[$col]['DATA_TYPE']],\n                                                  'data'    => $val);\n                    unset($bind[$col]);\n                    $lobDescriptors[':'.$col.$i] = oci_new_descriptor($this->_connection, OCI_D_LOB);\n                    $returning[] = ':'.$col.$i;\n                    $bind[':'.$col.$i] = $lobDescriptors[':'.$col.$i];\n                } elseif ($val instanceof Zend_Db_Expr) {\n                    $vals[] = $val->__toString();\n                    unset($bind[$col]);\n                } else {\n                    $vals[] = ':'.$col.$i;\n                    unset($bind[$col]);\n                    $bind[':'.$col.$i] = $val;\n                }\n                $i++;\n            }\n\n            \/\/ build the statement\n            $sql = \"INSERT INTO \"\n                 . $this->quoteIdentifier($table, true)\n                 . ' (' . implode(', ', $cols) . ') '\n                 . 'VALUES (' . implode(', ', $vals) . ') '\n                 . 'RETURNING ' . implode(', ', $lobs) . ' '\n                 . 'INTO '  . implode(', ', $returning);\n\n            \/\/ Execute the statement\n            $stmt = new Zend_Db_Statement_Oracle($this, $sql);\n            foreach (array_keys($bind) as $name) {\n                if (in_array($name, array_keys($lobData))) {\n                    $stmt->bindParam($name, $bind[$name], $lobData[$name]['ociType'], -1);\n                } else {\n                    $stmt->bindParam($name, $bind[$name]);\n                }\n            }\n\n            \/\/Execute without committing\n            $stmt->execute();\n            $result = $stmt->rowCount();\n\n            \/\/ Write the LOB data & free the descriptor\n            foreach ( $lobDescriptors as $name => $lobDescriptor) {\n                $lobDescriptor->write($lobData[$name]['data']);\n                $lobDescriptor->free();\n            }\n\n        }\n\n        \/\/ Commit\n        if ($transactionOpenedHere) {\n            $this->commit();\n        }\n\n        \/\/ Return result\n        return $result;\n\n    }\n    \/**\n     * \n     * Updates table rows with specified data based on a WHERE clause.\n     *\n     * @param  mixed        $table The table to update.\n     * @param  array        $bind  Column-value pairs.\n     * @param  mixed        $where UPDATE WHERE clause(s).\n     * @return int          The number of affected rows.\n     *\/\n    public function update($table, array $bind, $where = '')\n    {\n       \/\/ Use transaction management rather than commit on success\n        $transactionOpenedHere = false;\n        if (!$this->_hasOpenTransaction()) {\n            $this->beginTransaction();\n            $transactionOpenedHere = true;\n        }\n        $tb = explode(\".\", $table);\n        if(count($tb) == 2)\n        {\n            $tbName = $tb[1];\n            $tbSchema = $tb[0];\n        }else\n            $tbName = $tb[0];\n        \/\/ Get the table metadata\n        $columns = $this->describeTable($tbName, @$tbSchema);\n\n        \/\/ Check the columns in the array against the database table\n        \/\/ to identify BLOB (or CLOB) columns\n        foreach (array_keys($bind) as $column) {\n            if ( in_array($columns[$column]['DATA_TYPE'], array('BLOB', 'CLOB'))) {\n                $lobs[]=$column;\n            }\n        }\n\n        \/\/ If there are no blob columns then use the normal insert procedure\n        if ( !isset($lobs)) {\n            $result = parent::update($table, $bind, $where);\n\n        } else {\n            \/\/ There are blobs in the $bind array so insert them separately\n            $ociTypes = array('BLOB' => OCI_B_BLOB, 'CLOB' => OCI_B_CLOB);\n\n            \/**\n             * Build \"col = ?\" pairs for the statement,\n             * except for Zend_Db_Expr which is treated literally.\n             *\/\n            $set = array();\n            $i = 0;\n            foreach ($bind as $col => $val) {\n                if (in_array($col, $lobs))\n                {\n                    $lobData[':'.$col.$i] = array('ociType' => $ociTypes[$columns[$col]['DATA_TYPE']],\n                                                  'data'    => $val);\n                    unset($bind[$col]);\n                    $lobDescriptors[':'.$col.$i] = oci_new_descriptor($this->_connection, OCI_D_LOB);\n                    $returning[] = ':'.$col.$i;\n                    $bind[':'.$col.$i] = $lobDescriptors[':'.$col.$i];\n                    $val = 'EMPTY_' . $columns[$col]['DATA_TYPE'] . '()';\n                }elseif ($val instanceof Zend_Db_Expr) {\n                    $val = $val->__toString();\n                    unset($bind[$col]);\n                } else {\n                    if ($this->supportsParameters('positional')) {\n                        $val = '?';\n                    } else {\n                        if ($this->supportsParameters('named')) {\n                            unset($bind[$col]);\n                            $bind[':'.$col.$i] = $val;\n                            $val = ':'.$col.$i;\n                            $i++;\n                        } else {\n                            \/** @see Zend_Db_Adapter_Exception *\/\n                            require_once 'Zend\/Db\/Adapter\/Exception.php';\n                            throw new Zend_Db_Adapter_Exception(get_class($this) .\" doesn't support positional or named binding\");\n                        }\n                    }\n                }\n                $set[] = $this->quoteIdentifier($col, true) . ' = ' . $val;\n            }\n\n            $where = $this->_whereExpr($where);\n\n            \/**\n             * Build the UPDATE statement\n             *\/\n            $sql = \"UPDATE \"\n                 . $this->quoteIdentifier($table, true)\n                 . ' SET ' . implode(', ', $set)\n                 . (($where) ? \" WHERE $where\" : ''). ' '\n                 . 'RETURNING ' . implode(', ', $lobs) . ' '\n                 . 'INTO '  . implode(', ', $returning);\n\n            \/\/ Execute the statement\n            $stmt = new Zend_Db_Statement_Oracle($this, $sql);\n            foreach (array_keys($bind) as $name) {\n                if (in_array($name, array_keys($lobData))) {\n                    $stmt->bindParam($name, $bind[$name], $lobData[$name]['ociType'], -1);\n                } else {\n                    $stmt->bindParam($name, $bind[$name]);\n                }\n            }\n\n            \/\/Execute without committing\n            $stmt->execute();\n            $result = $stmt->rowCount();\n\n            \/\/ Write the LOB data & free the descriptor\n            foreach ( $lobDescriptors as $name => $lobDescriptor) {\n                $lobDescriptor->write($lobData[$name]['data']);\n                $lobDescriptor->free();\n            }\n\n        }\n\n        \/\/ Commit\n        if ($transactionOpenedHere) {\n            $this->commit();\n        }\n\n        \/\/ Return result\n        return $result;\n    }\n{code}",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=gpsa",
                        "name": "gpsa",
                        "displayName": "Guilherme Pereira",
                        "active": true
                    },
                    "created": "2009-09-04T07:50:50.000+0000",
                    "updated": "2009-09-04T07:50:50.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/35049",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=beberlei",
                        "name": "beberlei",
                        "displayName": "Benjamin Eberlei",
                        "active": true
                    },
                    "body": "I don't like the solution using describeTable(), this seems like a serious performance hit for users that don't realize that insert() and update() need this function and therefore a cache should be wrapped around it.\n\nSince you retrieve a OCI-LOB instance anways from a select on a BLOB or CLOB field, wouldn'it be much more easy just to allow this methods to handle instances of that type correctly?\n\nFor example:\n\n{code}\n$lob = oci_new_descriptor($db->getConnection(), OCI_DTYPE_LOB);\n$lob->write($text);\n$data = array(\n    'name' => $name,\n    'text' => $lob,\n);\n$db->insert('table', $data);\n{code}",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=beberlei",
                        "name": "beberlei",
                        "displayName": "Benjamin Eberlei",
                        "active": true
                    },
                    "created": "2009-10-02T05:06:34.000+0000",
                    "updated": "2009-10-02T05:06:34.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/35050",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=beberlei",
                        "name": "beberlei",
                        "displayName": "Benjamin Eberlei",
                        "active": true
                    },
                    "body": "I just realized my solution isnt enough, the information about CLOB or BLOB is missing for the insert function, forget it :-)",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=beberlei",
                        "name": "beberlei",
                        "displayName": "Benjamin Eberlei",
                        "active": true
                    },
                    "created": "2009-10-02T05:08:04.000+0000",
                    "updated": "2009-10-02T05:08:04.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/38024",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=gabrielbaez",
                        "name": "gabrielbaez",
                        "displayName": "Gabriel Baez",
                        "active": true
                    },
                    "body": "Any updates  on  this issue?",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=gabrielbaez",
                        "name": "gabrielbaez",
                        "displayName": "Gabriel Baez",
                        "active": true
                    },
                    "created": "2010-01-25T11:14:04.000+0000",
                    "updated": "2010-01-25T11:14:04.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/49382",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=kikolino",
                        "name": "kikolino",
                        "displayName": "Cristiano G Carvalho",
                        "active": true
                    },
                    "body": "A litle solution for Zend models. See.\r\n\r\nModel Cars\r\n\r\nclass Custom_Row_Cars extends Zend_Db_Table_Row_Abstract { \r\n\r\n    public function init() { \r\n\r\n        foreach($this->_data as $key => $value ) { \r\n            if( is_resource($value) ) { \r\n               $this->_data[$key] = stream_get_contents($value);\r\n            }\r\n        }\r\n\r\n    } \r\n\r\n} \r\n\r\n\r\nclass Application_Model_DbTable_Cars extends Zend_Db_Table_Abstract { \r\n\r\n    protected $_name = 'CARS';\r\n    protected $_primary = 'ID';\r\n    protected $_rowClass = 'Custom_Row_Cars'; \/\/ Custom Row for data manipulation\r\n\r\n    public function getById($id) {\r\n        return $this->fetchRow($this->select()->where('ID = ?', $id));\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nCLOB field are resource. In case are read with function stream_get_contents\r\n\r\n\r\n",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=kikolino",
                        "name": "kikolino",
                        "displayName": "Cristiano G Carvalho",
                        "active": true
                    },
                    "created": "2011-12-27T17:56:39.000+0000",
                    "updated": "2011-12-27T17:56:39.000+0000"
                }
            ]
        }
    },
    "transitions": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-6473\/transitions"
}