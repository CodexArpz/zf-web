{
    "expand": "html",
    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-6843",
    "key": "ZF-6843",
    "fields": {
        "summary": {
            "name": "summary",
            "type": "java.lang.String",
            "value": "(De)Serialization of objects implementing ArrayAccess or extending ArrayObject and using magic functions __get and __set"
        },
        "timetracking": {
            "name": "timetracking",
            "type": "com.atlassian.jira.issue.fields.TimeTrackingSystemField"
        },
        "issuetype": {
            "name": "issuetype",
            "type": "com.atlassian.jira.issue.issuetype.IssueType",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issueType\/1",
                "name": "Bug",
                "subtask": false
            }
        },
        "votes": {
            "name": "votes",
            "type": "com.atlassian.jira.issue.fields.VotesSystemField",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-6843\/votes",
                "votes": 0,
                "hasVoted": false
            }
        },
        "security": {
            "name": "security",
            "type": "com.atlassian.jira.issue.security.IssueSecurityLevel"
        },
        "fixVersions": {
            "name": "fixVersions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [

            ]
        },
        "reporter": {
            "name": "reporter",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=rocksocke",
                "name": "rocksocke",
                "displayName": "Matthias Steinb\u00f6ck",
                "active": true
            }
        },
        "created": {
            "name": "created",
            "type": "java.util.Date",
            "value": "2009-05-28T07:10:43.000+0000"
        },
        "updated": {
            "name": "updated",
            "type": "java.util.Date",
            "value": "2012-11-20T21:37:23.000+0000"
        },
        "customfield_10041": {
            "name": "Tags",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:labels",
            "value": [
                "__get",
                "__set",
                "amf",
                "arrayaccess",
                "arrayobject",
                "doctrine",
                "magic"
            ]
        },
        "description": {
            "name": "description",
            "type": "java.lang.String",
            "value": "_*Defining the environment*_\n\nI recognised those two problems trying to send Doctrine-models via AMF.\n\nOn PHP-side i have typical doctrine-classes in a specified relation:\n\n{code}\nabstract class BaseArea extends Doctrine_Record\n{\n    public function setTableDefinition()\n    {\n        $this->setTableName('area');\n        $this->hasColumn('id', 'integer', 4, array('type' => 'integer', 'primary' => true, 'autoincrement' => true, 'length' => '4'));\n        $this->hasColumn('content_id', 'integer', 4, array('type' => 'integer', 'length' => '4'));\n        $this->hasColumn('followed_by', 'integer', 4, array('type' => 'integer', 'length' => '4'));\n    }\n\n    public function setUp()\n    {\n       $this->hasMany('Point as Points', array('local' => 'id',\n                                                'foreign' => 'area_id'));\n    }\n}\n\nabstract class BasePoint extends Doctrine_Record\n{\n    public function setTableDefinition()\n    {\n        $this->setTableName('point');\n        $this->hasColumn('id', 'integer', 4, array('type' => 'integer', 'primary' => true, 'autoincrement' => true, 'length' => '4'));\n        $this->hasColumn('top', 'integer', 4, array('type' => 'integer', 'length' => '4'));\n        $this->hasColumn('left', 'integer', 4, array('type' => 'integer', 'length' => '4'));\n        $this->hasColumn('area_id', 'integer', 4, array('type' => 'integer', 'length' => '4'));\n    }\n\n    public function setUp()\n    {\n        $this->hasOne('Area', array('local' => 'area_id',\n                                    'foreign' => 'id'));\n    }\n}\n{code}\n\nNormal access to depending objects (in this case Points) works like this in PHP:\n\n{code}\n$result = Doctrine::getTable('Area')->findAll();\n\nforeach($result[0]->Points as $point) {\n   \/\/ do some freaky stuff with this point\n}\n{code}\n\nPoints is a Doctrine_Collection implementing ArrayAccess.\n\n_*First problem*_\n\nFetching an $area-instance from the db and sending it via AMF does not serialize the Points.\nThis happens because Zend_AMF does not know that there is a \"hidden\" property called \"Points\" as it is only handled via the magic functions __get and __set (see doctrine source code for this). Now thinking about how to solve this i think i know, that AMF cannot be changed to use a configuration parameter like \"concernMagicProperties\":\n{code}\n$server = new Zend_AMF_Server();\n$server->concernMagicProperties = true;\n{code}\nWell. I think this is not possible (and maybe also not practical for all occasions). So i made the following change. Doctrine supports adding kind of \"unused\" fields like this:\n{code}\n$area->mapValue('_hiddenFields', array('Points'));\n{code}\nThis makes sure Doctrine continues to work (and does not complain about integrity with the database) and Zend_AMF can access this property to find out which hidden fields should be serialized. In a normal environment with the same problem (not using Doctrine) this could be reached by an public property _hiddenFields which will not be serialized or, maybe more beautiful (this idea just comes to my mind), implementing a Zend_AMF_Value_MagicBehaviour:\n{code}\ninterface Zend_AMF_Value_MagicBehaviour {\n    \/** @return array ***\/\n    public function getHiddenFields();\n}\n{code}\n\n_*Second Problem*_\n\nAfter changing Zend_AMF to implement the first behaviour (using the public property _hiddenFields) i recognised the second problem:\nAMF serializes the Doctrine_Collection as a named object - which is entirely correct, but the problem is, that there must be a matching AS-class which would have required me to implement sort of my own AS-Doctrine-Collection with the big problem, that the property names are unknown at the time of compilation (the properties are called 1 2 3 4 5...) and as AS has no possibility to handle this - or i don't know it (no magic __set or so) - the only possibility was to change Zend_AMF so that this class gets serialized as an Array. AS has enough ways to change this array and send the list back.\n\nTo solve this i made a dirty hack in Zend_AMF to check whether the given object is an instance of Doctrine_Collection and handle it as array. More beautiful would be a similar behaviour as mentioned above:\n{code}\ninterface Zend_AMF_Value_HandleAsArray {}\n{code}\nIf a class implements this Interface, Zend_AMF should handle the object as an array (not only if it IS an array).\n\n\n*Summarizing there are two problems to solve:*\n\n * How can magic \"hidden\" properties be serialized\n * How can classes that implement ArrrayAccess or extend ArrayObject be serialized as an Array\n\n\nI documented my specific changes in a patch which might not be the best, but it was a fix for me to use Doctrine.\nI would like to hear your opinion on this topic, also if there is another way of design.\n\n\n(offtopic: btw: why doesn't zend framework trac has codeformatting for php? ;-) )"
        },
        "priority": {
            "name": "priority",
            "type": "com.atlassian.jira.issue.priority.Priority",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/priority\/3",
                "name": "Major"
            }
        },
        "duedate": {
            "name": "duedate",
            "type": "java.util.Date"
        },
        "customfield_10022": {
            "name": "Fix Version Priority",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:select"
        },
        "watcher": {
            "name": "watcher",
            "type": "watcher",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-6843\/watchers",
                "isWatching": false,
                "watchCount": 2
            }
        },
        "worklog": {
            "name": "worklog",
            "type": "worklog",
            "value": [

            ]
        },
        "status": {
            "name": "status",
            "type": "com.atlassian.jira.issue.status.Status",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/status\/1",
                "name": "Open"
            }
        },
        "labels": {
            "name": "labels",
            "type": "com.atlassian.jira.issue.label.Label",
            "value": [

            ]
        },
        "assignee": {
            "name": "assignee",
            "type": "com.opensymphony.user.User"
        },
        "links": {
            "name": "links",
            "type": "issuelinks",
            "value": [

            ]
        },
        "attachment": {
            "name": "attachment",
            "type": "attachment",
            "value": [

            ]
        },
        "sub-tasks": {
            "name": "sub-tasks",
            "type": "issuelinks",
            "value": [

            ]
        },
        "versions": {
            "name": "versions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/version\/10310",
                    "id": 10310,
                    "description": "Mini Release",
                    "name": "1.8.1",
                    "userReleaseDate": "12\/May\/09",
                    "archived": false,
                    "releaseDate": "2009-05-12",
                    "released": true
                }
            ]
        },
        "project": {
            "name": "project",
            "type": "com.atlassian.jira.project.Project",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/project\/ZF",
                "key": "ZF",
                "name": "Zend Framework",
                "roles": {

                }
            }
        },
        "components": {
            "name": "components",
            "type": "com.atlassian.jira.bc.project.component.ProjectComponent",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/component\/10350",
                    "id": 10350,
                    "name": "Zend_Amf",
                    "isAssigneeTypeValid": false
                }
            ]
        },
        "comment": {
            "name": "comment",
            "type": "com.atlassian.jira.issue.fields.CommentSystemField",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/33480",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=cesaric",
                        "name": "cesaric",
                        "displayName": "Robert Cesaric",
                        "active": true
                    },
                    "body": "Here's a hack I wrote to send Doctrine models via AMF:  http:\/\/cesaric.com\/?p=303.  It'll get all the nested collections of a data graph and convert them to standard objects and ActionScript ArrayCollections.  \n\nOn a similar note, any luck going the other way around in trying to send ActionScript objects over AMF to the corresponding Doctrine model object?\n\nI can't seem to get ActionScript classes to map to the respective Doctrine model classes. I'm using the $server->setClassMap(); method and it works fine as long as I'm not mapping to a php class that extends \"Doctrine_Record\" (my BaseContact class below does extend Doctrine_Record).  If I comment out \"extends BaseContact\" below, Zend_Amf type casts it just fine. \n\nclass Contact extends BaseContact\n{\n\n\tpublic function construct(){\n\t\t$this->mapValue(\"_explicitType\",\"com.example.vo.ContactVO\"); \t\t\n\t}\n\n}\n\nAny suggestions?  Btw, great work on Zend_Amf.  It's coming along nicely!",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=cesaric",
                        "name": "cesaric",
                        "displayName": "Robert Cesaric",
                        "active": true
                    },
                    "created": "2009-08-15T19:00:58.000+0000",
                    "updated": "2009-08-15T19:00:58.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/40215",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=joshua",
                        "name": "joshua",
                        "displayName": "Joshua",
                        "active": true
                    },
                    "body": "The 'Doctrine_Record' may not be available to your php service at the time amf is deserializing the objects.  Hack open one of the amf files, put reference to a Doctrine_Record in there.  If you get an error, there's your problem. ",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=joshua",
                        "name": "joshua",
                        "displayName": "Joshua",
                        "active": true
                    },
                    "created": "2010-04-24T10:03:29.000+0000",
                    "updated": "2010-04-24T10:03:29.000+0000"
                }
            ]
        }
    },
    "transitions": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-6843\/transitions"
}