{
    "expand": "html",
    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-9",
    "key": "ZF-9",
    "fields": {
        "summary": {
            "name": "summary",
            "type": "java.lang.String",
            "value": "unit test failure for Zend_Mime; OS\/env dependent?  TRAC-145"
        },
        "timetracking": {
            "name": "timetracking",
            "type": "com.atlassian.jira.issue.fields.TimeTrackingSystemField"
        },
        "issuetype": {
            "name": "issuetype",
            "type": "com.atlassian.jira.issue.issuetype.IssueType",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/issueType\/1",
                "name": "Bug",
                "subtask": false
            }
        },
        "votes": {
            "name": "votes",
            "type": "com.atlassian.jira.issue.fields.VotesSystemField",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-9\/votes",
                "votes": 0,
                "hasVoted": false
            }
        },
        "security": {
            "name": "security",
            "type": "com.atlassian.jira.issue.security.IssueSecurityLevel"
        },
        "resolution": {
            "name": "resolution",
            "type": "com.atlassian.jira.issue.resolution.Resolution",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/resolution\/1",
                "name": "Fixed"
            }
        },
        "fixVersions": {
            "name": "fixVersions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/version\/10000",
                    "id": 10000,
                    "description": "Preview Release",
                    "name": "0.1.4",
                    "userReleaseDate": "29\/Jun\/06",
                    "archived": true,
                    "releaseDate": "2006-06-29",
                    "released": true
                }
            ]
        },
        "resolutiondate": {
            "name": "resolutiondate",
            "type": "java.util.Date",
            "value": "2006-06-22T10:24:37.000+0000"
        },
        "reporter": {
            "name": "reporter",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=openmacnews",
                "name": "openmacnews",
                "displayName": "Richard",
                "active": true
            }
        },
        "created": {
            "name": "created",
            "type": "java.util.Date",
            "value": "2006-06-16T14:55:48.000+0000"
        },
        "updated": {
            "name": "updated",
            "type": "java.util.Date",
            "value": "2007-07-05T14:44:26.000+0000"
        },
        "customfield_10041": {
            "name": "Tags",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:labels"
        },
        "description": {
            "name": "description",
            "type": "java.lang.String",
            "value": "\nhi,\n\nper comments from ZF list from Matthew Weier O'Phinney:\n\n===========================\nPlease open a bug for this issue, and, when doing so, please indicate what\nplatform you're running on (Windows, Mac, Linux, etc.), what version of PHP\nyou're using, and which version of PHPUnit you used.\n\nI'm currently unable to recreate the failure -- all tests run on my machine,\neven under a fresh checkout -- using Debian GNU\/Linux, PHP 5.1.2, and PHPUnit\n2.3.5. A colleague reports the test failing under Cygwin + Windows using PHP\n5.1.4 and PHPUnit 3.0.0alpha5. This information leads me to believe the failure\nmay be related to OS, PHP version, or PHPUnit version.\n\nI'll get someone with specs closer to those you report to delve into it further\nso we can close the bug. \n===========================\n\non OSX 10.4.6 ...\n\n\n% zend_framework > \n% zend_framework > svn info | grep Revision\n    Revision: 668\n% zend_framework > pear list | grep -i phpunit2\n    PHPUnit2  3.0.0alpha11 alpha\n% zend_framework > php -i\n    PHP Version => 5.2.0-dev System => Darwin devuser 8.6.0 Darwin Kernel Version 8.6.0: Tue Mar 7 16:58:48 PST 2006; root:xnu-792.6.70.obj~1\/RELEASE_PPC Power Macintosh\n\n    .\/configure \\\n    ...\n    --with-apxs2=\/usr\/local\/apache2\/sbin\/apxs \\\n    --enable-shared --disable-static \\\n    --disable-debug \\\n    --disable-safe-mode \\\n    --disable-dmalloc \\\n    --enable-inline-optimization \\\n    --enable-session \\\n    --with-tsrm-pthreads \\\n    --enable-maintainer-zts \\\n    ...\n% httpd -V\n\n    Server version: Apache\/2.2.3-dev Server built: Jun 8 2006 17:00:58 Server's Module Magic Number: 20051115:2 Server loaded: APR 1.2.8-dev, APR-Util 1.2.8-dev Compiled using: APR 1.2.8-dev, APR-Util 1.2.8-dev Architecture: 32-bit Server MPM: Worker\n\n        threaded: yes (fixed thread count)\n        forked: yes (variable process count)\n\n\n% zend_framework > cd tests\n% zend_framework\/tests > php Zend\/Mime\/AllTests.php\n\n\nTime: 00:00\nThere was 1 failure:\n1) testStreamEncoding(Zend_Mime_PartTest)\nfailed asserting that <'<?php\n\/**\n * @package     Zend_Mime\n * @subpackage  UnitTests\n *\/\n\n\n\/**\n * Zend_Mime_Part\n *\/\nrequire_once \\'Zend\/Mime\/Part.php\\';\n\n\/**\n * PHPUnit2 test case\n *\/\nrequire_once \\'PHPUnit2\/Framework\/TestCase.php\\';\n\n\/**\n * @package     Zend_Mime\n * @subpackage  UnitTests\n *\/\nclass Zend_Mime_PartTest extends PHPUnit2_Framework_TestCase\n{\n    \/**\n     * MIME part test object\n     *\n     * @var Zend_Mime_Part\n     *\/\n    protected $_part = null;\n    protected $_testText;\n\n    protected function setUp()\n    {\n        $this->_testText = \\'safdsafsa\u02c6lg \u02c6\u02c6gd\u02c6\u02c6 sd\u02c6jg\u02c6sdjg\u02c6ld\u02c6gksd\u02c6gj\u02c6sdfg\u02c6dsj\u02c6gjsd\u02c6gj\u02c6dfsjg\u02c6dsfj\u02c6djs\u02c6g kjhdkj \\'\n                       . \\'fgaskjfdh gksjhgjkdh gjhfsdghdhgksdjhg\\';\n        $this->part = new Zend_Mime_Part($this->_testText);\n        $this->part->encoding = Zend_Mime::ENCODING_BASE64;\n        $this->part->type = \"text\/plain\";\n        $this->part->filename = \\'test.txt\\';\n        $this->part->disposition = \\'attachment\\';\n        $this->part->charset = \\'iso8859-1\\';\n        $this->part->id = \\'4711\\';\n    }\n\n    public function testHeaders()\n    {\n        $expectedHeaders = array(\\'Content-Type: text\/plain\\',\n                                 \\'Content-Transfer-Encoding: \\' . Zend_Mime::ENCODING_BASE64,\n                                 \\'Content-Disposition: attachment\\',\n                                 \\'filename=\"test.txt\"\\',\n                                 \\'charset=\"iso8859-1\"\\',\n                                 \\'Content-ID: <4711>\\');\n\n        $actual = $this->part->getHeaders();\n\n        foreach ($expectedHeaders as $expected) {\n            $this->assertContains($expected, $actual);\n        }\n    }\n\n    public function testContentEncoding()\n    {\n        \/\/ Test with base64 encoding\n        $content = $this->part->getContent();\n        $this->assertEquals($this->_testText, base64_decode($content));\n        \/\/ Test with quotedPrintable Encoding:\n        $this->part->encoding = Zend_Mime::ENCODING_QUOTEDPRINTABLE;\n        $content = $this->part->getContent();\n        $this->assertEquals($this->_testText, quoted_printable_decode($content));\n        \/\/ Test with 8Bit encoding\n        $this->part->encoding = Zend_Mime::ENCODING_8BIT;\n        $content = $this->part->getContent();\n        $this->assertEquals($this->_testText, $content);\n    }\n    \n    public function testStreamEncoding()\n    {\n        $testfile = realpath(__FILE__);\n        $original = file_get_contents($testfile);\n\n        \/\/ Test Base64\n        $fp = fopen($testfile,\\'rb\\');\n        $this->assertTrue(is_resource($fp));\n        $part = new Zend_Mime_Part($fp);\n        $part->encoding = Zend_Mime::ENCODING_BASE64;\n        $fp2 = $part->getEncodedStream();\n        $this->assertTrue(is_resource($fp2));\n        $encoded = stream_get_contents($fp2);\n        fclose($fp);\n        $this->assertEquals(base64_decode($encoded),$original);\n        \n        \/\/ test QuotedPrintable\n        $fp = fopen($testfile,\\'rb\\');\n        $this->assertTrue(is_resource($fp));\n        $part = new Zend_Mime_Part($fp);\n        $part->encoding = Zend_Mime::ENCODING_QUOTEDPRINTABLE;\n        $fp2 = $part->getEncodedStream();\n        $this->assertTrue(is_resource($fp2));\n        $encoded = stream_get_contents($fp2);\n        fclose($fp);\n        $this->assertEquals(quoted_printable_decode($encoded),$original);\n    }\n}\n'> is equal to <string:'<?php\n\/**\n * @package     Zend_Mime\n * @subpackage  UnitTests\n *\/\n\n\n\/**\n * Zend_Mime_Part\n *\/\nrequire_once \\'Zend\/Mime\/Part.php\\';\n\n\/**\n * PHPUnit2 test case\n *\/\nrequire_once \\'PHPUnit2\/Framework\/TestCase.php\\';\n\n\/**\n * @package     Zend_Mime\n * @subpackage  UnitTests\n *\/\nclass Zend_Mime_PartTest extends PHPUnit2_Framework_TestCase\n{\n    \/**\n     * MIME part test object\n     *\n     * @var Zend_Mime_Part\n     *\/\n    protected $_part = null;\n    protected $_testText;\n\n    protected function setUp()\n    {\n        $this->_testText = \\'safdsafsa\u02c6lg \u02c6\u02c6gd\u02c6\u02c6 sd\u02c6jg\u02c6sdjg\u02c6ld\u02c6gksd\u02c6gj\u02c6sdfg\u02c6dsj\u02c6gjsd\u02c6gj\u02c6dfsjg\u02c6dsfj\u02c6djs\u02c6g kjhdkj \\'\n                       . \\'fgaskjfdh gksjhgjkdh gjhfsdghdhgksdjhg\\';\n        $this->part = new Zend_Mime_Part($this->_testText);\n        $this->part->encoding = Zend_Mime::ENCODING_BASE64;\n        $this->part->type = \"text\/plain\";\n        $this->part->filename = \\'test.txt\\';\n        $this->part->disposition = \\'attachment\\';\n        $this->part->charset = \\'iso8859-1\\';\n        $this->part->id = \\'4711\\';\n    }\n\n    public function testHeaders()\n    {\n        $expectedHeaders = array(\\'Content-Type: text\/plain\\',\n                                 \\'Content-Transfer-Encoding: \\' . Zend_Mime::ENCODING_BASE64,\n                                 \\'Content-Disposition: attachment\\',\n                                 \\'filename=\"test.txt\"\\',\n                                 \\'charset=\"iso8859-1\"\\',\n                                 \\'Content-ID: <4711>\\');\n\n        $actual = $this->part->getHeaders();\n\n        foreach ($expectedHeaders as $expected) {\n            $this->assertContains($expected, $actual);\n        }\n    }\n\n    public function testContentEncoding()\n    {\n        \/\/ Test with base64 encoding\n        $content = $this->part->getContent();\n        $this->assertEquals($this->_testText, base64_decode($content));\n        \/\/ Test with quotedPrintable Encoding:\n        $this->part->encoding = Zend_Mime::ENCODING_QUOTEDPRINTABLE;\n        $content = $this->part->getContent();\n        $this->assertEquals($this->_testText, quoted_printable_decode($content));\n        \/\/ Test with 8Bit encoding\n        $this->part->encoding = Zend_Mime::ENCODING_8BIT;\n        $content = $this->part->getContent();\n        $this->assertEquals($this->_testText, $content);\n    }\n    \n    public function testStreamEncoding()\n    {\n        $testfile = realpath(__FILE__);\n        $original = file_get_contents($testfile);\n\n        \/\/ Test Base64\n        $fp = fopen($testfile,\\'rb\\');\n        $this->assertTrue(is_resource($fp));\n        $part = new Zend_Mime_Part($fp);\n        $part->encoding = Zend_Mime::ENCODING_BASE64;\n        $fp2 = $part->getEncodedStream();\n        $this->assertTrue(is_resource($fp2));\n        $encoded = stream_get_contents($fp2);\n        fclose($fp);\n        $this->assertEquals(base64_decode($encoded),$original);\n        \n        \/\/ test QuotedPrintable\n        $fp = fopen($testfile,\\'rb\\');\n        $this->assertTrue(is_resource($fp));\n        $part = new Zend_Mime_Part($fp);\n        $part->encoding = Zend_Mime::ENCODING_QUOTEDPRINTABLE;\n        $fp2 = $part->getEncodedStream();\n        $this->assertTrue(is_resource($fp2));\n        $encoded = stream_get_contents($fp2);\n        fclose($fp);\n        $this->assertEquals(quoted_printable_decode($encoded),$o'>\nexpected string <<?php\n\/**\n * @package     Zend_Mime\n * @subpackage  UnitTests\n *\/\n\n\n\/**\n * Zend_Mime_Part\n *\/\nrequire_once 'Zend\/Mime\/Part.php';\n\n\/**\n * PHPUnit2 test case\n *\/\nrequire_once 'PHPUnit2\/Framework\/TestCase.php';\n\n\/**\n * @package     Zend_Mime\n * @subpackage  UnitTests\n *\/\nclass Zend_Mime_PartTest extends PHPUnit2_Framework_TestCase\n{\n    \/**\n     * MIME part test object\n     *\n     * @var Zend_Mime_Part\n     *\/\n    protected $_part = null;\n    protected $_testText;\n\n    protected function setUp()\n    {\n        $this->_testText = 'safdsafsa\u02c6lg \u02c6\u02c6gd\u02c6\u02c6 sd\u02c6jg\u02c6sdjg\u02c6ld\u02c6gksd\u02c6gj\u02c6sdfg\u02c6dsj\u02c6gjsd\u02c6gj\u02c6dfsjg\u02c6dsfj\u02c6djs\u02c6g kjhdkj '\n                       . 'fgaskjfdh gksjhgjkdh gjhfsdghdhgksdjhg';\n        $this->part = new Zend_Mime_Part($this->_testText);\n        $this->part->encoding = Zend_Mime::ENCODING_BASE64;\n        $this->part->type = \"text\/plain\";\n        $this->part->filename = 'test.txt';\n        $this->part->disposition = 'attachment';\n        $this->part->charset = 'iso8859-1';\n        $this->part->id = '4711';\n    }\n\n    public function testHeaders()\n    {\n        $expectedHeaders = array('Content-Type: text\/plain',\n                                 'Content-Transfer-Encoding: ' . Zend_Mime::ENCODING_BASE64,\n                                 'Content-Disposition: attachment',\n                                 'filename=\"test.txt\"',\n                                 'charset=\"iso8859-1\"',\n                                 'Content-ID: <4711>');\n\n        $actual = $this->part->getHeaders();\n\n        foreach ($expectedHeaders as $expected) {\n            $this->assertContains($expected, $actual);\n        }\n    }\n\n    public function testContentEncoding()\n    {\n        \/\/ Test with base64 encoding\n        $content = $this->part->getContent();\n        $this->assertEquals($this->_testText, base64_decode($content));\n        \/\/ Test with quotedPrintable Encoding:\n        $this->part->encoding = Zend_Mime::ENCODING_QUOTEDPRINTABLE;\n        $content = $this->part->getContent();\n        $this->assertEquals($this->_testText, quoted_printable_decode($content));\n        \/\/ Test with 8Bit encoding\n        $this->part->encoding = Zend_Mime::ENCODING_8BIT;\n        $content = $this->part->getContent();\n        $this->assertEquals($this->_testText, $content);\n    }\n    \n    public function testStreamEncoding()\n    {\n        $testfile = realpath(__FILE__);\n        $original = file_get_contents($testfile);\n\n        \/\/ Test Base64\n        $fp = fopen($testfile,'rb');\n        $this->assertTrue(is_resource($fp));\n        $part = new Zend_Mime_Part($fp);\n        $part->encoding = Zend_Mime::ENCODING_BASE64;\n        $fp2 = $part->getEncodedStream();\n        $this->assertTrue(is_resource($fp2));\n        $encoded = stream_get_contents($fp2);\n        fclose($fp);\n        $this->assertEquals(base64_decode($encoded),$original);\n        \n        \/\/ test QuotedPrintable\n        $fp = fopen($testfile,'rb');\n        $this->assertTrue(is_resource($fp));\n        $part = new Zend_Mime_Part($fp);\n        $part->encoding = Zend_Mime::ENCODING_QUOTEDPRINTABLE;\n        $fp2 = $part->getEncodedStream();\n        $this->assertTrue(is_resource($fp2));\n        $encoded = stream_get_contents($fp2);\n        fclose($fp);\n        $this->assertEquals(quoted_printable_decode($encoded),$o>\ndifference      <                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          ??????????????????>\ngot string      <<?php\n\/**\n * @package     Zend_Mime\n * @subpackage  UnitTests\n *\/\n\n\n\/**\n * Zend_Mime_Part\n *\/\nrequire_once 'Zend\/Mime\/Part.php';\n\n\/**\n * PHPUnit2 test case\n *\/\nrequire_once 'PHPUnit2\/Framework\/TestCase.php';\n\n\/**\n * @package     Zend_Mime\n * @subpackage  UnitTests\n *\/\nclass Zend_Mime_PartTest extends PHPUnit2_Framework_TestCase\n{\n    \/**\n     * MIME part test object\n     *\n     * @var Zend_Mime_Part\n     *\/\n    protected $_part = null;\n    protected $_testText;\n\n    protected function setUp()\n    {\n        $this->_testText = 'safdsafsa\u02c6lg \u02c6\u02c6gd\u02c6\u02c6 sd\u02c6jg\u02c6sdjg\u02c6ld\u02c6gksd\u02c6gj\u02c6sdfg\u02c6dsj\u02c6gjsd\u02c6gj\u02c6dfsjg\u02c6dsfj\u02c6djs\u02c6g kjhdkj '\n                       . 'fgaskjfdh gksjhgjkdh gjhfsdghdhgksdjhg';\n        $this->part = new Zend_Mime_Part($this->_testText);\n        $this->part->encoding = Zend_Mime::ENCODING_BASE64;\n        $this->part->type = \"text\/plain\";\n        $this->part->filename = 'test.txt';\n        $this->part->disposition = 'attachment';\n        $this->part->charset = 'iso8859-1';\n        $this->part->id = '4711';\n    }\n\n    public function testHeaders()\n    {\n        $expectedHeaders = array('Content-Type: text\/plain',\n                                 'Content-Transfer-Encoding: ' . Zend_Mime::ENCODING_BASE64,\n                                 'Content-Disposition: attachment',\n                                 'filename=\"test.txt\"',\n                                 'charset=\"iso8859-1\"',\n                                 'Content-ID: <4711>');\n\n        $actual = $this->part->getHeaders();\n\n        foreach ($expectedHeaders as $expected) {\n            $this->assertContains($expected, $actual);\n        }\n    }\n\n    public function testContentEncoding()\n    {\n        \/\/ Test with base64 encoding\n        $content = $this->part->getContent();\n        $this->assertEquals($this->_testText, base64_decode($content));\n        \/\/ Test with quotedPrintable Encoding:\n        $this->part->encoding = Zend_Mime::ENCODING_QUOTEDPRINTABLE;\n        $content = $this->part->getContent();\n        $this->assertEquals($this->_testText, quoted_printable_decode($content));\n        \/\/ Test with 8Bit encoding\n        $this->part->encoding = Zend_Mime::ENCODING_8BIT;\n        $content = $this->part->getContent();\n        $this->assertEquals($this->_testText, $content);\n    }\n    \n    public function testStreamEncoding()\n    {\n        $testfile = realpath(__FILE__);\n        $original = file_get_contents($testfile);\n\n        \/\/ Test Base64\n        $fp = fopen($testfile,'rb');\n        $this->assertTrue(is_resource($fp));\n        $part = new Zend_Mime_Part($fp);\n        $part->encoding = Zend_Mime::ENCODING_BASE64;\n        $fp2 = $part->getEncodedStream();\n        $this->assertTrue(is_resource($fp2));\n        $encoded = stream_get_contents($fp2);\n        fclose($fp);\n        $this->assertEquals(base64_decode($encoded),$original);\n        \n        \/\/ test QuotedPrintable\n        $fp = fopen($testfile,'rb');\n        $this->assertTrue(is_resource($fp));\n        $part = new Zend_Mime_Part($fp);\n        $part->encoding = Zend_Mime::ENCODING_QUOTEDPRINTABLE;\n        $fp2 = $part->getEncodedStream();\n        $this->assertTrue(is_resource($fp2));\n        $encoded = stream_get_contents($fp2);\n        fclose($fp);\n        $this->assertEquals(quoted_printable_decode($encoded),$original);\n    }\n}\n>\n\/webapps\/tools\/zend_framework\/tests\/Zend\/Mime\/PartTest.php:90\n\/webapps\/tools\/zend_framework\/tests\/Zend\/Mime\/AllTests.php:16\n\/webapps\/tools\/zend_framework\/tests\/Zend\/Mime\/AllTests.php:31\n\nFAILURES!\nTests: 8, Failures: 1.\n\n\n\n\n"
        },
        "priority": {
            "name": "priority",
            "type": "com.atlassian.jira.issue.priority.Priority",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/priority\/3",
                "name": "Major"
            }
        },
        "duedate": {
            "name": "duedate",
            "type": "java.util.Date"
        },
        "customfield_10022": {
            "name": "Fix Version Priority",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:select"
        },
        "watcher": {
            "name": "watcher",
            "type": "watcher",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-9\/watchers",
                "isWatching": false,
                "watchCount": 0
            }
        },
        "worklog": {
            "name": "worklog",
            "type": "worklog",
            "value": [

            ]
        },
        "status": {
            "name": "status",
            "type": "com.atlassian.jira.issue.status.Status",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/status\/6",
                "name": "Closed"
            }
        },
        "labels": {
            "name": "labels",
            "type": "com.atlassian.jira.issue.label.Label",
            "value": [

            ]
        },
        "assignee": {
            "name": "assignee",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                "name": "matthew",
                "displayName": "Matthew Weier O'Phinney",
                "active": true
            }
        },
        "links": {
            "name": "links",
            "type": "issuelinks",
            "value": [

            ]
        },
        "attachment": {
            "name": "attachment",
            "type": "attachment",
            "value": [

            ]
        },
        "sub-tasks": {
            "name": "sub-tasks",
            "type": "issuelinks",
            "value": [

            ]
        },
        "versions": {
            "name": "versions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/version\/10000",
                    "id": 10000,
                    "description": "Preview Release",
                    "name": "0.1.4",
                    "userReleaseDate": "29\/Jun\/06",
                    "archived": true,
                    "releaseDate": "2006-06-29",
                    "released": true
                }
            ]
        },
        "project": {
            "name": "project",
            "type": "com.atlassian.jira.project.Project",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/project\/ZF",
                "key": "ZF",
                "name": "Zend Framework",
                "roles": {

                }
            }
        },
        "components": {
            "name": "components",
            "type": "com.atlassian.jira.bc.project.component.ProjectComponent",
            "value": [
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/component\/10019",
                    "id": 10019,
                    "name": "Zend_Mime",
                    "description": "support class for handling multi-part MIME messages",
                    "isAssigneeTypeValid": false
                }
            ]
        },
        "comment": {
            "name": "comment",
            "type": "com.atlassian.jira.issue.fields.CommentSystemField",
            "value": [
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/10047",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=openmacnews",
                        "name": "openmacnews",
                        "displayName": "Richard",
                        "active": true
                    },
                    "body": "{noformat} \nw\/ ZF svn r650\nphp 52-dev\nOSX 10.4.6\nupgrade to PHPUnit 300a11\n\n\n% php Zend\/Mime\/AllTests.php \nPHPUnit 3.0.0alpha11 by Sebastian Bergmann.\n\n..F.....\n\nTime: 00:00\nThere was 1 failure:\n1) testStreamEncoding(Zend_Mime_PartTest)\nfailed asserting that <'<?php\n\/**\n * @package     Zend_Mime\n * @subpackage  UnitTests\n *\/\n\n\n\/**\n * Zend_Mime_Part\n *\/\nrequire_once \\'Zend\/Mime\/Part.php\\';\n\n\/**\n * PHPUnit2 test case\n *\/\nrequire_once \\'PHPUnit2\/Framework\/TestCase.php\\';\n\n\/**\n * @package     Zend_Mime\n * @subpackage  UnitTests\n *\/\nclass Zend_Mime_PartTest extends PHPUnit2_Framework_TestCase\n{\n    \/**\n     * MIME part test object\n     *\n     * @var Zend_Mime_Part\n     *\/\n    protected $_part = null;\n    protected $_testText;\n\n    protected function setUp()\n    {\n        $this->_testText = \\'safdsafsa\u02c6lg \u02c6\u02c6gd\u02c6\u02c6 sd\u02c6jg\u02c6sdjg\u02c6ld\u02c6gksd\u02c6gj\u02c6sdfg\u02c6dsj\u02c6gjsd\u02c6gj\u02c6dfsjg\u02c6dsfj\u02c6djs\u02c6g kjhdkj \\'\n                       . \\'fgaskjfdh gksjhgjkdh gjhfsdghdhgksdjhg\\';\n        $this->part = new Zend_Mime_Part($this->_testText);\n        $this->part->encoding = Zend_Mime::ENCODING_BASE64;\n        $this->part->type = \"text\/plain\";\n        $this->part->filename = \\'test.txt\\';\n        $this->part->disposition = \\'attachment\\';\n        $this->part->charset = \\'iso8859-1\\';\n        $this->part->id = \\'4711\\';\n    }\n\n    public function testHeaders()\n    {\n        $expectedHeaders = array(\\'Content-Type: text\/plain\\',\n                                 \\'Content-Transfer-Encoding: \\' . Zend_Mime::ENCODING_BASE64,\n                                 \\'Content-Disposition: attachment\\',\n                                 \\'filename=\"test.txt\"\\',\n                                 \\'charset=\"iso8859-1\"\\',\n                                 \\'Content-ID: <4711>\\');\n\n        $actual = $this->part->getHeaders();\n\n        foreach ($expectedHeaders as $expected) {\n            $this->assertContains($expected, $actual);\n        }\n    }\n\n    public function testContentEncoding()\n    {\n        \/\/ Test with base64 encoding\n        $content = $this->part->getContent();\n        $this->assertEquals($this->_testText, base64_decode($content));\n        \/\/ Test with quotedPrintable Encoding:\n        $this->part->encoding = Zend_Mime::ENCODING_QUOTEDPRINTABLE;\n        $content = $this->part->getContent();\n        $this->assertEquals($this->_testText, quoted_printable_decode($content));\n        \/\/ Test with 8Bit encoding\n        $this->part->encoding = Zend_Mime::ENCODING_8BIT;\n        $content = $this->part->getContent();\n        $this->assertEquals($this->_testText, $content);\n    }\n    \n    public function testStreamEncoding()\n    {\n        $testfile = realpath(__FILE__);\n        $original = file_get_contents($testfile);\n\n        \/\/ Test Base64\n        $fp = fopen($testfile,\\'rb\\');\n        $this->assertTrue(is_resource($fp));\n        $part = new Zend_Mime_Part($fp);\n        $part->encoding = Zend_Mime::ENCODING_BASE64;\n        $fp2 = $part->getEncodedStream();\n        $this->assertTrue(is_resource($fp2));\n        $encoded = stream_get_contents($fp2);\n        fclose($fp);\n        $this->assertEquals(base64_decode($encoded),$original);\n        \n        \/\/ test QuotedPrintable\n        $fp = fopen($testfile,\\'rb\\');\n        $this->assertTrue(is_resource($fp));\n        $part = new Zend_Mime_Part($fp);\n        $part->encoding = Zend_Mime::ENCODING_QUOTEDPRINTABLE;\n        $fp2 = $part->getEncodedStream();\n        $this->assertTrue(is_resource($fp2));\n        $encoded = stream_get_contents($fp2);\n        fclose($fp);\n        $this->assertEquals(quoted_printable_decode($encoded),$original);\n    }\n}\n'> is equal to <string:'<?php\n\/**\n * @package     Zend_Mime\n * @subpackage  UnitTests\n *\/\n\n\n\/**\n * Zend_Mime_Part\n *\/\nrequire_once \\'Zend\/Mime\/Part.php\\';\n\n\/**\n * PHPUnit2 test case\n *\/\nrequire_once \\'PHPUnit2\/Framework\/TestCase.php\\';\n\n\/**\n * @package     Zend_Mime\n * @subpackage  UnitTests\n *\/\nclass Zend_Mime_PartTest extends PHPUnit2_Framework_TestCase\n{\n    \/**\n     * MIME part test object\n     *\n     * @var Zend_Mime_Part\n     *\/\n    protected $_part = null;\n    protected $_testText;\n\n    protected function setUp()\n    {\n        $this->_testText = \\'safdsafsa\u02c6lg \u02c6\u02c6gd\u02c6\u02c6 sd\u02c6jg\u02c6sdjg\u02c6ld\u02c6gksd\u02c6gj\u02c6sdfg\u02c6dsj\u02c6gjsd\u02c6gj\u02c6dfsjg\u02c6dsfj\u02c6djs\u02c6g kjhdkj \\'\n                       . \\'fgaskjfdh gksjhgjkdh gjhfsdghdhgksdjhg\\';\n        $this->part = new Zend_Mime_Part($this->_testText);\n        $this->part->encoding = Zend_Mime::ENCODING_BASE64;\n        $this->part->type = \"text\/plain\";\n        $this->part->filename = \\'test.txt\\';\n        $this->part->disposition = \\'attachment\\';\n        $this->part->charset = \\'iso8859-1\\';\n        $this->part->id = \\'4711\\';\n    }\n\n    public function testHeaders()\n    {\n        $expectedHeaders = array(\\'Content-Type: text\/plain\\',\n                                 \\'Content-Transfer-Encoding: \\' . Zend_Mime::ENCODING_BASE64,\n                                 \\'Content-Disposition: attachment\\',\n                                 \\'filename=\"test.txt\"\\',\n                                 \\'charset=\"iso8859-1\"\\',\n                                 \\'Content-ID: <4711>\\');\n\n        $actual = $this->part->getHeaders();\n\n        foreach ($expectedHeaders as $expected) {\n            $this->assertContains($expected, $actual);\n        }\n    }\n\n    public function testContentEncoding()\n    {\n        \/\/ Test with base64 encoding\n        $content = $this->part->getContent();\n        $this->assertEquals($this->_testText, base64_decode($content));\n        \/\/ Test with quotedPrintable Encoding:\n        $this->part->encoding = Zend_Mime::ENCODING_QUOTEDPRINTABLE;\n        $content = $this->part->getContent();\n        $this->assertEquals($this->_testText, quoted_printable_decode($content));\n        \/\/ Test with 8Bit encoding\n        $this->part->encoding = Zend_Mime::ENCODING_8BIT;\n        $content = $this->part->getContent();\n        $this->assertEquals($this->_testText, $content);\n    }\n    \n    public function testStreamEncoding()\n    {\n        $testfile = realpath(__FILE__);\n        $original = file_get_contents($testfile);\n\n        \/\/ Test Base64\n        $fp = fopen($testfile,\\'rb\\');\n        $this->assertTrue(is_resource($fp));\n        $part = new Zend_Mime_Part($fp);\n        $part->encoding = Zend_Mime::ENCODING_BASE64;\n        $fp2 = $part->getEncodedStream();\n        $this->assertTrue(is_resource($fp2));\n        $encoded = stream_get_contents($fp2);\n        fclose($fp);\n        $this->assertEquals(base64_decode($encoded),$original);\n        \n        \/\/ test QuotedPrintable\n        $fp = fopen($testfile,\\'rb\\');\n        $this->assertTrue(is_resource($fp));\n        $part = new Zend_Mime_Part($fp);\n        $part->encoding = Zend_Mime::ENCODING_QUOTEDPRINTABLE;\n        $fp2 = $part->getEncodedStream();\n        $this->assertTrue(is_resource($fp2));\n        $encoded = stream_get_contents($fp2);\n        fclose($fp);\n        $this->assertEquals(quoted_printable_decode($encoded),$o'>\nexpected string <<?php\n\/**\n * @package     Zend_Mime\n * @subpackage  UnitTests\n *\/\n\n\n\/**\n * Zend_Mime_Part\n *\/\nrequire_once 'Zend\/Mime\/Part.php';\n\n\/**\n * PHPUnit2 test case\n *\/\nrequire_once 'PHPUnit2\/Framework\/TestCase.php';\n\n\/**\n * @package     Zend_Mime\n * @subpackage  UnitTests\n *\/\nclass Zend_Mime_PartTest extends PHPUnit2_Framework_TestCase\n{\n    \/**\n     * MIME part test object\n     *\n     * @var Zend_Mime_Part\n     *\/\n    protected $_part = null;\n    protected $_testText;\n\n    protected function setUp()\n    {\n        $this->_testText = 'safdsafsa\u02c6lg \u02c6\u02c6gd\u02c6\u02c6 sd\u02c6jg\u02c6sdjg\u02c6ld\u02c6gksd\u02c6gj\u02c6sdfg\u02c6dsj\u02c6gjsd\u02c6gj\u02c6dfsjg\u02c6dsfj\u02c6djs\u02c6g kjhdkj '\n                       . 'fgaskjfdh gksjhgjkdh gjhfsdghdhgksdjhg';\n        $this->part = new Zend_Mime_Part($this->_testText);\n        $this->part->encoding = Zend_Mime::ENCODING_BASE64;\n        $this->part->type = \"text\/plain\";\n        $this->part->filename = 'test.txt';\n        $this->part->disposition = 'attachment';\n        $this->part->charset = 'iso8859-1';\n        $this->part->id = '4711';\n    }\n\n    public function testHeaders()\n    {\n        $expectedHeaders = array('Content-Type: text\/plain',\n                                 'Content-Transfer-Encoding: ' . Zend_Mime::ENCODING_BASE64,\n                                 'Content-Disposition: attachment',\n                                 'filename=\"test.txt\"',\n                                 'charset=\"iso8859-1\"',\n                                 'Content-ID: <4711>');\n\n        $actual = $this->part->getHeaders();\n\n        foreach ($expectedHeaders as $expected) {\n            $this->assertContains($expected, $actual);\n        }\n    }\n\n    public function testContentEncoding()\n    {\n        \/\/ Test with base64 encoding\n        $content = $this->part->getContent();\n        $this->assertEquals($this->_testText, base64_decode($content));\n        \/\/ Test with quotedPrintable Encoding:\n        $this->part->encoding = Zend_Mime::ENCODING_QUOTEDPRINTABLE;\n        $content = $this->part->getContent();\n        $this->assertEquals($this->_testText, quoted_printable_decode($content));\n        \/\/ Test with 8Bit encoding\n        $this->part->encoding = Zend_Mime::ENCODING_8BIT;\n        $content = $this->part->getContent();\n        $this->assertEquals($this->_testText, $content);\n    }\n    \n    public function testStreamEncoding()\n    {\n        $testfile = realpath(__FILE__);\n        $original = file_get_contents($testfile);\n\n        \/\/ Test Base64\n        $fp = fopen($testfile,'rb');\n        $this->assertTrue(is_resource($fp));\n        $part = new Zend_Mime_Part($fp);\n        $part->encoding = Zend_Mime::ENCODING_BASE64;\n        $fp2 = $part->getEncodedStream();\n        $this->assertTrue(is_resource($fp2));\n        $encoded = stream_get_contents($fp2);\n        fclose($fp);\n        $this->assertEquals(base64_decode($encoded),$original);\n        \n        \/\/ test QuotedPrintable\n        $fp = fopen($testfile,'rb');\n        $this->assertTrue(is_resource($fp));\n        $part = new Zend_Mime_Part($fp);\n        $part->encoding = Zend_Mime::ENCODING_QUOTEDPRINTABLE;\n        $fp2 = $part->getEncodedStream();\n        $this->assertTrue(is_resource($fp2));\n        $encoded = stream_get_contents($fp2);\n        fclose($fp);\n        $this->assertEquals(quoted_printable_decode($encoded),$o>\ndifferencengot string      <<?php\n\/**\n * @package     Zend_Mime\n * @subpackage  UnitTests\n *\/\n\n\n\/**\n * Zend_Mime_Part\n *\/\nrequire_once 'Zend\/Mime\/Part.php';\n\n\/**\n * PHPUnit2 test case\n *\/\nrequire_once 'PHPUnit2\/Framework\/TestCase.php';\n\n\/**\n * @package     Zend_Mime\n * @subpackage  UnitTests\n *\/\nclass Zend_Mime_PartTest extends PHPUnit2_Framework_TestCase\n{\n    \/**\n     * MIME part test object\n     *\n     * @var Zend_Mime_Part\n     *\/\n    protected $_part = null;\n    protected $_testText;\n\n    protected function setUp()\n    {\n        $this->_testText = 'safdsafsa\u02c6lg \u02c6\u02c6gd\u02c6\u02c6 sd\u02c6jg\u02c6sdjg\u02c6ld\u02c6gksd\u02c6gj\u02c6sdfg\u02c6dsj\u02c6gjsd\u02c6gj\u02c6dfsjg\u02c6dsfj\u02c6djs\u02c6g kjhdkj '\n                       . 'fgaskjfdh gksjhgjkdh gjhfsdghdhgksdjhg';\n        $this->part = new Zend_Mime_Part($this->_testText);\n        $this->part->encoding = Zend_Mime::ENCODING_BASE64;\n        $this->part->type = \"text\/plain\";\n        $this->part->filename = 'test.txt';\n        $this->part->disposition = 'attachment';\n        $this->part->charset = 'iso8859-1';\n        $this->part->id = '4711';\n    }\n\n    public function testHeaders()\n    {\n        $expectedHeaders = array('Content-Type: text\/plain',\n                                 'Content-Transfer-Encoding: ' . Zend_Mime::ENCODING_BASE64,\n                                 'Content-Disposition: attachment',\n                                 'filename=\"test.txt\"',\n                                 'charset=\"iso8859-1\"',\n                                 'Content-ID: <4711>');\n\n        $actual = $this->part->getHeaders();\n\n        foreach ($expectedHeaders as $expected) {\n            $this->assertContains($expected, $actual);\n        }\n    }\n\n    public function testContentEncoding()\n    {\n        \/\/ Test with base64 encoding\n        $content = $this->part->getContent();\n        $this->assertEquals($this->_testText, base64_decode($content));\n        \/\/ Test with quotedPrintable Encoding:\n        $this->part->encoding = Zend_Mime::ENCODING_QUOTEDPRINTABLE;\n        $content = $this->part->getContent();\n        $this->assertEquals($this->_testText, quoted_printable_decode($content));\n        \/\/ Test with 8Bit encoding\n        $this->part->encoding = Zend_Mime::ENCODING_8BIT;\n        $content = $this->part->getContent();\n        $this->assertEquals($this->_testText, $content);\n    }\n    \n    public function testStreamEncoding()\n    {\n        $testfile = realpath(__FILE__);\n        $original = file_get_contents($testfile);\n\n        \/\/ Test Base64\n        $fp = fopen($testfile,'rb');\n        $this->assertTrue(is_resource($fp));\n        $part = new Zend_Mime_Part($fp);\n        $part->encoding = Zend_Mime::ENCODING_BASE64;\n        $fp2 = $part->getEncodedStream();\n        $this->assertTrue(is_resource($fp2));\n        $encoded = stream_get_contents($fp2);\n        fclose($fp);\n        $this->assertEquals(base64_decode($encoded),$original);\n        \n        \/\/ test QuotedPrintable\n        $fp = fopen($testfile,'rb');\n        $this->assertTrue(is_resource($fp));\n        $part = new Zend_Mime_Part($fp);\n        $part->encoding = Zend_Mime::ENCODING_QUOTEDPRINTABLE;\n        $fp2 = $part->getEncodedStream();\n        $this->assertTrue(is_resource($fp2));\n        $encoded = stream_get_contents($fp2);\n        fclose($fp);\n        $this->assertEquals(quoted_printable_decode($encoded),$original);\n    }\n}\n>\n\/webapps\/tools\/zend_framework\/tests\/Zend\/Mime\/PartTest.php:90\n\/webapps\/tools\/zend_framework\/tests\/Zend\/Mime\/AllTests.php:16\n\/webapps\/tools\/zend_framework\/tests\/Zend\/Mime\/AllTests.php:31\n\nFAILURES!\nTests: 8, Failures: 1.\n{noformat} \n",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=openmacnews",
                        "name": "openmacnews",
                        "displayName": "Richard",
                        "active": true
                    },
                    "created": "2006-06-17T16:30:17.000+0000",
                    "updated": "2006-06-17T16:30:17.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/10109",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=user00265",
                        "name": "user00265",
                        "displayName": "Elisamuel Resto",
                        "active": true
                    },
                    "body": "Not the same error, at least, I doesn't look like it, but it is a unit test failure, so I'll update this.\n\nVersions:\n{{php -i}}\n{noformat}PHP Version => 5.1.4-pl0-gentoo\n\nSystem => Linux user00265 2.6.16-gentoo-r9 #1 SMP PREEMPT Mon Jun 19 04:51:19 AST 2006 i686\nBuild Date => Jun 20 2006 17:43:25\nConfigure Command =>  '.\/configure' '--prefix=\/usr\/lib\/php5' '--sysconfdir=\/etc' '--cache-file=.\/config.cache' '--enable-cli' '--disable-cgi' '--with-config-file-path=\/etc\/php\/cli-php5' '--with-config-file-scan-dir=\/etc\/php\/cli-php5\/ext-active' '--without-pear' '--enable-bcmath' '--with-bz2' '--enable-calendar' '--with-curl' '--with-curlwrappers' '--disable-dbase' '--enable-exif' '--without-fbsql' '--without-fdftk' '--disable-filepro' '--enable-ftp' '--with-gettext' '--with-gmp' '--without-hwapi' '--without-informix' '--without-kerberos' '--enable-mbstring' '--with-mcrypt' '--enable-memory-limit' '--with-mhash' '--without-ming' '--without-msql' '--without-mssql' '--with-ncurses' '--with-openssl' '--with-openssl-dir=\/usr' '--enable-pcntl' '--with-pgsql' '--with-pspell' '--without-recode' '--disable-shmop' '--with-snmp' '--enable-soap' '--enable-sockets' '--without-sybase' '--without-sybase-ct' '--enable-sysvmsg' '--enable-sysvsem' '--enable-sysvshm' '--with-tidy' '--disable-tokenizer' '--enable-wddx' '--with-xmlrpc' '--with-xsl' '--with-zlib' '--disable-debug' '--enable-dba' '--with-cdb' '--with-db4' '--without-flatfile' '--with-gdbm' '--with-inifile' '--without-qdbm' '--with-freetype-dir=\/usr' '--with-t1lib=\/usr' '--disable-gd-jis-conv' '--enable-gd-native-ttf' '--with-jpeg-dir=\/usr' '--with-png-dir=\/usr' '--with-xpm-dir=\/usr\/X11R6' '--with-gd' '--with-imap' '--with-imap-ssl' '--with-ldap' '--without-ldap-sasl' '--with-mysql=\/usr\/lib\/mysql' '--with-mysql-sock=\/var\/run\/mysqld\/mysqld.sock' '--with-mysqli=\/usr\/bin\/mysql_config' '--without-pdo-dblib' '--without-pdo-firebird' '--with-pdo-mysql=\/usr' '--without-pdo-odbc' '--with-pdo-pgsql' '--with-readline' '--without-libedit' '--without-mm' '--enable-sqlite-utf8' '--with-pic' '--enable-maintainer-zts'\nServer API => Command Line Interface\nVirtual Directory Support => enabled\nConfiguration File (php.ini) Path => \/etc\/php\/cli-php5\/php.ini\nScan this dir for additional .ini files => \/etc\/php\/cli-php5\/ext-active\nadditional .ini files parsed => \/etc\/php\/cli-php5\/ext-active\/zip.ini\n\nPHP API => 20041225\nPHP Extension => 20050922\nZend Extension => 220051025\nDebug Build => no\nThread Safety => enabled\nZend Memory Manager => enabled\nIPv6 Support => enabled{noformat}\n\n\n{{httpd -V}}\n{noformat}user00265 ~ # apache2 -V\nServer version: Apache\/2.0.55\nServer built:   Jun 19 2006 20:56:35\nServer's Module Magic Number: 20020903:11\nArchitecture:   32-bit\nServer compiled with....\n -D APACHE_MPM_DIR=\"server\/mpm\/worker\"\n -D APR_HAS_SENDFILE\n -D APR_HAS_MMAP\n -D APR_HAVE_IPV6 (IPv4-mapped addresses enabled)\n -D APR_USE_SYSVSEM_SERIALIZE\n -D APR_USE_PTHREAD_SERIALIZE\n -D SINGLE_LISTEN_UNSERIALIZED_ACCEPT\n -D APR_HAS_OTHER_CHILD\n -D AP_HAVE_RELIABLE_PIPED_LOGS\n -D HTTPD_ROOT=\"\/usr\"\n -D SUEXEC_BIN=\"\/usr\/sbin\/suexec2\"\n -D DEFAULT_SCOREBOARD=\"logs\/apache_runtime_status\"\n -D DEFAULT_ERRORLOG=\"logs\/error_log\"\n -D AP_TYPES_CONFIG_FILE=\"\/etc\/apache2\/mime.types\"\n -D SERVER_CONFIG_FILE=\"\/etc\/apache2\/httpd.conf\"{noformat}\n\n\n{{svn info | grep -i revision}}\n{noformat}ryuji@user00265 ~\/Zend\/Framework $ svn info | grep -i revision\nRevision: 677{noformat}\n----\nError returned:\n{noformat}ryuji@user00265 ~\/Zend\/Framework\/tests $ php Zend\/Mime\/AllTests.php\nPHPUnit 2.3.6 by Sebastian Bergmann.\n\n..F.....\n\nTime: 0.005915\nThere was 1 failure:\n1) testStreamEncoding(Zend_Mime_PartTest)\nexpected: <...> but was: <...riginal);\n    }\n}\n>\n\/home\/ryuji\/Zend\/Framework\/tests\/Zend\/Mime\/PartTest.php:90\n\/home\/ryuji\/Zend\/Framework\/tests\/Zend\/Mime\/AllTests.php:16\n\/home\/ryuji\/Zend\/Framework\/tests\/Zend\/Mime\/AllTests.php:31\n\nFAILURES!!!\nTests run: 8, Failures: 1, Errors: 0, Incomplete Tests: 0.{noformat}",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=user00265",
                        "name": "user00265",
                        "displayName": "Elisamuel Resto",
                        "active": true
                    },
                    "created": "2006-06-21T06:30:37.000+0000",
                    "updated": "2006-06-21T06:30:37.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/10126",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                        "name": "matthew",
                        "displayName": "Matthew Weier O'Phinney",
                        "active": true
                    },
                    "body": "I found a syntax issue in the B64Filter (base64 stream conversion filter) where it was using a concatenation operator instead of addition operator. This fix was applied in patch 689.\n\nPlease test and update the ticket to indicate whether this corrects the testing issue.\n\nThanks!\n",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                        "name": "matthew",
                        "displayName": "Matthew Weier O'Phinney",
                        "active": true
                    },
                    "created": "2006-06-21T21:16:44.000+0000",
                    "updated": "2006-06-21T21:16:44.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/10130",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=openmacnews",
                        "name": "openmacnews",
                        "displayName": "Richard",
                        "active": true
                    },
                    "body": "w\/ ZF Revision: 689, still problems ....\n\n\/webapps\/tools\/zend_framework\/tests  > php Zend\/Mime\/AllTests.php\nPHPUnit 3.0.0alpha11 by Sebastian Bergmann.\n\n..F.....\n\nTime: 00:00\nThere was 1 failure:\n1) testStreamEncoding(Zend_Mime_PartTest)\nfailed asserting that <'<?php\n\/**\n * @package     Zend_Mime\n * @subpackage  UnitTests\n *\/\n\n\n\/**\n * Zend_Mime_Part\n *\/\nrequire_once \\'Zend\/Mime\/Part.php\\';\n\n\/**\n * PHPUnit2 test case\n *\/\nrequire_once \\'PHPUnit2\/Framework\/TestCase.php\\';\n\n\/**\n * @package     Zend_Mime\n * @subpackage  UnitTests\n *\/\nclass Zend_Mime_PartTest extends PHPUnit2_Framework_TestCase\n{\n    \/**\n     * MIME part test object\n     *\n     * @var Zend_Mime_Part\n     *\/\n    protected $_part = null;\n    protected $_testText;\n\n    protected function setUp()\n    {\n        $this->_testText = \\'safdsafsa\u02c6lg \u02c6\u02c6gd\u02c6\u02c6 sd\u02c6jg\u02c6sdjg\u02c6ld\u02c6gksd\u02c6gj\u02c6sdfg\u02c6dsj\u02c6gjsd\u02c6gj\u02c6dfsjg\u02c6dsfj\u02c6djs\u02c6g kjhdkj \\'\n                       . \\'fgaskjfdh gksjhgjkdh gjhfsdghdhgksdjhg\\';\n        $this->part = new Zend_Mime_Part($this->_testText);\n        $this->part->encoding = Zend_Mime::ENCODING_BASE64;\n        $this->part->type = \"text\/plain\";\n        $this->part->filename = \\'test.txt\\';\n        $this->part->disposition = \\'attachment\\';\n        $this->part->charset = \\'iso8859-1\\';\n        $this->part->id = \\'4711\\';\n    }\n\n    public function testHeaders()\n    {\n        $expectedHeaders = array(\\'Content-Type: text\/plain\\',\n                                 \\'Content-Transfer-Encoding: \\' . Zend_Mime::ENCODING_BASE64,\n                                 \\'Content-Disposition: attachment\\',\n                                 \\'filename=\"test.txt\"\\',\n                                 \\'charset=\"iso8859-1\"\\',\n                                 \\'Content-ID: <4711>\\');\n\n        $actual = $this->part->getHeaders();\n\n        foreach ($expectedHeaders as $expected) {\n            $this->assertContains($expected, $actual);\n        }\n    }\n\n    public function testContentEncoding()\n    {\n        \/\/ Test with base64 encoding\n        $content = $this->part->getContent();\n        $this->assertEquals($this->_testText, base64_decode($content));\n        \/\/ Test with quotedPrintable Encoding:\n        $this->part->encoding = Zend_Mime::ENCODING_QUOTEDPRINTABLE;\n        $content = $this->part->getContent();\n        $this->assertEquals($this->_testText, quoted_printable_decode($content));\n        \/\/ Test with 8Bit encoding\n        $this->part->encoding = Zend_Mime::ENCODING_8BIT;\n        $content = $this->part->getContent();\n        $this->assertEquals($this->_testText, $content);\n    }\n    \n    public function testStreamEncoding()\n    {\n        $testfile = realpath(__FILE__);\n        $original = file_get_contents($testfile);\n\n        \/\/ Test Base64\n        $fp = fopen($testfile,\\'rb\\');\n        $this->assertTrue(is_resource($fp));\n        $part = new Zend_Mime_Part($fp);\n        $part->encoding = Zend_Mime::ENCODING_BASE64;\n        $fp2 = $part->getEncodedStream();\n        $this->assertTrue(is_resource($fp2));\n        $encoded = stream_get_contents($fp2);\n        fclose($fp);\n        $this->assertEquals(base64_decode($encoded),$original);\n        \n        \/\/ test QuotedPrintable\n        $fp = fopen($testfile,\\'rb\\');\n        $this->assertTrue(is_resource($fp));\n        $part = new Zend_Mime_Part($fp);\n        $part->encoding = Zend_Mime::ENCODING_QUOTEDPRINTABLE;\n        $fp2 = $part->getEncodedStream();\n        $this->assertTrue(is_resource($fp2));\n        $encoded = stream_get_contents($fp2);\n        fclose($fp);\n        $this->assertEquals(quoted_printable_decode($encoded),$original);\n    }\n}\n'> is equal to <string:'<?php\n\/**\n * @package     Zend_Mime\n * @subpackage  UnitTests\n *\/\n\n\n\/**\n * Zend_Mime_Part\n *\/\nrequire_once \\'Zend\/Mime\/Part.php\\';\n\n\/**\n * PHPUnit2 test case\n *\/\nrequire_once \\'PHPUnit2\/Framework\/TestCase.php\\';\n\n\/**\n * @package     Zend_Mime\n * @subpackage  UnitTests\n *\/\nclass Zend_Mime_PartTest extends PHPUnit2_Framework_TestCase\n{\n    \/**\n     * MIME part test object\n     *\n     * @var Zend_Mime_Part\n     *\/\n    protected $_part = null;\n    protected $_testText;\n\n    protected function setUp()\n    {\n        $this->_testText = \\'safdsafsa\u02c6lg \u02c6\u02c6gd\u02c6\u02c6 sd\u02c6jg\u02c6sdjg\u02c6ld\u02c6gksd\u02c6gj\u02c6sdfg\u02c6dsj\u02c6gjsd\u02c6gj\u02c6dfsjg\u02c6dsfj\u02c6djs\u02c6g kjhdkj \\'\n                       . \\'fgaskjfdh gksjhgjkdh gjhfsdghdhgksdjhg\\';\n        $this->part = new Zend_Mime_Part($this->_testText);\n        $this->part->encoding = Zend_Mime::ENCODING_BASE64;\n        $this->part->type = \"text\/plain\";\n        $this->part->filename = \\'test.txt\\';\n        $this->part->disposition = \\'attachment\\';\n        $this->part->charset = \\'iso8859-1\\';\n        $this->part->id = \\'4711\\';\n    }\n\n    public function testHeaders()\n    {\n        $expectedHeaders = array(\\'Content-Type: text\/plain\\',\n                                 \\'Content-Transfer-Encoding: \\' . Zend_Mime::ENCODING_BASE64,\n                                 \\'Content-Disposition: attachment\\',\n                                 \\'filename=\"test.txt\"\\',\n                                 \\'charset=\"iso8859-1\"\\',\n                                 \\'Content-ID: <4711>\\');\n\n        $actual = $this->part->getHeaders();\n\n        foreach ($expectedHeaders as $expected) {\n            $this->assertContains($expected, $actual);\n        }\n    }\n\n    public function testContentEncoding()\n    {\n        \/\/ Test with base64 encoding\n        $content = $this->part->getContent();\n        $this->assertEquals($this->_testText, base64_decode($content));\n        \/\/ Test with quotedPrintable Encoding:\n        $this->part->encoding = Zend_Mime::ENCODING_QUOTEDPRINTABLE;\n        $content = $this->part->getContent();\n        $this->assertEquals($this->_testText, quoted_printable_decode($content));\n        \/\/ Test with 8Bit encoding\n        $this->part->encoding = Zend_Mime::ENCODING_8BIT;\n        $content = $this->part->getContent();\n        $this->assertEquals($this->_testText, $content);\n    }\n    \n    public function testStreamEncoding()\n    {\n        $testfile = realpath(__FILE__);\n        $original = file_get_contents($testfile);\n\n        \/\/ Test Base64\n        $fp = fopen($testfile,\\'rb\\');\n        $this->assertTrue(is_resource($fp));\n        $part = new Zend_Mime_Part($fp);\n        $part->encoding = Zend_Mime::ENCODING_BASE64;\n        $fp2 = $part->getEncodedStream();\n        $this->assertTrue(is_resource($fp2));\n        $encoded = stream_get_contents($fp2);\n        fclose($fp);\n        $this->assertEquals(base64_decode($encoded),$original);\n        \n        \/\/ test QuotedPrintable\n        $fp = fopen($testfile,\\'rb\\');\n        $this->assertTrue(is_resource($fp));\n        $part = new Zend_Mime_Part($fp);\n        $part->encoding = Zend_Mime::ENCODING_QUOTEDPRINTABLE;\n        $fp2 = $part->getEncodedStream();\n        $this->assertTrue(is_resource($fp2));\n        $encoded = stream_get_contents($fp2);\n        fclose($fp);\n        $this->assertEquals(quoted_printable_decode($encoded),$o'>\nexpected string <<?php\n\/**\n * @package     Zend_Mime\n * @subpackage  UnitTests\n *\/\n\n\n\/**\n * Zend_Mime_Part\n *\/\nrequire_once 'Zend\/Mime\/Part.php';\n\n\/**\n * PHPUnit2 test case\n *\/\nrequire_once 'PHPUnit2\/Framework\/TestCase.php';\n\n\/**\n * @package     Zend_Mime\n * @subpackage  UnitTests\n *\/\nclass Zend_Mime_PartTest extends PHPUnit2_Framework_TestCase\n{\n    \/**\n     * MIME part test object\n     *\n     * @var Zend_Mime_Part\n     *\/\n    protected $_part = null;\n    protected $_testText;\n\n    protected function setUp()\n    {\n        $this->_testText = 'safdsafsa\u02c6lg \u02c6\u02c6gd\u02c6\u02c6 sd\u02c6jg\u02c6sdjg\u02c6ld\u02c6gksd\u02c6gj\u02c6sdfg\u02c6dsj\u02c6gjsd\u02c6gj\u02c6dfsjg\u02c6dsfj\u02c6djs\u02c6g kjhdkj '\n                       . 'fgaskjfdh gksjhgjkdh gjhfsdghdhgksdjhg';\n        $this->part = new Zend_Mime_Part($this->_testText);\n        $this->part->encoding = Zend_Mime::ENCODING_BASE64;\n        $this->part->type = \"text\/plain\";\n        $this->part->filename = 'test.txt';\n        $this->part->disposition = 'attachment';\n        $this->part->charset = 'iso8859-1';\n        $this->part->id = '4711';\n    }\n\n    public function testHeaders()\n    {\n        $expectedHeaders = array('Content-Type: text\/plain',\n                                 'Content-Transfer-Encoding: ' . Zend_Mime::ENCODING_BASE64,\n                                 'Content-Disposition: attachment',\n                                 'filename=\"test.txt\"',\n                                 'charset=\"iso8859-1\"',\n                                 'Content-ID: <4711>');\n\n        $actual = $this->part->getHeaders();\n\n        foreach ($expectedHeaders as $expected) {\n            $this->assertContains($expected, $actual);\n        }\n    }\n\n    public function testContentEncoding()\n    {\n        \/\/ Test with base64 encoding\n        $content = $this->part->getContent();\n        $this->assertEquals($this->_testText, base64_decode($content));\n        \/\/ Test with quotedPrintable Encoding:\n        $this->part->encoding = Zend_Mime::ENCODING_QUOTEDPRINTABLE;\n        $content = $this->part->getContent();\n        $this->assertEquals($this->_testText, quoted_printable_decode($content));\n        \/\/ Test with 8Bit encoding\n        $this->part->encoding = Zend_Mime::ENCODING_8BIT;\n        $content = $this->part->getContent();\n        $this->assertEquals($this->_testText, $content);\n    }\n    \n    public function testStreamEncoding()\n    {\n        $testfile = realpath(__FILE__);\n        $original = file_get_contents($testfile);\n\n        \/\/ Test Base64\n        $fp = fopen($testfile,'rb');\n        $this->assertTrue(is_resource($fp));\n        $part = new Zend_Mime_Part($fp);\n        $part->encoding = Zend_Mime::ENCODING_BASE64;\n        $fp2 = $part->getEncodedStream();\n        $this->assertTrue(is_resource($fp2));\n        $encoded = stream_get_contents($fp2);\n        fclose($fp);\n        $this->assertEquals(base64_decode($encoded),$original);\n        \n        \/\/ test QuotedPrintable\n        $fp = fopen($testfile,'rb');\n        $this->assertTrue(is_resource($fp));\n        $part = new Zend_Mime_Part($fp);\n        $part->encoding = Zend_Mime::ENCODING_QUOTEDPRINTABLE;\n        $fp2 = $part->getEncodedStream();\n        $this->assertTrue(is_resource($fp2));\n        $encoded = stream_get_contents($fp2);\n        fclose($fp);\n        $this->assertEquals(quoted_printable_decode($encoded),$o>\ndifferencengot string      <<?php\n\/**\n * @package     Zend_Mime\n * @subpackage  UnitTests\n *\/\n\n\n\/**\n * Zend_Mime_Part\n *\/\nrequire_once 'Zend\/Mime\/Part.php';\n\n\/**\n * PHPUnit2 test case\n *\/\nrequire_once 'PHPUnit2\/Framework\/TestCase.php';\n\n\/**\n * @package     Zend_Mime\n * @subpackage  UnitTests\n *\/\nclass Zend_Mime_PartTest extends PHPUnit2_Framework_TestCase\n{\n    \/**\n     * MIME part test object\n     *\n     * @var Zend_Mime_Part\n     *\/\n    protected $_part = null;\n    protected $_testText;\n\n    protected function setUp()\n    {\n        $this->_testText = 'safdsafsa\u02c6lg \u02c6\u02c6gd\u02c6\u02c6 sd\u02c6jg\u02c6sdjg\u02c6ld\u02c6gksd\u02c6gj\u02c6sdfg\u02c6dsj\u02c6gjsd\u02c6gj\u02c6dfsjg\u02c6dsfj\u02c6djs\u02c6g kjhdkj '\n                       . 'fgaskjfdh gksjhgjkdh gjhfsdghdhgksdjhg';\n        $this->part = new Zend_Mime_Part($this->_testText);\n        $this->part->encoding = Zend_Mime::ENCODING_BASE64;\n        $this->part->type = \"text\/plain\";\n        $this->part->filename = 'test.txt';\n        $this->part->disposition = 'attachment';\n        $this->part->charset = 'iso8859-1';\n        $this->part->id = '4711';\n    }\n\n    public function testHeaders()\n    {\n        $expectedHeaders = array('Content-Type: text\/plain',\n                                 'Content-Transfer-Encoding: ' . Zend_Mime::ENCODING_BASE64,\n                                 'Content-Disposition: attachment',\n                                 'filename=\"test.txt\"',\n                                 'charset=\"iso8859-1\"',\n                                 'Content-ID: <4711>');\n\n        $actual = $this->part->getHeaders();\n\n        foreach ($expectedHeaders as $expected) {\n            $this->assertContains($expected, $actual);\n        }\n    }\n\n    public function testContentEncoding()\n    {\n        \/\/ Test with base64 encoding\n        $content = $this->part->getContent();\n        $this->assertEquals($this->_testText, base64_decode($content));\n        \/\/ Test with quotedPrintable Encoding:\n        $this->part->encoding = Zend_Mime::ENCODING_QUOTEDPRINTABLE;\n        $content = $this->part->getContent();\n        $this->assertEquals($this->_testText, quoted_printable_decode($content));\n        \/\/ Test with 8Bit encoding\n        $this->part->encoding = Zend_Mime::ENCODING_8BIT;\n        $content = $this->part->getContent();\n        $this->assertEquals($this->_testText, $content);\n    }\n    \n    public function testStreamEncoding()\n    {\n        $testfile = realpath(__FILE__);\n        $original = file_get_contents($testfile);\n\n        \/\/ Test Base64\n        $fp = fopen($testfile,'rb');\n        $this->assertTrue(is_resource($fp));\n        $part = new Zend_Mime_Part($fp);\n        $part->encoding = Zend_Mime::ENCODING_BASE64;\n        $fp2 = $part->getEncodedStream();\n        $this->assertTrue(is_resource($fp2));\n        $encoded = stream_get_contents($fp2);\n        fclose($fp);\n        $this->assertEquals(base64_decode($encoded),$original);\n        \n        \/\/ test QuotedPrintable\n        $fp = fopen($testfile,'rb');\n        $this->assertTrue(is_resource($fp));\n        $part = new Zend_Mime_Part($fp);\n        $part->encoding = Zend_Mime::ENCODING_QUOTEDPRINTABLE;\n        $fp2 = $part->getEncodedStream();\n        $this->assertTrue(is_resource($fp2));\n        $encoded = stream_get_contents($fp2);\n        fclose($fp);\n        $this->assertEquals(quoted_printable_decode($encoded),$original);\n    }\n}\n>\n\/webapps\/tools\/zend_framework\/tests\/Zend\/Mime\/PartTest.php:90\n\/webapps\/tools\/zend_framework\/tests\/Zend\/Mime\/AllTests.php:16\n\/webapps\/tools\/zend_framework\/tests\/Zend\/Mime\/AllTests.php:31\n\nFAILURES!\nTests: 8, Failures: 1.\n",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=openmacnews",
                        "name": "openmacnews",
                        "displayName": "Richard",
                        "active": true
                    },
                    "created": "2006-06-21T22:32:37.000+0000",
                    "updated": "2006-06-21T22:32:37.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/10139",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                        "name": "matthew",
                        "displayName": "Matthew Weier O'Phinney",
                        "active": true
                    },
                    "body": "Patch 692 refactors the encoding to use native PHP stream conversion filters. Please update, run tests, and report the status of this fix.",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                        "name": "matthew",
                        "displayName": "Matthew Weier O'Phinney",
                        "active": true
                    },
                    "created": "2006-06-22T09:20:49.000+0000",
                    "updated": "2006-06-22T09:20:49.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/10141",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=openmacnews",
                        "name": "openmacnews",
                        "displayName": "Richard",
                        "active": true
                    },
                    "body": "w\/ ZF r692,\n\nphp Zend\/Mime\/AllTests.php\nPHPUnit 3.0.0alpha11 by Sebastian Bergmann.\n\n........\n\nTime: 00:00\n\nOK (8 tests)\n\n\nwhich, if it's expected, looks like the issue is fixed.\n\nthx,\n\nrichard",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=openmacnews",
                        "name": "openmacnews",
                        "displayName": "Richard",
                        "active": true
                    },
                    "created": "2006-06-22T09:58:54.000+0000",
                    "updated": "2006-06-22T09:58:54.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/10144",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                        "name": "matthew",
                        "displayName": "Matthew Weier O'Phinney",
                        "active": true
                    },
                    "body": "Fixed with patch 692.",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                        "name": "matthew",
                        "displayName": "Matthew Weier O'Phinney",
                        "active": true
                    },
                    "created": "2006-06-22T10:24:37.000+0000",
                    "updated": "2006-06-22T10:24:37.000+0000"
                }
            ]
        }
    },
    "transitions": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-9\/transitions"
}