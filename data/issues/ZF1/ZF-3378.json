{
    "expand": "html",
    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-3378",
    "key": "ZF-3378",
    "fields": {
        "summary": {
            "name": "summary",
            "type": "java.lang.String",
            "value": "Zend_Session allow invalid session ids"
        },
        "timetracking": {
            "name": "timetracking",
            "type": "com.atlassian.jira.issue.fields.TimeTrackingSystemField"
        },
        "issuetype": {
            "name": "issuetype",
            "type": "com.atlassian.jira.issue.issuetype.IssueType",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issueType\/1",
                "name": "Bug",
                "subtask": false
            }
        },
        "votes": {
            "name": "votes",
            "type": "com.atlassian.jira.issue.fields.VotesSystemField",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-3378\/votes",
                "votes": 3,
                "hasVoted": false
            }
        },
        "security": {
            "name": "security",
            "type": "com.atlassian.jira.issue.security.IssueSecurityLevel"
        },
        "resolution": {
            "name": "resolution",
            "type": "com.atlassian.jira.issue.resolution.Resolution",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/resolution\/1",
                "name": "Fixed"
            }
        },
        "fixVersions": {
            "name": "fixVersions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/version\/10510",
                    "id": 10510,
                    "description": "Minor Release",
                    "name": "1.12.0",
                    "userReleaseDate": "27\/Aug\/12",
                    "archived": false,
                    "releaseDate": "2012-08-27",
                    "released": true
                }
            ]
        },
        "resolutiondate": {
            "name": "resolutiondate",
            "type": "java.util.Date",
            "value": "2012-05-28T19:25:18.000+0000"
        },
        "reporter": {
            "name": "reporter",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=mben",
                "name": "mben",
                "displayName": "Marc Bennewitz (GIATA mbH)",
                "active": true
            }
        },
        "created": {
            "name": "created",
            "type": "java.util.Date",
            "value": "2008-06-04T00:57:05.000+0000"
        },
        "updated": {
            "name": "updated",
            "type": "java.util.Date",
            "value": "2012-05-28T19:25:18.000+0000"
        },
        "customfield_10041": {
            "name": "Tags",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:labels"
        },
        "description": {
            "name": "description",
            "type": "java.lang.String",
            "value": "this are my options (php.ini):\n{code}\n; Argument passed to save_handler.  In the case of files, this is the path\n; where data files are stored. Note: Windows users have to change this\n; variable in order to use PHP's session functions.\n;\n; As of PHP 4.0.1, you can define the path as:\n;\n;     session.save_path = \"N;\/path\"\n;\n; where N is an integer.  Instead of storing all the session files in\n; \/path, what this will do is use subdirectories N-levels deep, and\n; store the session data in those directories.  This is useful if you\n; or your OS have problems with lots of files in one directory, and is\n; a more efficient layout for servers that handle lots of sessions.\n;\n; NOTE 1: PHP will not create this directory structure automatically.\n;         You can use the script in the ext\/session dir for that purpose.\n; NOTE 2: See the section on garbage collection below if you choose to\n;         use subdirectories for session storage\n;\n; The file storage module creates files using mode 600 by default.\n; You can change that by using\n;\nsession.save_path = \"2;666;\/var\/sessions\/php\"\n\n; Define how many bits are stored in each character when converting\n; the binary hash data to something readable.\n;\n; 4 bits: 0-9, a-f\n; 5 bits: 0-9, a-v\n; 6 bits: 0-9, a-z, A-Z, \"-\", \",\"\nsession.hash_bits_per_character = 5\n{code}\n\nIn the path \"\/var\/sessions\/php\" all directories (0-9 + a-v) and are created\n\nThe problem is - If the user set the session id like \"?PHPSESSID=xxx\" I can't regenerate the session id because session_start() was called before.\n{code}\ntry {\n    Zend_Session::start();\n} catch (Exception $e) {\n    \/\/ echo $e->getMessage(); -> Zend_Session::start() - session_start() [function.session-start]: open(\/var\/sessions\/php\/x\/x\/sess_xxx, O_RDWR) failed: No such file or directory (2)\n    Zend_Session::regenerateId();\n    \/\/ echo session_id(); \/\/ -> xxx\n    Zend_Session::setId('test'); -> Exception: The session has already been started. The session id must be set first.\n}\n{code}\n\nI think it is usefull to test the current given session id before session_start will call like:\n{code}\n$hashBitsPerChar = ini_get('session.hash_bits_per_character');\nif (!$hashBitsPerChar) {\n    $hashBitsPerChar = 5; \/\/ the default value\n}\nswitch($hashBitsPerChar) {\n    case 4: $pattern = '^[0-9a-f]*$'; break;\n    case 5: $pattern = '^[0-9a-v]*$'; break;\n    case 6: $pattern = '^[0-9a-zA-Z-,]*$'; break;\n}\nif ( !preg_match('#'.$pattern.'#', session_id()) ) {\n    throw new Zend_Session_Exception('Invalid session id \"'.session_id.'\"');\n}\n{code}"
        },
        "priority": {
            "name": "priority",
            "type": "com.atlassian.jira.issue.priority.Priority",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/priority\/3",
                "name": "Major"
            }
        },
        "duedate": {
            "name": "duedate",
            "type": "java.util.Date"
        },
        "customfield_10022": {
            "name": "Fix Version Priority",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:select",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/customFieldOption\/10039",
                "value": "  Should Have"
            }
        },
        "watcher": {
            "name": "watcher",
            "type": "watcher",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-3378\/watchers",
                "isWatching": false,
                "watchCount": 3
            }
        },
        "worklog": {
            "name": "worklog",
            "type": "worklog",
            "value": [

            ]
        },
        "status": {
            "name": "status",
            "type": "com.atlassian.jira.issue.status.Status",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/status\/5",
                "name": "Resolved"
            }
        },
        "labels": {
            "name": "labels",
            "type": "com.atlassian.jira.issue.label.Label",
            "value": [
                "FixForZF1.12",
                "state:patch-ready-for-review",
                "zf-caretaker-adamlundrigan",
                "zf-crteam-padraic",
                "zf-crteam-priority",
                "zf-crteam-review"
            ]
        },
        "assignee": {
            "name": "assignee",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=ralph",
                "name": "ralph",
                "displayName": "Ralph Schindler",
                "active": true
            }
        },
        "links": {
            "name": "links",
            "type": "issuelinks",
            "value": [
                {
                    "issueKey": "ZF-11420",
                    "issue": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-11420",
                    "type": {
                        "name": "Related",
                        "direction": "INBOUND",
                        "description": "is related to"
                    }
                }
            ]
        },
        "attachment": {
            "name": "attachment",
            "type": "attachment",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/attachment\/14955",
                    "filename": "ZF-3378.patch",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=adamlundrigan",
                        "name": "adamlundrigan",
                        "displayName": "Adam Lundrigan",
                        "active": true
                    },
                    "created": "2012-03-10T01:03:07.000+0000",
                    "size": 3611,
                    "mimeType": "text\/x-patch",
                    "content": "http:\/\/fw02.zend.com\/issues\/secure\/attachment\/14955\/ZF-3378.patch"
                }
            ]
        },
        "sub-tasks": {
            "name": "sub-tasks",
            "type": "issuelinks",
            "value": [

            ]
        },
        "versions": {
            "name": "versions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/version\/10181",
                    "id": 10181,
                    "description": "Mini Release",
                    "name": " 1.5.2",
                    "userReleaseDate": "15\/May\/08",
                    "archived": true,
                    "releaseDate": "2008-05-15",
                    "released": true
                }
            ]
        },
        "project": {
            "name": "project",
            "type": "com.atlassian.jira.project.Project",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/project\/ZF",
                "key": "ZF",
                "name": "Zend Framework",
                "roles": {

                }
            }
        },
        "components": {
            "name": "components",
            "type": "com.atlassian.jira.bc.project.component.ProjectComponent",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/component\/10096",
                    "id": 10096,
                    "name": "Zend_Session",
                    "description": "A standardized interface to common functionality found in or indigenous to site session implementations. ",
                    "isAssigneeTypeValid": false
                }
            ]
        },
        "comment": {
            "name": "comment",
            "type": "com.atlassian.jira.issue.fields.CommentSystemField",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/36856",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=arep",
                        "name": "arep",
                        "displayName": "Are Pedersen",
                        "active": true
                    },
                    "body": "Actually, it's much worse...actually a big security issue.\r\n\r\nIf the session cookie is already set before a user has logged in, Zend_Session will use this value when creating a new session.\r\nThe exploit scenario is:\r\nYou have a public computer somewhere, and you know that a php application is used by alot of people.\r\nUsing Firefox it's pretty easy to delete and set cookies.\r\nYou set a PHPSESSID cookie, and note down the value you use. (using it later to do the exploit)\r\n\r\nThen, when someone comes and logs in to the php application, your already set cookie will be used.\r\nThis only works of course if the browser isn't closed and restarted in the mean time.\r\n\r\nThe solution is that Zend_Session always should check if the session referred to by the PHPSESSID actually exists, and if not always regenerate the sessionid before creating a new session.\r\n\r\nThis isn't really a Zend_Session issue alone, since php native sessions are also affected.\r\nBut Zend should have a workaround for this I think.\r\n",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=arep",
                        "name": "arep",
                        "displayName": "Are Pedersen",
                        "active": true
                    },
                    "created": "2009-12-10T13:51:36.000+0000",
                    "updated": "2009-12-10T13:51:36.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/48605",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=adamlundrigan",
                        "name": "adamlundrigan",
                        "displayName": "Adam Lundrigan",
                        "active": true
                    },
                    "body": "If an invalid session ID is provided to PHP before {{Zend_Session::start()}} is run, then {{Zend_Session}} will continue to use it as it doesn't automatically regenerate session IDs on start.  So, this unit test fails against trunk:\r\n{code}\r\nIndex: tests\/Zend\/Session\/SessionTest.php\r\n===================================================================\r\n--- tests\/Zend\/Session\/SessionTest.php  (revision 24490)\r\n+++ tests\/Zend\/Session\/SessionTest.php  (working copy)\r\n@@ -1062,4 +1062,51 @@\r\n         }\r\n     }\r\n\r\n+    \/**\r\n+     * @group ZF-3378\r\n+     *\/\r\n+    public function testInvalidPreexistingSessionIdDoesNotPreventRegenerationOfSid()\r\n+    {\r\n+        \/\/ Pattern: [0-9a-v]*\r\n+        ini_set('session.hash_bits_per_character', 5);\r\n+\r\n+        \/\/ Session store\r\n+        $sessionCharSet = array_merge(range(0,9), range('a','v'));\r\n+        $sessionStore = dirname(__FILE__)\r\n+                      . DIRECTORY_SEPARATOR . \"_files\"\r\n+                      . DIRECTORY_SEPARATOR . \"ZF-3378\";\r\n+        if ( !is_dir($sessionStore) ) @mkdir($sessionStore, 0755, true);\r\n+        ini_set('session.save_path', \"1;666;\" . $sessionStore);\r\n+\r\n+        \/\/ When using subdirs for session.save_path, the directory structure\r\n+        \/\/ is your own responsibility...set it up, or else bad things happen\r\n+        foreach ( $sessionCharSet as $subdir ) {\r\n+            @mkdir($sessionStore . DIRECTORY_SEPARATOR . $subdir);\r\n+        }\r\n+\r\n+        \/\/ Set session ID to invalid value\r\n+        session_id('xxx');\r\n+\r\n+        \/\/ Attempt to start the session\r\n+        try {\r\n+            \/** @see Zend_Session *\/\r\n+            require_once \"Zend\/Session.php\";\r\n+            Zend_Session::start();\r\n+        } catch (Zend_Session_Exception $e) {\r\n+            Zend_Session::regenerateId();\r\n+        }\r\n+        \/\/ Get the current SID\r\n+        $sid = Zend_Session::getId();\r\n+\r\n+        \/\/ We don't need the session any more, clean it up\r\n+        Zend_Session::destroy();\r\n+        foreach ( $sessionCharSet as $subdir ) {\r\n+            @rmdir($sessionStore . DIRECTORY_SEPARATOR . $subdir);\r\n+        }\r\n+        @rmdir($sessionStore);\r\n+\r\n+        \/\/ Check the result\r\n+        $this->assertRegExp('\/^[0-9a-v]+$\/', $sid);\r\n+        $this->assertNotEquals('xxx', $sid);\r\n+    }\r\n }\r\n{code}\r\nWhen run like so:\r\n{code}phpunit --verbose --debug --group ZF-3378 Zend\/Session\/SessionTest{code}\r\n(I can't get {{.\/runtests.sh}} to run the {{Zend_Session}} suite)\r\n\r\nUpdating {{Zend_Session::start}} like this solves the issue:\r\n{code}\r\nIndex: library\/Zend\/Session.php\r\n===================================================================\r\n--- library\/Zend\/Session.php    (revision 24490)\r\n+++ library\/Zend\/Session.php    (working copy)\r\n@@ -415,6 +415,14 @@\r\n      *\/\r\n     public static function start($options = false)\r\n     {\r\n+        \/\/ Check to see if we've been passed an invalid session ID\r\n+        if ( self::getId() && !self::_checkId(self::getId()) ) {\r\n+            \/\/ Generate a valid, temporary replacement\r\n+            self::setId(md5(self::getId()));\r\n+            \/\/ Force a regenerate after session is started\r\n+            self::$_regenerateIdState = -1;\r\n+        }\r\n+\r\n         if (self::$_sessionStarted && self::$_destroyed) {\r\n             require_once 'Zend\/Session\/Exception.php';\r\n             throw new Zend_Session_Exception('The session was explicitly destroyed during this request, attempting to re-start is not allowed.');\r\n@@ -498,6 +506,26 @@\r\n\r\n         self::_processStartupMetadataGlobal();\r\n     }\r\n+\r\n+    \/**\r\n+     * Perform a hash-bits check on the session ID\r\n+     *\r\n+     * @param string $id Session ID\r\n+     * @return bool\r\n+     *\/\r\n+    protected static function _checkId($id)\r\n+    {\r\n+        $hashBitsPerChar = ini_get('session.hash_bits_per_character');\r\n+        if (!$hashBitsPerChar) {\r\n+            $hashBitsPerChar = 5; \/\/ the default value\r\n+        }\r\n+        switch($hashBitsPerChar) {\r\n+            case 4: $pattern = '^[0-9a-f]*$'; break;\r\n+            case 5: $pattern = '^[0-9a-v]*$'; break;\r\n+            case 6: $pattern = '^[0-9a-zA-Z-,]*$'; break;\r\n+        }\r\n+        return preg_match('#'.$pattern.'#', $id);\r\n+    }\r\n\r\n\r\n     \/**\r\n{code}\r\n\r\nThis resets an invalid session ID to something that is valid (I chose to md5() the invalid one), and then forces {{Zend_Session}} to regenerate the session ID if it's invalid.\r\n\r\nI'm not able to confirm if this breaks anything in the existing {{Zend_Session}} test suite, as I can't get it to run. Using {{.\/runtests.sh}} always returns \"0 tests\", and running phpunit directly (ie: {{phpunit --verbose --debug Zend\/Session\/AllTests}}) ends in the process infinitely hanging with no output produced. ",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=adamlundrigan",
                        "name": "adamlundrigan",
                        "displayName": "Adam Lundrigan",
                        "active": true
                    },
                    "created": "2011-10-04T20:33:38.000+0000",
                    "updated": "2011-10-04T20:33:38.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/49975",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=adamlundrigan",
                        "name": "adamlundrigan",
                        "displayName": "Adam Lundrigan",
                        "active": true
                    },
                    "body": "Attached patch",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=adamlundrigan",
                        "name": "adamlundrigan",
                        "displayName": "Adam Lundrigan",
                        "active": true
                    },
                    "created": "2012-03-10T01:03:07.000+0000",
                    "updated": "2012-03-10T01:03:07.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/50784",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=rob",
                        "name": "rob",
                        "displayName": "Rob Allen",
                        "active": true
                    },
                    "body": "Fixed in svn r24819.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=rob",
                        "name": "rob",
                        "displayName": "Rob Allen",
                        "active": true
                    },
                    "created": "2012-05-28T19:25:18.000+0000",
                    "updated": "2012-05-28T19:25:18.000+0000"
                }
            ]
        }
    },
    "transitions": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-3378\/transitions"
}