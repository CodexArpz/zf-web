{
    "expand": "html",
    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-2579",
    "key": "ZF-2579",
    "fields": {
        "summary": {
            "name": "summary",
            "type": "java.lang.String",
            "value": "_forward breaks postDispatch behaviour"
        },
        "timetracking": {
            "name": "timetracking",
            "type": "com.atlassian.jira.issue.fields.TimeTrackingSystemField"
        },
        "issuetype": {
            "name": "issuetype",
            "type": "com.atlassian.jira.issue.issuetype.IssueType",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issueType\/1",
                "name": "Bug",
                "subtask": false
            }
        },
        "votes": {
            "name": "votes",
            "type": "com.atlassian.jira.issue.fields.VotesSystemField",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-2579\/votes",
                "votes": 0,
                "hasVoted": false
            }
        },
        "security": {
            "name": "security",
            "type": "com.atlassian.jira.issue.security.IssueSecurityLevel"
        },
        "resolution": {
            "name": "resolution",
            "type": "com.atlassian.jira.issue.resolution.Resolution",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/resolution\/6",
                "name": "Not an Issue"
            }
        },
        "fixVersions": {
            "name": "fixVersions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [

            ]
        },
        "resolutiondate": {
            "name": "resolutiondate",
            "type": "java.util.Date",
            "value": "2008-02-15T09:34:42.000+0000"
        },
        "reporter": {
            "name": "reporter",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=wimgzd",
                "name": "wimgzd",
                "displayName": "Wim Godden",
                "active": true
            }
        },
        "created": {
            "name": "created",
            "type": "java.util.Date",
            "value": "2008-02-05T16:00:52.000+0000"
        },
        "updated": {
            "name": "updated",
            "type": "java.util.Date",
            "value": "2008-02-15T09:34:42.000+0000"
        },
        "customfield_10041": {
            "name": "Tags",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:labels"
        },
        "description": {
            "name": "description",
            "type": "java.lang.String",
            "value": "When using an action helper with a postDispatch, using _forward in a controller breaks the postDispatch behaviour.\n\n\/\/ Zend_Controller_Plugin_Base.php\nclass Zend_Controller_Plugin_Base extends Zend_Controller_Plugin_Abstract\n{\n   public function preDispatch(Zend_Controller_Request_Abstract $request)\n    {\n        print \"Predispatch of : \".$request->getActionName().\"\\n\";\n    }\n    public function postDispatch(Zend_Controller_Request_Abstract $request)\n    {\n        print \"Postdispatch of : \".$request->getActionName().\"\\n\";\n    }\n}\n\n\n\/\/ IndexController.php\nclass IndexController extends Zend_Controller_Action\n{\n    public function indexAction()\n    {\n       print \"Just some code\";\n    }\n    public function fooAction()\n    {\n        $this->_forward('index','index');\n    }\n}\n\n\/\/ Bootstrap contains :\n$controller = Zend_Controller_Front::getInstance();\nrequire_once 'Zend_Controller_Plugin_Base.php';\n$controller->registerPlugin(new Zend_Controller_Plugin_Base());\n\n\n\n\/\/ The output when going to \/index\/index\nPredispatch of : index\nPostdispatch of : index\n\n\/\/ The output when going to \/index\/foo\nPredispatch of : foo\nPostdispatch of : index\nPredispatch of : index\nPostdispatch of : index\n\nClearly, the output should be 2 x foo and 2 x index.\n\n"
        },
        "priority": {
            "name": "priority",
            "type": "com.atlassian.jira.issue.priority.Priority",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/priority\/3",
                "name": "Major"
            }
        },
        "duedate": {
            "name": "duedate",
            "type": "java.util.Date"
        },
        "customfield_10022": {
            "name": "Fix Version Priority",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:select"
        },
        "watcher": {
            "name": "watcher",
            "type": "watcher",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-2579\/watchers",
                "isWatching": false,
                "watchCount": 1
            }
        },
        "worklog": {
            "name": "worklog",
            "type": "worklog",
            "value": [

            ]
        },
        "status": {
            "name": "status",
            "type": "com.atlassian.jira.issue.status.Status",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/status\/5",
                "name": "Resolved"
            }
        },
        "labels": {
            "name": "labels",
            "type": "com.atlassian.jira.issue.label.Label",
            "value": [

            ]
        },
        "assignee": {
            "name": "assignee",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                "name": "matthew",
                "displayName": "Matthew Weier O'Phinney",
                "active": true
            }
        },
        "links": {
            "name": "links",
            "type": "issuelinks",
            "value": [

            ]
        },
        "attachment": {
            "name": "attachment",
            "type": "attachment",
            "value": [

            ]
        },
        "sub-tasks": {
            "name": "sub-tasks",
            "type": "issuelinks",
            "value": [

            ]
        },
        "versions": {
            "name": "versions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/version\/10140",
                    "id": 10140,
                    "description": "Mini Release",
                    "name": "1.0.3",
                    "userReleaseDate": "30\/Nov\/07",
                    "archived": true,
                    "releaseDate": "2007-11-30",
                    "released": true
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/version\/10160",
                    "id": 10160,
                    "description": "Major Release",
                    "name": "Next Major Release",
                    "archived": false,
                    "released": false
                }
            ]
        },
        "project": {
            "name": "project",
            "type": "com.atlassian.jira.project.Project",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/project\/ZF",
                "key": "ZF",
                "name": "Zend Framework",
                "roles": {

                }
            }
        },
        "components": {
            "name": "components",
            "type": "com.atlassian.jira.bc.project.component.ProjectComponent",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/component\/10011",
                    "id": 10011,
                    "name": "Zend_Controller",
                    "description": "front controller, including router and dispatcher",
                    "isAssigneeTypeValid": false
                }
            ]
        },
        "comment": {
            "name": "comment",
            "type": "com.atlassian.jira.issue.fields.CommentSystemField",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/19086",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                        "name": "matthew",
                        "displayName": "Matthew Weier O'Phinney",
                        "active": true
                    },
                    "body": "This is actually how it is expected to work. _forward() writes to the request object, modifying it. Since postDispatch() occurs after the request object has been modified, it's simply picking up on those changes.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                        "name": "matthew",
                        "displayName": "Matthew Weier O'Phinney",
                        "active": true
                    },
                    "created": "2008-02-14T11:02:00.000+0000",
                    "updated": "2008-02-14T11:02:00.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/19108",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=wimgzd",
                        "name": "wimgzd",
                        "displayName": "Wim Godden",
                        "active": true
                    },
                    "body": "Basically, this means that if you have a controller plugin like this :\n\npublic function preDispatch(Zend_Controller_Request_Abstract $request)\n{\n    $moduleSession = new Zend_Session_Namespace($request->getModuleName());\n    $moduleSession->unlock();\n}\n\npublic function postDispatch(Zend_Controller_Request_Abstract $request)\n{\n    $moduleSession = new Zend_Session_Namespace($request->getModuleName());\n    $moduleSession->lock();\n}\n\nThis will never work, since the $request->getModuleName() has been modified by _forward()\n\nI believe _forward() shouldn't modify these until after the postDispatch of the current dispatched action. Currently, the postDispatch is not the postDispatch of the dispatched action, but of the forwarded action, which is inconsistent.\n",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=wimgzd",
                        "name": "wimgzd",
                        "displayName": "Wim Godden",
                        "active": true
                    },
                    "created": "2008-02-14T12:12:41.000+0000",
                    "updated": "2008-02-14T12:12:41.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/19153",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=wimgzd",
                        "name": "wimgzd",
                        "displayName": "Wim Godden",
                        "active": true
                    },
                    "body": "Basically, this means that if you have a controller plugin like this :\n\npublic function preDispatch(Zend_Controller_Request_Abstract $request)\n{ \n  $moduleSession = new Zend_Session_Namespace($request->getModuleName()); $moduleSession->unlock(); \n}\n\npublic function postDispatch(Zend_Controller_Request_Abstract $request)\n{ \n  $moduleSession = new Zend_Session_Namespace($request->getModuleName()); $moduleSession->lock(); \n}\n\nThis will never work, since the $request->getModuleName() has been modified by _forward()\n\nI believe _forward() shouldn't modify the module, controller and action names until after the postDispatch of the current dispatched action.\nCurrently, the postDispatch is not the postDispatch of the dispatched action, but of the forwarded action, which is inconsistent and will lead to issues.\n\n",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=wimgzd",
                        "name": "wimgzd",
                        "displayName": "Wim Godden",
                        "active": true
                    },
                    "created": "2008-02-15T08:44:29.000+0000",
                    "updated": "2008-02-15T08:44:29.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/19155",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                        "name": "matthew",
                        "displayName": "Matthew Weier O'Phinney",
                        "active": true
                    },
                    "body": "There is a flaw in your assumptions: the request is not the *action's* request -- it is the *current* request *environment*. postDispatch() is merely operating on the current request environment -- which may have changed since the time preDispatch() was called. It's action agnostic. Plugins *should* be action agnostic, as they are supposed to operate regardless of the modules, controllers, or actions dispatched.\n\nOne solution to the example you pose above is to store the module in a local property of the plugin during preDispatch(), and then refer to it during postDispatch():\n\n{code}\nclass My_Plugin\n{\n    public function preDispatch(Zend_Controller_Request_Abstract $request)\n    {\n        $this->module = $request->getModuleName();\n        $moduleSession = new Zend_Session_Namespace($this->module);\n        $moduleSession->unlock();\n    }\n\n    public function postDispatch(Zend_Controller_Request_Abstract $request)\n    {\n        if (isset($this->module) && !empty($this->module)) {\n            $moduleSession = new Zend_Session_Namespace($this->module);\n            $moduleSession->lock();\n        }\n    }\n}\n{code}\n\nIn the above, $this->module will be reset at the beginning of each request, making the value ever-present for the postDispatch() hook. It's a short and simple solution to the issue you present, and requires no modification to the framework to accomplish.\n\nWhile I do see your point about the fact that the request object seen in Zend_Controller_Action::postDispatch() not being the same as the one seen in preDispatch(), I also don't see this as being an issue.; I actually see it as a feature. There are very few cases where you need to know what the module, controller, and action were *after* the action has already executed, and there are almost always ways to store that information at the beginning of the dispatch cycle if you do need to do so (as shown in the example above). There are a number of situations, however, where you need to know that a *new* action *has* been requested (for instance, the ViewRenderer will *not* autorender a view in such a situation), which creates a large argument for keeping the status quo.\n\nThat said, one solution to your solution already exists in the repository: use the ActionStack helper\/plugin. This allows you to push items to the stack similar to _forward(), but without affecting the current request object. The downside is that some integration points -- such as the ViewRenderer example above -- will require extra coding on your part to ensure they continue to work:\n\n{code}\n$this->_helper->actionStack('foobar');\nreturn $this->_helper->viewRenderer->setNoRender();\n\n\/\/ vs:\nreturn $this->_forward('foobar');\n{code}\n\nI'm closing this issue again, as changing this behaviour now would result in widespread breakage of existing functionality *within* the framework, much less that existing in userland applications. Additionally, as I have illustrated in these examples, there are already ways you can get at the information you need with some pretty simple coding.\n",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                        "name": "matthew",
                        "displayName": "Matthew Weier O'Phinney",
                        "active": true
                    },
                    "created": "2008-02-15T09:34:08.000+0000",
                    "updated": "2008-02-15T09:34:08.000+0000"
                }
            ]
        }
    },
    "transitions": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-2579\/transitions"
}