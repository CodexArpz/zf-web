{
    "expand": "html",
    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-2084",
    "key": "ZF-2084",
    "fields": {
        "summary": {
            "name": "summary",
            "type": "java.lang.String",
            "value": "escape values by default"
        },
        "timetracking": {
            "name": "timetracking",
            "type": "com.atlassian.jira.issue.fields.TimeTrackingSystemField",
            "value": {
                "timeoriginalestimate": 60,
                "timeestimate": 60
            }
        },
        "issuetype": {
            "name": "issuetype",
            "type": "com.atlassian.jira.issue.issuetype.IssueType",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issueType\/4",
                "name": "Improvement",
                "subtask": false
            }
        },
        "votes": {
            "name": "votes",
            "type": "com.atlassian.jira.issue.fields.VotesSystemField",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-2084\/votes",
                "votes": 0,
                "hasVoted": false
            }
        },
        "security": {
            "name": "security",
            "type": "com.atlassian.jira.issue.security.IssueSecurityLevel"
        },
        "resolution": {
            "name": "resolution",
            "type": "com.atlassian.jira.issue.resolution.Resolution",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/resolution\/1",
                "name": "Fixed"
            }
        },
        "fixVersions": {
            "name": "fixVersions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/version\/10140",
                    "id": 10140,
                    "description": "Mini Release",
                    "name": "1.0.3",
                    "userReleaseDate": "30\/Nov\/07",
                    "archived": true,
                    "releaseDate": "2007-11-30",
                    "released": true
                }
            ]
        },
        "resolutiondate": {
            "name": "resolutiondate",
            "type": "java.util.Date",
            "value": "2007-11-26T16:29:56.000+0000"
        },
        "reporter": {
            "name": "reporter",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=klassicd",
                "name": "klassicd",
                "displayName": "michael depetrillo",
                "active": true
            }
        },
        "created": {
            "name": "created",
            "type": "java.util.Date",
            "value": "2007-10-17T17:03:01.000+0000"
        },
        "updated": {
            "name": "updated",
            "type": "java.util.Date",
            "value": "2007-12-15T21:46:38.000+0000"
        },
        "customfield_10041": {
            "name": "Tags",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:labels"
        },
        "description": {
            "name": "description",
            "type": "java.lang.String",
            "value": "When I try to pass DB data with an & ampersand in it back to a Zend_Rest_Server I receive a PHP warning about 'unterminated entity reference'.  This also also when throwing a Zend_Rest_Server_Exception with an & in the error message.\n\n$server = new Zend_Rest_Server(); \/\/ initiate rest server\n$server->setClass('restbroke');\n$server->handle(array('method' => 'dbReturn'));\n\nclass restbroke {\npublic function dbReturn()\n{\n    return array('key' => '&&ERRRRR<>IWANTHTML');\n}\n}\n\nHere are the fixed methods using DOM createTextNode() by default for unknown strings.\n\nclass Guild_Rest_Server extends Zend_Rest_Server implements Zend_Server_Interface\n{\n    \/**\n    * Handle an array or object result\n    *\n    * @param array|object $struct Result Value\n    * @return string XML Response\n    *\/\n    protected function _handleStruct($struct)\n    {\n      $function = $this->_functions[$this->_method];\n      if ($function instanceof Zend_Server_Reflection_Method) {\n        $class = $function->getDeclaringClass()->getName();\n      } else {\n        $class = false;\n      }\n\n      $method = $function->getName();\n\n      $dom    = new DOMDocument('1.0', 'UTF-8');\n      if ($class) {\n        $root   = $dom->createElement($class);\n        $method = $dom->createElement($method);\n        $root->appendChild($method);\n      } else {\n        $root   = $dom->createElement($method);\n        $method = $root;\n      }\n      $root->setAttribute('generator', 'zend');\n      $root->setAttribute('version', '1.0');\n      $dom->appendChild($root);\n\n      $this->_structValue($struct, $dom, $method);\n\n      $struct = (array) $struct;\n      if (!isset($struct['status'])) {\n        $status = $dom->createElement('status', 'success');\n        $method->appendChild($status);\n      }\n\n      return $dom->saveXML();\n    }\n\n    \/**\n    * Recursively iterate through a struct\n    *\n    * Recursively iterates through an associative array or object's properties\n    * to build XML response.\n    *\n    * @param mixed $struct\n    * @param DOMDocument $dom\n    * @param DOMElement $parent\n    * @return void\n    *\/\n    protected function _structValue($struct, DOMDocument $dom, DOMElement $parent)\n    {\n      $struct = (array) $struct;\n\n      foreach ($struct as $key => $value) {\n        if ($value === false) {\n          $value = 0;\n        } elseif ($value === true) {\n          $value = 1;\n        }\n\n        if (ctype_digit((string) $key)) {\n          $key = 'key_' . $key;\n        }\n\n        if (is_array($value) || is_object($value)) {\n          $element = $dom->createElement($key);\n          $this->_structValue($value, $dom, $element);\n        } else {\n          $element = $dom->createElement($key);\n          $element->appendChild($dom->createTextNode($value));\n        }\n\n        $parent->appendChild($element);\n      }\n    }\n\n    \/**\n    * Handle a single value\n    *\n    * @param string|int|boolean $value Result value\n    * @return string XML Response\n    *\/\n    protected function _handleScalar($value)\n    {\n      $function = $this->_functions[$this->_method];\n      if ($function instanceof Zend_Server_Reflection_Method) {\n        $class = $function->getDeclaringClass()->getName();\n      } else {\n        $class = false;\n      }\n\n      $method = $function->getName();\n\n      $dom = new DOMDocument('1.0', 'UTF-8');\n      if ($class) {\n        $xml = $dom->createElement($class);\n        $methodNode = $dom->createElement($method);\n        $xml->appendChild($methodNode);\n      } else {\n        $xml = $dom->createElement($method);\n        $methodNode = $xml;\n      }\n      $xml->setAttribute('generator', 'zend');\n      $xml->setAttribute('version', '1.0');\n      $dom->appendChild($xml);\n\n      if ($value === false) {\n        $value = 0;\n      } elseif ($value === true) {\n        $value = 1;\n      }\n\n      if (isset($value)) {\n        $element = $dom->createElement('response');\n        $element->appendChild($dom->createTextNode($value));\n        $methodNode->appendChild($element);\n      } else {\n        $methodNode->appendChild($dom->createElement('response'));\n      }\n\n      $methodNode->appendChild($dom->createElement('status', 'success'));\n\n      return $dom->saveXML();\n    }\n\n    \/**\n    * Implement Zend_Server_Interface::fault()\n    *\n    * Creates XML error response, returning DOMDocument with response.\n    *\n    * @param string|Exception $fault Message\n    * @param int $code Error Code\n    * @return DOMDocument\n    *\/\n    public function fault($exception = null, $code = null)\n    {\n      if (isset($this->_functions[$this->_method])) {\n        $function = $this->_functions[$this->_method];\n      } elseif (isset($this->_method)) {\n        $function = $this->_method;\n      } else {\n        $function = 'rest';\n      }\n\n      if ($function instanceof Zend_Server_Reflection_Method) {\n        $class = $function->getDeclaringClass()->getName();\n      } else {\n        $class = false;\n      }\n\n      if ($function instanceof Zend_Server_Reflection_Function_Abstract) {\n        $method = $function->getName();\n      } else {\n        $method = $function;\n      }\n\n      $dom = new DOMDocument('1.0', 'UTF-8');\n      if ($class) {\n        $xml       = $dom->createElement($class);\n        $xmlMethod = $dom->createElement($method);\n        $xml->appendChild($xmlMethod);\n      } else {\n        $xml       = $dom->createElement($method);\n        $xmlMethod = $xml;\n      }\n      $xml->setAttribute('generator', 'zend');\n      $xml->setAttribute('version', '1.0');\n      $dom->appendChild($xml);\n\n      $xmlResponse = $dom->createElement('response');\n      $xmlMethod->appendChild($xmlResponse);\n\n      if ($exception instanceof Exception) {\n        $element = $dom->createElement('message');\n        $element->appendChild($dom->createTextNode($exception->getMessage()));\n        $xmlResponse->appendChild($element);\n        $code = $exception->getCode();\n      } elseif (!is_null($exception) || 'rest' == $function) {\n        $xmlResponse->appendChild($dom->createElement('message', 'An unknown error occured. Please try again.'));\n      } else {\n        $xmlResponse->appendChild($dom->createElement('message', 'Call to ' . $method . ' failed.'));\n      }\n\n      $xmlMethod->appendChild($xmlResponse);\n      $xmlMethod->appendChild($dom->createElement('status', 'failed'));\n\n        \/\/ Headers to send\n            if (is_null($code) || (404 != $code))\n        {\n          $this->_headers[] = 'HTTP\/1.0 400 Bad Request';\n        } else {\n          $this->_headers[] = 'HTTP\/1.0 404 File Not Found';\n        }\n\n        return $dom;\n    }\n}"
        },
        "priority": {
            "name": "priority",
            "type": "com.atlassian.jira.issue.priority.Priority",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/priority\/3",
                "name": "Major"
            }
        },
        "duedate": {
            "name": "duedate",
            "type": "java.util.Date"
        },
        "customfield_10022": {
            "name": "Fix Version Priority",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:select",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/customFieldOption\/10039",
                "value": "  Should Have"
            }
        },
        "watcher": {
            "name": "watcher",
            "type": "watcher",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-2084\/watchers",
                "isWatching": false,
                "watchCount": 0
            }
        },
        "worklog": {
            "name": "worklog",
            "type": "worklog",
            "value": [

            ]
        },
        "status": {
            "name": "status",
            "type": "com.atlassian.jira.issue.status.Status",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/status\/5",
                "name": "Resolved"
            }
        },
        "labels": {
            "name": "labels",
            "type": "com.atlassian.jira.issue.label.Label",
            "value": [

            ]
        },
        "assignee": {
            "name": "assignee",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                "name": "matthew",
                "displayName": "Matthew Weier O'Phinney",
                "active": true
            }
        },
        "links": {
            "name": "links",
            "type": "issuelinks",
            "value": [

            ]
        },
        "attachment": {
            "name": "attachment",
            "type": "attachment",
            "value": [

            ]
        },
        "sub-tasks": {
            "name": "sub-tasks",
            "type": "issuelinks",
            "value": [

            ]
        },
        "versions": {
            "name": "versions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/version\/10130",
                    "id": 10130,
                    "description": "Mini Release",
                    "name": "1.0.2",
                    "userReleaseDate": "25\/Sep\/07",
                    "archived": true,
                    "releaseDate": "2007-09-25",
                    "released": true
                }
            ]
        },
        "project": {
            "name": "project",
            "type": "com.atlassian.jira.project.Project",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/project\/ZF",
                "key": "ZF",
                "name": "Zend Framework",
                "roles": {

                }
            }
        },
        "components": {
            "name": "components",
            "type": "com.atlassian.jira.bc.project.component.ProjectComponent",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/component\/10095",
                    "id": 10095,
                    "name": "Zend_Rest_Server",
                    "description": "Server for responding to Rest requests.",
                    "isAssigneeTypeValid": false
                }
            ]
        },
        "comment": {
            "name": "comment",
            "type": "com.atlassian.jira.issue.fields.CommentSystemField",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/17616",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                        "name": "matthew",
                        "displayName": "Matthew Weier O'Phinney",
                        "active": true
                    },
                    "body": "Scheduling for 1.0.3",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                        "name": "matthew",
                        "displayName": "Matthew Weier O'Phinney",
                        "active": true
                    },
                    "created": "2007-11-16T15:04:33.000+0000",
                    "updated": "2007-11-16T15:04:33.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/17719",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                        "name": "matthew",
                        "displayName": "Matthew Weier O'Phinney",
                        "active": true
                    },
                    "body": "Merged to 1.0 release branch with r6944.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                        "name": "matthew",
                        "displayName": "Matthew Weier O'Phinney",
                        "active": true
                    },
                    "created": "2007-11-26T16:29:56.000+0000",
                    "updated": "2007-11-26T16:29:56.000+0000"
                }
            ]
        }
    },
    "transitions": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-2084\/transitions"
}