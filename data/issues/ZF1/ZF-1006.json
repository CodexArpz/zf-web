{
    "expand": "html",
    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-1006",
    "key": "ZF-1006",
    "fields": {
        "summary": {
            "name": "summary",
            "type": "java.lang.String",
            "value": "A method for generating URLs from the Router"
        },
        "timetracking": {
            "name": "timetracking",
            "type": "com.atlassian.jira.issue.fields.TimeTrackingSystemField"
        },
        "issuetype": {
            "name": "issuetype",
            "type": "com.atlassian.jira.issue.issuetype.IssueType",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/issueType\/4",
                "name": "Improvement",
                "subtask": false
            }
        },
        "votes": {
            "name": "votes",
            "type": "com.atlassian.jira.issue.fields.VotesSystemField",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-1006\/votes",
                "votes": 0,
                "hasVoted": false
            }
        },
        "security": {
            "name": "security",
            "type": "com.atlassian.jira.issue.security.IssueSecurityLevel"
        },
        "resolution": {
            "name": "resolution",
            "type": "com.atlassian.jira.issue.resolution.Resolution",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/resolution\/6",
                "name": "Not an Issue"
            }
        },
        "fixVersions": {
            "name": "fixVersions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [

            ]
        },
        "resolutiondate": {
            "name": "resolutiondate",
            "type": "java.util.Date",
            "value": "2007-03-08T08:14:55.000+0000"
        },
        "reporter": {
            "name": "reporter",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=joror",
                "name": "joror",
                "displayName": "Daan Broekhof",
                "active": true
            }
        },
        "created": {
            "name": "created",
            "type": "java.util.Date",
            "value": "2007-03-02T09:10:19.000+0000"
        },
        "updated": {
            "name": "updated",
            "type": "java.util.Date",
            "value": "2007-07-05T14:43:53.000+0000"
        },
        "customfield_10041": {
            "name": "Tags",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:labels"
        },
        "description": {
            "name": "description",
            "type": "java.lang.String",
            "value": "A method for generating URLs from the routes known to the router.\n(The 'assemble' function is already known in the Route classes, but not used)\n\nA simple function the the Zend_Controller_Router _Rewrite would implement this:\nThe arguments array would contain an associative array with information to make an url with.\nAn important mechanism is to match the generated route and see if it does not contain defaults the arguments did not contain.\n\n{code}\npublic function assembleRoute($arguments)\n{\n    foreach (array_reverse($this->_routes) as $route)\n    {\n        try\n        {\n            $url = $route->assemble($arguments, true);\n\n            if (array_diff_assoc($route->match($url), $arguments) === array())\n                return $url;\n        }\n        catch (Zend_Controller_Router_Exception $e)\n        {\n            continue;\n        }\n    }\n    throw new Zend_Controller_Router_Exception('No route could be found');\n}\n{code}"
        },
        "priority": {
            "name": "priority",
            "type": "com.atlassian.jira.issue.priority.Priority",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/priority\/4",
                "name": "Minor"
            }
        },
        "duedate": {
            "name": "duedate",
            "type": "java.util.Date"
        },
        "customfield_10022": {
            "name": "Fix Version Priority",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:select"
        },
        "watcher": {
            "name": "watcher",
            "type": "watcher",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-1006\/watchers",
                "isWatching": false,
                "watchCount": 2
            }
        },
        "worklog": {
            "name": "worklog",
            "type": "worklog",
            "value": [

            ]
        },
        "status": {
            "name": "status",
            "type": "com.atlassian.jira.issue.status.Status",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/status\/5",
                "name": "Resolved"
            }
        },
        "labels": {
            "name": "labels",
            "type": "com.atlassian.jira.issue.label.Label",
            "value": [

            ]
        },
        "assignee": {
            "name": "assignee",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=martel",
                "name": "martel",
                "displayName": "Michal Minicki",
                "active": true
            }
        },
        "links": {
            "name": "links",
            "type": "issuelinks",
            "value": [

            ]
        },
        "attachment": {
            "name": "attachment",
            "type": "attachment",
            "value": [

            ]
        },
        "sub-tasks": {
            "name": "sub-tasks",
            "type": "issuelinks",
            "value": [

            ]
        },
        "versions": {
            "name": "versions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [

            ]
        },
        "project": {
            "name": "project",
            "type": "com.atlassian.jira.project.Project",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/project\/ZF",
                "key": "ZF",
                "name": "Zend Framework",
                "roles": {

                }
            }
        },
        "components": {
            "name": "components",
            "type": "com.atlassian.jira.bc.project.component.ProjectComponent",
            "value": [
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/component\/10011",
                    "id": 10011,
                    "name": "Zend_Controller",
                    "description": "front controller, including router and dispatcher",
                    "isAssigneeTypeValid": false
                }
            ]
        },
        "comment": {
            "name": "comment",
            "type": "com.atlassian.jira.issue.fields.CommentSystemField",
            "value": [
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/13199",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=martel",
                        "name": "martel",
                        "displayName": "Michal Minicki",
                        "active": true
                    },
                    "body": "That's what the URL view helper is there for:\n\n{code}\n\/\/ In view script:\necho $this->url(array('param' => 2));\necho $this->url(array('param' => 2), 'route-name');\n{code}\n\nOr, alternatively, you can use assemble in your business code:\n\n{code}\n$url = $router->getCurrentRoute()->assemble(array('param' => 2));\n$url = $router->getRoute('route-name')->assemble(array('param' => 2));\n{code}",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=martel",
                        "name": "martel",
                        "displayName": "Michal Minicki",
                        "active": true
                    },
                    "created": "2007-03-08T08:14:55.000+0000",
                    "updated": "2007-03-08T08:14:55.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/13202",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=joror",
                        "name": "joror",
                        "displayName": "Daan Broekhof",
                        "active": true
                    },
                    "body": "Ah but that function only works on a default route or a specifically named route.\nThis function would assemble the most specific route as specified by the parameters, looking through all routes.\n\nIf someone for instance has these routes defined:\n\n*default*\n\":controller\/:action\/*\"\n*newsitem*\n\"newsitem\/:id\"\ndefaults:\ncontroller = news\naction = view\n\nIf you then try to assemble a route to \n\n{code}\n'controller' => 'news',\n'action' => 'view',\n'id' => 3,\n{code}\n\nIt *will* match the more custom route as:\n\"newsitem\/3\"\nInstead of the default route:\n\"news\/view\/id\/3\"\n\nThis way custom routes automatically get used, instead of needing to specifically name a route to generate an url.\nAn easy way to build relative urls would be to use something like this in the url helper:\n\n{code}\n$request = $ctrl->getRequest();\n$ctrl = Zend_Controller_Front::getInstance();\n$router = $ctrl->getRouter();\n\n$url = rtrim($request->getBaseUrl(), '\/') . '\/';\n$url .= $router->assembleRoute($urlOptions + $request->getParams(), $reset);\n{code}\n\nInstead of using the current route as a base, it will look for the best route based on the available information.",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=joror",
                        "name": "joror",
                        "displayName": "Daan Broekhof",
                        "active": true
                    },
                    "created": "2007-03-08T08:49:52.000+0000",
                    "updated": "2007-03-08T08:49:52.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/13204",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=martel",
                        "name": "martel",
                        "displayName": "Michal Minicki",
                        "active": true
                    },
                    "body": "OK, Daan, it's something that generates a lot of overhead and for what reason? What do you need it for? \n\nAssemble is there to help you build URLs for the menu, for example. Or URLs leading to different pages of the same functionality (like forum thread pages). And you, as a developer of your own software, know exactly what routes you have previously configured so you can name them without any problem. Or use current one as a handy alternative. And you wouldn't probably want your menu to change if you later add some route that will be more specific than the one used in the menu.\n\nMoreover, assemble method gets called many times on the same page (unlike match which is called only once) so it has to be as lightweight as possible. And calling match method repeatedly for every assemble is just not advisable.\n\nI honestly don't see any cases where such pretty random assembling would be useful. Because if you want to give these URLs out it would be better to even hard code them and let the router match the route on the next request.\n\nI think you will have to subclass the router here. Which is not so hard as you're probably hand creating rewrite router anyways (to add new routes to it).",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=martel",
                        "name": "martel",
                        "displayName": "Michal Minicki",
                        "active": true
                    },
                    "created": "2007-03-08T09:17:48.000+0000",
                    "updated": "2007-03-08T09:17:48.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/13205",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=joror",
                        "name": "joror",
                        "displayName": "Daan Broekhof",
                        "active": true
                    },
                    "body": "I can understand your performance argument, and with that in mind this exact feature will indeed be a bit heavy.\nOn the other hand it will enable very flexible routing, where you can define new routes easily, and they get used right away & automatically - this would be very handy in big applications or for applications\/modules built by 3rd parties.\nIt is not a real requirement for the router to have this, but it would be an interesting feature, it would enable the router 'table' to work in both directions.\n\nAnd as for calling match() every route - this can be optimized away, as the information it is called for (checking if defaults for a route match the parameters) is already available in assemble method. I did not do so in this example to keep things simple.\n\nI have indeed already implemented my own router for this feature - but I suggested it here as I see this possibly being interesting for more people.",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=joror",
                        "name": "joror",
                        "displayName": "Daan Broekhof",
                        "active": true
                    },
                    "created": "2007-03-08T10:47:39.000+0000",
                    "updated": "2007-03-08T10:47:39.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/13207",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=martel",
                        "name": "martel",
                        "displayName": "Michal Minicki",
                        "active": true
                    },
                    "body": "Right, Daan, using defaults would be a lot more sensible. But I still can't see how this whole idea would be useful. Let's imagine we have these  routes defined in this exact order:\n\n{code}\nnew ..._Route(':action'\n    array('controller' => 'default', 'action' = 'index')\n);\n\nnew ..._Route('users\/:user'\n    array('controller' => 'user', 'action' = 'user')\n);\n\nnew ..._Route_Static('users'\n    array('controller' => 'user', 'action' = 'index')\n);\n\nnew ..._Route_Static('login'\n    array('controller' => 'profile', 'action' = 'login')\n);\n\n{code}\n\nHow could this method help? Can you prepare some useful use case? Convince me.",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=martel",
                        "name": "martel",
                        "displayName": "Michal Minicki",
                        "active": true
                    },
                    "created": "2007-03-08T11:29:20.000+0000",
                    "updated": "2007-03-08T11:29:20.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/13232",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=joror",
                        "name": "joror",
                        "displayName": "Daan Broekhof",
                        "active": true
                    },
                    "body": "An example based on your routes:\n\nI want to make a route to {'controller' => 'profile', 'action' = 'login'}:\n- default route result: '\/profile\/login'\n- assembleRoute result: '\/login'\n\nI want to make a route to {'controller' => 'user', 'action' = 'user', 'user' => 'daan'}\n- default route result: '\/user\/user' , the value 'user' => 'daan' is lost\n(but if the default route had a '\/*' it would result in  '\/user\/user\/user\/daan')\n- assembleRoute result: '\/users\/daan'\n\n----\n\nAn example with modules\/3rd party applications in mind:\n\nImagine a phpnuke kind of application based on the framework - a conglomeration of modules by different authors.\nSay one of these modules is a forum, which internally uses a 'topic\/:id' routing - this would not be confusing if the module was operated as a stand-alone application. \nProblems that can occur:\n- Style conflicts, where multiple modules would use dissimilar routing styles\n- Location\/module distinctions - you cannot put the 'forum' in a 'forum\/' path - all it's internal routes are locked.\n- Conflicting routing, there might be a blog module which also uses a 'topic\/:name' route - result: two modules which cannot co-exist without editing all the templates\/links in one of them.\n\n----\n\n_The advantage in short_:\nHaving the reverse routing available removes the need for the developer to know what the defined routes are - the router will find the most appropriate url for the supplied data.\nThis opens up the possibility for others (people who deploy the application \/ other developers) to create and remove routes at will, without having to wonder if it will break a controller or a view. \n(As long as there is at least one route which can represent any data combination - which usually is the default route with a '\/*' end)\n\nThe svn trunk of the framework currently has functionality to load routes from a config file - which opens up route definition to the crowd beyond the application developer - so it is indeed something to consider.\n\n\n\n\n\n\n",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=joror",
                        "name": "joror",
                        "displayName": "Daan Broekhof",
                        "active": true
                    },
                    "created": "2007-03-09T07:05:13.000+0000",
                    "updated": "2007-03-09T07:05:13.000+0000"
                }
            ]
        }
    },
    "transitions": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-1006\/transitions"
}