{
    "expand": "html",
    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-1019",
    "key": "ZF-1019",
    "fields": {
        "summary": {
            "name": "summary",
            "type": "java.lang.String",
            "value": "Zend_Config and numeric keys"
        },
        "timetracking": {
            "name": "timetracking",
            "type": "com.atlassian.jira.issue.fields.TimeTrackingSystemField"
        },
        "issuetype": {
            "name": "issuetype",
            "type": "com.atlassian.jira.issue.issuetype.IssueType",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issueType\/4",
                "name": "Improvement",
                "subtask": false
            }
        },
        "votes": {
            "name": "votes",
            "type": "com.atlassian.jira.issue.fields.VotesSystemField",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-1019\/votes",
                "votes": 0,
                "hasVoted": false
            }
        },
        "security": {
            "name": "security",
            "type": "com.atlassian.jira.issue.security.IssueSecurityLevel"
        },
        "resolution": {
            "name": "resolution",
            "type": "com.atlassian.jira.issue.resolution.Resolution",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/resolution\/1",
                "name": "Fixed"
            }
        },
        "fixVersions": {
            "name": "fixVersions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/version\/10022",
                    "id": 10022,
                    "description": "Beta Release; all components feature complete for 1.0",
                    "name": "0.9.0",
                    "userReleaseDate": "17\/Mar\/07",
                    "archived": true,
                    "releaseDate": "2007-03-17",
                    "released": true
                }
            ]
        },
        "resolutiondate": {
            "name": "resolutiondate",
            "type": "java.util.Date",
            "value": "2007-03-14T02:43:05.000+0000"
        },
        "reporter": {
            "name": "reporter",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=martel",
                "name": "martel",
                "displayName": "Michal Minicki",
                "active": true
            }
        },
        "created": {
            "name": "created",
            "type": "java.util.Date",
            "value": "2007-03-07T11:08:53.000+0000"
        },
        "updated": {
            "name": "updated",
            "type": "java.util.Date",
            "value": "2007-07-05T14:43:54.000+0000"
        },
        "customfield_10041": {
            "name": "Tags",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:labels"
        },
        "description": {
            "name": "description",
            "type": "java.lang.String",
            "value": "Zend_Config and Zend_Controller_Router_Rewrite play together for a long time now. But now and then a new Route object comes and this time I can't load them from config because of the key naming strictness in Zend_Config. Basically, I need to load an array indexed numerically. But let's work on examples.\n\nStandard Static Route instantiation and Zend_Config ini representation:\n\n{code}\n\n$route = new Zend_Controller_Router_Route_Static(\n    'forum', \n    array('controller' => 'forum', 'action' => 'list')\n);\n$router->addRoute('forums', $route);\n\n\/* Zend_Config ini structure to achieve the same:\n\nroutes.forums.type = \"Zend_Controller_Router_Route_Static\"\nroutes.forums.route = \"forum\"\nroutes.forums.defaults.controller = \"forum\"\nroutes.forums.defaults.action = \"list\" \n*\/\n\n$router->addConfig($config, 'routes');\n{code}\n\nNow, there is this new type of Route - Regex Route - which needs a mapping of regex subpatterns (which are numerically indexed in PHP) to parameter names. Example:\n\n{code}\n\n$route = new Zend_Controller_Router_Route_Regex(\n    'forum\/(\\d+)(?:p\/(\\d+))?', \n    array('controller' => 'forum', 'action' => 'threads', 'page' => '1'),\n    array(1 => 'forum_id', 2 => 'page')\n);\n$router->addRoute('threads', $route);\n\n\/* Zend_Config ini:\n\nroutes.threads.type = \"Zend_Controller_Router_Route_Regex\"\nroutes.threads.route = \"forum\/(\\d+)(?:p\/(\\d+))?\"\nroutes.threads.defaults.controller = \"forum\"\nroutes.threads.defaults.action = \"threads\"\nroutes.threads.defaults.page = \"1\"\nroutes.threads.map.1 = \"forum_id\"\nroutes.threads.map.2 = \"page\"\n*\/\n\n$router->addConfig($config, 'routes');\n{code}\n\nAs you probably see already, I can't do > routes.threads.map.1 = \"forum_id\" < in Zend_Config because of a very strict naming constraints. You keep the values in associative array so why can't you allow the same kind of keys that PHP allows you to use? Is this a necessity? Or maybe you could loosen it a bit, Rob?"
        },
        "priority": {
            "name": "priority",
            "type": "com.atlassian.jira.issue.priority.Priority",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/priority\/3",
                "name": "Major"
            }
        },
        "duedate": {
            "name": "duedate",
            "type": "java.util.Date"
        },
        "customfield_10022": {
            "name": "Fix Version Priority",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:select"
        },
        "watcher": {
            "name": "watcher",
            "type": "watcher",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-1019\/watchers",
                "isWatching": false,
                "watchCount": 3
            }
        },
        "worklog": {
            "name": "worklog",
            "type": "worklog",
            "value": [

            ]
        },
        "status": {
            "name": "status",
            "type": "com.atlassian.jira.issue.status.Status",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/status\/5",
                "name": "Resolved"
            }
        },
        "labels": {
            "name": "labels",
            "type": "com.atlassian.jira.issue.label.Label",
            "value": [

            ]
        },
        "assignee": {
            "name": "assignee",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=rob",
                "name": "rob",
                "displayName": "Rob Allen",
                "active": true
            }
        },
        "links": {
            "name": "links",
            "type": "issuelinks",
            "value": [

            ]
        },
        "attachment": {
            "name": "attachment",
            "type": "attachment",
            "value": [

            ]
        },
        "sub-tasks": {
            "name": "sub-tasks",
            "type": "issuelinks",
            "value": [

            ]
        },
        "versions": {
            "name": "versions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/version\/10021",
                    "id": 10021,
                    "description": "Preview release; DB, Filter, Log",
                    "name": "0.8.0",
                    "userReleaseDate": "21\/Feb\/07",
                    "archived": true,
                    "releaseDate": "2007-02-21",
                    "released": true
                }
            ]
        },
        "project": {
            "name": "project",
            "type": "com.atlassian.jira.project.Project",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/project\/ZF",
                "key": "ZF",
                "name": "Zend Framework",
                "roles": {

                }
            }
        },
        "components": {
            "name": "components",
            "type": "com.atlassian.jira.bc.project.component.ProjectComponent",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/component\/10010",
                    "id": 10010,
                    "name": "Zend_Config",
                    "description": "property based interface to an array",
                    "isAssigneeTypeValid": false
                }
            ]
        },
        "comment": {
            "name": "comment",
            "type": "com.atlassian.jira.issue.fields.CommentSystemField",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/13194",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=rob",
                        "name": "rob",
                        "displayName": "Rob Allen",
                        "active": true
                    },
                    "body": "Hi,\n\nThe trouble is that you couldn't use the object based interface to access the data.\n\ni.e. \n{code}\n$map1 = $config->threads->map->1;\n{code}\n\nis invalid PHP which may be confusing.\n\nObviously\n{code}\n$map = $config->threads->map->asArray();\n{code}\nshould work fine though.\n\nThe question is whether we should break the predictably that you can always access a config key using the object notation. If so, then the fix is easy as it's a case of changing the validation regex.\n\nRegards,\n\nRob...",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=rob",
                        "name": "rob",
                        "displayName": "Rob Allen",
                        "active": true
                    },
                    "created": "2007-03-07T15:17:08.000+0000",
                    "updated": "2007-03-07T15:17:08.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/13196",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=darby",
                        "name": "darby",
                        "displayName": "Darby Felton",
                        "active": true
                    },
                    "body": "Of course, a simple workaround is to prefix the keys, such as {{map\\_1}}, so I'm tempted to say this isn't an issue.\n\nHowever, since __get() doesn't care whether the named value is a valid PHP identifier, maybe Zend_Config shouldn't care, either. Syntax like the following would work if key validation were absent:\n\n{code}\necho $config->threads->map->{1};\n{code}\n\nMaybe we should relieve Zend_Config of the burden of checking the key's validity, since it appears to be more restrictive than what PHP already allows.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=darby",
                        "name": "darby",
                        "displayName": "Darby Felton",
                        "active": true
                    },
                    "created": "2007-03-07T15:33:50.000+0000",
                    "updated": "2007-03-07T15:33:50.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/13197",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=martel",
                        "name": "martel",
                        "displayName": "Michal Minicki",
                        "active": true
                    },
                    "body": "How about adding get and set methods which could coexist with object based interface? Like:\n\n{code}\n$map1 = $config->threads->map->get(\"1\");\n{code}\n\nIt's a simple change that should deal with such edge cases but won't restrict the usage at the same time. And I guess everyone knows one can't use identifiers starting with numbers as it's a basic rule of php. Could we assume that someone choosing numeric indexes knows what he is doing and let him do it? Maybe with little heads-up in the manual.\n\n{code}\npublic method get($name) {\n   return $this->__get($name);\n}\n\npublic method set($name, $value) {\n   $this->__set($name, $value);\n   return $this;\n}\n{code}\n\nOf course I only need asArray but it seems like a nice addition. What do you think? ",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=martel",
                        "name": "martel",
                        "displayName": "Michal Minicki",
                        "active": true
                    },
                    "created": "2007-03-07T15:39:50.000+0000",
                    "updated": "2007-03-07T15:39:50.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/13210",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=darby",
                        "name": "darby",
                        "displayName": "Darby Felton",
                        "active": true
                    },
                    "body": "Changed fix version to unknown.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=darby",
                        "name": "darby",
                        "displayName": "Darby Felton",
                        "active": true
                    },
                    "created": "2007-03-08T14:05:23.000+0000",
                    "updated": "2007-03-08T14:05:23.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/13315",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=rob",
                        "name": "rob",
                        "displayName": "Rob Allen",
                        "active": true
                    },
                    "body": "Fixed in svn revision 3913",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=rob",
                        "name": "rob",
                        "displayName": "Rob Allen",
                        "active": true
                    },
                    "created": "2007-03-14T02:43:04.000+0000",
                    "updated": "2007-03-14T02:43:04.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/13316",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=martel",
                        "name": "martel",
                        "displayName": "Michal Minicki",
                        "active": true
                    },
                    "body": "Thanks, Rob.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=martel",
                        "name": "martel",
                        "displayName": "Michal Minicki",
                        "active": true
                    },
                    "created": "2007-03-14T03:03:10.000+0000",
                    "updated": "2007-03-14T03:03:10.000+0000"
                }
            ]
        }
    },
    "transitions": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-1019\/transitions"
}