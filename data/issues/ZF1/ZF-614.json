{
    "expand": "html",
    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-614",
    "key": "ZF-614",
    "fields": {
        "summary": {
            "name": "summary",
            "type": "java.lang.String",
            "value": "Controllers in subdirectories (or any different directory) \/ Modules"
        },
        "timetracking": {
            "name": "timetracking",
            "type": "com.atlassian.jira.issue.fields.TimeTrackingSystemField"
        },
        "issuetype": {
            "name": "issuetype",
            "type": "com.atlassian.jira.issue.issuetype.IssueType",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/issueType\/2",
                "name": "New Feature",
                "subtask": false
            }
        },
        "votes": {
            "name": "votes",
            "type": "com.atlassian.jira.issue.fields.VotesSystemField",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-614\/votes",
                "votes": 0,
                "hasVoted": false
            }
        },
        "security": {
            "name": "security",
            "type": "com.atlassian.jira.issue.security.IssueSecurityLevel"
        },
        "resolution": {
            "name": "resolution",
            "type": "com.atlassian.jira.issue.resolution.Resolution",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/resolution\/1",
                "name": "Fixed"
            }
        },
        "fixVersions": {
            "name": "fixVersions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/version\/10040",
                    "id": 10040,
                    "description": "Preview Release; MVC maturation, HTTP client, Gdata",
                    "name": "0.6.0",
                    "userReleaseDate": "16\/Dec\/06",
                    "archived": true,
                    "releaseDate": "2006-12-16",
                    "released": true
                }
            ]
        },
        "resolutiondate": {
            "name": "resolutiondate",
            "type": "java.util.Date",
            "value": "2006-12-06T15:22:17.000+0000"
        },
        "reporter": {
            "name": "reporter",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=martel",
                "name": "martel",
                "displayName": "Michal Minicki",
                "active": true
            }
        },
        "created": {
            "name": "created",
            "type": "java.util.Date",
            "value": "2006-12-03T05:55:05.000+0000"
        },
        "updated": {
            "name": "updated",
            "type": "java.util.Date",
            "value": "2007-07-05T14:43:31.000+0000"
        },
        "customfield_10041": {
            "name": "Tags",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:labels"
        },
        "description": {
            "name": "description",
            "type": "java.lang.String",
            "value": "I would like to touch this subject again. I think I have found a solution which \nshould suit everybody as it's very easy to manage from a user standpoint and \nalso easy to implement.\n\n===============================================================================\nFramework user standpoint\n\nIt's a concept of named modules. Let's work on a use case first - let's \nbootstrap our application with additional directories in the standard way:\n\n{code}\nrequire_once 'Zend\/Controller\/Front.php';\n$controller = Zend_Controller_Front::getInstance();\n\n$dirs = array(\n\t'default' => '\/home\/martel\/WWW\/test\/controllers',\n\t'forum'   => '\/home\/martel\/WWW\/test\/controllers\/forum',\n\t'admin'   => '\/home\/martel\/WWW\/test\/controllers\/admin',\n\t'other'   => '\/var\/www\/even\/outside\/root\/dir'\n);\n\n$controller->setControllerDirectory($dirs);\necho $controller->dispatch();\n{code}\n\nAs you see, it's an already working way of setting controller dirs. Nothing is\nor needs to be changed up to this point. We can access all the dirs with:\n\nhttp:\/\/localhost\/test\/index.php?controller=news&action=add\n\nBut what happens when you want to use a NewsController in 'default' as well s 'admin' \ndirectories? Former is used to display news to the users and latter to \nadminister the site.\n\nSo let's assume we have an additional parameter named 'module'. And if \nwe would like to access the admin module specifically, we would use the \nfollowing URIs:\n\nWith standard URL Scheme:\nhttp:\/\/localhost\/test\/index.php?module=admin&controller=news&action=add\n\nOr with RewriteRouter (route: ':module\/:controller:\/:action'):\nhttp:\/\/localhost\/test\/admin\/news\/add\n\nThis way we can access any directory structure by using named modules. And \nmoreover, we can have controllers named exactly the same in different \ndirectiories - something that is not possible with current codebase.\n\nBut it's still a backwards compatible solution - we can access the controllers \nwithout relying on modules. In that case dispatcher would iterate through \nall the defined controller dirs like it is being done right now.\n\nNow let's get to the implementation.\n\n===============================================================================\nFramework Code\n\nIt's really easy thing to do as setControllerDir is already setting directories \nby the key, so it's only a matter of modifying _getController() method of the \ndispatcher to be aware of modules (new code is marked by pluses):\n\n{code}\nprotected function _getController($request, $directories = null, $module = null)\n{\n     ...\n\n     $className = $this->formatControllerName($controllerName);\n\n     \/**\n      * Determine if controller is dispatchable\n      *\/\n     $dispatchable = false;\n\n+    if ($module !== null) {\n+        $dispatchable = Zend::isReadable($directory[$module]);\n+    } else {\n         foreach ($directories as $directory) {\n             $dispatchable = Zend::isReadable($directory ...);\n             if ($dispatchable) break;\n         }\n+    }\n\n     return $dispatchable ? $className : false;\n}\n{code}\n\nAnd that's pretty much it. Of course we would still have to add \nformatModuleName family of methods (similar to controller and action names), an \noptional module parameter to addControllerDir to make it store directories \nunder specified key and finally a delegate methods in Front Controller.\n\npublic function addControllerDirectory($path, $module = null)\n\nFinally it would probably be a good idea to move \"Determine if controller is \ndispatchable\" block out to it's own method. It will allow for easier \nsubclassing and will meet Rob's request:\n\nhttp:\/\/www.nabble.com\/%24_GET%2C%24_POST-and-Zend_Controller_Request_Http-tf2710146s16154.html\n\n===============================================================================\nBackwards compatibility\n\nThis implementation is fully backwards compatible but maybe it would be better \nto drop backwards compatibility in order to clean the code? I mean make one \ndefault module instead of directory iteration, etc. And we're already shooting \nour foots with parameter ordering (parameters renamed to better show what's on \nmy mind):\n\n{code}\npublic function addControllerDirectory($dir, $name)\npublic function addRoute($name, $route)\n{code}"
        },
        "priority": {
            "name": "priority",
            "type": "com.atlassian.jira.issue.priority.Priority",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/priority\/3",
                "name": "Major"
            }
        },
        "duedate": {
            "name": "duedate",
            "type": "java.util.Date"
        },
        "customfield_10022": {
            "name": "Fix Version Priority",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:select"
        },
        "watcher": {
            "name": "watcher",
            "type": "watcher",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-614\/watchers",
                "isWatching": false,
                "watchCount": 2
            }
        },
        "worklog": {
            "name": "worklog",
            "type": "worklog",
            "value": [

            ]
        },
        "status": {
            "name": "status",
            "type": "com.atlassian.jira.issue.status.Status",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/status\/5",
                "name": "Resolved"
            }
        },
        "labels": {
            "name": "labels",
            "type": "com.atlassian.jira.issue.label.Label",
            "value": [

            ]
        },
        "assignee": {
            "name": "assignee",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                "name": "matthew",
                "displayName": "Matthew Weier O'Phinney",
                "active": true
            }
        },
        "links": {
            "name": "links",
            "type": "issuelinks",
            "value": [

            ]
        },
        "attachment": {
            "name": "attachment",
            "type": "attachment",
            "value": [

            ]
        },
        "sub-tasks": {
            "name": "sub-tasks",
            "type": "issuelinks",
            "value": [

            ]
        },
        "versions": {
            "name": "versions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/version\/10002",
                    "id": 10002,
                    "description": "Preview Release; MVC refactoring and other enhancements and fixes",
                    "name": "0.2.0",
                    "userReleaseDate": "29\/Oct\/06",
                    "archived": true,
                    "releaseDate": "2006-10-29",
                    "released": true
                }
            ]
        },
        "project": {
            "name": "project",
            "type": "com.atlassian.jira.project.Project",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/project\/ZF",
                "key": "ZF",
                "name": "Zend Framework",
                "roles": {

                }
            }
        },
        "components": {
            "name": "components",
            "type": "com.atlassian.jira.bc.project.component.ProjectComponent",
            "value": [
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/component\/10011",
                    "id": 10011,
                    "name": "Zend_Controller",
                    "description": "front controller, including router and dispatcher",
                    "isAssigneeTypeValid": false
                }
            ]
        },
        "comment": {
            "name": "comment",
            "type": "com.atlassian.jira.issue.fields.CommentSystemField",
            "value": [
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/11773",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                        "name": "matthew",
                        "displayName": "Matthew Weier O'Phinney",
                        "active": true
                    },
                    "body": "I like this idea a lot -- goes in line somewhat with changes I've made to the Zend_View helper and filter paths recently.\n\nOne note: you can actually reference controllers in subdirectories by using a hyphen or underscore: http:\/\/example.com\/admin-news\/edit will use the Admin_NewsController found in Admin\/NewsController.php. However, I like the idea of specifying a module instead of using the hyphen or underscore character.\n\nA few comments: I'd change your _getController() signature to read _getController($request, $directories = null, $module = 'default'), as I think it's more likely that there won't be a module and less likely that there won't be directories.\n\nAdditionally, I'd like to propose that, for BC purposes, if the array passed to setControllerDirectory() is indexed and not associative, the string 'default' be used as the module for each.\n\nOtherwise, all of this makes sense to me, and gives some good flexibility.",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                        "name": "matthew",
                        "displayName": "Matthew Weier O'Phinney",
                        "active": true
                    },
                    "created": "2006-12-03T08:51:09.000+0000",
                    "updated": "2006-12-03T08:51:09.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/11799",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                        "name": "matthew",
                        "displayName": "Matthew Weier O'Phinney",
                        "active": true
                    },
                    "body": "This is actually a little more intrusive than it looks. The logic will have to account for multiple paths under the same module, and the ability to pass a module name to setControllerDirectory. Additionally, in looking through the code, I'm thinking that the paths need to be cached in the controller and passed to the dispatcher just prior to dispatching. I'm going to start re-factoring today.",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                        "name": "matthew",
                        "displayName": "Matthew Weier O'Phinney",
                        "active": true
                    },
                    "created": "2006-12-05T14:38:23.000+0000",
                    "updated": "2006-12-05T14:38:23.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/11802",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=martel",
                        "name": "martel",
                        "displayName": "Michal Minicki",
                        "active": true
                    },
                    "body": "Maybe it would be easier to make one directory per module?",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=martel",
                        "name": "martel",
                        "displayName": "Michal Minicki",
                        "active": true
                    },
                    "created": "2006-12-06T02:04:42.000+0000",
                    "updated": "2006-12-06T02:04:42.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/11803",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                        "name": "matthew",
                        "displayName": "Matthew Weier O'Phinney",
                        "active": true
                    },
                    "body": "The current code in the dispatcher loops through the array and simply normalizes the paths sent. The problem is: what if the array is non-associative?\n\nAs I think about it, though, the logic remains the same: it's basically a FIFO array unless a module is requested, in which case that module gets precedence.\n\nI still want to do the caching in the front controller, so that the order in which items are set in the front controller doesn't become an issue (right now, if you call setControllerDirectory() prior to setting a custom dispatcher, the settings for the controller directory won't be pushed into the new dispatcher).",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                        "name": "matthew",
                        "displayName": "Matthew Weier O'Phinney",
                        "active": true
                    },
                    "created": "2006-12-06T04:23:48.000+0000",
                    "updated": "2006-12-06T04:23:48.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/11808",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=martel",
                        "name": "martel",
                        "displayName": "Michal Minicki",
                        "active": true
                    },
                    "body": "To answer your question (regarding non-associative array). With the current codebase the array is mixed, so you can have associative as well as numeric indexes on the directories:\n\n{code}\n$dirs = array(\n    'controllers',\n    'forum' => 'controllers\/forum',\n    'admin' => 'controllers\/admin'\n);\n\n$controller->setControllerDirectory($dirs);\n$controller->addControllerDirectory('controllers\/default1');\n$controller->addControllerDirectory('controllers\/default2');\n\nvar_dump($controller->getControllerDirectory());\n{code}\n\nThis code results in:\n\n{code}\narray(5) {\n  [0]=>\n  string(11) \"controllers\"\n  [\"forum\"]=>\n  string(17) \"controllers\/forum\"\n  [\"admin\"]=>\n  string(17) \"controllers\/admin\"\n  [1]=>\n  string(20) \"controllers\/default1\"\n  [2]=>\n  string(20) \"controllers\/default2\"\n}\n{code}\n\nTo keep backwards compatibility, I would scan all the dirs when module is not present and only one if programmer specifically and conciously chooses the module thru an URL. Alternatively, we can asume that all integer-indexed values would be in \"default\" module. \n\nOr we can break compatibility and REQUIRE an associative array. \n\nThe call is yours :)",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=martel",
                        "name": "martel",
                        "displayName": "Michal Minicki",
                        "active": true
                    },
                    "created": "2006-12-06T11:02:04.000+0000",
                    "updated": "2006-12-06T11:02:04.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/11809",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                        "name": "matthew",
                        "displayName": "Matthew Weier O'Phinney",
                        "active": true
                    },
                    "body": "I've been implementing and testing, and I'm beginning to wonder if the module (other than 'default' or numerical module names) should be used as a prefix for the class. The reason I mention it is that without this, we can start running into naming collisions, and it becomes difficult (actually, impossible) for a class in one module to extent that in another module if they have the same name.\n\nAs it is, testing without the prefix means that I cannot reference the controller anywhere else in the test class prior to the modules tests.\n\nI'm going to sit on the changes a bit before committing them; anybody with feedback, please send it here!",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                        "name": "matthew",
                        "displayName": "Matthew Weier O'Phinney",
                        "active": true
                    },
                    "created": "2006-12-06T11:31:57.000+0000",
                    "updated": "2006-12-06T11:31:57.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/11814",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                        "name": "matthew",
                        "displayName": "Matthew Weier O'Phinney",
                        "active": true
                    },
                    "body": "I have code working now. However... one thing not discussed is how to specify the module in the URI. Right now, by default, you can only do it with:\n\n{code}\nhttp:\/\/localhost\/controller\/action\/module\/modulename\n{code}\n\nI could add another default route in the RewriteRouter to match something like http:\/\/localhost\/module\/controller\/action, but that then conflicts with any other routes with three arguments (such as :controller\/:action\/:id) as well as the current default route.\n\nI'll commit the code for now (module support in dispatcher), but we'll need to figure out how and where to specify modules in the routing process. [ZF-617] addresses some of this, and I'll take the discussion to there.",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                        "name": "matthew",
                        "displayName": "Matthew Weier O'Phinney",
                        "active": true
                    },
                    "created": "2006-12-06T15:13:35.000+0000",
                    "updated": "2006-12-06T15:13:35.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/11815",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                        "name": "matthew",
                        "displayName": "Matthew Weier O'Phinney",
                        "active": true
                    },
                    "body": "Dispatcher changes (and front controller) are in subersoin as of revision 2172. There are still unanswered questions about how to handle routing, but those will be dealth with in ZF-617.",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                        "name": "matthew",
                        "displayName": "Matthew Weier O'Phinney",
                        "active": true
                    },
                    "created": "2006-12-06T15:22:17.000+0000",
                    "updated": "2006-12-06T15:22:17.000+0000"
                }
            ]
        }
    },
    "transitions": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-614\/transitions"
}