{
    "expand": "html",
    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-12160",
    "key": "ZF-12160",
    "fields": {
        "summary": {
            "name": "summary",
            "type": "java.lang.String",
            "value": "Zend_Validate_EmailAddress Deep MX Checking Logic Flaw"
        },
        "timetracking": {
            "name": "timetracking",
            "type": "com.atlassian.jira.issue.fields.TimeTrackingSystemField"
        },
        "issuetype": {
            "name": "issuetype",
            "type": "com.atlassian.jira.issue.issuetype.IssueType",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issueType\/1",
                "name": "Bug",
                "subtask": false
            }
        },
        "votes": {
            "name": "votes",
            "type": "com.atlassian.jira.issue.fields.VotesSystemField",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-12160\/votes",
                "votes": 0,
                "hasVoted": false
            }
        },
        "security": {
            "name": "security",
            "type": "com.atlassian.jira.issue.security.IssueSecurityLevel"
        },
        "fixVersions": {
            "name": "fixVersions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [

            ]
        },
        "reporter": {
            "name": "reporter",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=sonnysavage",
                "name": "sonnysavage",
                "displayName": "Edward \"Sonny\" Savage",
                "active": true
            }
        },
        "created": {
            "name": "created",
            "type": "java.util.Date",
            "value": "2012-04-18T13:17:13.000+0000"
        },
        "updated": {
            "name": "updated",
            "type": "java.util.Date",
            "value": "2012-04-18T13:35:39.000+0000"
        },
        "customfield_10041": {
            "name": "Tags",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:labels",
            "value": [
                "emailaddress",
                "validate"
            ]
        },
        "description": {
            "name": "description",
            "type": "java.lang.String",
            "value": "Zend_Validate_EmailAddress::_isReserved fails on MX IP addresses that are public. Some are because of public IPs in the $_invalidIp array, and some are because there's something wrong with the logic.\r\n\r\nThese two domains return false negatives:\r\n - http:\/\/dnsquery.org\/dnsquery\/harn.ufl.edu\/MX\r\n - http:\/\/dnsquery.org\/dnsquery\/martinhealth.org\/MX"
        },
        "priority": {
            "name": "priority",
            "type": "com.atlassian.jira.issue.priority.Priority",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/priority\/3",
                "name": "Major"
            }
        },
        "duedate": {
            "name": "duedate",
            "type": "java.util.Date"
        },
        "customfield_10022": {
            "name": "Fix Version Priority",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:select"
        },
        "watcher": {
            "name": "watcher",
            "type": "watcher",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-12160\/watchers",
                "isWatching": false,
                "watchCount": 0
            }
        },
        "worklog": {
            "name": "worklog",
            "type": "worklog",
            "value": [

            ]
        },
        "status": {
            "name": "status",
            "type": "com.atlassian.jira.issue.status.Status",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/status\/1",
                "name": "Open"
            }
        },
        "labels": {
            "name": "labels",
            "type": "com.atlassian.jira.issue.label.Label",
            "value": [
                "emailaddresses",
                "validate"
            ]
        },
        "assignee": {
            "name": "assignee",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                "name": "thomas",
                "displayName": "Thomas Weidner",
                "active": true
            }
        },
        "links": {
            "name": "links",
            "type": "issuelinks",
            "value": [

            ]
        },
        "attachment": {
            "name": "attachment",
            "type": "attachment",
            "value": [

            ]
        },
        "sub-tasks": {
            "name": "sub-tasks",
            "type": "issuelinks",
            "value": [

            ]
        },
        "versions": {
            "name": "versions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/version\/10981",
                    "id": 10981,
                    "description": "Mini Release",
                    "name": "1.11.11",
                    "userReleaseDate": "29\/Sep\/11",
                    "archived": false,
                    "releaseDate": "2011-09-29",
                    "released": true
                }
            ]
        },
        "project": {
            "name": "project",
            "type": "com.atlassian.jira.project.Project",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/project\/ZF",
                "key": "ZF",
                "name": "Zend Framework",
                "roles": {

                }
            }
        },
        "components": {
            "name": "components",
            "type": "com.atlassian.jira.bc.project.component.ProjectComponent",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/component\/10140",
                    "id": 10140,
                    "name": "Zend_Validate",
                    "isAssigneeTypeValid": false
                }
            ]
        },
        "comment": {
            "name": "comment",
            "type": "com.atlassian.jira.issue.fields.CommentSystemField",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/50329",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=sonnysavage",
                        "name": "sonnysavage",
                        "displayName": "Edward \"Sonny\" Savage",
                        "active": true
                    },
                    "body": "My next comment will be a patch, using my solution. I decided that the simplest (clearest?) way to compare IP addresses was to convert them to their decimal integer equivalents, and I restructured the reserved IP array to accommodate that.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=sonnysavage",
                        "name": "sonnysavage",
                        "displayName": "Edward \"Sonny\" Savage",
                        "active": true
                    },
                    "created": "2012-04-18T13:33:16.000+0000",
                    "updated": "2012-04-18T13:33:16.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/50330",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=sonnysavage",
                        "name": "sonnysavage",
                        "displayName": "Edward \"Sonny\" Savage",
                        "active": true
                    },
                    "body": "{code:title=EmailAddress.php.patch}\r\nIndex: EmailAddress.php\r\n===================================================================\r\n--- EmailAddress.php\t(revision 1376)\r\n+++ EmailAddress.php\t(working copy)\r\n@@ -63,27 +63,27 @@\r\n     );\r\n \r\n     \/**\r\n-     * @see http:\/\/en.wikipedia.org\/wiki\/IPv4\r\n-     * @var array\r\n+     * @see http:\/\/en.wikipedia.org\/wiki\/Reserved_IP_addresses#Reserved_IPv4_addresses\r\n+     * @var array [first octet] => [[CIDR] => [[range start], [range end]]]\r\n      *\/\r\n-    protected $_invalidIp = array(\r\n-        '0'   => '0.0.0.0\/8',\r\n-        '10'  => '10.0.0.0\/8',\r\n-        '127' => '127.0.0.0\/8',\r\n-        '128' => '128.0.0.0\/16',\r\n-        '169' => '169.254.0.0\/16',\r\n-        '172' => '172.16.0.0\/12',\r\n-        '191' => '191.255.0.0\/16',\r\n+    protected $_reservedIps = array(\r\n+        '0' => array('0.0.0.0\/8' => array('0.0.0.0', '0.255.255.255',),),\r\n+        '10' => array('10.0.0.0\/8' => array('10.0.0.0', '10.255.255.255',),),\r\n+        '127' => array('127.0.0.0\/8' => array('127.0.0.0', '127.255.255.255',),),\r\n+        '169' => array('169.254.0.0\/16' => array('169.254.0.0', '169.254.255.255',),),\r\n+        '172' => array('172.16.0.0\/12' => array('172.16.0.0', '172.31.255.255',),),\r\n         '192' => array(\r\n-            '192.0.0.0\/24',\r\n-            '192.0.2.0\/24',\r\n-            '192.88.99.0\/24',\r\n-            '192.168.0.0\/16'\r\n+            '192.0.2.0\/24' => array('192.0.2.0', '192.0.2.255',),\r\n+            '192.88.99.0\/24' => array('192.88.99.0', '192.88.99.255',),\r\n+            '192.168.0.0\/16' => array('192.168.0.0', '192.168.255.255',),\r\n         ),\r\n-        '198' => '198.18.0.0\/15',\r\n-        '223' => '223.255.255.0\/24',\r\n-        '224' => '224.0.0.0\/4',\r\n-        '240' => '240.0.0.0\/4'\r\n+        '198' => array(\r\n+            '198.18.0.0\/15' => array('198.18.0.0', '198.19.255.255',),\r\n+            '198.51.100.0\/24' => array('198.51.100.0', '198.51.100.255',),\r\n+        ),\r\n+        '203' => array('203.0.113.0\/24' => array('203.0.113.0', '203.0.113.255',),),\r\n+        '224' => array('224.0.0.0\/4' => array('224.0.0.0', '239.255.255.255',),),\r\n+        '240' => array('240.0.0.0\/4' => array('240.0.0.0', '255.255.255.255',),),\r\n     );\r\n \r\n     \/**\r\n@@ -337,64 +337,52 @@\r\n      * @param string $host\r\n      * @return boolean\r\n      *\/\r\n-    private function _isReserved($host){\r\n+    private function _isReserved($host)\r\n+    {\r\n         if (!preg_match('\/^([0-9]{1,3}\\.){3}[0-9]{1,3}$\/', $host)) {\r\n             $host = gethostbyname($host);\r\n         }\r\n \r\n-        $octet = explode('.',$host);\r\n-        if ((int)$octet[0] >= 224) {\r\n+        $octets = explode('.', $host);\r\n+        if (224 <= (int) $octets[0]) {\r\n+            \/\/ IP Addresses beginning with 224 or greater are all reserved, short-circuit range checks\r\n             return true;\r\n-        } else if (array_key_exists($octet[0], $this->_invalidIp)) {\r\n-            foreach ((array)$this->_invalidIp[$octet[0]] as $subnetData) {\r\n-                \/\/ we skip the first loop as we already know that octet matches\r\n-                for ($i = 1; $i < 4; $i++) {\r\n-                    if (strpos($subnetData, $octet[$i]) !== $i * 4) {\r\n-                        break;\r\n-                    }\r\n-                }\r\n+        } elseif (array_key_exists($octets[0], $this->_reservedIps)) {\r\n+            \/\/ for integer comparisons\r\n+            $intIp = $this->_ipToInt($host);\r\n \r\n-                $host       = explode(\"\/\", $subnetData);\r\n-                $binaryHost = \"\";\r\n-                $tmp        = explode(\".\", $host[0]);\r\n-                for ($i = 0; $i < 4 ; $i++) {\r\n-                    $binaryHost .= str_pad(decbin($tmp[$i]), 8, \"0\", STR_PAD_LEFT);\r\n-                }\r\n-\r\n-                $segmentData = array(\r\n-                    'network'   => (int)$this->_toIp(str_pad(substr($binaryHost, 0, $host[1]), 32, 0)),\r\n-                    'broadcast' => (int)$this->_toIp(str_pad(substr($binaryHost, 0, $host[1]), 32, 1))\r\n-                );\r\n-\r\n-                for ($j = $i; $j < 4; $j++) {\r\n-                    if ((int)$octet[$j] < $segmentData['network'][$j] ||\r\n-                        (int)$octet[$j] > $segmentData['broadcast'][$j]) {\r\n-                        return false;\r\n+            \/\/ loop over reserved IP addresses\r\n+            foreach ($this->_reservedIps as $ranges) {\r\n+                foreach ($ranges as $range) {\r\n+                    if (($this->_ipToInt($range[0]) <= $intIp)\r\n+                            && ($this->_ipToInt($range[1]) >= $intIp)) {\r\n+                        \/\/ the IP address falls in a reserved range\r\n+                        return true;\r\n                     }\r\n                 }\r\n             }\r\n \r\n-            return true;\r\n+            \/\/ the IP address did not fall in a reserved range\r\n+            return false;\r\n         } else {\r\n             return false;\r\n         }\r\n     }\r\n \r\n     \/**\r\n-     * Converts a binary string to an IP address\r\n+     * Convert a dot-decimal IP address to it's decimal integer equivalent\r\n      *\r\n-     * @param string $binary\r\n-     * @return mixed\r\n+     * @param string $ip\r\n+     * @return integer\r\n      *\/\r\n-    private function _toIp($binary)\r\n+    private function _ipToInt($ip)\r\n     {\r\n-        $ip  = array();\r\n-        $tmp = explode(\".\", chunk_split($binary, 8, \".\"));\r\n-        for ($i = 0; $i < 4 ; $i++) {\r\n-            $ip[$i] = bindec($tmp[$i]);\r\n+        $octets = explode('.', $ip);\r\n+        foreach ($octets as $key => $octet) {\r\n+            $octets[$key] = str_pad(decbin($octet), 8, '0', STR_PAD_LEFT);\r\n         }\r\n-\r\n-        return $ip;\r\n+        $bin = implode('', $octets);\r\n+        return bindec($bin);\r\n     }\r\n \r\n     \/**\r\n{code}",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=sonnysavage",
                        "name": "sonnysavage",
                        "displayName": "Edward \"Sonny\" Savage",
                        "active": true
                    },
                    "created": "2012-04-18T13:35:39.000+0000",
                    "updated": "2012-04-18T13:35:39.000+0000"
                }
            ]
        }
    },
    "transitions": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-12160\/transitions"
}