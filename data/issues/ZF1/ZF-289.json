{
    "expand": "html",
    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-289",
    "key": "ZF-289",
    "fields": {
        "summary": {
            "name": "summary",
            "type": "java.lang.String",
            "value": "This is a new approach for the Session Module for Zend and is open for any implementation in the future"
        },
        "timetracking": {
            "name": "timetracking",
            "type": "com.atlassian.jira.issue.fields.TimeTrackingSystemField"
        },
        "issuetype": {
            "name": "issuetype",
            "type": "com.atlassian.jira.issue.issuetype.IssueType",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/issueType\/2",
                "name": "New Feature",
                "subtask": false
            }
        },
        "votes": {
            "name": "votes",
            "type": "com.atlassian.jira.issue.fields.VotesSystemField",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-289\/votes",
                "votes": 0,
                "hasVoted": false
            }
        },
        "security": {
            "name": "security",
            "type": "com.atlassian.jira.issue.security.IssueSecurityLevel"
        },
        "resolution": {
            "name": "resolution",
            "type": "com.atlassian.jira.issue.resolution.Resolution",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/resolution\/6",
                "name": "Not an Issue"
            }
        },
        "fixVersions": {
            "name": "fixVersions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [

            ]
        },
        "resolutiondate": {
            "name": "resolutiondate",
            "type": "java.util.Date",
            "value": "2006-11-10T23:34:43.000+0000"
        },
        "reporter": {
            "name": "reporter",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=nicolaedima",
                "name": "nicolaedima",
                "displayName": "Nicolae Dima",
                "active": true
            }
        },
        "created": {
            "name": "created",
            "type": "java.util.Date",
            "value": "2006-07-27T04:04:28.000+0000"
        },
        "updated": {
            "name": "updated",
            "type": "java.util.Date",
            "value": "2007-07-05T14:44:31.000+0000"
        },
        "customfield_10041": {
            "name": "Tags",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:labels"
        },
        "description": {
            "name": "description",
            "type": "java.lang.String",
            "value": "Come advantages are:\n\n    * use PHP native functions like: session_start() and session_destroy();\n    * use the global $_SESSION;\n\nThe plugin is using an SQL table (the example is for a MySQL table)\n\nCode:\n\nCREATE TABLE `app_session` (\n`session_id` varchar(32) collate latin1_general_ci NOT NULL default '',\n`session_time` int(11) NOT NULL default '0',\n`session_start` int(11) NOT NULL default '0',\n`session_data` text collate latin1_general_ci NOT NULL,\n`session_key` varchar(50) collate latin1_general_ci default NULL\n) ENGINE=MyISAM DEFAULT CHARSET=latin1 COLLATE=latin1_general_ci;\n\nThe Session class where factory is located.\n\nphp:\n\n\/**\n\n    * Application_Plugins_Session_Exception\n      *\/\n      require_once 'Application\/Plugins\/Session\/Exception.php';\n\n\/**\n\n    * Factory for Zend_Db_Handler classes.\n      *\n    * @param string $adapterName Name of the adapter to return:\n    * 'database' -> Application_Plugins_Session_Handler_Database\n      *\n    * @param array $config An array of adapter configuration keys.\n      *\n    * @return Application_Plugins_Session_Handler_Abstract\n      *\n      *\/\n      class Application_Plugins_Session {\n      static public function factory($adapterName, $configuration = null)\n      {\n      if (!is_string($adapterName) or !strlen($adapterName)) { throw new Application_Plugins_Session_Exception('Adapter name must be specified in a string!'); }\n      $adapterName = 'Application_Plugins_Session_Handler_'.str_replace(' ','',ucwords(str_replace('', ' ', $adapterName)));\n\n   1. Load adapter\n      Zend::loadClass($adapterName);\n\nreturn new $adapterName();\n}\n}\n\nThe abstract class from which all other implementations will be extended (sorry for my english):\n\nphp:\n\/**\n\n    * Abstract class for Zend_Session to help enforce private constructs.\n      *\n    * @category Zend\n    * @package Zend_Session\n      *\/\n      abstract class Application_Plugins_Session_Handler_Abstract\n      {\n      \/**\n    * This is the first function called by PHP when a session is started\n      *\n    * @param string $strSessionPath\n    * @param string $strSessionName\n      *\/\n      public function open($strSessionPath, $strSessionName)\n      {\n\n}\n\n\/**\n\n    * The close function is the last function called by PHP related to the session.\n    * It does not accept any parameters, and returns either TRUE or FALSE.\n      *\/\n      public function close()\n      {\n\n}\n\n\/**\n\n    * Retrieve any data that is stored for the session, and return it. It is extremely\n    * important always to return a string from this function, even if it's empty.\n      *\/\n      public function read()\n      {\n\n}\n\n\/**\n\n    * Write session data\n      *\n    * @param string $strSessionId\n    * @param string $SessionData\n      *\/\n      public function write($strSessionId,$SessionData)\n      {\n\n}\n\n\/**\n\n    * Destroy session, delete all data related to the session id\n      *\n    * @param string $strSessionId\n      *\/\n      public function destroy($strSessionId)\n      {\n\n}\n\npublic function gc($strSessionLifeTime)\n{\n\n}\n}\n\nThe Database implementation\nphp:\n\n\/**\n\n    * Application_Plugins_Session_Handler_Absstract\n      *\/\n      require_once 'Application\/Plugins\/Session\/Handler\/Abstract.php';\n\n\/**\n\n    * Application_Plugins_Session_Handler_Exception\n      *\/\n      require_once 'Application\/Plugins\/Session\/Handler\/Exception.php';\n\nclass Application_Plugins_Session_Handler_Database extends Application_Plugins_Session_Handler_Abstract\n{\npublic function open($strSessionPath, $strSessionName)\n{ return true; }\n\npublic function close()\n{ return true; }\n\nprotected function _generateId()\n{\ndo { # Generate session ID $strSessionId = md5(uniqid(mt_srand((double) microtime() * 1000000))); } while ($this->_validateId($strSessionId) === false);\n}\n\nprotected function _formatSessionData($SessionData)\n{ $arrSession = array(); $arrSession = preg_split(\"\/([a-zA-Z0-9\\_]+\\|)\/\",$SessionData,-1,PREG_SPLIT_NO_EMPTY|PREG_SPLIT_DELIM_CAPTURE); return array_chunk($arrSession,2); }\n\nprotected function _validateId($strSessionId)\n{\n\n   1. Get database connection\n      $db = Zend::registry('db');\n\n   1. Check is the session ID is unique\n      $select = $db->select();\n      $select->from('app_session','count(session_id) as session_found');\n      $select->where('session_id = ?',$strSessionId);\n      $intValue = $db->fetchOne($select->__toString()) ;\n      if($intValue) { return false; }\n      else { return true; }\n      }\n\npublic function write($strSessionId,$SessionData)\n{\n\n   1. Get database connection\n      $db = Zend::registry('db');\n      $arrSessionData = $this->_formatSessionData($SessionData);\n\n   1. Check if the session id exists\n      if($this->_validateId($strSessionId))\n      Unknown macro: { foreach ($arrSessionData as $arrSessionDataKey => $arrSessionDataValue) { # ID of the session doesn't exist, perform insert $db->insert(\"app_session\",array(\"session_id\"=>$strSessionId,\"session_time\"=>time(),\"session_start\"=>time(),\"session_data\"=>$arrSessionDataValue[1],\"session_key\"=>$arrSessionDataValue[0])); } }\n\n      else\n      {\n   2. ID of the session exists perform update\n      foreach ($arrSessionData as $arrSessionDataKey => $arrSessionDataValue) {\n   3. ID of the session doesn't exist, perform insert\n      $intAffected = $db->update(\"app_session\",array(\"session_time\"=>time(),\"session_key\"=>$arrSessionDataValue[0],\"session_data\"=>$arrSessionDataValue[1]),\"session_id = '\".$strSessionId.\"' and session_key = '\".$arrSessionDataValue[0].\"'\");\n      if(!$intAffected) { $db->insert(\"app_session\",array(\"session_id\"=>$strSessionId,\"session_time\"=>time(),\"session_start\"=>time(),\"session_data\"=>$arrSessionDataValue[1],\"session_key\"=>$arrSessionDataValue[0])); }\n      }\n      }\n      return true;\n      }\n\npublic function destroy($strSessionId)\n{\n\n   1. Get database connection\n      $db = Zend::registry('db');\n\n   1. Check if the session id exists\n      if(!$this->_validateId($strSessionId)) { # Delete session and data associated with it from database return $db->delete(\"app_session\",\"session_id= '\".$strSessionId.\"'\") > 0 ? true : false; }\n\n      return true;\n      }\n\npublic function gc($strSessionLifeTime = 30)\n{ \n# Get database connection \n$db = Zend::registry('db');\n\n # Load application configuration parameters to get session lifetime \n\n$config_app = Zend::registry('config_app'); $strSessionLifeTime = strtotime(\"-\".$config_app->lifetime.\" minutes\"); $db->delete(\"app_session\",\"session_time < \".$strSessionLifeTime); return true; }\n\npublic function read($strSessionId)\n{ # Get database connection $db = Zend::registry('db'); # Get all data associated with the session $select = $db->select(); $select->from('app_session',\"(GROUP_CONCAT(session_key,session_data SEPARATOR '')) as session_data\"); $select->where('session_id = ?',$strSessionId); $SessionData = $db->fetchAll($select->__toString()); # If no results the empty string will be returned return $SessionData ; }\n\n}"
        },
        "priority": {
            "name": "priority",
            "type": "com.atlassian.jira.issue.priority.Priority",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/priority\/3",
                "name": "Major"
            }
        },
        "duedate": {
            "name": "duedate",
            "type": "java.util.Date"
        },
        "customfield_10022": {
            "name": "Fix Version Priority",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:select"
        },
        "watcher": {
            "name": "watcher",
            "type": "watcher",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-289\/watchers",
                "isWatching": false,
                "watchCount": 0
            }
        },
        "worklog": {
            "name": "worklog",
            "type": "worklog",
            "value": [

            ]
        },
        "status": {
            "name": "status",
            "type": "com.atlassian.jira.issue.status.Status",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/status\/6",
                "name": "Closed"
            }
        },
        "labels": {
            "name": "labels",
            "type": "com.atlassian.jira.issue.label.Label",
            "value": [

            ]
        },
        "assignee": {
            "name": "assignee",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                "name": "gavin",
                "displayName": "Gavin",
                "active": true
            }
        },
        "links": {
            "name": "links",
            "type": "issuelinks",
            "value": [
                {
                    "issueKey": "ZF-552",
                    "issue": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-552",
                    "type": {
                        "name": "Duplicate",
                        "direction": "INBOUND",
                        "description": "is duplicated by"
                    }
                }
            ]
        },
        "attachment": {
            "name": "attachment",
            "type": "attachment",
            "value": [

            ]
        },
        "sub-tasks": {
            "name": "sub-tasks",
            "type": "issuelinks",
            "value": [

            ]
        },
        "versions": {
            "name": "versions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [

            ]
        },
        "project": {
            "name": "project",
            "type": "com.atlassian.jira.project.Project",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/project\/ZF",
                "key": "ZF",
                "name": "Zend Framework",
                "roles": {

                }
            }
        },
        "components": {
            "name": "components",
            "type": "com.atlassian.jira.bc.project.component.ProjectComponent",
            "value": [
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/component\/10096",
                    "id": 10096,
                    "name": "Zend_Session",
                    "description": "A standardized interface to common functionality found in or indigenous to site session implementations. ",
                    "isAssigneeTypeValid": false
                }
            ]
        },
        "comment": {
            "name": "comment",
            "type": "com.atlassian.jira.issue.fields.CommentSystemField",
            "value": [
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/10896",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=bkarwin",
                        "name": "bkarwin",
                        "displayName": "Bill Karwin",
                        "active": true
                    },
                    "body": "Reassigning from Jayson to Bill Karwin, pending further triage.",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=bkarwin",
                        "name": "bkarwin",
                        "displayName": "Bill Karwin",
                        "active": true
                    },
                    "created": "2006-09-25T19:44:21.000+0000",
                    "updated": "2006-09-25T19:44:21.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/11206",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=bkarwin",
                        "name": "bkarwin",
                        "displayName": "Bill Karwin",
                        "active": true
                    },
                    "body": "Assigning Zend_Session issue to Gavin.",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=bkarwin",
                        "name": "bkarwin",
                        "displayName": "Bill Karwin",
                        "active": true
                    },
                    "created": "2006-11-08T12:07:05.000+0000",
                    "updated": "2006-11-08T12:07:05.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/11216",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=ralph",
                        "name": "ralph",
                        "displayName": "Ralph Schindler",
                        "active": true
                    },
                    "body": "+1 Here to close this issue.\n\nThis type of functionality would be implemented by using the Zend_Session_SaveHandler_Interface.  It might be worth discussing to create a stock database save handler to release with Zend_Session perhaps based off Zend_Db, but that is outside my scope as when you drill down into the specifics, people are using the savehandler to suit a very specific need.\n\nAlso, this was filed long ago before code was produced.  Perhaps close, and alert the initial reporter.",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=ralph",
                        "name": "ralph",
                        "displayName": "Ralph Schindler",
                        "active": true
                    },
                    "created": "2006-11-08T14:27:32.000+0000",
                    "updated": "2006-11-08T14:27:32.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/11290",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "body": "Nicolae, please see the new Zend_Session in the incubator.  We welcome suggestions, recommendations, improvements for consideration, and help.  Very large changes, such a new proposal or significant new componet or major API changes should follow the proposal process:\n\nhttp:\/\/framework.zend.com\/wiki\/display\/ZFPROP\/Home",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "created": "2006-11-10T23:34:43.000+0000",
                    "updated": "2006-11-10T23:34:43.000+0000"
                }
            ]
        }
    },
    "transitions": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-289\/transitions"
}