{
    "expand": "html",
    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-1114",
    "key": "ZF-1114",
    "fields": {
        "summary": {
            "name": "summary",
            "type": "java.lang.String",
            "value": "Support for digest authentication in Zend_Http_Client"
        },
        "timetracking": {
            "name": "timetracking",
            "type": "com.atlassian.jira.issue.fields.TimeTrackingSystemField"
        },
        "issuetype": {
            "name": "issuetype",
            "type": "com.atlassian.jira.issue.issuetype.IssueType",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issueType\/2",
                "name": "New Feature",
                "subtask": false
            }
        },
        "votes": {
            "name": "votes",
            "type": "com.atlassian.jira.issue.fields.VotesSystemField",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-1114\/votes",
                "votes": 1,
                "hasVoted": false
            }
        },
        "security": {
            "name": "security",
            "type": "com.atlassian.jira.issue.security.IssueSecurityLevel"
        },
        "resolution": {
            "name": "resolution",
            "type": "com.atlassian.jira.issue.resolution.Resolution",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/resolution\/2",
                "name": "Won't Fix"
            }
        },
        "fixVersions": {
            "name": "fixVersions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [

            ]
        },
        "resolutiondate": {
            "name": "resolutiondate",
            "type": "java.util.Date",
            "value": "2012-05-05T03:20:52.000+0000"
        },
        "reporter": {
            "name": "reporter",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=jacksleight",
                "name": "jacksleight",
                "displayName": "Jack Sleight",
                "active": true
            }
        },
        "created": {
            "name": "created",
            "type": "java.util.Date",
            "value": "2007-03-22T11:55:22.000+0000"
        },
        "updated": {
            "name": "updated",
            "type": "java.util.Date",
            "value": "2012-05-05T03:20:52.000+0000"
        },
        "customfield_10041": {
            "name": "Tags",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:labels"
        },
        "description": {
            "name": "description",
            "type": "java.lang.String",
            "value": "Add support for digest authentication in Zend_Http_Client. Quote from a previous email of mine:\n\n{quote}From what I can tell, the way the client currently works is that the end user specifies that they want to use basic or digest authentication, and then the client automatically sends an Authorization header, regardless of whether or not the server needs it. This isn't really the way it should work. The user should just specify their username and password, and upon the initial request, the server will respond with an authentication challenge (basic or digest) to authorize the user. This challenge dictates which authentication method is required by the server, and in the case of digest authentication, provides the variables needed to calculate the response.\n\nBecause there are server provided variables required to calculate the digest response, we can't just write out the Authorization header before any communication with the server has taken place, so the way the client currently works is unsuitable. Within the client, I think authentication should be handled in a similar way to redirects, where each server response is checked for an authentication challenge, and if provided, the client can automatically take care of it (so long as the user has provided a username and password).{quote}"
        },
        "priority": {
            "name": "priority",
            "type": "com.atlassian.jira.issue.priority.Priority",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/priority\/3",
                "name": "Major"
            }
        },
        "duedate": {
            "name": "duedate",
            "type": "java.util.Date"
        },
        "customfield_10022": {
            "name": "Fix Version Priority",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:select"
        },
        "watcher": {
            "name": "watcher",
            "type": "watcher",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-1114\/watchers",
                "isWatching": false,
                "watchCount": 4
            }
        },
        "worklog": {
            "name": "worklog",
            "type": "worklog",
            "value": [

            ]
        },
        "status": {
            "name": "status",
            "type": "com.atlassian.jira.issue.status.Status",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/status\/6",
                "name": "Closed"
            }
        },
        "labels": {
            "name": "labels",
            "type": "com.atlassian.jira.issue.label.Label",
            "value": [
                "state:need-feedback",
                "zf-caretaker-adamlundrigan",
                "zf-crteam-review"
            ]
        },
        "assignee": {
            "name": "assignee",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=adamlundrigan",
                "name": "adamlundrigan",
                "displayName": "Adam Lundrigan",
                "active": true
            }
        },
        "links": {
            "name": "links",
            "type": "issuelinks",
            "value": [

            ]
        },
        "attachment": {
            "name": "attachment",
            "type": "attachment",
            "value": [

            ]
        },
        "sub-tasks": {
            "name": "sub-tasks",
            "type": "issuelinks",
            "value": [

            ]
        },
        "versions": {
            "name": "versions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [

            ]
        },
        "project": {
            "name": "project",
            "type": "com.atlassian.jira.project.Project",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/project\/ZF",
                "key": "ZF",
                "name": "Zend Framework",
                "roles": {

                }
            }
        },
        "components": {
            "name": "components",
            "type": "com.atlassian.jira.bc.project.component.ProjectComponent",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/component\/10015",
                    "id": 10015,
                    "name": "Zend_Http_Client",
                    "description": "performs HTTP requests",
                    "isAssigneeTypeValid": false
                }
            ]
        },
        "comment": {
            "name": "comment",
            "type": "com.atlassian.jira.issue.fields.CommentSystemField",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/13667",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=shahar",
                        "name": "shahar",
                        "displayName": "Shahar Evron",
                        "active": true
                    },
                    "body": "note: look at the implementation of Zend_Auth_Http_Digest - I don't remember ever looking at it - might be useful ;)",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=shahar",
                        "name": "shahar",
                        "displayName": "Shahar Evron",
                        "active": true
                    },
                    "created": "2007-03-23T14:02:16.000+0000",
                    "updated": "2007-03-23T14:02:16.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/13668",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=shahar",
                        "name": "shahar",
                        "displayName": "Shahar Evron",
                        "active": true
                    },
                    "body": "Sorry - Zend_Auth_Adapter_Http that is ",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=shahar",
                        "name": "shahar",
                        "displayName": "Shahar Evron",
                        "active": true
                    },
                    "created": "2007-03-23T14:03:20.000+0000",
                    "updated": "2007-03-23T14:03:20.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/13691",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=jacksleight",
                        "name": "jacksleight",
                        "displayName": "Jack Sleight",
                        "active": true
                    },
                    "body": "This is the sample script that contains all the functions needed for digest authentication, it currently runs externally from Zend_Http_Client, and is not intended to be Zend Framework ready code (comments are missing and the structure will change when integrated with Zend_Http_Client):\n\n{code}\n<?php\n\/\/ configure error reporting\nerror_reporting(E_ALL | E_STRICT);\n\n\/\/ set include paths for zend framework\nset_include_path(PATH_SEPARATOR . get_include_path()\n\t. PATH_SEPARATOR . '.\/library\/');\n\n\/\/ load loader and set autoload function\nrequire_once 'Zend\/Loader.php';\nspl_autoload_register(array('Zend_Loader', 'autoload'));\n\t\n\/*-----------------------------------------------------------*\/\n\n$client = new Zend_Http_Client('http:\/\/services.msn.com\/svcs\/hotmail\/httpmail.asp', array(\n\t'useragent' => 'Outlook-Express\/6.0',\n\t'maxredirects' => 0));\n$client->setMethod('PROPFIND');\n\n$digest = new Digest($client, 'PROPFIND', 'zftest@hotmail.co.uk', 'password123');\n$digest->request();\n\n\/*-----------------------------------------------------------*\/\n\nclass Digest\n{\n\tprivate $client;\n\tprivate $method; \/\/ we shouldnt have to specify this, it should be possible to get it from the client\n\tprivate $username;\n\tprivate $password;\n\t\n\tprivate $nonce;\n\tprivate $nc = 1;\n\tprivate $a1;\n\t\n\tpublic function __construct(Zend_Http_Client $client, $method, $username, $password)\n\t{\n\t\t$this->client = $client;\n\t\t$this->method = $method;\n\t\t$this->username = $username;\n\t\t$this->password = $password;\n\t}\n\t\n\tpublic function request()\n\t{\n\t\t\/\/ make initial request\t\t\n\t\t$response = $this->client->request();\t\t\n\t\tZend_Debug::dump($response->getHeaders(), 'Initial Request Response');\n\t\t\n\t\t\/\/ check the status\n\t\tif ($response->getStatus() != 401) {\n\t\t\treturn $response;\n\t\t}\n\t\t\n\t\t\/\/ get the authenticate header (we might also want to try for proxy-authenticate)\n\t\t$resHeader = $response->getHeader('www-authenticate');\n\t\t\n\t\t\/\/ check that authentication digest has been requested\n\t\tif (!preg_match('\/^Digest\/i', $resHeader)) {\n\t\t\tthrow new Zend_Exception('server does not require digest authentication');\n\t\t}\n\t\t\n\t\t\/\/ take the response header params and create a request header\n\t\t$resParams = $this->splitHeader($resHeader);\n\t\t$reqParams = $this->calculateParams($resParams, $response);\n\t\t$reqHeader = $this->joinHeader($reqParams);\n\t\t\n\t\tZend_Debug::dump($reqHeader, 'Authorization Request Header');\n\t\t\n\t\t\/\/ set header and re-request\n\t\t$this->client->setHeaders('Authorization', $reqHeader);\n\t\t$response = $this->client->request();\t\t\n\t\tZend_Debug::dump($response->getHeaders(), 'Authorization Request Response');\n\t\t\t\n\t\treturn $response;\n\t}\n\t\n\tprivate function calculateParams($params, $response)\n\t{\t\n\t\t\/\/ generate a random client nonce value\n\t\t$cnonce = md5(microtime(true));\n\t\t\n\t\t\/\/ check we have the minumum requirements\n\t\tif (!isset($params['realm'])) {\n\t\t\tthrow new Zend_Exception('authentication realm parameter missing');\n\t\t}\n\t\tif (!isset($params['nonce'])) {\n\t\t\tthrow new Zend_Exception('authentication nonce parameter missing');\n\t\t}\n\t\t\n\t\t\/\/ check if we are retrying the nonce value\n\t\tif (isset($this->nonce)) {\n\t\t\tif ($this->nonce == $params['nonce']) {\n\t\t\t\t$this->nc++;\n\t\t\t} else {\n\t\t\t\t$this->nonce = $params['nonce'];\n\t\t\t\t$this->nc = 1;\n\t\t\t}\n\t\t} else {\n\t\t\t$this->nonce = $params['nonce'];\n\t\t}\n\n\t\t\/\/ convert decimal nc to hex\n\t\t$nc = dechex($this->nc);\n\t\t\n\t\t\/\/ set required values\n\t\t$result = array(\n\t\t\t'username'\t=> '\"' . $this->username . '\"',\n\t\t\t'realm'\t\t=> '\"' . $params['realm'] . '\"',\n\t\t\t'nonce'\t\t=> '\"' . $params['nonce'] . '\"',\n\t\t\t'uri'\t\t=> '\"' . $this->client->getUri()->getPath() . '\"',\n\t\t);\n\t\n\t\t\/\/ check for a qop value\n\t\tif (isset($params['qop'])) {\n\t\t\t$qops = preg_split('\/;\\s+\/', $params['qop']);\n\t\t\tif (in_array('auth', $qops)) {\n\t\t\t\t$qop = 'auth';\n\t\t\t} \n\t\t\t\/* \/\/ todo\n\t\t\telseif (in_array('auth-int', $qops)) {\n\t\t\t\t$qop = 'auth-int';\n\t\t\t}\n\t\t\t*\/\n\t\t}\n\t\t\n\t\t\/\/ check for an algorithm value\n\t\tif (isset($params['algorithm'])) {\n\t\t\tif ($params['algorithm'] == 'MD5' || $params['algorithm'] == 'MD5-sess') {\n\t\t\t\t$algorithm = $params['algorithm'];\n\t\t\t}\n\t\t}\n\t\t\n\t\t\/\/ if qop is specified add parameters to result\n\t\tif(isset($qop)) {\n\t\t\t$result['qop']\t  = $qop;\n\t\t\t$result['nc']\t  = $nc;\n\t\t\t$result['cnonce'] = '\"' . $cnonce . '\"';\n\t\t}\n\t\t\n\t\t\/\/ if an algorithm is specified add parameter to result\n\t\tif(isset($algorithm)) {\n\t\t\t$result['algorithm'] = $algorithm;\n\t\t}\n\t\t\n\t\t\/\/ generate the A1 string based on the algorithm value\n\t\tif (!isset($algorithm) || $algorithm == 'MD5') {\n\t\t\t$a1 = $this->username . ':' . $params['realm'] . ':' . $this->password;\n\t\t\t$this->a1 = null;\n\t\t} elseif ($algorithm == 'MD5-sess') {\n\t\t\tif (isset($this->a1)) {\n\t\t\t\t$a1 = $this->a1;\n\t\t\t} else {\n\t\t\t\t$a1 = $this->h($this->username . ':' . $params['realm'] . ':' . $this->password) . ':' . $params['nonce'] . ':' . $cnonce;\n\t\t\t\t$this->a1 = $a1;\n\t\t\t}\n\t\t}\n\t\t\n\t\t\/\/ generate secret value\n\t\t$secret = $this->h($a1);\n\t\t\n\t\t\/\/ generate the A2 string based on the qop value\n\t\tif (!isset($qop) || $qop == 'auth') {\n\t\t\t$a2 = $this->method . ':' . $this->client->getUri()->getPath();\n\t\t} \n\t\t\/* \/\/todo\n\t\telseif($qop == 'auth-int') { \n\t\t\t$a2 = $this->method . ':' . $uri . ':' . *entity-body*;\n\t\t}\n\t\t*\/\n\t\t\n\t\t\/\/ generate the response hash based on the qop value\n\t\tif(!isset($qop)) {\n\t\t\t$response = $this->kd($secret, $params['nonce'] . ':' . $a2);\n\t\t} elseif($qop == 'auth' || $qop == 'auth-int') {\n\t\t\t$response = $this->kd($secret, $params['nonce'] . ':' . $nc . ':' . $cnonce . ':' . $qop . ':' . $a2);\n\t\t}\n\t\t\n\t\t\/\/ add response value to result\n\t\t$result['response'] = '\"' . $response . '\"';\n\t\t\t\n\t\t\/\/ check if an opaque value was sent\n\t\tif (isset($params['opaque'])) {\n\t\t\t$result['opaque'] = '\"' . $params['opaque'] . '\"';\n\t\t}\n\t\t\n\t\treturn $result;\n\t}\n\t\n\tprivate function h($data)\n\t{\n\t\treturn md5($data);\n\t}\n\t\n\tprivate function kd($secret, $data)\n\t{\n\t\treturn $this->h($secret . ':' . $data);\n\t}\n\t\n\tprivate function splitHeader($header)\n\t{\t\n\t\t$params = array();\n\t\n\t\t\/\/ remove the leading Digest string\n\t\t$header = preg_replace('\/^Digest\\s+(.*)$\/i', '$1', $header);\n\t\t\n\t\t\/\/ match all individual parts of the header\n\t\tpreg_match_all('\/([^=]+)=(\"[^\"]+\"|[^,]+)(?:,\\s*|$)\/', $header, $matches);\n\t\t\n\t\t\/\/ loop through matches remove quotes and add to array\n\t\tforeach ($matches[1] as $key => $name) {\n\t\t\t$params[$name] = trim($matches[2][$key], '\"');\n\t\t}\n\t\t\n\t\treturn $params;\n\t}\n\t\n\tprivate function joinHeader($params)\n\t{\t\n\t\t$header  = 'Digest ';\n\t\t\n\t\t\/\/ loop through params and add to header\n\t\tforeach ($params as $name => $value) {\n\t\t\t$header .= $name . '=' . $value . ', ';\n\t\t}\n\t\t\n\t\t\/\/ trim trailing comma-space\n\t\t$header = rtrim($header, ', ');\n\t\t\n\t\treturn $header;\t\n\t}\n\n}\n{code}",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=jacksleight",
                        "name": "jacksleight",
                        "displayName": "Jack Sleight",
                        "active": true
                    },
                    "created": "2007-03-24T14:55:42.000+0000",
                    "updated": "2007-03-24T14:55:42.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/13693",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=jacksleight",
                        "name": "jacksleight",
                        "displayName": "Jack Sleight",
                        "active": true
                    },
                    "body": "As is probably obvious, the __construct() and request() functions in the class above are only there for the purposes of the test script, and don't play any part in the actual calculation of the digest response.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=jacksleight",
                        "name": "jacksleight",
                        "displayName": "Jack Sleight",
                        "active": true
                    },
                    "created": "2007-03-24T14:58:05.000+0000",
                    "updated": "2007-03-24T14:58:05.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/15893",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=darby",
                        "name": "darby",
                        "displayName": "Darby Felton",
                        "active": true
                    },
                    "body": "Assigning to [~shahar] to clear unassigned issues.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=darby",
                        "name": "darby",
                        "displayName": "Darby Felton",
                        "active": true
                    },
                    "created": "2007-07-19T16:21:59.000+0000",
                    "updated": "2007-07-19T16:21:59.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/15896",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=jacksleight",
                        "name": "jacksleight",
                        "displayName": "Jack Sleight",
                        "active": true
                    },
                    "body": "Modified description to include a proposal for changing the authentication behaviour of Zend_Http_Client. Also, in the code above, the only functions actually relevant to receiving and responding to a digest authentication challenge are the *calculateParams()*, *h()* and *kd()* functions. The rest are merely there to allow the script to function, and some (*splitHeader()*) already exist in one form or another in the Zend_Http_Client (from what I remember).",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=jacksleight",
                        "name": "jacksleight",
                        "displayName": "Jack Sleight",
                        "active": true
                    },
                    "created": "2007-07-19T18:49:43.000+0000",
                    "updated": "2007-07-19T18:49:43.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/29609",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=beberlei",
                        "name": "beberlei",
                        "displayName": "Benjamin Eberlei",
                        "active": true
                    },
                    "body": "Can this issue be closed in relation with ZF-3616? cURL supports Diggest authentication",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=beberlei",
                        "name": "beberlei",
                        "displayName": "Benjamin Eberlei",
                        "active": true
                    },
                    "created": "2009-03-20T03:49:15.000+0000",
                    "updated": "2009-03-20T03:49:15.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/49210",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=adamlundrigan",
                        "name": "adamlundrigan",
                        "displayName": "Adam Lundrigan",
                        "active": true
                    },
                    "body": "As Benjamin asked nearly three years aog, is having HTTP Digest Authentication via {{Zend_Http_Client_Adapter_Curl}} sufficient?  Or should we also implement it in the other adapters as applicable for the benefit of those amongst us not blessed with cURL?",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=adamlundrigan",
                        "name": "adamlundrigan",
                        "displayName": "Adam Lundrigan",
                        "active": true
                    },
                    "created": "2011-12-02T01:56:17.000+0000",
                    "updated": "2011-12-02T01:56:17.000+0000"
                }
            ]
        }
    },
    "transitions": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-1114\/transitions"
}