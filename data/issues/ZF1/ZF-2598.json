{
    "expand": "html",
    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-2598",
    "key": "ZF-2598",
    "fields": {
        "summary": {
            "name": "summary",
            "type": "java.lang.String",
            "value": "regex for wildcard query (single-placeholder) is wrong"
        },
        "timetracking": {
            "name": "timetracking",
            "type": "com.atlassian.jira.issue.fields.TimeTrackingSystemField",
            "value": {
                "timeoriginalestimate": 2880,
                "timeestimate": 2880
            }
        },
        "issuetype": {
            "name": "issuetype",
            "type": "com.atlassian.jira.issue.issuetype.IssueType",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issueType\/9",
                "name": "Docs:  Improvement",
                "subtask": false
            }
        },
        "votes": {
            "name": "votes",
            "type": "com.atlassian.jira.issue.fields.VotesSystemField",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-2598\/votes",
                "votes": 2,
                "hasVoted": false
            }
        },
        "security": {
            "name": "security",
            "type": "com.atlassian.jira.issue.security.IssueSecurityLevel"
        },
        "fixVersions": {
            "name": "fixVersions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [

            ]
        },
        "reporter": {
            "name": "reporter",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=dlx",
                "name": "dlx",
                "displayName": "Stefan Oestreicher",
                "active": true
            }
        },
        "created": {
            "name": "created",
            "type": "java.util.Date",
            "value": "2008-02-07T09:15:33.000+0000"
        },
        "updated": {
            "name": "updated",
            "type": "java.util.Date",
            "value": "2012-05-17T18:56:27.000+0000"
        },
        "customfield_10041": {
            "name": "Tags",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:labels"
        },
        "description": {
            "name": "description",
            "type": "java.lang.String",
            "value": "If I search for \"lebe?\" it correctly matches \"leber\", \"leben\" etc. But if I search for \"le?en\" it doesn't match anything. I dumped the used pattern and it seems there is a bug. The pattern generated for \"lebe?\" is \"\/^lebe.$\/u\" which is correct but for \"le?en\" the generated pattern is \"\/^.$\/u\" which is obviously plain wrong. I didn't track it further but my guess would be that the problem is in the QueryParser. \r\nIt seems to work only if the placeholder is at the start or end of the term but fails if it's in between."
        },
        "priority": {
            "name": "priority",
            "type": "com.atlassian.jira.issue.priority.Priority",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/priority\/2",
                "name": "Critical"
            }
        },
        "duedate": {
            "name": "duedate",
            "type": "java.util.Date"
        },
        "customfield_10022": {
            "name": "Fix Version Priority",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:select",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/customFieldOption\/10040",
                "value": " Nice to Have"
            }
        },
        "watcher": {
            "name": "watcher",
            "type": "watcher",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-2598\/watchers",
                "isWatching": false,
                "watchCount": 4
            }
        },
        "worklog": {
            "name": "worklog",
            "type": "worklog",
            "value": [

            ]
        },
        "customfield_10000": {
            "name": "Language",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:select"
        },
        "status": {
            "name": "status",
            "type": "com.atlassian.jira.issue.status.Status",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/status\/3",
                "name": "In Progress"
            }
        },
        "labels": {
            "name": "labels",
            "type": "com.atlassian.jira.issue.label.Label",
            "value": [
                "FixForZF1.12",
                "zf-crteam-padraic",
                "zf-crteam-priority"
            ]
        },
        "assignee": {
            "name": "assignee",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=alexander",
                "name": "alexander",
                "displayName": "Alexander Veremyev",
                "active": true
            }
        },
        "links": {
            "name": "links",
            "type": "issuelinks",
            "value": [

            ]
        },
        "attachment": {
            "name": "attachment",
            "type": "attachment",
            "value": [

            ]
        },
        "sub-tasks": {
            "name": "sub-tasks",
            "type": "issuelinks",
            "value": [

            ]
        },
        "versions": {
            "name": "versions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [

            ]
        },
        "project": {
            "name": "project",
            "type": "com.atlassian.jira.project.Project",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/project\/ZF",
                "key": "ZF",
                "name": "Zend Framework",
                "roles": {

                }
            }
        },
        "components": {
            "name": "components",
            "type": "com.atlassian.jira.bc.project.component.ProjectComponent",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/component\/10021",
                    "id": 10021,
                    "name": "Zend_Search_Lucene",
                    "description": "pure PHP robust, general purpose text search engine",
                    "isAssigneeTypeValid": false
                }
            ]
        },
        "comment": {
            "name": "comment",
            "type": "com.atlassian.jira.issue.fields.CommentSystemField",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/18916",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=dlx",
                        "name": "dlx",
                        "displayName": "Stefan Oestreicher",
                        "active": true
                    },
                    "body": "I found the problem. This happends because the wildcard-term is tokenized but my tokenizer discards tokens smaller than 2 characters. Therefore \"le\" before the questionmark and \"en\" after it are discarded and only the questionmark remains.\nBut since it's only tokenized to ensure that it's not a phrase I'd say it's an error that the tokens are looped through.\n\ninstead of\n$tokens = Zend_Search_Lucene_Analysis_Analyzer::getDefault()->tokenize($subPatternL2, $encoding);\n                    if (count($tokens) > 1) {\n                        throw new Zend_Search_Lucene_Search_QueryParserException('Wildcard search is supported only for non-multiple word terms');\n                    }\n\t\t\t\t\t#var_dump($tokens);\n                    foreach ($tokens as $token) {\n                        $pattern .= $token->getTermText();\n                    }\n\ndo this\n$tokens = Zend_Search_Lucene_Analysis_Analyzer::getDefault()->tokenize($subPatternL2, $encoding);\n                    if (count($tokens) > 1) {\n                        throw new Zend_Search_Lucene_Search_QueryParserException('Wildcard search is supported only for non-multiple word terms');\n                    }\n                    $pattern .= $subPatternL2;\n         \nand it should work as expected",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=dlx",
                        "name": "dlx",
                        "displayName": "Stefan Oestreicher",
                        "active": true
                    },
                    "created": "2008-02-07T09:43:49.000+0000",
                    "updated": "2008-02-07T09:43:49.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/18979",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=dlx",
                        "name": "dlx",
                        "displayName": "Stefan Oestreicher",
                        "active": true
                    },
                    "body": "i completely forgot to mention, the postet code is in Zend_Search_Lucene_Search_QueryEntry_Term around the line 145\n\nbtw, my fix won't work correctly in all cases since any special characters at the start and end of the term won't be discarded as they would be if the tokenized term would be used (punctuation, etc.). I think a better solution would be to allow for disabling the analyzer filters:\n\n$analyzer = Zend_Search_Lucene_Analysis_Analyzer::getDefault();\n$analyzer->setFiltersEnabled(false);\n$tokens = $analyzer->tokenize($subPatternL2, $encoding);\n$analyzer->setFiltersEnabled(true);\nif (count($tokens) > 1) { throw new Zend_Search_Lucene_Search_QueryParserException('Wildcard search is supported only for non-multiple word terms'); }\nforeach ($tokens as $token) { $pattern .= $token->getTermText(); }\n\ni think this sould work perfectly with the default anaylzers, although it may still be a problem with custom written analyzers?",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=dlx",
                        "name": "dlx",
                        "displayName": "Stefan Oestreicher",
                        "active": true
                    },
                    "created": "2008-02-11T08:55:09.000+0000",
                    "updated": "2008-02-11T08:55:09.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/19308",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=alexander",
                        "name": "alexander",
                        "displayName": "Alexander Veremyev",
                        "active": true
                    },
                    "body": "Stefan,\n\nThank you very much for your detailed research of the problem!\n\nIt has one additional aspect. Filter are used also for normalizing terms (e.g. converting to lowercase, stemming and so on). Such normalization has to be performed during indexing and query parsing to get correct terms matching.\n\nSo we have two types of filters: 1) normalization filters 2) \"filtering\" filters (e.g. stop words , short words filters).\nThat needs more accurate API.\n\nI've decreased issue priority to postpone it to post-1.5 release period.\n\n\nPS Actually normalization filters may transform term completely (e.g. stemming filters). I am not sure, such filters may be compatible with wildcard searching.\n",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=alexander",
                        "name": "alexander",
                        "displayName": "Alexander Veremyev",
                        "active": true
                    },
                    "created": "2008-02-20T17:59:13.000+0000",
                    "updated": "2008-02-20T17:59:13.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/20939",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=wil",
                        "name": "wil",
                        "displayName": "Wil Sinclair",
                        "active": true
                    },
                    "body": "This doesn't appear to have been fixed in 1.5.0. Please update if this is not correct.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=wil",
                        "name": "wil",
                        "displayName": "Wil Sinclair",
                        "active": true
                    },
                    "created": "2008-04-18T13:11:50.000+0000",
                    "updated": "2008-04-18T13:11:50.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/34185",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=corvuscorax",
                        "name": "corvuscorax",
                        "displayName": "Corvus Corax",
                        "active": true
                    },
                    "body": "As far as I can see, it still is an issue. But it might not need to be fixed\n\nA possible workaround solution is for the user to use a different analyzer for searching and for indexing.\n\nOne example where I did this is the use of synonyme analysers, that provide several alternative tokens for a single word in the original text.\nIf all those alternatives end up in the index, its enough to search for a single one of them, since all alternatives are already in the index. (And unless ZF-7738 gets integrated, multiple tokens for a single term raise exceptions in fuzzy and wildcard searches anyway)\n\nSimilar with stop word filtering. It makes sense during indexing, but its counter-productive during search.\n\nA stem word filter however may make sense to be applied both during indexing and during search. (though it may affect wildcard searches weirdly)\n\nSince its no problem to switch analyzers between the different tasks I don't think this bug needs to be fixed. It my make more sense to document these effects in the official documentation.\n",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=corvuscorax",
                        "name": "corvuscorax",
                        "displayName": "Corvus Corax",
                        "active": true
                    },
                    "created": "2009-09-02T08:17:32.000+0000",
                    "updated": "2009-09-02T08:17:32.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/47955",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=padraic",
                        "name": "padraic",
                        "displayName": "P\u00e1draic Brady",
                        "active": true
                    },
                    "body": "Rather than fix this, which seems a bit convoluted, the approach suggested in last comment is sound. Therefore have re-categorised this to a Critical Docs Improvement.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=padraic",
                        "name": "padraic",
                        "displayName": "P\u00e1draic Brady",
                        "active": true
                    },
                    "created": "2011-08-14T18:41:01.000+0000",
                    "updated": "2011-08-14T18:41:01.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/50679",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=adamlundrigan",
                        "name": "adamlundrigan",
                        "displayName": "Adam Lundrigan",
                        "active": true
                    },
                    "body": "Would anyone like to write such a documentation improvement before 1.12 is frozen?",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=adamlundrigan",
                        "name": "adamlundrigan",
                        "displayName": "Adam Lundrigan",
                        "active": true
                    },
                    "created": "2012-05-17T18:56:27.000+0000",
                    "updated": "2012-05-17T18:56:27.000+0000"
                }
            ]
        }
    },
    "transitions": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-2598\/transitions"
}