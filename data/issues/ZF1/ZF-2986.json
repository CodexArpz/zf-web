{
    "expand": "html",
    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-2986",
    "key": "ZF-2986",
    "fields": {
        "summary": {
            "name": "summary",
            "type": "java.lang.String",
            "value": "passing get variables as an array"
        },
        "timetracking": {
            "name": "timetracking",
            "type": "com.atlassian.jira.issue.fields.TimeTrackingSystemField",
            "value": {
                "timespent": 80
            }
        },
        "issuetype": {
            "name": "issuetype",
            "type": "com.atlassian.jira.issue.issuetype.IssueType",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issueType\/11",
                "name": "Patch",
                "subtask": false
            }
        },
        "votes": {
            "name": "votes",
            "type": "com.atlassian.jira.issue.fields.VotesSystemField",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-2986\/votes",
                "votes": 9,
                "hasVoted": false
            }
        },
        "security": {
            "name": "security",
            "type": "com.atlassian.jira.issue.security.IssueSecurityLevel"
        },
        "fixVersions": {
            "name": "fixVersions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/version\/10160",
                    "id": 10160,
                    "description": "Major Release",
                    "name": "Next Major Release",
                    "archived": false,
                    "released": false
                }
            ]
        },
        "reporter": {
            "name": "reporter",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=mcleod@spaceweb.nl",
                "name": "mcleod@spaceweb.nl",
                "displayName": "Bart McLeod",
                "active": true
            }
        },
        "created": {
            "name": "created",
            "type": "java.util.Date",
            "value": "2008-03-28T04:20:26.000+0000"
        },
        "updated": {
            "name": "updated",
            "type": "java.util.Date",
            "value": "2009-05-30T02:32:02.000+0000"
        },
        "customfield_10041": {
            "name": "Tags",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:labels"
        },
        "description": {
            "name": "description",
            "type": "java.lang.String",
            "value": "Please forgive me if someone else came up with this before me. I have searched the issue tracker, but I simply get to many results...\n\nMy point is this:\nIn ordinary php it is possible to pass an array through the query string in the url:\n\nhttp:\/\/example.com\/index.php?var[]=one&var[]=two&var[]=three\n\nIn index.php $_GET['var'] will now be an array(0 => 'one', 1 => 'two', 2 => 'three')\n\nThis is the desired behavior.\n\nUnfortunately, with ZF I cannot write this down as a nice url:\n\nhttp:\/\/example.com\/index\/index\/var[]\/one\/var[]\/two\/var[]\/three\n\nnor can I use:\n\nhttp:\/\/example.com\/index\/index\/var\/one\/var\/two\/var\/three\n\n\nOf course I can still use the old fashioned url, so the problem is not critical by any means. Or I could use indexing (var1, var2), like I did before. However, it would be nice if this would be compatible with regular php behavior when using nice urls.\n\nWhy did I not use getRequest()->get('var')? I am in a view_helper and I did not yet find access to the controller. I could however set a property on the view to retrieve my array. Maybe that will work.\nIt does of course work to set this property and retrieve it inside the view_helper, but it does not put the values in an array.\n\nWhat I would like to see is\nhttp:\/\/example.com\/index\/index\/var[]\/one\/var[]\/two\/var[]\/three\nbe translated into an array.\n\nI did confuse things, closed and reopend this issue. I thought I could not even get the array using $this->getRequest()->get('var'), but this is possible, provided the querystring is classical, seperated by & and = instead of \/ and \/. One little step forward for me, but still no beautiful url.\n\nThe patch proposed in my first comment is not good enough. It introduces another issue, since if only one var\/ parameter is passed in the query string, there will not be an array but just a singular value.\n\nIn order to distinguish between parameters that are intended to eventually become arrays and regular parameters, you would stil have to write var[]\/one\/var[]\/two etc. instead of var\/one\/var\/two, just as it is with regular php without url rewriting and routing.\n\nSo I put in a new proposal here:\n{code}    \/**\n     * Matches a user submitted path. Assigns and returns an array of variables\n     * on a successful match.\n     *\n     * If a request object is registered, it uses its setModuleName(),\n     * setControllerName(), and setActionName() accessors to set those values.\n     * Always returns the values as an array.\n     *\n     * @param string $path Path used to match against this routing map\n     * @return array An array of assigned values or a false on a mismatch\n     *\/\n    public function match($path)\n    {\n        $this->_setRequestKeys();\n\n        $values = array();\n        $params = array();\n        $path   = trim($path, self::URI_DELIMITER);\n\n        if ($path != '') {\n\n            $path = explode(self::URI_DELIMITER, $path);\n\n            if ($this->_dispatcher && $this->_dispatcher->isValidModule($path[0])) {\n                $values[$this->_moduleKey] = array_shift($path);\n                $this->_moduleValid = true;\n            }\n\n            if (count($path) && !empty($path[0])) {\n                $values[$this->_controllerKey] = array_shift($path);\n            }\n\n            if (count($path) && !empty($path[0])) {\n                $values[$this->_actionKey] = array_shift($path);\n            }\n            \n            if ($numSegs = count($path)) {\n                for ($i = 0; $i < $numSegs; $i = $i + 2) {\n                    $key = urldecode($path[$i]);\n                    $val = isset($path[$i + 1]) ? urldecode($path[$i + 1]) : null;\n                    \/*\n                     * check if key is meant as array as in index\/index\/key[]\/one\/key[]\/two\/key[]\/three\n                     *\/\n                    if( substr($key,-2) === '[]' ){\n                    \t\/\/key is an array index\n                    \t$index = substr($key,0,strlen($key)-2);\n\t                    if(array_key_exists($index,$params)){\n\t                    \tif(is_array($params[$index])){\n\t                    \t\t\/\/is already an array, add value\n\t                    \t\t$params[$index][] = $val;\n\t                    \t}else{\n\t                    \t\t\/\/the key is already registered, it will not be overwritten\n\t                    \t}\n\t                    }else{\n                    \t\t\/\/create array at $index and place first value\n                    \t\t$params[$index] = array($val);\n\t                    }\t\n                    }else{\n                    \t\/\/regular key\n                    \t$params[$key] = $val;\n                    }\n                }\n            }\n        }\n\n        $this->_values = $values + $params;\n\n        return $this->_values + $this->_defaults;\n    }{code}"
        },
        "priority": {
            "name": "priority",
            "type": "com.atlassian.jira.issue.priority.Priority",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/priority\/4",
                "name": "Minor"
            }
        },
        "duedate": {
            "name": "duedate",
            "type": "java.util.Date"
        },
        "customfield_10022": {
            "name": "Fix Version Priority",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:select",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/customFieldOption\/10040",
                "value": " Nice to Have"
            }
        },
        "watcher": {
            "name": "watcher",
            "type": "watcher",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-2986\/watchers",
                "isWatching": false,
                "watchCount": 10
            }
        },
        "worklog": {
            "name": "worklog",
            "type": "worklog",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/worklog\/20701",
                    "issue": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-2986",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=mcleod@spaceweb.nl",
                        "name": "mcleod@spaceweb.nl",
                        "displayName": "Bart McLeod",
                        "active": true
                    },
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=mcleod@spaceweb.nl",
                        "name": "mcleod@spaceweb.nl",
                        "displayName": "Bart McLeod",
                        "active": true
                    },
                    "comment": "Wrote a proposal for module.php in Controller\/Router\/Route",
                    "created": "2008-04-04T18:05:39.000+0000",
                    "updated": "2008-04-04T18:05:39.000+0000",
                    "started": "2008-04-04T18:05:39.000+0000",
                    "minutesSpent": 60
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/worklog\/20712",
                    "issue": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-2986",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=mcleod@spaceweb.nl",
                        "name": "mcleod@spaceweb.nl",
                        "displayName": "Bart McLeod",
                        "active": true
                    },
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=mcleod@spaceweb.nl",
                        "name": "mcleod@spaceweb.nl",
                        "displayName": "Bart McLeod",
                        "active": true
                    },
                    "comment": "Wrote new proposal and tested against current frontend app. Works fine.",
                    "created": "2008-04-05T09:25:43.000+0000",
                    "updated": "2008-04-05T09:25:43.000+0000",
                    "started": "2008-04-05T09:25:43.000+0000",
                    "minutesSpent": 20
                }
            ]
        },
        "status": {
            "name": "status",
            "type": "com.atlassian.jira.issue.status.Status",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/status\/10000",
                "name": "Postponed"
            }
        },
        "labels": {
            "name": "labels",
            "type": "com.atlassian.jira.issue.label.Label",
            "value": [

            ]
        },
        "assignee": {
            "name": "assignee",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                "name": "matthew",
                "displayName": "Matthew Weier O'Phinney",
                "active": true
            }
        },
        "links": {
            "name": "links",
            "type": "issuelinks",
            "value": [
                {
                    "issueKey": "ZF-1895",
                    "issue": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-1895",
                    "type": {
                        "name": "Dependency",
                        "direction": "INBOUND",
                        "description": "is dependecy of"
                    }
                }
            ]
        },
        "attachment": {
            "name": "attachment",
            "type": "attachment",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/attachment\/11211",
                    "filename": "Module.php",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=mcleod@spaceweb.nl",
                        "name": "mcleod@spaceweb.nl",
                        "displayName": "Bart McLeod",
                        "active": true
                    },
                    "created": "2008-04-05T09:28:51.000+0000",
                    "size": 8989,
                    "mimeType": "application\/octet-stream",
                    "content": "http:\/\/fw02.zend.com\/issues\/secure\/attachment\/11211\/Module.php"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/attachment\/11209",
                    "filename": "Module.php",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=mcleod@spaceweb.nl",
                        "name": "mcleod@spaceweb.nl",
                        "displayName": "Bart McLeod",
                        "active": true
                    },
                    "created": "2008-04-04T18:14:43.000+0000",
                    "size": 8952,
                    "mimeType": "application\/octet-stream",
                    "content": "http:\/\/fw02.zend.com\/issues\/secure\/attachment\/11209\/Module.php"
                }
            ]
        },
        "sub-tasks": {
            "name": "sub-tasks",
            "type": "issuelinks",
            "value": [

            ]
        },
        "versions": {
            "name": "versions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/version\/10174",
                    "id": 10174,
                    "description": "Mini Release",
                    "name": "1.5.1",
                    "userReleaseDate": "25\/Mar\/08",
                    "archived": true,
                    "releaseDate": "2008-03-25",
                    "released": true
                }
            ]
        },
        "project": {
            "name": "project",
            "type": "com.atlassian.jira.project.Project",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/project\/ZF",
                "key": "ZF",
                "name": "Zend Framework",
                "roles": {

                }
            }
        },
        "components": {
            "name": "components",
            "type": "com.atlassian.jira.bc.project.component.ProjectComponent",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/component\/10011",
                    "id": 10011,
                    "name": "Zend_Controller",
                    "description": "front controller, including router and dispatcher",
                    "isAssigneeTypeValid": false
                }
            ]
        },
        "comment": {
            "name": "comment",
            "type": "com.atlassian.jira.issue.fields.CommentSystemField",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/20696",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=mcleod@spaceweb.nl",
                        "name": "mcleod@spaceweb.nl",
                        "displayName": "Bart McLeod",
                        "active": true
                    },
                    "body": "Zend_Http_Request is not listed in the components list.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=mcleod@spaceweb.nl",
                        "name": "mcleod@spaceweb.nl",
                        "displayName": "Bart McLeod",
                        "active": true
                    },
                    "created": "2008-04-04T16:32:23.000+0000",
                    "updated": "2008-04-04T16:32:23.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/20702",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=mcleod@spaceweb.nl",
                        "name": "mcleod@spaceweb.nl",
                        "displayName": "Bart McLeod",
                        "active": true
                    },
                    "body": "Below is my proposal for a change of the match function in module.php in the Controller\/Router\/Route directory. It checks if a parameter key is already registered in the params. If it is, it extracts its value, replaces the value with an array with the original value as its first element. The subsequent parameters with the same name will be placed in order in the new array. This code snippet works.\n\nI will now assign the issue to Mathew, since I cannot yet commit to svn.\n\n{code}   \/**\n     * Matches a user submitted path. Assigns and returns an array of variables\n     * on a successful match.\n     *\n     * If a request object is registered, it uses its setModuleName(),\n     * setControllerName(), and setActionName() accessors to set those values.\n     * Always returns the values as an array.\n     *\n     * @param string $path Path used to match against this routing map\n     * @return array An array of assigned values or a false on a mismatch\n     *\/\n    public function match($path)\n    {\n        $this->_setRequestKeys();\n\n        $values = array();\n        $params = array();\n        $path   = trim($path, self::URI_DELIMITER);\n\n        if ($path != '') {\n\n            $path = explode(self::URI_DELIMITER, $path);\n\n            if ($this->_dispatcher && $this->_dispatcher->isValidModule($path[0])) {\n                $values[$this->_moduleKey] = array_shift($path);\n                $this->_moduleValid = true;\n            }\n\n            if (count($path) && !empty($path[0])) {\n                $values[$this->_controllerKey] = array_shift($path);\n            }\n\n            if (count($path) && !empty($path[0])) {\n                $values[$this->_actionKey] = array_shift($path);\n            }\n            \n            if ($numSegs = count($path)) {\n                for ($i = 0; $i < $numSegs; $i = $i + 2) {\n                    $key = urldecode($path[$i]);\n                    $val = isset($path[$i + 1]) ? urldecode($path[$i + 1]) : null;\n                    \/*\n                     * check if key is meant as array as in index\/index\/var\/one\/var\/two\/var\/three\n                     * or even index\/index\/var[]\/one\/var[]\/two\n                     *\/\n                    if(array_key_exists($key,$params)){\n                    \tif(is_array($params[$key])){\n                    \t\t\/\/is already an array, ad value\n                    \t\t$params[$key][] = $val;\n                    \t}else{\n                    \t\t\/\/save first element\n                    \t\t$first_element = $params[$key];\n                    \t\t\/\/replace key value with array with key value as first element\n                    \t\t$params[$key] = array($first_element);\n                    \t\t\/\/value is next element\n                    \t\t$params[$key][] = $val;\n                    \t}\n                    }else{\n                    \t\/\/regular key\n                    \t$params[$key] = $val;\n                    }\n                }\n            }\n        }\n\n        $this->_values = $values + $params;\n\n        return $this->_values + $this->_defaults;\n    }{code}",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=mcleod@spaceweb.nl",
                        "name": "mcleod@spaceweb.nl",
                        "displayName": "Bart McLeod",
                        "active": true
                    },
                    "created": "2008-04-04T18:11:28.000+0000",
                    "updated": "2008-04-04T18:11:28.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/20703",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=mcleod@spaceweb.nl",
                        "name": "mcleod@spaceweb.nl",
                        "displayName": "Bart McLeod",
                        "active": true
                    },
                    "body": "complete source of module.php from 1.5.1 version.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=mcleod@spaceweb.nl",
                        "name": "mcleod@spaceweb.nl",
                        "displayName": "Bart McLeod",
                        "active": true
                    },
                    "created": "2008-04-04T18:14:43.000+0000",
                    "updated": "2008-04-04T18:14:43.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/20713",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=mcleod@spaceweb.nl",
                        "name": "mcleod@spaceweb.nl",
                        "displayName": "Bart McLeod",
                        "active": true
                    },
                    "body": "version 2",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=mcleod@spaceweb.nl",
                        "name": "mcleod@spaceweb.nl",
                        "displayName": "Bart McLeod",
                        "active": true
                    },
                    "created": "2008-04-05T09:28:51.000+0000",
                    "updated": "2008-04-05T09:28:51.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/20915",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=wil",
                        "name": "wil",
                        "displayName": "Wil Sinclair",
                        "active": true
                    },
                    "body": "Fixing obviously incorrect Fix Version (Fix Version == Affects Version).",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=wil",
                        "name": "wil",
                        "displayName": "Wil Sinclair",
                        "active": true
                    },
                    "created": "2008-04-18T13:01:26.000+0000",
                    "updated": "2008-04-18T13:01:26.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/21344",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                        "name": "matthew",
                        "displayName": "Matthew Weier O'Phinney",
                        "active": true
                    },
                    "body": "Assigning to Martel to evaluate and schedule.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                        "name": "matthew",
                        "displayName": "Matthew Weier O'Phinney",
                        "active": true
                    },
                    "created": "2008-04-22T11:56:55.000+0000",
                    "updated": "2008-04-22T11:56:55.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/21376",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=martel",
                        "name": "martel",
                        "displayName": "Michal Minicki",
                        "active": true
                    },
                    "body": "It's doable, for sure. And it could be useful for tagging, e.g.: example.com\/show\/tag\/value1\/tag\/value2\/tag\/value3. Yet  for a scheme like that I would rather create my own route class to handle even prettier URLs like 'example.com\/tags\/value1\/value2\/value3'. But I digress.\n\nCouple of things to note:\n\n1. It won't be enough to catch parameters in match() method. We have to provide support for passing arrays to assemble method.\n\n2. It has to be supported in every route class - module, route and regex. \n\n3. It would be nice if all routes would handle parameters from the same code base in order to avoid duplicating the logic and to assist in getting parameters in user created routes. So it has to be abstracted in some way. It seems like a Request responsibility at a first glance but it would introduce unnecessary coupling so probably separate class or abstract route would be a better solution.\n\n3. It probably would be nice to allow for array generation in wildcard parameters as well as in declared named parameters. So we have to decide which type of declaration looks or feels better: ':param[]\/:param[]\/*' or ':param\/:param\/*' which results in 'value1\/value2\/param[]\/value3' and 'value1\/value2\/param\/value3' respectively. I, for one, prefer the latter because it looks far less cluttered but is different than standard php parameter handling at the same time.\n\nI can't make the decision myself  - it seems a bit unnecessary and forced to me. There are better ways to handle arrays in URLs in my opinion - standard parameters and totally different route class, for example. I'm leaning towards not supporting this in order not to make routes bloated.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=martel",
                        "name": "martel",
                        "displayName": "Michal Minicki",
                        "active": true
                    },
                    "created": "2008-04-22T13:17:03.000+0000",
                    "updated": "2008-04-22T13:17:03.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/21382",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=mcleod@spaceweb.nl",
                        "name": "mcleod@spaceweb.nl",
                        "displayName": "Bart McLeod",
                        "active": true
                    },
                    "body": "It is not only useful for tagging, but also for traversing a tree hierarchy as in node[]\/one\/node[]\/two.\n\nOf course it is possible a present using a regular query string or one's own like in nodes\/one~two~three etc.\n\nIf you do use param\/value instead of param[]\/value how are you going to distinguish between regular parameters and array parameters?",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=mcleod@spaceweb.nl",
                        "name": "mcleod@spaceweb.nl",
                        "displayName": "Bart McLeod",
                        "active": true
                    },
                    "created": "2008-04-22T13:27:28.000+0000",
                    "updated": "2008-04-22T13:27:28.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/21383",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                        "name": "matthew",
                        "displayName": "Matthew Weier O'Phinney",
                        "active": true
                    },
                    "body": "Scheduling for 2.0; discussion with martel indicates it will be a pretty complicated and large endeavor.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                        "name": "matthew",
                        "displayName": "Matthew Weier O'Phinney",
                        "active": true
                    },
                    "created": "2008-04-22T13:29:39.000+0000",
                    "updated": "2008-04-22T13:29:39.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/21391",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=martel",
                        "name": "martel",
                        "displayName": "Michal Minicki",
                        "active": true
                    },
                    "body": "Bart, it's not that hard - if parameter already exists and you want to add next one then you just create an array. I think I saw a similar kind of functionality in the framework code base somewhere 9Zend_Config probably). It gets harder when you do this for special parameters like controller or action.\n\nThe other option is confusing too - what do you do in situation like \":param\/param[]\/*\"? It looks easy at first but when you dig deeper it gets interestingly twisted under the hood :)",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=martel",
                        "name": "martel",
                        "displayName": "Michal Minicki",
                        "active": true
                    },
                    "created": "2008-04-22T13:39:17.000+0000",
                    "updated": "2008-04-22T13:39:17.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/21397",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=mcleod@spaceweb.nl",
                        "name": "mcleod@spaceweb.nl",
                        "displayName": "Bart McLeod",
                        "active": true
                    },
                    "body": "Michal,\n\nI thought about that: param and param[] both existing in the same query string. That in itself would not be a problem.  What I thought could be a problem with using param instead of param[] is that if you inadvertedly use something like param\/one\/param\/somethingnew you will end up with an array, while you just accidentally put in the param twice and would expect wether an error or param to have the value \"somethingnew\" and not {0 => \"one\", 1 => \"somethingnew\"}.\n\nI agree that param looks prettier, but then, like you pointed out yourself, I would like to stick with something that looks like regular request behavior, just to make it more clear what is happening.\n\nPersonally I would not recommend this approach for special parameters like controller or action. That is mainly because I can't immediately spot the purpose of that use.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=mcleod@spaceweb.nl",
                        "name": "mcleod@spaceweb.nl",
                        "displayName": "Bart McLeod",
                        "active": true
                    },
                    "created": "2008-04-22T15:50:38.000+0000",
                    "updated": "2008-04-22T15:50:38.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/21399",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=letssurf",
                        "name": "letssurf",
                        "displayName": "James Dempster",
                        "active": true
                    },
                    "body": "Why not use the ZF for the routing and a normal query string for the params.\ne.g.\nhttp:\/\/example.com\/index\/action\/?var[]=one&var[]=two&var[]=three\n\nThis seems to work ok.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=letssurf",
                        "name": "letssurf",
                        "displayName": "James Dempster",
                        "active": true
                    },
                    "created": "2008-04-23T03:35:51.000+0000",
                    "updated": "2008-04-23T03:35:51.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/21426",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=mcleod@spaceweb.nl",
                        "name": "mcleod@spaceweb.nl",
                        "displayName": "Bart McLeod",
                        "active": true
                    },
                    "body": "James: Yes, it works. But I happened not to like the looks of it in a 'pretty' url.  It gets even uglier if you are writing xhtml and have to write &amp;var[]=one&amp;var[]=two.\n\nAs a workaround it will do of course.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=mcleod@spaceweb.nl",
                        "name": "mcleod@spaceweb.nl",
                        "displayName": "Bart McLeod",
                        "active": true
                    },
                    "created": "2008-04-23T14:43:13.000+0000",
                    "updated": "2008-04-23T14:43:13.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/21427",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=mcleod@spaceweb.nl",
                        "name": "mcleod@spaceweb.nl",
                        "displayName": "Bart McLeod",
                        "active": true
                    },
                    "body": "that was ment as &amp;amp;var[]\/one&amp;amp;var[]\/two...",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=mcleod@spaceweb.nl",
                        "name": "mcleod@spaceweb.nl",
                        "displayName": "Bart McLeod",
                        "active": true
                    },
                    "created": "2008-04-23T14:44:53.000+0000",
                    "updated": "2008-04-23T14:44:53.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/24395",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=bradley.holt",
                        "name": "bradley.holt",
                        "displayName": "Bradley Holt",
                        "active": true
                    },
                    "body": "I'll suggest another possibility that is probably a non-starter but worth mentioning. What if the array notation where in the value not the key? In other words, something like this:\n\nhttp:\/\/www.example.com\/index\/action\/var\/{one}{two}{three}\/\n\nOr this (probably better):\n\nhttp:\/\/www.example.com\/index\/action\/var\/one,two,three\/\n\nThe obvious problem with this is that I can't think of a character that is guaranteed not to have been used by someone yet in a value and so it would break BC. I guess if I want this, I'm probably better off doing it myself.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=bradley.holt",
                        "name": "bradley.holt",
                        "displayName": "Bradley Holt",
                        "active": true
                    },
                    "created": "2008-09-09T15:05:23.000+0000",
                    "updated": "2008-09-09T15:05:23.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/24399",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=mcleod@spaceweb.nl",
                        "name": "mcleod@spaceweb.nl",
                        "displayName": "Bart McLeod",
                        "active": true
                    },
                    "body": "The point why I brought this issue here, is not that one could not write something like the above, or just regular &var[]=value pairs in the query string. All of these all valid workarounds of course.\n\nWhat I mean to say is that the framework claims that you \/can\/ pass parameters in the form of var\/value\/var2\/value. This does not hold true for var[]\/value\/var[]\/value. However, one would expect it to hold true. I think ZF should try to meet expectations that are this simple, for the sake of simplicity itself. I did not mean to bring in another level of compexity.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=mcleod@spaceweb.nl",
                        "name": "mcleod@spaceweb.nl",
                        "displayName": "Bart McLeod",
                        "active": true
                    },
                    "created": "2008-09-10T00:03:39.000+0000",
                    "updated": "2008-09-10T00:03:39.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/27027",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=wil",
                        "name": "wil",
                        "displayName": "Wil Sinclair",
                        "active": true
                    },
                    "body": "It looks like there is more discussion on this. Matthew, can you review the new comments and decide if this is something we want to take on before 2.0? If not, let's mark it postponed; otherwise it will sit around for a year or more as unresolved.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=wil",
                        "name": "wil",
                        "displayName": "Wil Sinclair",
                        "active": true
                    },
                    "created": "2008-12-04T15:27:27.000+0000",
                    "updated": "2008-12-04T15:27:27.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/27908",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=danielb",
                        "name": "danielb",
                        "displayName": "Daniel Berstein",
                        "active": true
                    },
                    "body": "I suggest a syntax like:\n{code}\n\/param[;key]\/value1[,value2[,valueN]]\n{code}\nWhere <key> is the parameter's array key (why limit to \"[]\"?)\n\nFor example:\n{code}\n$data = array(\n  'name' => 'Peter',\n  'email' => array(\n    'peter@pan.com',\n    'pan@peter.com',\n  ),\n);\n{code}\nCan be presented URL-wise by:  \nhttp:\/\/www.example.com\/data;name\/Peter\/data;email\/peter%40pan.com,pan%40peter.com\n\nIf a param segment includes \";\" or if its value segment makes use of \",\" (both of these characters in an unencoded form!), then the parameter can be interpreted as being an array.\n \nLooks to me that RFC 2396 allows this: [http:\/\/tools.ietf.org\/html\/rfc2396#section-3.3]",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=danielb",
                        "name": "danielb",
                        "displayName": "Daniel Berstein",
                        "active": true
                    },
                    "created": "2009-01-09T07:50:14.000+0000",
                    "updated": "2009-01-09T07:50:14.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/27909",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=mcleod@spaceweb.nl",
                        "name": "mcleod@spaceweb.nl",
                        "displayName": "Bart McLeod",
                        "active": true
                    },
                    "body": "The original intent of this issue was not add functionality, but to make passing parameters the same as in regular php. If ?param[key] works in php, this is fine with me, but I don't see the point of the semicolon.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=mcleod@spaceweb.nl",
                        "name": "mcleod@spaceweb.nl",
                        "displayName": "Bart McLeod",
                        "active": true
                    },
                    "created": "2009-01-09T08:00:42.000+0000",
                    "updated": "2009-01-09T08:00:42.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/28099",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=danielb",
                        "name": "danielb",
                        "displayName": "Daniel Berstein",
                        "active": true
                    },
                    "body": "Bart, semi colons in the URL would serve a similar purpose to what square brackets do in PHP.\n\nI'm not suggesting to add new functionality, I'm just trying to find a non-short sighted solution. One that solves for good the underlying issue using RFC complaint semantics: how to represent in an URL multidimensional data structures without resorting to data serialization. It must be by convention, and I believe the RFCs do provide such convention, no need to reinvent the wheel ;)\n\nWhen a parameter is a scalar, the key\/value pairs works great, but when you need to represent arrays you have at least two vectors to address: the parameter name and an index\/key. My reading of RFC 2396 is that a path segment can use a semi colon to denote parameters of said segment, I translate that into the issue at hand as if a path segment is the parameter name, the segment's parameter (separated by semi colons) is the array\/hash index.\n\nThe difference between URLs (assuming a plain key\/value route) \"\/a\/b\/\" and \"\/a;\/b\/\" is that the former would be that parameter 'a' in the former would have value (scalar) \"b\", while the later would be (array) \"b\".\n",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=danielb",
                        "name": "danielb",
                        "displayName": "Daniel Berstein",
                        "active": true
                    },
                    "created": "2009-01-12T02:33:36.000+0000",
                    "updated": "2009-01-12T02:33:36.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/28110",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=mcleod@spaceweb.nl",
                        "name": "mcleod@spaceweb.nl",
                        "displayName": "Bart McLeod",
                        "active": true
                    },
                    "body": "The point is that I think the way an array is passed should follow simple conventions and be easy to understand and use.\n\nThe philosophy of Zend Framework is to offer simple approaches to complex issues.\n\nNo matter how intelligent it may be what you are proposing:\n1. I don't get it\n2. It is not solving this issue.\n\nLet me clearify once more what this issue is about:\n\nRegular url, with regular way of passing parameters:\nindex.php?var[]=1&var[]=2\n\nRegular php:\n$_GET['var'] == array('1', '2')\n\nZF url:\nindex\/index\/var[]\/1\/var[]\/2\n$_GET['var'] == null\n$_GET['var[]'] == '2'\n\nMy point is that this is not expected behavior, if your expectations are shaped by how you where using php before there was ZF. Maybe my point is not interesting. Fair enough. But I am certainly not looking for another level of complexity and having to keep track of where I put semicolons.\n\n\n\n",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=mcleod@spaceweb.nl",
                        "name": "mcleod@spaceweb.nl",
                        "displayName": "Bart McLeod",
                        "active": true
                    },
                    "created": "2009-01-12T05:51:08.000+0000",
                    "updated": "2009-01-12T05:51:08.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/28124",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=danielb",
                        "name": "danielb",
                        "displayName": "Daniel Berstein",
                        "active": true
                    },
                    "body": "Just to show that I've been on your side of the bench before: I was the one who approached Shahar Evron with a patch that allowed Zend_Uri (and therefore most every HTTP enabled component in ZF) to digest square brackets.\n{code}\n svn diff -c 4690 http:\/\/framework.zend.com\/svn\/framework\/standard\/branches\/release-1.7\/library\/Zend\/Uri\/Http.php\nIndex: Http.php\n===================================================================\n--- Http.php\t(revision 4689)\n+++ Http.php\t(revision 4690)\n@@ -70,7 +70,7 @@\n         \/\/ are to be used with slash-delimited regular expression strings.\n         $this->_regex['alphanum']   = '[^\\W_]';\n         $this->_regex['escaped']    = '(?:%[\\da-fA-F]{2})';\n-        $this->_regex['mark']       = '[-_.!~*\\'()]';\n+        $this->_regex['mark']       = '[-_.!~*\\'()\\[\\]]';\n         $this->_regex['reserved']   = '[;\\\/?:@&=+$,]';\n         $this->_regex['unreserved'] = '(?:' . $this->_regex['alphanum'] . '|' . $this->_regex['mark'] . ')';\n         $this->_regex['segment']    = '(?:(?:' . $this->_regex['unreserved'] . '|' . $this->_regex['escaped']\n{code}\nIIRC Shahar said that according to the RFCs square brackets are not permitted in URIs, but I was able to convince Shahar that the general use (mostly in PHP!) made it almost mandatory to have Zend_Uri support it. I think credibility him may have been bigger since we both worked together at Zend Technologies.\n\nI have no authority over ZF at all, and very little experience with the dynamics of the community, but my professional opinion is that encouraging the use of square brackets within path segments may not be the best decision the project can take.\n\nI'm not sure why you think *you* should keep track of the complexity\/semicolons, that is the job of the route's assemble\/disassemble methods! Even if your proposal is approved, it would be the route's assemble\/disassemble methods that should take care of formatting a nice (RFC-non-compliant-IMO in this case) URL.\n\nI volunteer a bit of my free time to help implement the feature if its approved by the deities. I rest my case and let the ZF Gods (Wil? Matthew?) comment. \n",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=danielb",
                        "name": "danielb",
                        "displayName": "Daniel Berstein",
                        "active": true
                    },
                    "created": "2009-01-12T14:48:58.000+0000",
                    "updated": "2009-01-12T14:48:58.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/28166",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=mcleod@spaceweb.nl",
                        "name": "mcleod@spaceweb.nl",
                        "displayName": "Bart McLeod",
                        "active": true
                    },
                    "body": "You certainly got me here.\n\nThis is the first issue I ever reported for ZF. What you made very clear to me here is that I am building url's in a naive way, seen from the perspective of the framework. I type them, using a keyboard.\n\nSo I will do several things from here, because you made it impossible for me to ignore the assembler any longer (I did ignore it because I prefer to type url's).\n\n- first off, I will look into what the assembler can do for me\n- second I will take a whole different approach in addressing the problem that raised the issue. I was looking for a solution to write something like index.php?sub[]=chapter1&sub[]=paragraph2&sub[]\/3\nI will now probably write something like \/page\/3\/trail\/chapter1~paragraph2 and explode the trail, this will be a lot more effective and look slightly nicer\n- third I suggest that passing array's through get is now in your hands and you should try to make it as RFC compliant as possible\n- I thank you for waking me up and spending so much time on your valuable comments",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=mcleod@spaceweb.nl",
                        "name": "mcleod@spaceweb.nl",
                        "displayName": "Bart McLeod",
                        "active": true
                    },
                    "created": "2009-01-14T02:14:18.000+0000",
                    "updated": "2009-01-14T02:14:18.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/31457",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=rockaut",
                        "name": "rockaut",
                        "displayName": "Markus",
                        "active": true
                    },
                    "body": "I stumbled across this as i searched for arrays in URL Parameters... anything done in 1.8 or is it still upcoming?",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=rockaut",
                        "name": "rockaut",
                        "displayName": "Markus",
                        "active": true
                    },
                    "created": "2009-05-29T01:27:30.000+0000",
                    "updated": "2009-05-29T01:27:30.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/31462",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                        "name": "matthew",
                        "displayName": "Matthew Weier O'Phinney",
                        "active": true
                    },
                    "body": "Please note that this is scheduled for the next *major* release -- i.e., 2.0. There are significant changes to be made in the router to accomodate the notation, and these would likely necessitate BC breaks.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                        "name": "matthew",
                        "displayName": "Matthew Weier O'Phinney",
                        "active": true
                    },
                    "created": "2009-05-29T05:49:05.000+0000",
                    "updated": "2009-05-29T05:49:05.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/31490",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=rockaut",
                        "name": "rockaut",
                        "displayName": "Markus",
                        "active": true
                    },
                    "body": "You're right -- as most time ;) -- sorry haven't reconized it and the state was \"open\"... thank you.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=rockaut",
                        "name": "rockaut",
                        "displayName": "Markus",
                        "active": true
                    },
                    "created": "2009-05-30T02:31:47.000+0000",
                    "updated": "2009-05-30T02:31:47.000+0000"
                }
            ]
        }
    },
    "transitions": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-2986\/transitions"
}