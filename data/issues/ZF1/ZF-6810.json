{
    "expand": "html",
    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-6810",
    "key": "ZF-6810",
    "fields": {
        "summary": {
            "name": "summary",
            "type": "java.lang.String",
            "value": "Regression in Zend_Loader between 1.8.0 and 1.8.1, class_exists() causes warnings"
        },
        "timetracking": {
            "name": "timetracking",
            "type": "com.atlassian.jira.issue.fields.TimeTrackingSystemField"
        },
        "issuetype": {
            "name": "issuetype",
            "type": "com.atlassian.jira.issue.issuetype.IssueType",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issueType\/1",
                "name": "Bug",
                "subtask": false
            }
        },
        "votes": {
            "name": "votes",
            "type": "com.atlassian.jira.issue.fields.VotesSystemField",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-6810\/votes",
                "votes": 2,
                "hasVoted": false
            }
        },
        "security": {
            "name": "security",
            "type": "com.atlassian.jira.issue.security.IssueSecurityLevel"
        },
        "fixVersions": {
            "name": "fixVersions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [

            ]
        },
        "reporter": {
            "name": "reporter",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=lphuberdeau",
                "name": "lphuberdeau",
                "displayName": "Louis-Philippe Huberdeau",
                "active": true
            }
        },
        "created": {
            "name": "created",
            "type": "java.util.Date",
            "value": "2009-05-26T11:55:58.000+0000"
        },
        "updated": {
            "name": "updated",
            "type": "java.util.Date",
            "value": "2012-08-02T20:13:53.000+0000"
        },
        "customfield_10041": {
            "name": "Tags",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:labels"
        },
        "description": {
            "name": "description",
            "type": "java.lang.String",
            "value": "When updating from 1.8.0 to 1.8.1, I found some unit tests failing in my application. I looked around the issue list, found a lot of related problems, most of which were closed or marked as duplicate to other closed issues.\n\nHere is the situation:\n\n$className = \"Prefix_To_Path_\" . $token;\n\nif( class_exists($className) ) {\n   return new $className;\n}\n\nIt worked perfectly in 1.8.0. However, from 1.8.1, a file not found warning is issued.\n\nThe solution appears to be to enable error suppression. However, due to strict coding standards, that does not fit as a valid solution.\n\nThe code base is still in development, so performance is not a major issue at this time. I would rather have a file check with optional caching than receiving a warning.\n\nIf this issue cannot be resolved, I would like to know of a recommended alternative."
        },
        "priority": {
            "name": "priority",
            "type": "com.atlassian.jira.issue.priority.Priority",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/priority\/3",
                "name": "Major"
            }
        },
        "duedate": {
            "name": "duedate",
            "type": "java.util.Date"
        },
        "customfield_10022": {
            "name": "Fix Version Priority",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:select"
        },
        "watcher": {
            "name": "watcher",
            "type": "watcher",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-6810\/watchers",
                "isWatching": false,
                "watchCount": 2
            }
        },
        "worklog": {
            "name": "worklog",
            "type": "worklog",
            "value": [

            ]
        },
        "status": {
            "name": "status",
            "type": "com.atlassian.jira.issue.status.Status",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/status\/10000",
                "name": "Postponed"
            }
        },
        "labels": {
            "name": "labels",
            "type": "com.atlassian.jira.issue.label.Label",
            "value": [

            ]
        },
        "assignee": {
            "name": "assignee",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=ralph",
                "name": "ralph",
                "displayName": "Ralph Schindler",
                "active": true
            }
        },
        "links": {
            "name": "links",
            "type": "issuelinks",
            "value": [

            ]
        },
        "attachment": {
            "name": "attachment",
            "type": "attachment",
            "value": [

            ]
        },
        "sub-tasks": {
            "name": "sub-tasks",
            "type": "issuelinks",
            "value": [

            ]
        },
        "versions": {
            "name": "versions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/version\/10310",
                    "id": 10310,
                    "description": "Mini Release",
                    "name": "1.8.1",
                    "userReleaseDate": "12\/May\/09",
                    "archived": false,
                    "releaseDate": "2009-05-12",
                    "released": true
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/version\/10330",
                    "id": 10330,
                    "description": "Mini Release",
                    "name": "1.8.2",
                    "userReleaseDate": "27\/May\/09",
                    "archived": false,
                    "releaseDate": "2009-05-27",
                    "released": true
                }
            ]
        },
        "project": {
            "name": "project",
            "type": "com.atlassian.jira.project.Project",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/project\/ZF",
                "key": "ZF",
                "name": "Zend Framework",
                "roles": {

                }
            }
        },
        "components": {
            "name": "components",
            "type": "com.atlassian.jira.bc.project.component.ProjectComponent",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/component\/10001",
                    "id": 10001,
                    "name": "Zend_Loader",
                    "isAssigneeTypeValid": false
                }
            ]
        },
        "comment": {
            "name": "comment",
            "type": "com.atlassian.jira.issue.fields.CommentSystemField",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/31364",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                        "name": "matthew",
                        "displayName": "Matthew Weier O'Phinney",
                        "active": true
                    },
                    "body": "class_exists() can take an optional second argument. That argument can tell it to bypass the autoloader, if any. (See http:\/\/php.net\/class_exists for more information.) In the example you have above, I'd recommend using:\n{code}\nif (class_exists($className, false)) {\n    return new $className;\n}\n{code}\nThis will prevent the autoloader from triggering, which will also prevent the warnings from occurring.\n\nFinally, it's best to register only the namespaces you use with the autoloader, and not use it as a fallback autoloader, as it will create warnings any time it is unable to resolve a given classname; if used only as a namespace autoloader, then warnings should typically never occur.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                        "name": "matthew",
                        "displayName": "Matthew Weier O'Phinney",
                        "active": true
                    },
                    "created": "2009-05-26T13:13:40.000+0000",
                    "updated": "2009-05-26T13:13:40.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/31365",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                        "name": "matthew",
                        "displayName": "Matthew Weier O'Phinney",
                        "active": true
                    },
                    "body": "I will likely mark this as \"won't fix\" or \"not reproducible\" unless I hear back as to the class_exists() solution noted above.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                        "name": "matthew",
                        "displayName": "Matthew Weier O'Phinney",
                        "active": true
                    },
                    "created": "2009-05-26T13:14:24.000+0000",
                    "updated": "2009-05-26T13:14:24.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/31366",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=lphuberdeau",
                        "name": "lphuberdeau",
                        "displayName": "Louis-Philippe Huberdeau",
                        "active": true
                    },
                    "body": "I would expect the class to be autoloaded, hence disabling it does not appear to be a valid solution.\n\nIf the file does not exist, I only expect class_exists to return false, just as it did in 1.8.0. There is not much use in making a check if it fails while performing it.\n\nI see no reason why this would fail:\n\n$this->assertFalse( class_exists('Zend_NotAClass') );\n\nPerhaps the check should be optional for performance issues, just like suppress errors is optional.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=lphuberdeau",
                        "name": "lphuberdeau",
                        "displayName": "Louis-Philippe Huberdeau",
                        "active": true
                    },
                    "created": "2009-05-26T13:48:56.000+0000",
                    "updated": "2009-05-26T13:48:56.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/31434",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                        "name": "matthew",
                        "displayName": "Matthew Weier O'Phinney",
                        "active": true
                    },
                    "body": "Well, it raises an E_WARNING, which PHPUnit then reports as an error (not a failure). My question is: why are you testing class_exists() in your test suite? and would it make sense to add the second \"false\" flag to the call (to suppress autoloading)?\n\nYou can also turn on the suppressNotFoundWarnings flag on the autoloader prior to the check if you want to prevent the warnings and make the test pass:\n\n{code}\nZend_Loader_Autoloader::getInstance()->suppressNotFoundWarnings(true);\n{code}\n\nWe made the flag false by default for 1.8.1 as it was an oversight that it was on by default in 1.8.0 (we'd never intended that, as one of the principle use cases for the component was to remove error suppression by default). You should only ever need the suppression if you are using the autoloader as a fallback autoloader.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                        "name": "matthew",
                        "displayName": "Matthew Weier O'Phinney",
                        "active": true
                    },
                    "created": "2009-05-28T10:23:04.000+0000",
                    "updated": "2009-05-28T10:23:04.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/31436",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=lphuberdeau",
                        "name": "lphuberdeau",
                        "displayName": "Louis-Philippe Huberdeau",
                        "active": true
                    },
                    "body": "The application is highly data driven and the goal is to be able to drop in code to extend it. In normal runs, nonexistent classes will never be loaded. However, while saving new configurations, multiple checks are made to avoid breakage later on. It gets tested by the test suite just because I verify that failures are handled correctly.\n\nSuppressing the warnings work, however it does not seem like a good practice. As mentioned in other reports, it may hide problems.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=lphuberdeau",
                        "name": "lphuberdeau",
                        "displayName": "Louis-Philippe Huberdeau",
                        "active": true
                    },
                    "created": "2009-05-28T10:50:40.000+0000",
                    "updated": "2009-05-28T10:50:40.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/51511",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=vestigal",
                        "name": "vestigal",
                        "displayName": "Vestigal",
                        "active": true
                    },
                    "body": "Could this bug please be opened again?\r\n\r\nAllow me to explain why I think class_exists() (and the file_exists() method that it calls) should not emit warnings. Let's say that you have a list of plugins that you want to try to load. You then write some code like this:\r\n\r\n{noformat} \r\n$plugins = array('plugin1', 'plugin2', 'plugin3'); \/\/ etc.\r\n\r\nforeach($plugins as $plugin) {\r\n   try {\r\n      Zend_Loader::loadClass($plugin);\r\n   } catch(Zend_Exception $e) {\r\n      \/\/ Since this is a plugin, just ignore the error and continue if we failed to load the plugin.\r\n      continue;\r\n   }\r\n   \r\n   $instantiated_plugin = new $plugin();\r\n   \r\n   \/\/ If the plugin has the method we need, call the method.\r\n   if(method_exists($instantiated_plugin, 'method')) {\r\n      $instantiated_plugin->method();\r\n   }\r\n}\r\n{noformat}\r\n\r\nWhat we're trying to do here is load several \"plugins\" and then execute a method if the plugin has that method. We have a white list of plugins that are allowed to be loaded, and we try and load each one in turn. Under the current behaviour, a warning will be emitted every time a plugin fails to be loaded, but this is clearly not what is desired.\r\n\r\nIs there any chance that the behaviour of this function could be changed so that it does not emit a warning when the class or file to be loaded does not exist?",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=vestigal",
                        "name": "vestigal",
                        "displayName": "Vestigal",
                        "active": true
                    },
                    "created": "2012-08-02T02:50:39.000+0000",
                    "updated": "2012-08-02T02:50:39.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/51513",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=frosch",
                        "name": "frosch",
                        "displayName": "Frank Br\u00fcckner",
                        "active": true
                    },
                    "body": "@[~vestigal]\r\n{quote}\r\nIs there any chance that the behaviour of this function could be changed so that it does not emit a warning when the class or file to be loaded does not exist?\r\n{quote}\r\n{{Zend_Loader::loadClass()}} uses {{Zend_Loader::loadFile()}} and this uses:\r\n{code}\r\nif ($once) {\r\n    include_once $filename;\r\n} else {\r\n    include $filename;\r\n}\r\n{code}\r\n{quote}The include construct will emit a warning if it cannot find a file{quote}\r\nhttp:\/\/de3.php.net\/manual\/en\/function.include.php",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=frosch",
                        "name": "frosch",
                        "displayName": "Frank Br\u00fcckner",
                        "active": true
                    },
                    "created": "2012-08-02T07:22:56.000+0000",
                    "updated": "2012-08-02T07:22:56.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/51523",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=vestigal",
                        "name": "vestigal",
                        "displayName": "Vestigal",
                        "active": true
                    },
                    "body": "Frank, thank you for the confirmation. I realize that this is what is going on; what I am asking is that we reconsider how this function works and have it not emit a warning in the case that it fails to load a class because the class' file does not exist.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=vestigal",
                        "name": "vestigal",
                        "displayName": "Vestigal",
                        "active": true
                    },
                    "created": "2012-08-02T16:38:21.000+0000",
                    "updated": "2012-08-02T16:38:21.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/51525",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                        "name": "matthew",
                        "displayName": "Matthew Weier O'Phinney",
                        "active": true
                    },
                    "body": "Vestigal -- this ship has sailed. If we do not emit the warning, developers don't know what failed. If we do emit it, some people complain about noisy logs and\/or display_errors. We opted for making debugging easier.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                        "name": "matthew",
                        "displayName": "Matthew Weier O'Phinney",
                        "active": true
                    },
                    "created": "2012-08-02T18:26:54.000+0000",
                    "updated": "2012-08-02T18:26:54.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/51526",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=vestigal",
                        "name": "vestigal",
                        "displayName": "Vestigal",
                        "active": true
                    },
                    "body": "Matthew, that makes sense.\r\n\r\nIs there any chance that another parameter could be added to the {{loadFile()}} function that would allow for suppression of errors? The function would then look something like this:\r\n\r\n{noformat}\r\npublic static function loadFile($filename, $dirs = null, $once = false, $show_errors = true) \r\n{\r\n   ...\r\n   \r\n   if ($once) {\r\n      if($show_errors) {\r\n         include_once $filename;\r\n      } else {\r\n         @include_once $filename;\r\n      }\r\n   } else {\r\n      if($show_errors) {\r\n         include $filename;\r\n      } else {\r\n         @include $filename\r\n      }\r\n   }\r\n   \r\n   ...\r\n}\r\n{noformat}\r\n\r\nWhile perhaps not the most elegant solution, I think this would work. {{loadClass()}} would then just need to tell {{loadFile()}} to not show any errors that it encountered.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=vestigal",
                        "name": "vestigal",
                        "displayName": "Vestigal",
                        "active": true
                    },
                    "created": "2012-08-02T20:13:53.000+0000",
                    "updated": "2012-08-02T20:13:53.000+0000"
                }
            ]
        }
    },
    "transitions": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-6810\/transitions"
}