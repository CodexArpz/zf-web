{
    "expand": "html",
    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-5655",
    "key": "ZF-5655",
    "fields": {
        "summary": {
            "name": "summary",
            "type": "java.lang.String",
            "value": "expunge() missing in Zend_Mail_Storage_Imap & remove expunge call inside removeMessage()"
        },
        "timetracking": {
            "name": "timetracking",
            "type": "com.atlassian.jira.issue.fields.TimeTrackingSystemField"
        },
        "issuetype": {
            "name": "issuetype",
            "type": "com.atlassian.jira.issue.issuetype.IssueType",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issueType\/1",
                "name": "Bug",
                "subtask": false
            }
        },
        "votes": {
            "name": "votes",
            "type": "com.atlassian.jira.issue.fields.VotesSystemField",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-5655\/votes",
                "votes": 0,
                "hasVoted": false
            }
        },
        "security": {
            "name": "security",
            "type": "com.atlassian.jira.issue.security.IssueSecurityLevel"
        },
        "resolution": {
            "name": "resolution",
            "type": "com.atlassian.jira.issue.resolution.Resolution",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/resolution\/2",
                "name": "Won't Fix"
            }
        },
        "fixVersions": {
            "name": "fixVersions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [

            ]
        },
        "resolutiondate": {
            "name": "resolutiondate",
            "type": "java.util.Date",
            "value": "2011-08-14T19:23:38.000+0000"
        },
        "reporter": {
            "name": "reporter",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=mkliewe",
                "name": "mkliewe",
                "displayName": "Michael Kliewe",
                "active": true
            }
        },
        "created": {
            "name": "created",
            "type": "java.util.Date",
            "value": "2009-01-29T11:51:37.000+0000"
        },
        "updated": {
            "name": "updated",
            "type": "java.util.Date",
            "value": "2011-08-14T19:23:38.000+0000"
        },
        "customfield_10041": {
            "name": "Tags",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:labels"
        },
        "description": {
            "name": "description",
            "type": "java.lang.String",
            "value": "Hello,\r\n\r\nI'm using Zend_Mail_Storage_Imap to periodically check a mailbox for new mails.\r\n\r\nFirst thing I see: There is no explicit function to expunge. Because I have to be sure to work with \"correct\" data, I need to do an expunge directly after connecting. So I had to write my own:\r\n\r\n{code}\r\n\/**\r\n * Expunge deleted messages in current folder\r\n *\r\n * @return null\r\n * @throws Zend_Mail_Storage_Exception\r\n *\/\r\npublic function expunge()\r\n{\r\n    if (!$this->_protocol->expunge()) {\r\n        throw new Zend_Mail_Storage_Exception('expunge failed');\r\n    }\r\n}\r\n{code}\r\n\r\nI also need to parse all emails and remove them. If I loop through all mails with\r\nforeach ($storage as $id=>$message) {\r\nand call removeMessage() inside this loop, I get an exception! This is caused by expunge() directly after\/inside removeMessage().\r\n\r\nExample:\r\nAssume we have the following mailbox:\r\nUnique ID | ID | Subject\r\n12345     |  1 | First mail\r\n12349     |  2 | Second mail\r\n12358     |  3 | Third mail\r\n\r\nAssume we have the following code:\r\n\r\n{code}\r\nforeach ($storage as $id=>$message) {\r\n\t\/\/ do something with message. parse and put into database e.g.\r\n\t\r\n\t$storage->removeMessage($id);\r\n}\r\n{code}\r\n\r\nWhat happens:\r\nWe first get the mail with ID 1. Parse it, and then remove it (set flag and call expunge). Then the next foreach-loop gets the mail with ID 2. But this is not \"Second mail\", it is \"Third mail\", because expunge reorganizes all mails, and \"Second mail\" becomes ID 1 and \"Third mail\" becomes ID 2. So we are not correctly looping through all mails.\r\nIn the third loop, there is an exception: \r\nUncaught exception 'Zend_Mail_Protocol_Exception' with message 'the single id was not found in response'\r\nbecause ID 3 (which exists at start) doesn't exists in the third loop (reorganization, ID3 becomes ID1 in second loop after removeMessage())\r\n\r\n\r\nConclusion:\r\nIt would be best to provide an expunge() function to the developer, and let him decide when to call it. We also need to remove automatic expunge in removeMessage(). Then the developer can call expunge() right after connecting or before closing. We don't get the failure described above if we call expunge() before close(), and not after\/in each removeMessage()...\r\n\r\nGreets"
        },
        "priority": {
            "name": "priority",
            "type": "com.atlassian.jira.issue.priority.Priority",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/priority\/3",
                "name": "Major"
            }
        },
        "duedate": {
            "name": "duedate",
            "type": "java.util.Date"
        },
        "customfield_10022": {
            "name": "Fix Version Priority",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:select"
        },
        "watcher": {
            "name": "watcher",
            "type": "watcher",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-5655\/watchers",
                "isWatching": false,
                "watchCount": 3
            }
        },
        "worklog": {
            "name": "worklog",
            "type": "worklog",
            "value": [

            ]
        },
        "status": {
            "name": "status",
            "type": "com.atlassian.jira.issue.status.Status",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/status\/5",
                "name": "Resolved"
            }
        },
        "labels": {
            "name": "labels",
            "type": "com.atlassian.jira.issue.label.Label",
            "value": [
                "zf-crteam-padraic",
                "zf-crteam-priority"
            ]
        },
        "assignee": {
            "name": "assignee",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=nico",
                "name": "nico",
                "displayName": "Nico Edtinger",
                "active": true
            }
        },
        "links": {
            "name": "links",
            "type": "issuelinks",
            "value": [

            ]
        },
        "attachment": {
            "name": "attachment",
            "type": "attachment",
            "value": [

            ]
        },
        "sub-tasks": {
            "name": "sub-tasks",
            "type": "issuelinks",
            "value": [

            ]
        },
        "versions": {
            "name": "versions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/version\/10250",
                    "id": 10250,
                    "description": "Mini Release",
                    "name": "1.7.3",
                    "userReleaseDate": "19\/Jan\/09",
                    "archived": false,
                    "releaseDate": "2009-01-19",
                    "released": true
                }
            ]
        },
        "project": {
            "name": "project",
            "type": "com.atlassian.jira.project.Project",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/project\/ZF",
                "key": "ZF",
                "name": "Zend Framework",
                "roles": {

                }
            }
        },
        "components": {
            "name": "components",
            "type": "com.atlassian.jira.bc.project.component.ProjectComponent",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/component\/10074",
                    "id": 10074,
                    "name": "Zend_Mail_Storage",
                    "description": "Facilitates reading mail from any of several common mail storage formats.",
                    "isAssigneeTypeValid": false
                }
            ]
        },
        "comment": {
            "name": "comment",
            "type": "com.atlassian.jira.issue.fields.CommentSystemField",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/35788",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=nico",
                        "name": "nico",
                        "displayName": "Nico Edtinger",
                        "active": true
                    },
                    "body": "Actually the behavior is the same is every storage class. If you want to remove more than one message and use the message number it's better to remove them last to first: \r\n{code}\r\nfor ($i = count($storage); $i; --$i) {\r\n    $storage->removeMessage($i);\r\n}\r\n{code}\r\n\r\nIf someone has the time to implement a message set class we can support UIDs and multiple messages in a transparent manner. Your code could become:\r\n{code}\r\n$storage->removeMessage($storage->getSet()->range(1, '*'));\r\n{code}\r\n\r\nIt's clean and can be supported by all storage classes. Having one storage class behave differently is something that should be avoided if possible. That's why there is an automatic expunge.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=nico",
                        "name": "nico",
                        "displayName": "Nico Edtinger",
                        "active": true
                    },
                    "created": "2009-11-05T05:22:38.000+0000",
                    "updated": "2009-11-05T05:22:38.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/47959",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=padraic",
                        "name": "padraic",
                        "displayName": "P\u00e1draic Brady",
                        "active": true
                    },
                    "body": "Doesn't appear to be a bug so much as a possible improvement. Would suggest adding as an improvement for ZF2 perhaps but marking as Won't Fix since it's simple to do as described by reporter.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=padraic",
                        "name": "padraic",
                        "displayName": "P\u00e1draic Brady",
                        "active": true
                    },
                    "created": "2011-08-14T19:23:38.000+0000",
                    "updated": "2011-08-14T19:23:38.000+0000"
                }
            ]
        }
    },
    "transitions": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-5655\/transitions"
}