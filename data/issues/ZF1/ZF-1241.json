{
    "expand": "html",
    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-1241",
    "key": "ZF-1241",
    "fields": {
        "summary": {
            "name": "summary",
            "type": "java.lang.String",
            "value": "Use DISTINCT when querying many-to-many relationships"
        },
        "timetracking": {
            "name": "timetracking",
            "type": "com.atlassian.jira.issue.fields.TimeTrackingSystemField"
        },
        "issuetype": {
            "name": "issuetype",
            "type": "com.atlassian.jira.issue.issuetype.IssueType",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issueType\/1",
                "name": "Bug",
                "subtask": false
            }
        },
        "votes": {
            "name": "votes",
            "type": "com.atlassian.jira.issue.fields.VotesSystemField",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-1241\/votes",
                "votes": 0,
                "hasVoted": false
            }
        },
        "security": {
            "name": "security",
            "type": "com.atlassian.jira.issue.security.IssueSecurityLevel"
        },
        "resolution": {
            "name": "resolution",
            "type": "com.atlassian.jira.issue.resolution.Resolution",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/resolution\/2",
                "name": "Won't Fix"
            }
        },
        "fixVersions": {
            "name": "fixVersions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/version\/10080",
                    "id": 10080,
                    "description": "Beta Release; bug fixes",
                    "name": "0.9.3",
                    "userReleaseDate": "05\/May\/07",
                    "archived": true,
                    "releaseDate": "2007-05-05",
                    "released": true
                }
            ]
        },
        "resolutiondate": {
            "name": "resolutiondate",
            "type": "java.util.Date",
            "value": "2007-04-20T18:38:37.000+0000"
        },
        "reporter": {
            "name": "reporter",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=bkarwin",
                "name": "bkarwin",
                "displayName": "Bill Karwin",
                "active": true
            }
        },
        "created": {
            "name": "created",
            "type": "java.util.Date",
            "value": "2007-04-10T18:09:18.000+0000"
        },
        "updated": {
            "name": "updated",
            "type": "java.util.Date",
            "value": "2007-07-05T14:44:04.000+0000"
        },
        "customfield_10041": {
            "name": "Tags",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:labels"
        },
        "description": {
            "name": "description",
            "type": "java.lang.String",
            "value": "Rob Allen writes:\n\nI've started playing with findManyToManyRowset() and it appears to provide multiple identical records of the destination table\" if there is more than one record in the intersection table.\n\nIs there any way of doing a \"distinct\" findManyToManyRowset() so that I only get one record per destination table?\n"
        },
        "priority": {
            "name": "priority",
            "type": "com.atlassian.jira.issue.priority.Priority",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/priority\/3",
                "name": "Major"
            }
        },
        "duedate": {
            "name": "duedate",
            "type": "java.util.Date"
        },
        "customfield_10022": {
            "name": "Fix Version Priority",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:select"
        },
        "watcher": {
            "name": "watcher",
            "type": "watcher",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-1241\/watchers",
                "isWatching": false,
                "watchCount": 2
            }
        },
        "worklog": {
            "name": "worklog",
            "type": "worklog",
            "value": [

            ]
        },
        "status": {
            "name": "status",
            "type": "com.atlassian.jira.issue.status.Status",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/status\/5",
                "name": "Resolved"
            }
        },
        "labels": {
            "name": "labels",
            "type": "com.atlassian.jira.issue.label.Label",
            "value": [

            ]
        },
        "assignee": {
            "name": "assignee",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=darby",
                "name": "darby",
                "displayName": "Darby Felton",
                "active": true
            }
        },
        "links": {
            "name": "links",
            "type": "issuelinks",
            "value": [

            ]
        },
        "attachment": {
            "name": "attachment",
            "type": "attachment",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/attachment\/10401",
                    "filename": "zf1241-v1.patch",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=rob",
                        "name": "rob",
                        "displayName": "Rob Allen",
                        "active": true
                    },
                    "created": "2007-04-11T00:20:57.000+0000",
                    "size": 529,
                    "mimeType": "text\/plain",
                    "content": "http:\/\/fw02.zend.com\/issues\/secure\/attachment\/10401\/zf1241-v1.patch"
                }
            ]
        },
        "sub-tasks": {
            "name": "sub-tasks",
            "type": "issuelinks",
            "value": [

            ]
        },
        "versions": {
            "name": "versions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/version\/10070",
                    "id": 10070,
                    "description": "Beta Release; bug fixes",
                    "name": "0.9.2",
                    "userReleaseDate": "06\/Apr\/07",
                    "archived": true,
                    "releaseDate": "2007-04-06",
                    "released": true
                }
            ]
        },
        "project": {
            "name": "project",
            "type": "com.atlassian.jira.project.Project",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/project\/ZF",
                "key": "ZF",
                "name": "Zend Framework",
                "roles": {

                }
            }
        },
        "components": {
            "name": "components",
            "type": "com.atlassian.jira.bc.project.component.ProjectComponent",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/component\/10133",
                    "id": 10133,
                    "name": "Zend_Db_Table",
                    "description": "Lightweight OO interface to database tables and rowsets.",
                    "isAssigneeTypeValid": false
                }
            ]
        },
        "comment": {
            "name": "comment",
            "type": "com.atlassian.jira.issue.fields.CommentSystemField",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/14105",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=rob",
                        "name": "rob",
                        "displayName": "Rob Allen",
                        "active": true
                    },
                    "body": "Possible patch attached:\n\nIndex: Abstract.php\n===================================================================\n--- Abstract.php\t(revision 4462)\n+++ Abstract.php\t(working copy)\n@@ -657,7 +657,8 @@\n \n         $select = $db->select()\n             ->from(array('i' => $interName), array())\n-            ->join(array('m' => $matchName), $joinCond, '*');\n+            ->join(array('m' => $matchName), $joinCond, '*')\n+            ->distinct();\n \n         $callerMap = $this->_prepareReference($intersectionTable, $this->_getTable(), $callerRefRule);\n \n",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=rob",
                        "name": "rob",
                        "displayName": "Rob Allen",
                        "active": true
                    },
                    "created": "2007-04-11T00:20:57.000+0000",
                    "updated": "2007-04-11T00:20:57.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/14241",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=bkarwin",
                        "name": "bkarwin",
                        "displayName": "Bill Karwin",
                        "active": true
                    },
                    "body": "Assign to Darby.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=bkarwin",
                        "name": "bkarwin",
                        "displayName": "Bill Karwin",
                        "active": true
                    },
                    "created": "2007-04-17T17:34:58.000+0000",
                    "updated": "2007-04-17T17:34:58.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/14288",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=darby",
                        "name": "darby",
                        "displayName": "Darby Felton",
                        "active": true
                    },
                    "body": "I would like to see a use case where this makes sense to do. I have a counterexample that may indicate that we should not do this:\n\nLet's consider an example where we have bugs and products, where each bug may relate to many products, and each product may have many bugs, thereby providing the many-to-many relationship. We then have tables {{bugs}}, {{products}}, and {{bugs_products}}, where {{bugs_products}} is the intersection table between {{bugs}} and {{products}}. Irrelevant pseudo-schema information omitted for brevity:\n\n{code}\nCREATE TABLE products ( \n  product_id        PRIMARY KEY\n);\n\nCREATE TABLE bugs ( \n  bug_id            PRIMARY KEY\n);\n\nCREATE TABLE bugs_products (\n  bug_id            REFERENCES bugs(bug_id),\n  product_id        REFERENCES products(product_id),\n  PRIMARY KEY(bug_id, product_id)\n);\n{code}\n\nGiven this structure, it should be impossible that there exists more than one identical row in the {{bugs_products}} table. When is it okay that the intersection table has multiple identical records? Even if such cases exist and are not \"edge\" cases, why should the framework component automatically perform DISTINCT? I for one would want to know if my database tables did not comply with [normalization|http:\/\/en.wikipedia.org\/wiki\/Database_normalization] rules.\n\nMy feeling is that such automagical behavior is dangerous because it hides problems in the underlying database.\n\nMaybe there are compelling reasons to do this, but I'm not seeing it yet?",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=darby",
                        "name": "darby",
                        "displayName": "Darby Felton",
                        "active": true
                    },
                    "created": "2007-04-18T16:26:45.000+0000",
                    "updated": "2007-04-18T16:26:45.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/14289",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=rob",
                        "name": "rob",
                        "displayName": "Rob Allen",
                        "active": true
                    },
                    "body": "I came across the problem with this scenario:\n\n{code}\nCREATE TABLE article( \n  article_id        PRIMARY KEY\n);\n\nCREATE TABLE users ( \n  user_id            PRIMARY KEY\n);\n\nCREATE TABLE comments (\n  comment_id  PRIMARY KEY\n  article_id        REFERENCES bugs(bug_id),\n  user_id           REFERENCES products(product_id),\n  comment  \n);\n{code}\n\nIn this scenario, each user may comment more than once on an article, but if I want to create a list of all articles that a given user has commented on, then I wouldn't want multiple article records in the result set. (I've probably designed the database incorrectly !)\n\n\nGiven that I've got this schema, I'd be happy if I could choose to have findManyToManyRowset() use \"distinct\" situations like this.\n",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=rob",
                        "name": "rob",
                        "displayName": "Rob Allen",
                        "active": true
                    },
                    "created": "2007-04-18T17:19:06.000+0000",
                    "updated": "2007-04-18T17:19:06.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/14290",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=darby",
                        "name": "darby",
                        "displayName": "Darby Felton",
                        "active": true
                    },
                    "body": "Thanks, Rob, for illustrating the problem you are trying to solve! This helps a *lot*. :)\n\nI do not see a problem with your schema at all, and clearly you need the *ability* to select the distinct rows to solve the problem of creating the list. My concern is that we likely should not make retrieving distinct rows an implementation detail that cannot be overridden, but I agree that we should at least provide the ability to get distinct rows, in order to be able to solve problems like this, which probably are quite common.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=darby",
                        "name": "darby",
                        "displayName": "Darby Felton",
                        "active": true
                    },
                    "created": "2007-04-18T17:32:30.000+0000",
                    "updated": "2007-04-18T17:32:30.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/14324",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=darby",
                        "name": "darby",
                        "displayName": "Darby Felton",
                        "active": true
                    },
                    "body": "We're marking this one as \"won't fix\" for the following reasons:\n\n* The desired result can already be reached with something like:\n{code}\n$articlesDistinct = array_unique($rowset->toArray());\n{code}\n* You can build a custom query to meet the need with:\n{code}\n$row->getTable()->getAdapter()->select()...\n{code}\n* Adding an option to the findManyToManyRowset() method is undesirable. It already has four parameters and is complicated enough without adding an additional \"distinct?\" parameter. Also, adding a parameter for DISTINCT seems to lead to opening the door for other query directives, such as GROUP BY, HAVING, ORDER BY, etc. Drawing the line on which query directives are supported would then be difficult to avoid scope creep. ",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=darby",
                        "name": "darby",
                        "displayName": "Darby Felton",
                        "active": true
                    },
                    "created": "2007-04-20T18:38:37.000+0000",
                    "updated": "2007-04-20T18:38:37.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/14325",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=rob",
                        "name": "rob",
                        "displayName": "Rob Allen",
                        "active": true
                    },
                    "body": "Group By, Having, Order By, etc are useful too, but to me are clearly enhancements rather than a case that the function doesn't actually work as expected. \n\narray_unique doesn't work on an array of arrays, unless you are thinking of another function? Even then, you'd still end up with an array of arrays rather than a Zend_Db_Rowset which is more useful, so I don't think that's a very practical solution.\n\nThe only solution is to forget about the Zend_Db_Table relationship code completely and write your own code using Zend_Db_Select. \n\nObviously I disagree with marking this as \"won't fix\".\n\nAdding $select->distinct() to the current findManyToManyRowset() doesn't actually break the usage of the function for the schema that Darby pointed out. If it ever did \"hide\" a problem, the problem it is hiding is that the database engine doesn't handle the concept of a primary key!  I don't think that this is enough  of a reason for making findManyToManyRowset() useless for a large set of use-cases.\n\ni.e. I can't actually think of a use-case where you would ever want the current functionality of findManyToManyRowset(). Does anyone *ever* want the set of destination records to include duplicates? \n\nEven the examples in the documentation exhibit this problem as the code in the examples doesn't produce the expected result if the same user reports (or is assigned to) more than one bug against a given product. i.e. in example 9.73, $productsRowset contains the same product multiple times if a user ever reports more than one bug against the same product. Ditto for example 9.74 and 9.75. (in http:\/\/framework.zend.com\/manual\/en\/zend.db.table.relationships.html)\n\nClearly, you don't want to add an additional parameter to the function signature (which I'm fine with!), so I think that the distinct should be enforced as it doesn't break anything and will ensure that the dataset returned matches the user's expectations.\n\n",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=rob",
                        "name": "rob",
                        "displayName": "Rob Allen",
                        "active": true
                    },
                    "created": "2007-04-21T01:19:42.000+0000",
                    "updated": "2007-04-21T01:19:42.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/14350",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=darby",
                        "name": "darby",
                        "displayName": "Darby Felton",
                        "active": true
                    },
                    "body": "I would suggest that the findManyToManyRowset() currently provides expected default behavior, since it provides all matches through the intersection table. The fundamental difference between the example I provided and the example you provided is that in your example includes multiple matching records in the intersection table, and rightfully so. :)\n\nOf course, array_unique() isn't exactly what you need, and you may have to write a little code to get the desired functional effect of creating a list of distinct article rows where each identified article has at least one comment authored by the user of the queried source row.\n\nI disagree that the only solution is to forget about the relationship code. The above example is easily workable with a foreach and an array. Maybe there are other ways to solve it, too. But yes, I think using Zend_Db_Select is also a reasonable solution.\n\nLet's consider then, making DISTINCT the default behavior. If we were to do this, then how to solve the following problem?\n\n\/Given a user row, how to use findManyToManyRowset() to get the articles on which the user has commented, along with a count of how many times the user commented on each article?\/\n\nOf course, the current implementation provides the solution already. But if we were to change the default behavior to DISTINCT, how now does a user with the above requirement solve the problem using the same method?",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=darby",
                        "name": "darby",
                        "displayName": "Darby Felton",
                        "active": true
                    },
                    "created": "2007-04-23T11:17:49.000+0000",
                    "updated": "2007-04-23T11:17:49.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/14360",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=rob",
                        "name": "rob",
                        "displayName": "Rob Allen",
                        "active": true
                    },
                    "body": "I know when I've lost!  \n\nI'll live with customised versions of Zend_Db_Table_Row and hope you don't find too many bugs!",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=rob",
                        "name": "rob",
                        "displayName": "Rob Allen",
                        "active": true
                    },
                    "created": "2007-04-23T14:11:34.000+0000",
                    "updated": "2007-04-23T14:11:34.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/14362",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=darby",
                        "name": "darby",
                        "displayName": "Darby Felton",
                        "active": true
                    },
                    "body": "You have not lost at all - and I appreciate your good sense of humor. :) Instead, you bring forth a reasonable and common use case that should be easily solvable using this method. An extended row class is a fine option; for the implementation, I was thinking something like:\n\n{code}\n$articlesCommentCount = array();\nforeach ($userRow->findManyToManyRowset(...) as $articleRow) {\n    ++$articlesCommentCount[$articleRow->id];\n}\n\/\/ $articlesCommentCount contains the number of comments that the user has posted, indexed per article ID\n{code}\n\nThis provides the extra information that would be lost by using DISTINCT and hopefully also solves the problem you presented. What do you think?",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=darby",
                        "name": "darby",
                        "displayName": "Darby Felton",
                        "active": true
                    },
                    "created": "2007-04-23T14:28:56.000+0000",
                    "updated": "2007-04-23T14:28:56.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/14363",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=rob",
                        "name": "rob",
                        "displayName": "Rob Allen",
                        "active": true
                    },
                    "body": "Deadpan British humour FTW :) \n\nThe basics of the foreach() approach work fine if you don't have too many records to go through. I'd hate to do it on an 8000 odd result set! The main problem is that the subsequent foreach() in the view now iterates over an array rather than a Zend_Db_Rowset so instead of doing:\n\n{code}\nforeach($this->articles as $article)\n{\n    echo \"<li>\" . $article->title . \"<\/li>\\n\";\n}\n{code}\nyou do:\n{code}\nforeach($this->articles as $article)\n{\n    echo \"<li>\" . $article['title'] . \"<\/li>\\n\";\n}\n{code}\n\nwhich breaks the convention we have here that \"all iterations over database records are over objects\". Hence you end up putting the type in to the variable name ($this->articleArray) which is just \"messy\" in my opinion!\n\n\nHowever, now that you've mentioned ORDER BY, I'm interested!  I've realised that the order I get the results out in only works cos the id is broadly equivalent to date added, but alphabetically would be nice too! Ditto LIMIT would be useful for paging...\n\nNow we are clearly in \"feature-request land\"! \n\nI'll have to do some serious thinking on the best way to do this sort of stuff. I can see two obvious routes: 1. adding $select as a new last parameter to the function call so that the user can set up the select object first before the function does it's bit. Or, 2. follow Zend_Db_Controller_Front's lead with setParam() to allow setting stuff for the object independently of the actual function call.  There's probably other, better, ways once we all start mulling over problem too!\n\n",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=rob",
                        "name": "rob",
                        "displayName": "Rob Allen",
                        "active": true
                    },
                    "created": "2007-04-23T14:56:59.000+0000",
                    "updated": "2007-04-23T14:56:59.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/14365",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=bkarwin",
                        "name": "bkarwin",
                        "displayName": "Bill Karwin",
                        "active": true
                    },
                    "body": "To me, the prevailing reason not to make DISTINCT be the default behavior of the many-to-many query is performance:  to reduce the result set to DISTINCT entries requires the RDBMS to sort the result set, and this can incur a performance hit depending on the RDBMS brand.  So that why I'd leave the default as non-distinct (or indistinct?).\n\nOne user on the fw-db mailing list said that using GROUP BY performs better than DISTINCT, but I wouldn't use that because it relies on nonstandard MySQL behavior.  To get good performance, one would group by the primary key of the destination table, so as to take advantage of the primary key index.  But that would leave out the other columns from the destination table, even though they are listed in the select-list.  This is permitted in MySQL, but not in standard SQL, so it would break usage in some other RDBMS brands.\n\nCan we postpone this enhancement (as well as ordering, limiting, etc.) to a future version?  I'd like to slow down the feature expansion in Zend_Db_Table until we can get our hands around the current functionality.  I can imagine an interface for declaring a \"template\" Zend_Db_Select object to use in Table and Row methods.  But this feature deserves to go through the proposal process.  It should be that we can implement it without breaking backward compatibility, so we could do it post-ZF1.0.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=bkarwin",
                        "name": "bkarwin",
                        "displayName": "Bill Karwin",
                        "active": true
                    },
                    "created": "2007-04-23T16:59:14.000+0000",
                    "updated": "2007-04-23T16:59:14.000+0000"
                }
            ]
        }
    },
    "transitions": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-1241\/transitions"
}