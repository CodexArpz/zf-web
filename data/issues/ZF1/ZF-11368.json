{
    "expand": "html",
    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-11368",
    "key": "ZF-11368",
    "fields": {
        "summary": {
            "name": "summary",
            "type": "java.lang.String",
            "value": "Zend_Db_Statement should declare interface methods abstract"
        },
        "timetracking": {
            "name": "timetracking",
            "type": "com.atlassian.jira.issue.fields.TimeTrackingSystemField"
        },
        "issuetype": {
            "name": "issuetype",
            "type": "com.atlassian.jira.issue.issuetype.IssueType",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issueType\/9",
                "name": "Docs:  Improvement",
                "subtask": false
            }
        },
        "votes": {
            "name": "votes",
            "type": "com.atlassian.jira.issue.fields.VotesSystemField",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-11368\/votes",
                "votes": 0,
                "hasVoted": false
            }
        },
        "security": {
            "name": "security",
            "type": "com.atlassian.jira.issue.security.IssueSecurityLevel"
        },
        "resolution": {
            "name": "resolution",
            "type": "com.atlassian.jira.issue.resolution.Resolution",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/resolution\/2",
                "name": "Won't Fix"
            }
        },
        "fixVersions": {
            "name": "fixVersions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [

            ]
        },
        "resolutiondate": {
            "name": "resolutiondate",
            "type": "java.util.Date",
            "value": "2011-05-12T15:20:39.000+0000"
        },
        "reporter": {
            "name": "reporter",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=ashawley",
                "name": "ashawley",
                "displayName": "Aaron S. Hawley",
                "active": true
            }
        },
        "created": {
            "name": "created",
            "type": "java.util.Date",
            "value": "2011-05-12T14:31:28.000+0000"
        },
        "updated": {
            "name": "updated",
            "type": "java.util.Date",
            "value": "2011-05-12T18:41:04.000+0000"
        },
        "customfield_10041": {
            "name": "Tags",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:labels"
        },
        "description": {
            "name": "description",
            "type": "java.lang.String",
            "value": "I often look at Zend_Db_Statement and do not see, in the code or the code-generated documentation, mention of a few methods because they are implemented by inherited classes.  Coincidentally, these are documented in the interface, but I rarely remember to look there, since I'm not implementing an adapter, I'm using the Zend_Db_Statement API.  Could we add the few missing interface-required functions to Zend_Db_Statement as abstract methods, in particular fetch(), which always bites me?"
        },
        "priority": {
            "name": "priority",
            "type": "com.atlassian.jira.issue.priority.Priority",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/priority\/5",
                "name": "Trivial"
            }
        },
        "duedate": {
            "name": "duedate",
            "type": "java.util.Date"
        },
        "customfield_10022": {
            "name": "Fix Version Priority",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:select"
        },
        "watcher": {
            "name": "watcher",
            "type": "watcher",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-11368\/watchers",
                "isWatching": false,
                "watchCount": 0
            }
        },
        "worklog": {
            "name": "worklog",
            "type": "worklog",
            "value": [

            ]
        },
        "customfield_10000": {
            "name": "Language",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:select",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/customFieldOption\/10000",
                "value": "English"
            }
        },
        "status": {
            "name": "status",
            "type": "com.atlassian.jira.issue.status.Status",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/status\/5",
                "name": "Resolved"
            }
        },
        "labels": {
            "name": "labels",
            "type": "com.atlassian.jira.issue.label.Label",
            "value": [

            ]
        },
        "assignee": {
            "name": "assignee",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                "name": "matthew",
                "displayName": "Matthew Weier O'Phinney",
                "active": true
            }
        },
        "links": {
            "name": "links",
            "type": "issuelinks",
            "value": [

            ]
        },
        "attachment": {
            "name": "attachment",
            "type": "attachment",
            "value": [

            ]
        },
        "sub-tasks": {
            "name": "sub-tasks",
            "type": "issuelinks",
            "value": [

            ]
        },
        "versions": {
            "name": "versions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [

            ]
        },
        "project": {
            "name": "project",
            "type": "com.atlassian.jira.project.Project",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/project\/ZF",
                "key": "ZF",
                "name": "Zend Framework",
                "roles": {

                }
            }
        },
        "components": {
            "name": "components",
            "type": "com.atlassian.jira.bc.project.component.ProjectComponent",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/component\/10012",
                    "id": 10012,
                    "name": "Zend_Db",
                    "description": "interfaces, APIs, and adapters for various third-party data stores",
                    "isAssigneeTypeValid": false
                }
            ]
        },
        "comment": {
            "name": "comment",
            "type": "com.atlassian.jira.issue.fields.CommentSystemField",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/46545",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=ashawley",
                        "name": "ashawley",
                        "displayName": "Aaron S. Hawley",
                        "active": true
                    },
                    "body": "Here's a patch that adds the abstract methods to the class, with documentation copied from Zend_Db_Statement_Interface.  Unrelated, I noticed getDriverStatement() has a weird docblock.\r\n\r\n{noformat} \r\nIndex: Statement.php\r\n===================================================================\r\n--- Statement.php\t(revision 24034)\r\n+++ Statement.php\t(working copy)\r\n@@ -286,6 +286,41 @@\r\n     }\r\n \r\n     \/**\r\n+     * Closes the cursor, allowing the statement to be executed again.\r\n+     *\r\n+     * @return bool\r\n+     * @throws Zend_Db_Statement_Exception\r\n+     *\/\r\n+    abstract public function closeCursor();\r\n+\r\n+    \/**\r\n+     * Returns the number of columns in the result set.\r\n+     * Returns null if the statement has no result set metadata.\r\n+     *\r\n+     * @return int The number of columns.\r\n+     * @throws Zend_Db_Statement_Exception\r\n+     *\/\r\n+    abstract public function columnCount();\r\n+\r\n+    \/**\r\n+     * Retrieves the error code, if any, associated with the last operation on\r\n+     * the statement handle.\r\n+     *\r\n+     * @return string error code.\r\n+     * @throws Zend_Db_Statement_Exception\r\n+     *\/\r\n+    abstract public function errorCode();\r\n+\r\n+    \/**\r\n+     * Retrieves an array of error information, if any, associated with the\r\n+     * last operation on the statement handle.\r\n+     *\r\n+     * @return array\r\n+     * @throws Zend_Db_Statement_Exception\r\n+     *\/\r\n+    abstract public function errorInfo();\r\n+\r\n+    \/**\r\n      * Executes a prepared statement.\r\n      *\r\n      * @param array $params OPTIONAL Values to bind to parameter placeholders.\r\n@@ -325,6 +360,17 @@\r\n     }\r\n \r\n     \/**\r\n+     * Fetches a row from the result set.\r\n+     *\r\n+     * @param int $style  OPTIONAL Fetch mode for this fetch operation.\r\n+     * @param int $cursor OPTIONAL Absolute, relative, or other.\r\n+     * @param int $offset OPTIONAL Number for absolute or relative cursors.\r\n+     * @return mixed Array, object, or scalar depending on fetch mode.\r\n+     * @throws Zend_Db_Statement_Exception\r\n+     *\/\r\n+    abstract public function fetch($style = null, $cursor = null, $offset = null);\r\n+    \r\n+    \/**\r\n      * Returns an array containing all of the result set rows.\r\n      *\r\n      * @param int $style OPTIONAL Fetch mode.\r\n@@ -412,6 +458,26 @@\r\n     }\r\n \r\n     \/**\r\n+     * Retrieves the next rowset (result set) for a SQL statement that has\r\n+     * multiple result sets.  An example is a stored procedure that returns\r\n+     * the results of multiple queries.\r\n+     *\r\n+     * @return bool\r\n+     * @throws Zend_Db_Statement_Exception\r\n+     *\/\r\n+    abstract public function nextRowset();\r\n+\r\n+    \/**\r\n+     * Returns the number of rows affected by the execution of the\r\n+     * last INSERT, DELETE, or UPDATE statement executed by this\r\n+     * statement object.\r\n+     *\r\n+     * @return int     The number of rows affected.\r\n+     * @throws Zend_Db_Statement_Exception\r\n+     *\/\r\n+    abstract public function rowCount();\r\n+\r\n+    \/**\r\n      * Set the default fetch mode for this statement.\r\n      *\r\n      * @param int   $mode The fetch mode.\r\n@@ -475,8 +541,8 @@\r\n \r\n     \/**\r\n      * Gets the resource or object setup by the\r\n-     * _parse\r\n-     * @return unknown_type\r\n+     * _prepare\r\n+     * @return mixed\r\n      *\/\r\n     public function getDriverStatement()\r\n     {\r\n{noformat}",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=ashawley",
                        "name": "ashawley",
                        "displayName": "Aaron S. Hawley",
                        "active": true
                    },
                    "created": "2011-05-12T14:34:54.000+0000",
                    "updated": "2011-05-12T14:34:54.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/46546",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                        "name": "matthew",
                        "displayName": "Matthew Weier O'Phinney",
                        "active": true
                    },
                    "body": "Actually, we can't -- due to a limitation in PHP.\r\n\r\nWhen you implement an interface, you *must* define the methods, even if the class implementing it is marked as abstract.\r\n\r\nAs an example:\r\n\r\n{code}\r\n\r\ninterface Command\r\n{\r\n    public function execute();\r\n}\r\n\r\nabstract class AbstractCommand implements Command\r\n{\r\n}\r\n    abstract public function execute();\r\n\r\nclass DoSomething extends AbstractCommand\r\n{\r\n    public function execute()\r\n    {\r\n        echo \"Hello!\";\r\n    }\r\n}\r\n$c = new DoSomething();\r\n$c->execute();\r\n{code}\r\n\r\nwill result in this:\r\n\r\n{code}\r\nPHP Parse error:  syntax error, unexpected T_PUBLIC, expecting T_CLASS\r\n{code}\r\n\r\nIt does not matter where you put \"abstract\" in the function definition; you'll get some parse error. The only way to get around the situation is to either (a) define it as an empty stub (or throw an exception indicating \"not implemented\"), or (b) omit it from the abstract definition.\r\n\r\nWe've chosen (b) as PHP properly notifies you if the method is missing.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                        "name": "matthew",
                        "displayName": "Matthew Weier O'Phinney",
                        "active": true
                    },
                    "created": "2011-05-12T15:19:42.000+0000",
                    "updated": "2011-05-12T15:20:25.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/46570",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=ashawley",
                        "name": "ashawley",
                        "displayName": "Aaron S. Hawley",
                        "active": true
                    },
                    "body": "Sorry, I didn't know about this problem in PHP.  Thanks for explaining it.  I checked and this is possible in Java.  The actual error from PHP should be, \"Fatal error: Can't inherit abstract function Command::execute() (previously declared abstract in AbstractCommand)\".  This means PHP internally declares interface methods as abstract, since you get the same error if you change the Command interface to the following:\r\n\r\n{code}\r\nabstract class ACommand\r\n{\r\n   abstract public function execute();\r\n}\r\n{code}\r\n\r\nThis has been reported as a bug 5 times, but sadly has been marked as \"bogus\" 4 times.  Hopefully, it will be fixed.\r\n\r\n- http:\/\/bugs.php.net\/35057\r\n- http:\/\/bugs.php.net\/41145\r\n- http:\/\/bugs.php.net\/43149\r\n- http:\/\/bugs.php.net\/43200\r\n- http:\/\/bugs.php.net\/51826\r\n",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=ashawley",
                        "name": "ashawley",
                        "displayName": "Aaron S. Hawley",
                        "active": true
                    },
                    "created": "2011-05-12T18:41:04.000+0000",
                    "updated": "2011-05-12T18:41:04.000+0000"
                }
            ]
        }
    },
    "transitions": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-11368\/transitions"
}