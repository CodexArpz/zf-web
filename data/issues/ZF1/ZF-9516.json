{
    "expand": "html",
    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-9516",
    "key": "ZF-9516",
    "fields": {
        "summary": {
            "name": "summary",
            "type": "java.lang.String",
            "value": "Zend_Form_ArrayNotation"
        },
        "timetracking": {
            "name": "timetracking",
            "type": "com.atlassian.jira.issue.fields.TimeTrackingSystemField"
        },
        "issuetype": {
            "name": "issuetype",
            "type": "com.atlassian.jira.issue.issuetype.IssueType",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issueType\/2",
                "name": "New Feature",
                "subtask": false
            }
        },
        "votes": {
            "name": "votes",
            "type": "com.atlassian.jira.issue.fields.VotesSystemField",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-9516\/votes",
                "votes": 0,
                "hasVoted": false
            }
        },
        "security": {
            "name": "security",
            "type": "com.atlassian.jira.issue.security.IssueSecurityLevel"
        },
        "fixVersions": {
            "name": "fixVersions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [

            ]
        },
        "reporter": {
            "name": "reporter",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=alab",
                "name": "alab",
                "displayName": "Christian Albrecht",
                "active": true
            }
        },
        "created": {
            "name": "created",
            "type": "java.util.Date",
            "value": "2010-03-23T08:01:28.000+0000"
        },
        "updated": {
            "name": "updated",
            "type": "java.util.Date",
            "value": "2012-11-20T21:37:57.000+0000"
        },
        "customfield_10041": {
            "name": "Tags",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:labels"
        },
        "description": {
            "name": "description",
            "type": "java.lang.String",
            "value": "The array notation within Zend_Form is very unstructured and cluttered all around the place.\r\n\r\nIt is not possible to retrieve the Array Notation Cascade for any Item before rendering\r\nbecause this is assembled within Zend_Form_Decorator_FormElements.\r\n\r\nThe methods getValues, setDefaults and similar are nearly unreadable because,\r\n(so it seems to me) elementsBelongTo and belongsTo where introduced later on\r\nand only partial patches addressed the need for these settings.\r\n\r\n__\r\n\r\nZend_Form_ArrayNotation was a Singleton, :P which holds the structure of an endless number\r\nof Forms and appended Items by assigning attached Items an unique ident and splicing this\r\ninto an one dimensional B-Tree like array, in a way that every ident will occure twice\r\nwithin this array where every idents between are childs of this ident.\r\n\r\nItems are added by calling $notation->addItem($arrayProperties = array(), $intoIdent = null)\r\nwhich will return a new unique Ident after appending it into the given Ident or into root.\r\n\r\nItems can be moved by calling $notation->appendItem($ident, $intoIdent) and can be removed\r\nby calling $notation->removeItem($ident) which will remove the whole item with childs from\r\nthe tree, and also delete the properties.\r\n\r\nAnother array within Zend_Form_ArrayNotation holds properties for idents, currently 'name',\r\n'path', 'concat', where 'path' is the belongsTo or elementsBelongTo setting of that item \r\nnormalized to '\/' separated segments. 'concat' is a keyword which method to use when appending \r\na path to another or retrieving the Notation for an item, currently this is \r\n'pathOnly', 'pathAppendName', 'emptyPathAppendName'.\r\n'pathAppendName' would be used for Zend_Form_Element, and 'emptyPathAppendName' for Zend_Form.\r\n\r\nThese properties can be set at any time from everywhere to every item with calling \r\n$notation->setProperty($ident, $key, $value)\r\n\r\n__\r\n\r\nThe Array Notation could be retrieved by calling $notation->getNotation($ident, $from, $concat)\r\nwhere $from is either an int for getting the notation up to $from parents, including\r\nitself (1 or -1 gets the parent notation appended the notation of the item itself), or\r\nan ident where getNotation will return the path starting from that $from ident \r\n(which is a parent of $ident) appended the notation of $ident.\r\n\r\nWith $concat it is possible to temporary change the method which is used to assemble the\r\nnotation of $ident (This is needed for Zend_Form_Element which normaly uses 'pathAppendName'\r\nbut in case of Zend_Form_Element->getBelongsTo() the name is not wanted in notation)\r\n\r\n__\r\n\r\nZend_Form_ArrayNotation has several helper methods to process data related to Array Notation.\r\n$notation->getValuesForItem($ident, $values) currently looks if the notation of $ident could be \r\ndissolved within associative array $values and returns that dissolved value or null\r\nif it could not be dissolved. (This could be modified to dissolve for name of $ident also)\r\n$notation->getValuesForItemIfExist($ident, $values) does the same but returns unmodified $values\r\nif dissolve fails.\r\n$notation->appendValue($ident, $value) internally resolves the notation for $ident converts this\r\nto an array and attaches the value to this array.\r\n$notation->replaceInto($ident, $intoValue, $fromValue) is like \r\narray_replace_recursive($intoValue, $notation->appendValue($ident, $fromValue)) but with a custom\r\narray_replace_recursive function until 5.3 is widespreaded.\r\n$notation->toPath($ident | $stringNotation | $associativeArray) returns the path Notation with '\/'\r\nseparator (when using $ident, 'concat' method is used for this (like ->getNotation($ident,0))\r\n$notation->toId($ident | $stringNotation | $associativeArray) does the same with separator '-'\r\nand when using $ident for the complete path from root to $ident.\r\n\r\n__\r\n\r\nThis Class could handle all the belongsTo related settings and actions in one place.\r\n\r\nIt could be modified to allow custom Concat methods (call_user_func|closures) for \r\neach item which gets called when assembling the path|ArrayNotation.\r\n\r\nIt also could implement a way to name SubItems equally which makes them to an array of\r\nItems while still allowing overloading in Zend_Form.\r\n\r\n{code:title=Zend_Form}\r\n...\r\n\r\n    \/**\r\n     * @var Zend_Form_ArrayNotation \r\n     *\/\r\n    protected $_notary;\r\n\r\n    \/**\r\n     * unique ident from Zend_Form_ArrayNotation\r\n     * @var string\r\n     *\/\r\n    protected $_ident;\r\n\r\n...    \r\n\r\n    public function __construct($options = null)\r\n    {\r\n        $this->_notary = Zend_Form_ArrayNotation::getInstance();\r\n        $this->_ident  = $this->_notary->addItem(array('concat' => 'emptyPathAppendName'));\r\n\r\n...\r\n\r\n    \/**\r\n     * Get the ArrayNotation instance \r\n     * \r\n     * @return Zend_From_ArrayNotation\r\n     *\/\r\n    public function getNotary()\r\n    {\r\n        return $this->_notary;\r\n    }\r\n\r\n    \/**\r\n     * Get the unique Ident from Zend_Form_ArrayNotation \r\n     * \r\n     * @return string\r\n     *\/\r\n    public function getIdent()\r\n    {\r\n        return $this->_ident;\r\n    }\r\n\r\n...\r\n\r\n    public function setElementsBelongTo($array)\r\n    {\r\n        $path = $this->filterName($array, true);\r\n        $this->setIsArray('' !== $path);\r\n        $this->getNotary()->setPath($this->getIdent(), $path);\r\n\r\n        return $this;\r\n    }\r\n\r\n...\r\n\r\n    public function getElementsBelongTo()\r\n    {\r\n        return $this->getNotary()->getNotation($this->getIdent(), 0);\r\n    }\r\n\r\n...\r\n\r\n    public function addSubForm(Zend_Form $form, $name, $order = null)\r\n    {\r\n\r\n...\r\n\r\n        $this->getNotary()->appendItem($form->getIdent(), $this->getIdent());\r\n        return $this;\r\n    }\r\n\r\n...\r\n\r\n    public function getValidValues($data, $suppressArrayNotation = false)\r\n    {\r\n        $notary = $this->getNotary();\r\n        $data   = $notary->getValuesForItemIfExist($this->getIdent(), $data);\r\n\r\n        $values = array();\r\n        foreach ($this->_getElementsAndSubFormsOrdered() as $subitem) {\r\n            $ident = $subitem->getIdent();\r\n            if ($subitem instanceof Zend_Form_Element) {\r\n                $test  = $notary->getValuesForItem($ident, $data);\r\n                if (null !== $test) {\r\n                    if ($subitem->isValid($test, $data)) {\r\n                        $values = $notary->replaceInto($ident, $values,\r\n                                                       $subitem->getValue());\r\n                    }\r\n                }\r\n            } else {\r\n                $values = $notary->replaceInto($ident, $values,\r\n                                               $subitem->getValidValues($data, true));\r\n            }\r\n        }\r\n        if (!$suppressArrayNotation && $this->isArray()) {\r\n            $values = $notary->appendValue($this->getIdent(), $values);\r\n        }\r\n        return $values;\r\n    }\r\n\r\n...\r\n{code}\r\n{code}\r\n$map = Zend_Form_ArrayNotation::getInstance();\r\n$form1 = $map->addItem(array(\"name\" => \"form1Name\",\r\n                             \"path\" => \"path\/to\/form1[mixed][Notation]\",\r\n                             \"concat\" => \"emptyPathAppendName\"));\r\nvar_dump($form1);\r\n\r\nstring '#1' (length=2)\r\n\r\n\r\n$element1 = $map->addItem(array(\"name\" => \"element1Name\",\r\n                                \"path\" => \"path1[withArrayNotation]\",\r\n                                \"concat\" => \"pathAppendName\"),\r\n                                $form1);\r\n\r\n$subform1 = $map->addItem(array(\"name\" => \"subform1Name\",\r\n                                \"path\" => \"subform1Path[withArrayNotation]\",\r\n                                \"concat\" => \"emptyPathAppendName\"),\r\n                                $form1);\r\n$element2 = $map->addItem(array(\"name\" => \"element2Name\",\r\n                                \"path\" => \"path1[withArrayNotation]\",\r\n                                \"concat\" => \"pathAppendName\"),\r\n                                $subform1);\r\n$element3 = $map->addItem(array(\"name\" => \"element3Name\",\r\n                                \"path\" => \"path1[withArrayNotation]\",\r\n                                \"concat\" => \"pathAppendName\"),\r\n                                $subform1);\r\n$element4 = $map->addItem(array(\"name\" => \"element4Name\",\r\n                                \"path\" => \"path1[withArrayNotation]\",\r\n                                \"concat\" => \"pathAppendName\"),\r\n                                $form1);\r\n\r\nvar_dump($map->debugItemsArrays());\r\n\r\narray\r\n  '$this->_array' => \r\n    array\r\n      0 => string '#0' (length=2)\r\n      1 => string '#1' (length=2)\r\n      2 => string '#2' (length=2)\r\n      3 => string '#2' (length=2)\r\n      4 => string '#3' (length=2)\r\n      5 => string '#4' (length=2)\r\n      6 => string '#4' (length=2)\r\n      7 => string '#5' (length=2)\r\n      8 => string '#5' (length=2)\r\n      9 => string '#3' (length=2)\r\n      10 => string '#6' (length=2)\r\n      11 => string '#6' (length=2)\r\n      12 => string '#1' (length=2)\r\n      13 => string '#0' (length=2)\r\n  '$this->_items' => \r\n    array\r\n      '#0' => \r\n        array\r\n          empty\r\n      '#1' => \r\n        array\r\n          'name' => string 'form1Name' (length=9)\r\n          'path' => string 'path\/to\/form1\/mixed\/Notation' (length=28)\r\n          'concat' => string '_concatEmptyPathAppendName' (length=26)\r\n      '#2' => \r\n        array\r\n          'name' => string 'element1Name' (length=12)\r\n          'path' => string 'path1\/withArrayNotation' (length=23)\r\n          'concat' => string '_concatPathAppendName' (length=21)\r\n      '#3' => \r\n        array\r\n          'name' => string 'subform1Name' (length=12)\r\n          'path' => string 'subform1Path\/withArrayNotation' (length=30)\r\n          'concat' => string '_concatEmptyPathAppendName' (length=26)\r\n      '#4' => \r\n        array\r\n          'name' => string 'element2Name' (length=12)\r\n          'path' => string 'path1\/withArrayNotation' (length=23)\r\n          'concat' => string '_concatPathAppendName' (length=21)\r\n      '#5' => \r\n        array\r\n          'name' => string 'element3Name' (length=12)\r\n          'path' => string 'path1\/withArrayNotation' (length=23)\r\n          'concat' => string '_concatPathAppendName' (length=21)\r\n      '#6' => \r\n        array\r\n          'name' => string 'element4Name' (length=12)\r\n          'path' => string 'path1\/withArrayNotation' (length=23)\r\n          'concat' => string '_concatPathAppendName' (length=21)\r\n\r\n\r\n\r\nvar_dump($map->getNotation($element2, 0, \"pathOnly\"));\r\n\r\nstring 'path1[withArrayNotation]' (length=24)\r\n\r\n\r\nvar_dump($map->getNotation($element2, 0));\r\n\r\nstring 'path1[withArrayNotation][element2Name]' (length=38)\r\n\r\n\r\nvar_dump($map->getNotation($element2, -1));\r\n\r\nstring 'subform1Path[withArrayNotation][path1][withArrayNotation][element2Name]' (length=71)\r\n\r\n\r\nvar_dump($map->getNotation($element2, $subform1));\r\n\r\nstring 'subform1Path[withArrayNotation][path1][withArrayNotation][element2Name]' (length=71)\r\n\r\n\r\nvar_dump($map->getNotation($element2));\r\n\r\nstring 'path[to][form1][mixed][Notation][subform1Path][withArrayNotation][path1][withArrayNotation][element2Name]' (length=105)\r\n\r\n\r\nvar_dump($map->getNotation($element2, -2));\r\n\r\nstring 'path[to][form1][mixed][Notation][subform1Path][withArrayNotation][path1][withArrayNotation][element2Name]' (length=105)\r\n\r\n\r\nvar_dump($map->getNotation($element2, \"#0\"));\r\n\r\nstring 'path[to][form1][mixed][Notation][subform1Path][withArrayNotation][path1][withArrayNotation][element2Name]' (length=105)\r\n\r\n\r\nvar_dump($map->getNotation($element2, null, \"pathOnly\"));\r\n\r\nstring 'path[to][form1][mixed][Notation][subform1Path][withArrayNotation][path1][withArrayNotation]' (length=91)\r\n\r\n\r\n$map->setName($element2, null);\r\n\r\nvar_dump($map->getValuesForItem($element2, array(\"path1\" => array(\"withArrayNotation\" => \"thisIWant\"))));\r\n\r\nstring 'thisIWant' (length=9)\r\n\r\n\r\n$map->setName($element2, \"element2\");\r\n$map->setPath($element2, null);\r\nvar_dump($map->getValuesForItem($element2, array(\"element2\" => array(\"NowThis\" => \"withArray\"))));\r\n\r\narray\r\n  'NowThis' => string 'withArray' (length=17)\r\n\r\n\r\nvar_dump($map->getValuesForItemIfExist($element2, array(\"nonexistant\" => array(\"notation\" => \"passthrou\"))));\r\n\r\narray\r\n  'nonexistant' => \r\n    array\r\n      'notation' => string 'passthrou' (length=9)\r\n\r\n$map->setPath($element2, \"new[path][forElement2]\");\r\n\r\nvar_dump($value = $map->appendValue($element2, array(\"valueFor\" => \"Element2\")));\r\n\r\narray\r\n  'new' => \r\n    array\r\n      'path' => \r\n        array\r\n          'forElement2' => \r\n            array\r\n              'element2' => \r\n                array\r\n                  'valueFor' => string 'Element2' (length=8)\r\n\r\n\r\nvar_dump($map->replaceInto($element2, $value, array(\"valueFor\" => \"NewValue\",\r\n                                                    \"newValueFor\" => \"Element2\")));\r\n\r\narray\r\n  'new' => \r\n    array\r\n      'path' => \r\n        array\r\n          'forElement2' => \r\n            array\r\n              'element2' => \r\n                array\r\n                  'valueFor' => string 'NewValue' (length=8)\r\n                  'newValueFor' => string 'Element2' (length=8)\r\n{code}"
        },
        "priority": {
            "name": "priority",
            "type": "com.atlassian.jira.issue.priority.Priority",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/priority\/4",
                "name": "Minor"
            }
        },
        "duedate": {
            "name": "duedate",
            "type": "java.util.Date"
        },
        "customfield_10022": {
            "name": "Fix Version Priority",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:select"
        },
        "watcher": {
            "name": "watcher",
            "type": "watcher",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-9516\/watchers",
                "isWatching": false,
                "watchCount": 1
            }
        },
        "worklog": {
            "name": "worklog",
            "type": "worklog",
            "value": [

            ]
        },
        "status": {
            "name": "status",
            "type": "com.atlassian.jira.issue.status.Status",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/status\/1",
                "name": "Open"
            }
        },
        "labels": {
            "name": "labels",
            "type": "com.atlassian.jira.issue.label.Label",
            "value": [

            ]
        },
        "assignee": {
            "name": "assignee",
            "type": "com.opensymphony.user.User"
        },
        "links": {
            "name": "links",
            "type": "issuelinks",
            "value": [

            ]
        },
        "attachment": {
            "name": "attachment",
            "type": "attachment",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/attachment\/12966",
                    "filename": "AnotherApproach_Notary.php",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=alab",
                        "name": "alab",
                        "displayName": "Christian Albrecht",
                        "active": true
                    },
                    "created": "2010-03-31T02:43:24.000+0000",
                    "size": 8577,
                    "mimeType": "application\/x-php",
                    "content": "http:\/\/fw02.zend.com\/issues\/secure\/attachment\/12966\/AnotherApproach_Notary.php"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/attachment\/12948",
                    "filename": "ArrayNotation.php",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=alab",
                        "name": "alab",
                        "displayName": "Christian Albrecht",
                        "active": true
                    },
                    "created": "2010-03-23T10:06:50.000+0000",
                    "size": 16226,
                    "mimeType": "application\/x-php",
                    "content": "http:\/\/fw02.zend.com\/issues\/secure\/attachment\/12948\/ArrayNotation.php"
                }
            ]
        },
        "sub-tasks": {
            "name": "sub-tasks",
            "type": "issuelinks",
            "value": [

            ]
        },
        "versions": {
            "name": "versions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [

            ]
        },
        "project": {
            "name": "project",
            "type": "com.atlassian.jira.project.Project",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/project\/ZF",
                "key": "ZF",
                "name": "Zend Framework",
                "roles": {

                }
            }
        },
        "components": {
            "name": "components",
            "type": "com.atlassian.jira.bc.project.component.ProjectComponent",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/component\/10029",
                    "id": 10029,
                    "name": "Zend_Form",
                    "isAssigneeTypeValid": false
                }
            ]
        },
        "comment": {
            "name": "comment",
            "type": "com.atlassian.jira.issue.fields.CommentSystemField",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/39611",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=alab",
                        "name": "alab",
                        "displayName": "Christian Albrecht",
                        "active": true
                    },
                    "body": "I read somewhere in the Tracker \"no more Singletons\", so i refactor the Class\r\nto use Zend_Registry now.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=alab",
                        "name": "alab",
                        "displayName": "Christian Albrecht",
                        "active": true
                    },
                    "created": "2010-03-28T06:03:39.000+0000",
                    "updated": "2010-03-28T06:03:39.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/39625",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=alab",
                        "name": "alab",
                        "displayName": "Christian Albrecht",
                        "active": true
                    },
                    "body": "Another Approach using Zend_Registry, well, this is untested though.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=alab",
                        "name": "alab",
                        "displayName": "Christian Albrecht",
                        "active": true
                    },
                    "created": "2010-03-29T01:48:21.000+0000",
                    "updated": "2010-03-29T01:48:21.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/39668",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=alab",
                        "name": "alab",
                        "displayName": "Christian Albrecht",
                        "active": true
                    },
                    "body": "Updated AnotherApproach_Notary, this is really exciting for me, as everything fits together plus it is complex but not complicated.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=alab",
                        "name": "alab",
                        "displayName": "Christian Albrecht",
                        "active": true
                    },
                    "created": "2010-03-31T02:43:33.000+0000",
                    "updated": "2010-03-31T02:43:33.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/39669",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=alab",
                        "name": "alab",
                        "displayName": "Christian Albrecht",
                        "active": true
                    },
                    "body": "This is the new Approach, the description above is a bit outdated now, but the consept is similar\r\n{code}\r\n<?php\r\n\r\nclass Zend_Form_Notary\r\n{\r\n    protected $_registryName = 'FormNotary';\r\n\r\n    protected $_array;\r\n    protected $_items;\r\n    protected $_btree;\r\n    protected $_index;\r\n\r\n    protected $_ident;\r\n\r\n    public function __construct()\r\n    {\r\n        if (!Zend_Registry::isRegistered($this->_registryName)) {\r\n            $this->_setupArray();\r\n        }\r\n        $this->_loadArray()\r\n             ->_generateIdent();\r\n    }\r\n\r\n    protected function _setupArray()\r\n    {\r\n        $this->_array = array('items' => array('#0' => array()),\r\n                              'btree' => array('#0', '#0'),\r\n                              'index' => array());\r\n\r\n        return $this->_saveArray();\r\n    }    \r\n\r\n    protected function _generateIdent()\r\n    {\r\n        end($this->_items);\r\n        $this->_ident = '#' . (ltrim(key($this->_items), '#') + 1);\r\n        $this->_array['items'][$this->_ident] = array();\r\n        return $this;\r\n    }\r\n\r\n    protected function _loadArray()\r\n    {\r\n        $this->_array = Zend_Registry::get($this->_registryName);\r\n        $this->_items =& $this->_array['items'];\r\n        $this->_btree =& $this->_array['btree'];\r\n        $this->_index =& $this->_array['index'];\r\n        return $this;\r\n    }\r\n\r\n    protected function _saveArray()\r\n    {\r\n        Zend_Registry::set($this->_registryName, $this->_array);\r\n        return $this;\r\n    }\r\n\r\n    public function getIdent()\r\n    {\r\n        return $this->_ident;\r\n    }\r\n\r\n    public function isIdent($ident)\r\n    {\r\n        $this->_loadArray();\r\n        if (array_key_exists($ident, $this->_items)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    protected function _ensureIdent($ident)\r\n    {\r\n        if (null === $ident) {\r\n            $this->_loadArray();\r\n            return $this->_ident;\r\n        }\r\n        if (!$this->isIdent($ident)) {\r\n            throw new Zend_Form_Exception(\"Nonexistant Ident '$ident'\");\r\n        }\r\n        return $ident;\r\n    }\r\n\r\n    public function setProperty($key, $value, $forIdent = null)\r\n    {\r\n        $this->_setProperty($key, $value, $this->_ensureIdent($forIdent));\r\n        $this->_saveArray();\r\n    }\r\n\r\n    public function setProperties($properties, $forIdent = null)\r\n    {\r\n        $ident = $this->_ensureIdent($forIdent);\r\n        foreach ($properties as $key => $value) {\r\n            $this->_setProperty($key, $value, $ident);\r\n        }\r\n        $this->_saveArray();\r\n    }\r\n\r\n    protected function _setProperty($key, $value, $ident)\r\n    {\r\n        if (3 == func_num_args()) {\r\n            $value = $this->normalize($key, $value);\r\n        }\r\n        $this->_items[$ident][$key] = $value;\r\n        if (!isset($this->_index[$key])) {\r\n            $this->_index[$key] = array();\r\n        }\r\n        $this->_index[$key][$ident] =& $this->_items[$ident][$key];\r\n        return $this;\r\n    }\r\n\r\n    public function getProperty($key, $fromIdent = null)\r\n    {\r\n        $key   = (string)$key;\r\n        $ident = $this->_ensureIdent($fromIdent);\r\n        return $this->prepare($key, $this->_getProperties($key, $ident), null);\r\n    }\r\n\r\n    public function getProperties($keys = null, $fromIdent = null)\r\n    {\r\n        $array = array();\r\n        $ident = $this->_ensureIdent($fromIdent);\r\n        foreach ($this->_getProperties($keys, $ident, true) as $key => $val) {\r\n            $array[$key] = $this->prepare($key, $val, null);\r\n        }\r\n        return $array;\r\n    }\r\n\r\n    protected function _getProperties($key, $ident, $returnArray = false)\r\n    {\r\n        $keys = $this->_filterPropertyKeys($key);\r\n        if (!empty($keys)) {\r\n            if (true === $returnArray) {\r\n                return array_intersect_key($this->_items[$ident], $keys);\r\n            } else {\r\n                return array_shift(array_intersect_key($this->_items[$ident],\r\n                                                       $keys)));\r\n            }\r\n        } \r\n        return (true === $returnArray ? array() : null);\r\n    }\r\n\r\n    protected function _filterPropertyKeys($keys)\r\n    {\r\n        $ret = array();\r\n        if (null === $key) {\r\n            $ret = array_keys($this->_index);\r\n        } else if (is_scalar($keys)) {\r\n            $ret = array_intersect_key($this->_index, array($keys));\r\n        } else if (is_array($keys)) {\r\n            $ret = array_intersect_key($this->_index, $keys);\r\n        }\r\n        return $ret;\r\n    }\r\n\r\n    public function prepare($key, $value)\r\n    {\r\n        $prepare = 'prepare' . ucfirst($key);\r\n        if (method_exists($this, $prepare)) {\r\n            switch (func_num_args()) {\r\n                case 3 :\r\n                    return $this->$prepare($value, null);\r\n                    break;\r\n                default :\r\n                    return $this->$prepare($value);\r\n                    break;\r\n            }\r\n        }\r\n        return $value;\r\n    }\r\n\r\n    public function prepareNotation($notation)\r\n    {\r\n        if (1 == func_num_args()) {\r\n            $notation = $this->normalizeNotation($notation);\r\n        }\r\n        if (empty($segments = explode('\/', $notation))) {\r\n            return strtr($notation, '#', '');\r\n        }\r\n        $notation = array_shift($segments);\r\n        if (count($segments)) {\r\n            $notation .= '[' . join('][', $segments) . ']';\r\n        }\r\n        return strtr($notation, '#', '');\r\n    }\r\n\r\n    public function normalize($key, $value)\r\n    {\r\n        $normalize = 'normalize' . ucfirst($key);\r\n        if (method_exists($this, $normalize)) {\r\n            return $this->$normalize($value);\r\n        }\r\n        return $value;\r\n    }\r\n\r\n    public function normalizeNotation($notation)\r\n    {\r\n        $notation = str_replace('[]','\/#\/', $notation);\r\n        return trim(strtr($notation, array('[' => '\/', ']' => '')), '\/');\r\n    }\r\n\r\n    public function getChilds($parent = null)\r\n    {\r\n        $parent = $this->_ensureIdent($parent);\r\n        list($l, $r) = array_keys($this->_btree, $parent);\r\n        $offsprings  = array_slice($this->_btree, $l+1, $r-$l);\r\n\r\n        $childs = array();\r\n        $child  = null;\r\n\r\n        while (false !== ($current = current($offsprings))) {\r\n            if (null === $child) {\r\n                $childs[] = $child = $current;\r\n            } else if ($child === $current) {\r\n                $child = null;\r\n            }\r\n            next($offsprings);\r\n        }\r\n        if (empty($childs)) {\r\n            return null;\r\n        }\r\n        return $childs;\r\n    }\r\n\r\n    public function getChildsByProperty($value, $filterKey = null, $fromIdent = null)\r\n    {\r\n        return $this->_filterIdents((array)$this->getChilds($fromIdent),\r\n                                    $filterKey, $value);\r\n    }\r\n\r\n    public function getAncestors($ancestor = '#0', $offspring = null, $slice = null)\r\n    {\r\n        $offspring = $this->_ensureIdent($offspring);\r\n\r\n        $idents = array();\r\n        if ($this->isIdent($ancestor)) {\r\n            $idents = $this->_ancestorsSeek($ancestor, $offspring);\r\n        }\r\n        if (!empty($idents)) {\r\n            if (null !== $slice) {\r\n                return array_slice($idents, $slice);\r\n            }\r\n            return $idents;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    protected function _ancestorsSeek($ancestor, $offspring)\r\n    {\r\n        \/\/ outer bounds\r\n        list($ol, $or) = array_keys($this->_btree, $ancestor, true);\r\n        \/\/ inner bounds\r\n        list($il, $ir) = array_keys($this->_btree, $offspring, true);\r\n\r\n        return array_intersect(array_slice($this->_btree, $ol, $il-$ol+1),\r\n                               array_slice($this->_btree, $ir, $or-$ir+1));\r\n    }\r\n\r\n    public function getIdentsByProperty($value, $filterKey = null)\r\n    {\r\n        $this->_loadArray();\r\n        return $this->_filterIdents(array_keys($this->_items),\r\n                                    $filterKey, $value);\r\n    }\r\n\r\n    protected function _filterIdents($idents, $keys, $value)\r\n    {\r\n        $keys  = $this->_filterPropertyKeys($keys);\r\n        $array = array();\r\n        foreach ($idents as $ident) {\r\n            foreach (array_intersect_key($this->_items[$ident], $keys) as $pk => $pv) {\r\n                if ($this->equals($pk, $pv, $value)) {\r\n                    $array[] = $ident;\r\n                }\r\n            }\r\n        }\r\n        if (empty($array)) {\r\n            return null;\r\n        }\r\n        return $array;\r\n    }\r\n\r\n    public function equals($propKey, $propVal, $value)\r\n    {\r\n        $equal = 'equals' . ucfirst($propKey);\r\n        if (method_exists($this, $equal)) {\r\n            return $this->$equal($propVal, $value);\r\n        }\r\n        return ($propVal == $value);\r\n    }\r\n\r\n    public function equalsNotation($str1, $str2)\r\n    {\r\n        $str1 = rtrim($this->normalizeNotation($str1), '\/#');\r\n        $str2 = rtrim($this->normalizeNotation($str2), '\/#');\r\n        return ($str1 === $str2);\r\n    }\r\n}\r\n{code}",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=alab",
                        "name": "alab",
                        "displayName": "Christian Albrecht",
                        "active": true
                    },
                    "created": "2010-03-31T02:55:37.000+0000",
                    "updated": "2010-03-31T02:55:37.000+0000"
                }
            ]
        }
    },
    "transitions": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-9516\/transitions"
}