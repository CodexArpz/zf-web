{
    "expand": "html",
    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-10874",
    "key": "ZF-10874",
    "fields": {
        "summary": {
            "name": "summary",
            "type": "java.lang.String",
            "value": "Add multi get support ( exemple, for memcached )"
        },
        "timetracking": {
            "name": "timetracking",
            "type": "com.atlassian.jira.issue.fields.TimeTrackingSystemField"
        },
        "issuetype": {
            "name": "issuetype",
            "type": "com.atlassian.jira.issue.issuetype.IssueType",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issueType\/4",
                "name": "Improvement",
                "subtask": false
            }
        },
        "votes": {
            "name": "votes",
            "type": "com.atlassian.jira.issue.fields.VotesSystemField",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-10874\/votes",
                "votes": 0,
                "hasVoted": false
            }
        },
        "security": {
            "name": "security",
            "type": "com.atlassian.jira.issue.security.IssueSecurityLevel"
        },
        "resolution": {
            "name": "resolution",
            "type": "com.atlassian.jira.issue.resolution.Resolution",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/resolution\/2",
                "name": "Won't Fix"
            }
        },
        "fixVersions": {
            "name": "fixVersions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/version\/10160",
                    "id": 10160,
                    "description": "Major Release",
                    "name": "Next Major Release",
                    "archived": false,
                    "released": false
                }
            ]
        },
        "resolutiondate": {
            "name": "resolutiondate",
            "type": "java.util.Date",
            "value": "2012-01-09T19:29:14.000+0000"
        },
        "reporter": {
            "name": "reporter",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=newage",
                "name": "newage",
                "displayName": "Francesco Capponi",
                "active": true
            }
        },
        "created": {
            "name": "created",
            "type": "java.util.Date",
            "value": "2010-12-28T07:42:54.000+0000"
        },
        "updated": {
            "name": "updated",
            "type": "java.util.Date",
            "value": "2012-01-09T19:29:14.000+0000"
        },
        "customfield_10041": {
            "name": "Tags",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:labels"
        },
        "description": {
            "name": "description",
            "type": "java.lang.String",
            "value": "I think ZF should add multi get support for memcached ( included at the version 1.4 of memcache package http:\/\/pecl.php.net\/package-changelog.php?package=memcache , http:\/\/it.php.net\/manual\/en\/memcache.get.php )\r\n\r\nCore.php in Cache\r\n{code:php}\r\n     \/**\r\n     * Test if a cache is available for the given id and (if yes) return it (false else)\r\n     *\r\n     * @param  string  $id                     Cache id\r\n     * @param  boolean $doNotTestCacheValidity If set to true, the cache validity won't be tested\r\n     * @param  boolean $doNotUnserialize       Do not serialize (even if automatic_serialization is true) => for internal use\r\n     * @return mixed|false Cached datas\r\n     *\/\r\n    public function load($id, $doNotTestCacheValidity = false, $doNotUnserialize = false)\r\n    {\r\n        if (!$this->_options['caching']) {\r\n            return false;\r\n        }\r\n        $id = $this->_id($id); \/\/ cache id may need prefix\r\n        $this->_lastId = $id;\r\n        self::_validateIdOrTag($id);\r\n        $data = $this->_backend->load($id, $doNotTestCacheValidity);\r\n        if ($data===false) {\r\n            \/\/ no cache available\r\n            return false;\r\n        }\r\n        if ((!$doNotUnserialize) && $this->_options['automatic_serialization']) {\r\n            \/\/ we need to unserialize before sending the result\r\n            return unserialize($data);\r\n        }\r\n        return $data;\r\n    }\r\n{code} \r\n\r\nTO:\r\n\r\n{code:php}\r\n     \/**\r\n     * Test if a cache is available for the given id and (if yes) return it (false else)\r\n     *\r\n     * @param  string|array $id                Cache id or Array of Cache id\r\n     * @param  boolean $doNotTestCacheValidity If set to true, the cache validity won't be tested\r\n     * @param  boolean $doNotUnserialize       Do not serialize (even if automatic_serialization is true) => for internal use\r\n     * @return mixed|array|false Cached datas\r\n     *\/\r\n    public function load($id, $doNotTestCacheValidity = false, $doNotUnserialize = false)\r\n    {\r\n        if (!$this->_options['caching']) {\r\n            return false;\r\n        }\r\n        if(!is_array($id)){\r\n            $id = $this->_id($id); \/\/ cache id may need prefix\r\n            $this->_lastId = $id;\r\n            self::_validateIdOrTag($id);\r\n            $data = $this->_backend->load($id, $doNotTestCacheValidity);\r\n            if ($data===false) {\r\n                \/\/ no cache available\r\n                return false;\r\n            }\r\n            if ((!$doNotUnserialize) && $this->_options['automatic_serialization']) {\r\n                \/\/ we need to unserialize before sending the result\r\n                return unserialize($data);\r\n            }\r\n        }else{\r\n            $ids = $id\r\n            $this->_lastId = end($ids);\r\n            foreach($ids as &$id){\r\n                $id = $this->_id($id); \/\/ cache id may need prefix\r\n                self::_validateIdOrTag($id);\r\n            }\r\n            $data = $this->_backend->load($ids, $doNotTestCacheValidity);\r\n            if ($data===false) {\r\n                \/\/ no cache available\r\n                return false;\r\n            }\r\n            if ((!$doNotUnserialize) && $this->_options['automatic_serialization']) {\r\n                foreach($data as &$row){                \r\n                    \/\/ we need to unserialize before sending the result\r\n                    $row = unserialize($row);\r\n                }\r\n            }\r\n        }\r\n        return $data;\r\n    }\r\n{code} \r\n\r\n\r\nMemcache.php\r\n\r\n{code:php}\r\n\r\n     \/**\r\n     * Test if a cache is available for the given id and (if yes) return it (false else)\r\n     *\r\n     * @param  string  $id                     Cache id\r\n     * @param  boolean $doNotTestCacheValidity If set to true, the cache validity won't be tested\r\n     * @return string|false cached datas\r\n     *\/\r\n    public function load($id, $doNotTestCacheValidity = false)\r\n    {\r\n        $tmp = $this->_memcache->get($id);\r\n        if (is_array($tmp) && isset($tmp[0])) {\r\n            return $tmp[0];\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n{code}\r\n\r\nonly wiki to change\r\nTO:\r\n\r\n{code:php}\r\n\r\n     \/**\r\n     * Test if a cache is available for the given id and (if yes) return it (false else)\r\n     * Now it supports also array of id\r\n     * @param  string|array  $id    Cache id or an array of them\r\n     * @param  boolean $doNotTestCacheValidity If set to true, the cache validity won't be tested\r\n     * @return string|array|false cached datas\r\n     *\/\r\n    public function load($id, $doNotTestCacheValidity = false)\r\n    {\r\n        $tmp = $this->_memcache->get($id);\r\n        if (is_array($tmp) && isset($tmp[0])) {return $tmp[0];\r\n            \r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n{code}\r\n\r\n\r\nfor other cache engines that doesn't suppor by default multiget I think should be simply so:\r\n\r\nApc.php\r\n{code:php}\r\n\r\n    \/**\r\n     * Test if a cache is available for the given id and (if yes) return it (false else)\r\n     *\r\n     * WARNING $doNotTestCacheValidity=true is unsupported by the Apc backend\r\n     *\r\n     * @param  string  $id                     cache id\r\n     * @param  boolean $doNotTestCacheValidity if set to true, the cache validity won't be tested\r\n     * @return string cached datas (or false)\r\n     *\/\r\n    public function load($id, $doNotTestCacheValidity = false)\r\n    {\r\n        $tmp = apc_fetch($id);\r\n        if (is_array($tmp)) {\r\n            return $tmp[0];\r\n        }\r\n        return false;\r\n    }\r\n\r\n{code}\r\n\r\nTO:\r\n\r\n{code:php}\r\n\r\n    public _last_notFound = array();\r\n    \/**\r\n     * Test if a cache is available for the given id and (if yes) return it (false else)\r\n     * Now it supports also array of id\r\n     * WARNING $doNotTestCacheValidity=true is unsupported by the Apc backend\r\n     *\r\n     * @param  string|array  $id    Cache id or an array of them\r\n     * @param  boolean $doNotTestCacheValidity If set to true, the cache validity won't be tested\r\n     * @return string|array|false cached datas\r\n     *\/\r\n    public function load($id, $doNotTestCacheValidity = false)\r\n    {\r\n        \r\n        if(!is_array($id){\r\n            $tmp = apc_fetch($id);\r\n            if (is_array($tmp)) {\r\n                return $tmp[0];\r\n            }\r\n        }else{\r\n            $this->_last_not_Found = array()\r\n            $ids = $id;\r\n            $results = array()\r\n            foreach($ids as $id){\r\n                $tmp = apc_fetch($id);\r\n                if (is_array($tmp)) {\r\n                    array_push($results,$tmp[0]);\r\n                }else{\r\n                    array_push($this->_last_not_Found,$id);\r\n                }\r\n            }\r\n            if(!empty($results)){\r\n                return $results;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n{code}\r\n\r\n\r\nI hope I haven't made mistakes in writing and I hope there will be this improvement in next release, thanks"
        },
        "priority": {
            "name": "priority",
            "type": "com.atlassian.jira.issue.priority.Priority",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/priority\/3",
                "name": "Major"
            }
        },
        "duedate": {
            "name": "duedate",
            "type": "java.util.Date"
        },
        "customfield_10022": {
            "name": "Fix Version Priority",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:select"
        },
        "watcher": {
            "name": "watcher",
            "type": "watcher",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-10874\/watchers",
                "isWatching": false,
                "watchCount": 0
            }
        },
        "worklog": {
            "name": "worklog",
            "type": "worklog",
            "value": [

            ]
        },
        "status": {
            "name": "status",
            "type": "com.atlassian.jira.issue.status.Status",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/status\/6",
                "name": "Closed"
            }
        },
        "labels": {
            "name": "labels",
            "type": "com.atlassian.jira.issue.label.Label",
            "value": [

            ]
        },
        "assignee": {
            "name": "assignee",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=mabe",
                "name": "mabe",
                "displayName": "Marc Bennewitz (private)",
                "active": true
            }
        },
        "links": {
            "name": "links",
            "type": "issuelinks",
            "value": [
                {
                    "issueKey": "ZF-9869",
                    "issue": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-9869",
                    "type": {
                        "name": "Duplicate",
                        "direction": "OUTBOUND",
                        "description": "duplicates"
                    }
                }
            ]
        },
        "attachment": {
            "name": "attachment",
            "type": "attachment",
            "value": [

            ]
        },
        "sub-tasks": {
            "name": "sub-tasks",
            "type": "issuelinks",
            "value": [

            ]
        },
        "versions": {
            "name": "versions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [

            ]
        },
        "project": {
            "name": "project",
            "type": "com.atlassian.jira.project.Project",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/project\/ZF",
                "key": "ZF",
                "name": "Zend Framework",
                "roles": {

                }
            }
        },
        "components": {
            "name": "components",
            "type": "com.atlassian.jira.bc.project.component.ProjectComponent",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/component\/10028",
                    "id": 10028,
                    "name": "Zend_Cache",
                    "isAssigneeTypeValid": false
                }
            ]
        },
        "comment": {
            "name": "comment",
            "type": "com.atlassian.jira.issue.fields.CommentSystemField",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/43834",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=mabe",
                        "name": "mabe",
                        "displayName": "Marc Bennewitz (private)",
                        "active": true
                    },
                    "body": "this will be implemented in zf 2",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=mabe",
                        "name": "mabe",
                        "displayName": "Marc Bennewitz (private)",
                        "active": true
                    },
                    "created": "2010-12-28T12:22:42.000+0000",
                    "updated": "2010-12-28T12:22:42.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/49451",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=mabe",
                        "name": "mabe",
                        "displayName": "Marc Bennewitz (private)",
                        "active": true
                    },
                    "body": "this issue won't be fixed in ZF1\r\n-> fixed in ZF2-134",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=mabe",
                        "name": "mabe",
                        "displayName": "Marc Bennewitz (private)",
                        "active": true
                    },
                    "created": "2012-01-09T19:29:14.000+0000",
                    "updated": "2012-01-09T19:29:14.000+0000"
                }
            ]
        }
    },
    "transitions": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-10874\/transitions"
}