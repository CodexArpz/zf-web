{
    "expand": "html",
    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-2452",
    "key": "ZF-2452",
    "fields": {
        "summary": {
            "name": "summary",
            "type": "java.lang.String",
            "value": "Remove map and revese in Zend_Controller_Router_Route_Regex"
        },
        "timetracking": {
            "name": "timetracking",
            "type": "com.atlassian.jira.issue.fields.TimeTrackingSystemField"
        },
        "issuetype": {
            "name": "issuetype",
            "type": "com.atlassian.jira.issue.issuetype.IssueType",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issueType\/4",
                "name": "Improvement",
                "subtask": false
            }
        },
        "votes": {
            "name": "votes",
            "type": "com.atlassian.jira.issue.fields.VotesSystemField",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-2452\/votes",
                "votes": 1,
                "hasVoted": false
            }
        },
        "security": {
            "name": "security",
            "type": "com.atlassian.jira.issue.security.IssueSecurityLevel"
        },
        "resolution": {
            "name": "resolution",
            "type": "com.atlassian.jira.issue.resolution.Resolution",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/resolution\/2",
                "name": "Won't Fix"
            }
        },
        "fixVersions": {
            "name": "fixVersions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [

            ]
        },
        "resolutiondate": {
            "name": "resolutiondate",
            "type": "java.util.Date",
            "value": "2008-04-22T12:37:24.000+0000"
        },
        "reporter": {
            "name": "reporter",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=alienbrain",
                "name": "alienbrain",
                "displayName": "Amr Mostafa",
                "active": true
            }
        },
        "created": {
            "name": "created",
            "type": "java.util.Date",
            "value": "2008-01-18T03:14:45.000+0000"
        },
        "updated": {
            "name": "updated",
            "type": "java.util.Date",
            "value": "2008-04-22T12:37:24.000+0000"
        },
        "customfield_10041": {
            "name": "Tags",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:labels"
        },
        "description": {
            "name": "description",
            "type": "java.lang.String",
            "value": "I've quickly tested and it seems that the need for specifying mappings for Regex Routes could be eliminated in favor of named subpatterns\/groups as described: http:\/\/www.php.net\/manual\/en\/reference.pcre.pattern.syntax.php\n\nDoing the reverse i.e. assemble(), is more challenging though. Haven't got my head around any good ideas."
        },
        "priority": {
            "name": "priority",
            "type": "com.atlassian.jira.issue.priority.Priority",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/priority\/4",
                "name": "Minor"
            }
        },
        "duedate": {
            "name": "duedate",
            "type": "java.util.Date"
        },
        "customfield_10022": {
            "name": "Fix Version Priority",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:select"
        },
        "watcher": {
            "name": "watcher",
            "type": "watcher",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-2452\/watchers",
                "isWatching": false,
                "watchCount": 2
            }
        },
        "worklog": {
            "name": "worklog",
            "type": "worklog",
            "value": [

            ]
        },
        "status": {
            "name": "status",
            "type": "com.atlassian.jira.issue.status.Status",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/status\/5",
                "name": "Resolved"
            }
        },
        "labels": {
            "name": "labels",
            "type": "com.atlassian.jira.issue.label.Label",
            "value": [

            ]
        },
        "assignee": {
            "name": "assignee",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=martel",
                "name": "martel",
                "displayName": "Michal Minicki",
                "active": true
            }
        },
        "links": {
            "name": "links",
            "type": "issuelinks",
            "value": [

            ]
        },
        "attachment": {
            "name": "attachment",
            "type": "attachment",
            "value": [

            ]
        },
        "sub-tasks": {
            "name": "sub-tasks",
            "type": "issuelinks",
            "value": [

            ]
        },
        "versions": {
            "name": "versions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [

            ]
        },
        "project": {
            "name": "project",
            "type": "com.atlassian.jira.project.Project",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/project\/ZF",
                "key": "ZF",
                "name": "Zend Framework",
                "roles": {

                }
            }
        },
        "components": {
            "name": "components",
            "type": "com.atlassian.jira.bc.project.component.ProjectComponent",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/component\/10011",
                    "id": 10011,
                    "name": "Zend_Controller",
                    "description": "front controller, including router and dispatcher",
                    "isAssigneeTypeValid": false
                }
            ]
        },
        "comment": {
            "name": "comment",
            "type": "com.atlassian.jira.issue.fields.CommentSystemField",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/19719",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=oximoron",
                        "name": "oximoron",
                        "displayName": "Harro van der Klauw",
                        "active": true
                    },
                    "body": "I like it, and I think assemble won't be that hard..\n\n{code:none|title='Example from the reference guide, with changes'}\n$route = new Zend_Controller_Router_Route_Regex(\n    'blog\/archive\/(?<id>\\d+)-(?<description>.+)\\.html',\n    array(\n        'controller' => 'blog',\n        'action'     => 'view'\n    ),    \n    'blog\/archive\/:id-:description.html'\n);\n$router->addRoute('blogArchive', $route);\n{code}\n\nI think would work I think..\n\n\n\n\n\n\n",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=oximoron",
                        "name": "oximoron",
                        "displayName": "Harro van der Klauw",
                        "active": true
                    },
                    "created": "2008-03-07T03:00:12.000+0000",
                    "updated": "2008-03-07T03:00:12.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/19720",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=oximoron",
                        "name": "oximoron",
                        "displayName": "Harro van der Klauw",
                        "active": true
                    },
                    "body": "Oops..  forgot the P in there\n\n{code:none}\n'blog\/archive\/(?P<id>\\d+)-(?P<description>.+)\\.html',\n{code}",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=oximoron",
                        "name": "oximoron",
                        "displayName": "Harro van der Klauw",
                        "active": true
                    },
                    "created": "2008-03-07T03:14:01.000+0000",
                    "updated": "2008-03-07T03:14:01.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/19725",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=alienbrain",
                        "name": "alienbrain",
                        "displayName": "Amr Mostafa",
                        "active": true
                    },
                    "body": "Let's drop auto assembling. I've actually worked on this issue for some time. Got it pretty far. Assembling works *only* if all the the regex in the url is grouped. For example, the route you provided above, it will work. Both mapping and assembling. Because the regex is only capturing parameters. You are capturing id and description which are grouped in parenthesis. So they can be easily captured and assembled back.\n\nBut take a URL that has some regex which is not grouped. Like: 'archive\/year\/\\d*\\d*(?P<year>\\d\\d)'\nHere we are capturing a year, 2 digits but also allowing 4 digits. If we are to assemble back with array('year' => '08'), the result will be: 'archive\/year\/\\d*\\d*08'\n\nHow can we assemble back but not exclude any regex, grouped or non grouped? i.e. How can you tell which parts of the pattern is the actual url and which parts are the regex :)\n\nSo my suggestion would be to eliminate the need for mapping array for now, it seems straightforward and wasn't hard to implement. I hope I didn't dump the patch I was working on in a night of frustration with assembling, please let me know if you are interested in it! :)\n\n",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=alienbrain",
                        "name": "alienbrain",
                        "displayName": "Amr Mostafa",
                        "active": true
                    },
                    "created": "2008-03-07T09:25:47.000+0000",
                    "updated": "2008-03-07T09:25:47.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/19961",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=oximoron",
                        "name": "oximoron",
                        "displayName": "Harro van der Klauw",
                        "active": true
                    },
                    "body": "_'archive\/year\/\\d*\\d*(?P<year>\\d\\d)'_\n\nWould allow _'\/archive\/year\/1000321048342342308'_ and only catch _08_ so you could leave out one of the _\\d*_'s\n\n\nYou would still need to define the reverse, there's no way around it. But you would define it as _'\/archive\/year\/:year'_\n\nThe reverse routing is used for finding on what url something is approachable.\n\nSo if I would want to get the url for this I would call it with _'year' = '08'_ or _'year' = '2008'_ and it would give me _'\/archive\/year\/08'_ or _'\/archive\/year\/2008'_ which will both work.\n\nSo yeah.. dropping the map alone would be great, and I agree that you can't drop the reverse bit, but that isn't so bad. \n",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=oximoron",
                        "name": "oximoron",
                        "displayName": "Harro van der Klauw",
                        "active": true
                    },
                    "created": "2008-03-17T04:48:03.000+0000",
                    "updated": "2008-03-17T04:48:03.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/20274",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=wil",
                        "name": "wil",
                        "displayName": "Wil Sinclair",
                        "active": true
                    },
                    "body": "Please categorize\/fix as needed.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=wil",
                        "name": "wil",
                        "displayName": "Wil Sinclair",
                        "active": true
                    },
                    "created": "2008-03-25T20:41:12.000+0000",
                    "updated": "2008-03-25T20:41:12.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/21304",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                        "name": "matthew",
                        "displayName": "Matthew Weier O'Phinney",
                        "active": true
                    },
                    "body": "Assigning to Martel to evaluate.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                        "name": "matthew",
                        "displayName": "Matthew Weier O'Phinney",
                        "active": true
                    },
                    "created": "2008-04-22T11:04:11.000+0000",
                    "updated": "2008-04-22T11:04:11.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/21364",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=martel",
                        "name": "martel",
                        "displayName": "Michal Minicki",
                        "active": true
                    },
                    "body": "Before I begin - I have designed regex route prototype using named parameters. Then I had to drop it for a technical reason - see tests testNamedVariableMatch() and testMappedVariableWithNamedSubpattern() in the Regex Route tests. I can't remember the exact reason at the moment but it was definitely there - it may or may not be connected to the assemble problem. \n\nNow, there are couple of issues here, Amr:\n\n1. You can't drop assembling feature because it would make different types of routes unswappable. It means that one view could render one type of current route and not the other. Not to mention a BC break.\n\n2. Mapping is similar to standard route class in order to make it more intuitive. Named parameters will make even the simplest regex a bit complicated and less readable. \n\nThe bottom line is - it's not worth the effort. \n\nBut in case you have a strong motivation, please suggest a solution and provide a patch - I will evaluate it. But keep in mind one can use named and anonymous subpatterns in one regular expression pattern - you will have two copies of the same parameter after the match and you have to drop one in order to get a correct parameter count . Then you have to keep the feature to map parameters through a map (second route param) as well as named parameters. And the map has to be \"stronger\". \n\nFurthermore, keep the solution as lightweight as possible - regex routes were introduced as lighter cousins to standard routes - so it can't end up performing poorer than the standard route. ",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=martel",
                        "name": "martel",
                        "displayName": "Michal Minicki",
                        "active": true
                    },
                    "created": "2008-04-22T12:37:24.000+0000",
                    "updated": "2008-04-22T12:37:24.000+0000"
                }
            ]
        }
    },
    "transitions": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-2452\/transitions"
}