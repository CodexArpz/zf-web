{
    "expand": "html",
    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-391",
    "key": "ZF-391",
    "fields": {
        "summary": {
            "name": "summary",
            "type": "java.lang.String",
            "value": "Zend_Locale_Format::getNumber() returns wrong results"
        },
        "timetracking": {
            "name": "timetracking",
            "type": "com.atlassian.jira.issue.fields.TimeTrackingSystemField"
        },
        "issuetype": {
            "name": "issuetype",
            "type": "com.atlassian.jira.issue.issuetype.IssueType",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/issueType\/1",
                "name": "Bug",
                "subtask": false
            }
        },
        "votes": {
            "name": "votes",
            "type": "com.atlassian.jira.issue.fields.VotesSystemField",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-391\/votes",
                "votes": 0,
                "hasVoted": false
            }
        },
        "security": {
            "name": "security",
            "type": "com.atlassian.jira.issue.security.IssueSecurityLevel"
        },
        "resolution": {
            "name": "resolution",
            "type": "com.atlassian.jira.issue.resolution.Resolution",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/resolution\/1",
                "name": "Fixed"
            }
        },
        "fixVersions": {
            "name": "fixVersions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/version\/10002",
                    "id": 10002,
                    "description": "Preview Release; MVC refactoring and other enhancements and fixes",
                    "name": "0.2.0",
                    "userReleaseDate": "29\/Oct\/06",
                    "archived": true,
                    "releaseDate": "2006-10-29",
                    "released": true
                }
            ]
        },
        "resolutiondate": {
            "name": "resolutiondate",
            "type": "java.util.Date",
            "value": "2006-09-22T01:16:03.000+0000"
        },
        "reporter": {
            "name": "reporter",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=felix",
                "name": "felix",
                "displayName": "Gunar Scholz",
                "active": true
            }
        },
        "created": {
            "name": "created",
            "type": "java.util.Date",
            "value": "2006-09-21T03:45:54.000+0000"
        },
        "updated": {
            "name": "updated",
            "type": "java.util.Date",
            "value": "2007-07-05T14:43:21.000+0000"
        },
        "customfield_10041": {
            "name": "Tags",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:labels"
        },
        "description": {
            "name": "description",
            "type": "java.lang.String",
            "value": "Rev 1101 Line 64ff.\n{code}\nif ($symbols['decimal'] != '.') {\n    $found[0] = str_replace($symbols['decimal'],\".\",$found[0]);\n    $found[0] = (float) $found[0];\n} else {\n    $found[0] = (int) $found[0];\n}\n\nreturn $found[0];\n{code}\n\nDo you see the error? If {{$symbols['decimal']}} is not a dot this function returns always floats (i.e. locale de), else integers (i.e. locale en).\n\nImprovement proposal: How about optionally returning as string? Float has a limited precision. I couldn't get returned numbers containing more then 12 digits without loss of precision. 1234567890.1234 returns a float 1234567890.12\n\nCorrection and improvement proposal:\n{code}\npublic static function getNumber($input, $locale, $asString = false)\n{\n  ...\n    if ($symbols['decimal'] != '.')\n        $found[0] = str_replace($symbols['decimal'], '.', $found[0]);\n\n    if ($asString)\n        return $found[0];\n\n    return (strpos($found[0], '.') !== false) ? (float) $found[0] : (int) $found[0];\n}\n{code}\n"
        },
        "priority": {
            "name": "priority",
            "type": "com.atlassian.jira.issue.priority.Priority",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/priority\/3",
                "name": "Major"
            }
        },
        "duedate": {
            "name": "duedate",
            "type": "java.util.Date"
        },
        "customfield_10022": {
            "name": "Fix Version Priority",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:select"
        },
        "watcher": {
            "name": "watcher",
            "type": "watcher",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-391\/watchers",
                "isWatching": false,
                "watchCount": 0
            }
        },
        "worklog": {
            "name": "worklog",
            "type": "worklog",
            "value": [

            ]
        },
        "status": {
            "name": "status",
            "type": "com.atlassian.jira.issue.status.Status",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/status\/5",
                "name": "Resolved"
            }
        },
        "labels": {
            "name": "labels",
            "type": "com.atlassian.jira.issue.label.Label",
            "value": [

            ]
        },
        "assignee": {
            "name": "assignee",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                "name": "thomas",
                "displayName": "Thomas Weidner",
                "active": true
            }
        },
        "links": {
            "name": "links",
            "type": "issuelinks",
            "value": [

            ]
        },
        "attachment": {
            "name": "attachment",
            "type": "attachment",
            "value": [

            ]
        },
        "sub-tasks": {
            "name": "sub-tasks",
            "type": "issuelinks",
            "value": [

            ]
        },
        "versions": {
            "name": "versions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/version\/10002",
                    "id": 10002,
                    "description": "Preview Release; MVC refactoring and other enhancements and fixes",
                    "name": "0.2.0",
                    "userReleaseDate": "29\/Oct\/06",
                    "archived": true,
                    "releaseDate": "2006-10-29",
                    "released": true
                }
            ]
        },
        "project": {
            "name": "project",
            "type": "com.atlassian.jira.project.Project",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/project\/ZF",
                "key": "ZF",
                "name": "Zend Framework",
                "roles": {

                }
            }
        },
        "components": {
            "name": "components",
            "type": "com.atlassian.jira.bc.project.component.ProjectComponent",
            "value": [
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/component\/10073",
                    "id": 10073,
                    "name": "Zend_Locale",
                    "description": "Zend_Locale is a basic wrapper for all I18N and L10N issues for the Zend Framework. It provides the userbasically with access to translation functionality. It can handle different source file types for translation.",
                    "isAssigneeTypeValid": false
                }
            ]
        },
        "comment": {
            "name": "comment",
            "type": "com.atlassian.jira.issue.fields.CommentSystemField",
            "value": [
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/10862",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "body": "My fault...\n\nBut I don't see the problem.\nI will erase the type-converting and this will do the thing.\n\nThere will always a string be returned, but it is normalized.\nSo when someone will do\n\n{code}\n$number = \"123.456.789.012,345678901\"\n$normalized = Zend_Locale_Format::getNumber($number,'de_DE');\n{code}\n\nit returns \"123456789012.345678901\".\n\nThis way the function will also handle any size of numbers.\nThe only thing the user has to be aware is when he normalized a \nnumber bigger as integer. Then he has to use the bcmath functions for computing them.\n\nIs this acceptable ?",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "created": "2006-09-21T04:44:41.000+0000",
                    "updated": "2006-09-21T04:44:41.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/10863",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "body": "Btw:\n\nThere will also be a function \"getFloat\" where you can define a precission.\nSo \"getNumber\" should only return the Integer part (precission 0).",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "created": "2006-09-21T04:47:45.000+0000",
                    "updated": "2006-09-21T04:47:45.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/10864",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=felix",
                        "name": "felix",
                        "displayName": "Gunar Scholz",
                        "active": true
                    },
                    "body": "Leaving the result of getNumber() as string would be fine in my opinion. If someone really needs a typecast ... that's not a big thing.\n\nI don't think there is a need for both the functions getFloat() and getInteger(). It would be be an extra service of Zend_Locale_Format, but I can't imagine a use for it. If a non localized formatting is needed (i.e. for an SQL string), the normalized string can be formatted using number_format() or sprintf() or for bigger numbers using i.e.\n{{bcadd('12345678901234567890.1234567890123456789', 0, $scale);}}",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=felix",
                        "name": "felix",
                        "displayName": "Gunar Scholz",
                        "active": true
                    },
                    "created": "2006-09-21T10:13:50.000+0000",
                    "updated": "2006-09-21T10:13:50.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/10865",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "body": "When someone will do a \n\n{code}\n$number = Zend_Locale_Format::getNumber('123.456.789.0123.456,789',Zend_Locale::de_DE);\n$result = $number + 10;\n{code}\n\nhe would get an error... because $number is bigger than $number. It would be autotype-converted to float and loose the precision.\n\nBut when he does a getInteger he can be sure that the result is an integer... otherwise he would get an false returned.\n\nAnd getFloat would have an additional parameter, where you can define the precision.\n\n{code}\n$number = Zend_Locale_Format::getFloat('123,45678',3,Zend_Locale::de_DE);\n\/\/ returns 123.456\n{code}\n\nNumber is related to is_numeric\nInteger is related to is_int\nFloat is related to is_float\n\nAnd you always have a getxxx, a setxxx, and a isxxx function.\nAll functions are per definition locale-aware.",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "created": "2006-09-21T13:08:24.000+0000",
                    "updated": "2006-09-21T13:08:24.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/10867",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=felix",
                        "name": "felix",
                        "displayName": "Gunar Scholz",
                        "active": true
                    },
                    "body": "Hmmm... in my opinion the job of the local class ends after a successful normalization. But if you think different, that's o.k. I can ignore the functions I don't have a use for as long as getNumber() works fine. :-)\n\nThanks for correcting the bug. You may close this issue.",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=felix",
                        "name": "felix",
                        "displayName": "Gunar Scholz",
                        "active": true
                    },
                    "created": "2006-09-21T15:59:41.000+0000",
                    "updated": "2006-09-21T15:59:41.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/10868",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "body": "Zend_Locale_Format::getNumer() now returns only string.",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "created": "2006-09-22T01:16:03.000+0000",
                    "updated": "2006-09-22T01:16:03.000+0000"
                }
            ]
        }
    },
    "transitions": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-391\/transitions"
}