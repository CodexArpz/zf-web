{
    "expand": "html",
    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-5788",
    "key": "ZF-5788",
    "fields": {
        "summary": {
            "name": "summary",
            "type": "java.lang.String",
            "value": "The documentation on the use of Zend_Form_Element::setRequired(), ::setAllowEmpty() and the 'NotEmpty' Validator is fuzzy and misleading"
        },
        "timetracking": {
            "name": "timetracking",
            "type": "com.atlassian.jira.issue.fields.TimeTrackingSystemField"
        },
        "issuetype": {
            "name": "issuetype",
            "type": "com.atlassian.jira.issue.issuetype.IssueType",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issueType\/11",
                "name": "Patch",
                "subtask": false
            }
        },
        "votes": {
            "name": "votes",
            "type": "com.atlassian.jira.issue.fields.VotesSystemField",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-5788\/votes",
                "votes": 0,
                "hasVoted": false
            }
        },
        "security": {
            "name": "security",
            "type": "com.atlassian.jira.issue.security.IssueSecurityLevel"
        },
        "resolution": {
            "name": "resolution",
            "type": "com.atlassian.jira.issue.resolution.Resolution",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/resolution\/1",
                "name": "Fixed"
            }
        },
        "fixVersions": {
            "name": "fixVersions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/version\/10451",
                    "id": 10451,
                    "description": "Mini Release",
                    "name": "1.10.4",
                    "userReleaseDate": "28\/Apr\/10",
                    "archived": false,
                    "releaseDate": "2010-04-28",
                    "released": true
                }
            ]
        },
        "resolutiondate": {
            "name": "resolutiondate",
            "type": "java.util.Date",
            "value": "2010-04-16T13:12:53.000+0000"
        },
        "reporter": {
            "name": "reporter",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=verysimple",
                "name": "verysimple",
                "displayName": "Michael Ekoka",
                "active": true
            }
        },
        "created": {
            "name": "created",
            "type": "java.util.Date",
            "value": "2009-02-15T04:22:36.000+0000"
        },
        "updated": {
            "name": "updated",
            "type": "java.util.Date",
            "value": "2010-04-16T14:17:03.000+0000"
        },
        "customfield_10041": {
            "name": "Tags",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:labels",
            "value": [
                "Form_Element_Validation",
                "Form_Validation",
                "NotEmpty",
                "Validation",
                "Zend_Form_Element",
                "getAllowEmpty",
                "isRequired",
                "setAllowEmpty",
                "setRequired"
            ]
        },
        "description": {
            "name": "description",
            "type": "java.lang.String",
            "value": "http:\/\/framework.zend.com\/manual\/en\/zend.form.elements.html\r\n\r\nThe section explaining the use of Zend_Form_Element::setRequired(), ::setAllowEmpty() and the 'NotEmpty' validator lacks clarity. Asking for an explanation about it in IRC just confirmed to me that this particular process is misunderstood. I had to dig into the code itself to understand what's actually going on. This is what the manual says:\r\n\r\n{quote}\r\nIn addition to validators, you can specify that an element is required, using setRequired(true). By default, this flag is false, meaning that your validator chain will be skipped if no value is passed to isValid().\r\n{quote}\r\n\r\n1-) My first issue with this section is that setRequired() should not be introduced here. Much more clarity would be achieved by first discussing setAllowEmpty() and the 'NotEmpty' Validation rule, because setRequired() is a redundant feature. The same effect can be obtained by explicitly setting the 'allowEmpty' flag to false and explicitly adding the 'NotEmpty' validation to the chain. setRequired() is nothing more than a convenience method, a shortcut. It only has influence when the flag is set to true, in which case it does 2 things:\r\n- it ignores the 'allowEmpty' flag (acting as if allowEmpty had been set to false). Therefore it is important to understand what the allowEmpty flag does to understand how setRequire() influences the behavior of the form.\r\n- it adds a 'NotEmpty' validator to the validation chain, (provided that the Zend_Form_Element::$autoInserNotEmptyValidator flag is set to true). As for the allowEmpty flag it would be better to understand what the NotEmpty validation rule does.\r\nAFAICT, it has no other purpose.\r\n\r\n2) Unlike stated in that little paragraph, setRequired(false) does not imply that the validators chain will be skipped when an empty value is passed to isValid(). That behavior is controlled by the 'allowEmpty' flag, which remains unaffected when the 'required' flag is set to false. setRequired(false) simply deactivate the shortcut mentioned earlier in point 1. When the 'required' flag is set to false, there is no more bypassing the allowEmpty flag and no implicit addition of the 'NotEmpty' validator to the chain. \r\n\r\n{quote}\r\nBy default, when an element is required, a flag, 'allowEmpty', is also true. This means that if a value evaluating to empty is passed to isValid(), the validators will be skipped. You can toggle this flag using the accessor setAllowEmpty($flag); when the flag is false, then if a value is passed, the validators will still run. \r\n{quote}\r\n\r\n3) Again, the wording is misleading. setRequired(true), sets the 'required' flag to true, but has no direct influence on the 'allowEmpty' flag itself. It doesn't set allowEmpty to false, it simply acts as if allowEmpty was false (see point 1 and 2). Instead the paragraph should have explained how allowEmpty influences validation behavior and how setting 'required' to true changes that behavior.\r\n\r\nsetAllowEmpty(true) allows an element to skip validation when populated with an empty value. Setting the 'required' flag to true on an element will ignore that property of the allowEmpty flag, without changing the flag itself. The allowEmpty flag is useful for non mandatory fields (empty value acceptable), that still need to be checked for proper format when a value is provided. The flag is not part of the validation chain, but modifies the validation behavior for the element."
        },
        "priority": {
            "name": "priority",
            "type": "com.atlassian.jira.issue.priority.Priority",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/priority\/3",
                "name": "Major"
            }
        },
        "duedate": {
            "name": "duedate",
            "type": "java.util.Date"
        },
        "customfield_10022": {
            "name": "Fix Version Priority",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:select"
        },
        "watcher": {
            "name": "watcher",
            "type": "watcher",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-5788\/watchers",
                "isWatching": false,
                "watchCount": 1
            }
        },
        "worklog": {
            "name": "worklog",
            "type": "worklog",
            "value": [

            ]
        },
        "status": {
            "name": "status",
            "type": "com.atlassian.jira.issue.status.Status",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/status\/5",
                "name": "Resolved"
            }
        },
        "labels": {
            "name": "labels",
            "type": "com.atlassian.jira.issue.label.Label",
            "value": [

            ]
        },
        "assignee": {
            "name": "assignee",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=alab",
                "name": "alab",
                "displayName": "Christian Albrecht",
                "active": true
            }
        },
        "links": {
            "name": "links",
            "type": "issuelinks",
            "value": [

            ]
        },
        "attachment": {
            "name": "attachment",
            "type": "attachment",
            "value": [

            ]
        },
        "sub-tasks": {
            "name": "sub-tasks",
            "type": "issuelinks",
            "value": [

            ]
        },
        "versions": {
            "name": "versions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [

            ]
        },
        "project": {
            "name": "project",
            "type": "com.atlassian.jira.project.Project",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/project\/ZF",
                "key": "ZF",
                "name": "Zend Framework",
                "roles": {

                }
            }
        },
        "components": {
            "name": "components",
            "type": "com.atlassian.jira.bc.project.component.ProjectComponent",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/component\/10029",
                    "id": 10029,
                    "name": "Zend_Form",
                    "isAssigneeTypeValid": false
                }
            ]
        },
        "comment": {
            "name": "comment",
            "type": "com.atlassian.jira.issue.fields.CommentSystemField",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/29040",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=verysimple",
                        "name": "verysimple",
                        "displayName": "Michael Ekoka",
                        "active": true
                    },
                    "body": "edited for clarity",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=verysimple",
                        "name": "verysimple",
                        "displayName": "Michael Ekoka",
                        "active": true
                    },
                    "created": "2009-02-23T20:01:34.000+0000",
                    "updated": "2009-02-23T20:01:34.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/39864",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=alab",
                        "name": "alab",
                        "displayName": "Christian Albrecht",
                        "active": true
                    },
                    "body": "In addition to validators, you can specify that an element is \r\nrequired, using {{setRequired($flag)}}. By default, this flag is {{FALSE}}.\r\nIn combination with {{setAllowEmpty($flag)}} ({{TRUE}} by default)\r\nand {{setAutoInsertNotEmptyValidator($flag)}} ({{TRUE}} by default),\r\nthe behavior of your validator chain can be modified in a number of ways:\r\n\r\n* Using the default Flags, validating an Element without passing a value, or\r\n  passing an empty string for it, skips all validators and validates to {{TRUE}}.\r\n\r\n* {{setAllowEmpty(false)}} leaving the two other\r\n  mentioned flags untouched, will validate against the validator chain\r\n  you defined for this Element, regardless of the value passed\r\n  to {{isValid()}}.\r\n\r\n* {{setRequired(true)}} leaving the two other mentioned flags untouched,\r\n  will add a 'NotEmpty' validator on top of the validator chain (if it was not already added),\r\n  with the {{$breakChainOnFailure}} flag set. This behavior lends required flag semantic\r\n  meaning: if no value is passed, we immediately invalidate the submission and notify \r\n  the user, and prevent other validators from running on what we already know is invalid data.\r\n  \\\\ \\\\\r\n  If you do not want this behavior, you can turn it off by passing a {{FALSE}} value\r\n  to {{setAutoInsertNotEmptyValidator($flag)}}; this will prevent {{isValid()}} from placing \r\n  the 'NotEmpty' validator in the validator chain.\r\n\r\n{code}\r\nIndex: documentation\/manual\/en\/module_specs\/Zend_Form-Elements.xml\r\n===================================================================\r\n--- documentation\/manual\/en\/module_specs\/Zend_Form-Elements.xml (Revision 21783)\r\n+++ documentation\/manual\/en\/module_specs\/Zend_Form-Elements.xml (Arbeitskopie)\r\n@@ -619,30 +619,37 @@\r\n \r\n         <para>\r\n             In addition to validators, you can specify that an element is\r\n-            required, using <methodname>setRequired(true)<\/methodname>. By default, this\r\n-            flag is <constant>FALSE<\/constant>, meaning that your validator chain will be skipped if\r\n-            no value is passed to <methodname>isValid()<\/methodname>. You can modify this\r\n-            behavior in a number of ways:\r\n+            required, using <methodname>setRequired($flag)<\/methodname>. By default, this\r\n+            flag is <constant>FALSE<\/constant>. In combination with \r\n+            <methodname>setAllowEmpty($flag)<\/methodname> (<constant>TRUE<\/constant>\r\n+            by default) and <methodname>setAutoInsertNotEmptyValidator($flag)<\/methodname>\r\n+            (<constant>TRUE<\/constant> by default), the behavior of your validator chain\r\n+            can be modified in a number of ways:\r\n         <\/para>\r\n \r\n         <itemizedlist>\r\n             <listitem>\r\n                 <para>\r\n-                    By default, when an element is required, a flag,\r\n-                    'allowEmpty', is also <constant>TRUE<\/constant>. This means that if a value\r\n-                    evaluating to empty is passed to <methodname>isValid()<\/methodname>, the\r\n-                    validators will be skipped. You can toggle this flag using\r\n-                    the accessor <methodname>setAllowEmpty($flag)<\/methodname>; when the\r\n-                    flag is <constant>FALSE<\/constant> and a value is passed, the validators\r\n-                    will still run.\r\n+                    Using the defaults, validating an Element without passing a value, or\r\n+                    passing an empty string for it, skips all validators and validates to\r\n+                    <constant>TRUE<\/constant>.\r\n                 <\/para>\r\n             <\/listitem>\r\n \r\n             <listitem>\r\n                 <para>\r\n-                    By default, if an element is required but does not contain\r\n-                    a 'NotEmpty' validator, <methodname>isValid()<\/methodname> will add one\r\n-                    to the top of the stack, with the\r\n+                    <methodname>setAllowEmpty(false)<\/methodname> leaving the two other\r\n+                    mentioned flags untouched, will validate against the validator chain\r\n+                    you defined for this Element, regardless of the value passed\r\n+                    to <methodname>isValid()<\/methodname>.\r\n+                <\/para>\r\n+            <\/listitem>\r\n+\r\n+            <listitem>\r\n+                <para>\r\n+                    <methodname>setRequired(true)<\/methodname> leaving the two other\r\n+                    mentioned flags untouched, will add a 'NotEmpty' validator\r\n+                    on top of the validator chain (if none was already set)), with the\r\n                     <varname>$breakChainOnFailure<\/varname> flag set. This behavior lends\r\n                     required flag semantic meaning: if no value is passed,\r\n                     we immediately invalidate the submission and notify the\r\n\r\n{code}",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=alab",
                        "name": "alab",
                        "displayName": "Christian Albrecht",
                        "active": true
                    },
                    "created": "2010-04-07T03:29:53.000+0000",
                    "updated": "2010-04-07T13:54:04.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/39865",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=alab",
                        "name": "alab",
                        "displayName": "Christian Albrecht",
                        "active": true
                    },
                    "body": "Reading in the sources, this is somewhat mixing responsibilities,\r\nwhat about throwing setAutoInsertNotEmptyValidator() away, in the\r\nfavour of just using setRequired() in combination with setAllowEmpty() ?\r\n\r\n{code:title=Zend_Form_Element}\r\n    public function isValid($value, $context = null)\r\n    {\r\n        $this->setValue($value);\r\n        $value = $this->getValue();\r\n\r\n        if ((('' === $value) || (null === $value))\r\n            && !$this->isRequired()\r\n            && $this->getAllowEmpty()\r\n        ) {\r\n            return true;\r\n        }\r\n\r\n        if ($this->isRequired()\r\n            && !$this->getAllowEmpty() \/\/ && $this->autoInsertNotEmptyValidator()\r\n            && !$this->getValidator('NotEmpty'))\r\n        {\r\n            $validators = $this->getValidators();\r\n            $notEmpty   = array('validator' => 'NotEmpty', 'breakChainOnFailure' => true);\r\n            array_unshift($validators, $notEmpty);\r\n            $this->setValidators($validators);\r\n        }\r\n...\r\n{code}",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=alab",
                        "name": "alab",
                        "displayName": "Christian Albrecht",
                        "active": true
                    },
                    "created": "2010-04-07T06:30:22.000+0000",
                    "updated": "2010-04-07T06:30:22.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/39875",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=alab",
                        "name": "alab",
                        "displayName": "Christian Albrecht",
                        "active": true
                    },
                    "body": "After talking to Matthew, i finally got the concept why\r\nsetAutoInsertNotEmptyValidator was introduced, with my solution\r\nin the previous comment the one call to setRequired(true) which is\r\nobviously a shortcut for convenience would be achieved by \r\nsetRequired(true) && setAllowEmpty(false).\r\n\r\n\/\/edit\r\nWhat made me struggle a while is the following, as a side-effect,\r\nsetAllowEmpty(false) while leaving the other flags default,\r\nwill be the same as setRequire(true) and setAutoInsertNotEmptyValidator(false),\r\nwhich is a bit confusing because of the naming.\r\n\r\nSo just changing the Documentation is enough, everything else\r\ni can think of would remove Choices which is probably a bad thing\r\nto do.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=alab",
                        "name": "alab",
                        "displayName": "Christian Albrecht",
                        "active": true
                    },
                    "created": "2010-04-07T13:38:12.000+0000",
                    "updated": "2010-04-07T14:46:44.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/40085",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                        "name": "matthew",
                        "displayName": "Matthew Weier O'Phinney",
                        "active": true
                    },
                    "body": "Patch applied in trunk and 1.10 release branch",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                        "name": "matthew",
                        "displayName": "Matthew Weier O'Phinney",
                        "active": true
                    },
                    "created": "2010-04-16T13:12:53.000+0000",
                    "updated": "2010-04-16T13:12:53.000+0000"
                }
            ]
        }
    },
    "transitions": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-5788\/transitions"
}