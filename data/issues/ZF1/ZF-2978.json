{
    "expand": "html",
    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-2978",
    "key": "ZF-2978",
    "fields": {
        "summary": {
            "name": "summary",
            "type": "java.lang.String",
            "value": "Zend_XmlRpc_Client returning system.methodSignature in methodName"
        },
        "timetracking": {
            "name": "timetracking",
            "type": "com.atlassian.jira.issue.fields.TimeTrackingSystemField",
            "value": {
                "timeoriginalestimate": 60,
                "timeestimate": 60
            }
        },
        "issuetype": {
            "name": "issuetype",
            "type": "com.atlassian.jira.issue.issuetype.IssueType",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issueType\/1",
                "name": "Bug",
                "subtask": false
            }
        },
        "votes": {
            "name": "votes",
            "type": "com.atlassian.jira.issue.fields.VotesSystemField",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-2978\/votes",
                "votes": 3,
                "hasVoted": false
            }
        },
        "security": {
            "name": "security",
            "type": "com.atlassian.jira.issue.security.IssueSecurityLevel"
        },
        "resolution": {
            "name": "resolution",
            "type": "com.atlassian.jira.issue.resolution.Resolution",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/resolution\/1",
                "name": "Fixed"
            }
        },
        "fixVersions": {
            "name": "fixVersions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/version\/10161",
                    "id": 10161,
                    "description": "Mini Release",
                    "name": "1.5.3",
                    "userReleaseDate": "28\/Jul\/08",
                    "archived": true,
                    "releaseDate": "2008-07-28",
                    "released": true
                }
            ]
        },
        "resolutiondate": {
            "name": "resolutiondate",
            "type": "java.util.Date",
            "value": "2008-07-23T05:53:58.000+0000"
        },
        "reporter": {
            "name": "reporter",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=rcastley",
                "name": "rcastley",
                "displayName": "Robert Castley",
                "active": true
            }
        },
        "created": {
            "name": "created",
            "type": "java.util.Date",
            "value": "2008-03-26T19:09:57.000+0000"
        },
        "updated": {
            "name": "updated",
            "type": "java.util.Date",
            "value": "2008-07-23T05:53:58.000+0000"
        },
        "customfield_10041": {
            "name": "Tags",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:labels"
        },
        "description": {
            "name": "description",
            "type": "java.lang.String",
            "value": "Hi,\n\nI have just upgraded from 1.5 to 1.5.1 and now my XML-RPC client calls no longer work.  My tracing show that system.methodSignature is being put in methodName.\n\nThe traces below reflect no change in my own code, only an upgrade to 1.5.1!\n\n1.5 trace\n\n{code:xml}\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<methodCall>\n  <methodName>getVersion<\/methodName>\n  <params>\n    <param>\n      <value>\n        <string>VPR<\/string>\n      <\/value>\n    <\/param>\n    <param>\n      <value>\n        <string\/>\n      <\/value>\n    <\/param>\n    <param>\n      <value>\n        <string>abcdefg<\/string>\n      <\/value>\n    <\/param>\n  <\/params>\n<\/methodCall>\n{code}\n\n1.5.1 trace\n\n{code:xml}\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<methodCall>\n  <methodName>system.methodSignature<\/methodName>\n  <params>\n    <param>\n      <value>\n        <string>getVersion<\/string>\n      <\/value>\n    <\/param>\n  <\/params>\n<\/methodCall>\n{code}\n\nAs stated, all I have done is upgrade ZF to 1.5.1, nothing else has changed ... promise!\n"
        },
        "priority": {
            "name": "priority",
            "type": "com.atlassian.jira.issue.priority.Priority",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/priority\/3",
                "name": "Major"
            }
        },
        "duedate": {
            "name": "duedate",
            "type": "java.util.Date",
            "value": "2008-04-04"
        },
        "customfield_10022": {
            "name": "Fix Version Priority",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:select",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/customFieldOption\/10037",
                "value": "   Must Have"
            }
        },
        "watcher": {
            "name": "watcher",
            "type": "watcher",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-2978\/watchers",
                "isWatching": false,
                "watchCount": 2
            }
        },
        "worklog": {
            "name": "worklog",
            "type": "worklog",
            "value": [

            ]
        },
        "status": {
            "name": "status",
            "type": "com.atlassian.jira.issue.status.Status",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/status\/5",
                "name": "Resolved"
            }
        },
        "labels": {
            "name": "labels",
            "type": "com.atlassian.jira.issue.label.Label",
            "value": [

            ]
        },
        "assignee": {
            "name": "assignee",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                "name": "matthew",
                "displayName": "Matthew Weier O'Phinney",
                "active": true
            }
        },
        "links": {
            "name": "links",
            "type": "issuelinks",
            "value": [

            ]
        },
        "attachment": {
            "name": "attachment",
            "type": "attachment",
            "value": [

            ]
        },
        "sub-tasks": {
            "name": "sub-tasks",
            "type": "issuelinks",
            "value": [

            ]
        },
        "versions": {
            "name": "versions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/version\/10174",
                    "id": 10174,
                    "description": "Mini Release",
                    "name": "1.5.1",
                    "userReleaseDate": "25\/Mar\/08",
                    "archived": true,
                    "releaseDate": "2008-03-25",
                    "released": true
                }
            ]
        },
        "project": {
            "name": "project",
            "type": "com.atlassian.jira.project.Project",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/project\/ZF",
                "key": "ZF",
                "name": "Zend Framework",
                "roles": {

                }
            }
        },
        "components": {
            "name": "components",
            "type": "com.atlassian.jira.bc.project.component.ProjectComponent",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/component\/10027",
                    "id": 10027,
                    "name": "Zend_XmlRpc_Client",
                    "description": "remote procedure calling using HTTP as the transport and XML as the encoding",
                    "isAssigneeTypeValid": false
                }
            ]
        },
        "comment": {
            "name": "comment",
            "type": "com.atlassian.jira.issue.fields.CommentSystemField",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/20481",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                        "name": "matthew",
                        "displayName": "Matthew Weier O'Phinney",
                        "active": true
                    },
                    "body": "Can you provide the minimum code to reproduce this issue? I've tried the following:\n\nServer: has method 'foo.say' accepting a single string \"$message\".\n\nClient code:\n{code}\n$conn   = new Zend_XmlRpc_Client('http:\/\/localhost\/xml-rpc');\n$client = $conn->getProxy();\n\ntry {\n    $result = $client->foo->say('hello');\n    echo $result, \"\\n\\n\";\n} catch (Exception $e) {\n    echo \"An exception occurred: \" . $e->getMessage() . \"\\n\\n\";\n}\necho \"Last Request: \", $conn->getLastRequest()->__toString();\n{code}\n\nExpected and Actual Result:\n{code}\nhello\n\nLast Request: <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<methodCall><methodName>foo.say<\/methodName><params><param><value><string>hello<\/string><\/value><\/param><\/params><\/methodCall>\n{code}\n\nAs you'll note, the request object clearly uses the 'foo.say' method as expected, and I get back a valid response. If you could provide some basic code showing how you reproduce the issue, I may be able to help you out better; right now, I can't identify any issues.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                        "name": "matthew",
                        "displayName": "Matthew Weier O'Phinney",
                        "active": true
                    },
                    "created": "2008-03-27T06:43:40.000+0000",
                    "updated": "2008-03-27T06:43:40.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/20482",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=rcastley",
                        "name": "rcastley",
                        "displayName": "Robert Castley",
                        "active": true
                    },
                    "body": "Sure,\n\nI have my own XML-RPC client class that has all my calls in e.g.\n\n{code}\n    public function xselect($p1, $p2)\n    {\n        $methodType = 'foo.xselect';\n        $params = array($p1, $p2);\n        return $this->xmlRpcRequest($methodType, $params);\n    }\n\n    \/**\n     * Main XmlRpc call\n     *\n     * @param string $methodType\n     * @param array $params\n     * @return array\n     * @throws Zend_Exception if call fails\n     *\/\n    public function xmlRpcRequest($methodType, $params)\n    {\n        if (isset($this->_host)) {\n            $host = $this->_host;\n        } \n\n        if (isset($this->_port)) {\n            $port = $this->_port;\n        }\n\n        $client = new Zend_XmlRpc_Client('http:\/\/' . $host. ':' . $port);\n\n        try {\n            return $client->call($methodType, $params);\n        } catch (Zend_Exception $e) {\n            Zend_Registry::get('logger')->err($e->getMessage());\n            return array('Error' => $e->getCode(), 'Message' => $e->getMessage());\n        }\n{code}\n\nI then use the above in code like so:\n\n{code}\n$client = new My_XmlRpc();\n\n$host = $params->getParam('host');\n$port = $params->getParam('port');\n\n$client->_host = $host;\n$client->_port = $port;\n$result = $client->xselect('A', 'B');\n{code}\n\nThe above works just fine with 1.5.0, but not with 1.5.1.  Have I missed some changes in the way the client is used?\n\nCheers!",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=rcastley",
                        "name": "rcastley",
                        "displayName": "Robert Castley",
                        "active": true
                    },
                    "created": "2008-03-27T07:28:48.000+0000",
                    "updated": "2008-03-27T07:28:48.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/20485",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                        "name": "matthew",
                        "displayName": "Matthew Weier O'Phinney",
                        "active": true
                    },
                    "body": "I've now tried the following code, which uses Zend_XmlRpc_Client::call(), as per your example:\n\n{code}\n$conn   = new Zend_XmlRpc_Client('http:\/\/framework\/xml-rpc');\n\ntry {\n    $result = $conn->call('foo.say', array('hello'));\n    echo $result, \"\\n\\n\";\n} catch (Exception $e) {\n    echo \"An exception occurred: \" . $e->getMessage() . \"\\n\\n\";\n}\necho \"Last Request: \", $conn->getLastRequest()->__toString();\n{code}\n\nAgain, I get the same expected and actual results as previously posted.\n\nsystem.methodSignature *does* get called during the course of the XML-RPC client setup, as we do server introspection to ensure that the parameters you pass to the method match those specified in the server method signature -- but this has been true since before 1.0.0.\n\n1.5.1 *did* feature a number of bug-fixes to the XmlRpc component, but all changes were bugfixes and introduced no BC changes (which was verified by the fact that the test suite continued to pass all previous tests). \n\nCan you please attempt to run the client using a straight XmlRpc client, no proxying via a custom object, to make sure it's not an issue with your wrapper class? ",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                        "name": "matthew",
                        "displayName": "Matthew Weier O'Phinney",
                        "active": true
                    },
                    "created": "2008-03-27T07:55:18.000+0000",
                    "updated": "2008-03-27T07:55:18.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/20487",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=rcastley",
                        "name": "rcastley",
                        "displayName": "Robert Castley",
                        "active": true
                    },
                    "body": "Hi Matthew,\n\nOK, I did as you said and stripped it right back and I get the same results.  It should be noted that the XML-RPC server I talk to is a windows service written in C using the Epinions API (http:\/\/xmlrpc-epi.sourceforge.net\/main.php?t=summary).  This hasn't changed and works with requests coming from 1.5.0.\n\nMy code now looks like:\n\n{code}\n        $conn  = new Zend_XmlRpc_Client('http:\/\/localhost:8082');\n\n        try {\n            $result = $conn->call('OMAccs.ListReports');\n            echo $result, \"\\n\\n\";\n        } catch (Zend_XmlRpc_Exception $e) {\n            echo $e->getMessage() . \"\\n\\n\";\n        }\n        echo $conn->getLastRequest()->__toString();\n{code}\n\nThe response is:\n\n{code}\n\nInvalid response \/\/ Response from XML-RPC service\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<methodCall>\n  <methodName>system.methodSignature<\/methodName>\n  <params>\n    <param>\n      <value>\n        <string>OMAccs.ListReports<\/string>\n      <\/value>\n    <\/param>\n  <\/params>\n<\/methodCall>\n{code}\n\nComparing Zend_XmlRpc_Cient in 1.5.0 and 1.5.1 there is a new chunk of code in the 'call' function (lines 254-278), if I comment this code out I get a working client again and my response using the above call is:\n\n{code}\nC:\\ColumbusOM\\ZoneServer\\queue\\accounting\\templates\\devices.xml  \/\/ XML-RPC server response\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<methodCall>\n  <methodName>OMAccs.ListReports<\/methodName>\n<\/methodCall>\n{code}",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=rcastley",
                        "name": "rcastley",
                        "displayName": "Robert Castley",
                        "active": true
                    },
                    "created": "2008-03-27T09:13:29.000+0000",
                    "updated": "2008-03-27T09:13:29.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/20488",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=rcastley",
                        "name": "rcastley",
                        "displayName": "Robert Castley",
                        "active": true
                    },
                    "body": "Hi Matthew,\n\nOK, I have taken this a step further and found a public XML-RPC server over at http:\/\/scripts.incutio.com (Simon Willison)\n\n{code}\n        $conn  = new Zend_XmlRpc_Client('http:\/\/scripts.incutio.com\/xmlrpc\/simpleserver.php');\n\n        try {\n            $result = $conn->call('test.getTime');\n            echo $result, \"\\n\\n\";\n        } catch (Zend_XmlRpc_Exception $e) {\n            echo $e->getMessage() . \"\\n\\n\";\n        }\n        echo $conn->getLastRequest()->__toString();\n{code}\n\nUsing 1.5.1 this server has the same problem with the above client request:\n\n{code}\nserver error. requested method system.methodSignature does not exist.\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<methodCall><methodName>system.methodSignature<\/methodName><params><param><value><string>test.getTime<\/string><\/value><\/param><\/params><\/methodCall>\n{code}\n\nIf I comment out lines 254-278 in Zend_XmlRpc_Client it works!",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=rcastley",
                        "name": "rcastley",
                        "displayName": "Robert Castley",
                        "active": true
                    },
                    "created": "2008-03-27T09:36:22.000+0000",
                    "updated": "2008-03-27T09:36:22.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/20489",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                        "name": "matthew",
                        "displayName": "Matthew Weier O'Phinney",
                        "active": true
                    },
                    "body": "Hmm... This is not good. The code added in call() was to make sure that empty arrays are sent as the appropriate XML-RPC type as specified by the server; in PHP, you can't tell if an empty array is associative or indexed, so we need to check against the signatures on the server. \n\nThe check is done using system.methodSignature(); well-formed XML-RPC servers should implement the various system.* methods to allow introspection such as this.\n\nHowever, when they don't Zend_XmlRpc_Client should do the right thing. I think we have two options:\n\n# add a flag to Zend_XmlRpc_Client such as 'disableStrictSignatures' that would bypass this check\n# do some error handling in Zend_XmlRpc_Client_ServerIntrospection that would turn such a flag on by default if unable to call the method\n\nI'll work on these for the 1.5.2 release. In the meantime, you can create an extension of the Zend_XmlRpc_Client class that overrides call() as follows:\n\n{code}\nclass My_XmlRpc_Client extends Zend_XmlRpc_Client\n{\n    public function call($method, $params = array())\n    {\n        $request = new Zend_XmlRpc_Request($method, $params);\n\n        $this->doRequest($request);\n\n        if ($this->_lastResponse->isFault()) {\n            $fault = $this->_lastResponse->getFault();\n            throw new Zend_XmlRpc_Client_FaultException($fault->getMessage(),\n                                                        $fault->getCode());\n        }\n\n        return $this->_lastResponse->getReturnValue();\n    }\n}\n{code}",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                        "name": "matthew",
                        "displayName": "Matthew Weier O'Phinney",
                        "active": true
                    },
                    "created": "2008-03-27T09:51:25.000+0000",
                    "updated": "2008-03-27T09:51:25.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/21491",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                        "name": "matthew",
                        "displayName": "Matthew Weier O'Phinney",
                        "active": true
                    },
                    "body": "I have committed code in r9307 that seems to fix the issue; in call(), I wrap the call to the introspector in a try\/catch block, and, if it fails, do not attempt to explicitly cast array\/struct params. This will, of course, mean that ZF-2090 will still appear to be broken for any server that does not implement system.* methods. However, I think that's a reasonable tradeoff.\n\nPlease test (I tested with the incutio example in an above comment), and let me know if this is ready to commit to the release branch.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                        "name": "matthew",
                        "displayName": "Matthew Weier O'Phinney",
                        "active": true
                    },
                    "created": "2008-04-25T11:00:42.000+0000",
                    "updated": "2008-04-25T11:00:42.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/21755",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=stanzapub",
                        "name": "stanzapub",
                        "displayName": "Oren Sol",
                        "active": true
                    },
                    "body": "I also experienced this issue with XmlRpc requests to Wordpress that broke when upgrading to 1.5.1.\n\nThe changes in r9307 seem to solve the problem.\n\nJust a side note, if using Matthew's suggestion to extend the class for yourself for now, make sure to use $this->getLastResponse() and not $this->_lastResponse.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=stanzapub",
                        "name": "stanzapub",
                        "displayName": "Oren Sol",
                        "active": true
                    },
                    "created": "2008-05-15T04:10:20.000+0000",
                    "updated": "2008-05-15T04:10:20.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/21802",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=rcastley",
                        "name": "rcastley",
                        "displayName": "Robert Castley",
                        "active": true
                    },
                    "body": "Hi,\n\nWill the fix for this make 1.5.3 or above?\n\nIt is interesting that Oren suffered the same fate as Wordpress uses the Incutio XML-RPC library!\n\nCheers,\n\n- Robert",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=rcastley",
                        "name": "rcastley",
                        "displayName": "Robert Castley",
                        "active": true
                    },
                    "created": "2008-05-16T14:13:45.000+0000",
                    "updated": "2008-05-16T14:13:45.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/22585",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=hagerd",
                        "name": "hagerd",
                        "displayName": "Darien Hager",
                        "active": true
                    },
                    "body": "I just tracked down an obscure bug I was having to this issue, and lo-and-behold there's already a ticket for it :)\n\nSo r9307 looks exactly like what the doctor ordered, and it fixes my problems.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=hagerd",
                        "name": "hagerd",
                        "displayName": "Darien Hager",
                        "active": true
                    },
                    "created": "2008-06-19T12:02:10.000+0000",
                    "updated": "2008-06-19T12:02:10.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/22591",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=till",
                        "name": "till",
                        "displayName": "Till Klampaeckel",
                        "active": true
                    },
                    "body": "Hey Matthew!\n\nI am using Zend_XmlRpc_Server and Zend_XmlRpc_Client of the 1.5.2 release.\n\nNow I am running into this issue as well - and don't ask me why, but the client \"dies\" when it attempts to guess the parameters required by the call. I figured this out because all of the sudden I have \"system.methodSignature\" in my request and after the request is issued, I just get \"failed to parse\" response.\n\nAnd I was wondering why it never reached the actual class attached to the server. ;-)\n\nI know you like debugging via a log, but there is absolutely nothing in my logs (parse errors or anything) and it would be nice if you added an optional debug that just outputs code on the screen or maybe a way to specify another logger to log what exactly is send out and received during a \"single\" call.\n\nI also vote that I can turn off strict checks, I don't see a real benefit in this except for development. In a live environment every XMLRPC call equals two. I don't see why this should be done.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=till",
                        "name": "till",
                        "displayName": "Till Klampaeckel",
                        "active": true
                    },
                    "created": "2008-06-20T08:27:18.000+0000",
                    "updated": "2008-06-20T08:27:18.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/23001",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                        "name": "matthew",
                        "displayName": "Matthew Weier O'Phinney",
                        "active": true
                    },
                    "body": "Added 'setSkipSystemLookup()' method to client, which disables system.methodSignature calls. Flag is false by default, enabling the check.\n\nChanges are checked in to trunk and 1.5 and 1.6 release branches.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                        "name": "matthew",
                        "displayName": "Matthew Weier O'Phinney",
                        "active": true
                    },
                    "created": "2008-07-23T05:53:57.000+0000",
                    "updated": "2008-07-23T05:53:57.000+0000"
                }
            ]
        }
    },
    "transitions": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-2978\/transitions"
}