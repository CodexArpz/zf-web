{
    "expand": "html",
    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-1000",
    "key": "ZF-1000",
    "fields": {
        "summary": {
            "name": "summary",
            "type": "java.lang.String",
            "value": "Zend_Date::usePhpDateFormat()  <=> Zend_Locale_Format::usePhpDateFormat()"
        },
        "timetracking": {
            "name": "timetracking",
            "type": "com.atlassian.jira.issue.fields.TimeTrackingSystemField"
        },
        "issuetype": {
            "name": "issuetype",
            "type": "com.atlassian.jira.issue.issuetype.IssueType",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/issueType\/4",
                "name": "Improvement",
                "subtask": false
            }
        },
        "votes": {
            "name": "votes",
            "type": "com.atlassian.jira.issue.fields.VotesSystemField",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-1000\/votes",
                "votes": 0,
                "hasVoted": false
            }
        },
        "security": {
            "name": "security",
            "type": "com.atlassian.jira.issue.security.IssueSecurityLevel"
        },
        "resolution": {
            "name": "resolution",
            "type": "com.atlassian.jira.issue.resolution.Resolution",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/resolution\/1",
                "name": "Fixed"
            }
        },
        "fixVersions": {
            "name": "fixVersions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [

            ]
        },
        "resolutiondate": {
            "name": "resolutiondate",
            "type": "java.util.Date",
            "value": "2007-03-27T13:16:40.000+0000"
        },
        "reporter": {
            "name": "reporter",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                "name": "gavin",
                "displayName": "Gavin",
                "active": true
            }
        },
        "created": {
            "name": "created",
            "type": "java.util.Date",
            "value": "2007-03-01T18:06:08.000+0000"
        },
        "updated": {
            "name": "updated",
            "type": "java.util.Date",
            "value": "2007-07-05T14:43:53.000+0000"
        },
        "customfield_10041": {
            "name": "Tags",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:labels"
        },
        "description": {
            "name": "description",
            "type": "java.lang.String",
            "value": "I suggest either:\n\n1) Removing the recently added Zend_Date::usePhpDateFormat(), because it only proxies to  Zend_Locale_Format::usePhpDateFormat() without adding any value, and because it has side-effects extending beyond Zend_Date that affect class behavior of other components.\n\nor\n\n2) Making the Zend_Date::usePhpDateFormat() affect only Zend_Date*, instead of other functions in other classes (i.e. Zend_Locale_Format).\n\nI also recommend using a static setOptions() method to set options that affect an entire component (i.e. all instances or static methods), where the option name would be 'usePhpDateFormat'.  See Zend_Session::setOptions() for an example."
        },
        "priority": {
            "name": "priority",
            "type": "com.atlassian.jira.issue.priority.Priority",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/priority\/4",
                "name": "Minor"
            }
        },
        "duedate": {
            "name": "duedate",
            "type": "java.util.Date"
        },
        "customfield_10022": {
            "name": "Fix Version Priority",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:select"
        },
        "watcher": {
            "name": "watcher",
            "type": "watcher",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-1000\/watchers",
                "isWatching": false,
                "watchCount": 1
            }
        },
        "worklog": {
            "name": "worklog",
            "type": "worklog",
            "value": [

            ]
        },
        "status": {
            "name": "status",
            "type": "com.atlassian.jira.issue.status.Status",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/status\/5",
                "name": "Resolved"
            }
        },
        "labels": {
            "name": "labels",
            "type": "com.atlassian.jira.issue.label.Label",
            "value": [

            ]
        },
        "assignee": {
            "name": "assignee",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                "name": "thomas",
                "displayName": "Thomas Weidner",
                "active": true
            }
        },
        "links": {
            "name": "links",
            "type": "issuelinks",
            "value": [

            ]
        },
        "attachment": {
            "name": "attachment",
            "type": "attachment",
            "value": [

            ]
        },
        "sub-tasks": {
            "name": "sub-tasks",
            "type": "issuelinks",
            "value": [

            ]
        },
        "versions": {
            "name": "versions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [

            ]
        },
        "project": {
            "name": "project",
            "type": "com.atlassian.jira.project.Project",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/project\/ZF",
                "key": "ZF",
                "name": "Zend Framework",
                "roles": {

                }
            }
        },
        "components": {
            "name": "components",
            "type": "com.atlassian.jira.bc.project.component.ProjectComponent",
            "value": [
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/component\/10072",
                    "id": 10072,
                    "name": "Zend_Date",
                    "description": "Zend_Date is the basic library for the handling of all date, time and calendar-related issues.",
                    "isAssigneeTypeValid": false
                }
            ]
        },
        "comment": {
            "name": "comment",
            "type": "com.atlassian.jira.issue.fields.CommentSystemField",
            "value": [
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/13083",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "body": "When we remove the format specifier we have the problem that other functions which use date format specifier within Zend_Date would not interact correct...\nThe functions calling Zend_Locale would use php format, the functions within Zend_Date would use ISO format.\n\nAnd when I want to use php format for Zend_Date's toString function why should I call a function within Zend_Locale ??? This would be unlogic and inconsistent.\n\n\n\nMake Zend_Date only affect for php format... this leads to problems within the functions calling Zend_Locale for getting results... we have to add logic to detect if php or iso format is specified within Zend_Locale and then act the expected way... change to iso, call function, revert to previous format. But this stretches our code by about 50 lines... Zend_Locale is often called for all localizing\/normalizing tasks within Zend_Date.\n\n\nThe first can not be accepted... and second... we have already a HUGE class... shall we really do it this way ??\n\n\nHaving setOptions() implemented is no problem for all static avaiable parameters. This will be done the next days.",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "created": "2007-03-02T00:00:22.000+0000",
                    "updated": "2007-03-02T00:00:22.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/13142",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "body": "I added setOptions with one if the latest SVN to Zend_Date and Zend_Locale.\nusePhpDateFormat was deleted.\nBoth classes use now setOptions() seperately. \n\nBut also to mention, I see some negative sideeffects having one class set to iso and the other to php as it has to be included.\nI now solve this side effects by more than 100 lines of code...\nIn my opinion there is no usecase in which a user would use iso with the one and php with the other class.\nAnd both classes are close related to each other because Zend_Locale gives Zend_Date the possibility to act locale aware.\n\nI think this decission has to be rethought... we are now at the old number of 4400 lines even after my last refactoring. Maybe you can give an usecase where we would need a seperation ??",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "created": "2007-03-05T11:00:53.000+0000",
                    "updated": "2007-03-05T11:00:53.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/13154",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "body": "I see a large number of duplicated lines of code in Date.php from the recent patch.  I do not see a reason for the duplicated code.\n\nUse cases for using both ISO and PHP date format strings:\n# Any development team integrating existing code.\n# Any development team with members having different preferences and habits (some using PHP way, some using ISO).\n# Developers using the [Zend PHP Code Gallery|http:\/\/www.zend.com\/code\/codex.php]  (some code might use PHP way, some might use ISO).\n\nSummary:\nZend_Locale has methods and state (i.e. whether or not to use ISO or PHP date format).  However, it is not a true object, because the state is stored in static class variables.   The design of Zend_Locale results in the \"extra\" code in Zend_Date to modifying the state of Zend_Locale, use Zend_Locale, and then restore the state (i.e. restore the static variable). \n\nAs always, alternative ideas and implementations are encouraged.  More options and ideas lead to synergistic solutions using the collection of alternatives discussed.  Perhaps we should consider alternative implementations that result in less code and less duplication.\n\nFor example, if these static methods and state were packaged into a true object, then the appropriate instance object property (i.e. use ISO or PHP format) could be set on the object once.  Then other code throughout the framework could use the desired instance object without having to save the state and restore the state, as done now by the recent patch to Zend_Date.",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "created": "2007-03-05T20:28:35.000+0000",
                    "updated": "2007-03-05T20:28:35.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/13157",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "body": "That's frustrating...\n\nI mentioned the problems having 2 seperated formats within 2 classes for it's own already before.\nInstead of giving me an usecase for using iso for Zend_Date and php for Zend_Locale which makes me happy you are now proposing what was integrated before my patch...\nHaving only one place for storing the format parameter.\n\nI see no difference to my first integration where the format was held within Zend_Locale_Format and your proposed change where the format is stored within an object. There is only 1 point where the information is stored, and not two as proposed by this issue. We could have let the old implementation integrated. So we have made a step back with this issue ?\nGreat... 3-4 hours work useless :-(\n\nThe benefit of Zend_Locale_Format was that it's only static !!!\nChanging this to be an object would be a step back... and extracting the date functions from Zend_Locale_Format into an own class would also result in one step back.",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "created": "2007-03-06T01:58:38.000+0000",
                    "updated": "2007-03-06T01:58:38.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/13159",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "body": "Creating and committing patches prematurely can lead to some wasted effort, but comparing ideas using code also has some value.  We all experience this process, and use our best judgement about when to discuss ideas and when to write code.\n\nI don't see any comments about \"2 classes\" above (only using instance objects).  Ideas and alternatives are always welcomed and a healthy part of the brainstorming process.\n\n{quote}Good summary of how to do a successful brainstorming.\nhttp:\/\/www.theopenforce.com\/2006\/08\/more_brainstorm.html\nAnd a bad one:\nhttp:\/\/www.theopenforce.com\/2006\/08\/brainstorm.html \n{quote}\n\nAfter the recent patch, there is still only one place to store the \"state\" in Zend_Locale_Format (i.e. \"{{public static $_usePhpDateFormat}}\") which toggles between using ISO and PHP formats.  I think my suggestion has been completed misunderstood.  The recent patch added some bloat (and lots of duplicated code).  Most of this extra code in Zend_Date could be avoided if Zend_Locale_Format was promoted to a full, \"normal\" object.\n\nIf Zend_Locale_Format could be instantiated like a normal object, and had a protected instance property (i.e. \"useIsoFormat\") defaulting to \"true\", then Zend_Date would not need to frequently modify the static class variable \"{{public static $_usePhpDateFormat = false;}}\" inside of a {{try .. catch}} block to restore the state of this variable on error.",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "created": "2007-03-06T13:37:17.000+0000",
                    "updated": "2007-03-06T13:37:17.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/13161",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "body": "But one of the big benefits of Zend_Locale_Format and _Data is that the complete class is static and can be used without initiating an object.\n\nAnd I would not want to break this only because of the format options parameter.\n\nBefore this issue was raised by the devteam I had only one parameter for the format which was used by all localizing classes. As Zend_Date also uses localizing and must load Zend_Locale_Format to work properly there was no problem.\n\nNow, as I was told to change this, we have two places where the format is stored and changed.\nAnd this leads to problems if Zend_Date is ISO and Zend_Locale is changed to PHP.\nBecause we can not convert from ISO to PHP... this would eliminate several formats... the other way from PHP to ISO is no problem.\n\nHaving Zend_Locale_Format being integrated within the Locale object would not solve the problem. You would have to change the format for each of your locale objects. And we have the problem to change the format from php to iso to work properly with Zend_Date.\n\nA much better and easier way would be to have an additional parameter where we could say that the format is in ISO per Hand...\n\nf.e.\n{code}\n    public static function getDate($date, $format = null, $locale = null, $formattype = null)\n{code}\n\nSo we could override the options-settings by giving a TRUE to $formattype and say that the format is ISO whatever options is set to.\n\nAnother way would be to have a fixed string a leading format which defines ISO as input.\nf.e.\n'*ISO*YYYY-DDD hh:mm'... *xxx* would say format xxx whatever options is set to.\n\nOptions would only set the standardformat, which could be overridden if a defined format is given.\nNo object would be needed, and the mentioned additional codelines of Zend_Date would also not be needed.",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "created": "2007-03-06T14:26:00.000+0000",
                    "updated": "2007-03-06T14:26:00.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/13162",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "body": "{quote}\"But one of the big benefits of Zend_Locale_Format and _Data is that the complete class is static and can be used without initiating an object.\"{quote}\n\nAvoiding the use of objects allows developers to directly call functions.  However, there are some advantages to object-oriented programming using objects that manage and maintain their own state.\n\n{quote}\"No object would be needed, and the mentioned additional codelines of Zend_Date would also not be needed.\"{quote}\n\nYes, but the API can become more burdensome to the developer and more complex without objects.  A large number of optional parameters can be evidence of the need for an object with state (i.e. properties) and normal methods to manipulate the state (e.g. set a locale, set a formattype, set a format) and then methods to operate on that state (e.g. getDate(), getCorrectableDate(), isDate(), convertFormat*(), etc.).  By avoiding the use of normal objects, the API becomes more complex and the developer must manage the state themselves, which is why there was a lot of code required in the recent Zend_Date patch to support {{setOptions()}}.\n\n{code}\n$format = new Zend_Locale_Format();\n$format->setLocale('en_US');\n$format->setFormatType(Zend_Locale_Format::PHP);\n$format->setFormat('h:i:s');\n$format->setPrecision(3);\n\n\/\/ now we can use our \"configured\" object directly, without having lengthy lists of arguments to each function:\n$number = $format->getNumber($input);\necho \"Locale formatted number: \", $format->toNumber($value);\necho \"Self-defined formatted number: \", $format>toNumberFormat($value);\necho \"Is number? \", $format->isNumber($input) ? 'yes' : 'no';\n$float = $format->getFloat($input);\necho \"Date = \", $format->getDate($date);\netc.\n{code}\n\nThus, for developers that use multiple functions in Zend_Locale_Format, the current approach requires far more duplication by repeatedly supplying the same arguments to the Zend_Locale_Format static methods.  If the developer could create an object, and set the properties as needed, the object would then remember the state\/arguments for use with the many methods in Zend_Locale_Format.\n\nAgain, the ideas above are brainstorming to consider alternatives that might offer improvements to existing code.  Perhaps a combination of the ideas above might yield a good end solution.",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "created": "2007-03-06T15:00:09.000+0000",
                    "updated": "2007-03-06T15:00:09.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/13170",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "body": "{quote}Avoiding the use of objects allows developers to directly call functions. {quote}\n\nBut this is the benefit not a negative thing.\n\n{quote}Yes, but the API can become more burdensome to the developer and more complex without objects. A large number of optional parameters can be evidence of the need for an object with state (i.e. properties) and normal methods to manipulate the state (e.g. set a locale, set a formattype, set a format) and then methods to operate on that state (e.g. getDate(), getCorrectableDate(), isDate(), convertFormat*(), etc.). By avoiding the use of normal objects, the API becomes more complex and the developer must manage the state themselves, which is why there was a lot of code required in the recent Zend_Date patch to support setOptions().{quote}\n\nNo... also with the actual static implementation we can add to have standard parameters set with setOptions().\nHaving an own function for each parameter as proposed in your last example does not simplify the API... it makes it more complicated because you have then about 10 new functions only for setting the parameters.\n\nThe precision or standard formatstring can also be set by setOptions... this would not mean to change all to object.\nIf you give null, the standard from setOptions would be used. But this is a new issue not related to the actual one.\n\n{code}\n\/\/ actual\nZend_Locale_Format::getNumber('1234', 2, 'en');\n\n\/\/ new\nZend_Locale_Format::setOptions(array('precission' => 2, 'locale' => 'en'));\nZend_Locale_Format::getNumber('1234');\n{code}\n\nThis would also lead to a reduced parameter list.\n\nI was originally told to use a static approach for simplicity... now I should use a object approach for simplicity ???\nDo we really know what makes a class simple to use ?? Sometimes I have the feeling that even the devteam does not know what they want me to do...\n\nAnd even now I dont see the benefit from seperating the localizing format and integrate an own within Zend_Date which caused the problems that now occur.\n\n{quote}Thus, for developers that use multiple functions in Zend_Locale_Format, the current approach requires far more duplication by repeatedly supplying the same arguments to the Zend_Locale_Format static methods. If the developer could create an object, and set the properties as needed, the object would then remember the state\/arguments for use with the many methods in Zend_Locale_Format.{quote}\n\nThe repeatedly supplied parameters are not part of this issue... we should not throw additional functionallity into another issue even if it's the same class. \n",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "created": "2007-03-06T16:13:09.000+0000",
                    "updated": "2007-03-06T16:13:09.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/13171",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=mratzloff",
                        "name": "mratzloff",
                        "displayName": "Matthew Ratzloff",
                        "active": true
                    },
                    "body": "Although I still question the need for PHP date formatting, I agree with Gavin about the API changes.  I much prefer having an object which I can manipulate once than pass arguments repeatedly.  Generally, the only variable that changes is the input format; therefore, I think that should continue to be allowed (but not required) as an argument.\n\nWhile you're changing the API, you might rename it to {{Zend_Locale_Formatter}}, too.",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=mratzloff",
                        "name": "mratzloff",
                        "displayName": "Matthew Ratzloff",
                        "active": true
                    },
                    "created": "2007-03-06T16:17:41.000+0000",
                    "updated": "2007-03-06T16:17:41.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/13176",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "body": "{quote}Although I still question the need for PHP date formatting,{quote}\n\nWhat do you mean here ?\n\nInitially I only implemented ISO format tokens because Zend_Date only accepts ISO...\nI was told to implement also PHP, which is useless in my eyes because we do not have a strict php format but we extended it with localized outputs... all monthnames for example are localized.\n\n{quote}I much prefer having an object which I can manipulate once than pass arguments repeatedly.{quote}\n\nThe mentioned feature here is not part of this issue. I already mentioned this in an earlier comment. We should not throw several issues together into one proposal. These are growing very fast even if we have only one discussed issue, because Gavin and I are normally heavily discussing pro's and con's... :-)\n\nAnd as I also mentioned before... it's not needed to have an object for setting standard parameters.\n\n{quote}Generally, the only variable that changes is the input format; therefore, I think that should continue to be allowed (but not required) as an argument.{quote}\n\nAll parameters except the input string are optional and are not required.\n\nHow ever... how often would this internal functions of Zend_Locale be needed by users ? I think almost only one user from 100 is using Zend_Locale_Format... and they are only using the isNumber\/getNumber functions because Zend_Validate can not handle localized inputs until now.\nAll other users will only use Zend_Date for date handling.\n\n{quote}While you're changing the API, you might rename it to Zend_Locale_Formatter, too{quote}\n\nSorry, but I am not allowed to change already cored functions without a decission from the devteam itself. Also having the class named \"Formatter\" implies a wrong useage of this class... but this is only my private opinion.",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "created": "2007-03-06T16:48:06.000+0000",
                    "updated": "2007-03-06T16:48:06.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/13179",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "body": "Supporting {{setOptions()}} to alter a static \"class\" variable ($_Options['format']) in Zend_Locale_Format solves Case A and B below.  Supporting {{setOptions()}} also made visible an underlying issue.   I think Matthew nicely summarized that issue.  I'm not sure we need to start another Jira issue.\n\nAfter carefully considering all of the options above, I think the simplest and quickest solution available for ZF 0.9 is:\n1) keep the setOptions() methods introduced to help address this Jira issue\n2) add  an optional parameter, \"{{$formatType = null}}\", to appropriate methods in Zend_Locale_Format\n3) the methods in 2) could use a default format type as set by 1)\n\nUse Cases (in probability of occurrence)\nCase A) Thus, if an application uses only ISO format strings, no extra userland code is needed.\nCase B) If an application uses only PHP format strings, then a single call to \"{{Zend_Locale_Format::setOptions(array('format' => 'php'));}} is needed.\nCase C) If an application uses both, then the {{$formatType}} parameter may be used.\n\nThoughts? Ideas?  Anyone?\n\nWe all greatly appreciate the effort, dedication, and ideas like 2) above that you have contributed to the i18n components, Thomas :)  Soon, a very large number of PHP developers will be using these components!\n\nP.S. My personal preference almost always goes to using normal objects that can be instantiated and manipulated using instance methods, but some have shown static methods can be convenient, such as with the ZF registry.  Compromises exist throughout any framework because of coding standards, conventions, performance optimizations, and constraints like the format of the CLDR data and past design decisions.  Thus, I recognize that theoretical ideal solutions may not apply or be \"ideal\" for particular situations.",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "created": "2007-03-06T17:30:45.000+0000",
                    "updated": "2007-03-06T17:30:45.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/13185",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "body": "I also like using objects because they have much advantages...\nbut sometimes it is not practicable to use them, and in my opinion this case is one of these.\n\n1) was already included into the core several days ago, so this part of the issue works already, is tested and documented. :-)\n\n2) I know that having a forth parameter is not so nice because of the additional parameter itself, but it is optional and these functions will not be used so much by users,  because Zend_Date does all the work :-)\nThe number formatting functions which will be used much more, are not in need of this additional formattype parameter.\n\n3) As I already wrote earlier, if null is set (which is standard) the default setting is used, but it can be overwritten per hand and Zend_Date.\n\nBut there is another way to solve this problem without having an additional parameter...\n\n\n\n\nWe could accept an array for the format parameter.\n\nactual way :\n{code}\nZend_Locale_Format::setOption('format' => 'php', 'precission' => 2);\nZend_Locale_Format::getDate('2007-03-20', 'Y-m-d');\n{code}\n\nproposed change :\n{code}\n\/\/ old way works as before\nZend_Locale_Format::setOptions('format' => 'php');\nZend_Locale_Format::getDate('2007-03-20', 'Y-m-d');\n\n\/\/ new way for overriding format by Zend_Date\n$input = array('type' => 'iso', 'format' => 'YYYY-MM-dd');\nZend_Locale_Format::getDate('2007-03-12', $input);\n\n\/\/ this also works\nZend_Locale_Format::setOptions('format' => 'php', 'date' => 'Y-m-d');\nZend_Locale_Format::getDate('2007-03-12');\nZend_Locale_Format::getDate('2006-02-17');\n{code}\n\nWe would not have to add an additional parameter, and the array would allow Zend_Date to override the set settings for the format.\n\nThoughts, Ideas ??",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "created": "2007-03-07T02:35:57.000+0000",
                    "updated": "2007-03-07T02:35:57.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/13192",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "body": "The array approach above is not tool-friendly.  How about we stay with the 1), 2), 3) approach above to solve the A), B), C) use cases?",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "created": "2007-03-07T13:45:40.000+0000",
                    "updated": "2007-03-07T13:45:40.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/13193",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "body": "{quote}The array approach above is not tool-friendly.{quote}\n\nThen the setOptions() method is also not tool friendly. :-)\nAnd I think there are several methods accepting input arrays which are not \"tool-friendly\".\n\nI didn't want to be \"tool-friendly\". I only wanted to show a method which does not need an additional parameter which is actualy only needed by Zend_Date because I once heared from the devteam that we have to implement as less parameters as possible.\n\nPersonally I would have no problem with adding an parameter.\nBut I would like to hear other opinions pro & con accepting an array as full parameter additionally to accepting several parameters.\nBecause we would not have to add an additional parameter with the new approach. As the old way also works the \"tools\" should have no problem with it.\n\nWAY 1:\nAdd an additional parameter for allowing override the formattype for Zend_Date\n{code}public static function getDate($date, $format = null, $locale = null, $formattype = null);\n\n$date = Zend_Locale_Format::getDate('2007-02-20', 'Y-m-d', 'en', 'php');\n{code}\n\n\nWAY 2:\nAccept additionally an array as first parameter to allow override the formattype for Zend_Date\n{code}public static function getDate($date, $format = null, $locale = null);\n\n$options = array('date' => '2007-02-20', 'format' => 'Y-m-d', 'type' => 'php', 'locale' => 'en');\n$date = Zend_Locale_Format::getDate($options);\n\/\/ the actual implementation also works but without overriding the type\n$olddate = Zend_Locale_Format::getDate('2007-02-20', 'Y-m-d', 'en');\n{code}\n\nI prefer WAY 2 because it does not complicate the actual standard useage.\nYou would set the options array within setOptions() and can give it also directly to the method to override the standard settings for this single method call. I would see an benefit by the useage of the same array as for setOptions().",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "created": "2007-03-07T15:02:32.000+0000",
                    "updated": "2007-03-07T15:02:32.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/13195",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "body": "{quote}Then the setOptions() method is also not tool friendly.\nAnd I think there are several methods accepting input arrays which are not \"tool-friendly\"\n{quote}\n\nTrue, but I wouldn't try to use that as a reason to justify the use of arrays in this case.\n\nIn effect \"WAY 2\" becomes a peculiar way of collecting the state of an object into an array, and passing the state to a method, instead of the traditional object-oriented approach of invoking methods on objects.\n\nI think all other occurrences of passing option arrays in the ZF currently do not mix both WAY 1 and WAY 2 (e.g. see Zend_Db, Zend_Session, etc.), since they have no additional optional arguments after the $options parameter.  In \"WAY 2\" above, $date may be either a string or an array, but additional optional parameters overlap in meaning and use with $date (when $date is an array).  I find this usage likely to confuse developers and result in problems (e.g. same option specified in two places).",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "created": "2007-03-07T15:21:34.000+0000",
                    "updated": "2007-03-07T15:21:34.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/13208",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "body": "Well, if mixing of the parameters is a problem...\n\nHow about only accepting an array for the options as it is done by Zend_Cache, Zend_Config, Zend_Session and so on.\n\nBecause in my opionion it's not so good to have that much parameters.\nSetting the options once with an array and changing or overriding them also only with an array seems to me the best way.\n\nIf we have to add another option in future additionally to the existing 5 it would be no problem.\n\n{code}public static function getDate($date, $options = null);\npublic static function getTime($time, $options = null);\npublic static function toNumberFormat($value, $options = null);\npublic static function getNumber($input, $options = null);\n{code}\n\nIn this state it would be no problem to make this change...\n\nWe would have no problem with array\/non array as mentioned above.\nWe have no problem if we have to add additional parameters in the future.\nWe can make this change only until code freeze of 0.9.\nWe would not confuse developers because all options are given the same way... for setOptions and for the detail functions as array.\nThe input itself has to be given as string. All options, which of course are optional :-) , could be set with setOptions or by giving an options array.\n\nIn my opinion this would fit perfectly in the API of Zend_Locale_Format.",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "created": "2007-03-08T13:29:50.000+0000",
                    "updated": "2007-03-08T13:29:50.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/13212",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "body": "I think using only $options, instead of having many optional parameters, is more object-oriented.\nThe state of the object consists of everything in $options (i.e. $options is almost equivalent to $this).\nObject instantiation becomes creation of the array.\nObject persistence is accomplished by saving the array somewhere for later use.\n\nThe non-optional argument corresponds to the input data for the \"method\" (i.e. static function).\n\nYes, I agree, there are fewer complications using arrays as shown in your comment above :)",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "created": "2007-03-08T14:20:55.000+0000",
                    "updated": "2007-03-08T14:20:55.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/13213",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "body": "Great that we have found together once again ;-)\n\nIssue-Production is now progress :-)",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "created": "2007-03-08T14:35:00.000+0000",
                    "updated": "2007-03-08T14:35:00.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/13214",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "body": "Looking at the recent changes to Zend_Registry, there is one concern I have resulting.\n\nIf we ever decide to add support for instantiating Zend_Locale_Format objects, the names of the instance methods can not be the same as the static methods. After ZF 0.9, the API is \"frozen\" and will be difficult to change before ZF 1.1.  Perhaps we can now think ahead about naming these static functions and instance functions.",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "created": "2007-03-08T14:47:10.000+0000",
                    "updated": "2007-03-08T14:47:10.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/13215",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "body": "I thought that we have already cleared not to make Zend_Locale_Format an object.\n\nThe actual functions are doing what their names are saying.\nIf we decide to discuss another possible future API change we will not get ready for 0.9.\n\ngetDate \/ isDate - date normalizing\ngetTime \/ isTime - time normalizing\ngetNumber \/ toNumber \/ isNumber - generic number localization\/normalization\ngetInteger \/ toInteger \/ isInteger - same as above but without any precision\ngetFloat \/ toFloat \/ isFloat - same as number \n\nTime \/ integer and Float are only added for simplicity.\n\nTo what simpler name would you want to change these ???\n\n\nBtw:\nWe could eliminate the getCorrectableDate() functions and just use an option 'fixit' or 'correct' instead.",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "created": "2007-03-08T15:13:22.000+0000",
                    "updated": "2007-03-08T15:13:22.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/13216",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "body": "Yes, no objects for now.  I was talking about the future, \"if we ever decide to add ...\".  If ZF 1.1 adds the ability to instantiate Zend_Locale_Format, what names would we use for the non-static methods?\n\nBtw, yes I also like your \"Btw\" :) .. since we are moving to using an $options array, I think it makes sense to make getDate\/getCorrectableDate functionality selectable via the $options array.  What about \"enableDateCorrection\"?  It is a long name, but has a clearer meaning.",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "created": "2007-03-08T15:48:20.000+0000",
                    "updated": "2007-03-08T15:48:20.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/13250",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "body": "Fixed with SVN 3867.",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "created": "2007-03-11T08:05:55.000+0000",
                    "updated": "2007-03-11T08:05:55.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/13558",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "body": "I'm committing a unit test to help track progress with some of the changes discussed below.\n{quote}\n-------- Original Message --------\nSubject: \tRe: [fw-i18n] setOptions() - format option, opinions wanted\nDate: \tTue, 13 Mar 2007 21:15:58 +0100\nFrom: \tThomas Weidner <thomas.weidner@gmx.at>\nTo: \tGavin Vess <gavin@zend.com>\nCC: \tZF I18n <fw-i18n@lists.zend.com>, <matt@builtfromsource.com>\n\n\n> Option 1)\n>\n> Attempting to set a default, class-wide date format or number format \n> results in an exception.\n> For example,\n> Zend_Locale_Format::setOptions(array('format' => 'y-M-d H:m:s'));\n> causes an exception.\n\nLooks good.\nWould of course only throw an exception for \"dateformat\" not for \n\"numberformat\".\n\n> Option 2)\n>\n> $locale = new Zend_Locale('de_AT');\n> Zend_Locale_Format::setOptions(array('format' => 'y-M-d H:m:s'));\n> $date = Zend_Locale_Format::getDate('13.04.2006', array('format' => \n> Zend_Locale_Format::useDefault, 'locale' => $locale));\n> \n> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n> Thus, in getDate(), if the 'locale' option is given, the class-wide \n> default 'format' (i.e. date format string) is ignored, unless the \n> developer specifically requests it using:\n>     'format' => Zend_Locale_Format::useDefault\n\nAlso looks good.\nBut this way I would say if a format is given within setOptions and only\na locale is given within getDate an exception should be thrown.\nBecause the function would not automatically know what the user wants.\n\nSo:\nZend_Locale_Format::setOptions(array('format' => 'YmD'));\nZend_Locale_Format::getDate('2007-04-05', array('locale' => 'de'));\n\nthrows an exception\n\nZend_Locale_Format::setOptions(array('format' => 'YmD'));\nZend_Locale_Format::getDate('2007-04-05', array('format' => \nZend_Locale_Format::DEFAULT, 'locale' => 'de'));\n\nworks and uses locale standard definitions ignoring 'YmD'\n\nZend_Locale_Format::setOptions(array('locale' => 'de'));\nZend_Locale_Format::getDate('2007-04-05', array('format' => \nZend_Locale_Format::DEFAULT));\nZend_Locale_Format::getDate('2007-04-05', array('format' => 'YmD'));\n\nThese 2 lines also work.\n\n> If 'locale' is *not* present in the options, then the following works, and \n> seems to have some usefulness:\n> $locale = new Zend_Locale('de_AT');\n> Zend_Locale_Format::setOptions(array('date_format' => 'y-M-d H:m:s', 'format_type' => 'php')); \n[fixed from email]\n> \/\/ use the class-wide default date format of 'y-M-d H:m:s'\n> $date = Zend_Locale_Format::getDate('13.04.2006');\n\nI could live with both as both are API conform.\nThe first is easier.\nBut I think the Options 2 with the exception included should do perfect.\n\n\n-------- Original Message --------\nSubject: \tRe: [fw-i18n] setOptions() - format option, opinions wanted\nDate: \tTue, 13 Mar 2007 23:25:05 +0100\nFrom: \tThomas Weidner <thomas.weidner@gmx.at>\nTo: \tGavin Vess <gavin@zend.com>, ZF I18n <fw-i18n@lists.zend.com>\n\n> Yup, I purposely committed the code allowing the existing class-wide \n> default 'format' to be set, and promptly posted an example of the \n> related issue to the list.  This gives others a chance to participate in \n> design and API changes and easily test.  Usually we post these \n> discussions directly to Jira issues for the i18n components.\n> \n> From the feedback so far, it sounds like splitting 'format' into \n> 'dateFormat' and 'numberFormat' is agreeable to all.\n\nThis is already in work by me, additionally with other small tweaks.\n\n> Ok, so far I like Thomas' version of Option 2 best :) .. with one minor \n> tweak to the naming of the constants:\n> \n> Use Case A\n> ============\n> Zend_Locale_Format::setOptions(array('dateFormat' => 'YmD'));\n> \n> \/\/ use default date format specifier for locale \"de\"\n> Zend_Locale_Format::getDate('2007-04-05', array('dateFormat' => \n> Zend_Locale_Format::LOCALE, 'locale' => 'de'));\n> \n> \/\/ use the class-wide default date format \"YmD\", but use \"en\" for \n> recognizing any day or month names in the input string:\n> Zend_Locale_Format::getDate('2007-April-05', array('dateFormat' => \n> Zend_Locale_Format::DEFAULT, 'locale' => 'en'));\n> \n> \/\/ throws an error, since class-wide default 'dateFormat' of \"YmD\" makes \n> the following ambiguous:\n> Zend_Locale_Format::getDate('2007-April-05', array('locale' => 'en');\n> \n> Use Case B\n> ============\n> Zend_Locale_Format::setOptions(array('locale' => 'de'));\n> \n> \/\/ use the default date format specifier for locale \"de\"\n> Zend_Locale_Format::getDate('2007-04-05', array('dateFormat' => \n> Zend_Locale_Format::DEFAULT));\n> \n> \/\/ use the user-supplied date format specifier \"YmD\" with the locale \n> \"de\" to recognize any day or month names in the input string:\n> Zend_Locale_Format::getDate('2007-Mai-05', array('dateFormat' => 'YmD'));\n\nThis is what I have in mind and what I am actually working on :-)\n{quote}",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=gavin",
                        "name": "gavin",
                        "displayName": "Gavin",
                        "active": true
                    },
                    "created": "2007-03-19T17:52:30.000+0000",
                    "updated": "2007-03-19T17:52:30.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/13730",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=till",
                        "name": "till",
                        "displayName": "Till Klampaeckel",
                        "active": true
                    },
                    "body": "If a method or function is removed, the documentation should be updated accordingly.\n\nhttp:\/\/framework.zend.com\/manual\/en\/zend.date.constants.html#zend.date.constants.phpformats\n(Example 8.11)",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=till",
                        "name": "till",
                        "displayName": "Till Klampaeckel",
                        "active": true
                    },
                    "created": "2007-03-27T12:10:23.000+0000",
                    "updated": "2007-03-27T12:10:23.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/13734",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=bkarwin",
                        "name": "bkarwin",
                        "displayName": "Bill Karwin",
                        "active": true
                    },
                    "body": "Thomas, can you please review the appropriate documentation to make sure it covers the changes?",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=bkarwin",
                        "name": "bkarwin",
                        "displayName": "Bill Karwin",
                        "active": true
                    },
                    "created": "2007-03-27T12:29:11.000+0000",
                    "updated": "2007-03-27T12:29:11.000+0000"
                },
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/13737",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "body": "The related chapter is actualy being rewritten and will be avaiable with the next release. All new and changed functions are also always documented.\n\nSometimes when releases are made they cross with work which is actually done... the latest what we do is always the documentation. \nSo please dont be angry just because we are not completly ready with what we do in our sparetime.",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "created": "2007-03-27T13:16:39.000+0000",
                    "updated": "2007-03-27T13:16:39.000+0000"
                }
            ]
        }
    },
    "transitions": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-1000\/transitions"
}