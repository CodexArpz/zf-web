{
    "expand": "html",
    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-404",
    "key": "ZF-404",
    "fields": {
        "summary": {
            "name": "summary",
            "type": "java.lang.String",
            "value": "Controller\/Dispatcher onLoad function implementation"
        },
        "timetracking": {
            "name": "timetracking",
            "type": "com.atlassian.jira.issue.fields.TimeTrackingSystemField"
        },
        "issuetype": {
            "name": "issuetype",
            "type": "com.atlassian.jira.issue.issuetype.IssueType",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/issueType\/4",
                "name": "Improvement",
                "subtask": false
            }
        },
        "votes": {
            "name": "votes",
            "type": "com.atlassian.jira.issue.fields.VotesSystemField",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-404\/votes",
                "votes": 0,
                "hasVoted": false
            }
        },
        "security": {
            "name": "security",
            "type": "com.atlassian.jira.issue.security.IssueSecurityLevel"
        },
        "resolution": {
            "name": "resolution",
            "type": "com.atlassian.jira.issue.resolution.Resolution",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/resolution\/1",
                "name": "Fixed"
            }
        },
        "fixVersions": {
            "name": "fixVersions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/version\/10002",
                    "id": 10002,
                    "description": "Preview Release; MVC refactoring and other enhancements and fixes",
                    "name": "0.2.0",
                    "userReleaseDate": "29\/Oct\/06",
                    "archived": true,
                    "releaseDate": "2006-10-29",
                    "released": true
                }
            ]
        },
        "resolutiondate": {
            "name": "resolutiondate",
            "type": "java.util.Date",
            "value": "2006-11-07T15:42:20.000+0000"
        },
        "reporter": {
            "name": "reporter",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=eugenep",
                "name": "eugenep",
                "displayName": "Eugene Panaitov",
                "active": true
            }
        },
        "created": {
            "name": "created",
            "type": "java.util.Date",
            "value": "2006-09-28T16:02:05.000+0000"
        },
        "updated": {
            "name": "updated",
            "type": "java.util.Date",
            "value": "2007-07-05T14:43:22.000+0000"
        },
        "customfield_10041": {
            "name": "Tags",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:labels"
        },
        "description": {
            "name": "description",
            "type": "java.lang.String",
            "value": "Function onLoad of a Zend_Controller can be used for example for making authorization, like checking if a user_id is in $_SESSION.  It is too much code to check for user_id in every action call.\n\nFunction onLoad is called before any Action call, so it behaves like a constructor of Zend_Controller should behave.\n\nWe need two things to implement this function.\n\nNew Dispatcher class:\n\n{code}\n<?\n\nrequire_once(\"Zend\/Controller\/Dispatcher.php\");\nrequire_once(\"Zend\/Controller\/Dispatcher\/Token.php\");\n\nclass onloadDispatcher extends Zend_Controller_Dispatcher {\n\t\n\tpublic function dispatch(Zend_Controller_Dispatcher_Token $action) {\n\n\t\t$performDispatch = true;\n\t\t\n\t\tif ($this->_directory === null) {\n         \t        throw new Zend_Controller_Dispatcher_Exception('Controller directory never set.  Use setControllerDirectory() first.');\n        \t    }\n\n\t    $className  = $this->formatControllerName($action->getControllerName());\n\t    \n\t    \/**\n\t     * Extend Admin controller action to Admin controllers\n\t     * \n\t     * Runs controllers\/admin\/LoginController instead of controllers\/AdminController->loginAction()\n\t     *\/\n\t    \n\t    if (strpos($action->getControllerName(), \"admin_\") !== false) {\n\t    \t\n\t    \t$className = substr($className, 5);\n\t    \t$this->setControllerDirectory($this->_directory.\"\/admin\");\n\t    \t\n\t    }\n\n\t    \/**\n\t     * If $performDispatch is FALSE, only determine if the controller file\n\t     * can be accessed.\n\t     *\/\n\t    if (!$performDispatch) {\n\t        return Zend::isReadable($this->_directory . DIRECTORY_SEPARATOR . $className . '.php');\n\t    }\n\n        Zend::loadClass($className, $this->_directory);\n\n        $controller = new $className();\n        if (!$controller instanceof Zend_Controller_Action) {\n           throw new Zend_Controller_Dispatcher_Exception(\"Controller \\\"$className\\\" is not an instance of Zend_Controller_Action.\");\n        }\n        \n        \/**\n         * if is defined onLoad function in a $controller\n         *\/\n        \n        if (in_array(\"onLoad\", get_class_methods($controller))) {\n        \t\n        \t\/**\n        \t * run it. If it returns $next action, return $next\n        \t *\/\n\n        \t$next = $controller->onLoad($action);\n        \t\n        \tif ($next instanceof Zend_Controller_Dispatcher_Token) {\n        \t\t\n        \t\treturn $next;\n        \t\t\n        \t}\n        \t\n        }\n        \n        \/**\n         * Dispatch\n         *\n         * Call the action of the Zend_Controller_Action.  It will return either null or a\n         * new Zend_Controller_Dispatcher_Token object.  If a Zend_Controller_Dispatcher_Token object is returned, this will be returned\n         * back to ZFrontController, which will call $this again to forward to\n         * another action.\n         *\/\n        $nextAction = $controller->run($this, $action);\n        \n        \/\/ Destroy the page controller instance\n        $controller = null;\n        \n        \/\/ Return either null (finished) or a Zend_Controller_Dispatcher_Token object (forward to another action).\n        return $nextAction; \n        \n\t}\n\t\n}\n\n\n?>\n{code}\n\nAnd Controller onLoad function\n\n{code}\nclass AdminController extends Zend_Controller_Action {\n\t\n\tpublic function onLoad(Zend_Controller_Dispatcher_Token $action) {\n                \/\/ code here\n        }\n\n}\n{code}\n\nThis wil work as follows:\n\nRequest: \/admin\n\nAdminController is called. onLoad function checks for authorization, no authorization is found, redirected to\n\n\/admin\/login\n\nAdminController is called again. onLoad function sees a request to login and return new action for LoginController, than LoginController is called."
        },
        "priority": {
            "name": "priority",
            "type": "com.atlassian.jira.issue.priority.Priority",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/priority\/4",
                "name": "Minor"
            }
        },
        "duedate": {
            "name": "duedate",
            "type": "java.util.Date"
        },
        "customfield_10022": {
            "name": "Fix Version Priority",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:select"
        },
        "watcher": {
            "name": "watcher",
            "type": "watcher",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-404\/watchers",
                "isWatching": false,
                "watchCount": 0
            }
        },
        "worklog": {
            "name": "worklog",
            "type": "worklog",
            "value": [

            ]
        },
        "status": {
            "name": "status",
            "type": "com.atlassian.jira.issue.status.Status",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/status\/5",
                "name": "Resolved"
            }
        },
        "labels": {
            "name": "labels",
            "type": "com.atlassian.jira.issue.label.Label",
            "value": [

            ]
        },
        "assignee": {
            "name": "assignee",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                "name": "matthew",
                "displayName": "Matthew Weier O'Phinney",
                "active": true
            }
        },
        "links": {
            "name": "links",
            "type": "issuelinks",
            "value": [

            ]
        },
        "attachment": {
            "name": "attachment",
            "type": "attachment",
            "value": [

            ]
        },
        "sub-tasks": {
            "name": "sub-tasks",
            "type": "issuelinks",
            "value": [

            ]
        },
        "versions": {
            "name": "versions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [

            ]
        },
        "project": {
            "name": "project",
            "type": "com.atlassian.jira.project.Project",
            "value": {
                "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/project\/ZF",
                "key": "ZF",
                "name": "Zend Framework",
                "roles": {

                }
            }
        },
        "components": {
            "name": "components",
            "type": "com.atlassian.jira.bc.project.component.ProjectComponent",
            "value": [
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/component\/10011",
                    "id": 10011,
                    "name": "Zend_Controller",
                    "description": "front controller, including router and dispatcher",
                    "isAssigneeTypeValid": false
                }
            ]
        },
        "comment": {
            "name": "comment",
            "type": "com.atlassian.jira.issue.fields.CommentSystemField",
            "value": [
                {
                    "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/comment\/11189",
                    "author": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                        "name": "matthew",
                        "displayName": "Matthew Weier O'Phinney",
                        "active": true
                    },
                    "body": "The MVC rewrite for 0.2 (incubator) addressed this issue. Action controllers now have a preDispatch() method, and the plugin broker already had one. It is now possible, however, for either one to alter the request object in order to abort the current action (and possibly move on to the next). For full information, read the MVC documentation in the incubator.",
                    "updateAuthor": {
                        "self": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/user?username=matthew",
                        "name": "matthew",
                        "displayName": "Matthew Weier O'Phinney",
                        "active": true
                    },
                    "created": "2006-11-07T15:42:20.000+0000",
                    "updated": "2006-11-07T15:42:20.000+0000"
                }
            ]
        }
    },
    "transitions": "http:\/\/framework.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-404\/transitions"
}