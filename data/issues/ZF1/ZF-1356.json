{
    "expand": "html",
    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-1356",
    "key": "ZF-1356",
    "fields": {
        "summary": {
            "name": "summary",
            "type": "java.lang.String",
            "value": "add method to get parent resource and methods get all parents of roles or resources"
        },
        "timetracking": {
            "name": "timetracking",
            "type": "com.atlassian.jira.issue.fields.TimeTrackingSystemField"
        },
        "issuetype": {
            "name": "issuetype",
            "type": "com.atlassian.jira.issue.issuetype.IssueType",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issueType\/22",
                "name": "Community Driven Feature",
                "subtask": false
            }
        },
        "votes": {
            "name": "votes",
            "type": "com.atlassian.jira.issue.fields.VotesSystemField",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-1356\/votes",
                "votes": 2,
                "hasVoted": false
            }
        },
        "security": {
            "name": "security",
            "type": "com.atlassian.jira.issue.security.IssueSecurityLevel"
        },
        "fixVersions": {
            "name": "fixVersions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [

            ]
        },
        "reporter": {
            "name": "reporter",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=mben",
                "name": "mben",
                "displayName": "Marc Bennewitz (GIATA mbH)",
                "active": true
            }
        },
        "created": {
            "name": "created",
            "type": "java.util.Date",
            "value": "2007-05-07T01:45:02.000+0000"
        },
        "updated": {
            "name": "updated",
            "type": "java.util.Date",
            "value": "2012-08-31T09:12:31.000+0000"
        },
        "customfield_10041": {
            "name": "Tags",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:labels"
        },
        "description": {
            "name": "description",
            "type": "java.lang.String",
            "value": "{code}\r\n\t\/**\r\n\t * @param Zend_Acl_Resource_Interface|string $resource\r\n\t * @return Zend_Acl_Resource_Interface|null\r\n\t *\/\r\n\tpublic function getParent($resource) {\r\n\t\t$resourceId = $this->get($resource)->getResourceId();\r\n\t\treturn $this->_resources[ $resourceId ]['parent'];\r\n\t}\r\n\t\r\n\t\/**\r\n\t * @param Zend_Acl_Resource_Interface|string $resource\r\n\t * @return array([ string => Zend_Acl_Resource_Interface[, ...]])\r\n\t *\/\r\n\tpublic function getAllParents($resource) {\r\n\t\t$resource = $this->get($resource);\r\n\t\t\r\n\t\t$parents = array();\r\n\t\tdo {\r\n\t\t\t$parent = $this->getParent($resource);\r\n\t\t\tif (!$parent) {\r\n\t\t\t\tbreak;\r\n\t\t\t} else {\r\n\t\t\t\t$resource = $parent;\r\n\t\t\t\t$parents[ $parent->getResourceId() ] = $parent;\r\n\t\t\t}\r\n\t\t} while (true);\r\n\t\t\r\n\t\treturn $parents;\r\n\t}\r\n\t\r\n\t\/\/ This method must implemented in Zend_Acl_Role_Registry\r\n\tpublic function getAllParentRoles($role) {\r\n\t\t$role = $this->getRole($role);\r\n\t\t\r\n\t\t$parents = $this->_getRoleRegistry()->getParents($role);\r\n\t\tforeach ($parents as $role) {\r\n\t\t\t$parents = array_merge($parents, $this->getAllParentRoles($role));\r\n\t\t}\r\n\t\t\r\n\t\treturn $parents;\r\n\t}\r\n{code}"
        },
        "priority": {
            "name": "priority",
            "type": "com.atlassian.jira.issue.priority.Priority",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/priority\/5",
                "name": "Trivial"
            }
        },
        "duedate": {
            "name": "duedate",
            "type": "java.util.Date"
        },
        "customfield_10022": {
            "name": "Fix Version Priority",
            "type": "com.atlassian.jira.plugin.system.customfieldtypes:select",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/customFieldOption\/10040",
                "value": " Nice to Have"
            }
        },
        "watcher": {
            "name": "watcher",
            "type": "watcher",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-1356\/watchers",
                "isWatching": false,
                "watchCount": 4
            }
        },
        "worklog": {
            "name": "worklog",
            "type": "worklog",
            "value": [

            ]
        },
        "status": {
            "name": "status",
            "type": "com.atlassian.jira.issue.status.Status",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/status\/1",
                "name": "Open"
            }
        },
        "labels": {
            "name": "labels",
            "type": "com.atlassian.jira.issue.label.Label",
            "value": [

            ]
        },
        "assignee": {
            "name": "assignee",
            "type": "com.opensymphony.user.User",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=ralph",
                "name": "ralph",
                "displayName": "Ralph Schindler",
                "active": true
            }
        },
        "links": {
            "name": "links",
            "type": "issuelinks",
            "value": [
                {
                    "issueKey": "ZF-5638",
                    "issue": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-5638",
                    "type": {
                        "name": "Related",
                        "direction": "OUTBOUND",
                        "description": "is related to"
                    }
                }
            ]
        },
        "attachment": {
            "name": "attachment",
            "type": "attachment",
            "value": [

            ]
        },
        "sub-tasks": {
            "name": "sub-tasks",
            "type": "issuelinks",
            "value": [

            ]
        },
        "versions": {
            "name": "versions",
            "type": "com.atlassian.jira.project.version.Version",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/version\/10070",
                    "id": 10070,
                    "description": "Beta Release; bug fixes",
                    "name": "0.9.2",
                    "userReleaseDate": "06\/Apr\/07",
                    "archived": true,
                    "releaseDate": "2007-04-06",
                    "released": true
                }
            ]
        },
        "project": {
            "name": "project",
            "type": "com.atlassian.jira.project.Project",
            "value": {
                "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/project\/ZF",
                "key": "ZF",
                "name": "Zend Framework",
                "roles": {

                }
            }
        },
        "components": {
            "name": "components",
            "type": "com.atlassian.jira.bc.project.component.ProjectComponent",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/component\/10070",
                    "id": 10070,
                    "name": "Zend_Acl",
                    "description": "Access control list authorization component",
                    "isAssigneeTypeValid": false
                }
            ]
        },
        "comment": {
            "name": "comment",
            "type": "com.atlassian.jira.issue.fields.CommentSystemField",
            "value": [
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/14497",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=bkarwin",
                        "name": "bkarwin",
                        "displayName": "Bill Karwin",
                        "active": true
                    },
                    "body": "Assigning to Darby.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=bkarwin",
                        "name": "bkarwin",
                        "displayName": "Bill Karwin",
                        "active": true
                    },
                    "created": "2007-05-07T11:57:20.000+0000",
                    "updated": "2007-05-07T11:57:20.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/16052",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=sorin",
                        "name": "sorin",
                        "displayName": "Sorin Alin Stoiana",
                        "active": true
                    },
                    "body": "{code:title=Acl.php|php}\n    \/**\n     * Returns all the Roles \n     * \n     * @uses   Zend_Acl_Role_Registry::getAll()\n     * @return Zend_Acl_Role_Interface[]\n     *\/\n    public function getRoleAll()\n    {\n        return $this->_getRoleRegistry()->getAll();\n    }\n    \n    \/**\n     * Returns an array with the given Role's parents\n     *\n     * @uses Zend_Acl_Role_Registry::getParents()\n     * @return array()\n     *\/\n    public function getRoleParents($role) \n    {\n        return $this->_getRoleRegistry()->getParents($role);\n    }\n    \n    \/**\n     * Returns an array with all the given Role's parents and ancestors, parsed BF\n     *\n     * @param Zend_Acl_Role_Interface|string $role\n     * @return array\n     *\/\n    public function getRoleAllParents($role) \n    {\n        return $this->_getRoleRegistry()->getAllParents($role);\n    }\n\n\/\/\n\/\/\n\/\/\n\n\n    \/**\n     * Returns parent resource for a given resource\n     * \n     * @param Zend_Acl_Resource_Interface|string $resource\n     * @return Zend_Acl_Resource_Interface|null\n     *\/\n    public function getParent($resource) {\n        $resourceId = $this->get($resource)->getResourceId();\n        return $this->_resources[ $resourceId ]['parent'];\n    }\n    \n    \/**\n     * Returns child resources for a given resource\n     *\n     * @param Zend_Acl_Resource_Interface|string $resource\n     * @throws Zend_Acl_Exception\n     * @return Zend_Acl_Resource_Interface[]\n     *\/\n    public function getChildren( $resource )\n    {\n        if($resource == null){\n            $resourceId = null;\n        } else {\n            if ($resource instanceof Zend_Acl_Resource_Interface) {\n                $resourceId = $resource->getResourceId();\n            } else {\n                $resourceId = (string) $resource;\n            }\n\n            if (!$this->has($resource)) {\n                require_once 'Zend\/Acl\/Exception.php';\n                throw new Zend_Acl_Exception(\"Resource '$resourceId' not found\");\n            }\n        }\n\n        $children = array();\n\t\t\n        if($resourceId == null)\n        {\n            foreach($this->_resources as $currentResourceId => $currentResource) {\n                if($currentResource['parent'] == null) {\n                    $children[$currentResourceId] = $currentResource['instance'];\n                }\n            }\n        }\n        else {\n            $children = $this->_resources[$resourceId]['children'];\n        }\n\n        return $children;\n    }\n\n{code}\n\n{code:title=Registry.php|php}\n    \/**\n     * returns all the roles in the registry\n     * \n     * @return Zend_Acl_Role_Interface\n     *\/\n    public function getAll()\n    {\n        $roles = array();\n        \n        foreach($this->_roles as $currentRole)\n        {\n            $roles[] = $currentRole['instance'];\n        }\n        return $roles;\n    }\n\n    \/**\n     * Returns an array of an existing Role's parents, parsed in BF fashion\n     *\n     * @param Zend_Acl_Role_Interface|string $role\n     * @return array\n     *\/\n    public function getAllParents($role) \n    {   \n        $parents = $this->getParents($role);\n        \n        foreach ($parents as $role) {\n            $parents = array_merge($parents, $this->getAllParents($role));\n        }\n        \n        return $parents;\n    }\n\n{code}\n",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=sorin",
                        "name": "sorin",
                        "displayName": "Sorin Alin Stoiana",
                        "active": true
                    },
                    "created": "2007-07-30T14:26:35.000+0000",
                    "updated": "2007-07-30T14:26:35.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/16053",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=sorin",
                        "name": "sorin",
                        "displayName": "Sorin Alin Stoiana",
                        "active": true
                    },
                    "body": "There should also be some methods for retrieving Role children. I'm working on those, and will post them here. ",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=sorin",
                        "name": "sorin",
                        "displayName": "Sorin Alin Stoiana",
                        "active": true
                    },
                    "created": "2007-07-30T14:28:12.000+0000",
                    "updated": "2007-07-30T14:28:12.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/16085",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=darby",
                        "name": "darby",
                        "displayName": "Darby Felton",
                        "active": true
                    },
                    "body": "Resources are organized into a tree. Therefore, at most one parent resource can exist for any given resource.\n\nRoles are organized into a directed acyclic graph (DAG). Therefore, a role may have zero, one, or more than one parent roles.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=darby",
                        "name": "darby",
                        "displayName": "Darby Felton",
                        "active": true
                    },
                    "created": "2007-07-31T11:54:22.000+0000",
                    "updated": "2007-07-31T11:54:22.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/16086",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=darby",
                        "name": "darby",
                        "displayName": "Darby Felton",
                        "active": true
                    },
                    "body": "I see that the intent is to fetch all ancestors (i.e., parents, grandparents, and so on) of a role or resource. Though this is fine, the results hide the actual data structure. For example, it is not apparent whether a returned \"parent\" resource is actually a parent, the parent of a parent, and so on.\n\nFurther, for what purpose is such information useful, I'm curious? That is, what use case requirements do these new methods help to meet?",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=darby",
                        "name": "darby",
                        "displayName": "Darby Felton",
                        "active": true
                    },
                    "created": "2007-07-31T11:59:36.000+0000",
                    "updated": "2007-07-31T11:59:36.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/16120",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=sorin",
                        "name": "sorin",
                        "displayName": "Sorin Alin Stoiana",
                        "active": true
                    },
                    "body": "It seems logical to be able to interrogate the Acl object once created, to meet the needs of (say) a CMS, where roles, resources and permissions vary dynamically to match the structure of the content. \n\nA typical use case would be listing all the Roles defined in the Acl:\n\n{code}\n\/\/users will be stored in the DB, in order to also allow authorization using Zend_Auth\nclass Pornlist_Db_Users_Row extends Zend_Db_Table_Row_Abstract implements Zend_Acl_Role_Interface\n{\n\/\/\n\/\/\n\/\/\n}\n\nforeach($acl->getRoleAll() as $role)\n    \t{\n                \/\/ we don't want to display users stored in the Acl\n    \t\tif($role instanceof MyApp_Acl_Role_User) continue;\n    \t\t\n    \t\t$parents = $acl->getRoleParents($role);\n    \t\t\n    \t\t$parents_data = array();\n    \t\tforeach($parents as $parent)\n    \t\t{\n    \t\t\t$parents_data[] = $parent->getRoleId();\n    \t\t}\n    \t\t\n    \t\t$role_data[] = array( \n    \t\t\t'name' \t\t=> $role->getRoleId(),\n    \t\t\t'parents'\t=> $parents_data, \n    \t\t\t'actions'\t=> array(\n    \t\t\t\t'delete'\t=> '\/admin\/aclroles\/delete\/id\/'.$role->getRoleId(),\n    \t\t\t\t'edit' \t\t=> '\/admin\/aclroles\/edit\/id\/'.$role->getRoleId(),\n    \t\t\t)\n    \t\t);\n    \t}\n{code}",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=sorin",
                        "name": "sorin",
                        "displayName": "Sorin Alin Stoiana",
                        "active": true
                    },
                    "created": "2007-08-01T14:24:01.000+0000",
                    "updated": "2007-08-01T14:24:01.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/34374",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=ralph",
                        "name": "ralph",
                        "displayName": "Ralph Schindler",
                        "active": true
                    },
                    "body": "While this is a worthwhile feature, the ZF team will not develop this feature, but if a community member would like to pick up and develop it, they may make an assignment of it.",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=ralph",
                        "name": "ralph",
                        "displayName": "Ralph Schindler",
                        "active": true
                    },
                    "created": "2009-09-10T08:36:40.000+0000",
                    "updated": "2009-09-10T08:36:40.000+0000"
                },
                {
                    "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/comment\/39437",
                    "author": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "body": "Reassigned to component maintainer",
                    "updateAuthor": {
                        "self": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/user?username=thomas",
                        "name": "thomas",
                        "displayName": "Thomas Weidner",
                        "active": true
                    },
                    "created": "2010-03-21T10:30:26.000+0000",
                    "updated": "2010-03-21T10:30:26.000+0000"
                }
            ]
        }
    },
    "transitions": "http:\/\/fw02.zend.com\/issues\/rest\/api\/latest\/issue\/ZF-1356\/transitions"
}