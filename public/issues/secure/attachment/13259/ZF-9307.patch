Index: library/Zend/Rest/Client.php
===================================================================
--- library/Zend/Rest/Client.php	(revision 22849)
+++ library/Zend/Rest/Client.php	(working copy)
@@ -1,4 +1,4 @@
-<?php
+<?php
 /**
  * Zend Framework
  *
@@ -18,241 +18,242 @@
  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)
  * @license    http://framework.zend.com/license/new-bsd     New BSD License
  * @version    $Id$
- */
-
-
-/** Zend_Service_Abstract */
-require_once 'Zend/Service/Abstract.php';
-
-/** Zend_Rest_Client_Result */
-require_once 'Zend/Rest/Client/Result.php';
-
-/** Zend_Uri */
-require_once 'Zend/Uri.php';
-
+ */
+
+/** Zend_Service_Abstract */
+require_once 'Zend/Service/Abstract.php';
+
+/** Zend_Rest_Client_Result */
+require_once 'Zend/Rest/Client/Result.php';
+
+/** Zend_Uri */
+require_once 'Zend/Uri.php';
+
 /**
  * @category   Zend
  * @package    Zend_Rest
  * @subpackage Client
  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)
  * @license    http://framework.zend.com/license/new-bsd     New BSD License
- */
-class Zend_Rest_Client extends Zend_Service_Abstract
-{
-    /**
-     * Data for the query
-     * @var array
-     */
-    protected $_data = array();
-
-     /**
-     * Zend_Uri of this web service
-     * @var Zend_Uri_Http
-     */
-    protected $_uri = null;
-
-    /**
-     * Constructor
-     *
-     * @param string|Zend_Uri_Http $uri URI for the web service
-     * @return void
-     */
-    public function __construct($uri = null)
-    {
-        if (!empty($uri)) {
-            $this->setUri($uri);
-        }
-    }
-
-    /**
-     * Set the URI to use in the request
-     *
-     * @param string|Zend_Uri_Http $uri URI for the web service
-     * @return Zend_Rest_Client
-     */
-    public function setUri($uri)
-    {
-        if ($uri instanceof Zend_Uri_Http) {
-            $this->_uri = $uri;
-        } else {
-            $this->_uri = Zend_Uri::factory($uri);
-        }
-
-        return $this;
-    }
-
-    /**
-     * Retrieve the current request URI object
-     *
-     * @return Zend_Uri_Http
-     */
-    public function getUri()
-    {
-        return $this->_uri;
-    }
-
-    /**
-     * Call a remote REST web service URI and return the Zend_Http_Response object
-     *
-     * @param  string $path            The path to append to the URI
-     * @throws Zend_Rest_Client_Exception
-     * @return void
-     */
-    final private function _prepareRest($path)
-    {
-        // Get the URI object and configure it
-        if (!$this->_uri instanceof Zend_Uri_Http) {
-            require_once 'Zend/Rest/Client/Exception.php';
-            throw new Zend_Rest_Client_Exception('URI object must be set before performing call');
-        }
-
-        $uri = $this->_uri->getUri();
-
-        if ($path[0] != '/' && $uri[strlen($uri)-1] != '/') {
-            $path = '/' . $path;
-        }
-
-        $this->_uri->setPath($path);
-
-        /**
-         * Get the HTTP client and configure it for the endpoint URI.  Do this each time
-         * because the Zend_Http_Client instance is shared among all Zend_Service_Abstract subclasses.
-         */
-        self::getHttpClient()->resetParameters()->setUri($this->_uri);
-    }
-
-    /**
-     * Performs an HTTP GET request to the $path.
-     *
-     * @param string $path
-     * @param array  $query Array of GET parameters
-     * @throws Zend_Http_Client_Exception
-     * @return Zend_Http_Response
-     */
-    final public function restGet($path, array $query = null)
-    {
-        $this->_prepareRest($path);
-        $client = self::getHttpClient();
-        $client->setParameterGet($query);
-        return $client->request('GET');
-    }
-
-    /**
-     * Perform a POST or PUT
-     *
-     * Performs a POST or PUT request. Any data provided is set in the HTTP
-     * client. String data is pushed in as raw POST data; array or object data
-     * is pushed in as POST parameters.
-     *
-     * @param mixed $method
-     * @param mixed $data
-     * @return Zend_Http_Response
-     */
-    protected function _performPost($method, $data = null)
-    {
-        $client = self::getHttpClient();
-        if (is_string($data)) {
-            $client->setRawData($data);
-        } elseif (is_array($data) || is_object($data)) {
-            $client->setParameterPost((array) $data);
-        }
-        return $client->request($method);
-    }
-
-    /**
-     * Performs an HTTP POST request to $path.
-     *
-     * @param string $path
-     * @param mixed $data Raw data to send
-     * @throws Zend_Http_Client_Exception
-     * @return Zend_Http_Response
-     */
-    final public function restPost($path, $data = null)
-    {
-        $this->_prepareRest($path);
-        return $this->_performPost('POST', $data);
-    }
-
-    /**
-     * Performs an HTTP PUT request to $path.
-     *
-     * @param string $path
-     * @param mixed $data Raw data to send in request
-     * @throws Zend_Http_Client_Exception
-     * @return Zend_Http_Response
-     */
-    final public function restPut($path, $data = null)
-    {
-        $this->_prepareRest($path);
-        return $this->_performPost('PUT', $data);
-    }
-
-    /**
-     * Performs an HTTP DELETE request to $path.
-     *
-     * @param string $path
-     * @throws Zend_Http_Client_Exception
-     * @return Zend_Http_Response
-     */
-    final public function restDelete($path)
-    {
-        $this->_prepareRest($path);
-        return self::getHttpClient()->request('DELETE');
-    }
-
-    /**
-     * Method call overload
-     *
-     * Allows calling REST actions as object methods; however, you must
-     * follow-up by chaining the request with a request to an HTTP request
-     * method (post, get, delete, put):
-     * <code>
-     * $response = $rest->sayHello('Foo', 'Manchu')->get();
-     * </code>
-     *
-     * Or use them together, but in sequential calls:
-     * <code>
-     * $rest->sayHello('Foo', 'Manchu');
-     * $response = $rest->get();
-     * </code>
-     *
-     * @param string $method Method name
-     * @param array $args Method args
-     * @return Zend_Rest_Client_Result|Zend_Rest_Client Zend_Rest_Client if using
-     * a remote method, Zend_Rest_Client_Result if using an HTTP request method
-     */
-    public function __call($method, $args)
-    {
-        $methods = array('post', 'get', 'delete', 'put');
-
-        if (in_array(strtolower($method), $methods)) {
-            if (!isset($args[0])) {
-                $args[0] = $this->_uri->getPath();
-            }
-            $this->_data['rest'] = 1;
-            $data = array_slice($args, 1) + $this->_data;
-            $response = $this->{'rest' . $method}($args[0], $data);
-            $this->_data = array();//Initializes for next Rest method.
-            return new Zend_Rest_Client_Result($response->getBody());
-        } else {
-            // More than one arg means it's definitely a Zend_Rest_Server
-            if (sizeof($args) == 1) {
-                // Uses first called function name as method name
-                if (!isset($this->_data['method'])) {
-                    $this->_data['method'] = $method;
-                    $this->_data['arg1']  = $args[0];
-                }
-                $this->_data[$method]  = $args[0];
-            } else {
-                $this->_data['method'] = $method;
-                if (sizeof($args) > 0) {
-                    foreach ($args as $key => $arg) {
-                        $key = 'arg' . $key;
-                        $this->_data[$key] = $arg;
-                    }
-                }
-            }
-            return $this;
-        }
-    }
+ */
+class Zend_Rest_Client extends Zend_Service_Abstract {
+	/**
+	 * Data for the query
+	 * @var array
+	 */
+	protected $_data = array ();
+	
+	/**
+	 * Zend_Uri of this web service
+	 * @var Zend_Uri_Http
+	 */
+	protected $_uri = null;
+	
+	/**
+	 * Constructor
+	 *
+	 * @param string|Zend_Uri_Http $uri URI for the web service
+	 * @return void
+	 */
+	public function __construct($uri = null) {
+		if (! empty ( $uri )) {
+			$this->setUri ( $uri );
+		}
+	}
+	
+	/**
+	 * Set the URI to use in the request
+	 *
+	 * @param string|Zend_Uri_Http $uri URI for the web service
+	 * @return Zend_Rest_Client
+	 */
+	public function setUri($uri) {
+		if ($uri instanceof Zend_Uri_Http) {
+			$this->_uri = $uri;
+		} else {
+			$this->_uri = Zend_Uri::factory ( $uri );
+		}
+		
+		return $this;
+	}
+	
+	/**
+	 * Retrieve the current request URI object
+	 *
+	 * @return Zend_Uri_Http
+	 */
+	public function getUri() {
+		return $this->_uri;
+	}
+	
+	/**
+	 * Call a remote REST web service URI and return the Zend_Http_Response object
+	 *
+	 * @param  string $path            The path to append to the URI
+	 * @throws Zend_Rest_Client_Exception
+	 * @return void
+	 */
+	final private function _prepareRest($path) {
+		// Get the URI object and configure it
+		if (! $this->_uri instanceof Zend_Uri_Http) {
+			require_once 'Zend/Rest/Client/Exception.php';
+			throw new Zend_Rest_Client_Exception ( 'URI object must be set before performing call' );
+		}
+		
+		$uri = $this->_uri->getUri ();
+		
+		if ($path [0] != '/' && $uri [strlen ( $uri ) - 1] != '/') {
+			$path = '/' . $path;
+		}
+		
+		$this->_uri->setPath ( $path );
+		
+		/**
+		 * Get the HTTP client and configure it for the endpoint URI.  Do this each time
+		 * because the Zend_Http_Client instance is shared among all Zend_Service_Abstract subclasses.
+		 */
+		self::getHttpClient ()->resetParameters ()->setUri ( $this->_uri );
+	}
+	
+	/**
+	 * Performs an HTTP GET request to the $path.
+	 *
+	 * @param string $path
+	 * @param array  $query Array of GET parameters
+	 * @throws Zend_Http_Client_Exception
+	 * @return Zend_Http_Response
+	 */
+	final public function restGet($path, array $query = null) {
+		$this->_prepareRest ( $path );
+		$client = self::getHttpClient ();
+		$client->setParameterGet ( $query );
+		return $client->request ( 'GET' );
+	}
+	
+	/**
+	 * Perform a POST or PUT
+	 *
+	 * Performs a POST or PUT request. Any data provided is set in the HTTP
+	 * client. String data is pushed in as raw POST data; array or object data
+	 * is pushed in as POST parameters.
+	 *
+	 * @param mixed $method
+	 * @param mixed $data
+	 * @return Zend_Http_Response
+	 */
+	protected function _performPost($method, $data = null) {
+		$client = self::getHttpClient ();
+		if (is_string ( $data )) {
+			$client->setRawData ( $data );
+		} elseif (is_array ( $data ) || is_object ( $data )) {
+			$client->setParameterPost ( ( array ) $data );
+		}
+		return $client->request ( $method );
+	}
+	
+	/**
+	 * Performs an HTTP POST request to $path.
+	 *
+	 * @param string $path
+	 * @param mixed $data Raw data to send
+	 * @throws Zend_Http_Client_Exception
+	 * @return Zend_Http_Response
+	 */
+	final public function restPost($path, $data = null) {
+		$this->_prepareRest ( $path );
+		return $this->_performPost ( 'POST', $data );
+	}
+	
+	/**
+	 * Performs an HTTP PUT request to $path.
+	 *
+	 * @param string $path
+	 * @param mixed $data Raw data to send in request
+	 * @throws Zend_Http_Client_Exception
+	 * @return Zend_Http_Response
+	 */
+	final public function restPut($path, $data = null) {
+		$this->_prepareRest ( $path );
+		return $this->_performPost ( 'PUT', $data );
+	}
+	
+	/**
+	 * Performs an HTTP DELETE request to $path.
+	 *
+	 * @param string $path
+	 * @throws Zend_Http_Client_Exception
+	 * @return Zend_Http_Response
+	 */
+	final public function restDelete($path) {
+		$this->_prepareRest ( $path );
+		return self::getHttpClient ()->request ( 'DELETE' );
+	}
+	
+	/**
+	 * Method call overload
+	 *
+	 * Allows calling REST actions as object methods; however, you must
+	 * follow-up by chaining the request with a request to an HTTP request
+	 * method (post, get, delete, put):
+	 * <code>
+	 * $rest = new Zend_Rest_Client('http://framework.zend.com/rest/');
+	 * $response = $rest->sayHello('Foo', 'Manchu')->get(); // creates a GET request for http://framework.zend.com/rest/?method=sayHello&arg0=Foo&arg1=Manchu
+	 * </code>
+	 *
+	 * Or use method calls to specify paramter names
+	 * <code>
+	 * $rest = new Zend_Rest_Client('http://framework.zend.com/rest/');
+	 * $rest->method('sayHello');
+	 * $rest->first_name('Foo');
+	 * $rest->last_name('Manchu');
+	 * $response = $rest->get(); // creates a GET request for http://framework.zend.com/rest/?method=sayHello&first_name=Foo&last_name=Manchu
+	 * </code>
+	 * 
+	 * Or simply call a url
+	 * <code>
+	 * $response = new Zend_Rest_Client().get->('http://framework.zend.com/rest/?method=sayHello&first_name=Foo&last_name=Manchu');
+	 * // alternatively:
+	 * $response = new Zend_Rest_Client('http://framework.zend.com/rest/?method=sayHello&first_name=Foo&last_name=Manchu').get->();
+	 * </code>
+	 *
+	 * @param string $method Method name
+	 * @param array $args Method args
+	 * @return Zend_Rest_Client_Result|Zend_Rest_Client Zend_Rest_Client if using
+	 * a remote method, Zend_Rest_Client_Result if using an HTTP request method
+	 */
+	public function __call($method, $args) {
+		$methods = array ('post', 'get', 'delete', 'put' );
+		
+		if (in_array ( strtolower ( $method ), $methods )) {
+			if (! isset ( $args [0] )) {
+				$args [0] = $this->_uri->getPath ();
+			}
+			
+			$data = array_slice ( $args, 1 ) + $this->_data;
+			$response = $this->{'rest' . $method} ( $args [0], $data );
+			$this->_data = array (); //Initializes for next Rest method.
+			return new Zend_Rest_Client_Result ( $response->getBody () );
+		} else {
+			if (sizeof ( $args ) == 1) {
+				// Use called function name as parameter name
+				if (! isset ( $this->_data [$method] )) {
+					$this->_data [$method] = $args [0];
+				}
+				else {
+					throw new Zend_Rest_Client_Exception('Invalid call to ' . $method . '.  The method has already been called and cannot be called again until the request is executed.');
+				}
+				$this->_data [$method] = $args [0];
+			} else {
+				if(!empty($this->_data)) {
+					throw new Zend_Rest_Client_Exception('Invalid call to ' . $method . '.  A previous method call has already specified the request parameters.');
+				}
+				$this->_data ['method'] = $method;
+				foreach ( $args as $key => $arg ) {
+					$key = 'arg' . $key;
+					$this->_data [$key] = $arg;
+				}
+			}
+		}
+		return $this;
+	}
 }
Index: tests/Zend/Rest/ClientTest.php
===================================================================
--- tests/Zend/Rest/ClientTest.php	(revision 22849)
+++ tests/Zend/Rest/ClientTest.php	(working copy)
@@ -56,6 +56,14 @@
 
         $this->rest = new Zend_Rest_Client('http://framework.zend.com/');
     }
+    
+    public function ttestGet()
+    {
+    	$client = new Zend_Rest_Client('http://api.twitter.com/1/users/show.xml');
+		$client->screen_name('noradio');
+		
+		$result = $client->get();
+    }
 
     public function testUri()
     {
@@ -90,13 +98,9 @@
         $this->adapter->setResponse($response);
 
         $rest = new Zend_Rest_Client();
-
-        try {
-            $response = $rest->restGet('/rest/');
-            $this->fail('Should throw exception if no URI in object');
-        } catch (Exception $e) {
-            // success
-        }
+        
+        $this->setExpectedException("Zend_Rest_Client_Exception", 'URI object must be set');
+        $response = $rest->restGet('/rest/');
     }
 
     public function testRestFixesPathWithMissingSlashes()
@@ -250,6 +254,48 @@
         $this->assertTrue($response->isSuccess());
         $this->assertEquals('string', $response->response());
     }
+    
+    public function testCall_AsParameter_ThrowsException_WhenDuplicated()
+    {
+    	$this->rest = new Zend_Rest_Client();
+    	$this->rest->first_name('foo');
+    	$this->setExpectedException("Zend_Rest_Client_Exception", 'Invalid call to first_name.  The method has already been called and cannot be called again until the request is executed.');
+    	$this->rest->first_name('bar');
+    }
+    
+    public function testCall_AsObjectMethod_ThrowsException_WhenDirty()
+    {
+    	$this->rest = new Zend_Rest_Client();
+    	$this->rest->doSomething('foo', 'bar');
+    	$this->setExpectedException('Zend_Rest_Client_Exception', 'Invalid call to doSomethingElse.  A previous method call has already specified the request parameters.');
+    	$this->rest->doSomethingElse('foo', 'bar');
+    }
+    
+    public function testCall_AsRestMethod_ClearsData()
+    {
+        $expXml   = file_get_contents($this->path . 'returnString.xml');
+        $response = "HTTP/1.0 200 OK\r\n"
+                  . "X-powered-by: PHP/5.2.0\r\n"
+                  . "Content-type: text/xml\r\n"
+                  . "Content-length: " . strlen($expXml) . "\r\n"
+                  . "Server: Apache/1.3.34 (Unix) PHP/5.2.0)\r\n"
+                  . "Date: Tue, 06 Feb 2007 15:01:47 GMT\r\n"
+                  . "Connection: close\r\n"
+                  . "\r\n"
+                  . $expXml;
+        $this->adapter->setResponse($response);
+        
+    	$this->rest->doSomething('foo', 'bar');
+    	$this->rest->get();
+    	$this->rest->doSomethingElse('foo', 'bar');
+    	$this->rest->get();
+    }
+    
+    public function testCall_AsParameter_ReturnsClient()
+    {
+    	$client = new Zend_Rest_Client();
+    	$this->assertSame($client, $client->foo('bar')->bar('foo'));
+    }
 
     public function testCallAsObjectMethodReturnsClient()
     {
