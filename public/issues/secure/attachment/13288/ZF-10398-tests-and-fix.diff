--- library/Zend/Reflection/Method.php	(revision 22916)
+++ library/Zend/Reflection/Method.php	(working copy)
@@ -153,16 +153,24 @@
         $firstLine = array_shift($lines);
 
         if (trim($firstLine) !== '{') {
+            // if line has method's opening curly brace and more code, remove first curly brace (leaving spaces intact)
+            if (substr(ltrim($firstLine), 0, 1) == '{') {
+                //$firstLine = preg_replace('/{/', '', $firstLine, 1);
+                $firstLine = substr(ltrim($firstLine), 1);
+            }
             array_unshift($lines, $firstLine);
         }
 
         $lastLine = array_pop($lines);
 
         if (trim($lastLine) !== '}') {
+            // if line has code and the method's closing curly brace, remove trailing spaces and last curly brace
+            if (substr(rtrim($lastLine), -1, 1) == '}') {
+                $lastLine = substr(rtrim($lastLine), 0, -1);
+            }
             array_push($lines, $lastLine);
         }
 
-        // just in case we had code on the bracket lines
-        return rtrim(ltrim(implode("\n", $lines), '{'), '}');
+        return implode("\n", $lines);
     }
 }
Index: tests/Zend/Reflection/_files/TestSampleClass.php
===================================================================
--- tests/Zend/Reflection/_files/TestSampleClass.php	(revision 22916)
+++ tests/Zend/Reflection/_files/TestSampleClass.php	(working copy)
@@ -160,6 +160,76 @@
 }
 
 /**
+ * TestSampleClass7 Docblock Short Desc
+ * 
+ * @author Konr Ness <konrness@gmail.com>
+ */
+class Zend_Reflection_TestSampleClass7
+{
+
+    /**
+     * Method ShortDescription
+     *
+     * @emptyTag
+     * @descriptionTag           A tag with just a description
+     * @param   int     $var     Description of $var
+     * @return  string           Description of return value
+     */
+    public function codeOnOpeningBraceLine()
+    {return 'mixedValue';
+    }
+
+    /**
+     * Method ShortDescription
+     *
+     * @emptyTag
+     * @descriptionTag           A tag with just a description
+     * @param   int     $var     Description of $var
+     * @return  string           Description of return value
+     */
+    public function codeOnClosingBraceLine()
+    {
+        return 'mixedValue';}
+
+    /**
+     * Method ShortDescription
+     *
+     * @emptyTag
+     * @descriptionTag           A tag with just a description
+     * @param   int     $var     Description of $var
+     * @return  string           Description of return value
+     */
+    public function curlyBraceLastCharacter()
+    {
+        if (1>2) {}
+    }
+
+    /**
+     * Method ShortDescription
+     *
+     * @emptyTag
+     * @descriptionTag           A tag with just a description
+     * @param   int     $var     Description of $var
+     * @return  string           Description of return value
+     */
+    public function curlyBraceLastCharacterAndOnClosingBraceLine()
+    {
+        if (1>2) {}}
+
+        
+    /**
+     * Method ShortDescription
+     *
+     * @emptyTag
+     * @descriptionTag           A tag with just a description
+     * @param   int     $var     Description of $var
+     * @return  string           Description of return value
+     */
+    public function curlyBraceLastCharacterAndOnOpeningAndClosingBraceLine()
+    {if (1>2) {}}
+}
+
+/**
  * Enter description here...
  *
  * @param string $one
Index: tests/Zend/Reflection/MethodTest.php
===================================================================
--- tests/Zend/Reflection/MethodTest.php	(revision 22916)
+++ tests/Zend/Reflection/MethodTest.php	(working copy)
@@ -85,6 +85,66 @@
         $this->assertEquals($body, $reflectionMethod->getBody());
     }
 
+    /**
+     * If code exists on same line as the method's opening brace, the opening brace must be stripped
+     * 
+     * @group ZF-10398
+     */
+    public function testGetBodyReturnsCorrectContentWithCodeOnOpeningBraceLine()
+    {
+        $body = 'return \'mixedValue\';';
+        $reflectionMethod = new Zend_Reflection_Method('Zend_Reflection_TestSampleClass7', 'codeOnOpeningBraceLine');
+        $this->assertEquals($body, $reflectionMethod->getBody());
+    }
+
+    /**
+     * If code exists on the same line as the method's closing brace, the closing brace must be stripped
+     * 
+     * @group ZF-10398
+     */
+    public function testGetBodyReturnsCorrectContentWithCodeOnClosingBraceLine()
+    {
+        $body = '        return \'mixedValue\';';
+        $reflectionMethod = new Zend_Reflection_Method('Zend_Reflection_TestSampleClass7', 'codeOnClosingBraceLine');
+        $this->assertEquals($body, $reflectionMethod->getBody());
+    }
+
+    /**
+     * If code exists on the same line as the method's closing brace, and the code ends with a closing brace, the method's closing brace must be stripped
+     * 
+     * @group ZF-10398
+     */
+    public function testGetBodyReturnsCorrectContentWithCodeWithClosingBraceOnClosingBraceLine()
+    {
+        $body = '        if (1>2) {}';
+        $reflectionMethod = new Zend_Reflection_Method('Zend_Reflection_TestSampleClass7', 'curlyBraceLastCharacterAndOnClosingBraceLine');
+        $this->assertEquals($body, $reflectionMethod->getBody());
+    }
+
+    /**
+     * If code exists on the same line as the method's opening and closing brace, and teh code ends with a closing brace, the method's opening and closing brace must be stripped
+     * 
+     * @group ZF-10398
+     */
+    public function testGetBodyReturnsCorrectContentWithCodeWithClosingBraceOnOpeningAndClosingBraceLine()
+    {
+        $body = 'if (1>2) {}';
+        $reflectionMethod = new Zend_Reflection_Method('Zend_Reflection_TestSampleClass7', 'curlyBraceLastCharacterAndOnOpeningAndClosingBraceLine');
+        $this->assertEquals($body, $reflectionMethod->getBody());
+    }
+
+    /**
+     * If a closing brace is the last character of the method's body, it must not be stripped
+     * 
+     * @group ZF-10398
+     */
+    public function testGetBodyReturnsCorrectContentWithClosingBrace()
+    {
+        $body = '        if (1>2) {}';
+        $reflectionMethod = new Zend_Reflection_Method('Zend_Reflection_TestSampleClass7', 'curlyBraceLastCharacter');
+        $this->assertEquals($body, $reflectionMethod->getBody());
+    }
+
     public function testGetContentsReturnsCorrectContent()
     {
         $reflectionMethod = new Zend_Reflection_Method('Zend_Reflection_TestSampleClass5', 'doSomething');
