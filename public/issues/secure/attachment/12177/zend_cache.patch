--- library/Zend/Cache/Backend/File.php	(revision 17870)
+++ library/Zend/Cache/Backend/File.php	(working copy)
@@ -110,12 +110,16 @@
     /**
      * Constructor
      *
-     * @param  array $options associative array of options
+     * @param  array|Zend_Config $options associative array of options
      * @throws Zend_Cache_Exception
      * @return void
      */
-    public function __construct(array $options = array())
+    public function __construct($options = array())
     {
+        if ($options instanceof Zend_Config) {
+            $options = $options->toArray();
+        }
+
         parent::__construct($options);
         if ($this->_options['cache_dir'] !== null) { // particular case for this option
             $this->setCacheDir($this->_options['cache_dir']);
Index: library/Zend/Cache/Backend/Sqlite.php
===================================================================
--- library/Zend/Cache/Backend/Sqlite.php	(revision 17870)
+++ library/Zend/Cache/Backend/Sqlite.php	(working copy)
@@ -77,12 +77,16 @@
     /**
      * Constructor
      *
-     * @param  array $options Associative array of options
+     * @param  array|Zend_Config $options Associative array of options
      * @throws Zend_cache_Exception
      * @return void
      */
-    public function __construct(array $options = array())
+    public function __construct($options = array())
     {
+        if ($options instanceof Zend_Config) {
+            $options = $options->toArray();
+        }
+
         parent::__construct($options);
         if ($this->_options['cache_db_complete_path'] === null) {
             Zend_Cache::throwException('cache_db_complete_path option has to set');
Index: library/Zend/Cache/Backend/Apc.php
===================================================================
--- library/Zend/Cache/Backend/Apc.php	(revision 17870)
+++ library/Zend/Cache/Backend/Apc.php	(working copy)
@@ -49,12 +49,16 @@
     /**
      * Constructor
      *
-     * @param  array $options associative array of options
+     * @param  array|Zend_Config $options associative array of options
      * @throws Zend_Cache_Exception
      * @return void
      */
-    public function __construct(array $options = array())
+    public function __construct($options = array())
     {
+        if ($options instanceof Zend_Config) {
+            $options = $options->toArray();
+        }
+
         if (!extension_loaded('apc')) {
             Zend_Cache::throwException('The apc extension must be loaded for using this backend !');
         }
@@ -166,18 +170,18 @@
      * Return true if the automatic cleaning is available for the backend
      *
      * DEPRECATED : use getCapabilities() instead
-     * 
-     * @deprecated 
+     *
+     * @deprecated
      * @return boolean
      */
     public function isAutomaticCleaningAvailable()
     {
         return false;
     }
-    
+
     /**
      * Return the filling percentage of the backend storage
-     * 
+     *
      * @throws Zend_Cache_Exception
      * @return int integer between 0 and 100
      */
@@ -195,21 +199,21 @@
         }
         return ((int) (100. * ($memUsed / $memSize)));
     }
-    
+
     /**
      * Return an array of stored tags
      *
      * @return array array of stored tags (string)
      */
     public function getTags()
-    {   
+    {
         $this->_log(self::TAGS_UNSUPPORTED_BY_SAVE_OF_APC_BACKEND);
         return array();
     }
-    
+
     /**
      * Return an array of stored cache ids which match given tags
-     * 
+     *
      * In case of multiple tags, a logical AND is made between tags
      *
      * @param array $tags array of tags
@@ -218,26 +222,26 @@
     public function getIdsMatchingTags($tags = array())
     {
         $this->_log(self::TAGS_UNSUPPORTED_BY_SAVE_OF_APC_BACKEND);
-        return array();               
+        return array();
     }
 
     /**
      * Return an array of stored cache ids which don't match given tags
-     * 
+     *
      * In case of multiple tags, a logical OR is made between tags
      *
      * @param array $tags array of tags
      * @return array array of not matching cache ids (string)
-     */    
+     */
     public function getIdsNotMatchingTags($tags = array())
     {
         $this->_log(self::TAGS_UNSUPPORTED_BY_SAVE_OF_APC_BACKEND);
-        return array();         
+        return array();
     }
-    
+
     /**
      * Return an array of stored cache ids which match any given tags
-     * 
+     *
      * In case of multiple tags, a logical AND is made between tags
      *
      * @param array $tags array of tags
@@ -246,12 +250,12 @@
     public function getIdsMatchingAnyTags($tags = array())
     {
         $this->_log(self::TAGS_UNSUPPORTED_BY_SAVE_OF_APC_BACKEND);
-        return array();         
+        return array();
     }
-    
+
     /**
      * Return an array of stored cache ids
-     * 
+     *
      * @return array array of stored cache ids (string)
      */
     public function getIds()
@@ -264,7 +268,7 @@
         }
         return $res;
     }
-    
+
     /**
      * Return an array of metadatas for the given cache id
      *
@@ -272,7 +276,7 @@
      * - expire : the expire timestamp
      * - tags : a string array of tags
      * - mtime : timestamp of last modification time
-     * 
+     *
      * @param string $id cache id
      * @return array array of metadatas (false if the cache id is not found)
      */
@@ -294,9 +298,9 @@
                 'mtime' => $mtime
             );
         }
-        return false;  
+        return false;
     }
-    
+
     /**
      * Give (if possible) an extra lifetime to the given cache id
      *
@@ -318,17 +322,17 @@
             $lifetime = $tmp[2];
             $newLifetime = $lifetime - (time() - $mtime) + $extraLifetime;
             if ($newLifetime <=0) {
-                return false; 
+                return false;
             }
             apc_store($id, array($data, time(), $newLifetime), $newLifetime);
             return true;
         }
         return false;
     }
-    
+
     /**
      * Return an associative array of capabilities (booleans) of the backend
-     * 
+     *
      * The array must include these keys :
      * - automatic_cleaning (is automating cleaning necessary)
      * - tags (are tags supported)
@@ -337,7 +341,7 @@
      * - priority does the backend deal with priority when saving
      * - infinite_lifetime (is infinite lifetime can work with this backend)
      * - get_list (is it possible to get the list of cache ids and the complete list of tags)
-     * 
+     *
      * @return array associative of with capabilities
      */
     public function getCapabilities()
Index: library/Zend/Cache/Backend/TwoLevels.php
===================================================================
--- library/Zend/Cache/Backend/TwoLevels.php	(revision 17870)
+++ library/Zend/Cache/Backend/TwoLevels.php	(working copy)
@@ -114,12 +114,16 @@
     /**
      * Constructor
      *
-     * @param  array $options Associative array of options
+     * @param  array|Zend_Config $options Associative array of options
      * @throws Zend_Cache_Exception
      * @return void
      */
-    public function __construct(array $options = array())
+    public function __construct($options = array())
     {
+        if ($options instanceof Zend_Config) {
+            $options = $options->toArray();
+        }
+
         parent::__construct($options);
         if ($this->_options['slow_backend'] === null) {
             Zend_Cache::throwException('slow_backend option has to set');
Index: library/Zend/Cache/Backend/Memcached.php
===================================================================
--- library/Zend/Cache/Backend/Memcached.php	(revision 17870)
+++ library/Zend/Cache/Backend/Memcached.php	(working copy)
@@ -113,15 +113,20 @@
     /**
      * Constructor
      *
-     * @param array $options associative array of options
+     * @param array|Zend_Config $options associative array of options
      * @throws Zend_Cache_Exception
      * @return void
      */
-    public function __construct(array $options = array())
+    public function __construct($options = array())
     {
         if (!extension_loaded('memcache')) {
             Zend_Cache::throwException('The memcache extension must be loaded for using this backend !');
         }
+
+        if ($options instanceof Zend_Config) {
+            $options = $options->toArray();
+        }
+
         parent::__construct($options);
         if (isset($this->_options['servers'])) {
             $value= $this->_options['servers'];
Index: library/Zend/Cache/Core.php
===================================================================
--- library/Zend/Cache/Core.php	(revision 17870)
+++ library/Zend/Cache/Core.php	(working copy)
@@ -124,12 +124,16 @@
     /**
      * Constructor
      *
-     * @param  array $options Associative array of options
+     * @param  array|Zend_Config $options Associative array of options
      * @throws Zend_Cache_Exception
      * @return void
      */
-    public function __construct(array $options = array())
+    public function __construct($options = array())
     {
+        if ($options instanceof Zend_Config) {
+            $options = $options->toArray();
+        }
+
         while (list($name, $value) = each($options)) {
             $this->setOption($name, $value);
         }
@@ -520,7 +524,7 @@
         }
         return $this->_backend->getFillingPercentage();
     }
-    
+
     /**
      * Return an array of metadatas for the given cache id
      *
