Index: library/Zend/Mail.php
===================================================================
--- library/Zend/Mail.php	(revision 22146)
+++ library/Zend/Mail.php	(working copy)
@@ -1249,7 +1249,7 @@
         } else {
             $encodedName = $this->_encodeHeader($name);
             if ($encodedName === $name &&
-                    ((strpos($name, '@') !== false) || (strpos($name, ',') !== false))) {
+                    (str_replace(array('(',')','<','>','[',']',':',';','@','\',',','), '', $name) != $name)) {
                 $format = '"%s" <%s>';
             } else {
                 $format = '%s <%s>';
Index: tests/Zend/Mail/MailTest.php
===================================================================
--- tests/Zend/Mail/MailTest.php	(revision 22146)
+++ tests/Zend/Mail/MailTest.php	(working copy)
@@ -213,6 +213,7 @@
         $mail->setSubject('Test recipients Header format.');
         $mail->addTo('address_to1@example.com', 'name_to@example.com');
         $mail->addTo('address_to2@example.com', 'noinclude comma nor at mark');
+        $mail->addTo('address_to3@example.com', 'include brackets []');
         $mail->addCc('address_cc@example.com', 'include, name_cc');
 
         $mock = new Zend_Mail_Transport_Mock();
@@ -222,6 +223,7 @@
         $this->assertEquals('yoshida@example.com', $mock->from);
         $this->assertContains('Test recipients Header format.', $mock->body);
         $this->assertContains('To: "name_to@example.com" <address_to1@example.com>', $mock->header);
+        $this->assertContains('"include brackets []" <address_to3@example.com>', $mock->header);
         $this->assertContains('noinclude comma nor at mark <address_to2@example.com>', $mock->header);
         $this->assertContains('Cc: "include, name_cc" <address_cc@example.com>', $mock->header);
     }
