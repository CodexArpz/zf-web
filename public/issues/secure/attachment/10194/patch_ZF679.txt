Index: C:/Program Files/xampp/htdocs/melisoft/cdrom/library/Zend/Controller/Action.php
===================================================================
--- C:/Program Files/xampp/htdocs/melisoft/cdrom/library/Zend/Controller/Action.php	(revision 2523)
+++ C:/Program Files/xampp/htdocs/melisoft/cdrom/library/Zend/Controller/Action.php	(working copy)
@@ -16,7 +16,7 @@
  * @package    Zend_Controller
  * @copyright  Copyright (c) 2006 Zend Technologies USA Inc. (http://www.zend.com)
  * @license    http://framework.zend.com/license/new-bsd     New BSD License
- */ 
+ */
 
 
 /** Zend_Controller_Exception */
@@ -44,15 +44,15 @@
     protected $_request = null;
 
     /**
-     * Zend_Controller_Response_Abstract object wrapping the response 
+     * Zend_Controller_Response_Abstract object wrapping the response
      * @var Zend_Controller_Response_Abstract
      */
     protected $_response = null;
 
     /**
-     * Array of arguments provided to the constructor, minus the 
+     * Array of arguments provided to the constructor, minus the
      * {@link $_request Request object}.
-     * @var array 
+     * @var array
      */
     protected $_invokeArgs = array();
 
@@ -71,17 +71,17 @@
     /**
      * Class constructor
      *
-     * The request and response objects should be registered with the 
-     * controller, as should be any additional optional arguments; these will be 
-     * available via {@link getRequest()}, {@link getResponse()}, and 
+     * The request and response objects should be registered with the
+     * controller, as should be any additional optional arguments; these will be
+     * available via {@link getRequest()}, {@link getResponse()}, and
      * {@link getInvokeArgs()}, respectively.
      *
-     * When overriding the constructor, please consider this usage as a best 
+     * When overriding the constructor, please consider this usage as a best
      * practice and ensure that each is registered appropriately.
      *
-     * Additionally, {@link init()} is called as the final action of 
-     * instantiation, and may be safely overridden to perform initialization 
-     * tasks; as a general rule, override {@link init()} instead of the 
+     * Additionally, {@link init()} is called as the final action of
+     * instantiation, and may be safely overridden to perform initialization
+     * tasks; as a general rule, override {@link init()} instead of the
      * constructor to customize an action controller's instantiation.
      *
      * @param Zend_Controller_Request_Abstract $request
@@ -100,8 +100,8 @@
     /**
      * Initialize object
      *
-     * Called from {@link __construct()} as final step of object instantiation. 
-     * 
+     * Called from {@link __construct()} as final step of object instantiation.
+     *
      * @return void
      */
     public function init()
@@ -110,7 +110,7 @@
 
     /**
      * Return the Request object
-     * 
+     *
      * @return Zend_Controller_Request_Abstract
      */
     public function getRequest()
@@ -120,8 +120,8 @@
 
     /**
      * Set the Request object
-     * 
-     * @param Zend_Controller_Request_Abstract $request 
+     *
+     * @param Zend_Controller_Request_Abstract $request
      * @return Zend_Controller_Action
      */
     public function setRequest(Zend_Controller_Request_Abstract $request)
@@ -132,7 +132,7 @@
 
     /**
      * Return the Response object
-     * 
+     *
      * @return Zend_Controller_Response_Abstract
      */
     public function getResponse()
@@ -142,8 +142,8 @@
 
     /**
      * Set the Response object
-     * 
-     * @param Zend_Controller_Response_Abstract $response 
+     *
+     * @param Zend_Controller_Response_Abstract $response
      * @return Zend_Controller_Action
      */
     public function setResponse(Zend_Controller_Response_Abstract $response)
@@ -154,8 +154,8 @@
 
     /**
      * Set invocation arguments
-     * 
-     * @param array $args 
+     *
+     * @param array $args
      * @return Zend_Controller_Action
      */
     protected function _setInvokeArgs(array $args = array())
@@ -166,7 +166,7 @@
 
     /**
      * Return the array of constructor arguments (minus the Request object)
-     * 
+     *
      * @return array
      */
     public function getInvokeArgs()
@@ -176,8 +176,8 @@
 
     /**
      * Return a single invocation argument
-     * 
-     * @param string $key 
+     *
+     * @param string $key
      * @return mixed
      */
     public function getInvokeArg($key)
@@ -192,11 +192,11 @@
     /**
      * Pre-dispatch routines
      *
-     * Called before action method. If using class with 
-     * {@link Zend_Controller_Front}, it may modify the 
-     * {@link $_request Request object} and reset its dispatched flag in order 
+     * Called before action method. If using class with
+     * {@link Zend_Controller_Front}, it may modify the
+     * {@link $_request Request object} and reset its dispatched flag in order
      * to skip processing the current action.
-     * 
+     *
      * @return void
      */
     public function preDispatch()
@@ -206,14 +206,14 @@
     /**
      * Post-dispatch routines
      *
-     * Called after action method execution. If using class with 
-     * {@link Zend_Controller_Front}, it may modify the 
-     * {@link $_request Request object} and reset its dispatched flag in order 
+     * Called after action method execution. If using class with
+     * {@link Zend_Controller_Front}, it may modify the
+     * {@link $_request Request object} and reset its dispatched flag in order
      * to process an additional action.
      *
-     * Common usages for postDispatch() include rendering content in a sitewide 
+     * Common usages for postDispatch() include rendering content in a sitewide
      * template, link url correction, setting headers, etc.
-     * 
+     *
      * @return void
      */
     public function postDispatch()
@@ -223,7 +223,7 @@
     /**
      * Proxy for undefined methods.  Default behavior is to throw an
      * exception on undefined methods, however this function can be
-     * overridden to implement magic (dynamic) actions, or provide run-time 
+     * overridden to implement magic (dynamic) actions, or provide run-time
      * dispatching.
      *
      * @param string $methodName
@@ -245,19 +245,19 @@
     /**
      * Call the action specified in the request object, and return a response
      *
-     * Not used in the Action Controller implementation, but left for usage in 
-     * Page Controller implementations. Dispatches a method based on the 
+     * Not used in the Action Controller implementation, but left for usage in
+     * Page Controller implementations. Dispatches a method based on the
      * request.
      *
-     * Returns a Zend_Controller_Response_Abstract object, instantiating one 
+     * Returns a Zend_Controller_Response_Abstract object, instantiating one
      * prior to execution if none exists in the controller.
      *
-     * {@link preDispatch()} is called prior to the action, 
+     * {@link preDispatch()} is called prior to the action,
      * {@link postDispatch()} is called following it.
      *
-     * @param null|Zend_Controller_Request_Abstract $request Optional request 
+     * @param null|Zend_Controller_Request_Abstract $request Optional request
      * object to use
-     * @param null|Zend_Controller_Response_Abstract $response Optional response 
+     * @param null|Zend_Controller_Response_Abstract $response Optional response
      * object to use
      * @return Zend_Controller_Response_Abstract
      */
@@ -309,9 +309,9 @@
 
     /**
      * Set a parameter in the {@link $_request Request object}.
-     * 
-     * @param string $paramName 
-     * @param mixed $value 
+     *
+     * @param string $paramName
+     * @param mixed $value
      * @return Zend_Controller_Action
      */
     final protected function _setParam($paramName, $value)
@@ -322,15 +322,15 @@
     }
 
     /**
-     * Determine whether a given parameter exists in the 
+     * Determine whether a given parameter exists in the
      * {@link $_request Request object}.
-     * 
-     * @param string $paramName 
+     *
+     * @param string $paramName
      * @return boolean
      */
     final protected function _hasParam($paramName)
     {
-        return null !== $this->getRequest()->getParam();
+        return null !== $this->getRequest()->getParam($paramName);
     }
 
     /**
@@ -369,11 +369,11 @@
     /**
      * Redirect to another URL
      *
-     * Prepends base URL as defined in request object if url is relative by 
+     * Prepends base URL as defined in request object if url is relative by
      * default; override this behaviour by setting the third argument false.
      *
      * @param string $url
-     * @param int $code HTTP response code to use in redirect; defaults to 302, 
+     * @param int $code HTTP response code to use in redirect; defaults to 302,
      * Found (same as Location header redirect sent by PHP)
      * @param bool $prependBase
      */
@@ -393,7 +393,7 @@
 
         // Send HTTP response code
         if (302 != $code && array_key_exists($code, $this->_redirectCodes)) {
-            // Valid code. 302s are automatically generated by PHP for Location 
+            // Valid code. 302s are automatically generated by PHP for Location
             // headers
             header('HTTP/1.1 ' . $code . ' ' . $this->_redirectCodes[$code]);
         } elseif (302 != $code) {
