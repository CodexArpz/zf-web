Index: Search/Lucene/Search/Query/Preprocessing/Fuzzy.php
===================================================================
--- Search/Lucene/Search/Query/Preprocessing/Fuzzy.php	(Revision 17866)
+++ Search/Lucene/Search/Query/Preprocessing/Fuzzy.php	(Arbeitskopie)
@@ -213,8 +213,38 @@
         }
 
         // Word is tokenized into several tokens
-        require_once 'Zend/Search/Lucene/Search/QueryParserException.php';
-        throw new Zend_Search_Lucene_Search_QueryParserException('Fuzzy search is supported only for non-multiple word terms');
+        $query = new Zend_Search_Lucene_Search_Query_Phrase();
+        $query->setBoost($this->getBoost());
+        $position = 0;
+        $termsadded = 0;
+        foreach ($tokens as $token) {
+
+            // Find matching terms to individual token fuzzy searches
+            $term  = new Zend_Search_Lucene_Index_Term($token->getTermText(), $this->_field);
+            $subquery = new Zend_Search_Lucene_Search_Query_Fuzzy($term, $this->_minimumSimilarity);
+            $subquery->setBoost($this->getBoost());
+
+            // Add all found terms for each wildcard into the corresponding positions of the phrase query
+            $terms = $subquery->rewrite($index)->getQueryTerms();
+            if ($termsadded == 1) {
+                $position += $token->getPositionIncrement();
+            }
+            foreach($terms as $term) {
+                $query->addTerm($term, $position);
+                $termsadded = 1;
+            }
+        }
+
+        if ($termsadded == 0) {
+            $this->_matches = array();
+            return new Zend_Search_Lucene_Search_Query_Insignificant();
+        }
+
+        // Get rewritten query. Important! It also fills terms matching container.
+        $rewrittenQuery = $query->rewrite($index);
+        $this->_matches = $query->getQueryTerms();
+
+        return $rewrittenQuery;
     }
 
     /**
Index: Search/Lucene/Search/Query/Preprocessing/Term.php
===================================================================
--- Search/Lucene/Search/Query/Preprocessing/Term.php	(Revision 17866)
+++ Search/Lucene/Search/Query/Preprocessing/Term.php	(Arbeitskopie)
@@ -168,29 +168,111 @@
         if (count($subPatterns) > 1) {
             // Wildcard query is recognized
 
-            $pattern = '';
+            $patterns    = array('');
+            $subqueries = array();
+            $position   = 0;
 
             foreach ($subPatterns as $id => $subPattern) {
                 // Append corresponding wildcard character to the pattern before each sub-pattern (except first)
                 if ($id != 0) {
-                    $pattern .= $word[ $subPattern[1] - 1 ];
+                    foreach ($patterns as $key=>$pattern) {
+                            $patterns[$key] .= $word[ $subPattern[1] - 1 ];
+                    }
                 }
 
                 // Check if each subputtern is a single word in terms of current analyzer
                 $tokens = Zend_Search_Lucene_Analysis_Analyzer::getDefault()->tokenize($subPattern[0], $subPatternsEncoding);
-                if (count($tokens) > 1) {
-                    require_once 'Zend/Search/Lucene/Search/QueryParserException.php';
-                    throw new Zend_Search_Lucene_Search_QueryParserException('Wildcard search is supported only for non-multiple word terms');
+
+                // Find out if start of subpattern is also a forced token boundary
+                // (i.e. non-indexed character) in terms of current analyzer
+                // @todo: find a more ellegant way of doing so. The problem here is that
+                // the term 'x' might be ignored by for example a numbers only analyzer
+                // or worse it could be identical to $subPattern[0]
+                $tokentest      = Zend_Search_Lucene_Analysis_Analyzer::getDefault()->tokenize('x'.$subPattern[0], $subPatternsEncoding);
+                $tokenreference = Zend_Search_Lucene_Analysis_Analyzer::getDefault()->tokenize('x', $subPatternsEncoding);
+                if ($tokentest[0]->getTermText()==$tokenreference[0]->getTermText()) {
+                        // There might be several alternative patterns for the token string so far.
+                        // Save them all as queries in array
+                        foreach ($patterns as $pattern) {
+                            $term    = new Zend_Search_Lucene_Index_Term($pattern, $this->_field);
+                            $query   = new Zend_Search_Lucene_Search_Query_Wildcard($term);
+                            $query->setBoost($this->getBoost());
+                            $subqueries[] = array($query,$position);
+                        }
+                        $patterns = array('');
+                        $position++;
                 }
-                foreach ($tokens as $token) {
-                    $pattern .= $token->getTermText();
+
+                // Add to array of search-tokens for each token in analyzed string
+                foreach ($tokens as $num => $token) {
+                    if ($num == 0) {
+                        // The very first token, only adds to pattern string(s) as normal
+                        $oldpatterns=$patterns;
+                        foreach ($patterns as $key=>$pattern) {
+                            $patterns[$key] .= $token->getTermText();
+                        }
+                    } else {
+                        // On additional tokens check whether they are marked as alternatives (positionIcrement==0)
+                        if ($token->getPositionIncrement() == 0) {
+                            // If so, create alternative patterns for this alternative
+                            foreach($oldpatterns as $oldpattern) {
+                                    $patterns[]=$oldpattern.$token->getTermText();
+                            }
+                        } else {
+                            // Otherwise store all previous patterns as wildcard queries in array
+                            foreach ($patterns as $pattern) {
+                                $term    = new Zend_Search_Lucene_Index_Term($pattern, $this->_field);
+                                $query   = new Zend_Search_Lucene_Search_Query_Wildcard($term);
+                                $query->setBoost($this->getBoost());
+                                $subqueries[] = array($query,$position);
+                            }
+                            // Increase the position in the phrase query
+                            $position += $token->getPositionIncrement();
+                            // And store this very current token as only alternative in pattern array
+                            $oldpatterns = array('');
+                            $patterns = array($token->getTermText());
+                        }
+                    }
                 }
             }
+            
+            // If we ended up with more than one (sub)query, we need to assemble a phrase request.
+            if (count($subqueries) || count($patterns)>1) {
+                // The latest wildcard pattern have not been added to the array yet
+                foreach ($patterns as $pattern) {
+                    $term  = new Zend_Search_Lucene_Index_Term($pattern, $this->_field);
+                    $query = new Zend_Search_Lucene_Search_Query_Wildcard($term);
+                    $query->setBoost($this->getBoost());
+                    $subqueries[] = array($query,$position);
+                }
 
-            $term  = new Zend_Search_Lucene_Index_Term($pattern, $this->_field);
-            $query = new Zend_Search_Lucene_Search_Query_Wildcard($term);
-            $query->setBoost($this->getBoost());
+                // Create a new Phrase query
+                $query = new Zend_Search_Lucene_Search_Query_Phrase();
+                $query->setBoost($this->getBoost());
+                $termsadded = 0;
 
+                // Add all found terms for each wildcard into the corresponding positions of the phrase query
+                foreach ($subqueries as &$subarray) {
+                    list($subquery,$position)=$subarray;
+                    $terms = $subquery->rewrite($index)->getQueryTerms();
+                    foreach($terms as $term) {
+                        $query->addTerm($term, $position);
+                        $termsadded = 1;
+                    }
+                }
+
+                // If none were found the entire query is insignificant.
+                if ($termsadded == 0) {
+                    $this->_matches = array();
+                    return new Zend_Search_Lucene_Search_Query_Insignificant();
+                }
+            } else {
+                // Single wildcard query. Behave as normal.
+                $term  = new Zend_Search_Lucene_Index_Term($patterns[0], $this->_field);
+                $query = new Zend_Search_Lucene_Search_Query_Wildcard($term);
+                $query->setBoost($this->getBoost());
+            }
+
             // Get rewritten query. Important! It also fills terms matching container.
             $rewrittenQuery = $query->rewrite($index);
             $this->_matches = $query->getQueryTerms();
