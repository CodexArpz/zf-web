--- trunk/documentation/manual/en/module_specs/Zend_Tool_Framework-WritingProviders.xml	(revision 21561)
+++ trunk/documentation/manual/en/module_specs/Zend_Tool_Framework-WritingProviders.xml	(working copy)
@@ -14,10 +14,23 @@
         <title>How Zend Tool finds your Providers</title>
 
         <para>
-            By default Zend Tool uses the IncludePathLoader to find all
-            the providers that you can run. It recursivly iterates all
-            include path directories and opens all files that end
-            with "Manifest.php" or "Provider.php". All classes in these
+            By default Zend Tool uses the BasicLoader to load available providers.
+            You can use the Zend Tool to add new providers to its repository with 
+            the <command>zf enable config</command> command.  For example, if your 
+            provider is named My_Component_HelloProvider, you could add it to 
+            Zend Tool with:
+        </para>
+
+		<programlisting language="text"><![CDATA[
+% zf enable config.provider My_Component_HelloProvider
+]]></programlisting>
+
+        <para>
+            See <command>zf enable config.?</command> for more details.
+        </para>
+
+        <para>
+	        All classes in these
             files are inspected if they implement either
             <classname>Zend_Tool_Framework_Provider_Interface</classname>
             or <classname>Zend_Tool_Framework_Manifest_ProviderManifestable</classname>.
@@ -28,51 +41,11 @@
             instantiated provider interface instances.
         </para>
 
-        <para>
-            The following naming rules apply on how you can access the providers
-            that were found by the IncludePathLoader:
-        </para>
-
-        <itemizedlist>
-            <listitem>
-                <para>
-                    The last part of your classname split by underscore is used
-                    for the provider name, e.g. "My_Provider_Hello" leads to your
-                    provider being accessible by the name "hello".
-                </para>
-            </listitem>
-
-            <listitem>
-                <para>
-                    If your provider has a method <methodname>getName()</methodname>
-                    it will be used instead of the previous method to determine
-                    the name.
-                </para>
-            </listitem>
-
-            <listitem>
-                <para>
-                    If your provider has "Provider" as prefix, e.g. it is called
-                    <classname>My_HelloProvider</classname> it will be stripped
-                    from the name so that the provider will be called "hello".
-                </para>
-            </listitem>
-        </itemizedlist>
-
-        <note>
-            <para>
-                The IncludePathLoader does not follow symlinks, that means
-                you cannot link provider functionality into your include paths,
-                they have to be physically present in the include paths.
-            </para>
-        </note>
-
         <example id="zend.tool.framework.writing-providers.loading.example">
             <title>Exposing Your Providers with a Manifest</title>
 
             <para>
-                You can expose your providers to Zend Tool by offering a manifest
-                with a special filename ending with "Manifest.php".
+                You can expose your providers to Zend Tool by offering a manifest.
                 A Provider Manifest is an implementation of the
                 <interface>Zend_Tool_Framework_Manifest_ProviderManifestable</interface>
                 and requires the <methodname>getProviders()</methodname> method to return
