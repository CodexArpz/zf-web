Index: Abstract.php
===================================================================
--- Abstract.php	(revision 18130)
+++ Abstract.php	(working copy)
@@ -53,6 +53,31 @@
     protected $_defaultStmtClass = 'Zend_Db_Statement_Pdo';
 
     /**
+     * Returns available connection parameters for concrete PDO driver
+     *
+     * @return array
+     */
+    protected abstract function _getDsnParams();
+    
+    /**
+     * Removes wrong entries from the DSN array
+     *
+     * @return array
+     */
+    protected function _filterDsn($dsn) {
+        $temp = array();
+        $availableParams = $this->_getDsnParams();
+        
+        foreach ($dsn as $key => $value) {
+            if (in_array($key, $availableParams)) {
+                $temp[$key] = $value;
+            }
+        }
+        
+    	return $temp;
+    }
+    
+    /**
      * Creates a PDO DSN for the adapter from $this->_config settings.
      *
      * @return string
@@ -61,15 +86,8 @@
     {
         // baseline of DSN parts
         $dsn = $this->_config;
+        $dsn = $this->_filterDsn($dsn);
 
-        // don't pass the username, password, charset, persistent and driver_options in the DSN
-        unset($dsn['username']);
-        unset($dsn['password']);
-        unset($dsn['options']);
-        unset($dsn['charset']);
-        unset($dsn['persistent']);
-        unset($dsn['driver_options']);
-
         // use all remaining parts in the DSN
         foreach ($dsn as $key => $val) {
             $dsn[$key] = "$key=$val";
Index: Ibm.php
===================================================================
--- Ibm.php	(revision 18130)
+++ Ibm.php	(working copy)
@@ -140,6 +140,15 @@
             }
         }
     }
+    
+    /**
+     * Returns available connection parameters for concrete PDO driver
+     *
+     * @return array
+     */
+    protected function _getDsnParams() {
+        return array();
+    }
 
     /**
      * Creates a PDO DSN for the adapter from $this->_config settings.
Index: Mssql.php
===================================================================
--- Mssql.php	(revision 18130)
+++ Mssql.php	(working copy)
@@ -71,7 +71,24 @@
         'REAL'               => Zend_Db::FLOAT_TYPE,
         'SMALLMONEY'         => Zend_Db::FLOAT_TYPE
     );
+    
+    /**
+     * Returns available connection parameters for concrete PDO driver
+     *
+     * @return array
+     */
+    protected function _getDsnParams() {
+        $dsnParams = array(
+                        'host',
+                        'dbname',
+                        'charset',
+                        'appname',
+                        'secure'
+                     );
 
+        return $dsnParams;
+    }
+
     /**
      * Creates a PDO DSN for the adapter from $this->_config settings.
      *
@@ -82,13 +99,6 @@
         // baseline of DSN parts
         $dsn = $this->_config;
 
-        // don't pass the username and password in the DSN
-        unset($dsn['username']);
-        unset($dsn['password']);
-        unset($dsn['options']);
-        unset($dsn['persistent']);
-        unset($dsn['driver_options']);
-
         if (isset($dsn['port'])) {
             $seperator = ':';
             if (strtoupper(substr(PHP_OS, 0, 3)) === 'WIN') {
@@ -116,6 +126,8 @@
             }
             unset($dsn['pdoType']);
         }
+        
+        $dsn = $this->_filterDsn($dsn);
 
         // use all remaining parts in the DSN
         foreach ($dsn as $key => $val) {
Index: Mysql.php
===================================================================
--- Mysql.php	(revision 18130)
+++ Mysql.php	(working copy)
@@ -75,7 +75,23 @@
         'FIXED'              => Zend_Db::FLOAT_TYPE,
         'FLOAT'              => Zend_Db::FLOAT_TYPE
     );
+    
+    /**
+     * Returns available connection parameters for concrete PDO driver
+     *
+     * @return array
+     */
+	protected function _getDsnParams() {
+    	$dsnParams = array(
+                        'host',
+                        'port',
+                        'dbname',
+                        'unix_socket'
+				     );
 
+        return $dsnParams;
+    }
+
     /**
      * Creates a PDO object and connects to the database.
      *
Index: Oci.php
===================================================================
--- Oci.php	(revision 18130)
+++ Oci.php	(working copy)
@@ -72,6 +72,15 @@
         'BINARY_FLOAT'       => Zend_Db::FLOAT_TYPE,
         'NUMBER'             => Zend_Db::FLOAT_TYPE
     );
+    
+    /**
+     * Returns available connection parameters for concrete PDO driver
+     *
+     * @return array
+     */
+    protected function _getDsnParams() {
+        return array();
+    }
 
     /**
      * Creates a PDO DSN for the adapter from $this->_config settings.
Index: Pgsql.php
===================================================================
--- Pgsql.php	(revision 18130)
+++ Pgsql.php	(working copy)
@@ -71,7 +71,24 @@
         'NUMERIC'            => Zend_Db::FLOAT_TYPE,
         'REAL'               => Zend_Db::FLOAT_TYPE
     );
+    
+    /**
+     * Returns available connection parameters for concrete PDO driver
+     *
+     * @return array
+     */
+    protected function _getDsnParams() {
+        $dsnParams = array(
+                        'host',
+                        'port',
+                        'dbname',
+                        'user',
+                        'password'
+                     );
 
+        return $dsnParams;
+    }
+
     /**
      * Creates a PDO object and connects to the database.
      *
Index: Sqlite.php
===================================================================
--- Sqlite.php	(revision 18130)
+++ Sqlite.php	(working copy)
@@ -110,6 +110,15 @@
             throw new Zend_Db_Adapter_Exception("Configuration array must have a key for 'dbname' that names the database instance");
         }
     }
+    
+    /**
+     * Returns available connection parameters for concrete PDO driver
+     *
+     * @return array
+     */
+    protected function _getDsnParams() {
+        return array();
+    }
 
     /**
      * DSN builder
