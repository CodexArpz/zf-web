Index: tests/Zend/Locale/FormatTest.php
===================================================================
--- tests/Zend/Locale/FormatTest.php	(revision 3498)
+++ tests/Zend/Locale/FormatTest.php	(working copy)
@@ -252,7 +252,7 @@
             // success
         }
         $this->assertEquals(is_array(Zend_Locale_Format::getDate('10.10.06')), true, "array expected");
-        $this->assertEquals(count(Zend_Locale_Format::getDate('10.10.06','dd.MM.yy')), 4, "array with 4 tags expected");
+        $this->assertEquals(count(Zend_Locale_Format::getDate('10.10.06','dd.MM.yy')), 5, "array with 5 tags expected");
 
         $value = Zend_Locale_Format::getDate('10.11.06','dd.MM.yy');
         $this->assertEquals($value['day'], 10, 'Day 10 expected');
@@ -511,7 +511,7 @@
             // success
         }
 
-        $this->assertEquals(count(Zend_Locale_Format::getTime('13:14:55','HH:mm:ss')), 4, "array with 4 tags expected");
+        $this->assertEquals(count(Zend_Locale_Format::getTime('13:14:55','HH:mm:ss')), 5, "array with 5 tags expected");
 
         $value = Zend_Locale_Format::getTime('13:14:55','HH:mm:ss');
         $this->assertEquals($value['hour'], 13, 'Hour 13 expected');
Index: tests/Zend/DateTest.php
===================================================================
--- tests/Zend/DateTest.php	(revision 3498)
+++ tests/Zend/DateTest.php	(working copy)
@@ -81,23 +81,23 @@
         date_default_timezone_set('America/New_York');
         $locale = 'en_US';
         //2006-01-01T00:00:00+05:00
-        $date1  = new Zend_Date('2006-01-01 01:00:00', Zend_Date::ISO_8601, $locale);
+        $date1  = new Zend_Date('2006-01-01 01:00:00', Zend_Date::ISO_8601, $locale);
         $date1string = $date1->get(Zend_Date::ISO_8601);
-
-        // en_US defines AM/PM, hour 0 does not exist
-        // ISO defines dates without AM, 0 exists instead of 12 PM
+
+        // en_US defines AM/PM, hour 0 does not exist
+        // ISO defines dates without AM, 0 exists instead of 12 PM
         // therefor hour is set to 1 to verify
-        $date2  = new Zend_Date('2006-01-01', Zend_Date::DATES, $locale);
+        $date2  = new Zend_Date('2006-01-01', Zend_Date::DATES, $locale);
         $date2->setTime('01:00:00');
         $this->assertSame($date1string, $date2->get(Zend_Date::ISO_8601));
         $date2  = new Zend_Date('01-01-2006', Zend_Date::DATES, $locale);
-        $date2->setTime('01:00:00');
+        $date2->setTime('01:00:00');
         $this->assertSame($date1string, $date2->get(Zend_Date::ISO_8601));
         $date2  = new Zend_Date('2006-01-01', null, $locale);
-        $date2->setTime('01:00:00');
+        $date2->setTime('01:00:00');
         $this->assertSame($date1string, $date2->get(Zend_Date::ISO_8601));
         $date2  = new Zend_Date('2006-01-01');
-        $date2->setTime('01:00:00');
+        $date2->setTime('01:00:00');
         $this->assertSame($date1string, $date2->get(Zend_Date::ISO_8601));
     }
 
@@ -139,31 +139,31 @@
         $this->assertTrue($date instanceof Zend_Date);
     }
 
-    /**
-     * Test for date object creation using default format for a locale
-     */
-    public function testCreationDefaultLoose()
-    {
-        $locale = 'de_AT';
-        $date  = new Zend_Date();
-
-        $date = $date->getTimestamp();
-        $this->assertTrue(abs($date - time()) < 2);
-
-        date_default_timezone_set('GMT');
-        $date  = new Zend_Date(Zend_Date::YEAR);
-
-        $date = $date->getTimestamp();
-        $reference = gmmktime(0,0,0,1,1,date('Y'));
-        $this->assertTrue($reference == $date);
-
-        $date  = new Zend_Date('ar_EG');
-        $this->assertSame($date->getLocale(), 'ar_EG');
-        $date = $date->getTimestamp();
-        $this->assertTrue(abs($date - time()) < 2);
-    }
-
     /**
+     * Test for date object creation using default format for a locale
+     */
+    public function testCreationDefaultLoose()
+    {
+        $locale = 'de_AT';
+        $date  = new Zend_Date();
+
+        $date = $date->getTimestamp();
+        $this->assertTrue(abs($date - time()) < 2);
+
+        date_default_timezone_set('GMT');
+        $date  = new Zend_Date(Zend_Date::YEAR);
+
+        $date = $date->getTimestamp();
+        $reference = gmmktime(0,0,0,1,1,date('Y'));
+        $this->assertTrue($reference == $date);
+
+        $date  = new Zend_Date('ar_EG');
+        $this->assertSame($date->getLocale(), 'ar_EG');
+        $date = $date->getTimestamp();
+        $this->assertTrue(abs($date - time()) < 2);
+    }
+
+    /**
      * Test for getTimestamp
      */
     public function testGetTimestamp()
@@ -294,75 +294,92 @@
      */
     public function testToString()
     {
+        date_default_timezone_set('America/Los_Angeles');
+        $locale = new Zend_Locale('en_US');
+        $time = 1171625772;
+        $date = new Zend_Date($time,null,$locale);
+        $date->setTimezone(date_default_timezone_get());
+        $format = 'F j, Y, g:i a';
+        $this->assertSame($date->toString($format), date($format, $time));
+        // '03-36-12, 16-02-07, 3628 3612 5 Friam07 46'
+        $format = 'h-i-s, j-m-y, it is w Day z';
+        $this->assertSame($date->toString($format), date($format, $time));
+    }
+
+    /**
+     * Test for toStringIso
+     */
+    public function testToStringIso()
+    {
         $locale = new Zend_Locale('de_AT');
         $date = new Zend_Date(1234567890,null,$locale);
         $date->setTimezone(date_default_timezone_get());
-        $this->assertSame($date->toString(),'14.02.2009 04:31:30');
-        $this->assertSame($date->toString('en_US'),'Feb 14, 2009 4:31:30 AM');
-        $this->assertSame($date->toString(null, 'en_US'),'Feb 14, 2009 4:31:30 AM');
-        $this->assertSame($date->toString('yyy', null),'2009');
-        $this->assertSame($date->toString(null, null),'14.02.2009 04:31:30');
+        $this->assertSame($date->toStringIso(),'14.02.2009 04:31:30');
+        $this->assertSame($date->toStringIso('en_US'),'Feb 14, 2009 4:31:30 AM');
+        $this->assertSame($date->toStringIso(null, 'en_US'),'Feb 14, 2009 4:31:30 AM');
+        $this->assertSame($date->toStringIso('yyy', null),'2009');
+        $this->assertSame($date->toStringIso(null, null),'14.02.2009 04:31:30');
         $date->setTimeZone('UTC');
-        $this->assertSame($date->toString(null, 'en_US'),'Feb 13, 2009 11:31:30 PM');
+        $this->assertSame($date->toStringIso(null, 'en_US'),'Feb 13, 2009 11:31:30 PM');
         $date->setTimeZone('Indian/Maldives');
-        $this->assertSame($date->toString("xx'yy''yy'xx"),"xxyy'yyxx");
-        $this->assertSame($date->toString("GGGGG"),'n.');
-        $this->assertSame($date->toString("GGGG"),'n. Chr.');
-        $this->assertSame($date->toString("GGG"),'n. Chr.');
-        $this->assertSame($date->toString("GG"),'n. Chr.');
-        $this->assertSame($date->toString("G"),'n. Chr.');
-        $this->assertSame($date->toString("yyyyy"),'02009');
-        $this->assertSame($date->toString("yyyy"),'2009');
-        $this->assertSame($date->toString("yyy"),'2009');
-        $this->assertSame($date->toString("yy"),'09');
-        $this->assertSame($date->toString("y"),'2009');
-        $this->assertSame($date->toString("YYYYY"),'02009');
-        $this->assertSame($date->toString("YYYY"),'2009');
-        $this->assertSame($date->toString("YYY"),'2009');
-        $this->assertSame($date->toString("YY"),'09');
-        $this->assertSame($date->toString("Y"),'2009');
-        $this->assertSame($date->toString("MMMMM"),'F');
-        $this->assertSame($date->toString("MMMM"),'Februar');
-        $this->assertSame($date->toString("MMM"),'Feb');
-        $this->assertSame($date->toString("MM"),'02');
-        $this->assertSame($date->toString("M"),'2');
-        $this->assertSame($date->toString("ww"),'07');
-        $this->assertSame($date->toString("w"),'07');
-        $this->assertSame($date->toString("dd"),'14');
-        $this->assertSame($date->toString("d"),'14');
-        $this->assertSame($date->toString("DDD"),'044');
-        $this->assertSame($date->toString("DD"),'44');
-        $this->assertSame($date->toString("D"),'44');
-        $this->assertSame($date->toString("EEEEE"),'S');
-        $this->assertSame($date->toString("EEEE"),'Samstag');
-        $this->assertSame($date->toString("EEE"),'Sam');
-        $this->assertSame($date->toString("EE"),'Sa');
-        $this->assertSame($date->toString("E"),'S');
-        $this->assertSame($date->toString("ee"),'06');
-        $this->assertSame($date->toString("e"),'6');
-        $this->assertSame($date->toString("a"),'vorm.');
-        $this->assertSame($date->toString("hh"),'04');
-        $this->assertSame($date->toString("h"),'4');
-        $this->assertSame($date->toString("HH"),'04');
-        $this->assertSame($date->toString("H"),'4');
-        $this->assertSame($date->toString("mm"),'31');
-        $this->assertSame($date->toString("m"),'31');
-        $this->assertSame($date->toString("ss"),'30');
-        $this->assertSame($date->toString("s"),'30');
-        $this->assertSame($date->toString("S"),'0');
-        $this->assertSame($date->toString("zzzz"),'Indian/Maldives');
-        $this->assertSame($date->toString("zzz"),'MVT');
-        $this->assertSame($date->toString("zz"),'MVT');
-        $this->assertSame($date->toString("z"),'MVT');
-        $this->assertSame($date->toString("ZZZZ"),'+05:00');
-        $this->assertSame($date->toString("ZZZ"),'+0500');
-        $this->assertSame($date->toString("ZZ"),'+0500');
-        $this->assertSame($date->toString("Z"),'+0500');
-        $this->assertSame($date->toString("AAAAA"),'16290');
-        $this->assertSame($date->toString("AAAA"),'16290');
-        $this->assertSame($date->toString("AAA"),'16290');
-        $this->assertSame($date->toString("AA"),'16290');
-        $this->assertSame($date->toString("A"),'16290');
+        $this->assertSame($date->toStringIso("xx'yy''yy'xx"),"xxyy'yyxx");
+        $this->assertSame($date->toStringIso("GGGGG"),'n.');
+        $this->assertSame($date->toStringIso("GGGG"),'n. Chr.');
+        $this->assertSame($date->toStringIso("GGG"),'n. Chr.');
+        $this->assertSame($date->toStringIso("GG"),'n. Chr.');
+        $this->assertSame($date->toStringIso("G"),'n. Chr.');
+        $this->assertSame($date->toStringIso("yyyyy"),'02009');
+        $this->assertSame($date->toStringIso("yyyy"),'2009');
+        $this->assertSame($date->toStringIso("yyy"),'2009');
+        $this->assertSame($date->toStringIso("yy"),'09');
+        $this->assertSame($date->toStringIso("y"),'2009');
+        $this->assertSame($date->toStringIso("YYYYY"),'02009');
+        $this->assertSame($date->toStringIso("YYYY"),'2009');
+        $this->assertSame($date->toStringIso("YYY"),'2009');
+        $this->assertSame($date->toStringIso("YY"),'09');
+        $this->assertSame($date->toStringIso("Y"),'2009');
+        $this->assertSame($date->toStringIso("MMMMM"),'F');
+        $this->assertSame($date->toStringIso("MMMM"),'Februar');
+        $this->assertSame($date->toStringIso("MMM"),'Feb');
+        $this->assertSame($date->toStringIso("MM"),'02');
+        $this->assertSame($date->toStringIso("M"),'2');
+        $this->assertSame($date->toStringIso("ww"),'07');
+        $this->assertSame($date->toStringIso("w"),'07');
+        $this->assertSame($date->toStringIso("dd"),'14');
+        $this->assertSame($date->toStringIso("d"),'14');
+        $this->assertSame($date->toStringIso("DDD"),'044');
+        $this->assertSame($date->toStringIso("DD"),'44');
+        $this->assertSame($date->toStringIso("D"),'44');
+        $this->assertSame($date->toStringIso("EEEEE"),'S');
+        $this->assertSame($date->toStringIso("EEEE"),'Samstag');
+        $this->assertSame($date->toStringIso("EEE"),'Sam');
+        $this->assertSame($date->toStringIso("EE"),'Sa');
+        $this->assertSame($date->toStringIso("E"),'S');
+        $this->assertSame($date->toStringIso("ee"),'06');
+        $this->assertSame($date->toStringIso("e"),'6');
+        $this->assertSame($date->toStringIso("a"),'vorm.');
+        $this->assertSame($date->toStringIso("hh"),'04');
+        $this->assertSame($date->toStringIso("h"),'4');
+        $this->assertSame($date->toStringIso("HH"),'04');
+        $this->assertSame($date->toStringIso("H"),'4');
+        $this->assertSame($date->toStringIso("mm"),'31');
+        $this->assertSame($date->toStringIso("m"),'31');
+        $this->assertSame($date->toStringIso("ss"),'30');
+        $this->assertSame($date->toStringIso("s"),'30');
+        $this->assertSame($date->toStringIso("S"),'0');
+        $this->assertSame($date->toStringIso("zzzz"),'Indian/Maldives');
+        $this->assertSame($date->toStringIso("zzz"),'MVT');
+        $this->assertSame($date->toStringIso("zz"),'MVT');
+        $this->assertSame($date->toStringIso("z"),'MVT');
+        $this->assertSame($date->toStringIso("ZZZZ"),'+05:00');
+        $this->assertSame($date->toStringIso("ZZZ"),'+0500');
+        $this->assertSame($date->toStringIso("ZZ"),'+0500');
+        $this->assertSame($date->toStringIso("Z"),'+0500');
+        $this->assertSame($date->toStringIso("AAAAA"),'16290');
+        $this->assertSame($date->toStringIso("AAAA"),'16290');
+        $this->assertSame($date->toStringIso("AAA"),'16290');
+        $this->assertSame($date->toStringIso("AA"),'16290');
+        $this->assertSame($date->toStringIso("A"),'16290');
     }
 
     /**
@@ -1632,9 +1649,9 @@
         $this->assertSame($date->get(Zend_Date::W3C),'2030-02-14T04:31:30+05:00');
         $date->set($d2, Zend_Date::YEAR_SHORT, 'en_US');
         $this->assertSame($date->get(Zend_Date::W3C),'2002-02-14T04:31:30+05:00');
-        $date->setTimeZone('UTC');
+        $date->setTimeZone('UTC');
         $date->set(-20, Zend_Date::YEAR_SHORT, 'en_US');
-        $this->assertSame($date->get(Zend_Date::W3C),'-20-02-14T23:31:30+00:00');
+        $this->assertSame($date->get(Zend_Date::W3C),'-20-02-14T23:31:30+00:00');
         $date->set($d2, Zend_Date::YEAR_SHORT, 'en_US');
         $this->assertSame($date->get(Zend_Date::W3C),'2002-02-13T23:31:30+00:00');
         $date->setTimezone('Indian/Maldives');
@@ -1666,7 +1683,7 @@
         $this->assertSame($date->get(Zend_Date::W3C),'2002-02-14T04:31:30+05:00');
         $date->setTimeZone('UTC');
         $date->set(-20, Zend_Date::YEAR_SHORT_8601, 'en_US');
-        $this->assertSame($date->get(Zend_Date::W3C),'-20-02-14T23:31:30+00:00');
+        $this->assertSame($date->get(Zend_Date::W3C),'-20-02-14T23:31:30+00:00');
         $date->set($d2, Zend_Date::YEAR_SHORT_8601, 'en_US');
         $this->assertSame($date->get(Zend_Date::W3C),'2002-02-13T23:31:30+00:00');
         $date->setTimezone('Indian/Maldives');
@@ -2170,13 +2187,13 @@
         $date->set(1234567890);
         $date->set('Thu, 05 Dec 2009 01:31:30 +0500', Zend_Date::RFC_2822);
         $this->assertSame($date->get(Zend_Date::W3C),'2009-12-05T01:31:30+05:00');
-        $date->set(1234567890);
-        try {
-            $date->set('Thu, 05 Fxx 2009 01:31:30 +0500', Zend_Date::RFC_2822);
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
+        $date->set(1234567890);
+        try {
+            $date->set('Thu, 05 Fxx 2009 01:31:30 +0500', Zend_Date::RFC_2822);
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
         
         $date->set(1234567890);
         try {
@@ -2370,7 +2387,7 @@
         } catch (Zend_Date_Exception $e) {
             // success
         }
-        $date->set($d2, Zend_Date::RFC_822);
+        $date->set($d2, Zend_Date::RFC_822);
         $this->assertSame($date->get(Zend_Date::W3C),'2002-01-04T04:36:50+05:00');
         $date->set(1234567890);
         $date->set('Sat, 14 Feb 09 00:31:30 +0500', Zend_Date::RFC_822);
@@ -2599,13 +2616,13 @@
         $date->add(10, Zend_Date::YEAR_SHORT);
         $this->assertSame($date->get(Zend_Date::W3C),'2012-01-04T04:36:50+05:00');
         $date->add(-10, Zend_Date::YEAR_SHORT);
-        $this->assertSame($date->get(Zend_Date::W3C),'2002-01-04T04:36:50+05:00');
+        $this->assertSame($date->get(Zend_Date::W3C),'2002-01-04T04:36:50+05:00');
 
         $date->set($d2);
         $date->add(10, Zend_Date::YEAR_SHORT_8601);
         $this->assertSame($date->get(Zend_Date::W3C),'2012-01-04T04:36:50+05:00');
         $date->add(-10, Zend_Date::YEAR_SHORT_8601);
-        $this->assertSame($date->get(Zend_Date::W3C),'2002-01-04T04:36:50+05:00');
+        $this->assertSame($date->get(Zend_Date::W3C),'2002-01-04T04:36:50+05:00');
 
         $date->set($d2);
         try {
@@ -2959,13 +2976,13 @@
         $date->sub(10, Zend_Date::YEAR_SHORT);
         $this->assertSame($date->get(Zend_Date::W3C),'1992-01-04T04:36:50+05:00');
         $date->sub(-10, Zend_Date::YEAR_SHORT);
-        $this->assertSame($date->get(Zend_Date::W3C),'2002-01-04T04:36:50+05:00');
+        $this->assertSame($date->get(Zend_Date::W3C),'2002-01-04T04:36:50+05:00');
 
         $date->set($d2);
         $date->sub(10, Zend_Date::YEAR_SHORT_8601);
         $this->assertSame($date->get(Zend_Date::W3C),'1992-01-04T04:36:50+05:00');
         $date->sub(-10, Zend_Date::YEAR_SHORT_8601);
-        $this->assertSame($date->get(Zend_Date::W3C),'2002-01-04T04:36:50+05:00');
+        $this->assertSame($date->get(Zend_Date::W3C),'2002-01-04T04:36:50+05:00');
 
         $date->set($d2);
         try {
@@ -3331,7 +3348,7 @@
         $result = $date->setTime('10:20:30');
         $this->assertSame($result->get(Zend_Date::W3C),'2009-02-14T10:20:30+05:00');
         $this->assertSame($date->get(Zend_Date::W3C),'2009-02-14T10:20:30+05:00');
-        $date->setTime('30-20-10','ss:mm:HH');
+        $date->setTime('30-20-10','ss:ii:HH');
         $this->assertSame($date->get(Zend_Date::W3C),'2009-02-14T10:20:30+05:00');
         $date->setTime($d2);
         $this->assertSame($date->get(Zend_Date::W3C),'2009-02-14T04:31:39+05:00');
@@ -3356,13 +3373,13 @@
         $result = $date->addTime(Zend_Date::now());
         $this->assertTrue($result instanceof Zend_Date);
 
-        $date = new Zend_Date(1234567890,null,$locale);
+        $date = new Zend_Date(1234567890,null,$locale);
         $result = $date->addTime('10:20:30');
         $this->assertSame($result->get(Zend_Date::W3C),'2009-02-14T14:52:00+05:00');
         $this->assertSame($date->get(Zend_Date::W3C),'2009-02-14T14:52:00+05:00');
 
         $date = new Zend_Date(1234567890,null,$locale);
-        $date->addTime('30:20:10','ss:mm:HH');
+        $date->addTime('30:20:10','ss:ii:HH');
         $this->assertSame($date->get(Zend_Date::W3C),'2009-02-14T14:52:00+05:00');
 
         $date = new Zend_Date(1234567890,null,$locale);
@@ -3388,7 +3405,7 @@
         $this->assertSame($date->get(Zend_Date::W3C),'2009-02-13T18:11:00+05:00');
 
         $date = new Zend_Date(1234567890,null,$locale);
-        $date->subTime('30-20-10','ss:mm:HH');
+        $date->subTime('30-20-10','ss:ii:HH');
         $this->assertSame($date->get(Zend_Date::W3C),'2009-02-13T18:11:00+05:00');
 
         $date = new Zend_Date(1234567890,null,$locale);
@@ -3455,8 +3472,8 @@
 
         $result = $date->setDate(Zend_Date::now());
         $this->assertTrue($result instanceof Zend_Date);
-        $result = $date->setDate('11.05.2008');
-        // Hint: the hour changes from 0 to 1 because of DST... 
+        $result = $date->setDate('11.05.2008');
+        // Hint: the hour changes from 0 to 1 because of DST... 
         // An hour is added by winter->summertime change
         $this->assertSame($result->get(Zend_Date::W3C),'2008-05-11T04:31:30+05:00');
         $this->assertSame($date->get(Zend_Date::W3C),'2008-05-11T04:31:30+05:00');
@@ -3464,6 +3481,9 @@
         $this->assertSame($date->get(Zend_Date::W3C),'2008-05-11T04:31:30+05:00');
         $date->setDate($d2);
         $this->assertSame($date->get(Zend_Date::W3C),'2009-02-14T04:31:30+05:00');
+        #$date = new Zend_Date('2009/02/14 04:31:30+05:00', 'Y-m-d H:i: s');
+        $date = new Zend_Date('2009/02/14 04:31:30', 'Y-M-d H:i: s');
+        $this->assertSame($date->get(Zend_Date::W3C),'2009-02-14T04:31:30+05:00');
     }
 
     /**
@@ -3654,7 +3674,7 @@
     {
         $locale = new Zend_Locale('de_AT');
         $date = new Zend_Date(1234567890,$locale);
-        $d2   = new Zend_Date(1234567899,$locale);
+        $d2   = new Zend_Date(1234567899,$locale);
         $date->setTimezone('Indian/Maldives');
 
         $result = $date->setArpa(Zend_Date::now());
@@ -3679,7 +3699,7 @@
         $this->assertTrue($result instanceof Zend_Date);
 
         $date = new Zend_Date(1234567890,$locale);
-        $result = $date->addArpa('Sat, 03 May 01 00:00:00 +0500');
+        $result = $date->addArpa('Sat, 03 May 01 00:00:00 +0500');
         $this->assertSame($result->get(Zend_Date::RFC_822),'Sat, 17 Jul 10 23:31:30 +0500');
         $this->assertSame($date->get(Zend_Date::W3C),'4010-07-17T23:31:30+05:00');
 
@@ -3792,70 +3812,70 @@
         $this->assertSame($result['sunset']['civil']->get(Zend_Date::W3C),      '2002-01-04T21:00:08+05:00');
         $this->assertSame($result['sunset']['nautic']->get(Zend_Date::W3C),     '2002-01-04T20:59:18+05:00');
         $this->assertSame($result['sunset']['astronomic']->get(Zend_Date::W3C), '2002-01-04T20:58:28+05:00');
-
-        unset($result);
-        $result = array('longitude' => 0);
-        try {
-            $result = $date->getSunrise($result);
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
-
-        unset($result);
-        $result = array('latitude' => 0);
-        try {
-            $result = $date->getSunrise($result);
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
-
-        unset($result);
-        $result = array('longitude' => 180.1, 'latitude' => 0);
-        try {
-            $result = $date->getSunrise($result);
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
-
-        unset($result);
-        $result = array('longitude' => -180.1, 'latitude' => 0);
-        try {
-            $result = $date->getSunrise($result);
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
-
-        unset($result);
-        $result = array('longitude' => 0, 'latitude' => 90.1);
-        try {
-            $result = $date->getSunrise($result);
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
-
-        unset($result);
-        $result = array('longitude' => 0, 'latitude' => -90.1);
-        try {
-            $result = $date->getSunrise($result);
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
-
-        unset($result);
-        $result = array('latitude' => 0, 'longitude' => 0);
-        $result = $date->getSunInfo($result);
-        $this->assertTrue(is_array($result));
-
-        unset($result);
-        $result = array('latitude' => 0, 'longitude' => 0);
-        $result = $date->getSunrise($result);
-        $this->assertTrue($result instanceof Zend_Date);
+
+        unset($result);
+        $result = array('longitude' => 0);
+        try {
+            $result = $date->getSunrise($result);
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
+
+        unset($result);
+        $result = array('latitude' => 0);
+        try {
+            $result = $date->getSunrise($result);
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
+
+        unset($result);
+        $result = array('longitude' => 180.1, 'latitude' => 0);
+        try {
+            $result = $date->getSunrise($result);
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
+
+        unset($result);
+        $result = array('longitude' => -180.1, 'latitude' => 0);
+        try {
+            $result = $date->getSunrise($result);
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
+
+        unset($result);
+        $result = array('longitude' => 0, 'latitude' => 90.1);
+        try {
+            $result = $date->getSunrise($result);
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
+
+        unset($result);
+        $result = array('longitude' => 0, 'latitude' => -90.1);
+        try {
+            $result = $date->getSunrise($result);
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
+
+        unset($result);
+        $result = array('latitude' => 0, 'longitude' => 0);
+        $result = $date->getSunInfo($result);
+        $this->assertTrue(is_array($result));
+
+        unset($result);
+        $result = array('latitude' => 0, 'longitude' => 0);
+        $result = $date->getSunrise($result);
+        $this->assertTrue($result instanceof Zend_Date);
     }
 
     /**
@@ -4009,8 +4029,8 @@
 
         $result = $date->getYear();
         $this->assertTrue($result instanceof Zend_Date);
-        $this->assertSame($result->toString(), '01.01.2009 05:00:00');
-        $this->assertSame($d2->getYear()->toString(), '01.01.2021 05:00:00');
+        $this->assertSame($result->toStringIso(), '01.01.2009 05:00:00');
+        $this->assertSame($d2->getYear()->toStringIso(), '01.01.2021 05:00:00');
     }
 
     /**
@@ -4020,7 +4040,7 @@
     {
         $locale = new Zend_Locale('de_AT');
 
-        $date = new Zend_Date(1577833200,$locale);
+        $date = new Zend_Date(1577833200,$locale);
         $date2 = new Zend_Date(2006, Zend_Date::YEAR);
         $date->setTimeZone(date_default_timezone_get());
 
@@ -4032,16 +4052,16 @@
 
         $date->setYear(2100);
         $this->assertSame($date->get(Zend_Date::W3C), '2100-01-01T04:00:00+05:00');
-
-        $date->setYear($date2);
-        $this->assertSame($date->get(Zend_Date::W3C), '2006-01-01T04:00:00+05:00');
-
-        try {
-            $date->setYear('noyear');
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
+
+        $date->setYear($date2);
+        $this->assertSame($date->get(Zend_Date::W3C), '2006-01-01T04:00:00+05:00');
+
+        try {
+            $date->setYear('noyear');
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
     }
 
     /**
@@ -4100,153 +4120,153 @@
         $date->addYear(20);
         $this->assertSame($date->get(Zend_Date::W3C), '2120-04-04T04:00:00+05:00');
     }
-
-    /**
-     * Test for subYear
-     */
-    public function testSubYear()
-    {
-        $locale = new Zend_Locale('de_AT');
-
-        $date = new Zend_Date(1577833200,$locale);
-        $date->setTimeZone(date_default_timezone_get());
-
-        $date->subYear(1);
-        $this->assertSame($date->get(Zend_Date::W3C), '2019-01-01T04:00:00+05:00');
-        $date->subYear(1);
-        $this->assertSame($date->get(Zend_Date::W3C), '2018-01-01T04:00:00+05:00');
-        $date->subYear(1);
-        $this->assertSame($date->get(Zend_Date::W3C), '2017-01-01T04:00:00+05:00');
-        $date->subYear(1);
-        $this->assertSame($date->get(Zend_Date::W3C), '2016-01-01T04:00:00+05:00');
-        $date->subYear(1);
-        $this->assertSame($date->get(Zend_Date::W3C), '2015-01-01T04:00:00+05:00');
-
-        $date->setYear(1500);
-        $this->assertSame($date->get(Zend_Date::W3C), '1500-01-01T04:00:00+05:00');
-        $date->subYear(20);
-        $this->assertSame($date->get(Zend_Date::W3C), '1480-01-01T04:00:00+05:00');
-
-        $date->setYear(2100);
-        $this->assertSame($date->get(Zend_Date::W3C), '2100-01-01T04:00:00+05:00');
-        $date->subYear(20);
-        $this->assertSame($date->get(Zend_Date::W3C), '2080-01-01T04:00:00+05:00');
-    }
-
-    /**
-     * Test for compareYear
-     */
-    public function testCompareYear()
-    {
-        $locale = new Zend_Locale('de_AT');
-        $date = new Zend_Date(1234567890,$locale);
-        $d2   = new Zend_Date(1234567899,$locale);
-
-        $date = new Zend_Date(1234567890,$locale);
-        $this->assertSame($date->compareYear(2010), -1);
-        $this->assertSame($date->compareYear(2009), 0);
-        $this->assertSame($date->compareYear(2008), 1);
-        $this->assertSame($date->compareYear($d2), 0);
-    }
-
-    /**
-     * Test for getMonth
-     */
-    public function testGetMonth()
-    {
-        $locale = new Zend_Locale('de_AT');
-
-        $date = new Zend_Date(1234567890,$locale);
-        $d2 = new Zend_Date(1610101010,$locale);
-        $date->setTimeZone(date_default_timezone_get());
-        $d2->setTimeZone(date_default_timezone_get());
-
-        $result = $date->getMonth();
-        $this->assertTrue($result instanceof Zend_Date);
-        $this->assertSame($result->toString(), '01.02.1970 05:00:00');
-        $this->assertSame($date->getMonth()->toString(), '01.02.1970 05:00:00');
-    }
-
-    /**
-     * Test for setMonth
-     */
-    public function testSetMonth()
-    {
-        $locale = new Zend_Locale('de_AT');
-
-        $date = new Zend_Date(1577833200,$locale);
-        $date2 = new Zend_Date(2006, Zend_Date::YEAR);
-        $date->setTimeZone(date_default_timezone_get());
-
-        $date->setMonth(3);
-        $this->assertSame($date->get(Zend_Date::W3C), '2020-03-01T04:00:00+05:00');
-
-        $date->setMonth(-3);
-        $this->assertSame($date->get(Zend_Date::W3C), '2019-09-01T04:00:00+05:00');
-
-        $date->setMonth('March', 'en');
-        $this->assertSame($date->get(Zend_Date::W3C), '2019-03-01T04:00:00+05:00');
-
-        $date->setMonth($date2);
-        $this->assertSame($date->get(Zend_Date::W3C), '2019-01-01T04:00:00+05:00');
-
-        try {
-            $date->setMonth('nomonth');
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
-    }
-
-    /**
-     * Test for addMonth
-     */
-    public function testAddMonth()
-    {
-        $locale = new Zend_Locale('de_AT');
-
-        $date = new Zend_Date(1577833200,$locale);
-        $date->setTimeZone(date_default_timezone_get());
-
-        $date->addMonth(1);
-        $this->assertSame($date->get(Zend_Date::W3C), '2020-02-01T04:00:00+05:00');
-        $date->addMonth(5);
-        $this->assertSame($date->get(Zend_Date::W3C), '2020-07-01T04:00:00+05:00');
-    }
-
-    /**
-     * Test for subMonth
-     */
-    public function testSubMonth()
-    {
-        $locale = new Zend_Locale('de_AT');
-
-        $date = new Zend_Date(1577833200,$locale);
-        $date->setTimeZone(date_default_timezone_get());
-
-        $date->subMonth(1);
-        $this->assertSame($date->get(Zend_Date::W3C), '2019-12-01T04:00:00+05:00');
-        $date->subMonth(12);
-        $this->assertSame($date->get(Zend_Date::W3C), '2018-12-01T04:00:00+05:00');
-    }
-
-    /**
-     * Test for compareMonth
-     */
-    public function testCompareMonth()
-    {
-        $locale = new Zend_Locale('de_AT');
-        $date = new Zend_Date(1234567890,$locale);
-        $d2   = new Zend_Date(1234567899,$locale);
-
-        $date = new Zend_Date(1234567890,$locale);
-        $this->assertSame($date->compareMonth(1), 1);
-        $this->assertSame($date->compareMonth(2), 0);
-        $this->assertSame($date->compareMonth(3), -1);
-        $this->assertSame($date->compareYear($d2), 0);
-    }
 
     /**
+     * Test for subYear
+     */
+    public function testSubYear()
+    {
+        $locale = new Zend_Locale('de_AT');
+
+        $date = new Zend_Date(1577833200,$locale);
+        $date->setTimeZone(date_default_timezone_get());
+
+        $date->subYear(1);
+        $this->assertSame($date->get(Zend_Date::W3C), '2019-01-01T04:00:00+05:00');
+        $date->subYear(1);
+        $this->assertSame($date->get(Zend_Date::W3C), '2018-01-01T04:00:00+05:00');
+        $date->subYear(1);
+        $this->assertSame($date->get(Zend_Date::W3C), '2017-01-01T04:00:00+05:00');
+        $date->subYear(1);
+        $this->assertSame($date->get(Zend_Date::W3C), '2016-01-01T04:00:00+05:00');
+        $date->subYear(1);
+        $this->assertSame($date->get(Zend_Date::W3C), '2015-01-01T04:00:00+05:00');
+
+        $date->setYear(1500);
+        $this->assertSame($date->get(Zend_Date::W3C), '1500-01-01T04:00:00+05:00');
+        $date->subYear(20);
+        $this->assertSame($date->get(Zend_Date::W3C), '1480-01-01T04:00:00+05:00');
+
+        $date->setYear(2100);
+        $this->assertSame($date->get(Zend_Date::W3C), '2100-01-01T04:00:00+05:00');
+        $date->subYear(20);
+        $this->assertSame($date->get(Zend_Date::W3C), '2080-01-01T04:00:00+05:00');
+    }
+
+    /**
+     * Test for compareYear
+     */
+    public function testCompareYear()
+    {
+        $locale = new Zend_Locale('de_AT');
+        $date = new Zend_Date(1234567890,$locale);
+        $d2   = new Zend_Date(1234567899,$locale);
+
+        $date = new Zend_Date(1234567890,$locale);
+        $this->assertSame($date->compareYear(2010), -1);
+        $this->assertSame($date->compareYear(2009), 0);
+        $this->assertSame($date->compareYear(2008), 1);
+        $this->assertSame($date->compareYear($d2), 0);
+    }
+
+    /**
+     * Test for getMonth
+     */
+    public function testGetMonth()
+    {
+        $locale = new Zend_Locale('de_AT');
+
+        $date = new Zend_Date(1234567890,$locale);
+        $d2 = new Zend_Date(1610101010,$locale);
+        $date->setTimeZone(date_default_timezone_get());
+        $d2->setTimeZone(date_default_timezone_get());
+
+        $result = $date->getMonth();
+        $this->assertTrue($result instanceof Zend_Date);
+        $this->assertSame($result->toStringIso(), '01.02.1970 05:00:00');
+        $this->assertSame($date->getMonth()->toStringIso(), '01.02.1970 05:00:00');
+    }
+
+    /**
+     * Test for setMonth
+     */
+    public function testSetMonth()
+    {
+        $locale = new Zend_Locale('de_AT');
+
+        $date = new Zend_Date(1577833200,$locale);
+        $date2 = new Zend_Date(2006, Zend_Date::YEAR);
+        $date->setTimeZone(date_default_timezone_get());
+
+        $date->setMonth(3);
+        $this->assertSame($date->get(Zend_Date::W3C), '2020-03-01T04:00:00+05:00');
+
+        $date->setMonth(-3);
+        $this->assertSame($date->get(Zend_Date::W3C), '2019-09-01T04:00:00+05:00');
+
+        $date->setMonth('March', 'en');
+        $this->assertSame($date->get(Zend_Date::W3C), '2019-03-01T04:00:00+05:00');
+
+        $date->setMonth($date2);
+        $this->assertSame($date->get(Zend_Date::W3C), '2019-01-01T04:00:00+05:00');
+
+        try {
+            $date->setMonth('nomonth');
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
+    }
+
+    /**
+     * Test for addMonth
+     */
+    public function testAddMonth()
+    {
+        $locale = new Zend_Locale('de_AT');
+
+        $date = new Zend_Date(1577833200,$locale);
+        $date->setTimeZone(date_default_timezone_get());
+
+        $date->addMonth(1);
+        $this->assertSame($date->get(Zend_Date::W3C), '2020-02-01T04:00:00+05:00');
+        $date->addMonth(5);
+        $this->assertSame($date->get(Zend_Date::W3C), '2020-07-01T04:00:00+05:00');
+    }
+
+    /**
+     * Test for subMonth
+     */
+    public function testSubMonth()
+    {
+        $locale = new Zend_Locale('de_AT');
+
+        $date = new Zend_Date(1577833200,$locale);
+        $date->setTimeZone(date_default_timezone_get());
+
+        $date->subMonth(1);
+        $this->assertSame($date->get(Zend_Date::W3C), '2019-12-01T04:00:00+05:00');
+        $date->subMonth(12);
+        $this->assertSame($date->get(Zend_Date::W3C), '2018-12-01T04:00:00+05:00');
+    }
+
+    /**
+     * Test for compareMonth
+     */
+    public function testCompareMonth()
+    {
+        $locale = new Zend_Locale('de_AT');
+        $date = new Zend_Date(1234567890,$locale);
+        $d2   = new Zend_Date(1234567899,$locale);
+
+        $date = new Zend_Date(1234567890,$locale);
+        $this->assertSame($date->compareMonth(1), 1);
+        $this->assertSame($date->compareMonth(2), 0);
+        $this->assertSame($date->compareMonth(3), -1);
+        $this->assertSame($date->compareYear($d2), 0);
+    }
+
+    /**
      * Test accessors for _Locale member property of Zend_Date
      */
     public function testLocale()
@@ -4267,47 +4287,47 @@
 
         //Tuesday
         $date->addDay(1);
-        $this->assertSame($date->getWeek()->toString(),'08.01.1970 05:00:00');
+        $this->assertSame($date->getWeek()->toStringIso(),'08.01.1970 05:00:00');
 
         //Wednesday
         $date->addDay(1);
-        $this->assertSame($date->getWeek()->toString(),'08.01.1970 05:00:00');
+        $this->assertSame($date->getWeek()->toStringIso(),'08.01.1970 05:00:00');
 
         //Thursday
         $date->addDay(1);
-        $this->assertSame($date->getWeek()->toString(),'08.01.1970 05:00:00');
+        $this->assertSame($date->getWeek()->toStringIso(),'08.01.1970 05:00:00');
 
         //Friday
         $date->addDay(1);
-        $this->assertSame($date->getWeek()->toString(),'08.01.1970 05:00:00');
+        $this->assertSame($date->getWeek()->toStringIso(),'08.01.1970 05:00:00');
 
         //Friday 05:30 am
         $date->addTime('05:30:00');
-        $this->assertSame($date->getWeek()->toString(),'08.01.1970 05:00:00');
+        $this->assertSame($date->getWeek()->toStringIso(),'08.01.1970 05:00:00');
 
         //Saturday
         $date->addDay(1);
-        $this->assertSame($date->getWeek()->toString(),'08.01.1970 05:00:00');
+        $this->assertSame($date->getWeek()->toStringIso(),'08.01.1970 05:00:00');
 
         //Saturday [ar_EG]
 	    // The right value for AM/PM has to be set in arabic letters
-	    $this->assertSame($date->getWeek('ar_EG')->toString(), '08/01/1970 5:00:00 ص');
+	    $this->assertSame($date->getWeek('ar_EG')->toStringIso(), '08/01/1970 5:00:00 ص');
         $date->setTimeZone('UTC');
-        $this->assertSame($date->getWeek('ar_EG')->toString(), '08/01/1970 12:00:00 ص');
+        $this->assertSame($date->getWeek('ar_EG')->toStringIso(), '08/01/1970 12:00:00 ص');
         $date->setTimeZone('Indian/Maldives');
-        $this->assertSame($date->getWeek('ar_EG')->toString(), '08/01/1970 5:00:00 ص');
+        $this->assertSame($date->getWeek('ar_EG')->toStringIso(), '08/01/1970 5:00:00 ص');
 
         //Sunday [start of a new week as defined per ISO 8601]
         $date->addDay(1);
-        $this->assertSame($date->getWeek()->toString(),'15.01.1970 05:00:00');
+        $this->assertSame($date->getWeek()->toStringIso(),'15.01.1970 05:00:00');
 
         //Monday
         $date->addDay(1);
-        $this->assertSame($date->getWeek()->toString(),'15.01.1970 05:00:00');
+        $this->assertSame($date->getWeek()->toStringIso(),'15.01.1970 05:00:00');
 
         //Monday 03:45 pm
         $date->addTime('15:45:00');
-        $this->assertSame($date->getWeek()->toString(),'15.01.1970 05:00:00');
+        $this->assertSame($date->getWeek()->toStringIso(),'15.01.1970 05:00:00');
     }
 
     /**
@@ -4319,471 +4339,471 @@
         $date = new Zend_Date(0, 'de_AT');
         $date->setTimeZone('UTC');
         $dw = $date->getDay();
-        $this->assertSame($dw->toString(), '01.01.1970 00:00:00');
+        $this->assertSame($dw->toStringIso(), '01.01.1970 00:00:00');
         for($day = 1; $day < 31; $day++) {
             $date->setDay($day);
             $dw = $date->getDay();
             $weekday = str_pad($day, 2, '0', STR_PAD_LEFT);
-            $this->assertSame($dw->toString(), "$weekday.01.1970 00:00:00");
+            $this->assertSame($dw->toStringIso(), "$weekday.01.1970 00:00:00");
         }
     }
-
-    /**
-     * test setLocale/getLocale
-     */
-    public function testSetLocale()
-    {
-        $date = new Zend_Date(0, 'de');
-        
-        $this->assertSame($date->getLocale(), 'de');
-        $date->setLocale('en');
-        $this->assertSame($date->getLocale(), 'en');
-        $date->setLocale('en_XX');
-        $this->assertSame($date->getLocale(), 'en');
-        $date->setLocale('de_AT');
-        $this->assertSame($date->getLocale(), 'de_AT');
-        $locale = new Zend_Locale('ar');
-        $date->setLocale($locale);
-        $this->assertSame($date->getLocale(), 'ar');
-
-        try {
-            $date->setLocale('xx_XX');
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
+
+    /**
+     * test setLocale/getLocale
+     */
+    public function testSetLocale()
+    {
+        $date = new Zend_Date(0, 'de');
+        
+        $this->assertSame($date->getLocale(), 'de');
+        $date->setLocale('en');
+        $this->assertSame($date->getLocale(), 'en');
+        $date->setLocale('en_XX');
+        $this->assertSame($date->getLocale(), 'en');
+        $date->setLocale('de_AT');
+        $this->assertSame($date->getLocale(), 'de_AT');
+        $locale = new Zend_Locale('ar');
+        $date->setLocale($locale);
+        $this->assertSame($date->getLocale(), 'ar');
+
+        try {
+            $date->setLocale('xx_XX');
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
     }
-
-    /**
-     * test looseBehaviour
-     */
-    public function testLoose()
-    {
-        $date = new Zend_Date(0, 'de');
-
-        try {
-            $date->set(null, Zend_Date::YEAR);
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
-
-        $date->set(10, 'de');
-        $this->assertEquals($date->getTimestamp(), 10);
-
-        try {
-            $date->add(null, Zend_Date::YEAR);
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
-
-        $date->add(10, 'de');
-        $this->assertEquals($date->getTimestamp(), 20);
-
-        try {
-            $date->sub(null, Zend_Date::YEAR);
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
-
-        $date->sub(10, 'de');
-        $this->assertEquals($date->getTimestamp(), 10);
-
-        try {
-            $date->compare(null, Zend_Date::YEAR);
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
-
-        try {
-            $date->equals(null, Zend_Date::YEAR);
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
-
-        try {
-            $date->isEarlier(null, Zend_Date::YEAR);
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
-
-        try {
-            $date->isLater(null, Zend_Date::YEAR);
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
-
-        try {
-            $date->setTime(null);
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
-
-        try {
-            $date->addTime(null);
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
-
-        try {
-            $date->subTime(null);
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
-
-        try {
-            $date->compareTime(null);
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
-
-        try {
-            $date->setDate(null);
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
-
-        try {
-            $date->addDate(null);
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
-
-        try {
-            $date->subDate(null);
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
-
-        try {
-            $date->compareDate(null);
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
-
-        try {
-            $date->setIso(null);
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
-
-        try {
-            $date->addIso(null);
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
-
-        try {
-            $date->subIso(null);
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
-
-        try {
-            $date->compareIso(null);
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
-
-        try {
-            $date->setArpa(null);
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
-
-        try {
-            $date->addArpa(null);
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
-
-        try {
-            $date->subArpa(null);
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
-
-        try {
-            $date->compareArpa(null);
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
-
-        try {
-            $date->setYear(null);
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
-
-        try {
-            $date->addYear(null);
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
-
-        try {
-            $date->subYear(null);
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
-
-        try {
-            $date->compareYear(null);
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
-
-        try {
-            $date->setMonth(null);
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
-
-        try {
-            $date->addMonth(null);
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
-
-        try {
-            $date->subMonth(null);
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
-
-        try {
-            $date->compareMonth(null);
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
-
-        try {
-            $date->setDay(null);
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
-
-        try {
-            $date->addDay(null);
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
-
-        try {
-            $date->subDay(null);
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
-
-        try {
-            $date->compareDay(null);
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
-
-        try {
-            $date->setWeekday(null);
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
-
-        try {
-            $date->addWeekday(null);
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
-
-        try {
-            $date->subWeekday(null);
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
-
-        try {
-            $date->compareWeekday(null);
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
-
-        try {
-            $date->setDayOfYear(null);
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
-
-        try {
-            $date->addDayOfYear(null);
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
-
-        try {
-            $date->subDayOfYear(null);
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
-
-        try {
-            $date->compareDayOfYear(null);
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
-
-        try {
-            $date->setHour(null);
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
-
-        try {
-            $date->addHour(null);
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
-
-        try {
-            $date->subHour(null);
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
-
-        try {
-            $date->compareHour(null);
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
-
-        try {
-            $date->setMinute(null);
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
-
-        try {
-            $date->addMinute(null);
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
-
-        try {
-            $date->subMinute(null);
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
-
-        try {
-            $date->compareMinute(null);
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
-
-        try {
-            $date->setSecond(null);
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
-
-        try {
-            $date->addSecond(null);
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
-
-        try {
-            $date->subSecond(null);
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
-
-        try {
-            $date->compareSecond(null);
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
-
-        try {
-            $date->setWeek(null);
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
-
-        try {
-            $date->addWeek(null);
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
-
-        try {
-            $date->subWeek(null);
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
-
-        try {
-            $date->compareWeek(null);
-            $this->fail();
-        } catch (Zend_Date_Exception $e) {
-            // success
-        }
-
-    }
+
+    /**
+     * test looseBehaviour
+     */
+    public function testLoose()
+    {
+        $date = new Zend_Date(0, 'de');
+
+        try {
+            $date->set(null, Zend_Date::YEAR);
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
+
+        $date->set(10, 'de');
+        $this->assertEquals($date->getTimestamp(), 10);
+
+        try {
+            $date->add(null, Zend_Date::YEAR);
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
+
+        $date->add(10, 'de');
+        $this->assertEquals($date->getTimestamp(), 20);
+
+        try {
+            $date->sub(null, Zend_Date::YEAR);
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
+
+        $date->sub(10, 'de');
+        $this->assertEquals($date->getTimestamp(), 10);
+
+        try {
+            $date->compare(null, Zend_Date::YEAR);
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
+
+        try {
+            $date->equals(null, Zend_Date::YEAR);
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
+
+        try {
+            $date->isEarlier(null, Zend_Date::YEAR);
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
+
+        try {
+            $date->isLater(null, Zend_Date::YEAR);
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
+
+        try {
+            $date->setTime(null);
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
+
+        try {
+            $date->addTime(null);
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
+
+        try {
+            $date->subTime(null);
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
+
+        try {
+            $date->compareTime(null);
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
+
+        try {
+            $date->setDate(null);
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
+
+        try {
+            $date->addDate(null);
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
+
+        try {
+            $date->subDate(null);
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
+
+        try {
+            $date->compareDate(null);
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
+
+        try {
+            $date->setIso(null);
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
+
+        try {
+            $date->addIso(null);
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
+
+        try {
+            $date->subIso(null);
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
+
+        try {
+            $date->compareIso(null);
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
+
+        try {
+            $date->setArpa(null);
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
+
+        try {
+            $date->addArpa(null);
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
+
+        try {
+            $date->subArpa(null);
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
+
+        try {
+            $date->compareArpa(null);
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
+
+        try {
+            $date->setYear(null);
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
+
+        try {
+            $date->addYear(null);
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
+
+        try {
+            $date->subYear(null);
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
+
+        try {
+            $date->compareYear(null);
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
+
+        try {
+            $date->setMonth(null);
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
+
+        try {
+            $date->addMonth(null);
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
+
+        try {
+            $date->subMonth(null);
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
+
+        try {
+            $date->compareMonth(null);
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
+
+        try {
+            $date->setDay(null);
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
+
+        try {
+            $date->addDay(null);
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
+
+        try {
+            $date->subDay(null);
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
+
+        try {
+            $date->compareDay(null);
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
+
+        try {
+            $date->setWeekday(null);
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
+
+        try {
+            $date->addWeekday(null);
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
+
+        try {
+            $date->subWeekday(null);
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
+
+        try {
+            $date->compareWeekday(null);
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
+
+        try {
+            $date->setDayOfYear(null);
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
+
+        try {
+            $date->addDayOfYear(null);
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
+
+        try {
+            $date->subDayOfYear(null);
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
+
+        try {
+            $date->compareDayOfYear(null);
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
+
+        try {
+            $date->setHour(null);
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
+
+        try {
+            $date->addHour(null);
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
+
+        try {
+            $date->subHour(null);
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
+
+        try {
+            $date->compareHour(null);
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
+
+        try {
+            $date->setMinute(null);
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
+
+        try {
+            $date->addMinute(null);
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
+
+        try {
+            $date->subMinute(null);
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
+
+        try {
+            $date->compareMinute(null);
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
+
+        try {
+            $date->setSecond(null);
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
+
+        try {
+            $date->addSecond(null);
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
+
+        try {
+            $date->subSecond(null);
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
+
+        try {
+            $date->compareSecond(null);
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
+
+        try {
+            $date->setWeek(null);
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
+
+        try {
+            $date->addWeek(null);
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
+
+        try {
+            $date->subWeek(null);
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
+
+        try {
+            $date->compareWeek(null);
+            $this->fail();
+        } catch (Zend_Date_Exception $e) {
+            // success
+        }
+
+    }
 }
 
 class Zend_Date_TestHelper extends Zend_Date
Index: library/Zend/Locale/Format.php
===================================================================
--- library/Zend/Locale/Format.php	(revision 3498)
+++ library/Zend/Locale/Format.php	(working copy)
@@ -80,7 +80,7 @@
      * @return string  Returns the converted input
      * @throws Zend_Locale_Exception
      */
-    public static function convertNumerals($input, $from, $to = null)
+    static public function convertNumerals($input, $from, $to = null)
     {
         if (!array_key_exists($from, self::$_signs)) {
             throw new Zend_Locale_Exception("script ($from) is no known script, use 'Latin' for 0-9");
@@ -126,7 +126,7 @@
      * @param  string|Zend_Locale  $locale     OPTIONAL Locale for parsing the number format
      * @return integer|string  Returns the extracted number
      */
-    public static function getNumber($input, $precision = null, $locale = null)
+    static public function getNumber($input, $precision = null, $locale = null)
     {
         if (!is_string($input)) {
             return $input;
@@ -181,7 +181,7 @@
      * @param  string|Zend_Locale  $locale     OPTIONAL Locale for parsing
      * @return string  locale formatted number
      */
-    public static function toNumber($value, $precision = null, $locale = null)
+    static public function toNumber($value, $precision = null, $locale = null)
     {
         if (Zend_Locale::isLocale($precision)) {
             $locale = $precision;
@@ -231,7 +231,7 @@
      * @param  string|Zend_Locale  $locale     OPTIONAL Locale for parsing
      * @return string  locale formatted number
      */
-    public static function toNumberFormat($value, $format = null, $locale = null)
+    static public function toNumberFormat($value, $format = null, $locale = null)
     {
         if (Zend_Locale::isLocale($format)) {
             $locale = $format;
@@ -378,7 +378,7 @@
      * @param  string|Zend_Locale  $locale     OPTIONAL Locale for parsing
      * @return boolean  Returns true if a number was found
      */
-    public static function isNumber($input, $locale = null)
+    static public function isNumber($input, $locale = null)
     {
         // Get correct signs for this locale
         $symbols = Zend_Locale_Data::getContent($locale,'numbersymbols');
@@ -401,7 +401,7 @@
      * @param  string|Zend_Locale  $locale     OPTIONAL Locale for parsing
      * @return  float
      */
-    public static function getFloat($input, $precision = null, $locale = null)
+    static public function getFloat($input, $precision = null, $locale = null)
     {
         return floatval(self::getNumber($input, $precision, $locale));
     }
@@ -416,7 +416,7 @@
      * @param  string|Zend_Locale  $locale     OPTIONAL Locale for parsing
      * @return string  Locale formatted number
      */
-    public static function toFloat($value, $precision = null, $locale = null)
+    static public function toFloat($value, $precision = null, $locale = null)
     {
         return self::toNumber($value, $precision, $locale);
     }
@@ -430,7 +430,7 @@
      * @param  string|Zend_Locale  $locale     OPTIONAL Locale for parsing
      * @return boolean  Returns true if a number was found
      */
-    public static function isFloat($value, $locale = null)
+    static public function isFloat($value, $locale = null)
     {
         return self::isNumber($value, $locale);
     }
@@ -452,7 +452,7 @@
      * @param  string|Zend_Locale  $locale  OPTIONAL locale for parsing the number format
      * @return integer                      Returns the extracted number
      */
-    public static function getInteger($input, $locale = null)
+    static public function getInteger($input, $locale = null)
     {
         return intval(self::getFloat($input, 0, $locale));
     }
@@ -465,7 +465,7 @@
      * @param  string|Zend_Locale  $locale  OPTIONAL Locale for parsing
      * @return string                       Locale formatted number
      */
-    public static function toInteger($value, $locale = null)
+    static public function toInteger($value, $locale = null)
     {
         return self::toNumber($value, -1, $locale);
     }
@@ -478,7 +478,7 @@
      * @param  string|Zend_Locale  $locale     OPTIONAL Locale for parsing
      * @return boolean                         Returns true if a integer was found
      */
-    public static function isInteger($value, $locale = null)
+    static public function isInteger($value, $locale = null)
     {
         return self::isNumber($value, $locale);
     }
@@ -488,8 +488,10 @@
      * Parse date and split in named array fields
      *
      * @param string              $date    Date string to parse
-     * @param string              $format  Format to parse. Only single-letter codes (H, m, s, y, M, d),
-     *                                     and MMMM and EEEE are supported.
+     * @param string              $format  Format to parse. Only single-letter codes are supported:
+     *                                     [hH] hour, [i minute, s second,
+     *                                     [yY] year, [mM] month, [dD] day, a am/pm
+     *                                     MMMM month name, EEEE weekday name
      * @param Zend_Locale|string  $locale  OPTIONAL Locale of $number, possibly in string form (e.g. 'de_AT')
      * @return array                       possible array members: day, month, year, hour, minute, second, fixed, format
      */
@@ -497,6 +499,7 @@
     {
         $number = $date; // working copy
         $result['format'] = $format; // save the format used to normalize $number (convenience)
+        $result['locale'] = $locale; // save the local  used to normalize $number (convenience)
 
         $day   = iconv_strpos($format, 'd');
         $month = iconv_strpos($format, 'M');
@@ -505,52 +508,64 @@
         $min   = iconv_strpos($format, 'm');
         $sec   = iconv_strpos($format, 's');
         $am    = null;
+        if ($year === false) {
+            $year = iconv_strpos($format, 'Y');
+        }
+        if ($month === false) {
+            $month = iconv_strpos($format, 'm');
+        }
+        if ($day === false) {
+            $day = iconv_strpos($format, 'D');
+        }
         if ($hour === false) {
             $hour = iconv_strpos($format, 'h');
         }
-        if ($day === false) {
-            $day = iconv_strpos($format, 'E');
+        if ($min === false) {
+            $min = iconv_strpos($format, 'i');
         }
-
         if ($day !== false) {
             $parse[$day]   = 'd';
+            if (!empty($locale) && $locale !== 'root' && (!is_object($locale) || $locale->toString() !== 'root')) {
+                // erase day string
+                $daylist = Zend_Locale_Data::getContent($locale, 'daylist', array('gregorian', 'wide'));
+                foreach($daylist as $key => $name) {
+                    if (iconv_strpos($number, $name) !== false) {
+                        $number = str_replace($name, "EEEE", $number);
+                        break;
+                    }
+                }
+            }
+        }
+        $position = false;
+
+        if ($month !== false) {
             $parse[$month] = 'M';
+            if (!empty($locale) && $locale !== 'root' && (!is_object($locale) || $locale->toString() !== 'root')) {
+                // prepare to convert month name to their numeric equivalents, if requested, and we have a $locale
+                $position = self::_replaceMonth($number, Zend_Locale_Data::getContent($locale, 'monthlist', array('gregorian', 'wide')));
+                if ($position === false) {
+                    $position = self::_replaceMonth($number, Zend_Locale_Data::getContent($locale, 'monthlist', array('gregorian', 'abbreviated')));
+                }
+            }
+        }
+        if ($year !== false) {
             $parse[$year]  = 'y';
         }
         if ($hour !== false) {
             $parse[$hour] = 'H';
-            $parse[$min]  = 'm';
-            if ($sec !== false) {
-                $parse[$sec]  = 's';
-            }
         }
+        if ($min !== false) {
+            $parse[$min] = 'i';
+        }
+        if ($sec !== false) {
+            $parse[$sec] = 's';
+        }
 
         if (empty($parse)) {
             throw new Zend_Locale_Exception("unknown format, neither date nor time in '$format' found");
         }
         ksort($parse);
 
-        // erase day string
-        if (iconv_strpos($format, 'EEEE') !== false) {
-            $daylist = Zend_Locale_Data::getContent($locale, 'daylist', array('gregorian', 'wide'));
-            foreach($daylist as $key => $name) {
-                if (iconv_strpos($number, $name) !== false) {
-                    $number   = str_replace($name, "EEEE", $number);
-                    break;
-                }
-            }
-        }
-
-        $monthlist = false;
-        if (!empty($locale) && $month) {
-            // prepare to convert month name to their numeric equivalents, if requested, and we have a $locale
-            if (iconv_strpos($format, 'MMMM') !== false) {
-                $monthlist = Zend_Locale_Data::getContent($locale, 'monthlist', array('gregorian', 'wide'));
-            } else {
-                $monthlist = Zend_Locale_Data::getContent($locale, 'monthlist', array('gregorian', 'abbreviated'));
-            }
-        }
-
         // get daytime
         if (iconv_strpos($format, 'a') !== false) {
             $daytime = Zend_Locale_Data::getContent($locale, 'daytime', 'gregorian');
@@ -561,24 +576,6 @@
             }
         }
 
-        $position = false;
-
-        // If $locale was invalid, $monthlist will default to a "root" identity
-        // mapping for each month number from 1 to 12.
-        // If no $locale was given, or $locale was invalid, do not use this identity mapping to normalize.
-        // Otherwise, translate locale aware month names in $number to their numeric equivalents.
-        if ($monthlist && $monthlist[1] != 1) {
-            foreach($monthlist as $key => $name) {
-                if (($position = iconv_strpos($number, $name)) !== false) {
-                    if ($key < 10) {
-                        $key = "0" . $key;
-                    }
-                    $number   = str_replace($name, $key, $number);
-                    break;
-                }
-            }
-        }
-
         // split number parts 
         $split = false;
         preg_match_all('/\d+/u', $number, $splitted);
@@ -619,7 +616,7 @@
                     break;
                 case 'y':
                     $length = 2;
-                    if (iconv_substr($format, $year, 4) == 'yyyy') {
+                    if ((iconv_substr($format, $year, 4) == 'yyyy') || (iconv_substr($format, $year, 4) == 'YYYY')) {
                         $length = 4;
                     }
                     if ($split === false) {
@@ -643,7 +640,7 @@
                     }
                     ++$cnt;
                     break;
-                case 'm':
+                case 'i':
                     if ($split === false) {
                         if (count($splitted[0]) > $cnt) {
                             $result['minute'] = (int) $splitted[0][$cnt];
@@ -685,7 +682,7 @@
             if (isset($result['day']) and isset($result['month'])) {
                 if (($position !== false) && ($position != $month)) {
                     if ($fix !== true) {
-                        throw new Zend_Locale_Exception("unable to parse date '$date' using '$format'");
+                        throw new Zend_Locale_Exception("unable to parse date '$date' using '$format' (false month, $position, $month)");
                     }
                     $temp = $result['day'];
                     $result['day']   = $result['month'];
@@ -698,7 +695,7 @@
             if (isset($result['day']) and isset($result['year'])) {
                 if ($result['day'] > 31) {
                     if ($fix !== true) {
-                        throw new Zend_Locale_Exception("unable to parse date '$date' using '$format'");
+                        throw new Zend_Locale_Exception("unable to parse date '$date' using '$format' (d <> y)");
                     }
                     $temp = $result['year'];
                     $result['year'] = $result['day'];
@@ -711,7 +708,7 @@
             if (isset($result['month']) and isset($result['year'])) {
                 if ($result['month'] > 31) {
                     if ($fix !== true) {
-                        throw new Zend_Locale_Exception("unable to parse date '$date' using '$format'");
+                        throw new Zend_Locale_Exception("unable to parse date '$date' using '$format' (M <> y)");
                     }
                     $temp = $result['year'];
                     $result['year']  = $result['month'];
@@ -724,7 +721,7 @@
             if (isset($result['month']) and isset($result['day'])) {
                 if ($result['month'] > 12) {
                     if ($fix !== true || $result['month'] > 31) {
-                        throw new Zend_Locale_Exception("unable to parse date '$date' using '$format'");
+                        throw new Zend_Locale_Exception("unable to parse date '$date' using '$format' (M <> d)");
                     }
                     $temp = $result['day'];
                     $result['day']   = $result['month'];
@@ -738,12 +735,42 @@
 
 
     /**
+     * Search $number for a month name found in $monthlist, and replace if found.
+     *
+     * @param  string  $number     Date string (modified)
+     * @param  array   $monthlist  List of month names
+     *
+     * @return int|false  position of replaced string (false if nothing replaced) 
+     */
+    static protected function _replaceMonth(&$number, $monthlist)
+    {
+        // If $locale was invalid, $monthlist will default to a "root" identity
+        // mapping for each month number from 1 to 12.
+        // If no $locale was given, or $locale was invalid, do not use this identity mapping to normalize.
+        // Otherwise, translate locale aware month names in $number to their numeric equivalents.
+        $position = false;
+        if ($monthlist && $monthlist[1] != 1) {
+            foreach($monthlist as $key => $name) {
+                if (($position = iconv_strpos($number, $name)) !== false) {
+                    if ($key < 10) {
+                        $key = "0" . $key;
+                    }
+                    $number   = str_replace($name, $key, $number);
+                    return $position;
+                }
+            }
+        }
+        return false;
+    }
+
+
+    /**
      * Returns the default date format for $locale.
      *
      * @param  string|Zend_Locale  $locale  OPTIONAL Locale of $number, possibly in string form (e.g. 'de_AT')
      * @return string  format
      */
-    public static function getDateFormat($locale = null)
+    static public function getDateFormat($locale = null)
     {
         $format = Zend_Locale_Data::getContent($locale, 'defdateformat', 'gregorian');
         $format = $format['default'];
@@ -753,7 +780,6 @@
     }
 
 
-
     /**
      * Returns an array with the normalized date from an locale date
      * a input of 10.01.2006 without a $locale would return:
@@ -767,10 +793,10 @@
      * @param  string|Zend_Locale  $locale  OPTIONAL Locale of $number, possibly in string form (e.g. 'de_AT')
      * @return array                        Possible array members: day, month, year, hour, minute, second, format
      */
-    public static function getDate($date, $format = null, $locale = null)
+    static public function getDate($date, $format = null, $locale = null)
     {
         if (empty($format)) {
-            $format = self::getDateFormat($locale);
+            $format = str_replace('m', 'i', self::getDateFormat($locale));
         }
 
         return self::_parseDate($date, $format, $locale, false);
@@ -795,10 +821,10 @@
      * @param  string|Zend_Locale  $locale  OPTIONAL Locale of $number, possibly in string form (e.g. 'de_AT')
      * @return array                        Possible array members: day, month, year, hour, minute, second, fixed, format
      */
-    public static function getCorrectableDate($date, $format = null, $locale = null)
+    static public function getCorrectableDate($date, $format = null, $locale = null)
     {
         if (empty($format)) {
-            $format = self::getDateFormat($locale);
+            $format = str_replace('m', 'i', self::getDateFormat($locale));
         }
 
         return self::_parseDate($date, $format, $locale, true);
@@ -814,7 +840,7 @@
      * @param  string|Zend_Locale  $locale  OPTIONAL Locale for parsing the date string
      * @return boolean
      */
-    public static function isDate($date, $format = null, $locale = null)
+    static public function isDate($date, $format = null, $locale = null)
     {
         try {
             $date = self::getDate($date, $format, $locale);
@@ -838,7 +864,7 @@
      * @param  string|Zend_Locale  $locale  OPTIONAL Locale for parsing the date string
      * @return boolean
      */
-    public static function isCorrectableDate($date, $format = null, $locale = null)
+    static public function isCorrectableDate($date, $format = null, $locale = null)
     {
         try {
             $date = self::getCorrectableDate($date, $format, $locale);
@@ -855,7 +881,7 @@
      * @param  string|Zend_Locale  $locale  OPTIONAL Locale of $number, possibly in string form (e.g. 'de_AT')
      * @return string  format
      */
-    public static function getTimeFormat($locale = null)
+    static public function getTimeFormat($locale = null)
     {
         $format = Zend_Locale_Data::getContent($locale, 'deftimeformat', 'gregorian');
         $format = $format['default'];
@@ -879,7 +905,7 @@
      * @param  string|Zend_Locale  $locale  OPTIONAL Locale of $number, possibly in string form (e.g. 'de_AT')
      * @return array                        Possible array members: day, month, year, hour, minute, second
      */
-    public static function getTime($time, $format = null, $locale = null)
+    static public function getTime($time, $format = null, $locale = null)
     {
         if (empty($format)) {
             $format = self::getTimeFormat($locale);
@@ -897,7 +923,7 @@
      * @param locale $locale  OPTIONAL Locale of time string
      * @return boolean
      */
-    public static function isTime($time, $format = null, $locale = null)
+    static public function isTime($time, $format = null, $locale = null)
     {
         try {
             $date = self::getTime($time, $format, $locale);
Index: library/Zend/Date.php
===================================================================
--- library/Zend/Date.php	(revision 3498)
+++ library/Zend/Date.php	(working copy)
@@ -285,6 +285,31 @@
 
     /**
      * Returns a string representation of the object
+     * Supported format tokens are the same as PHP's date() function.
+     *
+     * @param  string              $format  OPTIONAL An rule for formatting the output, if null the default dateformat is used
+     * @param  string|Zend_Locale  $locale  OPTIONAL Locale for parsing input
+     * @return string
+     */
+    public function toString($format = null, $locale = null)
+    {
+        if (Zend_Locale::isLocale($format)) {
+            $locale = $format;
+            $format = null;
+        } else if ($locale === null) {
+            $locale = $this->getLocale();
+        }
+
+        if ($format === null) {
+            return $this->toStringIso(null, $locale);
+        }
+
+        return $this->date($format, $this->getUnixTimestamp(), $locale);
+    }
+
+
+    /**
+     * Returns a string representation of the object
      * Supported format tokens are:
      * G - era, y - year, Y - ISO year, M - month, w - week of year, D - day of year, d - day of month
      * E - day of week, e - number of weekday, h - hour 1-12, H - hour 0-23, m - minute, s - second
@@ -299,15 +324,13 @@
      * @param  string|Zend_Locale  $locale  OPTIONAL Locale for parsing input
      * @return string
      */
-    public function toString($format = null, $locale = null)
+    public function toStringIso($format = null, $locale = null)
     {
-        if ($locale === null) {
-            $locale = $this->getLocale();
-        }
-
         if (Zend_Locale::isLocale($format)) {
             $locale = $format;
             $format = null;
+        } else if ($locale === null) {
+            $locale = $this->getLocale();
         }
 
         if ($format === null) {
@@ -584,7 +607,7 @@
      */
     public function __toString()
     {
-        return $this->toString(null, $this->_Locale);
+        return $this->toStringIso(null, $this->_Locale);
     }
 
 
@@ -634,9 +657,7 @@
                 break;
 
             case Zend_Date::WEEKDAY_SHORT :
-                $weekday = strtolower($this->date('D', $this->getUnixTimestamp(), false));
-                $day = Zend_Locale_Data::getContent($locale, 'day', array('gregorian', 'wide', $weekday));
-                return substr($day[$weekday], 0, 3);
+                return $this->date('D', $this->getUnixTimestamp(), $locale);
                 break;
 
             case Zend_Date::DAY_SHORT :
@@ -687,9 +708,7 @@
 
             // month formats
             case Zend_Date::MONTH_NAME :
-                $month = $this->date('n', $this->getUnixTimestamp(), false);
-                $mon = Zend_Locale_Data::getContent($locale, 'month', array('gregorian', 'format', 'wide', $month));
-                return $mon[$month];
+                return $this->date('F', $this->getUnixTimestamp(), $locale);
                 break;
 
             case Zend_Date::MONTH :
@@ -697,9 +716,7 @@
                 break;
 
             case Zend_Date::MONTH_NAME_SHORT :
-                $month = $this->date('n', $this->getUnixTimestamp(), false);
-                $mon = Zend_Locale_Data::getContent($locale, 'month', array('gregorian', 'format', 'abbreviated', $month));
-                return $mon[$month];
+                return $this->date('M', $this->getUnixTimestamp(), $locale);
                 break;
 
             case Zend_Date::MONTH_SHORT :
@@ -856,51 +873,51 @@
                 break;
 
             case Zend_Date::DATES :
-                return $this->toString(Zend_Locale_Format::getDateFormat($locale), $locale);
+                return $this->toStringIso(Zend_Locale_Format::getDateFormat($locale), $locale);
                 break;
 
             case Zend_Date::DATE_FULL :
                 $date = Zend_Locale_Data::getContent($locale, 'dateformat', array('gregorian', 'full'));
-                return $this->toString($date['pattern'], $locale);
+                return $this->toStringIso($date['pattern'], $locale);
                 break;
 
             case Zend_Date::DATE_LONG :
                 $date = Zend_Locale_Data::getContent($locale, 'dateformat', array('gregorian', 'long'));
-                return $this->toString($date['pattern'], $locale);
+                return $this->toStringIso($date['pattern'], $locale);
                 break;
 
             case Zend_Date::DATE_MEDIUM :
                 $date = Zend_Locale_Data::getContent($locale, 'dateformat', array('gregorian', 'medium'));
-                return $this->toString($date['pattern'], $locale);
+                return $this->toStringIso($date['pattern'], $locale);
                 break;
 
             case Zend_Date::DATE_SHORT :
                 $date = Zend_Locale_Data::getContent($locale, 'dateformat', array('gregorian', 'short'));
-                return $this->toString($date['pattern'], $locale);
+                return $this->toStringIso($date['pattern'], $locale);
                 break;
 
             case Zend_Date::TIMES :
-                return $this->toString(Zend_Locale_Format::getTimeFormat($locale), $locale);
+                return $this->toStringIso(Zend_Locale_Format::getTimeFormat($locale), $locale);
                 break;
 
             case Zend_Date::TIME_FULL :
                 $time = Zend_Locale_Data::getContent($locale, 'timeformat', array('gregorian', 'full'));
-                return $this->toString($time['pattern'], $locale);
+                return $this->toStringIso($time['pattern'], $locale);
                 break;
 
             case Zend_Date::TIME_LONG :
                 $time = Zend_Locale_Data::getContent($locale, 'timeformat', array('gregorian', 'long'));
-                return $this->toString($time['pattern'], $locale);
+                return $this->toStringIso($time['pattern'], $locale);
                 break;
 
             case Zend_Date::TIME_MEDIUM :
                 $time = Zend_Locale_Data::getContent($locale, 'timeformat', array('gregorian', 'medium'));
-                return $this->toString($time['pattern'], $locale);
+                return $this->toStringIso($time['pattern'], $locale);
                 break;
 
             case Zend_Date::TIME_SHORT :
                 $time = Zend_Locale_Data::getContent($locale, 'timeformat', array('gregorian', 'short'));
-                return $this->toString($time['pattern'], $locale);
+                return $this->toStringIso($time['pattern'], $locale);
                 break;
 
             case Zend_Date::ATOM :
@@ -2352,7 +2369,6 @@
             $time->set($parsed['second'], Zend_Date::SECOND);
             $time = $time->get(Zend_Date::TIME_MEDIUM, $locale);
         }
-
         $return = $this->_calcdetail($calc, $time, Zend_Date::TIME_MEDIUM, $locale);
         if ($calc != 'cmp') {
             return $this;
Index: library/Zend/Date/DateObject.php
===================================================================
--- library/Zend/Date/DateObject.php	(revision 3498)
+++ library/Zend/Date/DateObject.php	(working copy)
@@ -286,41 +286,44 @@
      *
      * @param  string   $format     format for output
      * @param  mixed    $timestamp
-     * @param  boolean  $gmt        OPTIONAL true = other arguments are for UTC time, false = arguments are for local time/date
+     * @param  string|Zend_Locale  $locale  OPTIONAL (used only for month and weekday names)
      * @return string
      */
-    protected function date($format, $timestamp = null, $gmt = false)
+    protected function date($format, $timestamp = null, $locale = null)
     {
-        if ($timestamp === null) {
-
-            $oldzone = @date_default_timezone_get();
-            if ($this->_timezone != $oldzone) {
-                date_default_timezone_set($this->_timezone);
+        if (empty($locale)) {
+            if ($timestamp === null) {
+    
+                $oldzone = @date_default_timezone_get();
+                if ($this->_timezone != $oldzone) {
+                    date_default_timezone_set($this->_timezone);
+                }
+    
+                $result = @date($format);
+                date_default_timezone_set($oldzone);
+    
+                return $result;
             }
-
-            $result = ($gmt) ? @gmdate($format) : @date($format);
-            date_default_timezone_set($oldzone);
-
-            return $result;
-        }
-
-        if (abs($timestamp) <= 0x7FFFFFFF) {
-
-            $oldzone = @date_default_timezone_get();
-            if ($this->_timezone != $oldzone) {
-                date_default_timezone_set($this->_timezone);
+    
+            if (abs($timestamp) <= 0x7FFFFFFF) {
+    
+                $oldzone = @date_default_timezone_get();
+                if ($this->_timezone != $oldzone) {
+                    date_default_timezone_set($this->_timezone);
+                }
+    
+                $result = @date($format, $timestamp);
+                date_default_timezone_set($oldzone);
+    
+                return $result;
             }
+            $timestamp -= $this->_offset;
 
-            $result = ($gmt) ? @gmdate($format, $timestamp) : @date($format, $timestamp);
-            date_default_timezone_set($oldzone);
-
-            return $result;
+        } else {
+            if ($timestamp === null) {
+                $timestamp = self::_getTime();
+            }
         }
-
-        // check on false or null alone failes
-        if (empty($gmt)) {
-            $timestamp -= $this->_offset;
-        }
         
         $date = $this->getDateParts($timestamp, true);
         $length = strlen($format);
@@ -336,7 +339,11 @@
                     break;
 
                 case 'D':  // day of week, 3 letters, Mon - Sun
-                    $output .= date('D', 86400 * (3 + self::dayOfWeek($date['year'], $date['mon'], $date['mday'])));
+                    $weekday = date('D', 86400 * (4 + self::dayOfWeek($date['year'], $date['mon'], $date['mday'])));
+                    $weekday = strtolower($weekday);
+                    $day = Zend_Locale_Data::getContent($locale, 'day', array('gregorian', 'wide', $weekday));
+                    #$output .= iconv_substr($day[$weekday], 0, 3, 'UTF-8');
+                    $output .= substr($day[$weekday], 0, 3);
                     break;
 
                 case 'j':  // day of month, without leading zero, 1 - 31
@@ -384,7 +391,8 @@
 
                 // month formats
                 case 'F':  // string month name, january - december
-                    $output .= date('F', mktime(0, 0, 0, $date['mon'], 2, 1971));
+                    $mon = Zend_Locale_Data::getContent($locale, 'month', array('gregorian', 'format', 'wide', $date['mon']));
+                    $output .= $mon[$date['mon']];
                     break;
 
                 case 'm':  // number of month, with leading zeros, 01 - 12
@@ -392,7 +400,8 @@
                     break;
 
                 case 'M':  // 3 letter month name, Jan - Dec
-                    $output .= date('M',mktime(0, 0, 0, $date['mon'], 2, 1971));
+                    $mon = Zend_Locale_Data::getContent($locale, 'month', array('gregorian', 'format', 'abbreviated', $date['mon']));
+                    $output .= $mon[$date['mon']];
                     break;
 
                 case 'n':  // number of month, without leading zeros, 1 - 12
@@ -438,9 +447,6 @@
 
                 case 'B':  // swatch internet time
                     $dayseconds = ($date['hours'] * 3600) + ($date['minutes'] * 60) + $date['seconds'];
-                    if ($gmt === true) {
-                        $dayseconds += 3600;
-                    }
                     $output .= (int) (($dayseconds % 86400) / 86.4); 
                     break;
 
@@ -489,48 +495,33 @@
 
                 // timezone formats
                 case 'e':  // timezone identifier
-                    if ($gmt === true) {
-                        $output .= gmdate('e', mktime($date['hours'], $date['minutes'], $date['seconds'], 
+                    $output .=   date('e', mktime($date['hours'], $date['minutes'], $date['seconds'], 
                                                       $date['mon'], $date['mday'], 2000));
-                    } else {
-                        $output .=   date('e', mktime($date['hours'], $date['minutes'], $date['seconds'], 
-                                                      $date['mon'], $date['mday'], 2000));
-                    }
                     break;
 
                 case 'I':  // daylight saving time or not
-                    if ($gmt === true) {
-                        $output .= gmdate('I', mktime($date['hours'], $date['minutes'], $date['seconds'],
+                    $output .=   date('I', mktime($date['hours'], $date['minutes'], $date['seconds'],
                                                       $date['mon'], $date['mday'], 2000));
-                    } else {
-                        $output .=   date('I', mktime($date['hours'], $date['minutes'], $date['seconds'],
-                                                      $date['mon'], $date['mday'], 2000));
-                    }
                     break;
 
                 case 'O':  // difference to GMT in hours
-                    $gmtstr = ($gmt === true) ? 0 : $this->_offset;
+                    $gmtstr = $this->_offset;
                     $output .= sprintf('%s%04d', ($gmtstr <= 0) ? '+' : '-', abs($gmtstr) / 36);
                     break;
 
                 case 'P':  // difference to GMT with colon
-                    $gmtstr = ($gmt === true) ? 0 : $this->_offset;
+                    $gmtstr = $this->_offset;
                     $gmtstr = sprintf('%s%04d', ($gmtstr <= 0) ? '+' : '-', abs($gmtstr) / 36);
                     $output = $output . substr($gmtstr, 0, 3) . ':' . substr($gmtstr, 3);
                     break;
 
                 case 'T':  // timezone settings
-                    if ($gmt === true) {
-                        $output .= gmdate('T', mktime($date['hours'], $date['minutes'], $date['seconds'],
+                    $output .=   date('T', mktime($date['hours'], $date['minutes'], $date['seconds'],
                                                       $date['mon'], $date['mday'], 2000));
-                    } else {
-                        $output .=   date('T', mktime($date['hours'], $date['minutes'], $date['seconds'],
-                                                      $date['mon'], $date['mday'], 2000));
-                    }
                     break;
 
                 case 'Z':  // timezone offset in seconds
-                    $output .= ($gmt === true) ? 0 : -$this->_offset;
+                    $output .= -$this->_offset;
                     break;
 
 
Index: documentation/manual/en/module_specs/Zend_Date-Overview.xml
===================================================================
--- documentation/manual/en/module_specs/Zend_Date-Overview.xml	(revision 3498)
+++ documentation/manual/en/module_specs/Zend_Date-Overview.xml	(working copy)
@@ -46,12 +46,14 @@
         <example>
             <title>User-specified input date format</title>
 <programlisting role="php"><![CDATA[<?php
-$date1 = Zend_Date('Feb 31, 2007');
-echo $date1, "\n";
-$date2 = Zend_Date('Feb 31, 2007', Zend_Date::DATES);
-echo $date2, "\n";
-$date3 = Zend_Date('Feb 31, 2007', 'MM.dd.YYYY'); // strictly restricts interpretation to specified format
-echo $date3, "\n";
+$date1 = new Zend_Date('Feb 31, 2007', null, 'en_US');
+echo $date1, "\n"; // outputs "Mar 3, 2007 12:00:00 AM"
+
+$date2 = new Zend_Date('Feb 31, 2007', Zend_Date::DATES, 'en_US');
+echo $date2, "\n"; // outputs "Mar 3, 2007 12:00:00 AM"
+
+$date3 = new Zend_Date('Feb 31, 2007', 'MM.dd.YYYY'); // strictly restricts interpretation to specified format
+echo $date3, "\n"; // outputs "Mar 3, 2007 12:00:00 AM"
 ?>]]></programlisting>
         </example>
 
@@ -462,15 +464,15 @@
                 </thead>
                 <tbody>
                     <row>
-                        <entry>toString()</entry>
+                        <entry>toStringIso()</entry>
                         <entry>
                             <para>
-                                <emphasis role="strong">toString($format = null, $locale = null)</emphasis>
+                                <emphasis role="strong">toStringIso($format = null, $locale = null)</emphasis>
                             </para>
                             <para>
                                 Invoke directly or via the magic method <code>__toString()</code>. The
-                                <code>toString()</code> method automatically formats the date object's value according
-                                to the conventions of the object's locale, or an optionally specified
+                                <code>toStringIso()</code> method automatically formats the date object's value
+                                according to the conventions of the object's locale, or an optionally specified
                                 <code>$locale</code>. For a list of supported format codes, see
                                 <xref linkend="zend.date.constants.selfdefinedformats" />
                                 .
@@ -478,6 +480,19 @@
                         </entry>
                     </row>
                     <row>
+                        <entry>toString()</entry>
+                        <entry>
+                            <para>
+                                <emphasis role="strong">toString($format = null, $locale = null)</emphasis>
+                            </para>
+                            <para>
+                                This methods works similarly to <code>toStringIso()</code>, except
+                                uses the familiar date format specifier tokens from
+                                <ulink url="http://www.php.net/date">PHP's date()</ulink>.
+                            </para>
+                        </entry>
+                    </row>
+                    <row>
                         <entry>toValue()</entry>
                         <entry>
                             <para>
Index: documentation/manual/en/module_specs/Zend_Date-Basic.xml
===================================================================
--- documentation/manual/en/module_specs/Zend_Date-Basic.xml	(revision 3498)
+++ documentation/manual/en/module_specs/Zend_Date-Basic.xml	(working copy)
@@ -124,8 +124,8 @@
 
 print "Date via get() = ", $date->get(Zend_Date::W3C), "\n";
 
-// use magic __toString() method to call Zend_Date's toString()
-print "Date via toString() = ", $date, "\n";
+// use magic __toString() method to call Zend_Date's toStringIso()
+print "Date via toStringIso() = ", $date, "\n";
 ?>]]></programlisting>
             </example>
 
Index: documentation/manual/en/module_specs/Zend_Locale-DatesTimes.xml
===================================================================
--- documentation/manual/en/module_specs/Zend_Locale-DatesTimes.xml	(revision 3498)
+++ documentation/manual/en/module_specs/Zend_Locale-DatesTimes.xml	(working copy)
@@ -29,13 +29,13 @@
         </para>
 
         <para>
-            Also, the sister method <code>getCorrectableDate()</code> adds a key 'fixed' with a whole number value indicating
+            The <code>getCorrectableDate()</code> method adds a key 'fixed' with a whole number value indicating
             if the input date string required "fixing" by rearranging the day, month, or year in the input to fit the
             format used.
         </para>
 
         <table>
-            <title>'fixed' key values</title>
+            <title>'fixed' key values for getCorrectableDate()</title>
             <tgroup cols='4'>
                 <thead>
                     <row>
@@ -332,9 +332,11 @@
         <title>Testing Dates</title>
 
         <para>
-            Use <code>isDate()</code> to check if a given string contains a valid date. The <code>isDate()</code> method
-            uses <code>getDate()</code>, not <code>getCorrectableDate()</code> to avoid returning true when the input fails to
-            conform to the date format.
+            Use <code>isDate($inputString, $format, $locale)</code> to check if a given string contains a valid date.
+            The <code>isDate()</code> method uses <code>getDate()</code>, not <code>getCorrectableDate()</code> to avoid
+            returning true when the input fails to conform to the date format.  If errors are detected in the input,
+            such as swapped values for months and days, the <code>isCorrectableDate()</code> method will apply
+            heuristics to "correct" dates before determining their validity.
         </para>
 
         <example>
@@ -343,7 +345,8 @@
 require_once 'Zend/Locale.php';
 
 $locale = new Zend_Locale('de_AT');
-if (Zend_Locale_Format::isDate('13.Apr.2006', $locale) {
+// using the default date format for 'de_AT', is this a valid date?
+if (Zend_Locale_Format::isDate('13.Apr.2006', null, $locale) {
     print "date";
 } else {
     print "not a date";
Index: documentation/manual/en/module_specs/Zend_Date-Constants.xml
===================================================================
--- documentation/manual/en/module_specs/Zend_Date-Constants.xml	(revision 3498)
+++ documentation/manual/en/module_specs/Zend_Date-Constants.xml	(working copy)
@@ -677,7 +677,8 @@
 
 $locale = new Zend_Locale('de_AT');
 $date = new Zend_Date(1234567890, false, $locale);
-print $date->toString("'Era:GGGG='GGGG, ' Date:yy.MMMM.dd'yy.MMMM.dd");
+print $date->toStringIso("'Era:GGGG='GGGG, ' Date:yy.MMMM.dd'yy.MMMM.dd");
+print $date->toString('F j, Y, g:i a'); // outputs something like 'February 16, 2007, 3:36 am'
 ?>]]></programlisting>
         </example>
 
