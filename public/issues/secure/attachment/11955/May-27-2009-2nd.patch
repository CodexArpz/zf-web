--- /home/sass/zend/library/Zend/./View/Helper/FormCheckbox.php	2009-05-27 12:47:38.000000000 -0700
+++ ./View/Helper/FormCheckbox.php	2009-05-27 23:41:59.000000000 -0700
@@ -42,8 +42,8 @@
      * @var array
      */
     protected static $_defaultCheckedOptions = array(
-        'checked'   => '1',
-        'unChecked' => '0'
+        'checkedValue'   => '1',
+        'uncheckedValue' => '0'
     );
 
     /**
@@ -89,7 +89,7 @@
         // build the element
         $xhtml = '';
         if (!strstr($name, '[]')) {
-            $xhtml = $this->_hidden($name, $checkedOptions['unCheckedValue']);
+            $xhtml = $this->_hidden($name, $checkedOptions['uncheckedValue']);
         }
         $xhtml .= '<input type="checkbox"'
                 . ' name="' . $this->view->escape($name) . '"'
@@ -115,27 +115,27 @@
     {
         // Checked/unchecked values
         $checkedValue   = null;
-        $unCheckedValue = null;
+        $uncheckedValue = null;
         if (is_array($checkedOptions)) {
-            if (array_key_exists('checked', $checkedOptions)) {
-                $checkedValue = (string) $checkedOptions['checked'];
-                unset($checkedOptions['checked']);
-            }
-            if (array_key_exists('unChecked', $checkedOptions)) {
-                $unCheckedValue = (string) $checkedOptions['unChecked'];
-                unset($checkedOptions['unChecked']);
+            if (array_key_exists('checkedValue', $checkedOptions)) {
+                $checkedValue = (string) $checkedOptions['checkedValue'];
+                unset($checkedOptions['checkedValue']);
+            }
+            if (array_key_exists('uncheckedValue', $checkedOptions)) {
+                $uncheckedValue = (string) $checkedOptions['uncheckedValue'];
+                unset($checkedOptions['uncheckedValue']);
             }
             if (null === $checkedValue) {
                 $checkedValue = array_shift($checkedOptions);
             }
-            if (null === $unCheckedValue) {
-                $unCheckedValue = array_shift($checkedOptions);
+            if (null === $uncheckedValue) {
+                $uncheckedValue = array_shift($checkedOptions);
             }
         } elseif ($value !== null) {
-            $unCheckedValue = self::$_defaultCheckedOptions['unChecked'];
+            $uncheckedValue = self::$_defaultCheckedOptions['uncheckedValue'];
         } else {
-            $checkedValue   = self::$_defaultCheckedOptions['checked'];
-            $unCheckedValue = self::$_defaultCheckedOptions['unChecked'];
+            $checkedValue   = self::$_defaultCheckedOptions['checkedValue'];
+            $uncheckedValue = self::$_defaultCheckedOptions['uncheckedValue'];
         }
 
         // is the element checked?
@@ -156,7 +156,7 @@
             'checked'        => $checked,
             'checkedString'  => $checkedString,
             'checkedValue'   => $checkedValue,
-            'unCheckedValue' => $unCheckedValue,
+            'uncheckedValue' => $uncheckedValue,
         );
     }
 }
--- /home/sass/zend/library/Zend/./Form/Element/Checkbox.php	2009-05-27 12:47:39.000000000 -0700
+++ ./Form/Element/Checkbox.php	2009-05-27 23:53:55.000000000 -0700
@@ -69,6 +69,7 @@
      *
      * Intercept checked and unchecked values and set them early; test stored 
      * value against checked and unchecked values after configuration.
+     * Ensure that options property is set for rendering.
      * 
      * @param  array $options 
      * @return Zend_Form_Element_Checkbox
@@ -90,6 +91,10 @@
         if (!in_array($curValue, $test)) {
             $this->setValue($curValue);
         }
+        $this->options = array(
+            'checkedValue'   => $this->getCheckedValue(),
+            'uncheckedValue' => $this->getUncheckedValue(),
+        );
 
         return $this;
     }
@@ -190,20 +195,4 @@
         return $this->checked;
     }
 
-    /**
-     * Render
-     *
-     * Ensure that options property is set when rendering.
-     * 
-     * @param  Zend_View_Interface $view 
-     * @return string
-     */
-    public function render(Zend_View_Interface $view = null)
-    {
-        $this->options = array(
-            'checked'   => $this->getCheckedValue(),
-            'unChecked' => $this->getUncheckedValue(),
-        );
-        return parent::render($view);
-    }
 }
--- /home/sass/zend/library/Zend/./Dojo/View/Helper/CheckBox.php	2009-05-27 12:47:24.000000000 -0700
+++ ./Dojo/View/Helper/CheckBox.php	2009-05-27 23:42:00.000000000 -0700
@@ -59,7 +59,7 @@
      * @param  string $content 
      * @param  array $params  Parameters to use for dijit creation
      * @param  array $attribs HTML attributes
-     * @param  array $checkedOptions Should contain either two items, or the keys checkedValue and unCheckedValue
+     * @param  array $checkedOptions Should contain either two items, or the keys checkedValue and uncheckedValue
      * @return string
      */
     public function checkBox($id, $value = null, array $params = array(), array $attribs = array(), array $checkedOptions = null)
@@ -89,7 +89,7 @@
         $html = '';
         if (!strstr($id, '[]')) {
             // hidden element for unchecked value
-            $html .= $this->_renderHiddenElement($id, $checkboxInfo['unCheckedValue']);
+            $html .= $this->_renderHiddenElement($id, $checkboxInfo['uncheckedValue']);
         }
 
         // and final element
--- /home/sass/zend/library/Zend/./Dojo/Form/Element/CheckBox.php	2009-05-27 12:47:23.000000000 -0700
+++ ./Dojo/Form/Element/CheckBox.php	2009-05-27 23:44:08.000000000 -0700
@@ -71,6 +71,7 @@
      *
      * Intercept checked and unchecked values and set them early; test stored 
      * value against checked and unchecked values after configuration.
+     * Ensure that options property is set for rendering.
      * 
      * @param  array $options 
      * @return Zend_Form_Element_Checkbox
@@ -92,6 +93,10 @@
         if (!in_array($curValue, $test)) {
             $this->setValue($curValue);
         }
+        $this->options = array(
+            'checkedValue'   => $this->getCheckedValue(),
+            'uncheckedValue' => $this->getUncheckedValue(),
+        );
 
         return $this;
     }
@@ -192,21 +197,5 @@
         return $this->checked;
     }
 
-    /**
-     * Render
-     *
-     * Ensure that options property is set when rendering.
-     * 
-     * @param  Zend_View_Interface $view 
-     * @return string
-     */
-    public function render(Zend_View_Interface $view = null)
-    {
-        $this->options = array(
-            'checked'   => $this->getCheckedValue(),
-            'unChecked' => $this->getUncheckedValue(),
-        );
-        return parent::render($view);
-    }
 }
 
