Index: tests/Zend/Db/Select/TestCommon.php
===================================================================
--- tests/Zend/Db/Select/TestCommon.php	(revision 14167)
+++ tests/Zend/Db/Select/TestCommon.php	(working copy)
@@ -709,6 +709,19 @@
         $this->assertEquals(2, $result[0]['product_id']);
     }
 
+    public function testSelectWhereWithNullValue()
+    {
+        $product_id = $this->_db->quoteIdentifier('product_id');
+
+        $select = $this->_db->select()
+            ->from('zfproducts')
+            ->where("$product_id = ?", null);
+
+        $result = $this->_db->query($select)->fetchAll();
+
+        $this->assertEquals(0, count($result));
+    }
+
     /**
      * Test support for nested select in from()
      */
Index: library/Zend/Db/Select.php
===================================================================
--- library/Zend/Db/Select.php	(revision 14167)
+++ library/Zend/Db/Select.php	(working copy)
@@ -884,14 +884,14 @@
      * @param boolean  $bool  true = AND, false = OR
      * @return string  clause
      */
-    protected function _where($condition, $value = null, $type = null, $bool = true)
+    protected function _where($condition, $value = '~~NULL~VALUE~~', $type = null, $bool = true)
     {
         if (count($this->_parts[self::UNION])) {
             require_once 'Zend/Db/Select/Exception.php';
             throw new Zend_Db_Select_Exception("Invalid use of where clause with " . self::SQL_UNION);
         }
 
-        if ($value !== null) {
+        if ($value !== '~~NULL~VALUE~~') {
             $condition = $this->_adapter->quoteInto($condition, $value, $type);
         }
 
