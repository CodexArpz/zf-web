--- library/Zend/Soap/Wsdl.php	(revision 23864)
+++ library/Zend/Soap/Wsdl.php	(working copy)
@@ -539,6 +539,12 @@
      */
     public function getType($type)
     {
+    	// if type is determined to be prefixed with xsd to denote actual 
+    	// xsd specified type then allow passthru 
+	    if (strpos(strtolower($type), 'xsd') !== false) {
+          	return $type;
+        }
+    	
         switch (strtolower($type)) {
             case 'string':
             case 'str':
Index: library/Zend/Soap/Wsdl/Strategy/DefaultComplexType.php
===================================================================
--- library/Zend/Soap/Wsdl/Strategy/DefaultComplexType.php	(revision 23864)
+++ library/Zend/Soap/Wsdl/Strategy/DefaultComplexType.php	(working copy)
@@ -36,6 +36,41 @@
  */
 class Zend_Soap_Wsdl_Strategy_DefaultComplexType extends Zend_Soap_Wsdl_Strategy_Abstract
 {
+	/**
+	 * array of additional attribute types to allow on elements
+	 * @var array
+	 */
+	protected $_additionalAttributes = array(); 
+	
+	/**
+	 * add an attribute to allow on elements
+	 * @param string $attribute
+	 */
+	public function addAdditionalAttribute($attribute)
+	{
+		if (!in_array($attribute, $this->_additionalAttributes)) {
+			$this->_additionalAttributes[] = $attribute;
+		}
+	}
+	
+	/**
+	 * set all additional attributes to allow on elements
+	 * @param array $attributes
+	 */
+	public function setAdditionalAttributes(array $attributes)
+	{
+		$this->_additionalAttributes = $attributes;
+	}
+	
+	/**
+	 * retrieve all additional attributes allowed on users
+	 * @return array
+	 */
+	public function getAdditionalAttributes()
+	{
+		return $this->_additionalAttributes;
+	}
+	
     /**
      * Add a complex type by recursivly using all the class properties fetched via Reflection.
      *
@@ -77,6 +112,14 @@
                 if ($defaultProperties[$propertyName] === null) {
                     $element->setAttribute('nillable', 'true');
                 }
+                
+                // test for and set attributes
+            	preg_match_all('/@([^\s]+)\s+([^\s]+)/m', $property->getDocComment(), $attributes);
+            	foreach ($attributes[1] AS $ind => $attr) {
+            		if (in_array($attr, $this->_additionalAttributes)) {
+            			$element->setAttribute($attr, $attributes[2][$ind]);
+            		}
+            	}
 
                 $all->appendChild($element);
             }
