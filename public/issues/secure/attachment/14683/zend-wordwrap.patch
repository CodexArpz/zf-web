
Index: tests/Zend/Text/MultiByteTest.php
===================================================================
--- tests/Zend/Text/MultiByteTest.php	(revision 24498)
+++ tests/Zend/Text/MultiByteTest.php	(working copy)
@@ -102,6 +102,12 @@
         $this->assertEquals('äüö äöü ', $line);
     }
 
+    public function testWordWrapCutEndingSingleSpaceWithNonSpaceDivider()
+    {
+        $line = Zend_Text_MultiByte::wordWrap('äöüäöü ', 3, '-', true);
+        $this->assertEquals('äöü-äöü-', $line);
+    }
+
     public function testWordWrapCutEndingTwoSpaces()
     {
         $line = Zend_Text_MultiByte::wordWrap('äüöäöü  ', 3, ' ', true);
@@ -225,6 +231,18 @@
         $this->assertEquals('foobar-foobar', $line);
     }
 
+    public function testWordWrapNoCutEndingSingleSpace()
+    {
+        $line = Zend_Text_Multibyte::wordWrap('12345 ', 5, '-', false);
+        $this->assertEquals('12345-', $line);
+    }
+
+    public function testWordWrapNoCutEndingTwoSpaces()
+    {
+        $line = Zend_Text_MultiByte::wordWrap('12345  ', 5, '-', false);
+        $this->assertEquals('12345- ', $line);
+    }
+
     /**
      * Pad tests
      */
Index: library/Zend/Text/MultiByte.php
===================================================================
--- library/Zend/Text/MultiByte.php	(revision 24498)
+++ library/Zend/Text/MultiByte.php	(working copy)
@@ -63,17 +63,11 @@
                 } else {
                     $nextChar = iconv_substr($string, $width, 1, $charset);
 
-                    if ($breakWidth === 1) {
-                        $nextBreak = $nextChar;
-                    } else {
-                        $nextBreak = iconv_substr($string, $breakWidth, 1, $charset);
-                    }
-
-                    if ($nextChar === ' ' || $nextBreak === $break) {
+                    if ($nextChar === ' ' || $nextChar === $break) {
                         $afterNextChar = iconv_substr($string, $width + 1, 1, $charset);
 
                         if ($afterNextChar === false) {
-                            $subString .= $nextChar;
+                            $subString .= $break;
                         }
 
                         $cutLength = iconv_strlen($subString, $charset) + 1;
