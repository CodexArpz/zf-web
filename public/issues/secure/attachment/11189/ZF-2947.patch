Index: Sqlite.php
===================================================================
--- Sqlite.php	(revision 9003)
+++ Sqlite.php	(working copy)
@@ -104,6 +104,7 @@
      */
     public function load($id, $doNotTestCacheValidity = false)
     {
+        $id  = @sqlite_escape_string($id);
         $sql = "SELECT content FROM cache WHERE id='$id'";
         if (!$doNotTestCacheValidity) {
             $sql = $sql . " AND (expire=0 OR expire>" . time() . ')';
@@ -124,6 +125,7 @@
      */
     public function test($id)
     {
+        $id  = @sqlite_escape_string($id);
         $sql = "SELECT lastModified FROM cache WHERE id='$id' AND (expire=0 OR expire>" . time() . ')';
         $result = $this->_query($sql);
         $row = @sqlite_fetch_array($result);
@@ -155,6 +157,7 @@
             }
         }
         $lifetime = $this->getLifetime($specificLifetime);
+        $id   = @sqlite_escape_string($id);
         $data = @sqlite_escape_string($data);
         $mktime = time();
         if (is_null($lifetime)) {
@@ -184,6 +187,7 @@
      */
     public function remove($id)
     {
+        $id  = @sqlite_escape_string($id);
         $res = $this->_query("SELECT COUNT(*) AS nbr FROM cache WHERE id='$id'");
         $result1 = @sqlite_fetch_single($res);
         $result2 = $this->_query("DELETE FROM cache WHERE id='$id'");
@@ -223,16 +227,17 @@
      */
     public function ___expire($id)
     {
+        $id   = @sqlite_escape_string($id);
         $time = time() - 1;
         $this->_query("UPDATE cache SET lastModified=$time, expire=$time WHERE id='$id'");
     }
 
     /**
-     * Return the connection resource 
-     * 
+     * Return the connection resource
+     *
      * If we are not connected, the connection is made
      *
-     * @throws Zend_Cache_Exception  
+     * @throws Zend_Cache_Exception
      * @return resource Connection resource
      */
     private function _getConnection()
@@ -245,15 +250,15 @@
                 Zend_Cache::throwException("Impossible to open " . $this->_options['cache_db_complete_path'] . " cache DB file");
             }
             return $this->_db;
-        }       
+        }
     }
-    
+
     /**
      * Execute an SQL query silently
-     * 
+     *
      * @param string $query SQL query
      * @return mixed|false query results
-     */ 
+     */
     private function _query($query)
     {
         $db = $this->_getConnection();
@@ -263,7 +268,7 @@
                 return false;
             } else {
                 return $res;
-            }           
+            }
         }
         return false;
     }
@@ -292,6 +297,8 @@
      * @return boolean True if no problem
      */
     private function _registerTag($id, $tag) {
+        $id  = @sqlite_escape_string($id);
+        $tag = @sqlite_escape_string($tag);
         $res = $this->_query("DELETE FROM TAG WHERE name='$tag' AND id='$id'");
         $res = $this->_query("INSERT INTO tag (name, id) VALUES ('$tag', '$id')");
         if (!$res) {
@@ -376,6 +383,7 @@
             $first = true;
             $ids = array();
             foreach ($tags as $tag) {
+                $tag = @sqlite_escape_string($tag);
                 $res = $this->_query("SELECT DISTINCT(id) AS id FROM tag WHERE name='$tag'");
                 if (!$res) {
                     return false;
@@ -406,6 +414,7 @@
                 $id = $row['id'];
                 $matching = false;
                 foreach ($tags as $tag) {
+                    $tag = @sqlite_escape_string($tag);
                     $res = $this->_query("SELECT COUNT(*) AS nbr FROM tag WHERE name='$tag' AND id='$id'");
                     if (!$res) {
                         return false;
