Index: Lucene/Analysis/Analyzer/Common/Text.php
===================================================================
--- Lucene/Analysis/Analyzer/Common/Text.php	(revision 1960)
+++ Lucene/Analysis/Analyzer/Common/Text.php	(working copy)
@@ -69,10 +69,14 @@
                                              $position-$termStartPosition),
                                       $termStartPosition,
                                       $position);
-            $tokenStream[] = $this->normalize($token);
+            $token = $this->normalize($token);
+            if (! is_null($token)) {
+                $tokenStream[] = $token;
+            }
         }
 
         return $tokenStream;
     }
 }
 
+// vim: set sw=4 et :
Index: Lucene/Analysis/Analyzer/Common/TextNum.php
===================================================================
--- Lucene/Analysis/Analyzer/Common/TextNum.php	(revision 1960)
+++ Lucene/Analysis/Analyzer/Common/TextNum.php	(working copy)
@@ -69,10 +69,14 @@
                                              $position-$termStartPosition),
                                       $termStartPosition,
                                       $position);
-            $tokenStream[] = $this->normalize($token);
+            $token = $this->normalize($token);
+            if (! is_null($token)) {
+                $tokenStream[] = $token;
+            }
         }
 
         return $tokenStream;
     }
 }
 
+// vim: set sw=4 et :
Index: Lucene/Analysis/Analyzer/Common.php
===================================================================
--- Lucene/Analysis/Analyzer/Common.php	(revision 1960)
+++ Lucene/Analysis/Analyzer/Common.php	(working copy)
@@ -58,7 +58,7 @@
     }
 
     /**
-     * Apply filters to the token.
+     * Apply filters to the token. Can return null when the token was removed.
      *
      * @param Zend_Search_Lucene_Analysis_Token $token
      * @return Zend_Search_Lucene_Analysis_Token
@@ -67,9 +67,15 @@
     {
         foreach ($this->_filters as $filter) {
             $token = $filter->normalize($token);
+
+            // resulting token can be null if the filter removed it
+            if (is_null($token)) {
+                return null;
+            }
         }
 
         return $token;
     }
 }
 
+// vim: set sw=4 et :
Index: Lucene/Analysis/TokenFilter/ShortWords.php
===================================================================
--- Lucene/Analysis/TokenFilter/ShortWords.php	(revision 0)
+++ Lucene/Analysis/TokenFilter/ShortWords.php	(revision 0)
@@ -0,0 +1,69 @@
+<?php
+/**
+ * Zend Framework
+ *
+ * LICENSE
+ *
+ * This source file is subject to the new BSD license that is bundled
+ * with this package in the file LICENSE.txt.
+ * It is also available through the world-wide-web at this URL:
+ * http://framework.zend.com/license/new-bsd
+ * If you did not receive a copy of the license and are unable to
+ * obtain it through the world-wide-web, please send an email
+ * to license@zend.com so we can send you a copy immediately.
+ *
+ * @category   Zend
+ * @package    Zend_Search_Lucene
+ * @subpackage Analysis
+ * @copyright  Copyright (c) 2006 Zend Technologies USA Inc. (http://www.zend.com)
+ * @license    http://framework.zend.com/license/new-bsd     New BSD License
+ */
+
+
+/** Zend_Search_Lucene_Analysis_TokenFilter */
+require_once 'Zend/Search/Lucene/Analysis/TokenFilter.php';
+
+
+/**
+ * Token filter that removes short words. What is short word can be configured with constructor.
+ *
+ * @category   Zend
+ * @package    Zend_Search_Lucene
+ * @subpackage Analysis
+ * @copyright  Copyright (c) 2006 Zend Technologies USA Inc. (http://www.zend.com)
+ * @license    http://framework.zend.com/license/new-bsd     New BSD License
+ */
+
+class Zend_Search_Lucene_Analysis_TokenFilter_ShortWords extends Zend_Search_Lucene_Analysis_TokenFilter
+{
+    /**
+     * Minimum allowed term length
+     * @var integer
+     */
+    private $length;
+
+    /**
+     * Constructs new instance of this filter.
+     *
+     * @param integer $short  minimum allowed length of term which passes this filter (default 2)
+     */
+    public function __construct($length = 2) {
+        $this->length = $length;
+    }
+
+    /**
+     * Normalize Token or remove it (if null is returned)
+     *
+     * @param Zend_Search_Lucene_Analysis_Token $srcToken
+     * @return Zend_Search_Lucene_Analysis_Token
+     */
+    public function normalize(Zend_Search_Lucene_Analysis_Token $srcToken) {
+        if (strlen($srcToken->getTermText()) < $this->length) {
+            return null;
+        } else {
+            return $srcToken;
+        }
+    }
+}
+
+// vim: set sw=4 et :
Index: Lucene/Analysis/TokenFilter/StopWords.php
===================================================================
--- Lucene/Analysis/TokenFilter/StopWords.php	(revision 0)
+++ Lucene/Analysis/TokenFilter/StopWords.php	(revision 0)
@@ -0,0 +1,106 @@
+<?php
+/**
+ * Zend Framework
+ *
+ * LICENSE
+ *
+ * This source file is subject to the new BSD license that is bundled
+ * with this package in the file LICENSE.txt.
+ * It is also available through the world-wide-web at this URL:
+ * http://framework.zend.com/license/new-bsd
+ * If you did not receive a copy of the license and are unable to
+ * obtain it through the world-wide-web, please send an email
+ * to license@zend.com so we can send you a copy immediately.
+ *
+ * @category   Zend
+ * @package    Zend_Search_Lucene
+ * @subpackage Analysis
+ * @copyright  Copyright (c) 2006 Zend Technologies USA Inc. (http://www.zend.com)
+ * @license    http://framework.zend.com/license/new-bsd     New BSD License
+ */
+
+
+/** Zend_Search_Lucene_Analysis_TokenFilter */
+require_once 'Zend/Search/Lucene/Analysis/TokenFilter.php';
+require_once 'Zend/Search/Exception.php';
+
+
+/**
+ * Token filter that removes stop words. These words must be provided as array (set), example:
+ * $stopwords = array('the' => 1, 'an' => '1');
+ *
+ * We do recommend to provide all words in lowercase and concatenate this class after the lowercase filter.
+ *
+ * @category   Zend
+ * @package    Zend_Search_Lucene
+ * @subpackage Analysis
+ * @copyright  Copyright (c) 2006 Zend Technologies USA Inc. (http://www.zend.com)
+ * @license    http://framework.zend.com/license/new-bsd     New BSD License
+ */
+
+class Zend_Search_Lucene_Analysis_TokenFilter_StopWords extends Zend_Search_Lucene_Analysis_TokenFilter
+{
+    /**
+     * Minimum allowed term length
+     * @var array
+     */
+    private $stopSet;
+
+    /**
+     * Constructs new instance of this filter.
+     *
+     * @param array $stopwords array (set) of words that will be filtered out
+     */
+    public function __construct($stopwords = null) {
+        if ($stopwords) {
+            $this->stopSet = $stopwords;
+        } else {
+            $this->stopSet = array();
+        }
+    }
+
+    /**
+     * Normalize Token or remove it (if null is returned)
+     *
+     * @param Zend_Search_Lucene_Analysis_Token $srcToken
+     * @return Zend_Search_Lucene_Analysis_Token
+     */
+    public function normalize(Zend_Search_Lucene_Analysis_Token $srcToken) {
+        if (array_key_exists($srcToken->getTermText(), $this->stopSet)) {
+            $t = $srcToken->getTermText();
+            return null;
+        } else {
+            return $srcToken;
+        }
+    }
+
+    /**
+     * Fills stopwords set from a text file. Each line contains one stopword, lines with '#' in the first
+     * column are ignored (as comments).
+     *
+     * You can call this method one or more times. New stopwords are always added to current set.
+     *
+     * @param string $filepath full path for text file with stopwords
+     * @throws Zend_Search_Exception When the file doesn`t exists or is not readable.
+     */
+    public function loadFromFile($filepath = null) {
+        if (! $filepath || ! file_exists($filepath)) {
+            throw new Zend_Search_Exception('You have to provide valid file path');
+        }
+        $fd = fopen($filepath, "r");
+        if (! $fd) {
+            throw new Zend_Search_Exception('Cannot open file ' . $filepath);
+        }
+        while (!feof ($fd)) {
+            $buffer = trim(fgets($fd));
+            if (strlen($buffer) > 0 && $buffer{0} != '#') {
+                $this->stopSet[$buffer] = 1;
+            }
+        }
+        if (! fclose($fd)) {
+            throw new Zend_Search_Exception('Cannot close file ' . $filepath);
+        }
+    }
+}
+
+// vim: set sw=4 et :
