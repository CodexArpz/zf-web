Index: library/Zend/Paginator.php
===================================================================
--- library/Zend/Paginator.php	(revision 13419)
+++ library/Zend/Paginator.php	(working copy)
@@ -43,8 +43,14 @@
      * @var string
      */
     const INTERNAL_ADAPTER = 'Zend_Paginator_Adapter_Internal';
-    
+
     /**
+     * The cache tag prefix used to namespace Paginator results in the cache
+     *
+     */
+    const CACHE_TAG_PREFIX = 'Zend_Paginator_';
+
+    /**
      * Adapter plugin loader
      *
      * @var Zend_Loader_PluginLoader
@@ -73,6 +79,20 @@
     protected static $_scrollingStyleLoader = null;
 
     /**
+     * Cache object
+     *
+     * @var Zend_Cache_Core
+     */
+    protected static $_cache;
+
+    /**
+     * Enable or desable the cache by Zend_Paginator instance
+     *
+     * @var bool
+     */
+    protected $_cacheEnabled = true;
+
+    /**
      * Adapter
      *
      * @var Zend_Paginator_Adapter_Interface
@@ -115,13 +135,6 @@
     protected $_pageCount = null;
 
     /**
-     * A collection of page items used as temporary page cache
-     *
-     * @var array
-     */
-    protected $_pageItems = array();
-    
-    /**
      * Number of local pages (i.e., the number of discrete page numbers
      * that will be displayed, including the current page number)
      *
@@ -135,14 +148,14 @@
      * @var array
      */
     protected $_pages = null;
-    
+
     /**
      * View instance used for self rendering
      *
      * @var Zend_View_Interface
      */
     protected $_view = null;
-    
+
     /**
      * Adds an adapter prefix path to the plugin loader.
      *
@@ -153,7 +166,7 @@
     {
         self::getAdapterLoader()->addPrefixPath($prefix, $path);
     }
-    
+
     /**
      * Adds an array of adapter prefix paths to the plugin 
      * loader.
@@ -182,7 +195,7 @@
             }
         }
     }
-    
+
     /**
      * Adds a scrolling style prefix path to the plugin loader.
      *
@@ -222,7 +235,7 @@
             }
         }
     }
-    
+
     /**
      * Factory.
      *
@@ -269,7 +282,7 @@
         
         return new self(new $adapterClassName($data));
     }
-    
+
     /**
      * Returns the adapter loader.  If it doesn't exist it's created.
      *
@@ -285,7 +298,7 @@
         
         return self::$_adapterLoader;
     }
-    
+
     /**
      * Set a global config
      *
@@ -313,7 +326,7 @@
             self::setDefaultScrollingStyle($scrollingStyle);
         }
     }
-    
+
     /**
      * Returns the default scrolling style.
      *
@@ -323,8 +336,18 @@
     {
         return self::$_defaultScrollingStyle;
     }
-    
+
     /**
+     * Sets a cache object
+     *
+     * @param Zend_Cache_Core $cache
+     */
+    public static function setCache(Zend_Cache_Core $cache)
+    {
+        self::$_cache = $cache;
+    }
+
+    /**
      * Sets the default scrolling style.
      *
      * @param  string $scrollingStyle
@@ -333,7 +356,7 @@
     {
         self::$_defaultScrollingStyle = $scrollingStyle;
     }
-    
+
     /**
      * Returns the scrolling style loader.  If it doesn't exist it's
      * created.
@@ -373,7 +396,7 @@
             }
         }
     }
-    
+
     /**
      * Serializes the object as a string.  Proxies to {@link render()}.
      * 
@@ -390,8 +413,20 @@
 
         return '';
     }
-    
+
     /**
+     * Enables/Disables the cache for this instance
+     *
+     * @param bool $enable
+     * @return Zend_Paginator
+     */
+    public function setCacheEnabled($enable)
+    {
+        $this->_cacheEnabled = (bool)$enable;
+        return $this;
+    }
+
+    /**
      * Returns the number of pages.
      *
      * @return integer
@@ -423,15 +458,26 @@
      */
     public function clearPageItemCache($pageNumber = null)
     {
+        if (!$this->_cacheEnabled()) {
+            return $this;
+        }
+
         if (null === $pageNumber) {
-            $this->_pageItems = array();
-        } else if (isset($this->_pageItems[$pageNumber])) {
-            unset($this->_pageItems[$pageNumber]);
+            $cleanTags = self::CACHE_TAG_PREFIX;
+            foreach (self::$_cache->getIds() as $id) {
+                if (strpos($id, self::CACHE_TAG_PREFIX) !== false) {
+                    if (preg_match('|'.self::CACHE_TAG_PREFIX."(\d+)_.*|", $id, $page)) {
+                        self::$_cache->remove($this->_getCacheId($page[1]));
+                    }
+                }
+            }
+        } else {
+            $cleanTags = $this->_getCacheId($pageNumber);
+            self::$_cache->remove($cleanTags);
         }
-        
         return $this;
     }
-    
+
     /**
      * Returns the absolute item number for the specified item.
      *
@@ -451,7 +497,7 @@
         
         return (($pageNumber - 1) * $this->getItemCountPerPage()) + $relativeItemNumber;
     }
-    
+
     /**
      * Returns the adapter.
      *
@@ -461,7 +507,7 @@
     {
         return $this->_adapter;
     }
-    
+
     /**
      * Returns the number of items for the current page.
      *
@@ -475,7 +521,7 @@
         
         return $this->_currentItemCount;
     }
-    
+
     /**
      * Returns the items for the current page.
      *
@@ -499,7 +545,7 @@
     {
         return $this->normalizePageNumber($this->_currentPageNumber);
     }
-    
+
     /**
      * Sets the current page number.
      *
@@ -514,7 +560,7 @@
         
         return $this;
     }
-    
+
     /**
      * Returns an item from a page.  The current page is used if there's no 
      * page sepcified.
@@ -565,7 +611,7 @@
     {
         return $this->_itemCountPerPage;
     }
-    
+
     /**
      * Sets the number of items per page.
      *
@@ -579,7 +625,9 @@
             $this->_itemCountPerPage = 1;
         }
         $this->_pageCount        = $this->_calculatePageCount();
-        $this->_pageItems        = array();
+        if ($this->_cacheEnabled()) {
+            self::$_cache->clean('matchingTag', array(self::CACHE_TAG_PREFIX));
+        }
         $this->_currentItems     = null;
         $this->_currentItemCount = null;
         
@@ -599,9 +647,10 @@
         if (is_array($items) or $items instanceof Countable) {
             $itemCount = count($items);
         } else { // $items is something like LimitIterator
-            foreach ($items as $item) {
+            $itemCount = iterator_count($items);
+            /*foreach ($items as $item) {
                 $itemCount++;
-            }
+            }*/
         }
 
         return $itemCount;
@@ -614,10 +663,13 @@
      */
     public function getItemsByPage($pageNumber)
     {
-        $pageNumber = $this->normalizePageNumber($pageNumber);
+        $pageNumber = $this->normalizePageNumber($pageNumber);        
         
-        if (isset($this->_pageItems[$pageNumber])) {
-            return $this->_pageItems[$pageNumber];
+        if ($this->_cacheEnabled()) {
+            $data = self::$_cache->load($this->_getCacheId($pageNumber)); 
+            if ($data !== false) {
+                return $data;
+            }
         }
         
         $offset = ($pageNumber - 1) * $this->_itemCountPerPage;
@@ -628,7 +680,9 @@
             $items = new ArrayIterator($items);
         }
         
-        $this->_pageItems[$pageNumber] = $items;
+        if ($this->_cacheEnabled()) {
+            self::$_cache->save($items, $this->_getCacheId($pageNumber)); 
+        }
         
         return $items;
     }
@@ -642,7 +696,7 @@
     {
         return $this->getCurrentItems();
     }
-    
+
     /**
      * Returns the page range (see property declaration above).
      *
@@ -652,7 +706,7 @@
     {
         return $this->_pageRange;
     }
-    
+
     /**
      * Sets the page range (see property declaration above).
      *
@@ -701,7 +755,7 @@
         
         return $pages;
     }
-    
+
     /**
      * Returns the page item cache.
      *
@@ -709,9 +763,20 @@
      */
     public function getPageItemCache()
     {
-        return $this->_pageItems;
+        $data = array();
+        if ($this->_cacheEnabled()) {
+            foreach (self::$_cache->getIds() as $id) {
+                if (strpos($id, self::CACHE_TAG_PREFIX) !== false) {
+                    
+                    if (preg_match('|'.self::CACHE_TAG_PREFIX."(\d+)_.*|", $id, $page)) {
+                        $data[$page[1]] = self::$_cache->load($this->_getCacheId($page[1]));
+                    }
+                }
+            }
+        }
+        return $data;
     }
-    
+
     /**
      * Retrieves the view instance.  If none registered, attempts to pull f
      * rom ViewRenderer.
@@ -735,7 +800,7 @@
 
         return $this->_view;
     }
-    
+
     /**
      * Sets the view object.
      * 
@@ -748,7 +813,7 @@
         
         return $this;
     }
-    
+
     /**
      * Brings the item number in range of the page.
      *
@@ -767,7 +832,7 @@
         
         return $itemNumber;
     }
-    
+
     /**
      * Brings the page number in range of the paginator.
      *
@@ -788,7 +853,7 @@
         
         return $pageNumber;
     }
-    
+
     /**
      * Renders the paginator.
      * 
@@ -815,8 +880,33 @@
     {
         return Zend_Json::encode($this->getCurrentItems());
     }
-    
+
     /**
+     * Tells if there is an active cache object 
+     *
+     * @return bool
+     */
+    protected function _cacheEnabled()
+    {
+        return (!is_null(self::$_cache) && $this->_cacheEnabled);
+    }
+
+    /**
+     * Makes an Id for the cache
+     * Depends on the object and the page number
+     *
+     * @param int $page
+     * @return string
+     */
+    protected function _getCacheId($page = null)
+    {
+        if (is_null($page)) {
+            $page = $this->getCurrentPageNumber();
+        }
+        return self::CACHE_TAG_PREFIX . $page . '_' . spl_object_hash($this);
+    }
+
+    /**
      * Calculates the page count.
      *
      * @return integer
@@ -870,7 +960,7 @@
 
         return $pages;
     }
-    
+
     /**
      * Loads a scrolling style.
      *
Index: tests/Zend/PaginatorTest.php
===================================================================
--- tests/Zend/PaginatorTest.php	(revision 13419)
+++ tests/Zend/PaginatorTest.php	(working copy)
@@ -71,6 +71,11 @@
 require_once 'Zend/Paginator/_files/TestTable.php';
 
 /**
+ * @see Zend_Cache
+ */
+require_once 'Zend/Cache.php';        
+        
+/**
  * @category   Zend
  * @package    Zend_Paginator
  * @subpackage UnitTests
@@ -87,6 +92,8 @@
     protected $_paginator = null;
 
     protected $_testCollection = null;
+    
+    protected $_cache;
 
     protected $_query = null;
 
@@ -113,6 +120,13 @@
         // get a fresh new copy of ViewRenderer in each tests
         Zend_Controller_Action_HelperBroker::resetHelpers();
 
+        $fO = array('lifetime' => 3600, 'automatic_serialization' => true);
+        $bO = array('cache_db_complete_path'=>':memory:');
+        
+        $this->_cache = Zend_Cache::factory('Core', 'Sqlite', $fO, $bO);
+        
+        Zend_Paginator::setCache($this->_cache);
+        
         $this->_restorePaginatorDefaults();
     }
 
@@ -138,6 +152,9 @@
         $loader = Zend_Paginator::getScrollingStyleLoader();
         $loader->clearPaths();
         $loader->addPrefixPath('Zend_Paginator_ScrollingStyle', 'Zend/Paginator/ScrollingStyle');
+        
+        $this->_cache->clean();
+        $this->_paginator->setCacheEnabled(true);
     }
 
     public function testFactoryReturnsArrayAdapter()
@@ -680,7 +697,7 @@
 
     public function testClearPageItemCache()
     {
-    	$this->_paginator->setCurrentPageNumber(1)->getCurrentItems();
+        $this->_paginator->setCurrentPageNumber(1)->getCurrentItems();
     	$this->_paginator->setCurrentPageNumber(2)->getCurrentItems();
     	$this->_paginator->setCurrentPageNumber(3)->getCurrentItems();
 
@@ -693,7 +710,7 @@
     	);
 
     	$this->assertEquals($expected, $pageItems);
-
+    	        
     	$this->_paginator->clearPageItemCache(2);
     	$pageItems = $this->_paginator->getPageItemCache();
 
@@ -709,7 +726,23 @@
 
         $this->assertEquals(array(), $pageItems);
     }
+    
+    public function testWithCacheDisabled()
+    {
+        $this->_paginator->setCacheEnabled(false);
+        $this->_paginator->setCurrentPageNumber(1)->getCurrentItems();
 
+        $cachedPageItems = $this->_paginator->getPageItemCache();
+
+        $expected = new ArrayIterator(range(1, 10));
+        
+        $this->assertEquals(array(), $cachedPageItems);
+        
+        $pageItems = $this->_paginator->getCurrentItems();
+        
+        $this->assertEquals($expected, $pageItems);
+    }
+
     public function testToJson()
     {
     	$this->_paginator->setCurrentPageNumber(1);
