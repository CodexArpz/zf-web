Index: library/Zend/Tool/Framework/Client/Console/ResponseDecorator/Indention.php
===================================================================
--- library/Zend/Tool/Framework/Client/Console/ResponseDecorator/Indention.php	(revision 0)
+++ library/Zend/Tool/Framework/Client/Console/ResponseDecorator/Indention.php	(revision 0)
@@ -0,0 +1,56 @@
+<?php
+/**
+ * Zend Framework
+ *
+ * LICENSE
+ *
+ * This source file is subject to the new BSD license that is bundled
+ * with this package in the file LICENSE.txt.
+ * It is also available through the world-wide-web at this URL:
+ * http://framework.zend.com/license/new-bsd
+ * If you did not receive a copy of the license and are unable to
+ * obtain it through the world-wide-web, please send an email
+ * to license@zend.com so we can send you a copy immediately.
+ *
+ * @category   Zend
+ * @package    Zend_Tool
+ * @copyright  Copyright (c) 2005-2009 Zend Technologies USA Inc. (http://www.zend.com)
+ * @license    http://framework.zend.com/license/new-bsd     New BSD License
+ * @version    $Id$
+ */
+
+require_once "Zend/Tool/Framework/Client/Response/ContentDecorator/Interface.php";
+
+/**
+ * @category   Zend
+ * @package    Zend_Tool
+ * @copyright  Copyright (c) 2005-2009 Zend Technologies USA Inc. (http://www.zend.com)
+ * @license    http://framework.zend.com/license/new-bsd     New BSD License
+ */
+class Zend_Tool_Framework_Client_Console_ResponseDecorator_Indention
+    implements Zend_Tool_Framework_Client_Response_ContentDecorator_Interface
+{
+    public function getName()
+    {
+        return 'indention';
+    }
+
+    /**
+     * @param string $content
+     * @param integer $indention
+     */
+    public function decorate($content, $indention)
+    {
+        if(strval(intval($indention)) != $indention) {
+            return $content;
+        }
+
+        $newContent = "";
+        $lines = preg_split('((\r\n|\r|\n)+)', $content);
+        $lineIndention = str_repeat(' ', $indention);
+        foreach($lines AS $line) {
+            $newContent .= $lineIndention.$line.PHP_EOL;
+        }
+        return rtrim($newContent);
+    }
+}

Property changes on: library/Zend/Tool/Framework/Client/Console/ResponseDecorator/Indention.php
___________________________________________________________________
Added: svn:keywords
   + Id
Added: svn:eol-style
   + LF

Index: tests/Zend/Tool/Framework/Client/Console/ResponseDecorator/IndentionTest.php
===================================================================
--- tests/Zend/Tool/Framework/Client/Console/ResponseDecorator/IndentionTest.php	(revision 0)
+++ tests/Zend/Tool/Framework/Client/Console/ResponseDecorator/IndentionTest.php	(revision 0)
@@ -0,0 +1,32 @@
+<?php
+
+require_once "Zend/Tool/Framework/Client/Console/ResponseDecorator/Indention.php";
+
+class Zend_Tool_Framework_Client_Console_ResponseDecorator_IndentionTest extends PHPUnit_Framework_TestCase
+{
+    /**
+     * @var Zend_Tool_Framework_Client_Console_ResponseDecorator_Indention
+     */
+    public $decorator = null;
+
+    public function setUp()
+    {
+        $this->decorator = new Zend_Tool_Framework_Client_Console_ResponseDecorator_Indention();
+    }
+
+    public function testIndention_SingleLine()
+    {
+        $this->assertEquals(" foo", $this->decorator->decorate("foo", 1));
+        $this->assertEquals("  foo", $this->decorator->decorate("foo", 2));
+        $this->assertEquals("   foo", $this->decorator->decorate("foo", 3));
+        $this->assertEquals("    foo", $this->decorator->decorate("foo", 4));
+    }
+
+    public function testIndention_MultiLine()
+    {
+        $text = "foo\nbar\r\nbaz\rfoobar";
+        $expectedText = " foo\n bar\n baz\n foobar";
+
+        $this->assertEquals($expectedText, $this->decorator->decorate($text, 1));
+    }
+}
\ No newline at end of file

Property changes on: tests/Zend/Tool/Framework/Client/Console/ResponseDecorator/IndentionTest.php
___________________________________________________________________
Added: svn:keywords
   + Id
Added: svn:eol-style
   + LF

