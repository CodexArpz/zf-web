diff -r -U 3 ./Search/Lucene/Search/Query/Phrase.php ../Zend2/Search/Lucene/Search/Query/Phrase.php
--- ./Search/Lucene/Search/Query/Phrase.php	2009-08-31 17:32:21.000000000 +0200
+++ ../Zend2/Search/Lucene/Search/Query/Phrase.php	2009-08-31 17:30:39.000000000 +0200
@@ -418,15 +418,47 @@
             $this->_resVector = array();
         }
 
+        $termGroups=array();
+        // some positions may have several alternatives stored - find term-groups
+        foreach($this->_offsets as $termId => $position) {
+            $termGroups[$position][] = $termId;
+        }
+
+
         $resVectors      = array();
         $resVectorsSizes = array();
         $resVectorsIds   = array(); // is used to prevent arrays comparison
-        foreach ($this->_terms as $termId => $term) {
-            $resVectors[]      = array_flip($reader->termDocs($term));
-            $resVectorsSizes[] = count(end($resVectors));
-            $resVectorsIds[]   = $termId;
 
-            $this->_termsPositions[$termId] = $reader->termPositions($term);
+        // members of a term group (alternatives for the same position) get combined documents and positions
+        foreach ($termGroups as $group) {
+
+            $curDocs      = array();
+            $curPositions = array();
+            
+            // calculate merged documents and positions for each term in the group
+            foreach ($group as $termId) {
+                $term = $this->_terms[$termId];
+                $curDocs = array_merge($curDocs, $reader->termDocs($term));
+                
+                $positionDocs = $reader->termPositions($term);
+                foreach($positionDocs as $docID => $positions) {
+                    if(isset($curPositions[$docID])) {
+                        $curPositions[$docID]=array_merge($curPositions[$docID],$positions);
+                    } else {
+                        $curPositions[$docID]=$positions;
+                    }
+                }
+            }
+
+            // store merged features for each term separately to keep original scoring code
+            foreach ($group as $termId) {
+            
+                $resVectors[]      = array_flip($curDocs);
+                $resVectorsSizes[] = count(end($resVectors));
+                $resVectorsIds[]   = $termId;
+
+                $this->_termsPositions[$termId] = $curPositions;
+            }
         }
         // sort resvectors in order of subquery cardinality increasing
         array_multisort($resVectorsSizes, SORT_ASC, SORT_NUMERIC,
diff -r -U 3 ./Search/Lucene/Search/Query/Preprocessing/Fuzzy.php ../Zend2/Search/Lucene/Search/Query/Preprocessing/Fuzzy.php
--- ./Search/Lucene/Search/Query/Preprocessing/Fuzzy.php	2009-08-31 17:32:21.000000000 +0200
+++ ../Zend2/Search/Lucene/Search/Query/Preprocessing/Fuzzy.php	2009-08-31 17:30:39.000000000 +0200
@@ -213,8 +213,38 @@
         }
 
         // Word is tokenized into several tokens
-        require_once 'Zend/Search/Lucene/Search/QueryParserException.php';
-        throw new Zend_Search_Lucene_Search_QueryParserException('Fuzzy search is supported only for non-multiple word terms');
+        $query = new Zend_Search_Lucene_Search_Query_Phrase();
+        $query->setBoost($this->getBoost());
+        $position = 0;
+        $termsadded = 0;
+        foreach ($tokens as $token) {
+
+            // Find matching terms to individual token fuzzy searches
+            $term  = new Zend_Search_Lucene_Index_Term($token->getTermText(), $this->_field);
+            $subquery = new Zend_Search_Lucene_Search_Query_Fuzzy($term, $this->_minimumSimilarity);
+            $subquery->setBoost($this->getBoost());
+
+            // Add all found terms for each wildcard into the corresponding positions of the phrase query
+            $terms = $subquery->rewrite($index)->getQueryTerms();
+            if ($termsadded == 1) {
+                $position += $token->getPositionIncrement();
+            }
+            foreach($terms as $term) {
+                $query->addTerm($term, $position);
+                $termsadded = 1;
+            }
+        }
+
+        if ($termsadded == 0) {
+            $this->_matches = array();
+            return new Zend_Search_Lucene_Search_Query_Insignificant();
+        }
+
+        // Get rewritten query. Important! It also fills terms matching container.
+        $rewrittenQuery = $query->rewrite($index);
+        $this->_matches = $query->getQueryTerms();
+
+        return $rewrittenQuery;
     }
 
     /**
diff -r -U 3 ./Search/Lucene/Search/Query/Preprocessing/Term.php ../Zend2/Search/Lucene/Search/Query/Preprocessing/Term.php
--- ./Search/Lucene/Search/Query/Preprocessing/Term.php	2009-08-31 17:32:21.000000000 +0200
+++ ../Zend2/Search/Lucene/Search/Query/Preprocessing/Term.php	2009-08-31 17:31:32.000000000 +0200
@@ -98,8 +98,7 @@
     public function rewrite(Zend_Search_Lucene_Interface $index)
     {
         if ($this->_field === null) {
-            $query = new Zend_Search_Lucene_Search_Query_MultiTerm();
-            $query->setBoost($this->getBoost());
+            $query = new Zend_Search_Lucene_Search_Query_Boolean();
 
             $hasInsignificantSubqueries = false;
 
@@ -114,8 +113,10 @@
                                                                                    $this->_encoding,
                                                                                    $fieldName);
                 $rewrittenSubquery = $subquery->rewrite($index);
-                foreach ($rewrittenSubquery->getQueryTerms() as $term) {
-                    $query->addTerm($term);
+
+                if ( !($rewrittenSubquery instanceof Zend_Search_Lucene_Search_Query_Insignificant  ||
+                       $rewrittenSubquery instanceof Zend_Search_Lucene_Search_Query_Empty) ) {
+                    $query->addSubquery($rewrittenSubquery);
                 }
 
                 if ($rewrittenSubquery instanceof Zend_Search_Lucene_Search_Query_Insignificant) {
@@ -123,7 +124,9 @@
                 }
             }
 
-            if (count($query->getTerms()) == 0) {
+            $subqueries = $query->getSubqueries();
+
+            if (count($subqueries) == 0) {
                 $this->_matches = array();
                 if ($hasInsignificantSubqueries) {
                     return new Zend_Search_Lucene_Search_Query_Insignificant();
@@ -132,8 +135,15 @@
                 }
             }
 
+            if (count($subqueries) == 1) {
+                $query = reset($subqueries);
+            }
+
+            $query->setBoost($this->getBoost());
+
             $this->_matches = $query->getQueryTerms();
             return $query;
+
         }
 
         // -------------------------------------
@@ -157,10 +167,12 @@
             $word = iconv($this->_encoding, 'UTF-8', $this->_word);
             $wildcardsPattern = '/[*?]/u';
             $subPatternsEncoding = 'UTF-8';
+            $utf8Support = 1;
         } else {
             $word = $this->_word;
             $wildcardsPattern = '/[*?]/';
             $subPatternsEncoding = $this->_encoding;
+            $utf8Support = 0;
         }
 
         $subPatterns = preg_split($wildcardsPattern, $word, -1, PREG_SPLIT_OFFSET_CAPTURE);
@@ -168,28 +180,123 @@
         if (count($subPatterns) > 1) {
             // Wildcard query is recognized
 
-            $pattern = '';
+            $patterns   = array('');
+            $subqueries = array();
+            $position   = 0;
 
             foreach ($subPatterns as $id => $subPattern) {
                 // Append corresponding wildcard character to the pattern before each sub-pattern (except first)
                 if ($id != 0) {
-                    $pattern .= $word[ $subPattern[1] - 1 ];
+                    foreach ($patterns as $key => $pattern) {
+                            $patterns[$key] .= $word[ $subPattern[1] - 1 ];
+                    }
                 }
 
                 // Check if each subputtern is a single word in terms of current analyzer
                 $tokens = Zend_Search_Lucene_Analysis_Analyzer::getDefault()->tokenize($subPattern[0], $subPatternsEncoding);
-                if (count($tokens) > 1) {
-                    require_once 'Zend/Search/Lucene/Search/QueryParserException.php';
-                    throw new Zend_Search_Lucene_Search_QueryParserException('Wildcard search is supported only for non-multiple word terms');
+
+                // Find out if start of subpattern is also a forced token boundary
+                // (i.e. non-indexed character) in terms of current analyzer
+                /** @todo check for PCRE unicode support may be performed through Zend_Environment in some future */
+                $references=array();
+                if ($utf8Support) {
+                    preg_match('/^./u',$subPattern[0],$references);
+                } else {
+                    preg_match('/^./',$subPattern[0],$references);
                 }
-                foreach ($tokens as $token) {
-                    $pattern .= $token->getTermText();
+                if (!count($references)) {
+                        $references = array('');
+                }
+                // $references[0] is supposed to hold the first (possibly multi byte) character of $subPattern[0]
+                // if it is tokenized empty, (but the current subpattern is not empty) then the 
+                // current subpattern begins with a word boundary character in terms of current analyzer
+                // in this case, the pattern needs to be split at this point. Example: foo*_bar
+                $tokentest = Zend_Search_Lucene_Analysis_Analyzer::getDefault()->tokenize($references[0], $subPatternsEncoding);
+                if ($subPattern[0] != '' && count($tokentest) == 0) {
+                        // There might be several alternative patterns for the token string so far.
+                        // Save them all as queries in array
+                        foreach ($patterns as $pattern) {
+                            $term  = new Zend_Search_Lucene_Index_Term($pattern, $this->_field);
+                            $query = new Zend_Search_Lucene_Search_Query_Wildcard($term);
+                            $query->setBoost($this->getBoost());
+                            $subqueries[] = array($query, $position);
+                        }
+                        $patterns = array('');
+                        $position++;
+                }
+
+                // Add to array of search-tokens for each token in analyzed string
+                foreach ($tokens as $num => $token) {
+                    if ($num == 0) {
+                        // The very first token, only adds to pattern string(s) as normal
+                        $oldpatterns = $patterns;
+                        foreach ($patterns as $key => $pattern) {
+                            $patterns[$key] .= $token->getTermText();
+                        }
+                    } else {
+                        // On additional tokens check whether they are marked as alternatives (positionIcrement==0)
+                        if ($token->getPositionIncrement() == 0) {
+                            // If so, create alternative patterns for this alternative
+                            foreach($oldpatterns as $oldpattern) {
+                                    $patterns[] = $oldpattern.$token->getTermText();
+                            }
+                        } else {
+                            // Otherwise store all previous patterns as wildcard queries in array
+                            foreach ($patterns as $pattern) {
+                                $term  = new Zend_Search_Lucene_Index_Term($pattern, $this->_field);
+                                $query = new Zend_Search_Lucene_Search_Query_Wildcard($term);
+                                $query->setBoost($this->getBoost());
+                                $subqueries[] = array($query, $position);
+                            }
+                            // Increase the position in the phrase query
+                            $position += $token->getPositionIncrement();
+                            // And store this very current token as only alternative in pattern array
+                            $oldpatterns = array('');
+                            $patterns = array($token->getTermText());
+                        }
+                    }
                 }
             }
+            
+            // If we ended up with more than one (sub)query, we need to assemble a phrase request.
+            if (count($subqueries) || count($patterns)>1) {
+                // The latest wildcard patterns have not been added to the array yet
+                foreach ($patterns as $pattern) {
+                    $term  = new Zend_Search_Lucene_Index_Term($pattern, $this->_field);
+                    $query = new Zend_Search_Lucene_Search_Query_Wildcard($term);
+                    $query->setBoost($this->getBoost());
+                    $subqueries[] = array($query, $position);
+                }
 
-            $term  = new Zend_Search_Lucene_Index_Term($pattern, $this->_field);
-            $query = new Zend_Search_Lucene_Search_Query_Wildcard($term);
-            $query->setBoost($this->getBoost());
+                // Create a new Phrase query
+                $query = new Zend_Search_Lucene_Search_Query_Phrase();
+                $query->setBoost($this->getBoost());
+                $maxPosition = 0;
+                $accountedPositions = array();
+
+                // Add all found terms for each wildcard into the corresponding positions of the phrase query
+                foreach ($subqueries as &$subarray) {
+                    list($subquery, $position)=$subarray;
+                    $terms = $subquery->rewrite($index)->getQueryTerms();
+                    foreach($terms as $term) {
+                        $query->addTerm($term, $position);
+                        $accountedPositions[$position] = 1;
+                    }
+                    // account for all needed positions
+                    if ($position > $maxPosition) $maxPosition = $position;
+                }
+
+                // If no tokens were found for a required pattern,the entire query is insignificant.
+                if (count($accountedPositions) <= $maxPosition) {
+                    $this->_matches = array();
+                    return new Zend_Search_Lucene_Search_Query_Insignificant();
+                }
+            } else {
+                // Single wildcard query. Behave as normal.
+                $term  = new Zend_Search_Lucene_Index_Term($patterns[0], $this->_field);
+                $query = new Zend_Search_Lucene_Search_Query_Wildcard($term);
+                $query->setBoost($this->getBoost());
+            }
 
             // Get rewritten query. Important! It also fills terms matching container.
             $rewrittenQuery = $query->rewrite($index);
@@ -218,21 +325,27 @@
         }
 
         //It's not insignificant or one term query
-        $query = new Zend_Search_Lucene_Search_Query_MultiTerm();
+        $query = new Zend_Search_Lucene_Search_Query_Phrase();
+        $query->setBoost($this->getBoost());
+        $position = 0;
 
-        /**
-         * @todo Process $token->getPositionIncrement() to support stemming, synonyms and other
-         * analizer design features
-         */
         foreach ($tokens as $token) {
-            $term = new Zend_Search_Lucene_Index_Term($token->getTermText(), $this->_field);
-            $query->addTerm($term, true); // all subterms are required
-        }
 
-        $query->setBoost($this->getBoost());
+            // Find matching terms to individual token fuzzy searches
+            $term  = new Zend_Search_Lucene_Index_Term($token->getTermText(), $this->_field);
+
+            $position += $token->getPositionIncrement();
+
+            $query->addTerm($term, $position);
+            
+        }
 
+        // Get rewritten query. Important! It also fills terms matching container.
+        $rewrittenQuery = $query->rewrite($index);
         $this->_matches = $query->getQueryTerms();
-        return $query;
+
+        return $rewrittenQuery;
+
     }
 
     /**
