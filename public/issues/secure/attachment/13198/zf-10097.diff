*** /home/petrusra/Downloads/ZendFramework-1.10.6/library/Zend/Cache/Backend/Memcached.php	2010-05-20 18:59:02.000000000 +0200
--- /var/www/ZendFramework-1.9.6/library/Zend/Cache/Backend/Memcached.php	2010-07-09 11:22:24.285134283 +0200
***************
*** 15,23 ****
   * @category   Zend
   * @package    Zend_Cache
   * @subpackage Zend_Cache_Backend
!  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)
   * @license    http://framework.zend.com/license/new-bsd     New BSD License
!  * @version    $Id: Memcached.php 22208 2010-05-20 16:59:02Z mabe $
   */
  
  
--- 15,23 ----
   * @category   Zend
   * @package    Zend_Cache
   * @subpackage Zend_Cache_Backend
!  * @copyright  Copyright (c) 2005-2009 Zend Technologies USA Inc. (http://www.zend.com)
   * @license    http://framework.zend.com/license/new-bsd     New BSD License
!  * @version    $Id: Memcached.php 18951 2009-11-12 16:26:19Z alexander $
   */
  
  
***************
*** 35,41 ****
  /**
   * @package    Zend_Cache
   * @subpackage Zend_Cache_Backend
!  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)
   * @license    http://framework.zend.com/license/new-bsd     New BSD License
   */
  class Zend_Cache_Backend_Memcached extends Zend_Cache_Backend implements Zend_Cache_Backend_ExtendedInterface
--- 35,41 ----
  /**
   * @package    Zend_Cache
   * @subpackage Zend_Cache_Backend
!  * @copyright  Copyright (c) 2005-2009 Zend Technologies USA Inc. (http://www.zend.com)
   * @license    http://framework.zend.com/license/new-bsd     New BSD License
   */
  class Zend_Cache_Backend_Memcached extends Zend_Cache_Backend implements Zend_Cache_Backend_ExtendedInterface
***************
*** 101,106 ****
--- 101,107 ----
          )),
          'compression' => false,
          'compatibility' => false,
+         'semaphoreids' => array(),
      );
  
      /**
***************
*** 219,232 ****
          } else {
              $flag = 0;
          }
! 
!         // ZF-8856: using set because add needs a second request if item already exists
!         $result = @$this->_memcache->set($id, array($data, time(), $lifetime), $flag, $lifetime);
! 
          if (count($tags) > 0) {
!             $this->_log(self::TAGS_UNSUPPORTED_BY_SAVE_OF_MEMCACHED_BACKEND);
          }
- 
          return $result;
      }
  
--- 220,241 ----
          } else {
              $flag = 0;
          }
!         $inSemaphore = false;
!         foreach ($this->_options['semaphoreids'] as $semaphore) {
!         	if ($id == $semaphore){
!         		$inSemaphore = true;
!         		break;	
!         	}
!         }
!         
!         // #ZF-5702 : we try add() first becase set() seems to be slower
!         if (!($result = $this->_memcache->add($id, array($data, time(), $lifetime), $flag, $lifetime)) && !$inSemaphore) {
!             $result = $this->_memcache->set($id, array($data, time(), $lifetime), $flag, $lifetime);
!         }
!         
          if (count($tags) > 0) {
!             $this->_log("Zend_Cache_Backend_Memcached::save() : tags are unsupported by the Memcached backend");
          }
          return $result;
      }
  
***************
*** 238,244 ****
       */
      public function remove($id)
      {
!         return $this->_memcache->delete($id, 0);
      }
  
      /**
--- 247,253 ----
       */
      public function remove($id)
      {
!         return $this->_memcache->delete($id);
      }
  
      /**
***************
*** 381,406 ****
      {
          $mems = $this->_memcache->getExtendedStats();
  
!         $memSize = null;
!         $memUsed = null;
          foreach ($mems as $key => $mem) {
              if ($mem === false) {
!                 $this->_log('can\'t get stat from ' . $key);
!                 continue;
!             }
  
!             $eachSize = $mem['limit_maxbytes'];
!             $eachUsed = $mem['bytes'];
!             if ($eachUsed > $eachSize) {
!                 $eachUsed = $eachSize;
              }
- 
-             $memSize += $eachSize;
-             $memUsed += $eachUsed;
-         }
- 
-         if ($memSize === null || $memUsed === null) {
-             Zend_Cache::throwException('Can\'t get filling percentage');
          }
  
          return ((int) (100. * ($memUsed / $memSize)));
--- 390,414 ----
      {
          $mems = $this->_memcache->getExtendedStats();
  
!         $memSize = 0;
!         $memUsed = 0;
          foreach ($mems as $key => $mem) {
              if ($mem === false) {
!                 Zend_Cache::throwException('can\'t get stat from ' . $key);
!             } else {
!                 $eachSize = $mem['limit_maxbytes'];
!                 if ($eachSize == 0) {
!                     Zend_Cache::throwException('can\'t get memory size from ' . $key);
!                 }
! 
!                 $eachUsed = $mem['bytes'];
!                 if ($eachUsed > $eachSize) {
!                     $eachUsed = $eachSize;
!                 }
  
!                 $memSize += $eachSize;
!                 $memUsed += $eachUsed;
              }
          }
  
          return ((int) (100. * ($memUsed / $memSize)));
