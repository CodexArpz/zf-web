Index: library/Zend/View/Abstract.php
===================================================================
--- library/Zend/View/Abstract.php	(Revision 11279)
+++ library/Zend/View/Abstract.php	(Arbeitskopie)
@@ -47,6 +47,13 @@
         'helper' => array(),
         'filter' => array(),
     );
+    
+    /**
+     * Original temp path, required when rendering another module
+     *
+     * @var array
+     */
+    private $_originalPath = null;
 
     /**
      * Script file name to execute
@@ -775,10 +782,30 @@
      * Processes a view script and returns the output.
      *
      * @param string $name The script script name to process.
+     * @param string $module The module where to search for the script.
+     * @throws Zend_View_Exception When module does not exist
      * @return string The script output.
      */
-    public function render($name)
+    public function render($name, $module = null)
     {
+        // If a module is given, save the current paths and add the new basePath
+        if ($module !== null) {
+            $this->_originalPath = $this->_path;
+        
+            $moduleDir = Zend_Controller_Front::getInstance()->getControllerDirectory($module);
+            if (null === $moduleDir) {
+                require_once 'Zend/View/Exception.php';
+                throw new Zend_View_Exception('Cannot render view; module does not exist');
+            }
+            $viewsDir = dirname($moduleDir) . '/views';
+            $this->addBasePath($viewsDir);
+            
+            // Remove variables from local scope
+            unset($moduleDir);
+            unset($viewsDir);
+            unset($module);
+        }
+        
         // find the script file name using the parent private method
         $this->_file = $this->_script($name);
         unset($name); // remove $name from local scope
@@ -786,6 +813,12 @@
         ob_start();
         $this->_run($this->_file);
 
+        // If a module is given, restore the old basePath
+        if ($this->_originalPath !== null) {
+            $this->_path         = $this->_originalPaths;
+            $this->_originalPath = null;
+        }
+        
         return $this->_filter(ob_get_clean()); // filter output
     }
 
