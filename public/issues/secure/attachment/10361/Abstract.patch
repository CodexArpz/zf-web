Index: Abstract.php
===================================================================
--- Abstract.php	(revision 4225)
+++ Abstract.php	(working copy)
@@ -98,6 +98,14 @@
     private $_encoding = 'ISO-8859-1';
 
     /**
+     * Array of view variable names that should not result in an E_NOTICE
+     * warning, if used and not set.
+     * @var array
+     */
+    private $_declaredVars;
+
+    /**
+    /**
      * Constructor.
      *
      * @param array $config Configuration key-value pairs.
@@ -153,14 +161,24 @@
     }
 
     /**
-     * Prevent E_NOTICE for nonexistent values
+     * Prevent E_NOTICE for nonexistent values, unless declareVars()
+     * was used to provide a list of value names to prevent E_NOTICE.
+     * Using declareVars() yields a compromise solution enabling
+     * detection of spelling errors and typos in views, without 
+     * suffering from numerous E_NOTICE: "Notice: Undefined variable:".
      * 
      * @param string $key 
      * @return null
      */
     public function __get($key)
     {
-        return null;
+        if (!isset($this->_declaredVars)) {
+            return null;
+        }
+        if (isset($this->_declaredVars[$key])) {
+            return null;
+        }
+        trigger_error("Key '$key' does not exist.");
     }
 
     /**
@@ -230,6 +248,9 @@
             // load class and create instance
             $class = $this->_loadClass('helper', $name);
             $this->_helper[$name] = new $class();
+            if (property_exists($class, 'view')) {
+                $this->_helper[$name]->view = $this;
+            }
         }
 
         // call the helper method
@@ -770,4 +791,20 @@
      * @return mixed
      */
     abstract protected function _run();
+
+    /**
+     * Set any unset vars to avoid E_STRICT notices when the view uses them.
+     *
+     * When a view uses an undefined variable with E_STRICT enabled, use this
+     * method to avoid warnings without disabling E_STRICT for other "variables",
+     * such as those containing spelling errors and typos.
+     * Thus, typos continue to result in warnings, but correctly spelled variables will not.
+     * 
+     * @param string  variable number of arguments, all string names of variables to test
+     * @return void
+     */
+    public function declareVars()
+    {
+        $this->_declaredVars = array_flip(func_get_args());
+    }
 }
