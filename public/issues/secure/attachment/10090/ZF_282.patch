Index: Log.php
===================================================================
--- Log.php	(revision 953)
+++ Log.php	(working copy)
@@ -72,6 +72,19 @@
         );
 
     /**
+     * This array contains the status of the log levels true for on false for off
+     *
+     * @var array
+     */
+    static protected $_levelStatus = array(
+        1  => true,
+        2  => true,
+        4  => true,
+        8  => true,
+        16 => true
+        );
+
+    /**
      * The static class Zend_Log holds an array of Zend_Log instances
      * in this variable that are created with registerLogger().
      *
@@ -546,5 +559,198 @@
                         self::LEVEL_INFO, self::LEVEL_DEBUG));
     }
 
+    /**
+     * Turns a logging level on
+     *
+     * @param int   $level
+     * @throws Zend_Log_Exception
+     */
+    public static function enableLogLevel($level)
+    {
+        //make sure $level is a log level
+        if(!self::isLogLevel($level)) {
+            throw new Zend_Log_Exception('Unknown log level specified.');
+        }
+
+        //now enable this log level
+        self::$_levelStatus[$level] = true;
+    }
+
+    /**
+     * Turns a logging level off
+     *
+     * @param int   $level
+     * @throws Zend_Log_Exception
+     */
+    public static function disableLogLevel($level)
+    {
+        //make sure $level is a log level
+        if(!self::isLogLevel($level)) {
+            throw new Zend_Log_Exception('Unknown log level specified.');
+        }
+
+        //now enable this log level
+        self::$_levelStatus[$level] = false;
+    }
+
+    /**
+     * Check if debug level logging is enabled
+     *
+     * @return boolean
+     */
+    public static function isDebugEnabled()
+    {
+        return self::$_levelStatus[self::LEVEL_DEBUG];
+    }
+
+    /**
+     * Check if info level logging is enabled
+     *
+     * @return boolean
+     */
+    public static function isInfoEnabled()
+    {
+        return self::$_levelStatus[self::LEVEL_INFO];
+    }
+
+    /**
+     * Check if warning level logging is enabled
+     *
+     * @return boolean
+     */
+    public static function isWarningEnabled()
+    {
+        return self::$_levelStatus[self::LEVEL_WARNING];
+    }
+
+    /**
+     * Check if error level logging is enabled
+     *
+     * @return boolean
+     */
+    public static function isErrorEnabled()
+    {
+        return self::$_levelStatus[self::LEVEL_ERROR];
+    }
+
+    /**
+     * Check if severe level logging is enabled
+     *
+     * @return boolean
+     */
+    public static function isSevereEnabled()
+    {
+        return self::$_levelStatus[self::LEVEL_SEVERE];
+    }
+
+    /**
+     * Alias for log - logs at debug level
+     *
+     * @param string $message
+     * @param mixed $logName_or_fields
+     * @param string $logName
+     * @throws Zend_Log_Exception
+     * @return boolean True
+     */
+    public static function debug($message, $logName_or_fields = null, $logName = null)
+    {
+        try
+        {
+            return self::log($message, self::LEVEL_DEBUG, $logName_or_fields, $logName);
+        }
+        catch (Zend_Log_Exception $e)
+        {
+            throw new Zend_Log_Exception($e->getMessage());
+        }
+
+    }
+
+    /**
+     * Alias for log - logs at info level
+     *
+     * @param string $message
+     * @param mixed $logName_or_fields
+     * @param string $logName
+     * @throws Zend_Log_Exception
+     * @return boolean True
+     */
+    public static function info($message, $logName_or_fields = null, $logName = null)
+    {
+        try
+        {
+            return self::log($message, self::LEVEL_INFO, $logName_or_fields, $logName);
+        }
+        catch (Zend_Log_Exception $e)
+        {
+            throw new Zend_Log_Exception($e->getMessage());
+        }
+
+    }
+
+    /**
+     * Alias for log - logs at warning level
+     *
+     * @param string $message
+     * @param mixed $logName_or_fields
+     * @param string $logName
+     * @throws Zend_Log_Exception
+     * @return boolean True
+     */
+    public static function warning($message, $logName_or_fields = null, $logName = null)
+    {
+        try
+        {
+            return self::log($message, self::LEVEL_WARNING, $logName_or_fields, $logName);
+        }
+        catch (Zend_Log_Exception $e)
+        {
+            throw new Zend_Log_Exception($e->getMessage());
+        }
+
+    }
+
+    /**
+     * Alias for log - logs at error level
+     *
+     * @param string $message
+     * @param mixed $logName_or_fields
+     * @param string $logName
+     * @throws Zend_Log_Exception
+     * @return boolean True
+     */
+    public static function error($message, $logName_or_fields = null, $logName = null)
+    {
+        try
+        {
+            return self::log($message, self::LEVEL_ERROR, $logName_or_fields, $logName);
+        }
+        catch (Zend_Log_Exception $e)
+        {
+            throw new Zend_Log_Exception($e->getMessage());
+        }
+
+    }
+
+    /**
+     * Alias for log - logs at severe level
+     *
+     * @param string $message
+     * @param mixed $logName_or_fields
+     * @param string $logName
+     * @throws Zend_Log_Exception
+     * @return boolean True
+     */
+    public static function severe($message, $logName_or_fields = null, $logName = null)
+    {
+        try
+        {
+            return self::log($message, self::LEVEL_SEVERE, $logName_or_fields, $logName);
+        }
+        catch (Zend_Log_Exception $e)
+        {
+            throw new Zend_Log_Exception($e->getMessage());
+        }
+
+    }
 }
 
