Index: library/Zend/Acl.php
===================================================================
--- library/Zend/Acl.php	(revision 19333)
+++ library/Zend/Acl.php	(working copy)
@@ -125,8 +125,13 @@
             ),
         'byResourceId' => array()
         );
-
+        
     /**
+     * @var Zend_Log
+     */
+    protected $_logger = null;     
+        
+    /**
      * Adds a Role having an identifier unique to the registry
      *
      * The $parents parameter may be a reference to, or the string identifier for,
@@ -754,7 +759,7 @@
      */
     public function isAllowed($role = null, $resource = null, $privilege = null)
     {
-        // reset role & resource to null
+        // reset role & resource to null        
         $this->_isAllowedRole = null;
         $this->_isAllowedResource = null;
         $this->_isAllowedPrivilege = null;
@@ -792,7 +797,17 @@
                             return false;
                         }
                     }
-                    if (null !== ($ruleTypeAllPrivileges = $this->_getRuleType($resource, null, null))) {
+                    
+                    if (null !== ($ruleTypeAllPrivileges = $this->_getRuleType($resource, null, null))) {                    	
+						if(null !== $resource) {
+							$this->_log(
+			            		(self::TYPE_ALLOW === $ruleTypeAllPrivileges ? 'Allowed' : 'Denied') 
+			            		. " by default rule for resource: '{$resource->getResourceId()}'");
+						} else {
+							$this->_log(
+			            		(self::TYPE_ALLOW === $ruleTypeAllPrivileges ? 'Allowed' : 'Denied') 
+			            		. " by default rule for ACL");
+						}                    	                    	
                         return self::TYPE_ALLOW === $ruleTypeAllPrivileges;
                     }
                 }
@@ -858,13 +873,13 @@
             'stack'   => array()
             );
 
-        if (null !== ($result = $this->_roleDFSVisitAllPrivileges($role, $resource, $dfs))) {
+        if (null !== ($result = $this->_roleDFSVisitAllPrivileges($role, $resource, $dfs))) {        	
             return $result;
         }
 
         while (null !== ($role = array_pop($dfs['stack']))) {
             if (!isset($dfs['visited'][$role->getRoleId()])) {
-                if (null !== ($result = $this->_roleDFSVisitAllPrivileges($role, $resource, $dfs))) {
+                if (null !== ($result = $this->_roleDFSVisitAllPrivileges($role, $resource, $dfs))) {                	
                     return $result;
                 }
             }
@@ -896,15 +911,19 @@
              */
             require_once 'Zend/Acl/Exception.php';
             throw new Zend_Acl_Exception('$dfs parameter may not be null');
-        }
-
-        if (null !== ($rules = $this->_getRules($resource, $role))) {
-            foreach ($rules['byPrivilegeId'] as $privilege => $rule) {
+        }        
+        if (null !== ($rules = $this->_getRules($resource, $role))) {        
+            foreach ($rules['byPrivilegeId'] as $privilege => $rule) {            	            	
                 if (self::TYPE_DENY === ($ruleTypeOnePrivilege = $this->_getRuleType($resource, $role, $privilege))) {
+                	$this->_log("Denied by rule for role : '{$role->getRoleId()}' resource: '{$resource->getResourceId()}'");                	                	                	
                     return false;
-                }
-            }
+                }   
+                             
+            }                       
             if (null !== ($ruleTypeAllPrivileges = $this->_getRuleType($resource, $role, null))) {
+            	$this->_log(
+            		(self::TYPE_ALLOW === $ruleTypeAllPrivileges ? 'Allowed' : 'Denied') 
+            		. " by rule for role : '{$role->getRoleId()}' resource: '{$resource->getResourceId()}'");
                 return self::TYPE_ALLOW === $ruleTypeAllPrivileges;
             }
         }
@@ -913,7 +932,6 @@
         foreach ($this->_getRoleRegistry()->getParents($role) as $roleParentId => $roleParent) {
             $dfs['stack'][] = $roleParent;
         }
-
         return null;
     }
 
@@ -996,8 +1014,14 @@
         }
 
         if (null !== ($ruleTypeOnePrivilege = $this->_getRuleType($resource, $role, $privilege))) {
+        	$this->_log(
+        		(self::TYPE_ALLOW === $ruleTypeOnePrivilege ? 'Allowed' : 'Denied') 	
+        		. " by rule for role : '{$role->getRoleId()}' resource: '{$resource->getResourceId()}' privilege: '{$privilege}'");
             return self::TYPE_ALLOW === $ruleTypeOnePrivilege;
         } else if (null !== ($ruleTypeAllPrivileges = $this->_getRuleType($resource, $role, null))) {
+        	$this->_log(
+        		(self::TYPE_ALLOW === $ruleTypeOnePrivilege ? 'Allowed' : 'Denied') 	
+        		. " by rule for role : '{$role->getRoleId()}' resource: '{$resource->getResourceId()}'");        	
             return self::TYPE_ALLOW === $ruleTypeAllPrivileges;
         }
 
@@ -1139,5 +1163,23 @@
     {
         return $this->_getRoleRegistry()->getRoles();
     }
+    
+    /**
+     * Sets the logger to be used by the ACL
+     * @param Zend_Log	$logger     
+     */
+    public function setLogger(Zend_Log $logger) {
+		$this->_logger = $logger;    	
+    }
+    
+    /**
+     * If there is a logger, log the message with a status of INFO, else do nothing
+     * @param string $message     
+     */
+    protected function _log($message) {
+    	if(null !== $this->_logger) {
+    		$this->_logger->log($message, Zend_Log::INFO);
+    	}
+    }
 
 }
