Index: tests/Zend/Application/Resource/MultidbTest.php
===================================================================
--- tests/Zend/Application/Resource/MultidbTest.php	(revision 22874)
+++ tests/Zend/Application/Resource/MultidbTest.php	(working copy)
@@ -53,7 +53,8 @@
 class Zend_Application_Resource_MultidbTest extends PHPUnit_Framework_TestCase
 {
     protected $_dbOptions = array('db1' => array('adapter' => 'pdo_mysql','dbname' => 'db1','password' => 'XXXX','username' => 'webuser'),
-                                'db2' => array('adapter' => 'pdo_pgsql', 'dbname' => 'db2', 'password' => 'notthatpublic', 'username' => 'dba'));
+                                'db2' => array('adapter' => 'pdo_pgsql', 'dbname' => 'db2', 'password' => 'notthatpublic', 'username' => 'dba', 
+                                               'registryKey' => 'Db2_Key'));
 
     public static function main()
     {
@@ -77,6 +78,8 @@
         $this->bootstrap = new Zend_Application_Bootstrap_Bootstrap($this->application);
 
         Zend_Controller_Front::getInstance()->resetInstance();
+
+        Zend_Registry::_unsetInstance();
     }
 
     public function tearDown()
@@ -115,6 +118,8 @@
         $res = $resource->init();
         $this->assertTrue($res->getDb('db1') instanceof Zend_Db_Adapter_Pdo_Mysql);
         $this->assertTrue($res->getDb('db2') instanceof Zend_Db_Adapter_Pdo_Pgsql);
+        $this->assertTrue(Zend_Registry::isRegistered('Db2_Key'));
+        $this->assertSame(Zend_Registry::get('Db2_Key'), $res->getDb('db2'));
     }
 
     public function testGetDefaultIsSetAndReturnedObject()
@@ -141,7 +146,8 @@
         $this->assertTrue($res->isDefault($res->getDb('db2')));
         $this->assertTrue($res->isDefault('db2'));
         $this->assertTrue(Zend_Db_Table::getDefaultAdapter() instanceof Zend_Db_Adapter_Pdo_Pgsql);
-
+        $this->assertTrue(Zend_Registry::isRegistered('Db2_Key'));
+        $this->assertSame(Zend_Registry::get('Db2_Key'), $res->getDb('db2'));
     }
 
     public function testGetDefaultRandomWhenNoDefaultWasSetObject()
Index: tests/Zend/Application/Resource/DbTest.php
===================================================================
--- tests/Zend/Application/Resource/DbTest.php	(revision 22874)
+++ tests/Zend/Application/Resource/DbTest.php	(working copy)
@@ -67,6 +67,8 @@
 
         require_once dirname(__FILE__) . '/../_files/ZfAppBootstrap.php';
         $this->bootstrap = new ZfAppBootstrap($this->application);
+
+        Zend_Registry::_unsetInstance();
     }
 
     public function tearDown()
@@ -141,11 +143,14 @@
                 'dbname' => ':memory:',
             ),
             'isDefaultTableAdapter' => false,
+            'registryKey' => 'Db_Key',
         );
         $resource = new Zend_Application_Resource_Db($config);
         $resource->init();
         $db = $resource->getDbAdapter();
         $this->assertTrue($db instanceof Zend_Db_Adapter_Pdo_Sqlite);
+        $this->assertTrue(Zend_Registry::isRegistered('Db_Key'));
+        $this->assertSame(Zend_Registry::get('Db_Key'), $db);
     }
 
     /**
Index: library/Zend/Application/Resource/Multidb.php
===================================================================
--- library/Zend/Application/Resource/Multidb.php	(revision 22874)
+++ library/Zend/Application/Resource/Multidb.php	(working copy)
@@ -46,6 +46,7 @@
  *   resources.multidb.db2.username = "dba"
  *   resources.multidb.db2.password = "notthatpublic"
  *   resources.multidb.db2.dbname = "db2"
+ *   resources.multidb.db2.registryKey = "storeDb2InRegistry_Key"
  * </pre>
  *
  * @category   Zend
@@ -90,10 +91,12 @@
                 isset($params['isDefaultTableAdapter']) && $params['isDefaultTableAdapter']
                 || isset($params['default']) && $params['default']
             );
+            $registryKey = (isset($params['registryKey'])) ? $params['registryKey'] : null;
             unset(
                 $params['adapter'],
                 $params['default'],
-                $params['isDefaultTableAdapter']
+                $params['isDefaultTableAdapter'],
+                $params['registryKey']
             );
 
             $this->_dbs[$id] = Zend_Db::factory($adapter, $params);
@@ -101,6 +104,9 @@
             if ($default) {
                 $this->_setDefault($this->_dbs[$id]);
             }
+            if (null !== $registryKey)) {
+                Zend_Registry::set($registryKey, $this->_dbs[$id]);
+            }
         }
 
         return $this;
Index: library/Zend/Application/Resource/Db.php
===================================================================
--- library/Zend/Application/Resource/Db.php	(revision 22874)
+++ library/Zend/Application/Resource/Db.php	(working copy)
@@ -64,6 +64,13 @@
     protected $_isDefaultTableAdapter = true;
 
     /**
+     * Optionally place the adapter into the registry, using this key
+     *
+     * @var string
+     */
+    protected $_registryKey = null;
+
+    /**
      * Set the adapter
      *
      * @param  $adapter string
@@ -130,6 +137,28 @@
     }
 
     /**
+     * Set the registryKey to hold an instance of the table adapter
+     *
+     * @param string $registryKey
+     * @return Zend_Application_Resource_Db
+     */
+    public function setRegistryKey($registryKey)
+    {
+        $this->_registryKey = $registryKey;
+        return $this;
+    }
+
+    /**
+     * Get the registryKey for holding an instance of the table adapter
+     *
+     * @return string
+     */
+    public function getRegistryKey()
+    {
+        return $this->_registryKey;
+    }
+
+    /**
      * Retrieve initialized DB connection
      *
      * @return null|Zend_Db_Adapter_Interface
@@ -155,6 +184,9 @@
             if ($this->isDefaultTableAdapter()) {
                 Zend_Db_Table::setDefaultAdapter($db);
             }
+            if (null !== ($registryKey = $this->getRegistryKey())) {
+                Zend_Registry::set($registryKey, $db);
+            }
             return $db;
         }
     }
Index: documentation/manual/en/module_specs/Zend_Application-AvailableResources-Db.xml
===================================================================
--- documentation/manual/en/module_specs/Zend_Application-AvailableResources-Db.xml	(revision 22874)
+++ documentation/manual/en/module_specs/Zend_Application-AvailableResources-Db.xml	(working copy)
@@ -7,8 +7,9 @@
         <classname>Zend_Application_Resource_Db</classname> will initialize a
         <classname>Zend_Db</classname> adapter based on the options passed to it. By
         default, it also sets the adapter as the default adapter for use with
-        <classname>Zend_Db_Table</classname>. If you want to use mutliple databases
-        simultaneously, you can use the <link
+        <classname>Zend_Db_Table</classname>. You may also optionally store the 
+        adapter in the <classname>Zend_Registry</classname>. If you want to use 
+        multiple databases simultaneously, you can use the <link
         linkend="zend.application.available-resources.multidb">Multidb Resource
         Plugin</link>.
     </para>
@@ -41,6 +42,13 @@
 
         <listitem>
             <para>
+                <emphasis><property>registryKey</property></emphasis>: optional registry key used 
+                to store the adapter in <classname>Zend_Registry</classname>.
+            </para>
+        </listitem>
+
+        <listitem>
+            <para>
                 <emphasis><property>defaultMetadataCache</property></emphasis>: the name of the
                 cache template or an instance of <classname>Zend_Cache_Core</classname> to use as
                 metadata cache for <classname>Zend_Db_Table</classname>.
@@ -64,6 +72,7 @@
 resources.db.params.password = "XXXXXXX"
 resources.db.params.dbname = "test"
 resources.db.isDefaultTableAdapter = true
+resources.db.registryKey = "storeDbInRegistry_Key"
 
 ; Optionally you can also the cache template to use for metadata caching:
 resources.db.defaultMetadataCache = "database"
@@ -96,5 +105,15 @@
         <programlisting language="php"><![CDATA[
 $db = $resource->getDbAdapter();
 ]]></programlisting>
+
+        <para>
+            If you have set the 'registryKey' parameter, you can also fetch
+            the DB adapter from the <classname>Zend_Registry</classname>:
+        </para>
+
+        <programlisting language="php"><![CDATA[
+$db = Zend_Registry::get('storeDbInRegistry_Key');
+]]></programlisting>
+
     </note>
 </sect2>
Index: documentation/manual/en/module_specs/Zend_Application-AvailableResources-Multidb.xml
===================================================================
--- documentation/manual/en/module_specs/Zend_Application-AvailableResources-Multidb.xml	(revision 22874)
+++ documentation/manual/en/module_specs/Zend_Application-AvailableResources-Multidb.xml	(working copy)
@@ -32,6 +32,7 @@
 resources.multidb.db2.password = "notthatpublic"
 resources.multidb.db2.dbname = "db2"
 resources.multidb.db2.default = true
+resources.multidb.db2.registryKey = "storeDbInRegistry_Key"
 ]]></programlisting>
     </example>
 
@@ -82,4 +83,25 @@
 $null = $resource->getDefaultDb(false); // null
 ]]></programlisting>
     </example>
+
+    <example id="zend.application.available-resources.multidb.retrieveDbFromRegistry">
+        <title>Retrieving a database adapter from the Zend_Registry</title>
+
+        <para>
+            Additionally, you can retrieve the default database adapter
+            from Zend_Registry using the configured 'registryKey' parameter.
+            If the 'registryKey' parameter is not set, the database adapter
+            will not be stored in the registry.
+         </para>
+
+        <para>
+            Below is an example that assumes the Multidb resource plugin has been configured
+            with the <acronym>INI</acronym> sample above:
+        </para>
+
+        <programlisting language="php"><![CDATA[
+$db2 = Zend_Registry::get('storeDbInRegistry_Key');
+]]></programlisting>
+    </example>
+
 </sect2>
