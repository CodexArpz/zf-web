diff --git a/library/Zend/Http/Client.php b/library/Zend/Http/Client.php
index 51a91d6..d5d9a6b 100755
--- a/library/Zend/Http/Client.php
+++ b/library/Zend/Http/Client.php
@@ -627,26 +627,48 @@ class Client implements Dispatchable
      * Create a HTTP authentication "Authorization:" header according to the
      * specified user, password and authentication method.
      *
-     * @param string $user
+     * To enable authentication:
+     * <code>
+     * $this->setAuth('shahar', 'secret', Zend_Http_Client::AUTH_BASIC);
+     * </code>
+     *
+     * To disable authentication:
+     * <code>
+     * $this->setAuth(false);
+     * </code>
+     *
+     * @param string $user|false
      * @param string $password
      * @param string $type
      * @return Client
+     * @throws Zend\Exception\InvalidArgumentException
      */
-    public function setAuth($user, $password, $type = self::AUTH_BASIC)
+    public function setAuth($user, $password = '', $type = self::AUTH_BASIC)
     {
-        if (!defined('self::AUTH_' . strtoupper($type))) {
-            throw new Exception\InvalidArgumentException("Invalid or not supported authentication type: '$type'");
-        }
-        if (empty($user) || empty($password)) {
-            throw new Exception\InvalidArgumentException("The username and the password cannot be empty");
-        }
+        // If we got false or null, disable authentication
+        if ($user === false || $user === null) {
+            $this->auth = null;
 
-        $this->auth = array (
-            'user'     => $user,
-            'password' => $password,
-            'type'     => $type
+            // Clear the auth information in the uri instance as well
+            if ($this->getUri() instanceof \Zend\Uri\Http) {
+                $this->getUri()->setUser('')->setPassword('');
+            }
+        // Else, set up authentication
+        } else {
+            if (!defined('self::AUTH_' . strtoupper($type))) {
+                throw new Exception\InvalidArgumentException("Invalid or not supported authentication type: '$type'");
+            }
+            if (empty($user) || empty($password)) {
+                throw new Exception\InvalidArgumentException("The username and the password cannot be empty");
+            }
 
-        );
+            $this->auth = array (
+                'user'     => $user,
+                'password' => $password,
+                'type'     => $type
+
+            );
+        }
 
         return $this;
     }
