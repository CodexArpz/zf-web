--- Image.php	2011-03-22 12:14:04.828829049 +0100
+++ ImageN.php	2011-03-21 18:02:36.000000000 +0100
@@ -127,6 +127,23 @@
      * @var int
      */
     protected $_lineNoiseLevel = 5;
+
+	/**
+	 * Array with font color in RGB
+	 * (default is white)
+	 * 
+	 * @var array
+	 */
+	protected $_fontColor = array(0, 0, 0);
+
+	/**
+	 * Array with font color in RGB
+	 * (default is black)
+	 *
+	 * @var array
+	 */
+	protected $_backgroundColor = array(255, 255, 255);
+
     /**
      * @return string
      */
@@ -240,6 +257,24 @@
     {
         return $this->_width;
     }
+
+	/**
+	 * Get font color
+	 *
+	 * @return array
+	 */
+	public function getFontColor() {
+		return $this->_fontColor;
+	}
+
+	/**
+	 * Get background color
+	 *
+	 * @return array
+	 */
+	public function getBackgroundColor() {
+		return $this->_backgroundColor;
+	}
     /**
      * @param string $startImage
      */
@@ -381,6 +416,30 @@
         return $this;
     }
 
+	/**
+	 * Set font color
+	 *
+	 * @param array $color
+	 */
+	public function setFontColor($color) {
+		if (!is_array($color)) {
+			throw new Exception("font color must be an array");
+		}
+		$this->_fontColor = $color;
+	}
+
+	/**
+	 * Set background color
+	 *
+	 * @param array $color
+	 */
+	public function setBackgroundColor($color) {
+		if (!is_array($color)) {
+			throw new Exception("background color must be an array");
+		}
+		$this->_backgroundColor = $color;
+	}
+
     /**
      * Generate random frequency
      *
@@ -470,6 +529,8 @@
         $w     = $this->getWidth();
         $h     = $this->getHeight();
         $fsize = $this->getFontSize();
+		$tc    = $this->getFontColor();
+		$bc    = $this->getBackgroundColor();
 
         $img_file   = $this->getImgDir() . $id . $this->getSuffix();
         if(empty($this->_startImage)) {
@@ -483,8 +544,10 @@
             $w = imagesx($img);
             $h = imagesy($img);
         }
-        $text_color = imagecolorallocate($img, 0, 0, 0);
-        $bg_color   = imagecolorallocate($img, 255, 255, 255);
+
+        $text_color = imagecolorallocate($img, $tc[0], $tc[1], $tc[2]);
+        $bg_color   = imagecolorallocate($img, $bc[0], $bc[1], $bc[2]);
+
         imagefilledrectangle($img, 0, 0, $w-1, $h-1, $bg_color);
         $textbox = imageftbbox($fsize, 0, $font, $word);
         $x = ($w - ($textbox[2] - $textbox[0])) / 2;
@@ -501,9 +564,10 @@
 
         // transformed image
         $img2     = imagecreatetruecolor($w, $h);
-        $bg_color = imagecolorallocate($img2, 255, 255, 255);
+        $bg_color = imagecolorallocate($img2, $bc[0], $bc[1], $bc[2]);
         imagefilledrectangle($img2, 0, 0, $w-1, $h-1, $bg_color);
-        // apply wave transforms
+
+		// apply wave transforms
         $freq1 = $this->_randomFreq();
         $freq2 = $this->_randomFreq();
         $freq3 = $this->_randomFreq();
@@ -524,31 +588,32 @@
 
                 if ($sx < 0 || $sy < 0 || $sx >= $w - 1 || $sy >= $h - 1) {
                     continue;
-                } else {
-                    $color    = (imagecolorat($img, $sx, $sy) >> 16)         & 0xFF;
-                    $color_x  = (imagecolorat($img, $sx + 1, $sy) >> 16)     & 0xFF;
-                    $color_y  = (imagecolorat($img, $sx, $sy + 1) >> 16)     & 0xFF;
-                    $color_xy = (imagecolorat($img, $sx + 1, $sy + 1) >> 16) & 0xFF;
                 }
-                if ($color == 255 && $color_x == 255 && $color_y == 255 && $color_xy == 255) {
-                    // ignore background
-                    continue;
-                } elseif ($color == 0 && $color_x == 0 && $color_y == 0 && $color_xy == 0) {
-                    // transfer inside of the image as-is
-                    $newcolor = 0;
-                } else {
-                    // do antialiasing for border items
-                    $frac_x  = $sx-floor($sx);
-                    $frac_y  = $sy-floor($sy);
-                    $frac_x1 = 1-$frac_x;
-                    $frac_y1 = 1-$frac_y;
-
-                    $newcolor = $color    * $frac_x1 * $frac_y1
-                              + $color_x  * $frac_x  * $frac_y1
-                              + $color_y  * $frac_x1 * $frac_y
-                              + $color_xy * $frac_x  * $frac_y;
-                }
-                imagesetpixel($img2, $x, $y, imagecolorallocate($img2, $newcolor, $newcolor, $newcolor));
+				
+				$color    = $this->_getColorsAt($img, $sx, $sy);
+				$color_x  = $this->_getColorsAt($img, $sx + 1, $sy);
+				$color_y  = $this->_getColorsAt($img, $sx, $sy + 1);
+				$color_xy = $this->_getColorsAt($img, $sx + 1, $sy + 1);
+
+				if ($color["red"] == $bc[0] && $color["green"] == $bc[1] && $color["blue"] == $bc[2]) {
+					continue;
+				}
+
+				// do antialiasing for border items
+				$frac_x  = $sx-floor($sx);
+				$frac_y  = $sy-floor($sy);
+				$frac_x1 = 1-$frac_x;
+				$frac_y1 = 1-$frac_y;
+
+				$colors = array("red", "green", "blue");
+				foreach ($colors as $c) {
+					$newcolor[$c] = $color[$c]    * $frac_x1 * $frac_y1
+								  + $color_x[$c]  * $frac_x  * $frac_y1
+								  + $color_y[$c]  * $frac_x1 * $frac_y
+								  + $color_xy[$c] * $frac_x  * $frac_y;
+				}
+                
+                imagesetpixel($img2, $x, $y, imagecolorallocate($img2, $newcolor["red"], $newcolor["green"], $newcolor["blue"]));
             }
         }
 
@@ -602,4 +667,17 @@
         return '<img width="' . $this->getWidth() . '" height="' . $this->getHeight() . '" alt="' . $this->getImgAlt()
              . '" src="' . $this->getImgUrl() . $this->getId() . $this->getSuffix() . '" />';
     }
+
+	/**
+	 * Returns RGB-color code from given image position
+	 *
+	 * @param identifier $image
+	 * @param int $x
+	 * @param int $y
+	 * @return array
+	 */
+	protected function _getColorsAt($image, $x, $y)
+	{
+		return imagecolorsforindex($image, imagecolorat($image, $x, $y));
+	}
 }
