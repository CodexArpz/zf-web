Index: library/ZendX/JQuery/View/Helper/AjaxLink.php
===================================================================
--- library/ZendX/JQuery/View/Helper/AjaxLink.php	(revision 21131)
+++ library/ZendX/JQuery/View/Helper/AjaxLink.php	(working copy)
@@ -25,6 +25,8 @@
  */
 include_once "Zend/View/Helper/HtmlElement.php";
 
+include_once 'Request.php';
+
 /**
  * jQuery Accordion Pane, goes with Accordion Container
  *
@@ -34,7 +36,8 @@
  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)
  * @license    http://framework.zend.com/license/new-bsd     New BSD License
  */
-class ZendX_JQuery_View_Helper_AjaxLink extends Zend_View_Helper_HtmlElement
+class ZendX_JQuery_View_Helper_AjaxLink 
+    extends ZendX_JQuery_View_Helper_Request
 {
     /**
      * Static because multiple instances accross views of AjaxLink could reset the counter and a
@@ -85,11 +88,8 @@
      */
     public function ajaxLink($label, $url, $options=null, $params=null)
     {
-        $jquery = $this->view->jQuery();
-        $jquery->enable();
-
-        $jqHandler = (ZendX_JQuery_View_Helper_JQuery::getNoConflictMode()==true)?'$j':'$';
-
+        $js = $this->request($url, $options, $params);
+        
         $attribs = array();
         if(isset($options['attribs']) && is_array($options['attribs'])) {
             $attribs = $options['attribs'];
@@ -131,115 +131,12 @@
             $inline = true;
         }
 
-        //
-        // Detect the callbacks:
-        // Just those two callbacks, beforeSend and complete can be defined for the $.get and $.post options.
-        // Pick all the defined callbacks and put them on their respective stacks.
-        //
-        $callbacks = array('beforeSend' => null, 'complete' => null);
-        if(isset($options['beforeSend'])) {
-            $callbacks['beforeSend'] = $options['beforeSend'];
-        }
-        if(isset($options['complete'])) {
-            $callbacks['complete'] = $options['complete'];
-        }
-
-        $updateContainer = false;
-        if(!empty($options['update']) && is_string($options['update'])) {
-            $updateContainer = $options['update'];
-
-            // Additionally check if there is a callback complete that is a shortcut to be executed
-            // on the specified update container
-            if(!empty($callbacks['complete'])) {
-                switch(strtolower($callbacks['complete'])) {
-                    case 'show':
-                        $callbacks['complete'] = sprintf("%s('%s').show();", $jqHandler, $updateContainer);
-                        break;
-                    case 'showslow':
-                        $callbacks['complete'] = sprintf("%s('%s').show('slow');", $jqHandler, $updateContainer);
-                        break;
-                    case 'shownormal':
-                        $callbacks['complete'] = sprintf("%s('%s').show('normal');", $jqHandler, $updateContainer);
-                        break;
-                    case 'showfast':
-                        $callbacks['complete'] = sprintf("%s('%s').show('fast');", $jqHandler, $updateContainer);
-                        break;
-                    case 'fadein':
-                        $callbacks['complete'] = sprintf("%s('%s').fadeIn('normal');", $jqHandler, $updateContainer);
-                        break;
-                    case 'fadeinslow':
-                        $callbacks['complete'] = sprintf("%s('%s').fadeIn('slow');", $jqHandler, $updateContainer);
-                        break;
-                    case 'fadeinfast':
-                        $callbacks['complete'] = sprintf("%s('%s').fadeIn('fast');", $jqHandler, $updateContainer);
-                        break;
-                    case 'slidedown':
-                        $callbacks['complete'] = sprintf("%s('%s').slideDown('normal');", $jqHandler, $updateContainer);
-                        break;
-                    case 'slidedownslow':
-                        $callbacks['complete'] = sprintf("%s('%s').slideDown('slow');", $jqHandler, $updateContainer);
-                        break;
-                    case 'slidedownfast':
-                        $callbacks['complete'] = sprintf("%s('%s').slideDown('fast');", $jqHandler, $updateContainer);
-                        break;
-                }
-            }
-        }
-
-        if(empty($options['dataType'])) {
-            $options['dataType'] = "html";
-        }
-
-        $requestHandler = $this->_determineRequestHandler($options, (count($params)>0)?true:false);
-
-        $callbackCompleteJs = array();
-        if($updateContainer != false) {
-            if($options['dataType'] == "text") {
-                $callbackCompleteJs[] = sprintf("%s('%s').text(data);", $jqHandler, $updateContainer);
-            } else {
-                $callbackCompleteJs[] = sprintf("%s('%s').html(data);", $jqHandler, $updateContainer);
-            }
-        }
-        if($callbacks['complete'] != null) {
-            $callbackCompleteJs[] = $callbacks['complete'];
-        }
-
         if(isset($params) && count($params) > 0) {
             $params = ZendX_JQuery::encodeJson($params);
         } else {
             $params = '{}';
         }
 
-        $js = array();
-        if($callbacks['beforeSend'] != null) {
-            switch(strtolower($callbacks['beforeSend'])) {
-                case 'fadeout':
-                    $js[] = sprintf("%s(this).fadeOut();", $jqHandler);
-                    break;
-                case 'fadeoutslow':
-                    $js[] = sprintf("%s(this).fadeOut('slow');", $jqHandler);
-                    break;
-                case 'fadeoutfast':
-                    $js[] = sprintf("%s(this).fadeOut('fast');", $jqHandler);
-                    break;
-                case 'hide':
-                    $js[] = sprintf("%s(this).hide();", $jqHandler);
-                    break;
-                case 'hideslow':
-                    $js[] = sprintf("%s(this).hide('slow');", $jqHandler);
-                    break;
-                case 'hidefast':
-                    $js[] = sprintf("%s(this).hide('fast');", $jqHandler);
-                    break;
-                case 'slideup':
-                    $js[] = sprintf("%s(this).slideUp(1000);", $jqHandler);
-                    break;
-                default:
-                    $js[] = $callbacks['beforeSend'];
-                    break;
-            }
-        }
-
         switch($requestHandler) {
             case 'GET':
                 $js[] = sprintf("%s.get('%s', %s, function(data, textStatus) { %s }, '%s');return false;",
@@ -282,27 +179,4 @@
             . '</a>';
         return $html;
     }
-
-    /**
-     * Determine which request method (GET or POST) should be used.
-     *
-     * Normally the request method is determined implicitly by the rule,
-     * if addiotional params are sent, POST, if not GET. You can overwrite
-     * this behaviiour by implicitly setting $options['method'] = "POST|GET";
-     *
-     * @param  Array   $options
-     * @param  Boolean $hasParams
-     * @return String
-     */
-    protected function _determineRequestHandler($options, $hasParams)
-    {
-        if(isset($options['method']) && in_array(strtoupper($options['method']), array('GET', 'POST'))) {
-            return strtoupper($options['method']);
-        }
-        $requestHandler = "GET";
-        if($hasParams == true) {
-            $requestHandler = "POST";
-        }
-        return $requestHandler;
-    }
 }
\ No newline at end of file
Index: library/ZendX/JQuery/View/Helper/Request.php
===================================================================
--- library/ZendX/JQuery/View/Helper/Request.php	(revision 0)
+++ library/ZendX/JQuery/View/Helper/Request.php	(revision 0)
@@ -0,0 +1,128 @@
+<?php
+/**
+ * Zend Framework
+ *
+ * LICENSE
+ *
+ * This source file is subject to the new BSD license that is bundled
+ * with this package in the file LICENSE.txt.
+ * It is also available through the world-wide-web at this URL:
+ * http://framework.zend.com/license/new-bsd
+ * If you did not receive a copy of the license and are unable to
+ * obtain it through the world-wide-web, please send an email
+ * to license@zend.com so we can send you a copy immediately. 
+ *
+ * @category    ZendX
+ * @package     JQuery
+ * @subpackage  View_Helper
+ * @copyright  	Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)
+ * @license    	http://framework.zend.com/license   BSD License
+ * @version    	$Id:$
+ * @since       ZF-9226
+ */
+
+require('/Request/RequestAbstract.php');
+
+/**
+ * Request
+ * Return a JQuery request fuction as string
+ *
+ * @category    ZendX
+ * @package     JQuery
+ * @subpackage  View_Helper
+ * @copyright  	Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)
+ * @license    	http://framework.zend.com/license   BSD License  
+ * @author      Maghiel Dijksman <mail@mdijksman.nl>
+ * @version     1.0.0 - 22-feb-2010
+ * @since       ZF-9226
+ */
+class ZendX_JQuery_View_Helper_Request
+    extends ZendX_JQuery_View_Helper_Request_RequestAbstract
+{
+    /**
+     * Create inline JQuery function that enables ajax-based requests and
+     * handling of the response.
+     *
+     * @see ZendX_JQuery_View_Helper_AjaxLink
+     *
+     * @param string url
+     * @param array $options (optional)
+     * @param array $params (optional)
+     * @return string
+     */
+    public function request($url, array $options = null, array $params = null)
+    {        
+        // Detect the callbacks:
+        // Just those two callbacks, beforeSend and complete can be defined for the $.get and $.post options.
+        // Pick all the defined callbacks and put them on their respective stacks.
+        //
+        $callbacks = array('beforeSend' => null, 'complete' => null);
+        if(isset($options['beforeSend'])) {
+            $callbacks['beforeSend'] = $options['beforeSend'];
+        }
+        if(isset($options['complete'])) {
+            $callbacks['complete'] = $options['complete'];
+        }
+
+        $updateContainer = false;
+        if(!empty($options['update']) && is_string($options['update'])) {
+            $updateContainer = $options['update'];
+
+            // Additionally check if there is a callback complete that is a shortcut to be executed
+            // on the specified update container
+            if(!empty($callbacks['complete'])) {
+                $callbacks['complete'] =
+                    $this->_getEffect('complete', $callbacks['complete'], $updateContainer);
+                
+            }
+        }
+
+        if(empty($options['dataType'])) {
+            $options['dataType'] = "html";
+        }
+
+        $requestHandler = $this->_determineRequestHandler($options, 
+            (0 < count($params)) ? true : false);
+
+        $callbackCompleteJs = array();
+        if($updateContainer != false) {
+            if($options['dataType'] == "text") {
+                $callbackCompleteJs[] = sprintf("%s('%s').text(data);", $jqHandler, $updateContainer);
+            } else {
+                $callbackCompleteJs[] = sprintf("%s('%s').html(data);", $jqHandler, $updateContainer);
+            }
+        }
+        if($callbacks['complete'] != null) {
+            $callbackCompleteJs[] = $callbacks['complete'];
+        }
+
+        if(isset($params) && count($params) > 0) {
+            $params = ZendX_JQuery::encodeJson($params);
+        } else {
+            $params = '{}';
+        }
+
+        $js = array();
+        if($callbacks['beforeSend'] != null) {
+            $callbacks['beforesend'] = $this->_getEffect('beforeSend', $callbacks['beforeSend']);
+        }
+
+        switch($requestHandler) {
+            case 'GET':
+                $js[] = sprintf("%s.get('%s', %s, function(data, textStatus) { %s }, '%s');return false;",
+                    $jqHandler, $url, $params, implode(" ", $callbackCompleteJs), $options['dataType']);
+                break;
+            case 'POST':
+                $js[] = sprintf("%s.post('%s', %s, function(data, textStatus) { %s }, '%s');return false;",
+                    $jqHandler, $url, $params, implode(" ", $callbackCompleteJs), $options['dataType']);
+                break;
+        }
+
+        $js = implode($js);
+
+        return $js;
+    }
+
+
+    
+} // end class Request
Index: library/ZendX/JQuery/View/Helper/Request/Link.php
===================================================================
--- library/ZendX/JQuery/View/Helper/Request/Link.php	(revision 0)
+++ library/ZendX/JQuery/View/Helper/Request/Link.php	(revision 0)
@@ -0,0 +1,50 @@
+<?php
+/**
+ * Zend Framework
+ *
+ * LICENSE
+ *
+ * This source file is subject to the new BSD license that is bundled
+ * with this package in the file LICENSE.txt.
+ * It is also available through the world-wide-web at this URL:
+ * http://framework.zend.com/license/new-bsd
+ * If you did not receive a copy of the license and are unable to
+ * obtain it through the world-wide-web, please send an email
+ * to license@zend.com so we can send you a copy immediately. 
+ *
+ * @category    ZendX
+ * @package     JQuery
+ * @subpackage  View_Helper_Request
+ * @copyright  	Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)
+ * @license    	http://framework.zend.com/license   BSD License
+ * @version    	$Id:$
+ * @since      	File available since Release 
+ */
+
+/**
+ * Link
+ * Wrapper for ZendX_JQuery_View_Helper_AjaxLink so changes of ZF-9226
+ * can uphold better namespacing for request objects, without breaking backwards compatibility
+ *
+ * @category    ZendX
+ * @package     JQuery
+ * @subpackage  View_Helper_Request
+ * @copyright  	Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)
+ * @license    	http://framework.zend.com/license   BSD License  
+ * @author      Maghiel Dijksman <mail@mdijksman.nl>
+ * @version     1.0.0 - 22-feb-2010
+ * @since       Class available since Release
+ */
+class ZendX_JQuery_View_Helper_Request_Link 
+{
+    /**
+     * Return new instance of ZendX_JQuery_View_Helper_AjaxLink.
+     * That is also the only thing this class does.
+     *
+     * @return ZendX_JQuery_View_Helper_AjaxLink
+     */
+    public function __construct()
+    {
+        return new ZendX_JQuery_View_Helper_AjaxLink();
+    }
+} // end class Link.php
Index: library/ZendX/JQuery/View/Helper/Request/RequestAbstract.php
===================================================================
--- library/ZendX/JQuery/View/Helper/Request/RequestAbstract.php	(revision 0)
+++ library/ZendX/JQuery/View/Helper/Request/RequestAbstract.php	(revision 0)
@@ -0,0 +1,194 @@
+<?php
+/**
+ * Zend Framework
+ *
+ * LICENSE
+ *
+ * This source file is subject to the new BSD license that is bundled
+ * with this package in the file LICENSE.txt.
+ * It is also available through the world-wide-web at this URL:
+ * http://framework.zend.com/license/new-bsd
+ * If you did not receive a copy of the license and are unable to
+ * obtain it through the world-wide-web, please send an email
+ * to license@zend.com so we can send you a copy immediately. 
+ *
+ * @category    ZendX
+ * @package     JQuery
+ * @subpackage  View_Helper
+ * @copyright  	Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)
+ * @license    	http://framework.zend.com/license   BSD License
+ * @version    	$Id:$ 
+ */
+
+include_once('Zend/View/Helper/HtmlElement');
+
+/**
+ * RequestAbstract
+ * Defines abstraction for JQuery requests through a view helper.
+ * Currently for a large part ZendX_JQuery_View_Helper_AjaxLink has been refactored
+ * into this abstraction
+ *
+ * @category    ZendX
+ * @package     JQuery
+ * @subpackage  View_Helper
+ * @copyright  	Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)
+ * @license    	http://framework.zend.com/license   BSD License  
+ * @author      Maghiel Dijksman <mail@mdijksman.nl>
+ * @version     1.0.0 - 22-feb-2010
+ * @since       ZF-9226
+ */
+abstract class ZendX_JQuery_View_Helper_Request_RequestAbstract
+    extends Zend_View_Helper_HtmlElement
+{
+    protected $_jQuery;
+    protected $_jQHandler = '$';
+
+    /**
+     * Set JQuery view helper and JQuery Handler
+     */
+    public function __construct()
+    {
+        $this->_jQuery = $this->view->jQuery();
+        $this->_jQuery->enable();
+        $this->_jQHandler = ZendX_JQuery_View_Helper_JQuery::getJQueryHandler();
+    }
+
+    abstract public function request($url, array $options = null, array $params = null);
+    
+    /**
+     * Return JS as string which should be executed after or before a JS request
+     *
+     * BeforeSend Callback:
+     * Can include shortcuts as a string assignment to fire of effects before sending of request.
+     * Possible shortcuts are 'fadeOut', 'fadeOutSlow', 'hide', 'hideSlow', 'slideUp', 'flash',
+     * @example $options = array('beforeSend' => 'hideSlow', 'complete' => 'show');
+     *
+     * @param string $callback       Callback type, either beforeSend or complete
+     * @param string $shortcutEffect
+     * @param string $updateContainer   Instance would be b etter but name is enough now :p
+     * @return string
+     * @throws ZendX_JQuery_View_Exception
+     */
+    protected function _getEffect($callback, $shortcutEffect, $updateContainer = null)
+    {
+        switch ($callback)
+        {
+            case 'beforeSend'   :
+                return $this->_getCallbackBeforeSendEffect($shortcutEffect);
+            break;
+            case 'complete'     :
+                return $this->_getCallbackCompleteEffect($shortcutEffect);
+            break;
+            default             :
+                throw new ZendX_JQuery_View_Exception('Unknown callback specified');
+            break;
+        }
+    }
+
+    /**
+     * Determine which request method (GET or POST) should be used.
+     *
+     * Normally the request method is determined implicitly by the rule,
+     * if addiotional params are sent, POST, if not GET. You can overwrite
+     * this behaviour by implicitly setting $options['method'] = "POST|GET";
+     *
+     * @param  Array   $options
+     * @param  Boolean $hasParams
+     * @return String
+     */
+    protected function _determineRequestHandler($options, $hasParams)
+    {
+        if(isset($options['method']) && in_array(strtoupper($options['method']), array('GET', 'POST'))) {
+            return strtoupper($options['method']);
+        }
+        $requestHandler = "GET";
+        if($hasParams == true) {
+            $requestHandler = "POST";
+        }
+        return $requestHandler;
+    }
+
+
+    /**
+     * Return js with shortcut effect based on given shortcut
+     * 
+     * @param string $shortcut
+     */
+    private function _getCallbackCompleteEffect($shortcut, $updateContainer = null)
+    {
+        switch(strtolower($shortcut)) {
+            case 'show':
+               $shortcut = sprintf("%s('%s').show();", $this->_jQHandler, $updateContainer);
+                break;
+            case 'showslow':
+               $shortcut = sprintf("%s('%s').show('slow');", $this->_jQHandler, $updateContainer);
+                break;
+            case 'shownormal':
+               $shortcut = sprintf("%s('%s').show('normal');", $this->_jQHandler, $updateContainer);
+                break;
+            case 'showfast':
+               $shortcut = sprintf("%s('%s').show('fast');", $this->_jQHandler, $updateContainer);
+                break;
+            case 'fadein':
+               $shortcut = sprintf("%s('%s').fadeIn('normal');", $this->_jQHandler, $updateContainer);
+                break;
+            case 'fadeinslow':
+               $shortcut = sprintf("%s('%s').fadeIn('slow');", $this->_jQHandler, $updateContainer);
+                break;
+            case 'fadeinfast':
+               $shortcut = sprintf("%s('%s').fadeIn('fast');", $this->_jQHandler, $updateContainer);
+                break;
+            case 'slidedown':
+               $shortcut = sprintf("%s('%s').slideDown('normal');", $this->_jQHandler, $updateContainer);
+                break;
+            case 'slidedownslow':
+               $shortcut = sprintf("%s('%s').slideDown('slow');", $this->_jQHandler, $updateContainer);
+                break;
+            case 'slidedownfast':
+               $shortcut = sprintf("%s('%s').slideDown('fast');", $this->_jQHandler, $updateContainer);
+                break;
+        }
+
+        return $shortcut;
+    }
+
+    /**
+     * Return callback as string for beforeSend effect
+     *
+     * @param string    $shortcut  Name of the shortcut     
+     * @return string
+     */
+    private function _getCallbackBeforeSendEffect($shortcut)
+    {
+        switch($shortcut) {
+            case 'fadeout':
+                $js[] = sprintf("%s(this).fadeOut();", $this->_jQHandler);
+                break;
+            case 'fadeoutslow':
+                $js[] = sprintf("%s(this).fadeOut('slow');", $this->_jQHandler);
+                break;
+            case 'fadeoutfast':
+                $js[] = sprintf("%s(this).fadeOut('fast');", $this->_jQHandler);
+                break;
+            case 'hide':
+                $js[] = sprintf("%s(this).hide();", $this->_jQHandler);
+                break;
+            case 'hideslow':
+                $js[] = sprintf("%s(this).hide('slow');", $this->_jQHandler);
+                break;
+            case 'hidefast':
+                $js[] = sprintf("%s(this).hide('fast');", $this->_jQHandler);
+                break;
+            case 'slideup':
+                $js[] = sprintf("%s(this).slideUp(1000);", $this->_jQHandler);
+                break;
+            default:
+                $js[] = $callbacks['beforeSend'];
+                break;        
+        }
+            
+        return $js;
+    }
+
+
+} // end class RequestAbstract
