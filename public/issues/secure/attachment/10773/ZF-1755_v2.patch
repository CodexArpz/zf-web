Index: tests/Zend/Gdata/SpreadsheetsOnlineTest.php
===================================================================
--- tests/Zend/Gdata/SpreadsheetsOnlineTest.php	(revision 6234)
+++ tests/Zend/Gdata/SpreadsheetsOnlineTest.php	(working copy)
@@ -228,5 +228,30 @@
         $ssTest = new Zend_Gdata_Spreadsheets($entry->getHttpClient());
         $ssTest->delete($entry);
     }
+    
+    public function testCustomElementsCollected() {
+        $rowData = array();
+        $rowData['a1'] = 'new';
+        $rowData['b1'] = 'row';
+        $rowData['c1'] = 'data';
+        $rowData['d1'] = 'here';
+        $entry = $this->gdata->insertRow($rowData, $this->sprKey);
+        
+        $this->assertEquals(4, count($entry->custom));
+        $this->assertEquals(4, count($entry->customByName));
+        
+        $this->assertEquals('new', $entry->custom[0]->getText());
+        $this->assertEquals('row', $entry->custom[1]->getText());
+        $this->assertEquals('data', $entry->custom[2]->getText());
+        $this->assertEquals('here', $entry->custom[3]->getText());
+        
+        $this->assertEquals('new', $entry->customByName['a1']->getText());
+        $this->assertEquals('row', $entry->customByName['b1']->getText());
+        $this->assertEquals('data', $entry->customByName['c1']->getText());
+        $this->assertEquals('here', $entry->customByName['d1']->getText());
+        
+        $ssTest = new Zend_Gdata_Spreadsheets($entry->getHttpClient());
+        $ssTest->delete($entry);
+    }
 
 }
Index: tests/Zend/Gdata/Spreadsheets/ListEntryTest.php
===================================================================
--- tests/Zend/Gdata/Spreadsheets/ListEntryTest.php	(revision 6234)
+++ tests/Zend/Gdata/Spreadsheets/ListEntryTest.php	(working copy)
@@ -32,22 +32,25 @@
     public function setUp()
     {
         $this->listEntry = new Zend_Gdata_Spreadsheets_ListEntry();
+        $this->rowData = array();
+        $this->rowData[] = new Zend_Gdata_Spreadsheets_Extension_Custom(
+            'column_1', 'value 1');
+        $this->rowData[] = new Zend_Gdata_Spreadsheets_Extension_Custom(
+            'column_2', 'value 2');
     }
 
     public function testToAndFromString()
-    {
-        $rowData = array();
-        $rowData[] = new Zend_Gdata_Spreadsheets_Extension_Custom('column_1', 'value 1');
-        $rowData[] = new Zend_Gdata_Spreadsheets_Extension_Custom('column_2', 'value 2');
-        
-        $this->listEntry->setCustom($rowData);
+    {        
+        $this->listEntry->setCustom($this->rowData);
         $rowDataOut = $this->listEntry->getCustom();
         
-        $this->assertTrue(count($rowDataOut) == 2);
-        $this->assertTrue($rowDataOut[0]->getText() == 'value 1');
-        $this->assertTrue($rowDataOut[0]->getColumnName() == 'column_1');
-        $this->assertTrue($rowDataOut[1]->getText() == 'value 2');
-        $this->assertTrue($rowDataOut[1]->getColumnName() == 'column_2');
+        $this->assertEquals(count($this->rowData), count($rowDataOut));
+        for ($i = 0; $i < count($this->rowData); $i++) {
+        $this->assertEquals($this->rowData[$i]->getText(),
+             $rowDataOut[$i]->getText());
+        $this->assertEquals($this->rowData[$i]->getColumnName(),
+            $rowDataOut[$i]->getColumnName());
+        }
         
         $newListEntry = new Zend_Gdata_Spreadsheets_ListEntry();
         $doc = new DOMDocument();
@@ -55,13 +58,162 @@
         $newListEntry->transferFromDom($doc->documentElement);
         $rowDataFromXML = $newListEntry->getCustom();
         
-        $this->assertTrue(count($rowDataFromXML) == 2);
-        $this->assertTrue($rowDataFromXML[0]->getText() == 'value 1');
-        $this->assertTrue($rowDataFromXML[0]->getColumnName() == 'column_1');
-        $this->assertTrue($rowDataFromXML[1]->getText() == 'value 2');
-        $this->assertTrue($rowDataFromXML[1]->getColumnName() == 'column_2');
+        $this->assertEquals(count($this->rowData), count($rowDataFromXML));
+        for ($i = 0; $i < count($this->rowData); $i++) {
+        $this->assertEquals($this->rowData[$i]->getText(),
+             $rowDataFromXML[$i]->getText());
+        $this->assertEquals($this->rowData[$i]->getColumnName(),
+            $rowDataFromXML[$i]->getColumnName());
+        }
+    }
+
+    public function testCustomElementOrderingPreserved()
+    {   
+        $this->listEntry->setCustom($this->rowData);
         
- 
+        $this->assertEquals(count($this->rowData),
+            count($this->listEntry->getCustom()));
+        $this->assertEquals(count($this->listEntry->getCustom()),
+            count($this->listEntry->getCustomByName()));
+        for ($i = 0; $i < count($this->rowData); $i++) {
+            $this->assertEquals($this->rowData[$i],
+                $this->listEntry->custom[$i]);
+        }
     }
 
+    public function testCustomElementsCanBeRetrievedByName()
+    {
+        $this->listEntry->setCustom($this->rowData);
+        
+        $this->assertEquals(count($this->rowData),
+            count($this->listEntry->getCustom()));
+        $this->assertEquals(count($this->listEntry->getCustom()),
+            count($this->listEntry->getCustomByName()));
+        for ($i = 0; $i < count($this->rowData); $i++) {
+            $this->assertEquals($this->rowData[$i],
+                $this->listEntry->getCustomByName(
+                    $this->rowData[$i]->getColumnName()));
+        }
+    }
+    
+    public function testCustomElementsCanBeRetrievedByNameUsingArrayNotation()
+    {
+        $this->listEntry->setCustom($this->rowData);
+
+        $this->assertEquals(count($this->rowData),
+            count($this->listEntry->getCustom()));
+        $this->assertEquals(count($this->listEntry->getCustom()),
+            count($this->listEntry->getCustomByName()));
+        for ($i = 0; $i < count($this->rowData); $i++) {
+            $this->assertEquals($this->rowData[$i],
+                $this->listEntry->getCustomByName(
+                    $this->rowData[$i]->getColumnName()));
+        }
+    }
+    
+    public function testCanAddIndividualCustomElements()
+    {
+        for ($i = 0; $i < count($this->rowData); $i++) {
+            $this->listEntry->addCustom($this->rowData[$i]);
+        }
+        
+        $this->assertEquals(count($this->rowData),
+            count($this->listEntry->getCustom()));
+        $this->assertEquals(count($this->listEntry->getCustom()),
+            count($this->listEntry->getCustomByName()));
+        for ($i = 0; $i < count($this->rowData); $i++) {
+            $this->assertEquals($this->rowData[$i],
+                $this->listEntry->custom[$i]);
+        }
+    }
+    
+    public function testRetrievingNonexistantCustomElementReturnsNull()
+    {
+        $this->assertNull($this->listEntry->getCustomByName('nonexistant'));
+    }
+    
+    public function testCanReplaceAllCustomElements()
+    {
+        $this->listEntry->setCustom($this->rowData);
+        $this->assertEquals(count($this->rowData),
+            count($this->listEntry->getCustom()));
+        $this->assertEquals(count($this->listEntry->getCustom()),
+            count($this->listEntry->getCustomByName()));
+        $this->listEntry->setCustom(array());
+        $this->assertEquals(0, count($this->listEntry->getCustom()));
+    }
+    
+    public function testCanDeleteCustomElementById()
+    {
+        $this->listEntry->setCustom($this->rowData);
+        $this->assertEquals(count($this->rowData),
+            count($this->listEntry->getCustom()));
+        $this->assertEquals(count($this->listEntry->getCustom()),
+            count($this->listEntry->getCustomByName()));
+        $this->assertEquals($this->rowData[0], $this->listEntry->custom[0]);
+        
+        $this->listEntry->removeCustom(0);
+        $this->assertEquals(count($this->rowData) - 1,
+            count($this->listEntry->getCustom()));
+        $this->assertEquals(count($this->listEntry->getCustom()),
+            count($this->listEntry->getCustomByName()));
+        $this->assertEquals($this->rowData[1], $this->listEntry->custom[0]);
+    }
+    
+    public function testCanDeleteCustomElementByName()
+    {
+        $this->listEntry->setCustom($this->rowData);
+        $this->assertEquals(count($this->rowData),
+            count($this->listEntry->getCustom()));
+        $this->assertEquals(count($this->listEntry->getCustom()),
+            count($this->listEntry->getCustomByName()));
+        $this->assertEquals($this->rowData[0],
+            $this->listEntry->getCustomByName(
+                $this->rowData[0]->getColumnName()));
+        
+        $this->listEntry->removeCustomByName('column_1');
+        $this->assertEquals(count($this->rowData) - 1,
+            count($this->listEntry->getCustom()));
+        $this->assertEquals(count($this->listEntry->getCustom()),
+            count($this->listEntry->getCustomByName()));
+        $this->assertNull($this->listEntry->getCustomByName(
+            $this->rowData[0]->getColumnName()));
+    }
+    
+    public function testDeletingNonexistantElementByIdThrowsException()
+    {
+        $this->listEntry->setCustom($this->rowData);
+        $this->assertEquals(count($this->rowData),
+            count($this->listEntry->getCustom()));
+        $this->assertEquals(count($this->listEntry->getCustom()),
+            count($this->listEntry->getCustomByName()));
+        
+        $exceptionCaught = false;
+        try {
+            $this->listEntry->removeCustom(9999);
+        } catch (Zend_Gdata_App_InvalidArgumentException $e) {
+            $exceptionCaught = true;
+            $this->assertEquals('Element does not exist.', $e->getMessage());
+        }
+        $this->assertTrue($exceptionCaught);
+    }
+    
+    public function testDeletingNonexistantElementByNameThrowsException()
+    {
+        $this->listEntry->setCustom($this->rowData);
+        $this->assertEquals(count($this->rowData),
+            count($this->listEntry->getCustom()));
+        $this->assertEquals(count($this->listEntry->getCustom()),
+            count($this->listEntry->getCustomByName()));
+        
+        $exceptionCaught = false;
+        try {
+            $this->listEntry->removeCustomByName('nonexistant');
+        } catch (Zend_Gdata_App_InvalidArgumentException $e) {
+            $exceptionCaught = true;
+            $this->assertEquals('Element does not exist.', $e->getMessage());
+        }
+        $this->assertTrue($exceptionCaught);
+    }
+
 }
Index: library/Zend/Gdata/Spreadsheets.php
===================================================================
--- library/Zend/Gdata/Spreadsheets.php	(revision 6234)
+++ library/Zend/Gdata/Spreadsheets.php	(working copy)
@@ -304,9 +304,8 @@
         {
             $newCustom = new Zend_Gdata_Spreadsheets_Extension_Custom();
             $newCustom->setText($v)->setColumnName($k);
-            $newCustomArr[] = $newCustom;
+            $newEntry->addCustom($newCustom);
         }
-        $newEntry->setCustom($newCustomArr);
 
         $query = new Zend_Gdata_Spreadsheets_ListQuery();
         $query->setSpreadsheetKey($key);
Index: library/Zend/Gdata/Spreadsheets/ListEntry.php
===================================================================
--- library/Zend/Gdata/Spreadsheets/ListEntry.php	(revision 6234)
+++ library/Zend/Gdata/Spreadsheets/ListEntry.php	(working copy)
@@ -42,7 +42,19 @@
 
     protected $_entryClassName = 'Zend_Gdata_Spreadsheets_ListEntry';
 
+    /**
+     * List of custom row elements (Zend_Gdata_Spreadsheets_Extension_Custom),
+     * indexed by order added to this entry.
+     * @var array
+     */
     protected $_custom = array();
+    
+    /**
+     * List of custom row elements (Zend_Gdata_Spreadsheets_Extension_Custom),
+     * indexed by element name.
+     * @var array
+     */
+    protected $_customByName = array();
 
     /**
      * Constructs a new Zend_Gdata_Spreadsheets_ListEntry object.
@@ -73,7 +85,7 @@
         case $this->lookupNamespace('gsx');
             $custom = new Zend_Gdata_Spreadsheets_Extension_Custom($child->localName);
             $custom->transferFromDOM($child);
-            $this->_custom[] = $custom;
+            $this->addCustom($custom);
             break;
         default:
             parent::takeChildFromDOM($child);
@@ -91,13 +103,105 @@
     }
 
     /**
-     * Sets the row elements contained by this list entry.
-     * @param array $custom The custom row elements to be contained in this list entry
+     * Gets a single row element contained by this list entry using its name.
+     * @param string $name The name of a custom element to return. If null
+     *          or not defined, an array containing all custom elements
+     *          indexed by name will be returned.
+     * @return mixed If a name is specified, the
+     *          Zend_Gdata_Spreadsheets_Extension_Custom element requested,
+     *          is returned or null if not found. Otherwise, an array of all
+     *          Zend_Gdata_Spreadsheets_Extension_Custom elements is returned
+     *          indexed by name.
      */
+    public function getCustomByName($name = null)
+    {
+        if ($name === null) {
+            return $this->_customByName;
+        } else {
+            if (array_key_exists($name, $this->customByName)) {
+                return $this->_customByName[$name];
+            } else {
+                return null;
+            }
+        }
+    }
+
+    /**
+     * Sets the row elements contained by this list entry. If any 
+     * custom row elements were previously stored, they will be overwritten.
+     * @param array $custom The custom row elements to be contained in this
+     *          list entry.
+     * @return Zend_Gdata_Spreadsheets_ListEntry Provides a fluent interface.
+     */
     public function setCustom($custom)
     {
-        $this->_custom = $custom;
+        $this->_custom = array();
+        foreach ($custom as $c) {
+            $this->addCustom($c);
+        }
         return $this;
     }
 
+    /**
+     * Add an individual custom row element to this list entry.
+     * @param Zend_Gdata_Spreadsheets_Extension_Custom $custom The custom
+     *             element to be added.
+     * @return Zend_Gdata_Spreadsheets_ListEntry Provides a fluent interface.
+     */
+    public function addCustom($custom)
+    {
+        $this->_custom[] = $custom;
+        $this->_customByName[$custom->getColumnName()] = $custom;
+        return $this;
+    }
+
+    /**
+     * Remove an individual row element from this list entry by index. This
+     * will cause the array to be re-indexed.
+     * @param int $index The index of the custom element to be deleted.
+     * @return Zend_Gdata_Spreadsheets_ListEntry Provides a fluent interface.
+     * @throws Zend_Gdata_App_InvalidArgumentException
+     */
+    public function removeCustom($index)
+    {
+        if (array_key_exists($index, $this->_custom)) {
+            $element = $this->_custom[$index];
+            // Remove element
+            unset($this->_custom[$index]);
+            // Re-index the array
+            $this->_custom = array_values($this->_custom);
+            // Be sure to delete form both arrays!
+            $key = array_search($element, $this->_customByName);
+            unset($this->_customByName[$key]);
+        } else {
+            require_once 'Zend/Gdata/App/InvalidArgumentException.php';
+            throw new Zend_Gdata_App_InvalidArgumentException(
+                'Element does not exist.');
+        }
+        return $this;
+    }
+
+    /**
+     * Remove an individual row element from this list entry by name.
+     * @param string $name The name of the custom element to be deleted.
+     * @return Zend_Gdata_Spreadsheets_ListEntry Provides a fluent interface.
+     * @throws Zend_Gdata_App_InvalidArgumentException
+     */
+    public function removeCustomByName($name)
+    {
+        if (array_key_exists($name, $this->_customByName)) {
+            $element = $this->_customByName[$name];
+            // Remove element
+            unset($this->_customByName[$name]);
+            // Be sure to delete from both arrays!
+            $key = array_search($element, $this->_custom);
+            unset($this->_custom[$key]);
+        } else {
+            require_once 'Zend/Gdata/App/InvalidArgumentException.php';
+            throw new Zend_Gdata_App_InvalidArgumentException(
+                'Element does not exist.');
+        }
+        return $this;
+    }
+
 }
Index: documentation/manual/en/module_specs/Zend_Gdata_Spreadsheets.xml
===================================================================
--- documentation/manual/en/module_specs/Zend_Gdata_Spreadsheets.xml	(revision 6234)
+++ documentation/manual/en/module_specs/Zend_Gdata_Spreadsheets.xml	(working copy)
@@ -142,8 +142,8 @@
 
             <para>
               Each <code>Zend_Gdata_Spreadsheets_ListEntry</code> contains an
-              array, <code>custom</code>, which contains the data for that row.
-              You can extract and display this array:
+              array, <code>custom</code>, which contains the data for that
+              row. You can extract and display this array:
             </para>
 
             <programlisting role="php"><![CDATA[<?php
@@ -152,6 +152,17 @@
   echo $customEntry->getColumnName() . " = " . $customEntry->getText();
 }]]>
             </programlisting>
+            
+            <para>
+              An alternate version of this array, <code>customByName</code>,
+              allows direct access to an entry's cells by name. This is
+              convenient when trying to access a specific header:
+            </para>
+            
+            <programlisting role="php"><![CDATA[<?php
+$customEntry = $listFeed->entries[1]->getCustomByName('my_heading');
+echo $customEntry->getColumnName() . " = " . $customEntry->getText();]]>
+            </programlisting>
         </sect3>
 
         <sect3 id="zend.gdata.spreadsheets.listfeeds.reverse">
