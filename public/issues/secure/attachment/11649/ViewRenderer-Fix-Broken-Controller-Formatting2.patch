Index: Controller/Dispatcher/Interface.php
===================================================================
--- Controller/Dispatcher/Interface.php	(revision 31238)
+++ Controller/Dispatcher/Interface.php	(revision 31290)
@@ -48,6 +48,17 @@
     public function formatControllerName($unformatted);
 
     /**
+     * Formats a string into a controller name used for view scripts.  This is used
+     * to take a raw controller name, such as one stored inside a Zend_Controller_Request_Abstract
+     * object, and reformat it to a proper name that could be used for further maniplation.
+     * e.g. to create a folder name for view scripts.
+     *
+     * @param string $unformatted
+     * @return string
+     */
+    public function formatControllerNameForManipulation($unformatted);
+
+    /**
      * Formats a string into an action name.  This is used to take a raw
      * action name, such as one that would be packaged inside a request
      * object, and reformat into a proper method name that would be found
Index: Controller/Dispatcher/Abstract.php
===================================================================
--- Controller/Dispatcher/Abstract.php	(revision 31238)
+++ Controller/Dispatcher/Abstract.php	(revision 31290)
@@ -101,10 +101,24 @@
      */
     public function formatControllerName($unformatted)
     {
-        return ucfirst($this->_formatName($unformatted)) . 'Controller';
+        return $this->formatControllerNameForManipulation($unformatted) . 'Controller';
     }
 
     /**
+     * Formats a string into a controller name used for view scripts.  This is used
+     * to take a raw controller name, such as one stored inside a Zend_Controller_Request_Abstract
+     * object, and reformat it to a proper name that could be used for further maniplation.
+     * e.g. to create a folder name for view scripts.
+     *
+     * @param string $unformatted
+     * @return string
+     */
+    public function formatControllerNameForManipulation($unformatted)
+    {
+        return ucfirst($this->_formatName($unformatted));
+    }
+
+    /**
      * Formats a string into an action name.  This is used to take a raw
      * action name, such as one that would be stored inside a Zend_Controller_Request_Abstract
      * object, and reformat into a proper method name that would be found
Index: Controller/Action/Helper/ViewRenderer.php
===================================================================
--- Controller/Action/Helper/ViewRenderer.php	(revision 31238)
+++ Controller/Action/Helper/ViewRenderer.php	(revision 31290)
@@ -391,7 +391,7 @@
 
         $parts = array(
             'module'     => (($moduleName = $request->getModuleName()) != '') ? $dispatcher->formatModuleName($moduleName) : $moduleName,
-            'controller' => substr($dispatcher->formatControllerName($request->getControllerName()), 0, -10),
+            'controller' => $dispatcher->formatControllerNameForManipulation($request->getControllerName()),
             'action'     => $dispatcher->formatActionName($request->getActionName())
             );
 
@@ -844,7 +844,7 @@
         $request    = $this->getRequest();
         $dispatcher = $this->_frontController->getDispatcher();
         $module     = $dispatcher->formatModuleName($request->getModuleName());
-        $controller = substr($dispatcher->formatControllerName($request->getControllerName()), 0, -10);
+        $controller = $dispatcher->formatControllerNameForManipulation($request->getControllerName());
         $action     = $dispatcher->formatActionName($request->getActionName());
 
         $params     = compact('module', 'controller', 'action');
