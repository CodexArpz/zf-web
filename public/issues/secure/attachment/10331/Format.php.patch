Index: Format.php
===================================================================
--- Format.php	(revision 3987)
+++ Format.php	(working copy)
@@ -282,31 +282,47 @@
         $format  = Zend_Locale_Data::getContent($options['locale'], 'decimalnumberformat');
         $format  = $format['default'];
 
-        // seperate negative format pattern when avaiable 
-        if (iconv_strpos($format, ';') !== false) {
-            if (call_user_func(Zend_Locale_Math::$comp, $value, 0) < 0) {
-                $format = iconv_substr($format, iconv_strpos($format, ';') + 1);
-            } else {
-                $format = iconv_substr($format, 0, iconv_strpos($format, ';'));
-            }
+        $savedLocale = setlocale(LC_NUMERIC, '0');
+        if ($savedLocale != 'C') {
+            setlocale(LC_NUMERIC, 'C');
         }
 
-        if (is_int($options['precision'])) {
-            $rest   = substr(substr($format, strpos($format, '.') + 1), -1, 1);
-            $format = substr($format, 0, strpos($format, '.'));
-            if ((int) $options['precision'] > 0) {
-                $format .= ".";
-                $format = str_pad($format, strlen($format) + $options['precision'], "0");
-                $value = round($value, $options['precision']);
+        $exception = null;
+        try {
+            // seperate negative format pattern when available 
+            if (iconv_strpos($format, ';') !== false) {
+                if (call_user_func(Zend_Locale_Math::$comp, $value, 0) < 0) {
+                    $format = iconv_substr($format, iconv_strpos($format, ';') + 1);
+                } else {
+                    $format = iconv_substr($format, 0, iconv_strpos($format, ';'));
+                }
             }
-            if (($rest != '0') and ($rest != '#')) {
-                $format .= $rest;
+    
+            if (is_int($options['precision'])) {
+                $rest   = substr(substr($format, strpos($format, '.') + 1), -1, 1);
+                $format = substr($format, 0, strpos($format, '.'));
+                if ((int) $options['precision'] > 0) {
+                    $format .= ".";
+                    $format = str_pad($format, strlen($format) + $options['precision'], "0");
+                    $value = Zend_Locale_Math::round($value, $options['precision']);
+                }
+                if (($rest != '0') and ($rest != '#')) {
+                    $format .= $rest;
+                }
+                if ($options['precision'] == -1) {
+                    $value = Zend_Locale_Math::round($value, 0);
+                }
             }
-            if ($options['precision'] == -1) {
-                $value = round($value, 0);
-            }
+        } catch (Exception $exception) {
         }
 
+        // finally block
+        if ($savedLocale != 'C') {
+            setlocale(LC_NUMERIC, $savedLocale);
+        }
+        if ($exception) {
+            throw $exception; // rethrow
+        }
         $options['number_format'] = $format;
         return self::toNumberFormat($value, $options);
     }
@@ -333,128 +349,143 @@
         $symbols = Zend_Locale_Data::getContent($options['locale'], 'numbersymbols');
         iconv_set_encoding('internal_encoding', 'UTF-8');
 
-        // Get format
-        $format = $options['number_format'];
-        if ($format === null) {
-            $format  = Zend_Locale_Data::getContent($options['locale'], 'decimalnumberformat');
-            $format  = $format['default'];
-            $options['precision'] = null;
-        } else {
-            if (strpos($format, '.')) {
-                $options['precision'] = substr($format, strpos($format, '.') + 1);
-                if (is_numeric($options['precision'])) {
-                    $options['precision'] = strlen($options['precision']);
-                    $format = substr($format, 0, strpos($format, '.') + 1);
-                    $format .= '###';
-                    $value = round($value, $options['precision']);
+        $savedLocale = setlocale(LC_NUMERIC, '0');
+        if ($savedLocale != 'C') {
+            setlocale(LC_NUMERIC, 'C');
+        }
+        $exception = null;
+        try {
+            // Get format
+            $format = $options['number_format'];
+            if ($format === null) {
+                $format  = Zend_Locale_Data::getContent($options['locale'], 'decimalnumberformat');
+                $format  = $format['default'];
+                $options['precision'] = null;
+            } else {
+                if (strpos($format, '.')) {
+                    $options['precision'] = substr($format, strpos($format, '.') + 1);
+                    if (is_numeric($options['precision'])) {
+                        $options['precision'] = strlen($options['precision']);
+                        $format = substr($format, 0, strpos($format, '.') + 1);
+                        $format .= '###';
+                        $value = Zend_Locale_Math::round($value, $options['precision']);
+                    } else {
+                        $options['precision'] = null;
+                    }
                 } else {
-                    $options['precision'] = null;
+                    $value = Zend_Locale_Math::round($value, 0);
+                    $options['precision'] = 0;
                 }
-            } else {
-                $value = round($value, 0);
-                $options['precision'] = 0;
             }
-        }
-
-        // seperate negative format pattern when avaiable 
-        if (iconv_strpos($format, ';') !== false) {
+    
+            // seperate negative format pattern when avaiable 
+            if (iconv_strpos($format, ';') !== false) {
+                if (call_user_func(Zend_Locale_Math::$comp, $value, 0) < 0) {
+                    $format = iconv_substr($format, iconv_strpos($format, ';') + 1);
+                } else {
+                    $format = iconv_substr($format, 0, iconv_strpos($format, ';'));
+                }
+            }
+    
+            // set negative sign
             if (call_user_func(Zend_Locale_Math::$comp, $value, 0) < 0) {
-                $format = iconv_substr($format, iconv_strpos($format, ';') + 1);
-            } else {
-                $format = iconv_substr($format, 0, iconv_strpos($format, ';'));
+                if (iconv_strpos($format, '-') === false) {
+                    $format = $symbols['minus'] . $format;
+                } else {
+                    $format = str_replace('-', $symbols['minus'], $format);
+                }
             }
-        }
-
-        // set negative sign
-        if (call_user_func(Zend_Locale_Math::$comp, $value, 0) < 0) {
-            if (iconv_strpos($format, '-') === false) {
-                $format = $symbols['minus'] . $format;
+    
+            // get number parts
+            if (strlen($value) != strlen(Zend_Locale_Math::round($value, 0))) {
+                if ($options['precision'] === null) {
+                    $precstr = iconv_substr($value, strlen(Zend_Locale_Math::round($value, 0)) + 1);
+                } else {
+                    $precstr = iconv_substr($value, strlen(Zend_Locale_Math::round($value, 0)) + 1, $options['precision']);
+                    if (iconv_strlen($precstr) < $options['precision']) {
+                        $precstr = $precstr . str_pad("0", ($options['precision'] - iconv_strlen($precstr)), "0");
+                    }
+                }
             } else {
-                $format = str_replace('-', $symbols['minus'], $format);
+                if ($options['precision'] > 0) {
+                    $precstr = str_pad("0", ($options['precision']), "0");
+                }
             }
-        }
-
-        // get number parts
-        if (strlen($value) != strlen(round($value, 0))) {
             if ($options['precision'] === null) {
-                $precstr = iconv_substr($value, strlen(round($value, 0)) + 1);
-            } else {
-                $precstr = iconv_substr($value, strlen(round($value, 0)) + 1, $options['precision']);
-                if (iconv_strlen($precstr) < $options['precision']) {
-                    $precstr = $precstr . str_pad("0", ($options['precision'] - iconv_strlen($precstr)), "0");
+                if (isset($precstr)) {
+                    $options['precision'] = iconv_strlen($precstr);
+                } else {
+                    $options['precision'] = 0;
                 }
             }
-        } else {
-            if ($options['precision'] > 0) {
-                $precstr = str_pad("0", ($options['precision']), "0");
+    
+            // get fraction and format lengths
+            $preg = call_user_func(Zend_Locale_Math::$sub, $value, '0', 0);
+            $prec = call_user_func(Zend_Locale_Math::$sub, $value, $preg, $options['precision']);
+            if (iconv_strpos($prec, '-') !== false) {
+                $prec = iconv_substr($prec, 1);
             }
-        }
-        if ($options['precision'] === null) {
-            if (isset($precstr)) {
-                $options['precision'] = iconv_strlen($precstr);
+            $number = call_user_func(Zend_Locale_Math::$sub, $value, 0, 0);
+            if (iconv_strpos($number, '-') !== false) {
+                $number = iconv_substr($number, 1);
+            }
+            $group  = iconv_strrpos($format, ',');
+            $group2 = iconv_strpos ($format, ',');
+            $point  = iconv_strpos ($format, '0');
+            // Add fraction
+            if ($options['precision'] == '0') {
+                $format = iconv_substr($format, 0, $point) . iconv_substr($format, iconv_strrpos($format, '#') + 2);
             } else {
-                $options['precision'] = 0;
+                $format = iconv_substr($format, 0, $point) . $symbols['decimal']
+                                   . iconv_substr($prec, 2) . iconv_substr($format, iconv_strrpos($format, '#') + 1);
             }
-        }
-
-        // get fraction and format lengths
-        $preg = call_user_func(Zend_Locale_Math::$sub, $value, '0', 0);
-        $prec = call_user_func(Zend_Locale_Math::$sub, $value, $preg, $options['precision']);
-        if (iconv_strpos($prec, '-') !== false) {
-            $prec = iconv_substr($prec, 1);
-        }
-        $number = call_user_func(Zend_Locale_Math::$sub, $value, 0, 0);
-        if (iconv_strpos($number, '-') !== false) {
-            $number = iconv_substr($number, 1);
-        }
-        $group  = iconv_strrpos($format, ',');
-        $group2 = iconv_strpos ($format, ',');
-        $point  = iconv_strpos ($format, '0');
-        // Add fraction
-        if ($options['precision'] == '0') {
-            $format = iconv_substr($format, 0, $point) . iconv_substr($format, iconv_strrpos($format, '#') + 2);
-        } else {
-            $format = iconv_substr($format, 0, $point) . $symbols['decimal']
-                               . iconv_substr($prec, 2) . iconv_substr($format, iconv_strrpos($format, '#') + 1);
-        }
-        // Add seperation
-        if ($group == 0) {
-            // no seperation
-            $format = $number . iconv_substr($format, $point);
-
-        } else if ($group == $group2) {
-            // only 1 seperation
-            $seperation = ($point - $group);
-            for ($x = iconv_strlen($number); $x > $seperation; $x -= $seperation) {
-                if (iconv_substr($number, 0, $x - $seperation) !== "") {
-                    $number = iconv_substr($number, 0, $x - $seperation) . $symbols['group']
-                             . iconv_substr($number, $x - $seperation);
-                }
-            }
-            $format = iconv_substr($format, 0, iconv_strpos($format, '#')) . $number . iconv_substr($format, $point);
-
-        } else {
-
-            // 2 seperations
-            if (iconv_strlen($number) > ($point - $group)) { 
+            // Add seperation
+            if ($group == 0) {
+                // no seperation
+                $format = $number . iconv_substr($format, $point);
+    
+            } else if ($group == $group2) {
+                // only 1 seperation
                 $seperation = ($point - $group);
-                $number = iconv_substr($number, 0, iconv_strlen($number) - $seperation) . $symbols['group']
-                        . iconv_substr($number, iconv_strlen($number) - $seperation);
-
-                if ((iconv_strlen($number) - 1) > ($point - $group + 1)) {
-                    $seperation2 = ($group - $group2 - 1);
-                    
-                    for ($x = iconv_strlen($number) - $seperation2 - 2; $x > $seperation2; $x -= $seperation2) {
-                         $number = iconv_substr($number, 0, $x - $seperation2) . $symbols['group']
-                                 . iconv_substr($number, $x - $seperation2);
+                for ($x = iconv_strlen($number); $x > $seperation; $x -= $seperation) {
+                    if (iconv_substr($number, 0, $x - $seperation) !== "") {
+                        $number = iconv_substr($number, 0, $x - $seperation) . $symbols['group']
+                                 . iconv_substr($number, $x - $seperation);
                     }
                 }
-
+                $format = iconv_substr($format, 0, iconv_strpos($format, '#')) . $number . iconv_substr($format, $point);
+    
+            } else {
+    
+                // 2 seperations
+                if (iconv_strlen($number) > ($point - $group)) { 
+                    $seperation = ($point - $group);
+                    $number = iconv_substr($number, 0, iconv_strlen($number) - $seperation) . $symbols['group']
+                            . iconv_substr($number, iconv_strlen($number) - $seperation);
+    
+                    if ((iconv_strlen($number) - 1) > ($point - $group + 1)) {
+                        $seperation2 = ($group - $group2 - 1);
+                        
+                        for ($x = iconv_strlen($number) - $seperation2 - 2; $x > $seperation2; $x -= $seperation2) {
+                             $number = iconv_substr($number, 0, $x - $seperation2) . $symbols['group']
+                                     . iconv_substr($number, $x - $seperation2);
+                        }
+                    }
+    
+                }
+                $format = iconv_substr($format, 0, iconv_strpos($format, '#')) . $number . iconv_substr($format, $point);
+    
             }
-            $format = iconv_substr($format, 0, iconv_strpos($format, '#')) . $number . iconv_substr($format, $point);
+        } catch (Exception $exception) {
+        }
 
+        // finally block
+        if ($savedLocale != 'C') {
+            setlocale(LC_NUMERIC, $savedLocale);
         }
-
+        if ($exception) {
+            throw $exception; // rethrow
+        }
         return (string) $format;        
     }
 
