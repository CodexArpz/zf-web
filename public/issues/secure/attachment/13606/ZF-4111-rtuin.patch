Index: tests/Zend/Validate/InArrayTest.php
===================================================================
--- tests/Zend/Validate/InArrayTest.php	(revision 23521)
+++ tests/Zend/Validate/InArrayTest.php	(revision )
@@ -195,4 +195,22 @@
         $validator->setRecursive(true);
         $this->assertTrue($validator->isValid('A'));
     }
+
+    /**
+     * @group ZF-4111
+     */
+    public function testMultiInput()
+    {
+        $haystack   = array( 'http://localhost/feed1', 'http://localhost/feed2');
+        $value      = array( 'http://localhost/feed1', 'http://localhost/feed2');
+        $value2     = array( 'http://localhost/feed1', 'http://localhost/feed3');
+        $validator  = new Zend_Validate_InArray($haystack);
+
+        $this->assertTrue($validator->isValid($value));
+        $this->assertFalse($validator->isValid($value2));
+        
+        $validator->setRecursive(true);
+        $this->assertTrue($validator->isValid($value));
+        $this->assertFalse($validator->isValid($value2));
-}
+    }
+}
Index: library/Zend/Validate/InArray.php
===================================================================
--- library/Zend/Validate/InArray.php	(revision 20352)
+++ library/Zend/Validate/InArray.php	(revision )
@@ -183,16 +183,46 @@
         $this->_setValue($value);
         if ($this->getRecursive()) {
             $iterator = new RecursiveIteratorIterator(new RecursiveArrayIterator($this->_haystack));
+
+            if (is_array($value)) {
+                $validCounter = 0;
-            foreach($iterator as $element) {
+                foreach ($iterator as $element) {
+                    foreach ($value as $item) {
-                if ($this->_strict) {
+                        if ($this->_strict) {
+
+                            if ($element === $item) {
+                                $validCounter++;
+                            }
+                        }
+                        else if ($element == $item) {
+                            $validCounter++;
+                        }
+                    }
+                }
+                return $validCounter === count($value);
+            }
+            else {
+                foreach ($iterator as $element) {
+                    if ($this->_strict) {
-                    if ($element === $value) {
-                        return true;
-                    }
-                } else if ($element == $value) {
-                    return true;
-                }
-            }
+                        if ($element === $value) {
+                            return true;
+                        }
+                    } else if ($element == $value) {
+                        return true;
+                    }
+                }
+            }
         } else {
+            if(is_array($value)) {
+                $validCounter = 0;
+                foreach ($value as $item) {
+                    if (in_array($item, $this->_haystack, $this->_strict)) {
+                        $validCounter++;
+                    }
+                }
+                return $validCounter === count($value);
+            }
+
             if (in_array($value, $this->_haystack, $this->_strict)) {
                 return true;
             }
