<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">Blog Entries - ZF Blog</title>
  <updated>2016-01-28T16:00:00+00:00</updated>
  <generator uri="http://framework.zend.com" version="2">Zend_Feed_Writer</generator>
  <link rel="alternate" type="text/html" href="http://framework.zend.com/blog.html"/>
  <link rel="self" type="application/atom+xml" href="http://framework.zend.com/blog-atom.xml"/>
  <id>http://framework.zend.com/blog.html</id>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Expressive 1.0.0 STABLE Released!]]></title>
    <published>2016-01-28T16:00:00+00:00</published>
    <updated>2016-01-28T16:00:00+00:00</updated>
    <link rel="alternate" type="text/html" href="http://framework.zend.com/blog/2016-01-28-expressive-1.0-stable.html"/>
    <id>http://framework.zend.com/blog/2016-01-28-expressive-1.0-stable.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>matthew@zend.com</email>
      <uri>http://mwop.net/</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>The Zend Framework community is pleased to announce the
immediate availability of <xhtml:a href="https://zendframework.github.io/zend-expressive/">Expressive</xhtml:a>
1.0.0 STABLE!</xhtml:p>
<xhtml:p>You can install it using <xhtml:a href="https://getcomposer.org">Composer</xhtml:a>, via the
<xhtml:code>create-project</xhtml:code> command:</xhtml:p>
<xhtml:pre>
<xhtml:code class="language-bash">$ composer create-project zendframework/zend-expressive-skeleton expressive
</xhtml:code>
</xhtml:pre>
<xhtml:p>If you were using a release candidate, you can update your
existing applications using:</xhtml:p>
<xhtml:pre>
<xhtml:code class="language-bash">$ composer require "zendframework/zend-expressive:^1.0"
</xhtml:code>
</xhtml:pre>
<xhtml:h2>What's new in the stable version?</xhtml:h2>
<xhtml:p>Nothing!</xhtml:p>
<xhtml:p>Well, not "nothing". Since last week, we merged a few
documentation fixes, but, more importantly, finalized our
documentation. This included a few changes:</xhtml:p>
<xhtml:ul>
<xhtml:li>Some re-organization, to better categorize the documentation
hierarchy.</xhtml:li>
<xhtml:li>Switching from <xhtml:a href="http://bookdown.io">bookdown</xhtml:a> to
<xhtml:a href="http://www.mkdocs.org">MkDocs</xhtml:a> as our build engine of
choice. We'd already been using MkDocs to publish on <xhtml:a href="http://rtfd.org">ReadTheDocs</xhtml:a>, so this wasn't a huge change.
The choice was made based on stability, maturity, and ecosystem;
MkDocs has been around for quite some time, and enabled us to
accomplish a number of ideas quite quickly.</xhtml:li>
<xhtml:li>Automated publishing to <xhtml:a href="https://pages.github.com">GitHub Pages</xhtml:a>, via Travis-CI. Any
time we push to our master branch, the documentation will be
updated.</xhtml:li>
</xhtml:ul>
<xhtml:p>We're quite proud of <xhtml:a href="https://zendframework.github.io/zend-expressive/">the results</xhtml:a>,
and hope that the new documentation serves our users well.</xhtml:p>
<xhtml:h2>What's to look forward to?</xhtml:h2>
<xhtml:p>Shipping a stable version means that you can depend on the API
going forward. As such, we're messaging that it's production ready;
start building and shipping your applications on it today!</xhtml:p>
<xhtml:p>For the next feature version, we already have a few things
scheduled:</xhtml:p>
<xhtml:ul>
<xhtml:li>Removal of the deprecated
<xhtml:code>pre_routing</xhtml:code>/<xhtml:code>post_routing</xhtml:code> configuration
support, as messaged in the <xhtml:a href="http://zendframework.github.io/zend-expressive/reference/migration/rc-to-v1/#timeline-for-migration">
migration documentation</xhtml:a>.</xhtml:li>
<xhtml:li>Providing <xhtml:a href="https://github.com/zendframework/zend-expressive-skeleton/pull/31">
modular functionality</xhtml:a> by default (with opt-out). This will
likely include also providing a solution similar to the <xhtml:a href="https://github.com/zendframework/zend-component-installer">component
installer</xhtml:a> to aid with auto-registering installed packages.</xhtml:li>
</xhtml:ul>
<xhtml:h2>Kudos</xhtml:h2>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zend-expressive-router/graphs/contributors">
We</xhtml:a> <xhtml:a href="https://github.com/zendframework/zend-expressive-aurarouter/graphs/contributors">
wish</xhtml:a> <xhtml:a href="https://github.com/zendframework/zend-expressive-fastroute/graphs/contributors">
to</xhtml:a> <xhtml:a href="https://github.com/zendframework/zend-expressive-zendrouter/graphs/contributors">
thank</xhtml:a> <xhtml:a href="https://github.com/zendframework/zend-expressive-template/graphs/contributors">
everyone</xhtml:a> <xhtml:a href="https://github.com/zendframework/zend-expressive-platesrenderer/graphs/contributors">
who</xhtml:a> <xhtml:a href="https://github.com/zendframework/zend-expressive-twigrenderer/graphs/contributors">
contributed</xhtml:a> <xhtml:a href="https://github.com/zendframework/zend-expressive-zendviewrenderer/graphs/contributors">
to</xhtml:a> <xhtml:a href="https://github.com/zendframework/zend-expressive-helpers/graphs/contributors">
the</xhtml:a> <xhtml:a href="https://github.com/zendframework/zend-expressive/graphs/contributors">
Expressive</xhtml:a> <xhtml:a href="https://github.com/zendframework/zend-expressive-skeleton/graphs/contributors">
project</xhtml:a>! (Yes, that's 11 separate links!)</xhtml:p>
<xhtml:p>Additionally, we thank everyone who has provided us feedback —
whether in the form of questions, bug reports, or suggestions —
these past few months; without the critical feedback, the project
would not be where it is today.</xhtml:p>
<xhtml:p>A few folks stand out:</xhtml:p>
<xhtml:ul>
<xhtml:li><xhtml:a href="http://www.zimuel.it">Enrico Zimuel</xhtml:a>, who started
it all!</xhtml:li>
<xhtml:li><xhtml:a href="https://xtreamwayz.com">Geert Eltink</xhtml:a>, who did the
hard work of making the installer work!</xhtml:li>
<xhtml:li><xhtml:a href="http://harikt.com">Hari K T</xhtml:a>, who nudged us to
split the repository into discrete, single-purpose projects!</xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/michaelmoussa">Michael Moussa</xhtml:a>,
who suggested the idea that middleware specifications could be
pipelines themselves — and then implemented the solution!</xhtml:li>
</xhtml:ul>
<xhtml:h2>Write your next project Expressively!</xhtml:h2>
<xhtml:p>Write your PSR-7 middleware today! Consult <xhtml:a href="https://zendframework.github.io/zend-expressive/">the
documentation</xhtml:a> to get started!</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Expressive 1.0.0RC7/RC8 Released!]]></title>
    <published>2016-01-21T16:35:00+00:00</published>
    <updated>2016-01-21T16:35:00+00:00</updated>
    <link rel="alternate" type="text/html" href="http://framework.zend.com/blog/2016-01-21-expressive-rc7-rc8.html"/>
    <id>http://framework.zend.com/blog/2016-01-21-expressive-rc7-rc8.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>matthew@zend.com</email>
      <uri>http://mwop.net/</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>The Zend Framework community is pleased to announce the
immediate availability of Expressive 1.0.0rc7 and the Expressive
Skeleton and Installer 1.0.0rc8!</xhtml:p>
<xhtml:p>You can install the latest versions using <xhtml:a href="https://getcomposer.org">Composer</xhtml:a>, via the
<xhtml:code>create-project</xhtml:code> command:</xhtml:p>
<xhtml:pre>
<xhtml:code class="language-bash">$ composer create-project -s rc zendframework/zend-expressive-skeleton expressive
</xhtml:code>
</xhtml:pre>
<xhtml:p>You can update your existing applications using:</xhtml:p>
<xhtml:pre>
<xhtml:code class="language-bash">$ composer update
</xhtml:code>
</xhtml:pre>
<xhtml:p>This release candidate contains bug fixes for dispatching error
middleware pipelines. Additionally, we've released a new version of
our Twig integration, and detail those changes below.</xhtml:p>
<xhtml:h2>Changes in zend-expressive RC7</xhtml:h2>
<xhtml:p>RC6 updated the configuration for the middleware pipeline to
make it a single pipeline. We recommended that developers make use
of our middleware grouping feature, however, which allows you to
specify not just a single, named middleware service, but an
<xhtml:em>array</xhtml:em> of named middleware services. This feature is great
for grouping middleware based on when it should execute, and makes
ordering related middleware simpler.</xhtml:p>
<xhtml:p>Per our suggested, default configuration:</xhtml:p>
<xhtml:pre>
<xhtml:code class="language-php">use Zend\Expressive\Container\ApplicationFactory;
use Zend\Expressive\Helper;

return [
    'dependencies' =&gt; [
        'factories' =&gt; [
            Helper\ServerUrlMiddleware::class =&gt; Helper\ServerUrlMiddlewareFactory::class,
            Helper\UrlHelperMiddleware::class =&gt; Helper\UrlHelperMiddlewareFactory::class,
        ],
    ],
    // This can be used to seed pre- and/or post-routing middleware
    'middleware_pipeline' =&gt; [
        // An array of middleware to register. Each item is of the following
        // specification:
        //
        // [
        //  Required:
        //     'middleware' =&gt; 'Name or array of names of middleware services and/or callables',
        //  Optional:
        //     'path'     =&gt; '/path/to/match', // string; literal path prefix to match
        //                                     // middleware will not execute
        //                                     // if path does not match!
        //     'error'    =&gt; true, // boolean; true for error middleware
        //     'priority' =&gt; 1, // int; higher values == register early;
        //                      // lower/negative == register last;
        //                      // default is 1, if none is provided.
        // ],
        //
        // While the ApplicationFactory ignores the keys associated with
        // specifications, they can be used to allow merging related values
        // defined in multiple configuration files/locations. This file defines
        // some conventional keys for middleware to execute early, routing
        // middleware, and error middleware.
        'always' =&gt; [
            'middleware' =&gt; [
                // Add more middleware here that you want to execute on
                // every request:
                // - bootstrapping
                // - pre-conditions
                // - modifications to outgoing responses
                Helper\ServerUrlMiddleware::class,
            ],
            'priority' =&gt; 10000,
        ],

        'routing' =&gt; [
            'middleware' =&gt; [
                ApplicationFactory::ROUTING_MIDDLEWARE,
                Helper\UrlHelperMiddleware::class,
                // Add more middleware here that needs to introspect the routing
                // results; this might include:
                // - route-based authentication
                // - route-based validation
                // - etc.
                ApplicationFactory::DISPATCH_MIDDLEWARE,
            ],
            'priority' =&gt; 1,
        ],

        'error' =&gt; [
            'middleware' =&gt; [
                // Add error middleware here.
            ],
            'priority' =&gt; -10000,
            'error' =&gt; true,
        ],
    ],
];
</xhtml:code>
</xhtml:pre>
<xhtml:p>Unfortunately, for <xhtml:em>error middleware</xhtml:em>, this was not
working correctly.</xhtml:p>
<xhtml:p>Internally, when we encounter an array of middleware, we create
a <xhtml:code>Zend\Stratigility\MiddlewarePipe</xhtml:code> instance, and pipe
each middleware service to it in order. The problem is that
<xhtml:code>MiddlewarePipe</xhtml:code> does not implement the error middleware
signature — which meant that error middleware pipelines were
completely skipped!</xhtml:p>
<xhtml:p>To make this work, we introduced a proxy class,
<xhtml:code>Zend\Expressive\ErrorMiddlewarePipe</xhtml:code>, which wraps a
<xhtml:code>MiddlewarePipe</xhtml:code>, and exposes the error middleware
signature. This is now used internally whenever an error middleware
pipeline needs to be created.</xhtml:p>
<xhtml:h2>Changes in zend-expressive-skeleton RC8</xhtml:h2>
<xhtml:p>When we created the new default middleware pipeline
configuration for RC6/RC7, we forgot one important detail: the
<xhtml:code>error</xhtml:code> middleware group was missing its
<xhtml:code>error</xhtml:code> key, meaning it wasn't attempting to create
error middleware at all! We've fixed this in RC8.</xhtml:p>
<xhtml:p>If you upgraded to RC6/RC7 earlier this week, make sure you add
that <xhtml:code>error</xhtml:code> key, as detailed in the above example.</xhtml:p>
<xhtml:h2>Twig integration updates</xhtml:h2>
<xhtml:p>Today we released <xhtml:a href="https://github.com/zendframework/zend-expressive-twigrenderer/releases/tag/1.1.0">
version 1.0.1 of our Twig integration</xhtml:a>. This includes a few new
features:</xhtml:p>
<xhtml:ul>
<xhtml:li>It adds a dependency on zend-expressive-helpers and, if the
<xhtml:code>UrlHelper</xhtml:code> and <xhtml:code>ServerUrlHelper</xhtml:code> services
are registered, makes new <xhtml:code>url</xhtml:code> and
<xhtml:code>absolute_url</xhtml:code> template functions available.</xhtml:li>
<xhtml:li>It adds a new "globals" configuration sub-section for
registering variables to pass to all templates.</xhtml:li>
</xhtml:ul>
<xhtml:p>You can read more in the <xhtml:a href="http://zend-expressive.readthedocs.org/en/latest/template/twig/">Twig
integration documentation</xhtml:a>.</xhtml:p>
<xhtml:p>Many thanks to <xhtml:a href="https://xtreamwayz.com">Geert Eltink</xhtml:a>
for these new features!</xhtml:p>
<xhtml:h2>Future</xhtml:h2>
<xhtml:p>Code is stabilizing, and we're seeing fewer issues hitting our
issue tracker. We hope that in a week or two we can release a
stable version.</xhtml:p>
<xhtml:p>If you are testing Expressive — whether for the first time, or
updating an existing application — please help us prepare it for
general availability!</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Expressive 1.0.0RC6/RC7 Released!]]></title>
    <published>2016-01-19T19:10:00+00:00</published>
    <updated>2016-01-19T19:10:00+00:00</updated>
    <link rel="alternate" type="text/html" href="http://framework.zend.com/blog/2016-01-19-expressive-rc6-rc7.html"/>
    <id>http://framework.zend.com/blog/2016-01-19-expressive-rc6-rc7.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>matthew@zend.com</email>
      <uri>http://mwop.net/</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>The Zend Framework community is pleased to announce the
immediate availability of Expressive 1.0.0rc6 and 1.0.0rc7!</xhtml:p>
<xhtml:p>You can install the latest versions using <xhtml:a href="https://getcomposer.org">Composer</xhtml:a>, via the
<xhtml:code>create-project</xhtml:code> command:</xhtml:p>
<xhtml:pre>
<xhtml:code class="language-bash">$ composer create-project -s rc zendframework/zend-expressive-skeleton expressive
</xhtml:code>
</xhtml:pre>
<xhtml:p>You can update your existing applications using:</xhtml:p>
<xhtml:pre>
<xhtml:code class="language-bash">$ composer update
</xhtml:code>
</xhtml:pre>
<xhtml:p>Unfortunately, zend-expressive RC6 introduces some breaking
changes. Several issues were raised that could not be handled in a
fully backwards compatible fashion, and we felt they were important
enough to introduce before a stable release is made. We continue to
honor previous application configuration; however, deprecation
notices will be raised, and the code for parsing the old
configuration will be removed for the 1.1 release.</xhtml:p>
<xhtml:p>We also released zend-expressive-skeleton RC7 quick on the heels
of RC6 in order to correct an issue with installation whereby the
development dependencies at time of invocation were installed,
rather than the rewritten ones. This affected only the skeleton,
which is why we're announcing RC6 <xhtml:em>and</xhtml:em> RC7 releases.</xhtml:p>
<xhtml:p>See below for full details on what has changed.</xhtml:p>
<xhtml:h2>Changes in zend-expressive RC6</xhtml:h2>
<xhtml:p>Like RC5, the bulk of the changes merged for RC6 were
documentation, including:</xhtml:p>
<xhtml:ul>
<xhtml:li>a cookbook recipe detailing <xhtml:a href="http://zend-expressive.readthedocs.org/en/latest/helpers/url-helper/#base-path-support">
how to set the base path on a <xhtml:code>UrlHelper</xhtml:code>
instance</xhtml:a>.</xhtml:li>
<xhtml:li>two cookbook recipes detailing mechanisms for enabling <xhtml:a href="http://zend-expressive.readthedocs.org/en/latest/cookbook/setting-locale-without-routing-parameter/">
localized</xhtml:a> <xhtml:a href="http://zend-expressive.readthedocs.org/en/latest/cookbook/setting-locale-depending-routing-parameter/">
routes</xhtml:a>.</xhtml:li>
<xhtml:li>a cookbook recipe detailing <xhtml:a href="http://zend-expressive.readthedocs.org/en/latest/cookbook/debug-toolbars/">
how to add several popular debug toolbars to your
applications</xhtml:a>.</xhtml:li>
<xhtml:li>a cookbook recipe detailing <xhtml:a href="http://zend-expressive.readthedocs.org/en/latest/cookbook/using-routed-middleware-class-as-controller/">
how to write classes for handling multiple routes</xhtml:a>. (similar to
controllers in MVC-oriented systems).</xhtml:li>
<xhtml:li>a <xhtml:a href="http://zend-expressive.readthedocs.org/en/latest/features/#flow-overview">
flow diagram</xhtml:a> for the "Features" chapter.</xhtml:li>
</xhtml:ul>
<xhtml:p>Unlike RC5, however, we introduced a significant code change,
prompted by user feedback. In particular, we saw each of the
following reported multiple times:</xhtml:p>
<xhtml:ul>
<xhtml:li>confusion over the <xhtml:code>pre_routing</xhtml:code> and
<xhtml:code>post_routing</xhtml:code> middleware pipeline keys, and how they
relate to routed middleware.</xhtml:li>
<xhtml:li>requests to split the routing middleware into two distinct
responsibilities: routing middleware, and dispatch middleware.</xhtml:li>
<xhtml:li>requests to allow dispatching middleware when triggering route
result observers.</xhtml:li>
</xhtml:ul>
<xhtml:p>On analysis, and in discussions with users, we decided to make
the following changes.</xhtml:p>
<xhtml:h3>Splitting the routing middleware</xhtml:h3>
<xhtml:p>We split the routing middleware into two discrete methods:
routing and dispatch. This solved multiple problems, and enables a
number of interesting workflows.</xhtml:p>
<xhtml:p>In particular, it allows you to define middleware that can act
on the routing results in order to satisify pre-conditions in an
automated way.</xhtml:p>
<xhtml:p>As an example, let's say you have a workflow where you want
to:</xhtml:p>
<xhtml:ul>
<xhtml:li>Authenticate a user</xhtml:li>
<xhtml:li>Authorize the user</xhtml:li>
<xhtml:li>Perform content negotiation</xhtml:li>
<xhtml:li>Validate incoming body parameters</xhtml:li>
</xhtml:ul>
<xhtml:p>However, you don't want to perform these actions for
<xhtml:em>every</xhtml:em> request, only specific routes.</xhtml:p>
<xhtml:p>Previously, you would need to define an array of middleware for
each route that needs this set of responsibilities:</xhtml:p>
<xhtml:pre>
<xhtml:code class="language-php">[
    'routes' =&gt; [
        'api.ping' =&gt; [
            'path' =&gt; '/api/ping',
            'middleware' =&gt; [
                AuthenticationMiddleware::class,
                AuthorizationMiddleware::class,
                ContentNegotiationMiddleware::class,
                BodyValidationMiddleware::class,
                PingMiddleware::class,
            ],
            'allowed_methods' =&gt; ['GET'],
        ],
        'api.books' =&gt; [
            'path' =&gt; '/api/books[/{id:[a-f0-9]{8}}]',
            'middleware' =&gt; [
                AuthenticationMiddleware::class,
                AuthorizationMiddleware::class,
                ContentNegotiationMiddleware::class,
                BodyValidationMiddleware::class,
                BooksMiddleware::class,
            ],
        ],
        /* etc. */
    ],
]
</xhtml:code>
</xhtml:pre>
<xhtml:p>This is repetitive, and prone to error: any change in the
workflow requires propagation to <xhtml:em>every route</xhtml:em>.</xhtml:p>
<xhtml:p>Splitting the routing and dispatch middleware allows you to pipe
middleware <xhtml:em>between</xhtml:em> the two actions, allowing you to
register such workflows <xhtml:em>once</xhtml:em>. The middleware could then
introspect the route results to determine if they have work to
do.</xhtml:p>
<xhtml:p>This means you can now write middleware like this:</xhtml:p>
<xhtml:pre>
<xhtml:code class="language-php">use Zend\Expressive\Router\RouteResult;

$authenticationMiddleware = function ($request, $response, $next) use ($map, $authenticate) {
    $routeResult = $request-&gt;getAttribute(RouteResult::class, false);
    if (! $routeResult instanceof RouteResult) {
        return $next($request, $response);
    }

    if (! in_array($routeResult-&gt;getMatchedRouteName(), $map)) {
        return $next($request, $response);
    }

    $authenticationResult = $authenticate($request);
    if (! $authenticationResult-&gt;isSuccess()) {
        // ERROR!
        return new AuthenticationErrorResponse();
    }

    return $next(
        $request-&gt;withAttribute($authenticationResult-&gt;getIdentity()),
        $response
    );
}
</xhtml:code>
</xhtml:pre>
<xhtml:p>You would then sandwich it between the routing and dispatch
middleware. Programmatically, that looks like:</xhtml:p>
<xhtml:pre>
<xhtml:code class="language-php">$app-&gt;pipeRoutingMiddleware();
$app-&gt;pipe($authenticationMiddleware);
$app-&gt;pipeDispatchMiddleware();
</xhtml:code>
</xhtml:pre>
<xhtml:p>We'll look at configuration later, as it changes more
dramatically.</xhtml:p>
<xhtml:h3>No more auto-registration of the routing middleware</xhtml:h3>
<xhtml:p>Prior to RC6, the routing middleware was auto-registered
when:</xhtml:p>
<xhtml:ul>
<xhtml:li>any call to <xhtml:code>route()</xhtml:code> was made, including those via
the methods that proxy to it (<xhtml:code>get()</xhtml:code>,
<xhtml:code>post()</xhtml:code>, <xhtml:code>any()</xhtml:code>, etc.).</xhtml:li>
<xhtml:li>as soon as the <xhtml:code>Application</xhtml:code> instance was invoked as
middleware (i.e., by calling <xhtml:code>$app($request, $response)</xhtml:code>
or calling <xhtml:code>$app-&gt;run()</xhtml:code>).</xhtml:li>
</xhtml:ul>
<xhtml:p>You could also always register it manually when creating your
application pipeline using the <xhtml:code>pipeRoutingMiddleware()</xhtml:code>
method.</xhtml:p>
<xhtml:p>Because routing was split into two distinct actions, and one
primary purpose for doing so was to allow registering middleware
between those actions, we felt that auto-registration was not only
no longer useful, but a liability.</xhtml:p>
<xhtml:p>As such, when creating your application programmatically, there
is now <xhtml:em>exactly one workflow</xhtml:em> to use to enable the routing
and dispatch middleware: each must be piped explicitly into the
pipeline:</xhtml:p>
<xhtml:pre>
<xhtml:code class="language-php">$app-&gt;pipe(ServerUrlMiddleware::class);
$app-&gt;pipe(BaseParamsMiddleware::class);
$app-&gt;pipeRoutingMiddleware();
$app-&gt;pipe(UrlHelperMiddleware::class);
$app-&gt;pipeDispatchMiddleware();
</xhtml:code>
</xhtml:pre>
<xhtml:p><xhtml:strong>If you are building your application programmatically,
you <xhtml:em>must</xhtml:em> update it to pipe the routing and dispatch
middleware in order for it to continue to work.</xhtml:strong></xhtml:p>
<xhtml:p>We'll look at configuration for the
<xhtml:code>ApplicationFactory</xhtml:code> later, as it changes as well.</xhtml:p>
<xhtml:h3>No more route result observers</xhtml:h3>
<xhtml:p>Another consequence of splitting the routing middleware in two
was a pleasant discovery: there was no longer any need for the
route result observer system!</xhtml:p>
<xhtml:p>The route result observer system was added in RC3 to allow the
application to notify interested observers of the results of
routing, as there was no other way to trigger functionality between
the act of routing and when the matched middleware was dispatched
(if any was actually matched!).</xhtml:p>
<xhtml:p>Several developers complained that they couldn't return a
response from these observers when they detected an error
condition, nor could they introspect the request in such
situations.</xhtml:p>
<xhtml:p>With the routing middleware split, there's an answer to those
questions, and the observer system is no longer needed; just place
middleware between the routing and dispatch middleware, and have it
act on the <xhtml:code>RouteResult</xhtml:code> instance (which the routing
middleware injects as a request attribute). In fact, we've already
demonstrated this above!</xhtml:p>
<xhtml:p>For RC6, we removed the <xhtml:code>RouteResultSubjectInterface</xhtml:code>
implementation from the <xhtml:code>Application</xhtml:code> instance, while
keeping the original methods defined in that interface; these
methods now trigger deprecation notices. If you were using
observers previously, and keep your existing RC5 configuration, we
also inject a special "route result observer middleware" between
the routing and dispatch middleware that will notify the observers.
The deprecation messages will prompt you to update your code, and
provide a link to the migration guide to help you.</xhtml:p>
<xhtml:p>A new <xhtml:em>minor</xhtml:em> version of zend-expressive-router was
released, v1.2.0, marking each of the
<xhtml:code>RouteResultSubjectInterface</xhtml:code> and
<xhtml:code>RouteResultObserverInterface</xhtml:code> as deprecated.</xhtml:p>
<xhtml:p>A new <xhtml:em>major</xhtml:em> version of zend-expressive-helpers was
released, v2.0.0, that removes the
<xhtml:code>RouteResultObserverInterface</xhtml:code> implementation from the
<xhtml:code>UrlHelper</xhtml:code>, and updates its related middleware to act
between the routing and dispatch middleware.</xhtml:p>
<xhtml:h3>Simplified configuration</xhtml:h3>
<xhtml:p>We've alluded to configuration changes several times; it's now
time to detail those.</xhtml:p>
<xhtml:p>One common confusion that arose was around the
<xhtml:code>pre_routing</xhtml:code> and <xhtml:code>post_routing</xhtml:code> names. Many
assumed that <xhtml:code>pre_routing</xhtml:code> meant that the middleware
listed only operated before routing — and did not realize that such
middleware could also post-process responses. Similarly, many
assumed that <xhtml:code>post_routing</xhtml:code> middleware was executed
after routed middleware, even when the routed middleware returned a
response (it was only executed if the routed middleware called
<xhtml:code>$next()</xhtml:code> or if an error occurred).</xhtml:p>
<xhtml:p>We wanted to clarify how the middleware pipeline worked, and
with the switch to split the routing and dispatch middleware, and a
desire to allow injecting middleware between routing and dispatch,
we had an opportunity to positiveily change the configuration to
make it more clear.</xhtml:p>
<xhtml:p><xhtml:a href="http://www.zimuel.it">Enrico</xhtml:a> suggested that instead
of segregating into pre/post, we have a single pipeline. This would
require defining entries for the routing and dispatch middleware as
part of the pipeline, but you would then be able to see the exact
workflow.</xhtml:p>
<xhtml:p>One counter-argument, however, is when merging configuration,
which is done by default in the skeleton, and which is a
recommended practice to keep configuration for related
functionality in discrete places. How would order be preserved?</xhtml:p>
<xhtml:p>We decided to introduce a <xhtml:code>priority</xhtml:code> key into our
middleware configuration specifications. This works with
<xhtml:code>SplPriorityQueue</xhtml:code>: higher values are piped earlier and
execute earlier, while lower/negative values are piped later. This
provides the ability to define the pipeline across multiple files,
merge it, and get a predictable order.</xhtml:p>
<xhtml:p>Additionally, we realized we could lever another existing
feature: middleware specifications used by the pipeline
configuration allow you to specify <xhtml:em>lists</xhtml:em> of middleware to
execute, not just individual middleware. This means that you can
group middleware under the same priority, in the order you want it
to execute. This is a great technique for segregating
configuration.</xhtml:p>
<xhtml:p>What we came up with ends up looking like this when you start
out with the new skeleton:</xhtml:p>
<xhtml:pre>
<xhtml:code class="language-php">use Zend\Expressive\Container\ApplicationFactory;
use Zend\Expressive\Helper;

return [
    'dependencies' =&gt; [
        'factories' =&gt; [
            Helper\ServerUrlMiddleware::class =&gt; Helper\ServerUrlMiddlewareFactory::class,
            Helper\UrlHelperMiddleware::class =&gt; Helper\UrlHelperMiddlewareFactory::class,
        ],
    ],
    // This can be used to seed pre- and/or post-routing middleware
    'middleware_pipeline' =&gt; [
        // An array of middleware to register. Each item is of the following
        // specification:
        //
        // [
        //  Required:
        //     'middleware' =&gt; 'Name or array of names of middleware services and/or callables',
        //  Optional:
        //     'path'     =&gt; '/path/to/match', // string; literal path prefix to match
        //                                     // middleware will not execute
        //                                     // if path does not match!
        //     'error'    =&gt; true, // boolean; true for error middleware
        //     'priority' =&gt; 1, // int; higher values == register early;
        //                      // lower/negative == register last;
        //                      // default is 1, if none is provided.
        // ],
        //
        // While the ApplicationFactory ignores the keys associated with
        // specifications, they can be used to allow merging related values
        // defined in multiple configuration files/locations. This file defines
        // some conventional keys for middleware to execute early, routing
        // middleware, and error middleware.
        'always' =&gt; [
            'middleware' =&gt; [
                // Add more middleware here that you want to execute on
                // every request:
                // - bootstrapping
                // - pre-conditions
                // - modifications to outgoing responses
                Helper\ServerUrlMiddleware::class,
            ],
            'priority' =&gt; 10000,
        ],

        'routing' =&gt; [
            'middleware' =&gt; [
                ApplicationFactory::ROUTING_MIDDLEWARE,
                Helper\UrlHelperMiddleware::class,
                // Add more middleware here that needs to introspect the routing
                // results; this might include:
                // - route-based authentication
                // - route-based validation
                // - etc.
                ApplicationFactory::DISPATCH_MIDDLEWARE,
            ],
            'priority' =&gt; 1,
        ],

        'error' =&gt; [
            'middleware' =&gt; [
                // Add error middleware here.
            ],
            'priority' =&gt; -10000,
        ],
    ],
];
</xhtml:code>
</xhtml:pre>
<xhtml:p>For existing users:</xhtml:p>
<xhtml:ul>
<xhtml:li>Existing RC5 and earlier configuration is still honored, but
will emit deprecation notices, prompting you to update; these
notices include links to the migration guide.</xhtml:li>
<xhtml:li>To update, you'll need to:
<xhtml:ul>
<xhtml:li>update your zend-expressive-helpers version constraint to
<xhtml:code>^2.0</xhtml:code>.</xhtml:li>
<xhtml:li>update your configuration, using the above as a guide.</xhtml:li>
</xhtml:ul>
</xhtml:li>
</xhtml:ul>
<xhtml:p>We're excited about this change, as we feel it simplifies the
configuration, adds flexibility, and provides predictability in the
system. While it is a large change for a release candidate, we also
felt it was important enough to warrant introducing before the
stable release.</xhtml:p>
<xhtml:h2>Full migration details</xhtml:h2>
<xhtml:p>The above narrative is use-case-centered. We have, however,
published a <xhtml:a href="http://zend-expressive.readthedocs.org/en/latest/migration/rc-to-v1/">
full migration guide</xhtml:a> as part of the release to give exact
details on changes you will need to make.</xhtml:p>
<xhtml:h2>Future</xhtml:h2>
<xhtml:p>At this point, we feel that the code has stabilized
significantly, and that the improvements in these latest releases
have provided important simplicity and flexibility to make the
system robust. We'll be waiting a week or two to see how you, our
users, respond, and hopefully be able to tag a stable release
shortly!</xhtml:p>
<xhtml:p>If you are testing Expressive — whether for the first time, or
updating an existing application — please help us prepare it for
general availability!</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Zend Framework 3 Update for 2016-01-14]]></title>
    <published>2016-01-14T23:00:00+00:00</published>
    <updated>2016-01-14T23:00:00+00:00</updated>
    <link rel="alternate" type="text/html" href="http://framework.zend.com/blog/2016-01-14-zf3-biweekly-update.html"/>
    <id>http://framework.zend.com/blog/2016-01-14-zf3-biweekly-update.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>matthew@zend.com</email>
      <uri>http://mwop.net/</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>This is an installment in an ongoing series of bi-weekly posts
on ZF3 development status.</xhtml:p>
<xhtml:p>Following a roughly two week hiatus at the end of the year,
we've picked up where we left off and continued the momentum
towards the ZF3 initiatives.</xhtml:p>
<xhtml:p>The highlights:</xhtml:p>
<xhtml:ul>
<xhtml:li>48 pull requests merged</xhtml:li>
<xhtml:li>11 releases of components, <xhtml:strong>including 3 3.0 releases in
3 days!</xhtml:strong></xhtml:li>
<xhtml:li>6 components updated to zend-servicemanager/zend-eventmanager
v3 changes</xhtml:li>
<xhtml:li>Major updates for an upcoming Expressive RC6</xhtml:li>
</xhtml:ul>
<xhtml:h2>3.0 Releases!</xhtml:h2>
<xhtml:p>A number of components reached stability in the past few weeks,
and this week we did a spree of three 3.0 releases in three
days:</xhtml:p>
<xhtml:ul>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zend-servicemanager/releases/tag/release-3.0.0">
zend-servicemanager 3.0.0</xhtml:a> is the first 3.0 release of any ZF
components, and features a complete rewrite of the internals to
provide up to 4x faster performance! We have been careful to retain
as much backwards compatibility as possible, and the v2.7.0 release
provides features that make migration between versions seamless for
users. <xhtml:a href="http://zend-servicemanager.rtfd.org/en/latest/book/migration/">A
migration guide is available</xhtml:a>.</xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zend-eventmanager/releases/tag/release-3.0.0">
zend-eventmanager 3.0.0</xhtml:a> is our second 3.0 release of a ZF
component, and features a complete rewrite of the internals of the
EventManager implementation to provide up to 4X faster performance.
By following the <xhtml:a href="http://zend-eventmanager.readthedocs.org/en/latest/migration/intro/">
migration guide</xhtml:a>, you can update your v2 code to work on both v2
and v3.</xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zend-code/releases/tag/release-3.0.0">
zend-code 3.0.0</xhtml:a> is our third 3.0 release of a ZF component, and
features updates to allow usage with PHP 5.5, 5.6, and PHP 7, and,
specifically, scalar typehints, return typehints, generators, and
variadics.</xhtml:li>
</xhtml:ul>
<xhtml:p>Be aware that you cannot make use of these new 3.0 versions
within existing ZF2 applications quite yet; we are still in the
process of updating components to work with these releases.
However, they can be used standalone, or within projects based on
Expressive!</xhtml:p>
<xhtml:h2>Pull request activity</xhtml:h2>
<xhtml:p>Since the last update, we've <xhtml:a href="https://github.com/issues?utf8=%E2%9C%93&amp;q=is:pr+org:zendframework+is:merged+closed:%3E=2015-12-22">
merged 48 pull requests</xhtml:a> (link requires a GitHub account).
Activity has been particularly high on Expressive,
zend-servicemanager, and components refactoring to the latest
zend-servicemanager and zend-eventmanager updates.</xhtml:p>
<xhtml:h2>Component Releases</xhtml:h2>
<xhtml:p>The following is a list of component releases (other than the
3.0 releases listed above) since the last update. While not all
releases are related to ZF3 specifically, this list is intended to
detail activity within the organization.</xhtml:p>
<xhtml:ul>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zend-expressive-helpers/releases/tag/1.4.0">
zend-expressive-helpers 1.4.0</xhtml:a> adds base path support to the
<xhtml:code>UrlHelper</xhtml:code>.</xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zend-diactoros/releases/tag/1.3.3">
Diactoros 1.3.3</xhtml:a> fixes an issue in
<xhtml:code>ServerRequestFactory::marshalHeaders()</xhtml:code> whereby we were
explicitly omitting cookie headers; they are now aggregated.</xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zend-expressive-zendrouter/releases/tag/1.0.1">
zend-expressive-zendrouter 1.0.1</xhtml:a> fixes an issue whereby
appending a trailing slash when requesting a route that did not
define one resulted in a 405 instead of a 404 error.</xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zend-servicemanager/releases/tag/release-2.7.0">
zend-servicemanager 2.7.0</xhtml:a>, <xhtml:a href="https://github.com/zendframework/zend-servicemanager/releases/tag/release-2.7.1">
zend-servicemanager 2.7.1</xhtml:a>, <xhtml:a href="https://github.com/zendframework/zend-servicemanager/releases/tag/release-2.7.2">
zend-servicemanager 2.7.2</xhtml:a>, and <xhtml:a href="https://github.com/zendframework/zend-servicemanager/releases/tag/release-2.7.3">
zend-servicemanager 2.7.3</xhtml:a> are forwards-compatibility releases,
providing several features that allow users to update their code to
work with both the v2 and v3 series of the service manager.</xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zend-eventmanager/releases/tag/release-2.6.2">
zend-eventmanager 2.6.2</xhtml:a> introduces a trait,
<xhtml:code>EventListenerIntrospectionTrait</xhtml:code>, for use with PHPUnit
test cases. It provides a consistent API for introspecting what
events and listeners are attached to an EventManager instance, and
provides a custom assertion for validating that a given listener is
registered at a given priority on a given event. This trait can be
used to write assertions for validating listener attachment in a
way that will be forwards compatible with version 3.</xhtml:li>
</xhtml:ul>
<xhtml:h2>ZF3 Refactors</xhtml:h2>
<xhtml:p>Since the last update, the following components have been
refactored to work with the planned v3 versions of
zend-servicemanager and zend-eventmanager. Please note that no new
versions have been released at this time; all work remains either
in pull requests or in the develop branches of each component.</xhtml:p>
<xhtml:ul>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zend-mail/pull/47">zend-mail</xhtml:a></xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zend-validator/pull/49">zend-validator</xhtml:a></xhtml:li>
</xhtml:ul>
<xhtml:p>Additionally, we have created pull requests for several
components to work with the forwards compatibility releases of
zend-servicemanager and zend-eventmanager. These will allow us to
release 2.x versions of these components that can be used by code
consuming the v3 versions of those two components.</xhtml:p>
<xhtml:ul>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zend-barcode/pull/16">zend-barcode</xhtml:a></xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zend-cache/pull/64">zend-cache</xhtml:a></xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zend-log/pull/17">zend-log</xhtml:a></xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zend-i18n/pull/22">zend-i18n</xhtml:a></xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zend-validator/pull/51">zend-validator</xhtml:a></xhtml:li>
</xhtml:ul>
<xhtml:h2>Expressive</xhtml:h2>
<xhtml:p>We've had quite a number of people testing Expressive heavily,
and pointing out both its strengths and weaknesses. This has
resulted in a ton of additional tests, bringing coverage to 100% in
some cases, as well as copious amounts of new documentation.</xhtml:p>
<xhtml:p>After several issue threads and IRC conversations, we've decided
to release an additional RC, RC6, to accomplish the following:</xhtml:p>
<xhtml:ul>
<xhtml:li>Simplification of the middleware pipeline; we will be doing
away with the <xhtml:code>pre_routing</xhtml:code> and
<xhtml:code>post_routing</xhtml:code> keys, and allowing a single pipeline
representing the entire application lifecycle.</xhtml:li>
<xhtml:li>Splitting of the routing middleware into separate routing and
dispatch middleware. This allows developers to tie into the
application lifecycle using middleware between routing and
dispatch, facilitating such things as route-based authentication,
validation, etc.</xhtml:li>
<xhtml:li>Removal of auto-registration of the routing middleware; this is
done to allow substituting alternative routing middleware and/or
dispatch middleware.</xhtml:li>
<xhtml:li>Deprecation of the route result observer system. The same
functionality can now be accomplished with middleware that acts
between routing and dispatch.</xhtml:li>
</xhtml:ul>
<xhtml:p>We've attempted to preserve backwards compatibility for existing
applications, but have marked deprecated features for removal with
1.1. A migration guide will assist our early adopters in updating
their applications.</xhtml:p>
<xhtml:h2>Until next time</xhtml:h2>
<xhtml:p>If you want to help:</xhtml:p>
<xhtml:ul>
<xhtml:li>There are new <xhtml:a href="https://github.com/zendframework/maintainers/wiki/ZF3-ServiceManager-component-refactors,-phase-2">
component refactors to complete or review</xhtml:a>.</xhtml:li>
<xhtml:li>Test Expressive, and help us reach a stable release of this new
feature!</xhtml:li>
</xhtml:ul>
<xhtml:p>Many thanks to all the contributors who have provided feedback,
patches, reviews, or releases! In particular, I want to call
out:</xhtml:p>
<xhtml:ul>
<xhtml:li><xhtml:a href="https://github.com/Ocramius">Marco Pivetta</xhtml:a> for his
work on updating zend-code to work with PHP 7 (and PHP 5.5, and PHP
5.6) features.</xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/bakura10">Michaël Gallego</xhtml:a> for
his work on the zend-servicemanager and zend-eventmanager
refactors, and his relentless pursuit of performance
increases.</xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/ezimuel">Enrico Zimuel</xhtml:a> for his
work on the zend-eventmanager refactor, and taking on the drudgery
of updating components to the new zend-eventmanager and
zend-servicemanager changes.</xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/RalfEggert">Ralf Eggert</xhtml:a> and
<xhtml:a href="https://github.com/danizord">Daniel Gimenes</xhtml:a> for the
constant stream of questions and suggestions for Expressive; their
feedback is changing it for the better!</xhtml:li>
</xhtml:ul>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Zend Framework 3 Update for 2015-12-22]]></title>
    <published>2015-12-22T23:10:00+00:00</published>
    <updated>2015-12-22T23:10:00+00:00</updated>
    <link rel="alternate" type="text/html" href="http://framework.zend.com/blog/2015-12-22-zf3-biweekly-update.html"/>
    <id>http://framework.zend.com/blog/2015-12-22-zf3-biweekly-update.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>matthew@zend.com</email>
      <uri>http://mwop.net/</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>This is the second in an ongoing series of bi-weekly posts on
ZF3 development status.</xhtml:p>
<xhtml:p>The highlights:</xhtml:p>
<xhtml:ul>
<xhtml:li>45 pull requests merged</xhtml:li>
<xhtml:li>14 releases of components</xhtml:li>
<xhtml:li>5 components updated to zend-servicemanager/zend-eventmanager
v3 changes</xhtml:li>
<xhtml:li>1 release candidates of expressive</xhtml:li>
</xhtml:ul>
<xhtml:h2>Pull request activity</xhtml:h2>
<xhtml:p>Activity has continued to be quite high the past couple weeks,
though slower than the previous update, with <xhtml:a href="https://github.com/issues?utf8=%E2%9C%93&amp;q=is:pr+org:zendframework+is:merged+closed:%3E=2015-12-10">
45 pull requests merged</xhtml:a> (link requires a GitHub account). While
Expressive still dominates the list, many of these were related to
ZF3 refactors and ongoing component maintenance.</xhtml:p>
<xhtml:h2>Component Releases</xhtml:h2>
<xhtml:p>The following is a list of component releases since the last
update. While not all releases are related to ZF3 specifically,
this list is intended to detail activity within the organization.
It omits the Expressive release candidates, as well as new
components, which will be listed later in this post.</xhtml:p>
<xhtml:ul>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zend-expressive-fastroute/releases/tag/1.0.1">
zend-expressive-fastroute 1.0.1</xhtml:a> released 2015-12-14; fixes an
issue with the returned <xhtml:code>RouteResult</xhtml:code>, ensuring it
contains the name, not the path, of the route matched.</xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zend-diactoros/releases/tag/1.2.1">
zend-diactoros 1.2.1</xhtml:a> was a bugfix release that fixed:
<xhtml:ul>
<xhtml:li>issues with how <xhtml:code>withHeader()</xhtml:code> handled replacing
existing headers that used a different casing strategy.</xhtml:li>
<xhtml:li>the <xhtml:code>$statusCode</xhtml:code> argument of the
<xhtml:code>Response</xhtml:code> to never allow <xhtml:code>null</xhtml:code> values.</xhtml:li>
<xhtml:li>constructor header validation on all message types to:
<xhtml:ul>
<xhtml:li>allow numeric values (e.g., Content-Length)</xhtml:li>
<xhtml:li>raise an exception on invalid header names (non-empty strings
or non-string values)</xhtml:li>
<xhtml:li>raise an exception on invalid individual header values (non
strings/non-numerics)</xhtml:li>
</xhtml:ul>
</xhtml:li>
</xhtml:ul>
</xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zend-diactoros/releases/tag/1.3.0">
zend-diactoros 1.3.0</xhtml:a> was a feature release adding:
<xhtml:ul>
<xhtml:li><xhtml:code>SapiEmitterTrait</xhtml:code>, which replaces a number of
methods in the <xhtml:code>SapiEmitter</xhtml:code> to provide a re-useable
base for emitters; <xhtml:code>SapiEmitter</xhtml:code> was updated to use the
trait instead of to directly define the methods.</xhtml:li>
<xhtml:li><xhtml:code>SapiStreamEmitter</xhtml:code> provides functionality for
iteratively emitting stream-based responses, and includes support
for Content-Range headers.</xhtml:li>
</xhtml:ul>
</xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zend-diactoros/releases/tag/1.3.1">
zend-diactoros 1.3.1</xhtml:a> was a bugfix release that fixed:
<xhtml:ul>
<xhtml:li>an issue in the response serializer, whereby the discovered
status code wasn't being cast to an integer.</xhtml:li>
<xhtml:li>an issue in the various concrete, text-based response types
whereby they were not rewinding the message body stream after
creation, causing later calls to <xhtml:code>getContents()</xhtml:code> to
return an empty string (as it was starting from the end of the
stream). These now rewind the stream during initialization.</xhtml:li>
</xhtml:ul>
</xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zend-diactoros/releases/tag/1.3.2">
zend-diactoros 1.3.2</xhtml:a> fixes an issue in the
<xhtml:code>ServerRequestFactory</xhtml:code> whereby we were omitting parsing
for and injection of the HTTP protocol version.</xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zend-psr7bridge/releases/tag/0.2.1">
zend-psr7bridge 0.2.1</xhtml:a> adds support for injecting generated
PSR-7 instances with the cookies present in the zend-http request
instance.</xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zend-math/releases/tag/2.5.2">zend-math
2.5.2</xhtml:a> fixes base conversions for base36 and below.</xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zend-server/releases/tag/release-2.6.0">
zend-server 2.6.0</xhtml:a> adds support for unwinding
<xhtml:code>{@inheritdoc}</xhtml:code> annotations, and fixes a misleading
exception in <xhtml:code>reflectFunction</xhtml:code>.</xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/zfcampus/zf-development-mode/releases/tag/release-2.1.2">
zf-development-mode 2.1.2</xhtml:a> fixes the factory to pull and set the
configuration caching rules under the correct configuration
key.</xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zend-expressive-helpers/releases/tag/1.2.1">
zend-expressive-helpers 1.2.1</xhtml:a> adds the protected method
<xhtml:code>getRouteResult()</xhtml:code>, to allow extensions access to the
route result instance.</xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zend-expressive-helpers/releases/tag/1.3.0">
zend-expressive-helpers 1.3.0</xhtml:a> adds a new general-purpose
<xhtml:code>BodyParamsMiddleware</xhtml:code>, for parsing the request body and
returning a new instance populated with the parsed body parameters.
The solution uses a strategy pattern, allowing developers to
provide additional strategies per their application needs.</xhtml:li>
</xhtml:ul>
<xhtml:h2>ZF3 Refactors</xhtml:h2>
<xhtml:p>Since the last update, the following components have been
refactored to work with the planned v3 versions of
zend-servicemanager and zend-eventmanager. Please note that no new
versions have been released at this time; all work remains either
in pull requests or in the develop branches of each component.</xhtml:p>
<xhtml:ul>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zend-session/pull/8">zend-session</xhtml:a></xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zend-log/pull/14">zend-log</xhtml:a></xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zend-tag/pull/3">zend-tag</xhtml:a></xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zend-text/pull/2">zend-text</xhtml:a></xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zend-filter/pull/15">zend-filter</xhtml:a></xhtml:li>
</xhtml:ul>
<xhtml:h2>Component Installer</xhtml:h2>
<xhtml:p>One idea floated for helping the goal of reducing dependencies
in both zend-mvc and the zf2 meta-repository is to have components
also act as modules. This would allow them to provide
configuration, factories, and event listeners to the MVC runtime in
a completely opt-in fashion. The one problem with the approach,
however, is automating registration with the application.</xhtml:p>
<xhtml:p>To this end, we created a <xhtml:a href="https://zendframework.github.io/zend-component-installer">component
installer</xhtml:a>. This package provides composer post un/install
scripts that look for metadata in the package; if the metadata is
present, the script adds an entry to the application's module list.
Components are added to the top of the list, and modules to the
bottom.</xhtml:p>
<xhtml:p>The new package can be installed as a global composer utility,
or downloaded as a self-updateable PHAR file. We will begin
updating components to expose themselves to this tooling soon, and
update the application skeleton with the scripts as generated by
the package, to automate the facilities for greenfield
projects.</xhtml:p>
<xhtml:h2>Expressive Release Candidate</xhtml:h2>
<xhtml:p>Today, we issued a new release candidate of Expressive, RC5. Be
sure to read the <xhtml:a href="/blog/expressive-1-0-0rc5-released.html">announcement</xhtml:a> to find
out what changes have been made! The bulk of the work has gone into
expanding the documentation to cover common use case scenarios.</xhtml:p>
<xhtml:h2>Until next time</xhtml:h2>
<xhtml:p>The winter holidays are upon our team at this time, and we do
not expect much progress in the coming two weeks. Look for updates
in January!</xhtml:p>
<xhtml:p>Until then, if you want to help:</xhtml:p>
<xhtml:ul>
<xhtml:li>There are still <xhtml:a href="https://github.com/zendframework/maintainers/wiki/ZF3-code-refactoring">
component refactors to complete or review</xhtml:a>.</xhtml:li>
<xhtml:li>Test Expressive, and help us reach a stable release of this new
feature!</xhtml:li>
</xhtml:ul>
<xhtml:p>Many thanks to all the contributors who have provided feedback,
patches, reviews, or releases!</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Expressive 1.0.0RC5 Released!]]></title>
    <published>2015-12-22T22:15:00+00:00</published>
    <updated>2015-12-22T22:15:00+00:00</updated>
    <link rel="alternate" type="text/html" href="http://framework.zend.com/blog/expressive-1-0-0rc5-released.html"/>
    <id>http://framework.zend.com/blog/expressive-1-0-0rc5-released.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>matthew@zend.com</email>
      <uri>http://mwop.net/</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>The Zend Framework community is pleased to announce the
immediate availability of Expressive 1.0.0rc5!</xhtml:p>
<xhtml:p>You can install it using <xhtml:a href="https://getcomposer.org">Composer</xhtml:a>, using the
<xhtml:code>create-project</xhtml:code> command:</xhtml:p>
<xhtml:pre>
<xhtml:code class="language-bash">$ composer create-project zendframework/zend-expressive-skeleton:1.0.0rc5@rc expressive
</xhtml:code>
</xhtml:pre>
<xhtml:p>You can update your existing applications using:</xhtml:p>
<xhtml:pre>
<xhtml:code class="language-bash">$ composer update
</xhtml:code>
</xhtml:pre>
<xhtml:p>Depending on what features you're already using, you may have
nothing to do, or a few changes you may need to make; see below for
more information.</xhtml:p>
<xhtml:h2>Changes in RC5</xhtml:h2>
<xhtml:p>The majority of the changes for RC5 were documentation
additions, including chapters on:</xhtml:p>
<xhtml:ul>
<xhtml:li>how to serve Expressive from a subdirectory of the web
root.</xhtml:li>
<xhtml:li>how to create modular Expressive applications.</xhtml:li>
<xhtml:li>how to parse body parameters using new middleware from
zend-expressive-helpers.</xhtml:li>
</xhtml:ul>
<xhtml:p>Two larger changes were made, however:</xhtml:p>
<xhtml:ul>
<xhtml:li>As noted above, zend-expressive-helpers now provides middleware
for parsing the request body into parameters.</xhtml:li>
<xhtml:li>The skeleton and installer now use a new <xhtml:a href="https://github.com/container-interop/container-interop">container-interop</xhtml:a>
version of Pimple to ensure users can use Pimple v3, versus our
previous support for only v1.</xhtml:li>
</xhtml:ul>
<xhtml:h3>Body parameter parsing</xhtml:h3>
<xhtml:p><xhtml:a href="http://www.php-fig.org/psr/psr-7/">PSR-7</xhtml:a> provides
facilities for retrieving the parsed body parameters. Most
implementations will populate this with the contents of
<xhtml:code>$_POST</xhtml:code> by default, but for cases where non-form
submissions or non-POST submissions are present, you need to parse
and populate the body parameters manually.</xhtml:p>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zend-expressive-helpers">zend-expressive-helpers</xhtml:a>
now provides middleware for doing this,
<xhtml:code>Zend\Expressive\Helper\BodyParams\BodyParamsMiddleware</xhtml:code>.
This middleware can be optionally added to your application, and
supports the addition of custom strategies to allow parsing
arbitrary content types.</xhtml:p>
<xhtml:p>This functionality is completely opt-in, and will be available
following a composer update within your application.</xhtml:p>
<xhtml:p><xhtml:a href="http://zend-expressive.readthedocs.org/en/latest/helpers/body-parse/">
Read more about it in the documentation</xhtml:a>.</xhtml:p>
<xhtml:h3>Pimple upgrade</xhtml:h3>
<xhtml:p>As noted, our previous Pimple support was for v1, which is
unsupported at this time. We decided to upgrade our support to the
latest stable version, v3, prior to the stable release of
Expressive.</xhtml:p>
<xhtml:p>For those of you who were using Pimple previously, if you wish
to update your application, you will need to do the following:</xhtml:p>
<xhtml:ul>
<xhtml:li>First, remove the previous pimple support: <xhtml:code>composer
remove mouf/pimple-interop pimple/pimple</xhtml:code>.</xhtml:li>
<xhtml:li>Second, add the new v3 interop support: <xhtml:code>composer require
xtreamwayz/pimple-container-interop</xhtml:code>.</xhtml:li>
<xhtml:li>Third, replace the contents of
<xhtml:code>config/container.php</xhtml:code> with the contents of the <xhtml:a href="https://github.com/zendframework/zend-expressive-skeleton/blob/master/src/ExpressiveInstaller/Resources/config/container-pimple.php">
linked skeleton file</xhtml:a>.</xhtml:li>
</xhtml:ul>
<xhtml:p>After taking those steps, you should see everything working just
as it did before.</xhtml:p>
<xhtml:h4>zend-view changes</xhtml:h4>
<xhtml:p>One trivial change was made to the layout template for zend-view
users: instead of using <xhtml:code>headScript()</xhtml:code>,
<xhtml:code>inlineScript()</xhtml:code> is now used, and emitted at the end of
the <xhtml:code>&lt;body&gt;</xhtml:code> section of the layout. This is a
slight front-end performance enhancement; if you are using the
default layout, we recommend updating accordingly.</xhtml:p>
<xhtml:h2>Future</xhtml:h2>
<xhtml:p>At this point, we do not anticipate any more code changes before
the stable release. We are waiting on at least one pull request for
an additional cookbook recipe, and highly recommend users dive into
the documentation and help us polish it for the final release.
Suggestions already include flow and architecture diagrams; if
anybody wants to create these, we'll happily take them!</xhtml:p>
<xhtml:p>If you are testing Expressive — whether for the first time, or
updating an existing application — please help us prepare it for
general availability!</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Zend Framework 3 Update for 2015-12-10]]></title>
    <published>2015-12-10T16:50:00+00:00</published>
    <updated>2015-12-10T16:50:00+00:00</updated>
    <link rel="alternate" type="text/html" href="http://framework.zend.com/blog/2015-12-10-zf3-biweekly-update.html"/>
    <id>http://framework.zend.com/blog/2015-12-10-zf3-biweekly-update.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>matthew@zend.com</email>
      <uri>http://mwop.net/</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>Per our <xhtml:a href="/blog/zend-framework-3-update-and-roadmap.html">previous ZF3
update</xhtml:a>, this is the first in an ongoing series of bi-weekly
posts on ZF3 development status.</xhtml:p>
<xhtml:p>The highlights:</xhtml:p>
<xhtml:ul>
<xhtml:li>&gt;80 pull requests merged</xhtml:li>
<xhtml:li>28 releases of components</xhtml:li>
<xhtml:li>9 components updated to zend-servicemanager/zend-eventmanager
v3 changes</xhtml:li>
<xhtml:li>2 release candidates of expressive</xhtml:li>
</xhtml:ul>
<xhtml:h2>Pull request activity</xhtml:h2>
<xhtml:p>Marco Pivetta noted yesterday on twitter:</xhtml:p>
<xhtml:blockquote>
<xhtml:p>Receiving around 15 mails/hour from zendframework repositories:
work is going on at full speed :O #zf2 #zf3</xhtml:p>
<xhtml:p>— <xhtml:a href="https://twitter.com/Ocramius">@Ocramius</xhtml:a> <xhtml:a href="https://twitter.com/Ocramius/status/674635264371859457">(link)</xhtml:a></xhtml:p>
</xhtml:blockquote>
<xhtml:p>Activity has been quite high the past couple weeks, with
<xhtml:a href="https://github.com/issues?utf8=%E2%9C%93&amp;q=is:pr+org:zendframework+is:merged+closed:%3E=2015-11-24+">
more than 80 pull requests merged</xhtml:a> (link requires a GitHub
account). Many of these were related to the Expressive release
candidates (more on those later), but more than half were on ZF
components, and ranged from bugfixes to new features to
ZF3-specific refactors.</xhtml:p>
<xhtml:h2>Component Releases</xhtml:h2>
<xhtml:p>We released the following components and versions since the last
update. While not all releases are related to ZF3 specifically,
this list is intended to detail activity within the organization.
One goal of splitting the various components was to increase
release velocity; we're definitely seeing that happen!</xhtml:p>
<xhtml:ul>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zend-diactoros/releases/tag/1.2.0">
zend-diactoros 1.2.0</xhtml:a>, which adds a <xhtml:code>TextResponse</xhtml:code>
and <xhtml:code>CallbackStream</xhtml:code>, updates the
<xhtml:code>SapiEmitter</xhtml:code> to emit a <xhtml:code>Content-Length</xhtml:code>
header by default, and ensures the default charset of an
<xhtml:code>HtmlResposne</xhtml:code> is utf-8.</xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zend-code/releases/tag/release-2.6.1">
zend-code 2.6.1</xhtml:a>, which replaces the doctrine/common dependency
with the more specific doctrine/annotations.</xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zend-expressive-template">zend-expressive-template</xhtml:a>,
a new component containing the
<xhtml:code>TemplateRendererInterface</xhtml:code> and related value objects
used by Expressive; this allows developers to use the interface in
non-Expressive applications.</xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zend-expressive-router">zend-expressive-router</xhtml:a>,
a new component containing the <xhtml:code>RouterInterface</xhtml:code> and
related value objects used by Expressive; this allows developers to
use the interface in non-Expressive applications.</xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zend-expressive-aurarouter/releases/tag/1.0.0">
zend-expressive-aurarouter 1.0.0</xhtml:a> (0.3.0 was also released); the
component now depends on zend-expressive-router instead of
Expressive, and is considered stable.</xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zend-expressive-fastroute/releases/tag/1.0.0">
zend-expressive-fastroute 1.0.0</xhtml:a> (0.3.0 was also released); the
component now depends on zend-expressive-router instead of
Expressive, and is considered stable.</xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zend-expressive-zendrouter/releases/tag/1.0.0">
zend-expressive-zendrouter 1.0.0</xhtml:a> (0.3.0 was also released); the
component now depends on zend-expressive-router instead of
Expressive, and is considered stable.</xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zend-expressive-platesrenderer/releases/tag/1.0.0">
zend-expressive-platesrenderer 1.0.0</xhtml:a> (0.3.0 was also released);
the component now depends on zend-expressive-template instead of
Expressive, and is considered stable.</xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zend-expressive-twigrenderer/releases/tag/1.0.0">
zend-expressive-twigrenderer 1.0.0</xhtml:a> (0.3.0 and 0.3.1 were also
released); the component now depends on zend-expressive-template
instead of Expressive, and is considered stable. Additionally, the
component now has a new configuration structure.</xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zend-expressive-zendviewrenderer/releases/tag/1.0.0">
zend-expressive-zendviewrenderer 1.0.0</xhtml:a> (0.3.0, 0.3.1, 0.4.0,
and 0.4.1 were also released); the component now depends on
zend-expressive-template instead of Expressive, and is considered
stable. Additionally, the component now has custom <xhtml:code>url</xhtml:code>
and <xhtml:code>serverUrl</xhtml:code> helpers that work with
zend-expressive-router and PSR-7, respectively.</xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zend-feed/releases/tag/release-2.6.0">
zend-feed 2.6.0</xhtml:a> provides improvements that reduce dependencies,
and allow better interoperability with other HTTP clients;
including PSR-7-based clients.</xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zend-expressive-helpers">zend-expressive-helpers</xhtml:a>,
a new component that provides helpers for generating URI paths from
configured routes, and fully-qualified URIs based on the current
request URI.</xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zend-test/releases/tag/release-2.5.2">
zend-test 2.5.2</xhtml:a> adds support for writing tests to use PHPUnit
5.</xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zend-eventmanager/releases/tag/release-2.6.1">
zend-eventmanager 2.6.1</xhtml:a> updates the dependencies to make
Athletic a development-only dependency.</xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zend-db/releases/tag/release-2.6.2">
zend-db 2.6.2</xhtml:a> provides a number of bugfixes</xhtml:li>
<xhtml:li>ZendService_Apple_Apns <xhtml:a href="https://github.com/zendframework/ZendService_Apple_Apns/releases/tag/release-1.1.2">
1.1.2</xhtml:a> and <xhtml:a href="https://github.com/zendframework/ZendService_Apple_Apns/releases/tag/release-1.2.0">
1.2.0</xhtml:a>, providing a bugfix and Safari push support,
respectively.</xhtml:li>
</xhtml:ul>
<xhtml:h2>ZF3 Refactors</xhtml:h2>
<xhtml:p>Since the last update, the following components have been
refactored to work with the planned v3 versions of
zend-servicemanager and zend-eventmanager. Please note that no new
versions have been released at this time; all work remains either
in pull requests or in the develop branches of each component.</xhtml:p>
<xhtml:ul>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zend-db/pull/53">zend-db</xhtml:a></xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zend-di/pull/5">zend-di</xhtml:a></xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zend-feed/pull/17">zend-feed</xhtml:a></xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zend-filter/pull/15">zend-filter</xhtml:a></xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zend-log/pull/14">zend-log</xhtml:a></xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zend-mail/pull/47">zend-mail</xhtml:a></xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zend-permissions-acl/pull/7">zend-permissions-acl</xhtml:a></xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zend-tag/pull/3">zend-tag</xhtml:a></xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zend-text/pull/2">zend-text</xhtml:a></xhtml:li>
</xhtml:ul>
<xhtml:h2>Expressive Release Candidates</xhtml:h2>
<xhtml:p>This week, we've issued two release candidates of Expressive,
with RC4 being the latest. Be sure to read the <xhtml:a href="/blog/expressive-1-0-0rc3-released.html">RC3</xhtml:a> and <xhtml:a href="/blog/expressive-1-0-0rc4-released.html">RC4</xhtml:a> announcements to
find out what changes have been made; a lot of work has occurred in
the past few weeks!</xhtml:p>
<xhtml:h2>Until next time</xhtml:h2>
<xhtml:p>We'll be providing another update on either 22 or 23 December
2015 (based on holiday vacation schedules).</xhtml:p>
<xhtml:p>Until then, if you want to help:</xhtml:p>
<xhtml:ul>
<xhtml:li>There are still <xhtml:a href="https://github.com/zendframework/maintainers/wiki/ZF3-code-refactoring">
component refactors to complete or review</xhtml:a>.</xhtml:li>
<xhtml:li>We're still looking for feedback on <xhtml:a href="https://github.com/zendframework/zend-mvc/issues/46">reducing
zend-mvc dependencies</xhtml:a> and <xhtml:a href="https://github.com/zendframework/zf2/issues/7646">identifying core
components for the zf2 repository</xhtml:a>.</xhtml:li>
<xhtml:li>Test Expressive, and help us reach a stable release of this new
feature!</xhtml:li>
</xhtml:ul>
<xhtml:p>Many thanks to all the contributors who have provided feedback,
patches, reviews, or releases!</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Expressive 1.0.0RC4 Released!]]></title>
    <published>2015-12-09T21:45:00+00:00</published>
    <updated>2015-12-09T21:45:00+00:00</updated>
    <link rel="alternate" type="text/html" href="http://framework.zend.com/blog/expressive-1-0-0rc4-released.html"/>
    <id>http://framework.zend.com/blog/expressive-1-0-0rc4-released.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>matthew@zend.com</email>
      <uri>http://mwop.net/</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>The Zend Framework community is pleased to announce the
immediate availability of Expressive 1.0.0rc4!</xhtml:p>
<xhtml:p>You can install it using <xhtml:a href="https://getcomposer.org">Composer</xhtml:a>, using the
<xhtml:code>create-project</xhtml:code> command:</xhtml:p>
<xhtml:pre>
<xhtml:code class="language-bash">$ composer create-project zendframework/zend-expressive-skeleton:1.0.0rc4@rc expressive
</xhtml:code>
</xhtml:pre>
<xhtml:p>If you're already using Expressive, read below for how to update
your application!</xhtml:p>
<xhtml:h2>Changes in RC4</xhtml:h2>
<xhtml:p>The majority of the changes for RC4 centered around polishing
the skeleton and providing more documentation. One change, however,
represented a bugfix, and will impact existing installations that
were making use of the <xhtml:code>UrlHelper</xhtml:code> from the
zend-expressive-helpers package.</xhtml:p>
<xhtml:p>Changes in this release include:</xhtml:p>
<xhtml:h3>Updates to UrlHelper registration</xhtml:h3>
<xhtml:p>Two separate reports indicated that the methodology chosen for
registering <xhtml:code>Zend\Expressive\Helper\UrlHelper</xhtml:code> as a
route result observer with the <xhtml:code>Application</xhtml:code> instance
was not viable. In one case, a circular dependency issue was
discovered; in the other, the <xhtml:code>UrlHelper</xhtml:code> instance was
retrieved for the first time too late to be triggered as a route
result observer.</xhtml:p>
<xhtml:p>To solve this, we chose a path similar to the
<xhtml:code>ServerUrlHelper</xhtml:code>: dedicated middleware that, on
invocation, registers the <xhtml:code>UrlHelper</xhtml:code> with the current
<xhtml:code>Application</xhtml:code> instance (or any
<xhtml:code>Zend\Expressive\Router\RouteResultSubjectInterface</xhtml:code>
implementation). For existing users, this will require both
upgrading your zend-expressive-helpers version, as well as some
minor changes to your configuration; see the <xhtml:a href="#upgrading">Upgrading</xhtml:a> section below.</xhtml:p>
<xhtml:h3>Updates to the default source structure</xhtml:h3>
<xhtml:p>Prior to RC4, the <xhtml:code>composer.json</xhtml:code> mapped the
<xhtml:code>App</xhtml:code> namespace to the <xhtml:code>src/</xhtml:code> directory, and
the <xhtml:code>AppTest</xhtml:code> namespace to the <xhtml:code>test/</xhtml:code>
directory. We felt that this provided an unreasonable limitation on
application structure, and decided to change it as follows:</xhtml:p>
<xhtml:ul>
<xhtml:li>We created the directory <xhtml:code>src/App/</xhtml:code>.</xhtml:li>
<xhtml:li>We pushed the <xhtml:code>src/Action/</xhtml:code> directory to
<xhtml:code>src/App/Action/</xhtml:code>.</xhtml:li>
<xhtml:li>We created the directory <xhtml:code>test/AppTest/</xhtml:code>.</xhtml:li>
<xhtml:li>We pushed the <xhtml:code>test/Action/</xhtml:code> directory to
<xhtml:code>test/AppTest/Action/</xhtml:code>.</xhtml:li>
<xhtml:li>We updated the autoloading entries in
<xhtml:code>composer.json</xhtml:code> to map the <xhtml:code>App</xhtml:code> and
<xhtml:code>AppTest</xhtml:code> namespaces to the new subdirectories.</xhtml:li>
</xhtml:ul>
<xhtml:p>The changes allow you to have multiple top-level namespaces
under the <xhtml:code>src/</xhtml:code> directory, and will help encourage a
<xhtml:a href="https://github.com/zendframework/zend-expressive-skeleton/pull/31">
modular structure</xhtml:a> (similar to ZF2 modules, Symfony bundles,
Laravel packages, etc.).</xhtml:p>
<xhtml:h3>Composer "serve" command</xhtml:h3>
<xhtml:p>To simplify serving your application via the built-in PHP web
server, we have added a Composer script named "serve", which simply
executes <xhtml:code>php -S 0.0.0.0:8080 -t public/</xhtml:code>. You can
invoke it as:</xhtml:p>
<xhtml:pre>
<xhtml:code class="language-bash">$ composer serve
</xhtml:code>
</xhtml:pre>
<xhtml:h3>Caching simplification</xhtml:h3>
<xhtml:p>In the skeleton application, we allow you to opt-in to
configuration caching. Prior to RC4, cached configuration was saved
as a JSON serialized string; with the update to RC4, it is now
cached as a PHP file, allowing it to be pulled in via
<xhtml:code>include()</xhtml:code>. This approach is both simpler and more
performant. Again, the <xhtml:a href="#upgrading">Upgrading</xhtml:a> section
below will detail how to modify your existing installation to make
this change.</xhtml:p>
<xhtml:h3>Twig configuration updates</xhtml:h3>
<xhtml:p>Version 0.3.0 of zend-expressive-twigrenderer made changes to
the configuration format for Twig users. While the old
configuration can still be used, RC4 updates the default
configuration to follow the new recommended structure.</xhtml:p>
<xhtml:h3>zend-view configuration updates</xhtml:h3>
<xhtml:p>Version 0.4.0 of zend-expressive-zendviewrenderer (zend-view
integration) added the ability to consume a configured
<xhtml:code>Zend\View\HelperPluginManager</xhtml:code> service, when available,
and also provides a factory for it. Additionally, that factory
allows using the top-level <xhtml:code>view_helpers</xhtml:code> key to provide
additional plugins (using standard zend-servicemanager style
configuration).</xhtml:p>
<xhtml:p>RC4 of the Expressive skeleton updates the default zend-view
configuration to register the <xhtml:code>HelperPluginManager</xhtml:code>, and
to define the top-level <xhtml:code>view_helpers</xhtml:code> configuration
key.</xhtml:p>
<xhtml:h3>Cross-platform documentation</xhtml:h3>
<xhtml:p>The "usage examples" section of the documentation has a section
on "Hello World Using a Configuration-Driven Container". This
documentation detailed using PHP's <xhtml:code>glob()</xhtml:code> function to
aggregate configuration files. However, <xhtml:code>glob()</xhtml:code> does
not work identically on all platforms.</xhtml:p>
<xhtml:p>The documentation has been updated to use
<xhtml:code>Zend\Stdlib\Glob::glob()</xhtml:code>, which is a cross-platform
shim for <xhtml:code>glob()</xhtml:code>.</xhtml:p>
<xhtml:h3>Cookbook entries</xhtml:h3>
<xhtml:p>Two new entries have been added to the cookbook, one for
configuring zend-view to use helpers from other components (such as
zend-form), and another detailing how to add and configure custom
zend-view view helpers.</xhtml:p>
<xhtml:h2>Upgrading</xhtml:h2>
<xhtml:p>If you're already using Expressive, you'll want to upgrade! To
do so, you'll need to make a few changes to your application.</xhtml:p>
<xhtml:h3>Dependency updates</xhtml:h3>
<xhtml:ul>
<xhtml:li>You'll want to update zendframework/zend-expressive to RC4;
this should happen on a <xhtml:code>composer update</xhtml:code>.</xhtml:li>
<xhtml:li>You'll want to update zendframework/zend-expressive-helpers to
<xhtml:code>^1.2</xhtml:code>, if you are using them.</xhtml:li>
</xhtml:ul>
<xhtml:h3>Configuration changes</xhtml:h3>
<xhtml:p>Configuration changes are only necessary if (a) you are
upgrading from a previous release candidate, (b) using the
<xhtml:code>UrlHelper</xhtml:code>, and/or (c) using Twig or zend-view.</xhtml:p>
<xhtml:h4>UrlHelper changes</xhtml:h4>
<xhtml:p>For the <xhtml:code>UrlHelper</xhtml:code>, you will need to make the
following additions to the
<xhtml:code>config/autoload/middleware-pipeline.global.php</xhtml:code>
file:</xhtml:p>
<xhtml:pre>
<xhtml:code class="language-php">use Zend\Expressive\Helper;

return [
    'dependencies' =&gt; [
        'factories' =&gt; [
            /* ... */
            Helper\UrlHelperMiddleware::class =&gt; Helper\UrlHelperMiddlewareFactory::class,
        ],
    ],
    'middleware_pipeline' =&gt; [
        'pre_routing' =&gt; [
            // This entry was originally just for the ServerUrlMiddleware;
            // make it an array listing both that and the UrlHelperMiddleware,
            // as below:
            [
                'middleware' =&gt; [
                    Helper\ServerUrlMiddleware::class,
                    Helper\UrlHelperMiddleware::class,
                ],
            ],
            /* ... */
        ],
        'post_routing' =&gt; [
            /* ... */
        ],
    ],
    /* ... */
];
</xhtml:code>
</xhtml:pre>
<xhtml:h4>Twig changes</xhtml:h4>
<xhtml:p>In the Twig configuration file,
<xhtml:code>config/autoload/templates.global.php</xhtml:code>, originally the
structure was as follows:</xhtml:p>
<xhtml:pre>
<xhtml:code class="language-php">return [
    'dependencies' =&gt; [ /* ... */ ],
    'templates' =&gt; [
        'extension' =&gt; 'html.twig',
        'cache_dir' =&gt; 'data/cache/twig',
        'assets_url' =&gt; '/',
        'assets_version' =&gt; null,
        'paths' =&gt; [
            'app' =&gt; ['templates/app'],
            'layout' =&gt; ['templates/layout'],
            'error' =&gt; ['templates/error'],
        ],
    ],
];
</xhtml:code>
</xhtml:pre>
<xhtml:p>While this will continue to work, we recommend updating to the
following structure:</xhtml:p>
<xhtml:pre>
<xhtml:code class="language-php">return [
    'dependencies' =&gt; [ /* ... */ ],
    'templates' =&gt; [
        'extension' =&gt; 'html.twig',
        'paths' =&gt; [
            'app' =&gt; ['templates/app'],
            'layout' =&gt; ['templates/layout'],
            'error' =&gt; ['templates/error'],
        ],
    ],
    'twig' =&gt; [
        'cache_dir' =&gt; 'data/cache/twig',
        'assets_url' =&gt; '/',
        'assets_version' =&gt; null,
        'extensions' =&gt; [
            // extension service names or instances
        ],
    ],
];
</xhtml:code>
</xhtml:pre>
<xhtml:h4>zend-view changes</xhtml:h4>
<xhtml:p>If you are upgrading from a previous release candidate, we
recommend making the following changes to your
<xhtml:code>config/autoload/templates.global.php</xhtml:code> file:</xhtml:p>
<xhtml:pre>
<xhtml:code class="language-php">return [
    'dependencies' =&gt; [
        'factories' =&gt; [
            /* ... */
            Zend\View\HelperPluginManager::class =&gt;
                Zend\Expressive\ZendView\HelperPluginManagerFactory::class,
        ],
    ],

    'templates' =&gt; [
        /* ... */
    ],

    // Also, add this key, to provide a place to register view helpers:
    'view_helpers' =&gt; [
        'aliases' =&gt; [ /* ... */ ],
        'invokables' =&gt; [ /* ... */ ],
        'factories' =&gt; [ /* ... */ ],
        // add other keys as necessary
    ],
]
</xhtml:code>
</xhtml:pre>
<xhtml:h3>Autoloading/structure changes</xhtml:h3>
<xhtml:p>If you want to bring your application fully up-to-date with the
expressive skeleton, you may want to consider creating a top-level
<xhtml:code>src/App/</xhtml:code> directory, and pushing your
<xhtml:code>Action/</xhtml:code> and other subdirectories under it, and
updating the <xhtml:code>App\\</xhtml:code> namespace autoloading entry in
<xhtml:code>composer.json</xhtml:code> to point to the new directory:</xhtml:p>
<xhtml:pre>
<xhtml:code># source trees become:
src/
    App/
        Action/
test/
    AppTest/
        Action/
</xhtml:code>
</xhtml:pre>
<xhtml:p>and the <xhtml:code>autoload</xhtml:code> and <xhtml:code>autoload-dev</xhtml:code>
sections of <xhtml:code>composer.json</xhtml:code> become:</xhtml:p>
<xhtml:pre>
<xhtml:code class="language-javascript">"autoload": {
    "psr-4": {
        "App\\": "src/App/",
    }
},
"autoload-dev": {
    "psr-4": {
        "AppTest\\": "test/AppTest/",
    }
}
</xhtml:code>
</xhtml:pre>
<xhtml:p>The above will allow you to start considering your middleware as
discrete units of functionality, and potentially allow you to port
them betweeen applications.</xhtml:p>
<xhtml:h2>Future</xhtml:h2>
<xhtml:p>In just two days, we've had quite a large number of users
reporting their feedback, and we're quite pleased that the majority
of the work done for RC4 centered around documentation! The release
has a lot of polish at this point, and we anticipate a stable
release in the next couple weeks.</xhtml:p>
<xhtml:p>If you are testing Expressive — whether for the first time, or
updating an existing application — please help us prepare it for
general availability!</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Expressive 1.0.0RC3 Released!]]></title>
    <published>2015-12-07T19:00:00+00:00</published>
    <updated>2015-12-07T19:00:00+00:00</updated>
    <link rel="alternate" type="text/html" href="http://framework.zend.com/blog/expressive-1-0-0rc3-released.html"/>
    <id>http://framework.zend.com/blog/expressive-1-0-0rc3-released.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>matthew@zend.com</email>
      <uri>http://mwop.net/</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>The Zend Framework community is pleased to announce the
immediate availability of Expressive 1.0.0rc3!</xhtml:p>
<xhtml:p>You can install it using <xhtml:a href="https://getcomposer.org">Composer</xhtml:a>, using the
<xhtml:code>create-project</xhtml:code> command:</xhtml:p>
<xhtml:pre>
<xhtml:code class="language-bash">$ composer create-project zendframework/zend-expressive-skeleton:1.0.0rc3@rc expressive
</xhtml:code>
</xhtml:pre>
<xhtml:p>If you're already using Expressive, read below for how to update
your application!</xhtml:p>
<xhtml:h2>Changes in RC3</xhtml:h2>
<xhtml:p>RC3 shows a number of improvements, including a number of
<xhtml:em>new components</xhtml:em> created in order to improve
interoperability with other <xhtml:a href="http://www.php-fig.org/psr/psr-7/">PSR-7</xhtml:a> middleware
solutions.</xhtml:p>
<xhtml:h3>New Components</xhtml:h3>
<xhtml:p>First, we split our routing and templating subcomponents into
their own repositories and packages:</xhtml:p>
<xhtml:ul>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zend-expressive-router">zendframework/zend-expressive-router</xhtml:a></xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zend-expressive-template">zendframework/zend-expressive-template</xhtml:a></xhtml:li>
</xhtml:ul>
<xhtml:p>These contain the code that was originally in
<xhtml:code>Zend\Expressive\Router</xhtml:code> and
<xhtml:code>Zend\Expressive\Template</xhtml:code> (with some additions; see
below), and the subcomponents were removed from the Expressive tree
entirely. Expressive now <xhtml:em>depends</xhtml:em> on these packages.
<xhtml:em>This separation allows users of other PSR-7 middleware stacks
to use the routing and templating interfaces, as well as their
implementations, within their chosen stack.</xhtml:em></xhtml:p>
<xhtml:p>Next, we created a new package, <xhtml:a href="https://github.com/zendframework/zend-expressive-helpers">zendframework/zend-expressive-helpers</xhtml:a>.
This package contains utility classes and middleware useful to
Expressive, but which could be useful to other PSR-7 frameworks as
well:</xhtml:p>
<xhtml:ul>
<xhtml:li><xhtml:code>Zend\Expressive\Helper\ServerUrlHelper</xhtml:code> provides a
class for generating fully-qualified URIs based on the current
request. When you provide a path to the helper, that path will be
resolved based on the current request scheme and target. This
helper depends on dedicated middleware to seed it with the current
request, which is also provided in the package.</xhtml:li>
<xhtml:li><xhtml:code>Zend\Expressive\Helper\UrlHelper</xhtml:code> provides a class
for generating URI paths based on the current
<xhtml:code>RouterInterface</xhtml:code> instance present, delegating to its
<xhtml:code>generateUri()</xhtml:code> method. It also has awareness of the
matched <xhtml:code>RouteResult</xhtml:code> (more on that later), allowing you
to generate "self" URIs, as well as URIs with partial parameters
based on the currently matched route.</xhtml:li>
</xhtml:ul>
<xhtml:p>You can read about the new helpers <xhtml:a href="http://zend-expressive.readthedocs.org/en/latest/helpers/intro/">in
the documentation</xhtml:a>.</xhtml:p>
<xhtml:h2>Fixes and Improvements</xhtml:h2>
<xhtml:h3>RouteResult observers</xhtml:h3>
<xhtml:p>In order to provide the functionality in
<xhtml:code>Zend\Expressive\Helper\UrlHelper</xhtml:code>, we needed a way to
inform classes of the routing results. To accomplish this, we added
the following to the zend-expressive-router package:</xhtml:p>
<xhtml:ul>
<xhtml:li>
<xhtml:code>Zend\Expressive\Router\RouteResultSubjectInterface</xhtml:code>,
which defines a class that will obtain a <xhtml:code>RouteResult</xhtml:code>
and notify observers; and</xhtml:li>
<xhtml:li>
<xhtml:code>Zend\Expressive\Router\RouteResultObserverInterface</xhtml:code>,
which defines a class that will be updated with a
<xhtml:code>RouteResult</xhtml:code>.</xhtml:li>
</xhtml:ul>
<xhtml:p><xhtml:code>Zend\Expressive\Application</xhtml:code> now implements the
<xhtml:code>RouteResultSubjectInterface</xhtml:code>, and
<xhtml:code>UrlHelper</xhtml:code> is an example of an observer.</xhtml:p>
<xhtml:p>The documentation <xhtml:a href="http://zend-expressive.readthedocs.org/en/latest/router/result-observers/">
now contains information on route result observers</xhtml:a>, should you
want more details on the feature.</xhtml:p>
<xhtml:p>A small number of fixes and improvements were also made during
the RC3 lifecycle.</xhtml:p>
<xhtml:h3>Create Middleware Pipelines</xhtml:h3>
<xhtml:p><xhtml:a href="https://github.com/michaelmoussa">Michael Moussa</xhtml:a>
provided a feature to allow specifying not just concrete
middleware, but <xhtml:em>arrays</xhtml:em> of middleware both when creating
routed middleware as well as when adding middleware to the
pre/post_routing middleware pipelines.</xhtml:p>
<xhtml:p>To illustrate:</xhtml:p>
<xhtml:pre>
<xhtml:code class="language-php">// Manually, for pipeline middleware:
$app-&gt;pipe('/api', [
    'Authentication',
    'Authorization',
    'ContentNegotiation',
    'Validation',
    'Resource',
]);

// Manually, for routed middleware:
$app-&gt;get('/api/resource[/{id:\d+}]', [
    'Authentication',
    'Authorization',
    'ContentNegotiation',
    'Validation',
    'Resource',
]);

// Via configuration, for pipeline middleware:
return [
    'middleware_pipeline' =&gt; [
        'pre_routing' =&gt; [
            [
                'path' =&gt; '/api',
                'middleware' =&gt; [
                    'Authentication',
                    'Authorization',
                    'ContentNegotiation',
                    'Validation',
                    'Resource',
                ],
            ],
        ],
    ],
];

// Via configuration, for routed middleware:
return [
    'routes' =&gt; [
        [
            'name' =&gt; 'api',
            'path' =&gt; '/api',
            'middleware' =&gt; [
                'Authentication',
                'Authorization',
                'ContentNegotiation',
                'Validation',
                'Resource',
            ],
            'allowed_method' =&gt; ['GET'],
        ],
    ],
];
</xhtml:code>
</xhtml:pre>
<xhtml:p>In each case, any individual middleware in the list may be a
callable middleware, or the name of a service that resolves as
middleware.</xhtml:p>
<xhtml:p>This feature should allow creating unique, complex middleware
pipelines based on specific routes a snap!</xhtml:p>
<xhtml:h3>Casting view models to arrays</xhtml:h3>
<xhtml:p>One feature users of zend-view wanted was the ability to pass
<xhtml:code>ViewModel</xhtml:code> instances to a renderer. Prior to RC3, if
you provided a view model, normalization would destroy any
variables stored in the view model due to improper casting. This
has now been resolved.</xhtml:p>
<xhtml:h3>Get the Full RouteResult</xhtml:h3>
<xhtml:p>The full <xhtml:code>RouteResult</xhtml:code> is now injected into the
request as the attribute
<xhtml:code>Zend\Expressive\Router\RouteResult</xhtml:code>.</xhtml:p>
<xhtml:h3>Fewer Silent Failures</xhtml:h3>
<xhtml:p>A contributor provided <xhtml:a href="https://github.com/zendframework/zend-expressive/pull/197">a
patch</xhtml:a> that improves the <xhtml:code>ApplicationFactory</xhtml:code> by
raising exceptions when key services are missing, instead of
silently ignoring them. While this is a small backwards
compatibility break, it provides important information that
previously led to hard-to-debug issues.</xhtml:p>
<xhtml:h3>Twig improvements</xhtml:h3>
<xhtml:p>The <xhtml:a href="https://github.com/zendframework/zend-expressive-twigrenderer">zendframework/zend-expressive-twigrenderer</xhtml:a>
package now allows you to register custom extensions. See the
<xhtml:a href="https://github.com/zendframework/zend-expressive-twigrenderer/releases/tag/0.3.0">
0.3.0 changelog for details</xhtml:a> (which is the first version
introducing this capability).</xhtml:p>
<xhtml:h3>zend-view improvements</xhtml:h3>
<xhtml:p>The <xhtml:a href="https://github.com/zendframework/zend-expressive-zendviewrenderer">
zendframework/zend-expressive-zendviewrenderer</xhtml:a> package had a
number of usability updates:</xhtml:p>
<xhtml:ul>
<xhtml:li>It now adds the zendframework/zend-i18n package as a
dependency, as it's a requirement of the PhpRenderer.</xhtml:li>
<xhtml:li>It now provides concrete <xhtml:code>ServerUrlHelper</xhtml:code> and
<xhtml:code>UrlHelper</xhtml:code> helper classes, as wrappers around the
zendframework/zend-expressive-helpers equivalents. This change
allowed reducing dependencies, and now allows the package to be
used without Expressive.</xhtml:li>
<xhtml:li>It now provides a factory for the
<xhtml:code>HelperPluginManager</xhtml:code>, allowing you to provide your own
instance, and thus custom helpers.</xhtml:li>
</xhtml:ul>
<xhtml:h3>Document Creating Custom 404 Handlers</xhtml:h3>
<xhtml:p><xhtml:a href="https://github.com/samsonasik">Abdul Malik Ikhsan</xhtml:a>
provided documentation covering how to create a custom 404 handler
for your application for logic such as logging. You <xhtml:a href="http://zend-expressive.readthedocs.org/en/latest/cookbook/#how-can-i-set-custom-404-page-handling">
can read it in the cookbook</xhtml:a>.</xhtml:p>
<xhtml:h2>Upgrading</xhtml:h2>
<xhtml:p>If you're already using Expressive, you'll want to upgrade! To
do so, you'll need to make a few changes to your application.</xhtml:p>
<xhtml:h3>Dependency updates</xhtml:h3>
<xhtml:ul>
<xhtml:li>Update <xhtml:code>zendframework/zend-expressive</xhtml:code> to
<xhtml:code>~1.0.0@rc || ^1.0</xhtml:code>. This will also make it easier to
upgrade to the stable version when it comes out.</xhtml:li>
<xhtml:li>Update any <xhtml:code>zendframework/zend-expressive-*</xhtml:code>
components to <xhtml:code>^1.0</xhtml:code>. These include your chosen router
and template system (if any).</xhtml:li>
<xhtml:li>Potentially add
<xhtml:code>zendframework/zend-expressive-helpers</xhtml:code> (at
<xhtml:code>^1.1</xhtml:code>), if you plan to use the <xhtml:code>UrlHelper</xhtml:code>
or <xhtml:code>ServerUrlHelper</xhtml:code>. (If you're using the zend-view
renderer, you'll already be getting this dependency.)</xhtml:li>
</xhtml:ul>
<xhtml:h3>Configuration changes</xhtml:h3>
<xhtml:p>The only configuration changes necessary are if you want to use
the new helpers. If you won't be, and you're not using zend-view,
you can skip this section.</xhtml:p>
<xhtml:p>First, add service entries for each to
<xhtml:code>config/autoload/dependencies.global.php</xhtml:code>:</xhtml:p>
<xhtml:pre>
<xhtml:code class="language-php">use Zend\Expressive\Helper;

return [
    'dependencies' =&gt; [
        'invokables' =&gt; [
            Helper\ServerUrlHelper::class =&gt; Helper\ServerUrlHelper::class,
            /* ... */
        ],
        'factories' =&gt; [
            Helper\UrlHelper::class =&gt; Helper\UrlHelperFactory::class,
            /* ... */
        ],
    ],
];
</xhtml:code>
</xhtml:pre>
<xhtml:p>Next, you'll need to add the <xhtml:code>ServerUrlMiddleware</xhtml:code> to
the midddleware pipeline. Edit
<xhtml:code>config/autoload/middleware-pipeline.global.php</xhtml:code> as
follows:</xhtml:p>
<xhtml:pre>
<xhtml:code class="language-php">use Zend\Expressive\Helper;

return [
    // This section will likely be new:
    'dependencies' =&gt; [
        'factories' =&gt; [
            Helper\ServerUrlMiddleware::class =&gt; Helper\ServerUrlMiddlewareFactory::class,
        ],
    ],
    // This section existed, but needs edits:
    'middleware_pipeline' =&gt; [
        'pre_routing' =&gt; [
            // Add the following:
            [ 'middleware' =&gt; ServerUrlMiddleware::class ],
            /* ... */
        ],
        'post_routing' =&gt; [
            /* ... */
        ],
    ],
];
</xhtml:code>
</xhtml:pre>
<xhtml:p>Once these changes are made, your application should now be
ready to use the helpers.</xhtml:p>
<xhtml:h2>Future</xhtml:h2>
<xhtml:p>We're very excited about this release! Thanks to a large number
of testers and users, we've been able to refine the offering, and
improve our ability to interoperate in the PSR-7 ecosystem. We feel
this version provides a nice sweet spot for the initial stable
features, and anticipate a stable release in the next couple
weeks.</xhtml:p>
<xhtml:p>If you are testing Expressive — whether for the first time, or
updating an existing application — please help us polish the
release and get it ready for general availability!</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Zend Framework 3 Update and Roadmap]]></title>
    <published>2015-11-25T21:45:00+00:00</published>
    <updated>2015-11-25T21:45:00+00:00</updated>
    <link rel="alternate" type="text/html" href="http://framework.zend.com/blog/zend-framework-3-update-and-roadmap.html"/>
    <id>http://framework.zend.com/blog/zend-framework-3-update-and-roadmap.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>matthew@zend.com</email>
      <uri>http://mwop.net/</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>In October, while at ZendCon, I presented a talk on Zend
Framework 3 entitled "Components, PSR-7, and Middleware: Zend
Framework 3." You can <xhtml:a href="http://weierophinney.github.io/2015-10-22-ZF3/">view it
online</xhtml:a>, but this post discusses current status, details some
decisions, and points to the work still to be done. It's a long
read; grab a warm beverage, maybe some popcorn, and take your
time.</xhtml:p>
<xhtml:h2>Prelude</xhtml:h2>
<xhtml:p>Zend Framework 3 is not just a new release of the framework.
It's an <xhtml:em>initiative</xhtml:em>, encompassing a number of strategies
and projects. Do not get hung up on when the main Zend Framework
repository will be tagged as 3.0; the MVC is just one part of an
overall plan. This post details those parts; many of them are
<xhtml:em>already accomplished.</xhtml:em> Hopefully, by the end of this post,
you'll see what you can already leverage, and what you <xhtml:em>may
already be leveraging.</xhtml:em></xhtml:p>
<xhtml:p>Mirroring my ZendCon presentation, I've broken this out into
four primary parts: Components, PSR-7, Middleware, and Zend
Framework 3.</xhtml:p>
<xhtml:h2>Components</xhtml:h2>
<xhtml:p>Zend Framework was originally envisioned and positioned as a
component library that <xhtml:em>also</xhtml:em> shipped an MVC framework.
Unlike <xhtml:a href="http://pear.php.net">PEAR</xhtml:a>, it was
all-or-nothing; if you wanted a single component, you downloaded
the entire framework; if you wanted to use the MVC framework, you
downloaded the entire framework. Over time, the MVC became the
predominant feature, and most code was written or adapted to ensure
the various components worked properly when used with the
framework, with very little emphasis on standalone usage.</xhtml:p>
<xhtml:p>When we started on ZF2, we essentially continued down this path.
However, early in the ZF2 development, <xhtml:a href="https://getcomposer.org">Composer</xhtml:a> emerged in the PHP
ecosystem, and we decided to leverage that both for distribution of
ZF itself, but also for its components. However, the
semi-manual/semi-automated approach we used made components
second-class citizens, requiring them to be versioned
simultaneously, resulting in slower releases.</xhtml:p>
<xhtml:p>As a result, a primary goal of the ZF3 initiatives was to split
the components into their own repositories, with their own
development cycles; the main Zend Framework repository then becomes
a meta-package, defining the individual components as dependencies,
but shipping no actual code.</xhtml:p>
<xhtml:p>The split took quite some time to orchestrate, but <xhtml:a href="https://mwop.net/blog/2015-05-15-splitting-components-with-git.html">
was accomplished in May</xhtml:a>, with the help of <xhtml:a href="https://github.com/gianarb">Gianluca Arbezzano</xhtml:a> and <xhtml:a href="http://www.corley.it/">Corley</xhtml:a>, and released as version
2.5.</xhtml:p>
<xhtml:p>I'll be following up this post with some of the benefits we've
gained from the split, but the overall point is that the separation
will help us improve components more granularly, expand the number
of contributors, and accelerate component development.</xhtml:p>
<xhtml:p>Composer has been wildly successful. It simplifies and
streamlines the ability to manage application dependencies, as well
as consume them in your code (by providing a common autoloader for
all dependencies). Our observation is that an increasing number of
developers and companies are choosing to piece together bespoke
frameworks targeted at their business needs using commodity
components. Splitting component lifecycles facilitates usage of ZF
components in these paradigms.</xhtml:p>
<xhtml:h2>PSR-7</xhtml:h2>
<xhtml:p><xhtml:a href="http://www.php-fig.org/psr/psr-7/">PSR-7</xhtml:a> (<xhtml:a href="http://www.php-fig.org/psr/psr-7/meta/">meta</xhtml:a>) defines a set of
HTTP message interfaces. PHP Standard Recommendations (PSR) are a
product of the <xhtml:a href="http://www.php-fig.org/">Framework Interop
Group</xhtml:a>, which exists to identify existing practices and
development approaches, and standardize them, with the goal of
increasing interoperability between frameworks and libraries.
Composer is the fruit of the very first PSR, <xhtml:a href="http://www.php-fig.org/psr/psr-0/">PSR-0</xhtml:a>, which provided a
common methodology around autoloading.</xhtml:p>
<xhtml:p>PSR-7 exists because PHP, for all its web centricity, does not
actually model HTTP messages. Most frameworks have provided message
abstraction of one form or another since 2005, but they all differ,
which means migrating from one framework or HTTP client library to
another — or even one <xhtml:strong>version</xhtml:strong> of such a project to
another — requires learning a new system for dealing with HTTP
messages.</xhtml:p>
<xhtml:p>Interestingly, other languages, including Python, Ruby, and
Node.js, <xhtml:em>do</xhtml:em> provide common HTTP message abstractions, and
the result is that code written targeting HTTP messages will
typically work regardless of the framework chosen. This leads to a
lot of cross-pollination, and allows developers to pick and choose
libraries based on their strengths and features, not on the
framework.</xhtml:p>
<xhtml:p>Many of us in the PHP community feel that HTTP message
abstractions should be a <xhtml:em>commodity</xhtml:em>.</xhtml:p>
<xhtml:p>PSR-7 accomplishes this, and code targeting PSR-7 can thus be
re-used by any framework or project that also consumes PSR-7.</xhtml:p>
<xhtml:p>PSR-7 was accepted in mid-May; the same day it was accepted, we
released:</xhtml:p>
<xhtml:ul>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zend-diactoros">Diactoros</xhtml:a>, a
PSR-7 implementation.</xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zend-stratigility">Stratigility</xhtml:a>,
a PSR-7 middleware foundation inspired by <xhtml:a href="https://github.com/senchalabs/connect">Sencha Connect</xhtml:a>.</xhtml:li>
</xhtml:ul>
<xhtml:p>We feel that PSR-7 is the future of PHP interoperability when
writing HTTP-centric applications, and these components form a
foundation for projects that choose to target PSR-7.</xhtml:p>
<xhtml:h2>Middleware and Expressive</xhtml:h2>
<xhtml:p>When describing Stratigility in the previous section, I used the
term "middleware." What is middleware?</xhtml:p>
<xhtml:p>Middleware is, quite simply, code sitting between an incoming
HTTP request, and the outgoing HTTP response. There are a number of
different middleware signatures floating around (subject for a
pending blog post!), but the one we've implemented in Stratigility
is:</xhtml:p>
<xhtml:pre>
<xhtml:code class="language-php">function (
    ServerRequestInterface $request
    ResponseInterface $response,
    callable $next
) : ResponseInterface
</xhtml:code>
</xhtml:pre>
<xhtml:p>where <xhtml:code>$next</xhtml:code> can be used to invoke the next
middleware in the system, if any. This same signature is being
adopted by a number of emerging PSR-7 centric projects such as
<xhtml:a href="http://relayphp.com">Relay</xhtml:a>, and <xhtml:a href="http://www.slimframework.com/2015/02/11/whats-up-with-version-3.html">
Slim v3</xhtml:a>.</xhtml:p>
<xhtml:p><xhtml:a href="http://framework.zend.com/expressive">Expressive</xhtml:a> is
a new <xhtml:em>microframework</xhtml:em> for building PSR-7 middleware
applications.</xhtml:p>
<xhtml:p>Built on top of Stratigility, Expressive is meant to provide
minimal plumbing for your applications. A primary goal is to allow
<xhtml:em>you</xhtml:em> to choose the components you want, and then to provide
minimal wiring to get you started. It provides:</xhtml:p>
<xhtml:ul>
<xhtml:li>typehinting against <xhtml:a href="https://github.com/container-interop/container-interop">container-interop</xhtml:a>
allowing <xhtml:em>you</xhtml:em> to select a service container from which to
pull middleware once matched.</xhtml:li>
<xhtml:li>a <xhtml:code>RouterInterface</xhtml:code>, and several implementations, so
you can choose a routing implementation that best suits your
application needs.</xhtml:li>
<xhtml:li>a <xhtml:code>TemplateRendererInterface</xhtml:code>, and several
implementations, so you can choose a template engine that suits the
needs of the middleware you write that may use templating — and
allow you to swap out engines seamlessly.</xhtml:li>
<xhtml:li>an error handling mechanism, and choices for how to handle
errors in both development and production.</xhtml:li>
</xhtml:ul>
<xhtml:p>We leverage Composer's installation hooks to prompt you for your
choices (thanks for the contribution, <xhtml:a href="https://xtreamwayz.com">Geert</xhtml:a>!), so that once you install the
Expressive skeleton, you're prepared to start developing
immediately.</xhtml:p>
<xhtml:p>Expressive is currently in release candidate status, and we hope
to finalize a stable release soon!</xhtml:p>
<xhtml:p>We like middleware because:</xhtml:p>
<xhtml:ul>
<xhtml:li>it tends to be very focused and small, and thus readily
understood.</xhtml:li>
<xhtml:li>it adapts the <xhtml:a href="https://en.wikipedia.org/wiki/Unix_philosophy">Unix philosphy</xhtml:a>
(creating complex behavior by piping messages between
single-purpose tools) to HTTP applications.</xhtml:li>
<xhtml:li>it tends to be quite performant.</xhtml:li>
</xhtml:ul>
<xhtml:p>Any middleware that targets PSR-7 also gains the ability to
interop with any other system targeting PSR-7. This means that the
ecosystem for middleware users is not a single framework, but any
framework that uses PSR-7. We're already seeing <xhtml:a href="http://github.com/oscarotero/psr7-middlewares">amazing middleware
libraries</xhtml:a> popping up, and these will work <xhtml:em>across the PHP
ecosystem</xhtml:em>. Providing a middleware microframework via
Expressive allows our users to capitalize on this.</xhtml:p>
<xhtml:h2>Zend Framework 3</xhtml:h2>
<xhtml:p>For many, "Zend Framework 3" means the MVC framework; as such,
much of the above may feel like a sideshow, not the main thrust of
the new version. This is a misconception.</xhtml:p>
<xhtml:p>We decided early this year that we will <xhtml:em>not</xhtml:em> be changing
the MVC significantly.</xhtml:p>
<xhtml:p>When we went from version 1 to version 2, we did a complete
rewrite of the MVC. While the new MVC is architecturally superior,
its completely different structure meant there was zero way to
automate migration, which left many ZF1 users stranded. We did not
want to repeat this mistake.</xhtml:p>
<xhtml:p>Additionally, the primary issues around the current MVC are:</xhtml:p>
<xhtml:ul>
<xhtml:li>performance</xhtml:li>
<xhtml:li>interoperability (specifically, ability to use middleware)</xhtml:li>
</xhtml:ul>
<xhtml:p>These are things we <xhtml:em>can</xhtml:em> tackle, while retaining most,
if not all, backwards compatibility.</xhtml:p>
<xhtml:p>As such, the primary changes we identified were:</xhtml:p>
<xhtml:ul>
<xhtml:li>zend-servicemanager performance</xhtml:li>
<xhtml:li>zend-eventmanager performance</xhtml:li>
<xhtml:li>ability to dispatch PSR-7 middleware</xhtml:li>
<xhtml:li>reduction of dependencies</xhtml:li>
</xhtml:ul>
<xhtml:h3>ServiceManager</xhtml:h3>
<xhtml:p>We feel zend-servicemanager offers some unique features that are
not found in other containers:</xhtml:p>
<xhtml:ul>
<xhtml:li>lazy services</xhtml:li>
<xhtml:li>delegator services</xhtml:li>
<xhtml:li>interface injection (via initializers)</xhtml:li>
<xhtml:li>abstract factories</xhtml:li>
</xhtml:ul>
<xhtml:p>As such, there are tremendous reasons to choose it over other
containers. However, when you have large object graphs, and if
you're heavily using features such as abstract factories and
initializers, the design in v2 can become tremendously slow.</xhtml:p>
<xhtml:p><xhtml:a href="http://www.michaelgallego.fr">Michäel Gallego</xhtml:a> did
some deep analysis of the service manager, and identified ways the
performance could be radically improved, providing a hefty patch to
do so. The main issue was that much of the code for loading
services was checking for state changes in the container; as such,
the main thrust of the patch Michäel provided was to have state
changes — additions of factories to the container — reconfigure the
container, so that <xhtml:em>pulling</xhtml:em> from the container becomes
cheap. The result is a 4X performance boost that is <xhtml:em>mostly</xhtml:em>
backwards compatible!</xhtml:p>
<xhtml:p>There are a few BC breaks with this change, however, which means
any component that provides factories is requiring updates to be
compatible. These are mostly minor, and we're currently working on
ways we may be able to make code forwards compatible while
retaining backwards compatibility.</xhtml:p>
<xhtml:p>You can read about the changes in the <xhtml:a href="https://github.com/zendframework/zend-servicemanager/blob/develop/doc/book/migration.md">
migration guide</xhtml:a>.</xhtml:p>
<xhtml:h3>EventManager</xhtml:h3>
<xhtml:p>Similarly, zend-eventmanager is a unique offering, providing
mechanisms for:</xhtml:p>
<xhtml:ul>
<xhtml:li>intercepting filters</xhtml:li>
<xhtml:li>subject/observer</xhtml:li>
<xhtml:li>signal slots</xhtml:li>
<xhtml:li>events</xhtml:li>
</xhtml:ul>
<xhtml:p>In order to accomplish this, however, it has a lot of code
around checking for changes in shared listeners. Additionally, it
has leveraged shared solutions such as the
<xhtml:code>PriorityQueue</xhtml:code> implementation in zend-stdlib, which
provide necessary features, but often at a performance cost.</xhtml:p>
<xhtml:p>Michäel Gallego, along with <xhtml:a href="http://www.zimuel.it">Enrico Zimuel</xhtml:a>, performed comprehensive
profiling, and provided a refactor of the component that resulted
in 4X performance benefits!</xhtml:p>
<xhtml:p>You can read about the changes in the <xhtml:a href="https://github.com/zendframework/zend-eventmanager/tree/develop/doc/book/migration">
migration guide</xhtml:a>. Of particular interest is that the 2.7 version
provides forwards compatibility features allowing you to prepare
your applications <xhtml:em>now</xhtml:em> for version 3!</xhtml:p>
<xhtml:h3>Dispatching Middleware</xhtml:h3>
<xhtml:p>As noted in the previous section on PSR-7, we feel that the
future of PHP web applications is in middleware. We want users to
benefit from the middleware ecosystem, but also to migrate to it.
To enable this, we decided to build a
<xhtml:code>MiddlewareListener</xhtml:code> for zend-mvc.</xhtml:p>
<xhtml:p>First, though, we had to build <xhtml:a href="https://github.com/zendframework/zend-psr7bridge">a PSR-7
bridge</xhtml:a>, to allow translation of the zend-http request and
response messages already present in zend-mvc to PSR-7, and vice
versa. (We chose <xhtml:em>not</xhtml:em> to use PSR-7 directly in zend-mvc, as
doing so would require changes anywhere you were previously using
the request and/or response objects.) This code can be used now,
anywhere you need to do such translations.</xhtml:p>
<xhtml:p>With that out of the way, we developed the
<xhtml:code>MiddlewareListener</xhtml:code>. In v3, this will be registered by
default, at a higher priority than the standard
<xhtml:code>DispatchListener</xhtml:code>. If it detects a
<xhtml:code>middleware</xhtml:code> key in the route matches, it will pull that
middleware from the container and dispatch it, using the PSR-7
bridge; otherwise, it will return early, allowing the
<xhtml:code>DispatchListener</xhtml:code> to take over.</xhtml:p>
<xhtml:p>The <xhtml:code>MiddlewareListener</xhtml:code> thus becomes your migration
path from the zend-mvc to Expressive or other middleware stacks,
but also allows you to compose middleware from the greater
ecosystem in your zend-mvc applications!</xhtml:p>
<xhtml:p>This feature is available currently on the develop branch of
zend-mvc, and will be released with v3 of that component.</xhtml:p>
<xhtml:h3>Reducing Dependencies</xhtml:h3>
<xhtml:p>Currently, the framework repository requires <xhtml:em>every</xhtml:em> Zend
Framework component (except the new ones such as Diactoros,
Stratigility, Expressive, and the PSR-7 bridge). This poses a
problem: what if we want to update another component earlier than
others? How will users then opt-in to such new versions?</xhtml:p>
<xhtml:p>As an example, we're pushing back plans for refactoring the
filter, validator, input filter, and form components, as the
proposed changes will take quite some time. However, not every
application <xhtml:em>needs</xhtml:em> these facilities, and those that do
<xhtml:em>should</xhtml:em> be able to selectively upgrade. But if we pin to
semantic versions — e.g., <xhtml:code>~3.0</xhtml:code> — users will not be
able to do so until the framework upgrades, making it an all or
nothing approach.</xhtml:p>
<xhtml:p>As such, we've decided to change the requirements for zend-mvc,
the framework repository, and the skeleton to the bare minimum
needed for an MVC application. We're still scoping this effort,
however, so there's time to get your feedback considered.</xhtml:p>
<xhtml:p>This will, of course, affect existing applications. You will
need to add in dependencies that previously were assumed. Composer,
however, makes these relatively trivial:</xhtml:p>
<xhtml:pre>
<xhtml:code class="language-bash">$ composer require zendframework/zend-form
$ composer require zendframework/zend-session
$ composer require zendframework/zend-paginator
</xhtml:code>
</xhtml:pre>
<xhtml:p>The more problematic part of this will be registration of
abstract factories, plugin managers, etc. We're still working on a
plan for that, and encourage you <xhtml:a href="https://github.com/zendframework/zend-mvc/issues/46">to share any
ideas you might have around it</xhtml:a>.</xhtml:p>
<xhtml:h2>Documentation</xhtml:h2>
<xhtml:p>One area where Zend Framework is consistently criticized is its
documentation.</xhtml:p>
<xhtml:ul>
<xhtml:li>We don't have enough documentation</xhtml:li>
<xhtml:li>Documentation isn't updated to reflect new features.</xhtml:li>
<xhtml:li>Documentation doesn't detail how to consume a component within
the MVC framework; or</xhtml:li>
<xhtml:li>Documentation doesn't detail how to use the component
standalone.</xhtml:li>
</xhtml:ul>
<xhtml:p>With the split to component repositories, we can tackle some of
this more easily. We are in the process of moving all documentation
into the relevant component repositories, which allows us to block
merging of features based on lack of contributed documentation.
This will help us keep the documentation up-to-date.</xhtml:p>
<xhtml:p>However, we need help <xhtml:em>writing</xhtml:em> documentation. We need
<xhtml:em>you</xhtml:em> to indicate what documentation you feel is missing —
and, better yet, <xhtml:em>contribute</xhtml:em> that documentation, to help
others in the same situation. One reflection I've made is that
writing documentation often also points to ways to improve the
code; don't discount writing documentation as a non-coding
activity!</xhtml:p>
<xhtml:p>The documentation migration is being faciliated by <xhtml:a href="http://blog.hock.in">Gary Hockin</xhtml:a>. He is automating the
migration via a series of scripts, and also creating issues on each
repository indicating common updates that need to happen to fully
complete the transition from reStructured Text to Markdown. You can
help by perusing the list available at the link below, and
submitting pull requests:</xhtml:p>
<xhtml:ul>
<xhtml:li><xhtml:a href="https://github.com/issues?utf8=%E2%9C%93&amp;q=is:open+is:issue+org:zendframework+label:documentation+label:EasyFix">
Documentation migration issue list</xhtml:a></xhtml:li>
</xhtml:ul>
<xhtml:p>At the time of writing, he has not yet run the script over all
repositories, but indicates that he should accomplish this feat
within the next 10 days; as such, keep checking that link!</xhtml:p>
<xhtml:h2>Roadmap</xhtml:h2>
<xhtml:p>As noted, we've made significant progress since announcing the
ZF3 initiative in March. We still have a ways to go, however:</xhtml:p>
<xhtml:ul>
<xhtml:li>We're still finalizing changes to Expressive prior to a stable
release.</xhtml:li>
<xhtml:li>We're only halfway through the <xhtml:a href="https://github.com/zendframework/maintainers/wiki/ZF3-code-refactoring">
list of components needing service manager and/or event manager
migrations</xhtml:a>, and could use some assistance completing this task.
We cannot do a zend-mvc beta currently until this is done.</xhtml:li>
<xhtml:li>We're still identifying what components will be considered
"core" to the MVC, and could <xhtml:a href="https://github.com/zendframework/zend-mvc/issues/46">use your
feedback</xhtml:a>.</xhtml:li>
<xhtml:li>Related, we're still identifying what components will be
considered "core" to the framework, if the list is not identical to
those in the MVC; again, <xhtml:a href="https://github.com/zendframework/zf2/issues/7646">feedback is
welcome</xhtml:a>.</xhtml:li>
</xhtml:ul>
<xhtml:p>For a number of considerations, we cannot at this time create a
date-based roadmap; we will do releases when code is ready and
meets the project quality guidelines. The links above, and in the
documentation section, provide ways that you can help; the more
help we get, the sooner we can potentially release.</xhtml:p>
<xhtml:h2>Closing Notes</xhtml:h2>
<xhtml:p>First, this post was long, and also long overdue. My plan going
forward is to provide bi-weekly updates on the <xhtml:a href="http://framework.zend.com/blog/">Zend Framework blog</xhtml:a>, so that
you, Zend Framework's users and development community, can keep
track of progress. In those, I will also be listing areas where we
can particularly use contributions. Be aware, however, that with
holidays coming up in many countries, that progress will be slow in
the short-term.</xhtml:p>
<xhtml:p>We're very excited about the Zend Framework 3
<xhtml:em><xhtml:strong>initiative</xhtml:strong></xhtml:em>. It's a change in direction
for the framework, returning to its roots as a component library
first, which happens to also provide a full-stack framework.</xhtml:p>
<xhtml:p>We see ZF3 as a movement: an end to framework silos, by
providing quality, commodity code that can be used everwhere and
anywhere. An end to saying "I'm a ZF developer," or "I'm a Laravel
developer," and a return to, "I'm a PHP developer." We hope you'll
help us complete that journey!</xhtml:p>
</xhtml:div>
    </content>
  </entry>
</feed>
