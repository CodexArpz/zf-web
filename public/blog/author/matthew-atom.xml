<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">Author: Matthew Weier O'Phinney - ZF Blog</title>
  <updated>2014-03-12T18:00:00+0000</updated>
  <generator uri="http://framework.zend.com" version="2">Zend_Feed_Writer</generator>
  <link rel="alternate" type="text/html" href="http://framework.zend.com/blog/author/matthew.html"/>
  <link rel="self" type="application/atom+xml" href="http://framework.zend.com/blog/author/matthew-atom.xml"/>
  <id>http://framework.zend.com/blog/author/matthew.html</id>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Zend Framework 2.3.0 Released!]]></title>
    <published>2014-03-12T18:00:00+0000</published>
    <updated>2014-03-12T18:00:00+0000</updated>
    <link rel="alternate" type="text/html" href="http://framework.zend.com/blog/zend-framework-2-3-0-released.html"/>
    <id>http://framework.zend.com/blog/zend-framework-2-3-0-released.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>matthew@zend.com</email>
      <uri>http://mwop.net/</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>The Zend Framework community is pleased to announce the
immediate availability of Zend Framework 2.3.0!</xhtml:p>
<xhtml:ul>
<xhtml:li><xhtml:a href="/downloads/latest">http://framework.zend.com/downloads/latest</xhtml:a></xhtml:li>
</xhtml:ul>
<xhtml:p>This is our first minor release in 10 months, providing the
first new features since May of 2013.</xhtml:p>
<xhtml:p>Among those features, we've updated our minimum supported PHP
version to 5.3.23, fixed a large number of issues with how form
collections work, improved performance of the service manager, and
much, much more.</xhtml:p>
<xhtml:h2>New minimum supported PHP version</xhtml:h2>
<xhtml:p>This release ups the minimum required PHP version from 5.3.3 to
<xhtml:strong>5.3.23</xhtml:strong>. Making this change affords the
following:</xhtml:p>
<xhtml:ul>
<xhtml:li>
<xhtml:p>5.3.9 and up have a fix that allows a class to implement
multiple interfaces that define the same method, so long as the
signatures are compatible. Prior to that version, doing so raised a
fatal error. This change is necessary in order to solve a problem
with separated interface usage in the framework.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p>5.3.23 contains a fix for <xhtml:a href="https://bugs.php.net/bug.php?id=52861">PHP bug #62672</xhtml:a>.
Adopting this version or greater will allow us to (eventually)
remove polyfill support that works around the symptoms of that
issue.</xhtml:p>
</xhtml:li>
</xhtml:ul>
<xhtml:h2>New Additions / Improvements</xhtml:h2>
<xhtml:p>More than 230 pull requests and issues were closed for this
release -- far too many to list individually. That said, there are
quite a few incremental improvements that will be of interest to
Zend Framework 2 users. Below is a list broken down by
component.</xhtml:p>
<xhtml:h3>Zend\Authentication</xhtml:h3>
<xhtml:ul>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/4815">#4815</xhtml:a>
promotes <xhtml:code>Zend\AuthenticationService\Adapter\Http</xhtml:code>'s
<xhtml:code>_challengeClient()</xhtml:code> method to public visibility, and
renames it to <xhtml:code>challengeClient()</xhtml:code>; the old method
remains as a proxy to the new one. This allows implementors to
issue the HTTP credential challenge manually.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5901">#5901</xhtml:a> adds
an <xhtml:code>AuthenticationServiceInterface</xhtml:code>, to allow alternate
implementations.</xhtml:p>
</xhtml:li>
</xhtml:ul>
<xhtml:h3>Zend\Cache</xhtml:h3>
<xhtml:ul>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/4512">#4512</xhtml:a>
introduces a <xhtml:code>BlackHole</xhtml:code> cache storage adapter; this
adapter is useful during development, when you do not want cache
operations to have effect, but need to test that a system using
caching works.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:code>Zend\Cache\Storage\Adapter\Apc</xhtml:code> now supports "check
and set" operations, per <xhtml:a href="https://github.com/zendframework/zf2/issues/4844">#4844</xhtml:a>.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5829">#5829</xhtml:a> adds a
new cache adapter, <xhtml:code>Memcache</xhtml:code> (not to be confused with
<xhtml:code>Memcached</xhtml:code>), for use with
<xhtml:code>ext/memcache</xhtml:code>.</xhtml:p>
</xhtml:li>
</xhtml:ul>
<xhtml:h3>Zend\Code</xhtml:h3>
<xhtml:ul>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/4989">#4989</xhtml:a> adds
the ability to identify PHP traits in the
<xhtml:code>TokenArrayScanner</xhtml:code>.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/6262">#6262</xhtml:a> adds a
<xhtml:code>getPrototype()</xhtml:code> method to
<xhtml:code>MethodReflection</xhtml:code>; this returns a structured array
detailing the namespace, class, visibility, and arguments
(including names, default values, and types) for the method.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5400">#5400</xhtml:a> adds
the capability for the <xhtml:code>PropertyScanner</xhtml:code> to determine
the PHP type of a given object property, via the new method
<xhtml:code>getValueType()</xhtml:code>.</xhtml:p>
</xhtml:li>
</xhtml:ul>
<xhtml:h3>Zend\Config</xhtml:h3>
<xhtml:ul>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/4824">#4824</xhtml:a> adds a
<xhtml:code>JavaProperties</xhtml:code> configuration reader.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/4860">#4860</xhtml:a>
provides an abstract factory for retrieving named top-level
configuration keys from the <xhtml:code>Config</xhtml:code> service. As an
example, if you have a key <xhtml:code>zf-apigility</xhtml:code>, you can now
retrieve it from the service manager using
<xhtml:code>config-zf-apigility</xhtml:code> or
<xhtml:code>zf-apigility-config</xhtml:code>. Namespaces are also often-used
for top-level keys, and notations such as
<xhtml:code>ZF\Apigility\Config</xhtml:code> may be used, too.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p>A number of improvements were made to the <xhtml:code>PhpArray</xhtml:code>
config writer to make the output it generates more readable, as
well as more consistent with the values being passed as input.
These include consistent 4-space indentation; putting the opening
<xhtml:code>array</xhtml:code> declarations on the same line as
<xhtml:code>=&gt;</xhtml:code> operators; ensuring boolean values are written
as booleans; ensuring strings are written with proper, and
readable, escapeing; allowing writing arrays using PHP 5.4
short-array syntax; and making attempts to replace paths using
<xhtml:code>__DIR__</xhtml:code> notation when possible.</xhtml:p>
</xhtml:li>
</xhtml:ul>
<xhtml:h3>Zend\Console</xhtml:h3>
<xhtml:ul>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/4449">#4449</xhtml:a> moves
the console routing logic out of <xhtml:code>Zend\Mvc</xhtml:code> and into
<xhtml:code>Zend\Console\ConsoleRouteMatcher</xhtml:code>. This allows re-use
of the <xhtml:code>Zend\Console</xhtml:code> component in a standalone fashion.
<xhtml:code>Zend\Mvc\Router\Console\Simple</xhtml:code> was refactored to
consume a <xhtml:code>ConsoleRouteMatcher</xhtml:code> instance internally.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/4606">#4606</xhtml:a> adds
support for <xhtml:code>Zend\Console</xhtml:code> to detect the console
encoding, and use that when emitting text.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5711">#5711</xhtml:a>
implements the <xhtml:code>writeTextBlock()</xhtml:code> method in the
<xhtml:code>AbstractAdapter</xhtml:code>, allowing the ability to specify a
block size and text to wrap within that block when generating
console output.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5720">#5720</xhtml:a> fixes
console routing to ensure CamelCase values in routes will be
treated as literals, and ALLCAPS can be used to define value
parameters.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5713">#5713</xhtml:a> adds
the ability to specify option callback hooks in
<xhtml:code>Zend\Console\Getopt</xhtml:code>. As examples:</xhtml:p>
</xhtml:li>
</xhtml:ul>
<xhtml:pre>
<xhtml:code>
$opts-&gt;setOptionCallback('apple' function ($value, $opts) {
      echo "You want a $value apple!\n";
});
</xhtml:code>
</xhtml:pre>
<xhtml:p>Essentially, once <xhtml:code>parse()</xhtml:code> is called, if the
specified option was provided, the callback will be triggered.
Returning a boolean <xhtml:code>false</xhtml:code> will cause cause
<xhtml:code>parse()</xhtml:code> to invalidate usage, raising an exception.</xhtml:p>
<xhtml:h3>Zend\Crypt</xhtml:h3>
<xhtml:ul>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zf2/issues/5024">#5024</xhtml:a>
removes the <xhtml:code>KEY_DERIV_HMAC</xhtml:code> constant, and allows the
ability to specify alternate PBKDF2 hashing algorithms within the
<xhtml:code>Zend\Crypt\BlockCipher</xhtml:code> class.</xhtml:li>
</xhtml:ul>
<xhtml:h3>Zend\Db</xhtml:h3>
<xhtml:ul>
<xhtml:li><xhtml:code>Zend\Db\Sql</xhtml:code> with MySQL can utilize a
<xhtml:code>Select</xhtml:code> object containing an <xhtml:code>OFFSET</xhtml:code>
without <xhtml:code>LIMIT</xhtml:code></xhtml:li>
<xhtml:li><xhtml:code>Zend\Db\Sql</xhtml:code>'s <xhtml:code>In</xhtml:code> predicate now
supports subselects</xhtml:li>
<xhtml:li><xhtml:code>Zend\Db\Sql</xhtml:code> now has a <xhtml:code>NotIn</xhtml:code>
predicate.</xhtml:li>
<xhtml:li>A method <xhtml:code>inTransaction()</xhtml:code> has been added to all
<xhtml:code>Zend\Db\Adapter</xhtml:code> drivers</xhtml:li>
<xhtml:li><xhtml:code>Zend\Db\Sql\Select</xhtml:code>'s <xhtml:code>from()</xhtml:code> can be a
subselect</xhtml:li>
<xhtml:li><xhtml:code>Zend\Db\Sql\Insert</xhtml:code> can use a Select object as the
value source <xhtml:code>(INSERT INTO ... SELECT)</xhtml:code></xhtml:li>
<xhtml:li><xhtml:code>Zend\Db\Adapter</xhtml:code> PDO now accepts a charset when
creating the DSN</xhtml:li>
</xhtml:ul>
<xhtml:h3>Zend\Dom</xhtml:h3>
<xhtml:ul>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zf2/issues/5356">#5356</xhtml:a>
provides a backwards-compatible rewrite of the
<xhtml:code>Zend\Dom\Query</xhtml:code> component and logic. It presents a new
class, <xhtml:code>Zend\Dom\Document</xhtml:code>, along with a subcomponent of
the same name containing new <xhtml:code>Query</xhtml:code> and
<xhtml:code>Nodelist</xhtml:code> classes. Usage becomes:</xhtml:li>
</xhtml:ul>
<xhtml:pre>
<xhtml:code>
use ZendDomDocument;
$document = new Document($htmlXmlOrFile, $docType, $encoding);
foreach (DocumentQuery($expression, $document, $xpathOrCssQueryType) as $match) {
    // do something with matching DOMNode
}
// More concretely:
$document = new Document($someHtml, 'DOC_HTML', 'utf-8');
foreach (DocumentQuery('img.current', $document, 'TYPE_CSS') as $match) {
    $source = $document-&gt;attributes-&gt;getNamedItem('src');
}
</xhtml:code>
</xhtml:pre>
<xhtml:p><xhtml:code>Zend\Dom\Query</xhtml:code> and <xhtml:code>Zend\Dom\Css2Xpath</xhtml:code>
have been deprecated in favor of the new API.
<xhtml:code>Zend\Test\PHPUnit</xhtml:code> still needs to be updated to use the
new API, however.</xhtml:p>
<xhtml:h3>Zend\EventManager</xhtml:h3>
<xhtml:ul>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zf2/issues/5283">#5283</xhtml:a>
deprecates the <xhtml:code>ProvidesEvents</xhtml:code> trait in favor of the
<xhtml:code>EventManagerAwareTrait</xhtml:code>; the latter is named after the
interface it implements, and includes the now standard
<xhtml:code>Trait</xhtml:code> suffix.</xhtml:li>
</xhtml:ul>
<xhtml:h3>Zend\Filter</xhtml:h3>
<xhtml:ul>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zf2/issues/5436">#5436</xhtml:a>
refactors <xhtml:code>Zend\Filter</xhtml:code> to ensure consistency throughout
the component. Filters now never trigger errors or throw
exceptions; if a filter cannot handle an incoming input, it will
return it unmodified.</xhtml:li>
</xhtml:ul>
<xhtml:h3>Zend\Form</xhtml:h3>
<xhtml:ul>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/4400">#4400</xhtml:a> allows
you to pass the string name of the element you want to create as
the second argument when using
<xhtml:code>Zend\Form\FormElementManager::get()</xhtml:code> - instead of
requiring that you pass it in as <xhtml:code>array('name' =&gt; 'name
value')</xhtml:code>.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p>The <xhtml:code>Zend\Form</xhtml:code> component has had a number of
improvements surrounding HTML escaping and form labels. Among these
is the addition of <xhtml:code>LabelAwareInterface</xhtml:code>, which defines
methods for an element or fieldset to provide a label, label
attributes, and label options (one of which is the option
<xhtml:code>disable_html_escape</xhtml:code>, allowing developers to provide
markup within the label text). Many efforts have been made to keep
this functionality backwards compatible, while simultaneously
ensuring that proper defaults are provided.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p>Numerous improvements were made to how form Collections are
managed, including improvements to counts, managing input filters,
handling nested sets, binding objects, and more.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5918">#5918</xhtml:a>
ensures that multiple CSRF elements on the same page with the same
name should not conflict, and still validate.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/4846">#4846</xhtml:a> adds
the ability to disable the <xhtml:code>InArray</xhtml:code> validator when
defining a <xhtml:code>MultiCheckbox</xhtml:code> form element.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/4884">#4884</xhtml:a>
provides the ability to replace elements within a form
collection.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/4927">#4927</xhtml:a> adds
the ability to provide a <xhtml:code>Traversable</xhtml:code> value to a nested
fieldset in a form.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/4971">#4971</xhtml:a>
updates the form factory to allow specifying <xhtml:code>null</xhtml:code>
configuration values. This allows one module to override and cancel
the setting of another when desired.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5420">#5420</xhtml:a> adds
the ability to compose <xhtml:code>Zend\Form</xhtml:code> collections via
annotations.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5456">#5456</xhtml:a> adds
the ability for annotations to provide input filter specifications
when provided on an object representing a fieldset.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5562">#5562</xhtml:a> adds
the <xhtml:code>unsetValueOption()</xhtml:code> method to <xhtml:code>Select</xhtml:code>
and <xhtml:code>MultiCheckbox</xhtml:code> element types.</xhtml:p>
</xhtml:li>
</xhtml:ul>
<xhtml:h3>Zend\Http</xhtml:h3>
<xhtml:ul>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/4950">#4950</xhtml:a> adds
<xhtml:code>match()</xhtml:code> capabilities to the <xhtml:code>ContentType</xhtml:code>
header class, similar to the implementation for <xhtml:code>Accept</xhtml:code>
header instances. This allows matching incoming data against a
mimetype in order to perform content negotiation.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5029">#5029</xhtml:a> adds a
new header class for <xhtml:code>Origin</xhtml:code> headers.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5316">#5316</xhtml:a> adds a
new header class for <xhtml:code>Content-Security-Policy</xhtml:code>
headers.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5732">#5732</xhtml:a> adds
the ability to set custom HTTP response status codes via a new
<xhtml:code>Response</xhtml:code> method,
<xhtml:code>setCustomStatusCode()</xhtml:code>.</xhtml:p>
</xhtml:li>
</xhtml:ul>
<xhtml:h3>Zend\I18n</xhtml:h3>
<xhtml:ul>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/4510">#4510</xhtml:a>
introduces <xhtml:code>Zend\I18n\Filter\NumberParse</xhtml:code>, which will
filter a string parseable by PHP's built-in
<xhtml:code>NumberFormatter</xhtml:code> to a number.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5034">#5034</xhtml:a> makes
the <xhtml:code>PhoneNumber</xhtml:code> validator
<xhtml:code>Locale</xhtml:code>-aware.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5108">#5108</xhtml:a>
introduces a <xhtml:code>TranslatorInterface</xhtml:code>, defining the methods
<xhtml:code>translate()</xhtml:code> and <xhtml:code>translatePlural()</xhtml:code>. This
will allow for alternate implementations, but also for other
components to create equivalent, component-specific interfaces, and
thus reduce dependencies.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5825">#5825</xhtml:a> adds a
new translation loader, <xhtml:code>PhpMemoryArray</xhtml:code>. It behaves
like the <xhtml:code>PhpArray</xhtml:code> loader, but instead of accepting a
file that returns an array, it accepts an array of translations
directly. This allows specifying translations as part of
configuration, or via a caching system.</xhtml:p>
</xhtml:li>
</xhtml:ul>
<xhtml:h3>Zend\InputFilter</xhtml:h3>
<xhtml:ul>
<xhtml:li>A number of updates were made regarding how collection input
filters work to ensure they are more consistent, and operate
according to user expectations with regard to empty sets, nested
sets, etc.</xhtml:li>
</xhtml:ul>
<xhtml:h3>Zend\Json</xhtml:h3>
<xhtml:ul>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zf2/issues/5933">#5933</xhtml:a>
provides the ability to use arbitrary response codes with
<xhtml:code>Zend\Json\Server</xhtml:code>.</xhtml:li>
</xhtml:ul>
<xhtml:h3>Zend\Loader</xhtml:h3>
<xhtml:ul>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zf2/issues/5783">#5783</xhtml:a> fixes
the <xhtml:code>StandardAutoloader</xhtml:code> such that if a namespace
matches, but no matching class is found, it will continue to loop
through any other namespaces present. This fixes a situation
whereby a map for a subnamespace may be registered later than the
parent; prior to the change, the subnamespace would never be
matched.</xhtml:li>
</xhtml:ul>
<xhtml:h3>Zend\Log</xhtml:h3>
<xhtml:ul>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/4455">#4455</xhtml:a> adds
new service providers for <xhtml:code>Zend\Log</xhtml:code>:
<xhtml:code>log_writers</xhtml:code> and <xhtml:code>log_processors</xhtml:code>. These
allow you to provide custom log writer and processor services for
use with the
<xhtml:code>Zend\Log\LoggerAbstractServiceFactory</xhtml:code>.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/4742">#4742</xhtml:a>
provides a new interface,
<xhtml:code>Zend\Log\LoggerAwareInterface</xhtml:code>, for hinting that an
object composes, or can compose, a <xhtml:code>Zend\Log\Logger</xhtml:code>
instance. A corresponding PHP Trait is also provided.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5875">#5875</xhtml:a> adds a
<xhtml:code>registerFatalErrorShutdownFunction()</xhtml:code> method to
<xhtml:code>Zend\Log\Logger</xhtml:code>, to handle logging fatal runtime
errors.</xhtml:p>
</xhtml:li>
</xhtml:ul>
<xhtml:h3>Zend\Mail</xhtml:h3>
<xhtml:ul>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5261">#5261</xhtml:a> adds a
new <xhtml:code>NullTransport</xhtml:code> to <xhtml:code>Zend\Mail</xhtml:code>, providing
a no-op mail transport. This can be useful in non-production
environments, or when needing to selectively disable mail sending
capabilities without altering code.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5470">#5470</xhtml:a> adds
<xhtml:code>Zend\Mail\Transport\Factory</xhtml:code>, for simplifying creation
of a mail transport via configuration.</xhtml:p>
</xhtml:li>
</xhtml:ul>
<xhtml:h3>Zend\Mvc</xhtml:h3>
<xhtml:ul>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/4849">#4849</xhtml:a>
updates <xhtml:code>Zend\Mvc\Application::run()</xhtml:code> such that it now
always returns the <xhtml:code>Application</xhtml:code> instance. If an event
returns a response object, it is always pushed into the
<xhtml:code>Application</xhtml:code> instance now so that it may be retrieved
after <xhtml:code>run()</xhtml:code> has finished executing.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/4962">#4962</xhtml:a>
modifies the various MVC factories to reference the service
<xhtml:code>ControllerManager</xhtml:code> instead of
<xhtml:code>ControllerLoader</xhtml:code> (which is a legacy name from early
beta releases); <xhtml:code>ControllerManager</xhtml:code> was made an alias of
<xhtml:code>ControllerLoader</xhtml:code>. This change future-proofs the MVC.
If you are using <xhtml:code>ControllerLoader</xhtml:code> in your own code, we
encourage you to change those references to
<xhtml:code>ControllerManager</xhtml:code> (though
<xhtml:code>ControllerLoader</xhtml:code> will continue to work for the
foreseeable future).</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5108">#5108</xhtml:a>
introduces a <xhtml:code>DummyTranslator</xhtml:code>, which will be used if
<xhtml:code>ext/intl</xhtml:code> is not present, or if the developer wishes to
disable translation (e.g., validators compose a translator by
default, but quite often the validation messages do not need to be
translated); translation can be disabled by setting the
<xhtml:code>translator</xhtml:code> configuration key to a boolean
<xhtml:code>false</xhtml:code>.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5469">#5469</xhtml:a> adds a
new <xhtml:code>AbstractConsoleController</xhtml:code>, and logic in the
<xhtml:code>ControllerManager</xhtml:code> for injecting the
<xhtml:code>ConsoleAdapter</xhtml:code> object into such controllers. This
abstract class tests if the incoming request is a console request,
and raises an exception if not; it also provides a
<xhtml:code>getConsole()</xhtml:code> method for access to the composed
<xhtml:code>ConsoleAdapter</xhtml:code>.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5612">#5612</xhtml:a>
updates <xhtml:code>Zend\Mvc\Application::init()</xhtml:code> to allow
listeners specified in the configuration passed to the method to
override those discovered during bootstrapping; in essence,
application-level configuration should have more specificity than
module-level configuration.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5670">#5670</xhtml:a>
provides the ability to create a <xhtml:code>controller_map</xhtml:code> within
<xhtml:code>view_manager</xhtml:code> configuration. This map allows you to do
the following:</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p>Indicate modules that include subnamespaces in their name to
include all namespace segments in the template name:
<xhtml:code>Xerkus\FooModule =&gt; xerkux/foo-module/</xhtml:code> via the
configuration <xhtml:code>Xerkus\FooModule =&gt; true</xhtml:code>.</xhtml:p>
</xhtml:li>
<xhtml:li>Map a specific template prefix to a given module: <xhtml:code>ZfcUser
=&gt; 'zf-commons/zfc-user</xhtml:code>.</xhtml:li>
</xhtml:ul>
<xhtml:p>This change is opt-in, and thus backwards compatible.</xhtml:p>
<xhtml:ul>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5759">#5759</xhtml:a> adds a
new method to the <xhtml:code>FlashMessenger</xhtml:code>,
<xhtml:code>renderCurrent()</xhtml:code>, allowing you to render flash messages
sent in the current request (using the same API as
<xhtml:code>renderMessages()</xhtml:code>).</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5897">#5897</xhtml:a> adds a
<xhtml:code>fromJsonRawBody()</xhtml:code> method to the <xhtml:code>Params</xhtml:code>
plugin, allowing the ability to decode and retrieve parameters
passed via the request body as JSON.</xhtml:p>
</xhtml:li>
</xhtml:ul>
<xhtml:h3>Zend\Navigation</xhtml:h3>
<xhtml:ul>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5080">#5080</xhtml:a> fixes
the <xhtml:code>Breadcrumb</xhtml:code> view helper such that it will now pass
the specified separator.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5803">#5803</xhtml:a> hides
sub menus when all pages in the sub menu are currently hidden.</xhtml:p>
</xhtml:li>
</xhtml:ul>
<xhtml:h3>Zend\Paginator</xhtml:h3>
<xhtml:ul>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/4427">#4427</xhtml:a> adds
the ability to provide <xhtml:code>$group</xhtml:code> and <xhtml:code>$having</xhtml:code>
clauses to a <xhtml:code>DbTableGateway</xhtml:code>
<xhtml:code>Zend\Paginator</xhtml:code> adapter.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5272">#5272</xhtml:a> adds a
new <xhtml:code>Callback</xhtml:code> pagination adapter; the new adapter
accepts two callbacks, one for returning the items, another for
returning the count. The items callback will receive the requested
offset and number of items per page as arguments: <xhtml:code>function
($offset, $itemsPerPage)</xhtml:code>.</xhtml:p>
</xhtml:li>
</xhtml:ul>
<xhtml:h3>Zend\Permissions\Acl</xhtml:h3>
<xhtml:ul>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zf2/issues/5628">#5628</xhtml:a> adds a
new <xhtml:code>AssertionAggregate</xhtml:code>, which enables two concepts:
the ability to chain multiple assertions, as well as the ability to
use named assertions as plugins. (The change also creates a
<xhtml:code>Zend\Permissions\Acl\Assertion\AssertionManager</xhtml:code>, which
is a plugin manager implementation).</xhtml:li>
</xhtml:ul>
<xhtml:h3>Zend\ServiceManager</xhtml:h3>
<xhtml:ul>
<xhtml:li>A number of performance improvements were made to how abstract
factories are processed and invoked.</xhtml:li>
</xhtml:ul>
<xhtml:h3>Zend\Session</xhtml:h3>
<xhtml:ul>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zf2/issues/4995">#4995</xhtml:a> adds
the ability to specify session validators in configuration consumed
by the <xhtml:code>SessionManagerFactory</xhtml:code>.</xhtml:li>
</xhtml:ul>
<xhtml:h3>Zend\Soap</xhtml:h3>
<xhtml:ul>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5792">#5792</xhtml:a> adds a
"debug mode" to <xhtml:code>Zend\Soap\Server</xhtml:code>. When enabled, any
exception thrown is treated as a <xhtml:code>Fault</xhtml:code> response (vs.
only those whitelisted).</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5810">#5810</xhtml:a> adds a
<xhtml:code>getException()</xhtml:code> method to
<xhtml:code>Zend\Soap\Server</xhtml:code>, allowing you to retrieve the
exception that caused a fault response (e.g., to log it).</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5811">#5811</xhtml:a>
creates a public <xhtml:code>getSoap()</xhtml:code> method in
<xhtml:code>Zend\Soap\Server</xhtml:code> to allow you to access the composed
<xhtml:code>SoapServer</xhtml:code> instance. This allows you to use
<xhtml:code>setReturnResponse()</xhtml:code> and still return fault responses
(which must be triggered by the <xhtml:code>SoapServer</xhtml:code> instance
directly.)</xhtml:p>
</xhtml:li>
</xhtml:ul>
<xhtml:h3>Zend\Stdlib</xhtml:h3>
<xhtml:ul>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/4534">#4534</xhtml:a>
introduces a <xhtml:code>JsonSerializable</xhtml:code> polyfill, to provide
support for that built-in PHP interface on PHP versions prior to
5.4.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/4751">#4751</xhtml:a>
provides a new interface,
<xhtml:code>Zend\Stdlib\Hydrator\HydratorAwareInterface</xhtml:code>, for
hinting that an object composes, or can compose, a
<xhtml:code>Zend\Stdlib\Hydrator\HydratorInterface</xhtml:code> instance. A
corresponding PHP Trait is also provided.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/4908">#4908</xhtml:a>
segregates <xhtml:code>Zend\Stdlib\Hydrator\HydratorInterface</xhtml:code> into
two separate interfaces,
<xhtml:code>Zend\Stdlib\Extractor\ExtractionInterface</xhtml:code> and
<xhtml:code>Zend\Stdlib\Hydrator\HydrationInterfac</xhtml:code>. The original
interface has been modified to extend both of the new interfaces.
This allows developers to implement one or the other behavior,
based on the needs of the application. (As an example, if an
application only needs to extract data for serialization, it could
typehint on <xhtml:code>Zend\Stdlib\Extractor\ExtractionInterface</xhtml:code>
only.)</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5364">#5364</xhtml:a> adds a
new subcomponent to hydrators, <xhtml:code>NamingStrategy</xhtml:code>. A
<xhtml:code>NamingStrategy</xhtml:code> can be used by hydrators to determine
the name to use for keys and properties when extracting and
hydrating.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5365">#5365</xhtml:a> adds
<xhtml:code>Zend\Stdlib\Guard</xhtml:code>, which provides traits for
performing common argument type validations. For example, an object
composing the <xhtml:code>ArrayOrTraversableGuardTrait</xhtml:code> could call
<xhtml:code>$this-&gt;guardForArrayOrTraversable($arg)</xhtml:code> in order to
validate <xhtml:code>$arg</xhtml:code> is an array or
<xhtml:code>Traversable</xhtml:code>.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5380">#5380</xhtml:a> adds
context support to hydrator strategies, allowing them to receive
the object being extracted or the array being hydrated when
performing their logic.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5702">#5702</xhtml:a> moves
<xhtml:code>Zend\Mvc\Router\PriorityList</xhtml:code> into
<xhtml:code>Zend\Stdlib</xhtml:code>, as it has general-purpose use cases. The
former class was modified to extend the latter.</xhtml:p>
</xhtml:li>
</xhtml:ul>
<xhtml:h3>Zend\Test</xhtml:h3>
<xhtml:ul>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/4946">#4946</xhtml:a> adds
two new methods to the <xhtml:code>AbstractControllerTestCase</xhtml:code>,
<xhtml:code>assertTemplateName()</xhtml:code> and
<xhtml:code>assertNotTemplateName()</xhtml:code>.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5649">#5649</xhtml:a> adds
the <xhtml:code>assertResponseReasonPhrase()</xhtml:code> assertion.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5730">#5730</xhtml:a> adds
the ability to allow session persistence when performing multiple
dispatches.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5731">#5731</xhtml:a> adds a
new argument to <xhtml:code>dispatch()</xhtml:code>,
<xhtml:code>$isXmlHttpRequest</xhtml:code>; when boolean <xhtml:code>true</xhtml:code>,
this adds an <xhtml:code>X-Requested-With: XMLHttpRequest</xhtml:code> header
to the request object.</xhtml:p>
</xhtml:li>
</xhtml:ul>
<xhtml:h3>Zend\Validator</xhtml:h3>
<xhtml:ul>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/4940">#4940</xhtml:a> adds a
new validator, <xhtml:code>Bitwise</xhtml:code>, for performing bitwise
validation operations.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5664">#5664</xhtml:a>
removes the translation of validator message <xhtml:em>keys</xhtml:em>. While
this is a backwards-incompatible change, this capability should
never have been present, and removing it fixes a number of posted
issues, as well as improves performance when retrieving validation
error messages. A related change, <xhtml:a href="https://github.com/zendframework/zf2/issues/5666">#5666</xhtml:a>,
removes translation of validation error messages from
<xhtml:code>Zend\Form\View\Helper\FormElementErrors</xhtml:code>, as
translation happens within the validators themselves; this prevents
double translation, and, again, improves performance.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5780">#5780</xhtml:a> adds
the ability to set the "break chain on failure" flag via a
configuration option; this allows setting the flag when using the
<xhtml:code>attachByName()</xhtml:code> method of the
<xhtml:code>ValidatorChain</xhtml:code>.</xhtml:p>
</xhtml:li>
</xhtml:ul>
<xhtml:h3>Zend\Version</xhtml:h3>
<xhtml:ul>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zf2/issues/4625">#4625</xhtml:a> adds
the ability to pass a <xhtml:code>Zend\Http\Client</xhtml:code> to
<xhtml:code>Zend\Version\Version::getLatest()</xhtml:code>, which should solve
situations where <xhtml:code>allow_url_fopen</xhtml:code> is disabled.</xhtml:li>
</xhtml:ul>
<xhtml:h3>Zend\View</xhtml:h3>
<xhtml:ul>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/4679">#4679</xhtml:a>
provides the ability to specify Internet Explorer conditional
stylesheets in the <xhtml:code>HeadLink</xhtml:code> and <xhtml:code>HeadStyle</xhtml:code>
view helpers, conditional metadata in the <xhtml:code>HeadMeta</xhtml:code>
view helper, and conditional scripts in the <xhtml:code>HeadScript</xhtml:code>
view helper.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5255">#5255</xhtml:a> adds
the ability to retrieve child view models based on what variable
they registered to capture to in the parent; this is implemented
via a new interface,
<xhtml:code>Zend\View\Model\RetrievableChildrenInterface</xhtml:code>, which
defines the method <xhtml:code>getChildrenByCaptureTo()</xhtml:code>.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5266">#5266</xhtml:a>
attempts to make calls to <xhtml:code>PhpRenderer::render()</xhtml:code>
slightly more robust by checking the return value from
<xhtml:code>include</xhtml:code>ing a view script, and raising an exception
when the <xhtml:code>include</xhtml:code> fails.</xhtml:p>
</xhtml:li>
</xhtml:ul>
<xhtml:h2>Thank You!</xhtml:h2>
<xhtml:p>A big thank you to the dozens upon dozens of contributors who
helped make this new feature release a reality! This was truly a
community-driven effort, and would not have been possible without
the contributions of each and every one of you.</xhtml:p>
<xhtml:h2>Roadmap</xhtml:h2>
<xhtml:p>At this time, I am proposing a bi-monthly maintenance release
schedule; however, we will often release an initial ".1"
maintenance version sooner. After that, however, we will schedule
maintenance releases every 2 months.</xhtml:p>
<xhtml:p>For minor (feature) releases, I am proposing every six months,
giving us a September 2014 release date for 2.4.0.</xhtml:p>
<xhtml:p>If you have opinions on the release schedule, I invite you to
voice them on our <xhtml:a href="/archives">mailing lists</xhtml:a>.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Zend Framework 1.12.5 Released!]]></title>
    <published>2014-03-07T17:50:00+0000</published>
    <updated>2014-03-07T17:50:00+0000</updated>
    <link rel="alternate" type="text/html" href="http://framework.zend.com/blog/zend-framework-1-12-5-released.html"/>
    <id>http://framework.zend.com/blog/zend-framework-1-12-5-released.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>matthew@zend.com</email>
      <uri>http://mwop.net/</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>The Zend Framework community is pleased to announce the
immediate availability of Zend Framework 1.12.5!</xhtml:p>
<xhtml:ul>
<xhtml:li><xhtml:a href="/downloads/latest">http://framework.zend.com/downloads/latest</xhtml:a></xhtml:li>
</xhtml:ul>
<xhtml:p>This release fixes PHP 5.2 support for the 1.12 series. If you
use PHP 5.2 with Zend Framework 1.12, we encourage you to upgrade
immediately.</xhtml:p>
<xhtml:h2>5.2 support</xhtml:h2>
<xhtml:p><xhtml:a href="/blog/zend-framework-1-12-4-2-1-6-and-2-2-6-released.html">Yesterday's
1.12.4 release</xhtml:a> provided several security fixes around XML
eXternal Entity and XML Entity Expansion attack vectors.
Unfortunately, we had not reviewed our patch to consider PHP 5.2
support, and the code contained PHP closures -- which have only
been available since PHP 5.3.</xhtml:p>
<xhtml:p>The code in the <xhtml:code>Zend\Xml</xhtml:code> component was updated to
remove the closures, and tests for all affected components were run
to ensure they worked across PHP versions from 5.2 - 5.5.</xhtml:p>
<xhtml:h2>Thank You!</xhtml:h2>
<xhtml:p>A big thank you to those contributors who spotted the errors and
provided the initial fixes, particularly Martin Hujer and Frank
Bruckner.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Zend Framework 1.12.4, 2.1.6, and 2.2.6 Released!]]></title>
    <published>2014-03-06T23:00:00+0000</published>
    <updated>2014-03-06T23:00:00+0000</updated>
    <link rel="alternate" type="text/html" href="http://framework.zend.com/blog/zend-framework-1-12-4-2-1-6-and-2-2-6-released.html"/>
    <id>http://framework.zend.com/blog/zend-framework-1-12-4-2-1-6-and-2-2-6-released.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>matthew@zend.com</email>
      <uri>http://mwop.net/</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>The Zend Framework community is pleased to announce the
immediate availability of:</xhtml:p>
<xhtml:ul>
<xhtml:li>Zend Framework <xhtml:strong>1.12.4</xhtml:strong></xhtml:li>
<xhtml:li>Zend Framework <xhtml:strong>2.1.6</xhtml:strong></xhtml:li>
<xhtml:li>Zend Framework <xhtml:strong>2.2.6</xhtml:strong></xhtml:li>
</xhtml:ul>
<xhtml:ul>
<xhtml:li><xhtml:a href="/downloads/latest">http://framework.zend.com/downloads/latest</xhtml:a></xhtml:li>
</xhtml:ul>
<xhtml:p>While these are scheduled maintenance releases, they also
contain important security fixes; we strongly encourage users to
upgrade.</xhtml:p>
<xhtml:h2>Security Fixes</xhtml:h2>
<xhtml:p>Two new security advisories have been made:</xhtml:p>
<xhtml:ul>
<xhtml:li><xhtml:a href="/security/advisory/ZF2014-01">ZF2014-01</xhtml:a>, which
mitigates XML eXternal Entity and XML Entity Expansion vectors in a
variety of components. While we had taken measures two years ago to
mitigate these issues, a researcher discovered several components
that remained vulnerable.</xhtml:li>
<xhtml:li><xhtml:a href="/security/advisory/ZF2014-02">ZF2014-02</xhtml:a>, which
mitigates an issue in our OpenID consumers whereby a malicious
Identity Provider could be used to spoof the identity of other
providers.</xhtml:li>
</xhtml:ul>
<xhtml:p>For more information, follow the links above; if you use any of
the components affected, please upgrade as soon as possible.</xhtml:p>
<xhtml:h2>1.12.4</xhtml:h2>
<xhtml:p>This is the first maintenance release in almost a year on the
1.12 series, and contains fixes too numerous to list. Among some of
the more important ones, however:</xhtml:p>
<xhtml:ul>
<xhtml:li>The testing infrastructure has been upgraded to PHPUnit 3.7,
making it far simpler for contributors to test changes.</xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zf1/pull/221">#221</xhtml:a> removes
the TinySrc view helper, as the TinySrc service no longer
exists.</xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zf1/pull/222">#222</xhtml:a> removes
the InfoCard component, as the CardSpace service no longer
exists.</xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zf1/pull/271">#271</xhtml:a> removes
the Nirvanix component, as the Nirvanix service shut down in
October 2013.</xhtml:li>
</xhtml:ul>
<xhtml:p>Many thanks to all the contributors who helped polish ZF1,
including both Frank Bruckner and Adam Lundrigan, who provided a
ton of patches and feedback, and to Rob Allen, our release manager,
for shepherding in contributions!</xhtml:p>
<xhtml:h2>2.1.6</xhtml:h2>
<xhtml:p><xhtml:strong>2.1.6</xhtml:strong> is a security release only, and issued to
provide fixes for <xhtml:a href="/security/advisory/ZF2014-01">ZF2014-01</xhtml:a>.</xhtml:p>
<xhtml:h2>2.2.6</xhtml:h2>
<xhtml:p><xhtml:strong>2.2.6</xhtml:strong> is both a security and maintenance
release. It addresses specifically <xhtml:a href="/security/advisory/ZF2014-01">ZF2014-01</xhtml:a>. Additionally, more
than 100 patches were contributed to this release.</xhtml:p>
<xhtml:p>For the complete list of changes, <xhtml:a href="/changelog/2.2.6">read the changelog</xhtml:a>.</xhtml:p>
<xhtml:h2>ZendXml</xhtml:h2>
<xhtml:p>We have released a new component, <xhtml:a href="https://github.com/zendframework/ZendXml">ZendXml</xhtml:a>, to help PHP
developers mitigate XXE and XEE vectors in their own code. We
highly recommend using it if you ware working with XML. It is
available via Composer, as well as via <xhtml:a href="https://packages.zendframework.com/">our packages site</xhtml:a>.</xhtml:p>
<xhtml:h2>Component Releases</xhtml:h2>
<xhtml:p>The following components were updated, to the versions
specified, to mitigate security issues.</xhtml:p>
<xhtml:ul>
<xhtml:li>ZendOpenId, v2.0.2</xhtml:li>
<xhtml:li>ZendRest, v2.0.2</xhtml:li>
<xhtml:li>ZendService_Amazon, v2.0.3</xhtml:li>
<xhtml:li>ZendService_Api, v1.0.0</xhtml:li>
<xhtml:li>ZendService_Audioscrobbler, v2.0.2</xhtml:li>
<xhtml:li>ZendService_Nirvanix, v2.0.2</xhtml:li>
<xhtml:li>ZendService_SlideShare, v2.0.2</xhtml:li>
<xhtml:li>ZendService_Technorati, v2.0.2</xhtml:li>
<xhtml:li>ZendService_WindowsAzure, v2.0.2</xhtml:li>
</xhtml:ul>
<xhtml:h2>Thank You!</xhtml:h2>
<xhtml:p>As always, I'd like to thank the many contributors who made
these releases possible! The project is gaining in consistency and
capabilities daily as a result of your efforts.</xhtml:p>
<xhtml:h2>Roadmap</xhtml:h2>
<xhtml:p>We plan to ship version 2.3.0 sometime next week (week of 10
March 2014). We will likely adopt a semi-monthly maintenance
release schedule thereafter.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Apigility 0.9.1 Released!]]></title>
    <published>2014-03-01T18:20:00+0000</published>
    <updated>2014-03-01T18:20:00+0000</updated>
    <link rel="alternate" type="text/html" href="http://framework.zend.com/blog/apigility-0-9-1-released.html"/>
    <id>http://framework.zend.com/blog/apigility-0-9-1-released.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>matthew@zend.com</email>
      <uri>http://mwop.net/</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>Today, we're releasing version 0.9.1 of Apigility! You can grab
and test it using one of the following two methods:</xhtml:p>
<xhtml:ul>
<xhtml:li>Composer: <xhtml:code>composer create-project
zfcampus/zf-apigility-skeleton apigility 0.9.1</xhtml:code></xhtml:li>
<xhtml:li>Manual download:
<xhtml:pre>
<xhtml:code>
        wget https://github.com/zfcampus/zf-apigility-skeleton/releases/download/0.9.0/zf-apigility-skeleton-0.9.1.zip
        unzip zf-apigility-skeleton-0.9.1.zip
        </xhtml:code>
</xhtml:pre></xhtml:li>
</xhtml:ul>
<xhtml:p>This release is a maintenance release, fixing two critical
issues reported against 0.9.0</xhtml:p>
<xhtml:h2>Fixes</xhtml:h2>
<xhtml:ul>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zfcampus/zf-oauth2/issues/27">zfcampus/zfoauth2#27</xhtml:a>
reported an inability to save OAuth2 adapter details from the
Apigility admin UI. These are now corrected.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://groups.google.com/a/zend.com/d/msgid/apigility-users/b7723f69-e4cc-4619-84d8-c3dd8c1f93a5%40zend.com">
A report on the apigility-users mailing list</xhtml:a> indicated that
authorizations performed against REST entities were not working
correctly. This was due to an incomplete change from "resource" to
"entity" (as noted in the 0.9.0 release notes); the situation is
now corrected.</xhtml:p>
</xhtml:li>
</xhtml:ul>
<xhtml:h2>Future</xhtml:h2>
<xhtml:p>At this point, we turn our attention to stabilizing Zend
Framework 2.3.0, on which Apigility will depend, due to features
added to that upcoming version.</xhtml:p>
<xhtml:p>Once Zend Framework 2.3.0 is released, we will begin the beta
cycle for Apigility 1.0.0. During that timeframe, we will due some
additional improvements to the UI, and work to ensure the engine is
stable. Additionally, we will document the project, providing
documentation for each module, as well as for how the modules work
together as a whole. We hope to provide "recipes" for a number of
common practices and development and deployment situations.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Apigility 0.9.0 Released!]]></title>
    <published>2014-02-28T23:00:00+0000</published>
    <updated>2014-03-03T18:00:00+0000</updated>
    <link rel="alternate" type="text/html" href="http://framework.zend.com/blog/apigility-0-9-0-released.html"/>
    <id>http://framework.zend.com/blog/apigility-0-9-0-released.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>matthew@zend.com</email>
      <uri>http://mwop.net/</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>Today, we're releasing version 0.9.0 of Apigility! You can grab
and test it using one of the following two methods:</xhtml:p>
<xhtml:ul>
<xhtml:li>Composer: <xhtml:code>composer create-project
zfcampus/zf-apigility-skeleton apigility 0.9.0</xhtml:code></xhtml:li>
<xhtml:li>Manual download:
<xhtml:pre>
<xhtml:code>
        wget https://github.com/zfcampus/zf-apigility-skeleton/releases/download/0.9.0/zf-apigility-skeleton-0.9.0.zip
        unzip zf-apigility-skeleton-0.9.0.zip
        </xhtml:code>
</xhtml:pre></xhtml:li>
</xhtml:ul>
<xhtml:p>This release brings in our last planned feature for the upcoming
1.0.0 stable release: the ability to document your APIs, and then
provide that documentation to your end-users!</xhtml:p>
<xhtml:h2>Documentation</xhtml:h2>
<xhtml:p>An API is useless without documentation.</xhtml:p>
<xhtml:p>The Apigility admin UI now allows you to capture narrative
documentation for your services, collections, entities, and
operations. You can document what the request and response bodies
should look like. You can document each field you configure.</xhtml:p>
<xhtml:p>Apigility then merges this documentation with what it knows of
your services: what Accept headers are allowed, what Content-Types
are allowed, what response status codes may be expected, what
fields are available, whether or not authorization is required, and
more. The admin UI provides a visualization of this information for
you.</xhtml:p>
<xhtml:p>We provide several more visualizations, too. The
<xhtml:kbd>zf-apigility-documentation</xhtml:kbd> module is enabled now by
default in the <xhtml:kbd>zf-apigility-skeleton</xhtml:kbd>, providing both
JSON and HTML representations of the documentation at the URI
<xhtml:kbd>/apigility/documentation</xhtml:kbd> (the representation will depend
on the <xhtml:kbd>Accept</xhtml:kbd> header value you provide -- Apigility's
own content negotiation at work!).</xhtml:p>
<xhtml:p>You can also opt in to the new
<xhtml:kbd>zf-apigility-documentation-swagger</xhtml:kbd> module, which will
allow you to either seed an existing <xhtml:a href="https://github.com/wordnik/swagger-ui">Swagger UI</xhtml:a>
installation, or, if you visit the <xhtml:kbd>/apigility/swagger</xhtml:kbd>
URI, provide the Swagger UI itself.</xhtml:p>
<xhtml:p>To see what's possible, <xhtml:a href="http://apigility.org/get-started-video.html">Introduction to
Documentation</xhtml:a> video on the Apigility website!</xhtml:p>
<xhtml:h4>Adding documentation to existing Apigility installs</xhtml:h4>
<xhtml:p>If you are already using Apigility, you will need to add the new
modules to your application. Add the following dependencies to your
<xhtml:kbd>composer.json</xhtml:kbd>:</xhtml:p>
<xhtml:ul>
<xhtml:li><xhtml:kbd>"zfcampus/zf-apigility-documentation": "~1.0-dev"</xhtml:kbd>
(necessary for any documentation visualization, other than in the
admin)</xhtml:li>
<xhtml:li><xhtml:kbd>"zfcampus/zf-apigility-documentation-swagger":
"~1.0-dev"</xhtml:kbd> (if you want the Swagger UI)</xhtml:li>
</xhtml:ul>
<xhtml:p>After running <xhtml:kbd>composer update</xhtml:kbd>, add the modules to
your `config/application.config.php`:</xhtml:p>
<xhtml:ul>
<xhtml:li><xhtml:kbd>ZF\Apigility\Documentation</xhtml:kbd></xhtml:li>
<xhtml:li><xhtml:kbd>ZF\Apigility\Documentation\Swagger</xhtml:kbd></xhtml:li>
</xhtml:ul>
<xhtml:h2>Changelog</xhtml:h2>
<xhtml:p>This release has been a little over two months in the making,
and has a ton of changes. The following is a list of important
changes for existing users.</xhtml:p>
<xhtml:ul>
<xhtml:li>
<xhtml:p><xhtml:strong>Changes minimum supported PHP version to
5.3.23</xhtml:strong>, in line with the upcoming ZF 2.3.0. We still
recommend <xhtml:strong>5.4.8</xhtml:strong> for serving the admin user
interface.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p>New modules, <xhtml:a href="https://github.com/zfcampus/zf-apigility-documentation">zf-apigility-documentation</xhtml:a>
and <xhtml:a href="https://github.com/zfcampus/zf-apigility-documentation-swagger">zf-apigility-documentation-swagger</xhtml:a>,
providing documentation visualizations of APIs created with
Apigility. The base module provides both JSON and HTML
visualizations via the URI <xhtml:code>/apigility/documentation</xhtml:code>,
based on the Accept header value present.
zf-apigility-documentation-swagger provides an additional JSON
visualization for the mediatype
<xhtml:code>application/vnd.swagger+json</xhtml:code>, for seeding a <xhtml:a href="https://github.com/wordnik/swagger-ui">Swagger UI</xhtml:a>
installation; additionally, it provides the Swagger UI via
<xhtml:code>/apigility/swagger</xhtml:code>.</xhtml:p>
</xhtml:li>
</xhtml:ul>
<xhtml:p>zf-apigility-documentation is enabled by default in
zf-apigility-skeleton; zf-apigility-documentation-swagger is an
opt-in module.</xhtml:p>
<xhtml:ul>
<xhtml:li>
<xhtml:p><xhtml:strong>The <xhtml:code>/admin</xhtml:code> and <xhtml:code>/welcome</xhtml:code> routes
are now removed!</xhtml:strong> The admin UI now uses
<xhtml:code>/apigility/ui</xhtml:code>, and the welcome screen uses
<xhtml:code>/apigility/welcome</xhtml:code>. New routes for documentation are
also available, as detailed above.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p>A new module was created for Apigility-specific interfaces,
<xhtml:a href="https://github.com/zfcampus/zf-apigility-provider">zf-apigility-provider</xhtml:a>.
The primary use case is for composition in modules that may or may
not be consumed by Apigility (e.g., a general-purpose module that
could be composed into many projects). The only interface currently
is <xhtml:code>ZF\Apigility\Provider\ApigilityProviderInterface</xhtml:code>,
which replaces <xhtml:code>Zend\Apigility\ApigilityModuleInterface</xhtml:code>
(and thus prevents the necessity of installing all Apigility
modules just to implement the interface!).</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p>A new module was introduced for handling development mode,
<xhtml:a href="https://github.com/zfcampus/zf-development-mode">zf-development-mode</xhtml:a>;
this is a fork of <xhtml:a href="https://github.com/19ft/NFDevelopmentMode">NFDevelopmentMode</xhtml:a>,
which was based off the equivalent functionality in
zf-apigility-skeleton's <xhtml:code>Application</xhtml:code> module. We removed
the functionality from the skeleton, and added a dependency on the
new module.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p>zf-apigility-skeleton's layout was updated to match that of the
admin UI.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p>zf-apigility-admin received numerous updates:</xhtml:p>
<xhtml:ul>
<xhtml:li>
<xhtml:p>Ability to add documentation of services, fields, and
operations.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p>Ability to use <xhtml:a href="http://www.mongodb.org/">MongoDB</xhtml:a>
when configuring an OAuth2 authentication adapter.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p>Ability to inspect, add, configure, and delete
zf-content-negotiation selectors.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p>Links to HTML documentation of APIs managed by the Apigility
instance (more on this below).</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p>Ability to create and manipulate filter chains for each field in
a service.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p>(Limited) detection of whether or not an opcode cache is
enabled; if detected, a modal dialog will be presented to the
end-user detailing how to disable it.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p>Completely overhauled and refactored admin UI application to
ease maintenance and feature additions. The admin UI now uses
<xhtml:a href="http://bower.io">Bower</xhtml:a> for managing UI asset
dependencies, and <xhtml:a href="http://gruntjs.com">Grunt</xhtml:a> for
building the UI distribution. We have dropped ng-route for the
<xhtml:a href="https://github.com/angular-ui/ui-router">angular-ui
ui-router</xhtml:a>, providing us with more flexibility in UI
implementation and layout. All services, controllers, and
directives have been moved into their own files.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p>Countless UI/UX improvements.</xhtml:p>
</xhtml:li>
</xhtml:ul>
</xhtml:li>
<xhtml:li>
<xhtml:p>zf-apigility-welcome has been updated to use the Apigility
"Rocket ElePHPant" logo for the splash screen, and to provide
buttons to the HTML and Swagger documentation, if the appropriate
modules are available.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:strong>zf-rest and zf-rpc now each store a
<xhtml:code>service_name</xhtml:code> key in the configuration for each
service.</xhtml:strong> While efforts have been made to ensure existing
configuration still works, we recommend adding this key to each
service. The value should be the short name representation for the
service, usually the name you provided when creating the
service.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:strong>All repositories have been updated to make a clean
distinction between the terms "Entity", "Collection", and
"Resource".</xhtml:strong> An "Entity" is anything addressable via a URI
containing a unique identifier. A "Collection" is any URI that
returns a set of entities. A "Resource" refers to a URI that may
return collections and/or entities. As such, we have several BC
breaks:</xhtml:p>
<xhtml:ul>
<xhtml:li>
<xhtml:p>The event <xhtml:code>renderResource</xhtml:code> is now
<xhtml:code>renderEntity</xhtml:code>.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p>The event <xhtml:code>renderCollection.resource</xhtml:code> is now
<xhtml:code>renderCollection.entity</xhtml:code>.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:code>ZF\Hal\Resource</xhtml:code> was renamed to
<xhtml:code>ZF\Hal\Entity</xhtml:code>.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p>The subkey <xhtml:code>resource</xhtml:code> in the zf-mvc-auth
configuration is now <xhtml:code>entity</xhtml:code>.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p>The subkey <xhtml:code>resource_http_methods</xhtml:code> in zf-rest is now
<xhtml:code>entity_http_methods</xhtml:code>.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p>The subkey <xhtml:code>resource_class</xhtml:code> in zf-rest is now
<xhtml:code>entity_class</xhtml:code>.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p>The subkey <xhtml:code>resource_identifier_name</xhtml:code> in zf-rest is
now <xhtml:code>entity_identifier_name</xhtml:code>. (This change only affects
those who have been using latest master, but have not updated since
late-January 2014.)</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p>The subkey <xhtml:code>identifier_name</xhtml:code> in zf-apigility
<xhtml:code>db-connected</xhtml:code> configuration is now
<xhtml:code>entity_identifier_name</xhtml:code>;</xhtml:p>
</xhtml:li>
</xhtml:ul>
</xhtml:li>
<xhtml:li>
<xhtml:p>zf-hal now properly differentiates between the identifier used
in the route definition, and the identifier used for the entity;
this allows you to use one value on the uri -- e.g.,
<xhtml:code>status_id</xhtml:code> -- and another in your entity class -- e.g.,
<xhtml:code>id</xhtml:code>. zf-hal will fallback to the
<xhtml:code>route_identifier_name</xhtml:code> if no
<xhtml:code>entity_identifier_name</xhtml:code> is present.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p>zf-apigility, when detecting an input filter is present, will
pull values from the input filter, and not use any other values
even if provided in the request. This prevents SQL errors due to
unknown columns.</xhtml:p>
</xhtml:li>
</xhtml:ul>
<xhtml:p>Additionally, zf-apigility's assets were updated, and a Grunt +
Bower toolchain provided for keeping them up-to-date.</xhtml:p>
<xhtml:ul>
<xhtml:li>zf-rest, when detecting an input filter is present for the
current request, will inject it into the
<xhtml:code>ResourceEvent</xhtml:code>, allowing developers to retrieve it via
<xhtml:code>$this-&gt;getEvent()-&gt;getInputFilter()</xhtml:code>.</xhtml:li>
</xhtml:ul>
<xhtml:p>Additionally, support for <xhtml:code>patchList</xhtml:code> was added to
the <xhtml:code>AbstractResourceListener</xhtml:code>.</xhtml:p>
<xhtml:ul>
<xhtml:li>zf-api-problem was updated to match <xhtml:a href="http://tools.ietf.org/html/draft-nottingham-http-problem-05">Problem
API draft 5</xhtml:a>. This has changed the internal structure and JSON
representation of problem results. If you were manipulating
<xhtml:code>ApiProblem</xhtml:code> objects directly previously, you may need
to alter your code.</xhtml:li>
</xhtml:ul>
<xhtml:h2>Future</xhtml:h2>
<xhtml:p>At this point, we turn our attention to stabilizing Zend
Framework 2.3.0, on which Apigility will depend, due to features
added to that upcoming version.</xhtml:p>
<xhtml:p>Once Zend Framework 2.3.0 is released, we will begin the beta
cycle for Apigility 1.0.0. During that timeframe, we will due some
additional improvements to the UI, and work to ensure the engine is
stable. Additionally, we will document the project, providing
documentation for each module, as well as for how the modules work
together as a whole. We hope to provide "recipes" for a number of
common practices and development and deployment situations.</xhtml:p>
<xhtml:h4>Updates</xhtml:h4>
<xhtml:ul>
<xhtml:li>2014-03-03 12:00: Fixed zf-apigility-documentation to read
zf-apigility-provider in fourth bullet-point of changelog.</xhtml:li>
<xhtml:li>2014-03-01 12:20: Fixed <xhtml:kbd>wget</xhtml:kbd> command to reference
correct download link.</xhtml:li>
</xhtml:ul>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Apigility 0.8.0 Released!]]></title>
    <published>2013-12-20T23:00:00+0000</published>
    <updated>2013-12-21T16:10:00+0000</updated>
    <link rel="alternate" type="text/html" href="http://framework.zend.com/blog/apigility-0-8-0-released.html"/>
    <id>http://framework.zend.com/blog/apigility-0-8-0-released.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>matthew@zend.com</email>
      <uri>http://mwop.net/</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>Today, we're releasing version 0.8.0 of Apigility! You can grab
and test it using one of the following two methods:</xhtml:p>
<xhtml:ul>
<xhtml:li>Composer: <xhtml:code>composer create-project
zfcampus/zf-apigility-skeleton apigility</xhtml:code></xhtml:li>
<xhtml:li>Manual download:
<xhtml:pre>
<xhtml:code>
wget https://github.com/zfcampus/zf-apigility-skeleton/releases/download/0.8.0/zf-apigility-skeleton-0.8.0.zip
unzip zf-apigility-skeleton-0.8.0.zip</xhtml:code>
</xhtml:pre></xhtml:li>
</xhtml:ul>
<xhtml:p>We never announced our 0.7.0 version (though we showed off the
features at several conferences this past month), so there's a ton
to announce!</xhtml:p>
<xhtml:h2>Authentication and Authorization</xhtml:h2>
<xhtml:p>Authentication and Authorization were the number one requested
feature after our original release announcement at ZendCon 2013. We
managed to get this in place in time for ZendCon 2013 Europe, and
the features include:</xhtml:p>
<xhtml:ul>
<xhtml:li>Ability to use HTTP Basic or Digest authentication, or
OAuth2.</xhtml:li>
<xhtml:li>Ability to create authorization rules per HTTP method, per
service in your API.</xhtml:li>
</xhtml:ul>
<xhtml:p>We are leveraging Zend Framework 2's
<xhtml:code>Zend\Authentication</xhtml:code> library for HTTP authentication,
and Brent Shaffer's <xhtml:a href="https://github.com/bshaffer/oauth2-server-php">oauth2-server-php</xhtml:a>
library for OAuth2.</xhtml:p>
<xhtml:p>Apigility allows you to define one authentication scheme per
application. You can set the authentication details on the main
dashboard, under the heading "Authentication":</xhtml:p>
<xhtml:p style="text-align:center"><xhtml:img style="border: 1px solid black" width="640" alt="Authentication choices" src="/images/ag/authentication-buttons.png"/></xhtml:p>
<xhtml:p style="text-align:center"><xhtml:img style="border: 1px solid black" width="640" alt="Authentication form" src="/images/ag/authentication-form.png"/></xhtml:p>
<xhtml:p style="text-align:center"><xhtml:img style="border: 1px solid black" width="640" alt="Authentication view" src="/images/ag/authentication-view.png"/></xhtml:p>
<xhtml:p>To use HTTP Basic authentication, you will need to create a
<xhtml:code>htpasswd</xhtml:code> file, using Apache's <xhtml:code>htpasswd</xhtml:code>
utility. When you add HTTP Basic authentication to your
application, you will specify the location of the
<xhtml:code>htpasswd</xhtml:code> file.</xhtml:p>
<xhtml:p>For HTTP Digest authentication, you will need to create a file
with lines in the following format:</xhtml:p>
<xhtml:p>
<xhtml:code>&lt;username&gt;:&lt;realm&gt;:&lt;credentials&gt;</xhtml:code></xhtml:p>
<xhtml:p>The <xhtml:code>credentials</xhtml:code> field must be an MD5 hash of the
password that will be accepted. When adding the HTTP Digest
authentication to your application, you will specify the location
of this file, and will also need to specify the appropriate
<xhtml:code>realm</xhtml:code>, <xhtml:code>nonce\_timeout</xhtml:code> (number of seconds
the credentials remain valid), and, optionally, a list of
<xhtml:code>digest_domains</xhtml:code> (the domains for which the same
authentication information is valid).</xhtml:p>
<xhtml:p>To use OAuth2 authentication, you will need to setup a database,
and add clients and optionally users (users are only necessary if
using the <xhtml:code>password</xhtml:code> grant type). <xhtml:a href="https://github.com/zfcampus/zf-oauth2">See the zf-oauth2
README</xhtml:a> for details on how to setup the database and seed
it.</xhtml:p>
<xhtml:p>Once you have authentication setup, you can start setting up
authorization restrictions on your API. To do this, navigate to the
"Authorization" menu item in any API:</xhtml:p>
<xhtml:p style="text-align:center"><xhtml:img style="border: 1px solid black" width="640" alt="Authorization" src="/images/ag/authorization.png"/></xhtml:p>
<xhtml:p>By default, APIs created with Apigility are public. To require
authorization on specific services or specific HTTP methods of
services, check the appropriate boxes and save your changes. From
that point forward, authentication will be required for those
actions!</xhtml:p>
<xhtml:p>For more information, <xhtml:a href="http://bit.ly/ag-auth">view the
demo video</xhtml:a></xhtml:p>
<xhtml:h2>Cross Origin Resource Sharing</xhtml:h2>
<xhtml:p>In order to operate a web-based application that interact with
your APIs, you may need to investigate Cross Origin Resource
Sharing (CORS). CORS describes HTTP requests for HTTP resources
made from a different domain than the resource exists on. As an
example, if your API is at <xhtml:code>http://example.com/api/</xhtml:code>,
but you want to request it from
<xhtml:code>http://my-uber-cool-app.com/</xhtml:code>, CORS is in effect.</xhtml:p>
<xhtml:p>If a browser attempts to create an <xhtml:code>XMLHttpRequest</xhtml:code>
to a different domain than the current page, then it will detect a
CORS request. At that point, the browser will ask the server with
the resource if the request is allowed; if the originating server
does not reply with the appropriate headers, the browser will not
submit the original request, and the <xhtml:code>XMLHttpRequest</xhtml:code>
will fail.</xhtml:p>
<xhtml:p>Apigility does not deal with CORS by default, but the 0.8.0
release includes changes that ensure that CORS requests
<xhtml:em>can</xhtml:em> be honored if you are using a CORS plugin. We have
tested against the <xhtml:a href="https://github.com/zf-fr/zfr-cors">ZfrCors ZF2 module</xhtml:a>, and it
works seamlessly with Apigility at this point.</xhtml:p>
<xhtml:p>We highly recommend the combination of Apigility and ZfrCors
when building web-based JavaScript applications that will operate
on separate domains from your APIs.</xhtml:p>
<xhtml:h2>Validation</xhtml:h2>
<xhtml:p>Another aspect of API security is validating the incoming input.
Ideally, you should reject anything that does not validate
outright, and as early as possible.</xhtml:p>
<xhtml:p>0.8.0 adds a new module, <xhtml:a href="https://github.com/zfcampus/zf-content-validation">zf-content-validation</xhtml:a>,
which provides a validation engine based on Zend Framework's
<xhtml:code>InputFilter</xhtml:code> component. This component, when a request
method that contains incoming data occurs, checks to see if the
matched service has a corresponding input filter, and, if so,
attempts to validate the incoming data against it. If the
validation fails, an error response is immediately returned.</xhtml:p>
<xhtml:p>In the Apigility Admin UI, each service now has an "Inputs" tab
that allows you to define the input filter. In this tab, you define
inputs, which correspond to each field of data you will be
expecting. For each input, you can define one or more validators,
along with any configuration you want for each. In this case, a
picture is probably more sufficient:</xhtml:p>
<xhtml:p style="text-align:center"><xhtml:img style="border: 1px solid black" width="640" alt="Validation" src="/images/ag/inputfilter.png"/></xhtml:p>
<xhtml:p>For more information, <xhtml:a href="http://bit.ly/ag-validation">view
the demo video</xhtml:a>.</xhtml:p>
<xhtml:h2>Future</xhtml:h2>
<xhtml:p>At this point, we're wrapping up the featureset for a stable
version of Apigility. The last milestones we have include:</xhtml:p>
<xhtml:ul>
<xhtml:li>a module for generating API documentation. At this time, we are
favoring <xhtml:a href="http://apiblueprint.org/">API Blueprint</xhtml:a> as
the markup is trivial to generate from our configuration, and,
being markdown-derived, relatively easy to edit and expand once the
initial generation is complete.</xhtml:li>
<xhtml:li>some cleanup of the UI, including some long-overdue refactoring
and formalized testing.</xhtml:li>
<xhtml:li>documentation of the various components, as well as tutorials
on how they all fit together.</xhtml:li>
</xhtml:ul>
<xhtml:p>We hope to complete the API documentation milestone in the first
weeks of 2014. At that point, we will start the beta release cycle,
spending that time to do the UI refactoring and project
documentation. Once those are complete, we'll finally issue a
stable release; we're aiming for late February 2014 at this
time.</xhtml:p>
<xhtml:h4>Updates</xhtml:h4>
<xhtml:ul>
<xhtml:li>2013-12-21 16:10 UTC: Fixed <xhtml:code>wget</xhtml:code> command and URI,
per reports of errors in comments.</xhtml:li>
</xhtml:ul>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Zend Framework 2.2.5 Released!]]></title>
    <published>2013-10-31T19:00:00+0000</published>
    <updated>2013-10-31T19:00:00+0000</updated>
    <link rel="alternate" type="text/html" href="http://framework.zend.com/blog/zend-framework-2-2-5-released.html"/>
    <id>http://framework.zend.com/blog/zend-framework-2-2-5-released.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>matthew@zend.com</email>
      <uri>http://mwop.net/</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>The Zend Framework community is pleased to announce the
immediate availability of Zend Framework 2.2.5! Packages and
installation instructions are available at:</xhtml:p>
<xhtml:ul>
<xhtml:li><xhtml:a href="/downloads/latest">http://framework.zend.com/downloads/latest</xhtml:a></xhtml:li>
</xhtml:ul>
<xhtml:p>This release includes a security fix for
<xhtml:code>Zend\Http\PhpEnvironment\RemoteAddress</xhtml:code> and
<xhtml:code>Zend\Session\Validator\RemoteAddr</xhtml:code>; if you use either
of these classes, we urge you to upgrade to 2.2.5 immediately.</xhtml:p>
<xhtml:p>We've not had a release in a couple of months, due to an
exciting development: Zend's Zend Framework team has announced an
initial preview release of <xhtml:a href="http://apigility.org">Apigility</xhtml:a>, an API builder and management
tool, built on top of Zend Framework 2! If you are building APIs or
plan to in the future, we encourage you to check out this tool and
help drive it toward a stable release!</xhtml:p>
<xhtml:h2>Security</xhtml:h2>
<xhtml:p>A developer reported a problem with how we were handling
situations when <xhtml:code>Zend\Http\PhpEnvironment\RemoteAddress</xhtml:code>
was configured to use proxies, had a list of trusted proxies,
<xhtml:code>$_SERVER['REMOTE_ADDR']</xhtml:code> was not in that list of
trusted proxies. Essentially, we were still consulting the
<xhtml:code>X-Forwarded-For</xhtml:code> header in this situation, but should
have been used the provided <xhtml:code>$_SERVER['REMOTE_ADDR']</xhtml:code>,
according to the specification.</xhtml:p>
<xhtml:p>2.2.5 fixes this situation. If you use that class, or
<xhtml:code>Zend\Session\Validator\RemoteAddr</xhtml:code>, you should upgrade
immediately.</xhtml:p>
<xhtml:p>For more details, visit the <xhtml:a href="/security/advisory/ZF2013-04">ZF2013-04 security advisory</xhtml:a>.</xhtml:p>
<xhtml:h2>Changelog</xhtml:h2>
<xhtml:p>To see the full changelog, visit:</xhtml:p>
<xhtml:ul>
<xhtml:li><xhtml:a href="/changelog/2.2.5">http://framework.zend.com/changelog/2.2.5</xhtml:a></xhtml:li>
</xhtml:ul>
<xhtml:h2>Thank You!</xhtml:h2>
<xhtml:p>Thank you to everybody who has contributed to this release. With
more than 70 issues resolved, it's one of the busiest and most
robust releases on the 2.2 branch to-date.</xhtml:p>
<xhtml:h2>Roadmap</xhtml:h2>
<xhtml:p>Maintenance releases happen (roughly) monthly on (approximately)
the third Wednesday. We will be gearing up for the next minor
release, 2.3.0, soon.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Zend Framework 2.2.4 Released!]]></title>
    <published>2013-08-26T16:45:00+0000</published>
    <updated>2013-08-26T16:45:00+0000</updated>
    <link rel="alternate" type="text/html" href="http://framework.zend.com/blog/zend-framework-2-2-4-released.html"/>
    <id>http://framework.zend.com/blog/zend-framework-2-2-4-released.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>matthew@zend.com</email>
      <uri>http://mwop.net/</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>The Zend Framework community is pleased to announce the
immediate availability of Zend Framework 2.2.4! Packages and
installation instructions are available at:</xhtml:p>
<xhtml:ul>
<xhtml:li><xhtml:a href="/downloads/latest">http://framework.zend.com/downloads/latest</xhtml:a></xhtml:li>
</xhtml:ul>
<xhtml:p>This release fixes a regression found in the Form component
released with version 2.2.3; if you use that component, we urge you
to upgrade to 2.2.4.</xhtml:p>
<xhtml:h2>Regressions</xhtml:h2>
<xhtml:p><xhtml:a href="/blog/zend-framework-2-2-3-released.html">Version
2.2.3</xhtml:a> introduced a regression in the Form component, as a
side-effect of fixing another issue. The
<xhtml:code>preferFormInputFilter</xhtml:code> flag was originally created to
allow developers to choose whether they wanted to prefer the input
filter they explicitly composed in the form to have priority, or
use the input filter settings the form aggregated from default
elements instead. Interestingly, the form component essentially
enforced the latter situation (prefering what the form aggregated),
making the flag have no semantic meaning.</xhtml:p>
<xhtml:p>A side effect of this, however, led to a regression in the
InputFilter component. Starting sometime in the 2.2 series, the
behavior of input merging was changed to merge the old input into
the new. In 2.2.3, we corrected this behavior -- but it broke the
default merging order in the Form component. On inspection, we
discovered that the fix to the InputFilter essentially gave
semantic meaning back to the <xhtml:code>preferFormInputFilter</xhtml:code>
flag -- but that the default behavior -- which was to prefer what
the form aggregates -- was now flip-flopped.</xhtml:p>
<xhtml:p>The fix in 2.2.4 is to enable the
<xhtml:code>preferFormInputFilter</xhtml:code> flag by default, thus restoring
the previous expected behavior. Additionally, we now provide the
ability to set this flag via form options or the form factory.</xhtml:p>
<xhtml:p>If you use the Form component, we urge you to upgrade to 2.2.4
immediately.</xhtml:p>
<xhtml:h2>Changelog</xhtml:h2>
<xhtml:p>To see the full changelog, visit:</xhtml:p>
<xhtml:ul>
<xhtml:li><xhtml:a href="/changelog/2.2.4">http://framework.zend.com/changelog/2.2.4</xhtml:a></xhtml:li>
</xhtml:ul>
<xhtml:h2>Thank You!</xhtml:h2>
<xhtml:p>Many thanks to Michaël Gallego and Michael Gooden for helping me
troubleshoot the form issues!</xhtml:p>
<xhtml:h2>Roadmap</xhtml:h2>
<xhtml:p>Maintenance releases happen monthly on the third Wednesday.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Zend Framework 2.2.3 Released!]]></title>
    <published>2013-08-21T21:00:00+0000</published>
    <updated>2013-08-21T21:00:00+0000</updated>
    <link rel="alternate" type="text/html" href="http://framework.zend.com/blog/zend-framework-2-2-3-released.html"/>
    <id>http://framework.zend.com/blog/zend-framework-2-2-3-released.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>matthew@zend.com</email>
      <uri>http://mwop.net/</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>The Zend Framework community is pleased to announce the
immediate availability of Zend Framework 2.2.3! Packages and
installation instructions are available at:</xhtml:p>
<xhtml:ul>
<xhtml:li><xhtml:a href="/downloads/latest">http://framework.zend.com/downloads/latest</xhtml:a></xhtml:li>
</xhtml:ul>
<xhtml:p>This is the third monthly maintenance release in the 2.2
series.</xhtml:p>
<xhtml:h2>Changelog</xhtml:h2>
<xhtml:p>This release features over 25 changes. Some notable changes
include:</xhtml:p>
<xhtml:ul>
<xhtml:li>An update that ensures the filter and validator plugin managers
are injected into the input filter factory when using the form
factory. (<xhtml:a href="https://github.com/zendframework/zf2/issues/4851">#4851</xhtml:a>)</xhtml:li>
<xhtml:li>Fixes to code generation to ensure <xhtml:code>use</xhtml:code> statements
are unique, and that non-namespaced class generation is possible.
(<xhtml:a href="https://github.com/zendframework/zf2/issues/4988">#4988</xhtml:a> and
<xhtml:a href="https://github.com/zendframework/zf2/issues/4990">#4990</xhtml:a>)</xhtml:li>
<xhtml:li>A fix to input filters and forms to ensure overwriting of
inputs and input filters happens correctly. (<xhtml:a href="https://github.com/zendframework/zf2/issues/4996">#4996</xhtml:a>)</xhtml:li>
</xhtml:ul>
<xhtml:p>To see the full changelog, visit:</xhtml:p>
<xhtml:ul>
<xhtml:li><xhtml:a href="/changelog/2.2.3">http://framework.zend.com/changelog/2.2.3</xhtml:a></xhtml:li>
</xhtml:ul>
<xhtml:h2>Thank You!</xhtml:h2>
<xhtml:p>I'd like to thank everyone who provided issue reports, typo
fixes, maintenance improvements, bugfixes, and documentation
improvements; your efforts make the framework increasingly
better!</xhtml:p>
<xhtml:h2>Roadmap</xhtml:h2>
<xhtml:p>Maintenance releases happen monthly on the third Wednesday.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Zend Framework 2.2.2 Released!]]></title>
    <published>2013-07-24T17:00:00+0000</published>
    <updated>2013-07-24T17:00:00+0000</updated>
    <link rel="alternate" type="text/html" href="http://framework.zend.com/blog/zend-framework-2-2-2-released.html"/>
    <id>http://framework.zend.com/blog/zend-framework-2-2-2-released.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>matthew@zend.com</email>
      <uri>http://mwop.net/</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>The Zend Framework community is pleased to announce the
immediate availability of Zend Framework 2.2.2! Packages and
installation instructions are available at:</xhtml:p>
<xhtml:ul>
<xhtml:li><xhtml:a href="/downloads/latest">http://framework.zend.com/downloads/latest</xhtml:a></xhtml:li>
</xhtml:ul>
<xhtml:p>This is the second monthly maintenance release in the 2.2
series.</xhtml:p>
<xhtml:h2>Changelog</xhtml:h2>
<xhtml:p>This release features over 60 changes. Some notable changes
include:</xhtml:p>
<xhtml:ul>
<xhtml:li>The cURL adapter for <xhtml:code>Zend\Http</xhtml:code> will no longer
double-decode gzip-encoded bodies. (<xhtml:a href="https://github.com/zendframework/zf2/issues/4555">#4555</xhtml:a>)</xhtml:li>
<xhtml:li>A <xhtml:code>headLink()</xhtml:code> method was added to the HeadLink view
helper so that its usage matches the documentation. (<xhtml:a href="https://github.com/zendframework/zf2/issues/4105">#4105</xhtml:a>)</xhtml:li>
<xhtml:li>The validator plugin manager was updated to include the new
"PhoneNumber" validator. (<xhtml:a href="https://github.com/zendframework/zf2/issues/4644">#4644</xhtml:a>)</xhtml:li>
<xhtml:li>Abstract methods in the <xhtml:code>AbstractRestfulController</xhtml:code>
were made non-abstract, and modified to set a 405 ("Method Not
Allowed") status. (<xhtml:a href="https://github.com/zendframework/zf2/issues/4808">#4808</xhtml:a>)</xhtml:li>
</xhtml:ul>
<xhtml:p>To see the full changelog, visit:</xhtml:p>
<xhtml:ul>
<xhtml:li><xhtml:a href="/changelog/2.2.2">http://framework.zend.com/changelog/2.2.2</xhtml:a></xhtml:li>
</xhtml:ul>
<xhtml:h2>Thank You!</xhtml:h2>
<xhtml:p>I'd like to thank everyone who provided issue reports, typo
fixes, maintenance improvements, bugfixes, and documentation
improvements; your efforts make the framework increasingly
better!</xhtml:p>
<xhtml:h2>Roadmap</xhtml:h2>
<xhtml:p>Maintenance releases happen monthly on the third Wednesday.
Version 2.3.0 is tentatively scheduled for September.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
</feed>
