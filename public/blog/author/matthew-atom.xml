<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">Author: Matthew Weier O'Phinney - ZF Blog</title>
  <updated>2014-06-12T20:00:00+0000</updated>
  <generator uri="http://framework.zend.com" version="2">Zend_Feed_Writer</generator>
  <link rel="alternate" type="text/html" href="http://framework.zend.com/blog/author/matthew.html"/>
  <link rel="self" type="application/atom+xml" href="http://framework.zend.com/blog/author/matthew-atom.xml"/>
  <id>http://framework.zend.com/blog/author/matthew.html</id>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Zend Framework 1.12.7 Released!]]></title>
    <published>2014-06-12T20:00:00+0000</published>
    <updated>2014-06-12T20:00:00+0000</updated>
    <link rel="alternate" type="text/html" href="http://framework.zend.com/blog/zend-framework-1-12-7-released.html"/>
    <id>http://framework.zend.com/blog/zend-framework-1-12-7-released.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>matthew@zend.com</email>
      <uri>http://mwop.net/</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>The Zend Framework community is pleased to announce the
immediate availability of Zend Framework 1.12.7:</xhtml:p>
<xhtml:ul>
<xhtml:li><xhtml:a href="/downloads/latest#ZF1">http://framework.zend.com/downloads/latest#ZF1</xhtml:a></xhtml:li>
</xhtml:ul>
<xhtml:p>This release contains an important security fix in
<xhtml:code>Zend_Db_Select</xhtml:code>; we strongly encourage users of this
component to upgrade.</xhtml:p>
<xhtml:h2>Security Fixes</xhtml:h2>
<xhtml:p>One new security advisory has been made, and has been patched in
1.12.7:</xhtml:p>
<xhtml:p><xhtml:a href="/security/advisory/ZF2014-04">ZF2014-04</xhtml:a>, which
mitigates a potential SQL Injection (SQLi) vector when usiing ORDER
BY clauses in <xhtml:kbd>Zend_Db_Select</xhtml:kbd>; SQL function calls were
improperly detected, rendering ORDER clauses such as
<xhtml:kbd>MD5(1);drop table foo</xhtml:kbd> unfiltered. The logic has been
updated to prevent SQLi vectors, and users of this functionality
are strongly encouraged to upgrade immediately.</xhtml:p>
<xhtml:p>For more information, follow the link above; if you use the
component affected, please upgrade as soon as possible.</xhtml:p>
<xhtml:h2>Important Changes</xhtml:h2>
<xhtml:p>In addition to the security fix above, a number of other
important changes were made, including:</xhtml:p>
<xhtml:ul>
<xhtml:li>Support for PHPUnit 4 and 4.1, both within the Zend Framework
test suite and inside the <xhtml:kbd>Zend_Test_PHPUnit</xhtml:kbd>
component.</xhtml:li>
<xhtml:li>Backported support from ZF2 for recursive page removal within
<xhtml:kbd>Zend_Navigation</xhtml:kbd>.</xhtml:li>
<xhtml:li>Support within the <xhtml:kbd>Hostname</xhtml:kbd> validator for the newly
released IANA top level domains.</xhtml:li>
<xhtml:li>Forward-compatibility changes were made to ensure Zend
Framework 1 will run on the upcoming PHP 5.6.</xhtml:li>
</xhtml:ul>
<xhtml:p>For the complete list of changes, <xhtml:a href="/changelog/1.12.7">read the changelog</xhtml:a>.</xhtml:p>
<xhtml:h2>Thank You!</xhtml:h2>
<xhtml:p>As always, I'd like to thank the many contributors who made this
release possible, particularly Cassiano Dal Pizzol and Lars
Kneschke for reporting the security vulnerability, and Enrico
Zimuel for patching it.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Apigility 1.0.3 Released!]]></title>
    <published>2014-06-05T16:30:00+0000</published>
    <updated>2014-06-05T16:30:00+0000</updated>
    <link rel="alternate" type="text/html" href="http://framework.zend.com/blog/apigility-1-0-3-released.html"/>
    <id>http://framework.zend.com/blog/apigility-1-0-3-released.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>matthew@zend.com</email>
      <uri>http://mwop.net/</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>We are pleased to announce the immediate availability of
Apigility 1.0.3!</xhtml:p>
<xhtml:ul>
<xhtml:li><xhtml:a href="https://apigility.org/download">https://apigility.org/download</xhtml:a></xhtml:li>
</xhtml:ul>
<xhtml:p>This is our third maintenance release of Apigility, and the
first containing security fixes; read on for more information.</xhtml:p>
<xhtml:h2>Security Fixes</xhtml:h2>
<xhtml:p>We were notified by <xhtml:a href="https://github.com/stefanotorresi">Stefano Torresi</xhtml:a> of a
potential security vector in
<xhtml:code>ZF\Apigility\DbConnectedResource</xhtml:code>. While the
<xhtml:code>create()</xhtml:code> method of that class pulls data from the
composed input filter, if present, the <xhtml:code>patch()</xhtml:code> and
<xhtml:code>update()</xhtml:code> methods were not, making it possible for an
attacker to send unwanted data to the API service.</xhtml:p>
<xhtml:p>We have updated the class to pull from the composed input
filter, if present, for each of the <xhtml:code>create()</xhtml:code>,
<xhtml:code>patch()</xhtml:code>, and <xhtml:code>update()</xhtml:code> methods.</xhtml:p>
<xhtml:p>If you use DB-Connected REST resources in Apigility, we
<xhtml:strong>strongly</xhtml:strong> recommend updating immediately. You can
do so by running <xhtml:code>composer update</xhtml:code> inside your
application.</xhtml:p>
<xhtml:p><xhtml:a href="/security/advisory/AG2014-01">Read the security
advisory for more details.</xhtml:a></xhtml:p>
<xhtml:h2>Deployment Fixes</xhtml:h2>
<xhtml:p>We were notified that the logic for finding a Composer
executable in <xhtml:a href="https://github.com/zfcampus/zf-deploy">zf-deploy</xhtml:a> would fail in
some situations. A fix was contributed that better resolves the
path to the executable, particularly in situations where a
<xhtml:code>composer.phar</xhtml:code> must first be downloaded.</xhtml:p>
<xhtml:p>Additionally, in reviewing this fix, <xhtml:a href="https://twitter.com/ezimuel">Enrico Zimuel</xhtml:a> noted that we
needed test coverage for most of the ZFDeploy functionality; we now
have a comprehensive set of tests, all passing!</xhtml:p>
<xhtml:h2>Documentation Fixes</xhtml:h2>
<xhtml:p><xhtml:a href="https://github.com/kaloyan-raev">Kaloyan Raev</xhtml:a> noted
that the HTML documentation does not render properly under Internet
Explorer, due to the order in which media type selectors are
matched. A swap in the order fixes the situation, and continues to
work as expected under other browsers.</xhtml:p>
<xhtml:h2>Thank You!</xhtml:h2>
<xhtml:p>Many thanks to Stefano Torresi for working with us on the
DB-Connected security issue, to Kaloyan Raev for his assistance
with zf-deploy and the documentation, and to Enrico Zimuel, for the
huge amount of testing he added to zf-deploy!</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Apigility 1.0.2 Released!]]></title>
    <published>2014-06-04T18:00:00+0000</published>
    <updated>2014-06-04T18:00:00+0000</updated>
    <link rel="alternate" type="text/html" href="http://framework.zend.com/blog/apigility-1-0-2-released.html"/>
    <id>http://framework.zend.com/blog/apigility-1-0-2-released.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>matthew@zend.com</email>
      <uri>http://mwop.net/</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>We are pleased to announce the immediate availability of
Apigility 1.0.2!</xhtml:p>
<xhtml:ul>
<xhtml:li><xhtml:a href="https://apigility.org/download">https://apigility.org/download</xhtml:a></xhtml:li>
</xhtml:ul>
<xhtml:p>This is our second maintenance release of Apigility, fixing a
number of issues, and providing significant improvements for file
upload capabilities.</xhtml:p>
<xhtml:h2>Upload Support</xhtml:h2>
<xhtml:p>Uploads were possible before this release, but were difficult to
properly enable. Additionally, PATCH and PUT requests required
manually handling the file uploads, as PHP does not natively
support file uploads for those request methods; the Zend Framework
2 InputFilter component, because it utilizes PHP's native support
for validating that an upload completed and for moving an upload
file to a new location, also could not deal with these methods.</xhtml:p>
<xhtml:p>This release makes the following changes in order to facilitate
file uploads via your Apigility API:</xhtml:p>
<xhtml:ul>
<xhtml:li>Content validation was altered to merge file upload data, when
present, with the submitted API fields.</xhtml:li>
<xhtml:li>The Admin UI now allows you to mark a field as representing a
file upload; this ensures that content validation will work
properly, as content validation differs for file uploads.</xhtml:li>
<xhtml:li>The content negotiation module now provides emulation for PHP's
file upload support when receiving PATCH and PUT requests, ensuring
that the files are uploaded in the same manner, cleaned up
post-request, and passed to validation properly. You should notice
no difference between POST, PUT, or PATCH requests when performing
file uploads, whether a single or multiple files are provided.</xhtml:li>
</xhtml:ul>
<xhtml:p>File uploads are only done using the
<xhtml:code>multipart/form-data</xhtml:code> media type. You will need to add
that media type to the content negotiation whitelist if you plan to
perform file uploads.</xhtml:p>
<xhtml:p>If you have further questions, you can <xhtml:a href="https://apigility.org/documentation/recipes/upload-files-to-api">consult
the documentation</xhtml:a>.</xhtml:p>
<xhtml:h2>Changelog</xhtml:h2>
<xhtml:p>While upload support is the major feature of this release, we
fixed many other issues.</xhtml:p>
<xhtml:h3>General</xhtml:h3>
<xhtml:ul>
<xhtml:li>
<xhtml:p>All repositories have updated <xhtml:code>composer.json</xhtml:code> files
that properly define the two branch aliases for the
<xhtml:code>master</xhtml:code> and <xhtml:code>develop</xhtml:code> branches.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p>All repositories have updated <xhtml:code>README.md</xhtml:code> files that
provide a "Requirements" section linking to the
<xhtml:code>composer.json</xhtml:code> file.</xhtml:p>
</xhtml:li>
</xhtml:ul>
<xhtml:h3>zf-apigility-admin</xhtml:h3>
<xhtml:ul>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zfcampus/zf-apigility-admin/pull/181">Fixes for
the "Encrypt" and "Compress" filter adapters</xhtml:a>, ensuring that
these filters can be properly created and configured.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zfcampus/zf-apigility-admin/pull/182">Ability
to specify file upload fields</xhtml:a>. A field can now be marked as
representing a file upload, ensuring it can then be validated
correctly.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zfcampus/zf-apigility-admin/pull/171">Fix for
unclosed link in authentication screen</xhtml:a>, which was preventing
edits and saves of authentication details.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zfcampus/zf-apigility-admin/pull/184">Remove
charset option for Postgres adapters</xhtml:a>, as that adapter does not
support setting the character set.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zfcampus/zf-apigility-admin/pull/185">Added DSN
to DB adapter input filter</xhtml:a>, so that edits to an existing DB
adapter will save when the DSN is provided.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zfcampus/zf-apigility-admin/pull/178">Fixes to
the DB-Connected service model</xhtml:a>, to ensure that update data is
saved properly.</xhtml:p>
</xhtml:li>
</xhtml:ul>
<xhtml:h3>zf-apigility-documentation</xhtml:h3>
<xhtml:ul>
<xhtml:li><xhtml:a href="https://github.com/zfcampus/zf-apigility-documentation/pull/9">Fixes
HTTP status code for POST operations</xhtml:a>, to now display
<xhtml:code>201</xhtml:code> as a potential status.</xhtml:li>
</xhtml:ul>
<xhtml:h3>zf-apigility-skeleton</xhtml:h3>
<xhtml:ul>
<xhtml:li><xhtml:a href="https://github.com/zfcampus/zf-apigility-skeleton/pull/63">Adds
composer.phar to the skeleton</xhtml:a>, since it should have always been
there!</xhtml:li>
</xhtml:ul>
<xhtml:h3>zf-content-negotiation</xhtml:h3>
<xhtml:ul>
<xhtml:li><xhtml:a href="https://github.com/zfcampus/zf-content-negotiation/pull/18">Implements
file uploads</xhtml:a> <xhtml:a href="https://github.com/zfcampus/zf-content-negotiation/pull/20">via
request body streaming</xhtml:a> for PUT and PATCH requests.</xhtml:li>
</xhtml:ul>
<xhtml:h3>zf-content-validation</xhtml:h3>
<xhtml:ul>
<xhtml:li><xhtml:a href="https://github.com/zfcampus/zf-content-validation/pull/14">Ensures
file upload data is passed to validation</xhtml:a>, which allows
validating file uploads.</xhtml:li>
</xhtml:ul>
<xhtml:h3>zf-deploy</xhtml:h3>
<xhtml:ul>
<xhtml:li><xhtml:a href="https://github.com/zfcampus/zf-deploy/pull/15">Ensures
--gitignore flag is passed when copying source tree</xhtml:a>.</xhtml:li>
</xhtml:ul>
<xhtml:h3>zf-hal</xhtml:h3>
<xhtml:ul>
<xhtml:li><xhtml:a href="https://github.com/zfcampus/zf-hal/pull/35">Always
store the original entity within ZF\Hal\Entity</xhtml:a>, fixing an issue
where REST controllers cast entities to arrays prior to creating
the <xhtml:code>ZF\Hal\Entity</xhtml:code> instance, and thus causing listeners
on <xhtml:code>renderEntity</xhtml:code> et. al. to receive data that could
never be matched.</xhtml:li>
</xhtml:ul>
<xhtml:h3>zf-oauth2</xhtml:h3>
<xhtml:ul>
<xhtml:li><xhtml:a href="https://github.com/zfcampus/zf-oauth2/pull/43">Pass
all OAuth2 adapter options to oauth2-server-php</xhtml:a>, enabling the
ability to turn on refresh token re-issue, among other things.</xhtml:li>
</xhtml:ul>
<xhtml:h2>Roadmap</xhtml:h2>
<xhtml:p>Many thanks for all the great issue reports and discussions on
the <xhtml:a href="http://bit.ly/apigility-users">mailing list</xhtml:a> and
the various issue trackers!</xhtml:p>
<xhtml:p>We will do additional maintenance releases on an as-needed
basis. The next feature release, 1.1, is in development, and
includes:</xhtml:p>
<xhtml:ul>
<xhtml:li>Doctrine-Connected REST services</xhtml:li>
<xhtml:li>Database Autodiscovery for REST services (think of this as
DB-Connected that finds all your tables and proposes field
configuration for you!)</xhtml:li>
<xhtml:li>Mongo-Connected REST services</xhtml:li>
<xhtml:li>HTTP Caching</xhtml:li>
</xhtml:ul>
<xhtml:p>We would appreciate any feedback you can provide, either in the
mailing lists, in issues, or via comments on associated pull
requests.</xhtml:p>
<xhtml:p>Stay tuned!</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Apigility 1.0.0 Released!]]></title>
    <published>2014-05-07T15:00:00+0000</published>
    <updated>2014-05-07T15:00:00+0000</updated>
    <link rel="alternate" type="text/html" href="http://framework.zend.com/blog/apigility-1-0-0-released.html"/>
    <id>http://framework.zend.com/blog/apigility-1-0-0-released.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>matthew@zend.com</email>
      <uri>http://mwop.net/</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:img src="/images/ag-hero.png" style="display: block; margin-left: auto; margin-right: auto; max-width: 100%" alt="Apigility"/>
<xhtml:p>We're happy to announce the immediate availability of Apigility
1.0.0!</xhtml:p>
<xhtml:ul>
<xhtml:li><xhtml:a href="http://apigility.org/download">http://apigility.org/download</xhtml:a></xhtml:li>
</xhtml:ul>
<xhtml:p>Apigility is the world's easiest way to create robust,
well-formed, documented, and secure APIs.</xhtml:p>
<xhtml:p>We've noticed that web development has fundamentally shifted
over the past few years. Server side applications that return heavy
loads of HTML markup are waning; instead APIs are driving the web.
APIs are being used to enable inter-division data exchange. APIs
are being used as the building blocks for web applications --
allowing user interface experts the flexibility to change the look
and feel of a website with no intervention from the server-side
application developers. APIs are driving and empowering the mobile
web, allowing creation of both native mobile applications and
mobile web applications.</xhtml:p>
<xhtml:p>Apigility exists to allow <xhtml:em>you</xhtml:em> to expose <xhtml:em>your</xhtml:em>
business logic as an API.</xhtml:p>
<xhtml:h2>Opinionated</xhtml:h2>
<xhtml:p>APIs are not just about tossing around some JSON or XML. They
require a ton of architectural decisions every step of the way as
you implement the API:</xhtml:p>
<xhtml:ul>
<xhtml:li>How will you handle HTTP method negotiation?<xhtml:br/></xhtml:li>
<xhtml:li>How will you handle content negotiation?<xhtml:br/></xhtml:li>
<xhtml:li>How will you handle authentication?<xhtml:br/></xhtml:li>
<xhtml:li>How will you handle authorization?<xhtml:br/></xhtml:li>
<xhtml:li>How will you handle input validation?<xhtml:br/></xhtml:li>
<xhtml:li>What representation format will you use?<xhtml:br/></xhtml:li>
<xhtml:li>How will you represent errors?<xhtml:br/></xhtml:li>
<xhtml:li>How will you document your API?</xhtml:li>
</xhtml:ul>
<xhtml:p>Most of these questions have no single, correct answer. Many
standards, proposals, and drafts exist for all aspects of APIs. As
a developer, you have to wade through them and choose which you
will use, and how you will put them together.</xhtml:p>
<xhtml:p>In short, when developing an API, you often spend an equal or
greater amount of time developing the architecture for the API as
you would writing the code you want to expose in the first
place.</xhtml:p>
<xhtml:p>Apigility is opinionated <xhtml:em>for you</xhtml:em>, and provides a
flexible and robust engine that answers these questions:</xhtml:p>
<xhtml:ul>
<xhtml:li><xhtml:a href="http://tools.ietf.org/html/draft-kelly-json-hal-06">application/hal+json</xhtml:a>
is<xhtml:br/>
used for the representation format (but you can add your own
representations<xhtml:br/>
if you really want).<xhtml:br/></xhtml:li>
<xhtml:li><xhtml:a href="http://tools.ietf.org/html/draft-nottingham-http-problem-06">application/problem+json</xhtml:a><xhtml:br/>

is used for representing errors.<xhtml:br/></xhtml:li>
<xhtml:li>HTTP method negotiation is handled early, returning appropriate
response<xhtml:br/>
status codes and headers when invalid methods are detected. Support
for<xhtml:br/>
<xhtml:code>OPTIONS</xhtml:code> requests is built in.<xhtml:br/></xhtml:li>
<xhtml:li>Content negotiation is handled early, returning appropriate
response<xhtml:br/>
status codes and headers when we cannot return an appropriate
representation,<xhtml:br/>
or cannot understand the data provided to the
application.<xhtml:br/></xhtml:li>
<xhtml:li>Authentication is handled early, returning appropriate
response<xhtml:br/>
status codes and headers when invalid credentials are detected. We
provide<xhtml:br/>
HTTP Basic, HTTP Digest, and OAuth2 support out-of-the-box, but
provide a<xhtml:br/>
flexible, event-driven system for implementing or integrating your
own<xhtml:br/>
authentication systems.<xhtml:br/></xhtml:li>
<xhtml:li>Authorization is handled early, returning appropriate
response<xhtml:br/>
status codes and headers when access is not allowed. We provide an
ACL-based<xhtml:br/>
system that can be easily extended to provide user-specific
permissions as<xhtml:br/>
well as an event-driven system for implementing or integrating your
own<xhtml:br/>
authorization systems if needed.<xhtml:br/></xhtml:li>
<xhtml:li>Input validation is handled early, returning appropriate
response status codes<xhtml:br/>
and error messages when invalid data is detected.<xhtml:br/></xhtml:li>
<xhtml:li>Documentation is provided out of the box. We provide HTML,
JSON, and<xhtml:br/>
<xhtml:a href="https://helloreverb.com/developers/swagger">Swagger</xhtml:a>
representations; we<xhtml:br/>
anticipate adding more in the future. Documentation is generated
automatically<xhtml:br/>
from your API configuration, and you are able to add descriptions
and more<xhtml:br/>
detail as desired.</xhtml:li>
</xhtml:ul>
<xhtml:p>We make decisions so you don't have to. However, you'll note
that we've created flexibility so that if <xhtml:em>you</xhtml:em> have an
opinion, you can integrate it!</xhtml:p>
<xhtml:h2>Interface with your API</xhtml:h2>
<xhtml:p>Apigility is not just an engine. Apigility also provides a
web-based Admin UI to allow you to quickly create and modify your
API and services, set up authentication, create authorization
rules, set up validations for incoming data, and write
document.</xhtml:p>
<xhtml:img src="/images/apigility-1.0.0-dashboard.png" style="display: block; margin-left: auto; margin-right: auto; max-width: 100%" alt="Apigility Dashboard"/>
<xhtml:p>The Admin UI is built using <xhtml:a href="https://angularjs.org/">AngularJS</xhtml:a>, and is backed by... an API!
(We're taking the "API First" mantra very seriously!)</xhtml:p>
<xhtml:h2>Get Started in Seconds</xhtml:h2>
<xhtml:p>You can install Apigility in seconds; execute the following
command in your shell:</xhtml:p>
<xhtml:pre class="console">
<xhtml:code>$ curl -sS http://apigility.org/install | php</xhtml:code>
</xhtml:pre>
<xhtml:p>or, if you don't have <xhtml:a href="http://curl.haxx.se/">curl</xhtml:a>
installed, use the PHP interpreter itself:</xhtml:p>
<xhtml:pre>
<xhtml:code>$ php -r "readfile('http://apigility.org/install');" | php</xhtml:code>
</xhtml:pre>
<xhtml:h2>Deploy Anywhere</xhtml:h2>
<xhtml:p>Apigility is built on top of Zend Framework 2, and has tools to
ensure that the Admin UI is only present in development mode. As
such, you can deploy Apigility anywhere you normally deploy PHP
applications: a local server, your web host provider, or the
cloud.</xhtml:p>
<xhtml:p>We provide a tool, <xhtml:a href="https://github.com/zfcampus/zf-deploy">ZFDeploy</xhtml:a>, to aid in
creating deployment packages, including Zend Server ZPK files.</xhtml:p>
<xhtml:h2>Modular</xhtml:h2>
<xhtml:p>Apigility consists of more than a dozen Zend Framework 2
modules, each doing one specific task in the workflow. As such, you
can mix and match these modules in your own ZF2 applications, or
even <xhtml:a href="http://apigility.org/documentation/recipes/apigility-in-an-existing-zf2-application">
add Apigility to an existing application</xhtml:a>.</xhtml:p>
<xhtml:h2>The Future</xhtml:h2>
<xhtml:p>Reaching 1.0 is a huge milestone -- but it's not the end of the
road!</xhtml:p>
<xhtml:p>We already have a number of great features waiting in the wings
for a 1.1 release: Doctrine-Connected services, Database
Autodiscovery, Mongo-Connected services, and HTTP Caching.</xhtml:p>
<xhtml:p>What will <xhtml:em>you</xhtml:em> build today?</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Apigility 1.0.0beta3 Released!]]></title>
    <published>2014-04-30T20:30:00+0000</published>
    <updated>2014-04-30T20:30:00+0000</updated>
    <link rel="alternate" type="text/html" href="http://framework.zend.com/blog/apigility-1-0-0beta3-released.html"/>
    <id>http://framework.zend.com/blog/apigility-1-0-0beta3-released.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>matthew@zend.com</email>
      <uri>http://mwop.net/</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>We are pleased to announce the immediate availability of
Apigility 1.0.0beta3!</xhtml:p>
<xhtml:ul>
<xhtml:li><xhtml:a href="http://apigility.org/download">http://apigility.org/download</xhtml:a></xhtml:li>
</xhtml:ul>
<xhtml:p>This is our third -- and likely last! -- beta release of
Apigility! The features in this release are mainly around
stabilization.</xhtml:p>
<xhtml:h2>Deployment and Console</xhtml:h2>
<xhtml:p>Most of the work we've performed since beta2 was on <xhtml:a href="https://github.com/zfcampus/zf-deploy">zf-deploy</xhtml:a>, our
packaging/deployment tool. We made the following changes:</xhtml:p>
<xhtml:ul>
<xhtml:li>First, the tool can now be used both within an application, as
well as a standalone <xhtml:a href="http://php.net/phar">phar</xhtml:a> file.
When used as a standalone phar file, you can now self update it
with the <xhtml:code>self-update</xhtml:code> command; this will check <xhtml:a href="https://packages.zendframework.com/">https://packages.zendframework.com/</xhtml:a>
for any new versions, and, if found, do an "in-place" update of the
tool. (Note: the library we use that provides this functionality
often emits PHP fatal errors; in practice, however, we've noticed
that the process works even when such errors are reported.)</xhtml:li>
<xhtml:li>Second, we were not happy with the argument handling we were
using, nor with the strong coupling of console argument parsing
logic with the logic consuming the arguments. We built a small
microframework around <xhtml:code>Zend\Console</xhtml:code>'s
<xhtml:code>RouteMatcher</xhtml:code> subcomponent that provides more
flexibility around argument handling, and are now shipping this in
the module <xhtml:a href="https://github.com/zfcampus/zf-console">zf-console</xhtml:a>.</xhtml:li>
</xhtml:ul>
<xhtml:p>In addition to these architectural changes, we also implemented
two new features in the tool:</xhtml:p>
<xhtml:ul>
<xhtml:li>You can specify a directory with the "local" configuration you
want to use in the deployment package via the
<xhtml:code>--configs</xhtml:code> argument.</xhtml:li>
<xhtml:li>You can specify a directory containing the ZPK skeleton you
wish to use when creating a ZPK (Zend Server deployment package);
this directory should contain a <xhtml:code>deployment.xml</xhtml:code> and any
scripts you will be using.</xhtml:li>
</xhtml:ul>
<xhtml:p>With these changes, we feel that <xhtml:code>zf-deploy</xhtml:code> is ready
for inclusion in a stable Apigility release!</xhtml:p>
<xhtml:h2>Documentation Updates</xhtml:h2>
<xhtml:p>We've received a number of documentation improvements since
beta2, and added a few documents as well.</xhtml:p>
<xhtml:p>In particular:</xhtml:p>
<xhtml:ul>
<xhtml:li>An error was spotted in the "HAL for RPC services" recipe that
made the code unusable.</xhtml:li>
<xhtml:li>We've documented how to use the Zend Server SDK to deploy ZPK
packages.</xhtml:li>
<xhtml:li>We've added a recipe for adding Apigility modules to an
existing Zend Framework 2 application.</xhtml:li>
<xhtml:li>We've added documentation on the new <xhtml:code>zf-console</xhtml:code>
module.</xhtml:li>
</xhtml:ul>
<xhtml:h2>Beta3 Updates</xhtml:h2>
<xhtml:p>In addition to the deployment and console tooling, we made the
following changes:</xhtml:p>
<xhtml:ul>
<xhtml:li>We updated the <xhtml:code>SendResponse</xhtml:code> listener in
<xhtml:code>zf-api-problem</xhtml:code> to merge in any headers set in the
application response object before sending the API Problem
response. This ensures that any previously set headers are also set
-- solving several issues observed when using third-party modules
for Cross Origin Resource Sharing (CORS), as well as HTTP
authentication.</xhtml:li>
<xhtml:li>The storage adapters we ship with <xhtml:code>zf-oauth</xhtml:code> now
both allow you to specify configuration via a
<xhtml:code>storage_settings</xhtml:code> key; this change allows you to
specify custom tables for both the PDO and Mongo adapters.</xhtml:li>
<xhtml:li>We've updated the "api.enable" service to ensure it works with
current versions of Apigility (and no longer raises errors!).</xhtml:li>
<xhtml:li>We no longer display a resource class in the "Source Code" tab
of a service if a corresponding class does not exist (e.g.,
DB-Connected resource classes are virtual services).</xhtml:li>
<xhtml:li>We've added the option to recursively delete the directory for
a service to the Admin API; the Admin UI now presents a checkbox
with this option.</xhtml:li>
<xhtml:li>We've added the option to delete an entire API. By default,
this only removes the API's module from application configuration;
however, you have the option to recursively delete the API module
as well (once again presented in the Admin UI via a checkbox).</xhtml:li>
<xhtml:li>We now generate factories for RPC controllers and REST resource
classes when creating new services. This simplifies the story for
dependency injection of these classes.</xhtml:li>
</xhtml:ul>
<xhtml:h2>Roadmap</xhtml:h2>
<xhtml:p>At this time, we feel Apigility has become very stable, and that
we have addressed the most pressing usability issues. We anticipate
issuing a stable release next week (week of 5 May 2014).</xhtml:p>
<xhtml:p>As noted in previous beta announcements, reaching stability is
only the first step, however! Features such as
"Doctrine-Connected", "Mongo-Connected", and "DB-Autodiscovery"
REST services are already either implemented or will be soon, and
we will be debuting these in a 1.1 version in the very near
future.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Apigility 1.0.0beta2 Released!]]></title>
    <published>2014-04-16T18:30:00+0000</published>
    <updated>2014-04-16T18:30:00+0000</updated>
    <link rel="alternate" type="text/html" href="http://framework.zend.com/blog/apigility-1-0-0beta2-released.html"/>
    <id>http://framework.zend.com/blog/apigility-1-0-0beta2-released.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>matthew@zend.com</email>
      <uri>http://mwop.net/</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>We are pleased to announce the immediate availability of
Apigility 1.0.0beta2!</xhtml:p>
<xhtml:ul>
<xhtml:li><xhtml:a href="http://apigility.org/download">http://apigility.org/download</xhtml:a></xhtml:li>
</xhtml:ul>
<xhtml:p>This is our second beta release of Apigility, and introduces
extensive documentation, Admin UI performance improvements, and
deployment tools!</xhtml:p>
<xhtml:h2>Documentation</xhtml:h2>
<xhtml:p>The primary goal of the beta phase for the Zend Framework team
is documenting the project. We've made enormous headway at this
point, but we'll let <xhtml:strong>you</xhtml:strong> be the judge of that;
<xhtml:a href="http://apigility.org/documentation">visit the
documentation yourself</xhtml:a>!</xhtml:p>
<xhtml:p>Among topics covered:</xhtml:p>
<xhtml:ul>
<xhtml:li>A "Getting Started" guide, and a companion, "REST Service
Tutorial".</xhtml:li>
<xhtml:li>An API Primer</xhtml:li>
<xhtml:li>Chapters on Authentication/Authorization, Content Validation,
and the Documentation features.</xhtml:li>
<xhtml:li>A module-by-module reference guide, detailing configuration
options.</xhtml:li>
</xhtml:ul>
<xhtml:h2>New Features</xhtml:h2>
<xhtml:p>While the beta cycle is primarily around stabilizing the API and
Admin UI, we decided one new feature warranted inclusion in version
1: a packaging/deployment tool, <xhtml:a href="https://github.com/zfcampus/zf-deploy">zf-deploy</xhtml:a>.</xhtml:p>
<xhtml:p>This tool allows you to create packages from your Apigility --
or any ZF2 application -- for deployment. Formats supported include
zip, tar, tgz, and zpk (the Zend Server deployment package format).
We plan to integrate support for deploying zpk packages soon as
well.</xhtml:p>
<xhtml:h2>Beta2 Updates</xhtml:h2>
<xhtml:p>Polishing, polishing, polishing was our mantra for beta2. This
included incorporating user feedback, but also scrutinizing the UI
and code for consistency issues.</xhtml:p>
<xhtml:h3>UI Updates</xhtml:h3>
<xhtml:p>Following beta1, we had a number of complaints about UI
responsiveness, particularly around the "Fields" screen. We did
some analysis of the UI, and a lot of work around dynamically
loading and unloading DOM in the admin based on what should be
visible. As a result, we were able to significantly improve
responsiveness. There may be more work to do, but early reports
indicate that the changes make the Admin UI usable in situations
that previously crashed the browser.</xhtml:p>
<xhtml:p>In addition to the performance improvements, we made the
following updates:</xhtml:p>
<xhtml:ul>
<xhtml:li>
<xhtml:p>On the "Authorizations" screen for each API, if no
authentication is currently configured, we display a message to
this effect, and link to the authentication screen. Unfortunately,
in beta1, that link was invalid; we've fixed this.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p>The "Fields" tab received a slight overhaul. We noticed that
items with toggles displayed "Yes/No" terminology, but "On/Off" for
the actual form input; these now use "Yes/No" verbiage
consistently. The "Help" screen could not be dismissed with the
<xhtml:code>&lt;Esc&gt;</xhtml:code> key; it now can. Previously, when hitting
<xhtml:code>&lt;Enter&gt;</xhtml:code> from the "Create New Field" text input,
it would raise the "Help" screen; it now properly creates the new
field. The "Description" field was moved to the first option
displayed for each field, to promote documentation of fields. We
also added a "Validation Failure Message" field to allow specifying
a unified error message on failed validation (vs. one or more per
validator); we also ensured that "blanking" out the data in this
field will remove any such message previously set. Finally, filters
are now listed before validators, to signal the order in which
validation operations occur (filtering/normalization occurs before
validation).</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p>The "Source Code" tab was not properly generating links for
files; we've fixed this in beta2.</xhtml:p>
</xhtml:li>
</xhtml:ul>
<xhtml:h3>Engine Updates</xhtml:h3>
<xhtml:p>A few improvements were made to the API engine itself:</xhtml:p>
<xhtml:ul>
<xhtml:li>
<xhtml:p>The <xhtml:code>UnauthorizedListener</xhtml:code> registered by the
<xhtml:code>zf-apigility</xhtml:code> module was not registering headers set by
the <xhtml:code>zf-mvc-auth</xhtml:code> module, meaning that the
<xhtml:code>WWW-Authenticate</xhtml:code> header was not propagating. This has
been corrected.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p>We modified <xhtml:code>ZF\ContentNegotiation\JsonModel</xhtml:code> to
check for <xhtml:code>json_encode()</xhtml:code> errors, and to raise an
exception when one is detected. This prevents situations where an
empty response is returned on inability to serialize to JSON.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:code>zf-apigility-documentation-swagger</xhtml:code> was not
returning a <xhtml:code>Content-Type</xhtml:code> header value of
<xhtml:code>application/vnd.swagger+json</xhtml:code>; it now does.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p>We fixed the bcrypt cost in <xhtml:code>zf-oauth2</xhtml:code> to use the
defaults from <xhtml:code>Zend\Crypt</xhtml:code>.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p>We updated the OAuth2 database schema in <xhtml:code>zf-oauth2</xhtml:code>
to match that of the upstream <xhtml:a href="https://github.com/bshaffer/oauth2-server-php">oauth2-server-php
package</xhtml:a>.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p>We now inject the <xhtml:code>ZF\Rest\ResourceEvent</xhtml:code> with the
current MVC request object; you can retrieve it from within your
resource class using
<xhtml:code>$this-&gt;getEvent()-&gt;getRequest()</xhtml:code>. This will give
you access to HTTP request headers, query string arguments,
etc.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p>We no longer allow multiple "self" relational links in
<xhtml:code>zf-hal</xhtml:code>.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p>When specifying route parameters for a <xhtml:code>zf-hal</xhtml:code>
metadata map, you can now use a PHP callable as the value;
<xhtml:code>zf-hal</xhtml:code> will invoke that callable with the object for
which a link is being generated in order to get the value for that
route parameter. This is particularly useful for deterimining
identifiers for parent resources.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p>We moved the <xhtml:code>zf-apiglity-welcome</xhtml:code> requirement to be
a development-only requirement.</xhtml:p>
</xhtml:li>
</xhtml:ul>
<xhtml:h2>Roadmap</xhtml:h2>
<xhtml:p>We're excited to get a stable release of Apigility as soon as we
possibly can. We feel that both the engine and Admin UI have
stabilized significantly, and are targetting a stable release by
the end of this month. <xhtml:strong>During that time, we will be working
primarily on additional documentation and critical
bugfixes.</xhtml:strong></xhtml:p>
<xhtml:p>As noted in the beta1 announcement, reaching stability is only
the first step, however! We already have contributors making
significant headway on features such as "Doctrine-Connected",
"Mongo-Connected", and "DB-Autodiscovery" REST services, and we
will be debuting these in a 1.1 version not long after we reach
version 1.0. Stay tuned!</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Zend Framework 2.2.7 and 2.3.1 Released!]]></title>
    <published>2014-04-15T20:05:00+0000</published>
    <updated>2014-04-15T20:05:00+0000</updated>
    <link rel="alternate" type="text/html" href="http://framework.zend.com/blog/zend-framework-2-2-7-and-2-3-1-released.html"/>
    <id>http://framework.zend.com/blog/zend-framework-2-2-7-and-2-3-1-released.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>matthew@zend.com</email>
      <uri>http://mwop.net/</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>The Zend Framework community is pleased to announce the
immediate availability of:</xhtml:p>
<xhtml:ul>
<xhtml:li>Zend Framework <xhtml:strong>2.2.7</xhtml:strong></xhtml:li>
<xhtml:li>Zend Framework <xhtml:strong>2.3.1</xhtml:strong></xhtml:li>
</xhtml:ul>
<xhtml:ul>
<xhtml:li><xhtml:a href="/downloads/latest#ZF2">http://framework.zend.com/downloads/latest#ZF2</xhtml:a></xhtml:li>
</xhtml:ul>
<xhtml:p>While these are scheduled maintenance releases, they also
contain important security fixes; we strongly encourage users to
upgrade.</xhtml:p>
<xhtml:h2>Security Fixes</xhtml:h2>
<xhtml:p>One new security advisory has been made, and has been patched in
both 2.2.7 and 2.3.1.</xhtml:p>
<xhtml:p><xhtml:a href="/security/advisory/ZF2014-03">ZF2014-03</xhtml:a>, which
mitigates potential cross site scripting (XSS) vectors in multiple
view helpers due to inappropriate HTML attribute escaping. Many
view helpers were using the <xhtml:kbd>escapeHtml()</xhtml:kbd> view helper in
order to escape HTML attributes. This release patches them to use
the <xhtml:kbd>escapeHtmlAttr()</xhtml:kbd> view helper in these situations. If
you use form or navigation view helpers, or "HTML element" view
helpers (such as <xhtml:kbd>gravatar()</xhtml:kbd>, <xhtml:kbd>htmlFlash()</xhtml:kbd>,
<xhtml:kbd>htmlPage()</xhtml:kbd>, or <xhtml:kbd>htmlQuicktime()</xhtml:kbd>), we recommend
upgrading immediately.</xhtml:p>
<xhtml:p>For more information, follow the links above; if you use any of
the components affected, please upgrade as soon as possible.</xhtml:p>
<xhtml:h2>2.3.1</xhtml:h2>
<xhtml:p>In addition to the security fixes listed above,
<xhtml:strong>2.3.1</xhtml:strong> contains more than 80 bugfixes. In
particular, a number of improvements were made to the behavior of
nested form fieldsets and collection input filters (which often go
hand-in-hand).</xhtml:p>
<xhtml:p>For the complete list of changes, <xhtml:a href="/changelog/2.3.1">read the changelog</xhtml:a>.</xhtml:p>
<xhtml:h2>Thank You!</xhtml:h2>
<xhtml:p>As always, I'd like to thank the many contributors who made
these releases possible! In particular, I'd like to thank the team
at <xhtml:a href="https://roave.com">Roave</xhtml:a>, who both reported and
patched the ZF2014-03 security issue.</xhtml:p>
<xhtml:h2>Roadmap</xhtml:h2>
<xhtml:p>Zend Framework 2 maintenance releases will happen bi-monthly,
with the next one scheduled for mid-June, 2014. Releases may occur
more frequently if security issues are reported.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Zend Framework 1.12.6 Released!]]></title>
    <published>2014-04-15T20:00:00+0000</published>
    <updated>2014-04-15T20:00:00+0000</updated>
    <link rel="alternate" type="text/html" href="http://framework.zend.com/blog/zend-framework-1-12-6-released.html"/>
    <id>http://framework.zend.com/blog/zend-framework-1-12-6-released.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>matthew@zend.com</email>
      <uri>http://mwop.net/</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>The Zend Framework community is pleased to announce the
immediate availability of Zend Framework 1.12.6!</xhtml:p>
<xhtml:ul>
<xhtml:li><xhtml:a href="/downloads/latest#ZF1">http://framework.zend.com/downloads/latest#ZF1</xhtml:a></xhtml:li>
</xhtml:ul>
<xhtml:p>This is a maintenance release, and corrects a backwards
compatibility break introduced in 1.12.4.</xhtml:p>
<xhtml:h2>Locale Updates</xhtml:h2>
<xhtml:p>Zend Framework 1.12.4 included an update to the <xhtml:a href="//cldr.unicode.org/">CLDR</xhtml:a> version shipped, bumping to version
24. Our previous CLDR version, however, was version 2.0 or newer --
a version over 3 years old at this point.</xhtml:p>
<xhtml:p>The problem that arose is that <xhtml:a href="https://github.com/akrabat/zf1/blob/0282f49112688f124373bcf915abb6227d050454/library/Zend/Locale.php#L38-L67">
more than two dozen locales have been renamed</xhtml:a> in the official
CLDR sources since then, and Zend Framework 1.12.4 shipped exactly
what CLDR ships. As a result, users of those old locales suddenly
found their applications no longer working, due to newly invalid
locales.</xhtml:p>
<xhtml:p>We have created some functionality in Zend Framework 1.12.6 to
alias old locales to the equivalent new locale string, thus
restoring backwards compatibility with versions prior to
1.12.4.</xhtml:p>
<xhtml:h2>Tag Updates</xhtml:h2>
<xhtml:p>Prior to 1.12.4, we used Subversion for maintaining Zend
Framework 1, and thus for tagging releases. Tags in Subversion,
however, are branches, not snapshots, and our build process at the
time took advantage of that fact, for better or for worse: we would
build the documentation, and then replace the documentation sources
with the built artifacts; we would inject the ZF1 Extras
repository; and we would inject the Dojo repository. As a result,
the tag was not a 1:1 snapshot of the trunk at the time, but rather
the result of a build process.</xhtml:p>
<xhtml:p>This meant that if a user was using <xhtml:kbd>svn:externals</xhtml:kbd> and
pinned to a tag, they would have the equivalent of our distribution
packages -- in other words, access to the ZF1 Extras, Dojo, and
documentation.</xhtml:p>
<xhtml:p>With the <xhtml:a href="http://framework.zend.com/blog/2013-03-27-zf1-git-migration.html">migration
to Git a year ago</xhtml:a>, our build processes needed to change. Git
does true tags: a tag is a snapshot of the branch at the revision
when it was tagged. The result is that tags no longer contain the
ZF1 Extras or documentation. Several users contacted us indicating
this broke apps in which they were using
<xhtml:kbd>svn:externals</xhtml:kbd>.</xhtml:p>
<xhtml:p>We have decided we will <xhtml:em>not</xhtml:em> be returning to the
previous tagging methodology, as we much prefer keeping a
separation between tags and the build artifacts. For those users
who want to retain the same semantic structure of having the ZF1
Extras imported via <xhtml:kbd>svn:externals</xhtml:kbd> within the ZF1
library, you can still do that, by adding an additional line to
your <xhtml:kbd>svn:externals</xhtml:kbd> property:</xhtml:p>
<xhtml:pre>
<xhtml:code>
vendor/ZendFramework https://github.com/zendframework/zf1/tags/{VERSION}
vendor/ZendFramework/extras https://github.com/zendframework/zf1-extras/tags/{VERSION}
</xhtml:code>
</xhtml:pre>
<xhtml:p>(Modify the above to reflect your own project structure, and to
inject the appropriate version string.)</xhtml:p>
<xhtml:h2>Thank You!</xhtml:h2>
<xhtml:p>As always, I'd like to thank the many contributors who made this
release possible! In particular, Rob Allen identified the various
locales that needed updating, and submitted the locale aliasing
solution.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Apigility 1.0.0beta1 Released!]]></title>
    <published>2014-03-23T15:00:00+0000</published>
    <updated>2014-03-23T15:00:00+0000</updated>
    <link rel="alternate" type="text/html" href="http://framework.zend.com/blog/apigility-1-0-0beta1-released.html"/>
    <id>http://framework.zend.com/blog/apigility-1-0-0beta1-released.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>matthew@zend.com</email>
      <uri>http://mwop.net/</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>We are pleased to announce the immediate availability of
Apigility 1.0.0beta1!</xhtml:p>
<xhtml:ul>
<xhtml:li><xhtml:a href="http://apigility.org/download">http://apigility.org/download</xhtml:a></xhtml:li>
</xhtml:ul>
<xhtml:p>This is our first beta release of Apigility, marking its initial
API stability, and providing a solid preview of what to expect for
the first stable release.</xhtml:p>
<xhtml:h2>What is Apigility?</xhtml:h2>
<xhtml:p>Apigility is the world's easiest way to create and provide
secure, well-formed APIs.</xhtml:p>
<xhtml:p>Apigility provides tools for describing and documenting your
APIs, both RESTful and RPC. You can indicate the URL that provides
a service, what HTTP methods are allowed, what representations
(e.g., JSON, HTML, XML) can be provided, how many items to present
per page of a collection, and more.</xhtml:p>
<xhtml:p>We make choices so <xhtml:em>you</xhtml:em> don't have to. We have
standardized on JSON for RPC services, and <xhtml:a href="http://tools.ietf.org/html/draft-kelly-json-hal-06">Hypermedia
Application Language (HAL)</xhtml:a>, using the JSON variant, for REST
services. We provide robust error handling, using <xhtml:a href="http://tools.ietf.org/html/draft-nottingham-http-problem-06">Problem
Details for HTTP APIs (API Problem)</xhtml:a>. HTTP method negotiation
and content negotiation are built in, ensuring that problems are
reported early and provide detail on how to submit correct
requests.</xhtml:p>
<xhtml:p>You can document what fields can be submitted, and configure how
those fields will be validated. You can indicate what services
require an authenticated user - or even restrict usage based on the
HTTP method! You can configure how users can authenticate, and we
provide HTTP Basic, HTTP Digest, and OAuth2 authentication
out-of-the-box.</xhtml:p>
<xhtml:p>An API is only as useful as its documentation. Apigility lets
you document every service, every HTTP method, and even
differentiate between collections and entities. We provide both
HTML and JSON documentation by default, and have a separate
<xhtml:a href="http://swagger.wordnik.com/">Swagger UI</xhtml:a> implementation
you can opt-in to if desired. Alternately, you can write your own
module for exporting the documentation in your own custom format -
we hope to provide both API Blueprint and RAML in the future!</xhtml:p>
<xhtml:p>You can use the full Apigility skeleton to create APIs, and the
Admin UI for manipulating them. Alternately, you can opt-in to just
the modules you are interested in, and configure them by hand for
optimal control over how they all work and interact.</xhtml:p>
<xhtml:p>In short, Apigility is the most powerful tool you can use for
creating robust APIs.</xhtml:p>
<xhtml:h2>New Website!</xhtml:h2>
<xhtml:p>First in our line of announcements, <xhtml:a href="http://www.zimuel.it/">Enrico Zimuel</xhtml:a> has completely rewritten
the <xhtml:a href="http://apigility.org/">Apigility website</xhtml:a> to
provide more content and a more modern look!</xhtml:p>
<xhtml:h2>What has changed for beta1?</xhtml:h2>
<xhtml:p>In the three weeks since we released 0.9.1, we've been quite
busy. Among other things, we worked hard to stabilize and release
Zend Framework 2.3.0, which allows us to now pin Apigility to a
stable version of the framework. This has reduced the package size
from over 100MB to around 20MB - a reduction of 80%!</xhtml:p>
<xhtml:p>Additionally, we've worked hard to fix a number of lingering
issues in an effort to stabilize the Apigility engine and
streamline the Admin UI experience. The following is a list of
changes.</xhtml:p>
<xhtml:h3>New Features</xhtml:h3>
<xhtml:p>All Apigility modules were updated to use a <xhtml:a href="https://github.com/php-fig/fig-standards/blob/master/proposed/psr-4-autoloader/psr-4-autoloader.md">
PSR-4</xhtml:a> structure and autoloader. This flattens the packages
significantly, and also allows simplification of the PHPUnit test
runner. A PSR-4 variant of the ZF2 <xhtml:code>StandardAutoloader</xhtml:code>,
<xhtml:code>ZF\Apigility\Autoloader</xhtml:code>, was created to provide true
PSR-4 autoloading, including the ability to have underscores
(<xhtml:code>_</xhtml:code>) in class names, which has been a common feature
request. ZF2 <xhtml:code>Module</xhtml:code> classes created for new API
modules now use the new autoloader for loading classes inside the
module.</xhtml:p>
<xhtml:p>All modules were added to <xhtml:a href="https://travis-ci.org/">Travis-CI</xhtml:a>, giving us continuous
integration going forward.</xhtml:p>
<xhtml:p>Additionally, the following features were added:</xhtml:p>
<xhtml:ul>
<xhtml:li><xhtml:a href="https://github.com/zfcampus/zf-content-validation/issues/8">zfcampus/zf-content-validation#8</xhtml:a>
adds the ability to provide HTTP method-specific input filters.
This feature is not yet integrated into the Apigility Admin UI, but
can be configured manually. To do so, add method/input filter
service name pairs for the given controller service name; if no
method-specific input filter exists, zf-content-validation will
fallback to the <xhtml:code>input_filter</xhtml:code> key, if defined. As an
example:
<xhtml:pre>
<xhtml:code>
    'zf-content-validation' =&gt; array(
        'Example\V1\Rest\Status\Controller' =&gt; array(
            // This is the fallback input filter, and the one the UI
            // can define and manipulate:
            'input_filter' =&gt; 'Example\V1\Rest\Status\Validator',
            // This one will be used on POST requests only:
            'POST' =&gt; 'Example\V1\Rest\Status\NewStatusValidator',
        ),
    ),
</xhtml:code>
</xhtml:pre></xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/zfcampus/zf-mvc-auth/issues/20">zfcampus/zf-mvc-auth#20</xhtml:a>
provides a patch that injects the <xhtml:code>MvcEvent</xhtml:code> with a new
key, <xhtml:code>ZF\MvcAuth\Identity</xhtml:code>. You can pull the discovered
identity from this event parameter now. Additionally, in REST
resources, calling <xhtml:code>$this-&gt;getIdentity()</xhtml:code> will
retrieve the identity.</xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/zfcampus/zf-apigility-admin/issues/124">zfcampus/zf-apigility-admin#124</xhtml:a>
and <xhtml:a href="https://github.com/zfcampus/zf-apigility-admin/issues/129">zfcampus/zf-apigility-admin#129</xhtml:a>
provide initial input filters for all Apigility Admin API services,
as well as UI integration for reporting errors. All validation
errors are caught and reported in a single dialog within the form
that raises them.</xhtml:li>
<xhtml:li>The "edit settings" screen for REST services now allows editing
the entity class and collection class names.</xhtml:li>
<xhtml:li>The "API Overview" page now links services to their overviews.
The service description is displayed beneath each service; if not
yet defined, a link to the "edit documentation" tab for the service
is provided.</xhtml:li>
<xhtml:li>A new modal will be displayed to users of the Apigility Admin
UI if the API detects that the filesystem is not writable. The
modal details what changes need to be made in order for the UI and
API to work correctly.</xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/zfcampus/zf-oauth2/issue/30">zfcampus/zf-oauth2#30</xhtml:a>
splits out initialization of the <xhtml:code>oauth2-server-php</xhtml:code>
server from the <xhtml:code>zf-oauth2</xhtml:code> controller, allowing the
ability to replace it, write a delegator for it, etc.</xhtml:li>
</xhtml:ul>
<xhtml:h3>Breaking Changes</xhtml:h3>
<xhtml:ul>
<xhtml:li><xhtml:a href="https://github.com/zfcampus/zf-content-validation/issues/10">zfcampus/zf-content-validation#10</xhtml:a>
changes the key used by the
<xhtml:code>InputFilterAbstractServiceFactory</xhtml:code> from
<xhtml:code>input_filters</xhtml:code> to <xhtml:code>input_filter_specs</xhtml:code>. This
is due to the fact that ZF 2.3.0 introduces an
<xhtml:code>InputFilterManager</xhtml:code>, which is already consuming the key
<xhtml:code>input_filters</xhtml:code>. Wrapped in this change is the fact that
the <xhtml:code>InputFilterAbstractServiceFactory</xhtml:code> is now
registered as an abstract service factory with the
<xhtml:code>InputFilterManager</xhtml:code>, instead of with the application
service manager instance.<xhtml:br/>
<xhtml:br/>
For those updating their Apigility libraries to 1.0.0beta1, edit
your <xhtml:code>module.config.php</xhtml:code> files to rename the
<xhtml:code>input_filters</xhtml:code> key to
<xhtml:code>input_filter_specs</xhtml:code>.</xhtml:li>
<xhtml:li>The <xhtml:code>zf-configuration</xhtml:code> controller
<xhtml:code>ZF\Configuration\Controller</xhtml:code> was moved into
<xhtml:code>zf-apigility-admin</xhtml:code>. This URI for the service remains
the same, but the controller itself has moved. (This change was
done to consolidate all Admin API controllers in the same module,
as well as to reduce the dependencies needed in the
<xhtml:code>zf-configuration</xhtml:code> component.)</xhtml:li>
</xhtml:ul>
<xhtml:h3>Fixes</xhtml:h3>
<xhtml:ul>
<xhtml:li><xhtml:a href="https://github.com/zfcampus/zf-apigility-admin/issues/115">zfcampus/zf-apigility-admin#115</xhtml:a>
- Ensures that non-SQLite PDO OAuth2 adapters may be provided
without error.</xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/zfcampus/zf-apigility-admin/issues/117">zfcampus/zf-apigility-admin#117</xhtml:a>
- Ensure that the <xhtml:code>route_match</xhtml:code> is passed to the API
when saving an RPC service.</xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/zfcampus/zf-apigility-admin/issues/118">zfcampus/zf-apigility-admin#118</xhtml:a>
- Ensure that the Content Negotiation <xhtml:code>selector</xhtml:code> is
passed to the API correctly when saving an RPC service.</xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/zfcampus/zf-apigility-admin/issues/120">zfcampus/zf-apigility-admin#120</xhtml:a>
- Remove duplicate call to initialize the <xhtml:code>ServerUrl</xhtml:code>
helper.</xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/zfcampus/zf-apigility-admin/issues/122">zfcampus/zf-apigility-admin#122</xhtml:a>
and <xhtml:a href="https://github.com/zfcampus/zf-apigility-admin/issues/123">zfcampus/zf-apigility-admin#123</xhtml:a>
- Add checks for array keys before accessing them when building the
documentation graph for a given service operation.</xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/zfcampus/zf-apigility-admin/issues/126">zfcampus/zf-apigility-admin#126</xhtml:a>
- Updates the admin to pass the <xhtml:code>X-UA-Compatible</xhtml:code> meta
tag in order to provide Internet Explorer compatibility.</xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/zfcampus/zf-apigility-admin/issues/132">zfcampus/zf-apigility-admin#132</xhtml:a>
- Ensures that authorization data is fetched each time a new
service is created, a service is updated, or a service is deleted,
ensuring the table reflects the current list of available services
and HTTP methods.</xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/zfcampus/zf-apigility-admin/issues/133">zfcampus/zf-apigility-admin#133</xhtml:a>
- Updates the "angular-flash" functionality to anchor flash
messages to the bottom of the window. Additionally, any error flash
messages now have a "close" button, requiring user intervention for
dismissal.</xhtml:li>
<xhtml:li>Many fixes were made to the UI to improve performance, remove
UI refresh errors, provide more consistent color schemes, ensure
tabs stay focussed between state transitions, etc.</xhtml:li>
<xhtml:li>The Apigility Admin API was updated to break the authentication
service into more granular sub-services, one for each type of
authentication supported. This simplifies validation, and allows
for future expansion.</xhtml:li>
<xhtml:li>Work was done to ensure opcode cache detection is as solid as
possible. We now properly distinguish between APC and APCu,
allowing the latter to be enabled when using the Admin API.</xhtml:li>
<xhtml:li><xhtml:code>zf-apigility-documentation</xhtml:code> was not correctly
aggregating RPC documentation; this has been fixed.</xhtml:li>
<xhtml:li>We reviewed the various events triggered to ensure that they
were happening in the correct order, which we defined as:
<xhtml:ul>
<xhtml:li>Authentication</xhtml:li>
<xhtml:li>HTTP method negotiation (is the method called allowed for the
service?)</xhtml:li>
<xhtml:li>Authorization (is the discovered identity allowed to perform
the requested action?)</xhtml:li>
<xhtml:li>Content Negotiation (determine incoming Content-Type and
marshal data from request body; determine if Accept and/or
Content-Type are valid for the request)</xhtml:li>
<xhtml:li>Content Validation</xhtml:li>
</xhtml:ul>
Several event listener priorities were updated to fit the above
requirements. A new listener,
<xhtml:code>ZF\Rest\Listener\OptionsListener</xhtml:code>, was introduced to
handle HTTP method negotiation for REST services, and is registered
at the same priority as the RPC <xhtml:code>OptionsListener</xhtml:code> (which
previously existed).</xhtml:li>
<xhtml:li><xhtml:code>zf-configuration</xhtml:code> was updated to never write
configuration using short-array notation; this was done to ensure
compatibility of generated configuration with PHP 5.3 (as
developers may use the admin API via 5.4, but deploy to 5.3).</xhtml:li>
<xhtml:li style="list-style: none; display: inline">
<xhtml:h2>Roadmap</xhtml:h2>
<xhtml:p>We're excited to get a stable release of Apigility as soon as we
possibly can. To that end, we plan to do a beta release weekly
until it's ready. <xhtml:strong>During that time, we will be working
primarily on documentation and critical bugfixes</xhtml:strong>. We hope
to have a stable release within a month.</xhtml:p>
<xhtml:p>Reaching stability is only the first step, however! We already
have contributors making significant headway on features such as
"Doctrine-Connected" and "Mongo-Connected" REST services, and we
will be debuting these in a 1.1 version not long after we reach
version 1.0. Stay tuned!</xhtml:p>
</xhtml:li>
</xhtml:ul>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Zend Framework 2.3.0 Released!]]></title>
    <published>2014-03-12T18:00:00+0000</published>
    <updated>2014-03-12T18:00:00+0000</updated>
    <link rel="alternate" type="text/html" href="http://framework.zend.com/blog/zend-framework-2-3-0-released.html"/>
    <id>http://framework.zend.com/blog/zend-framework-2-3-0-released.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>matthew@zend.com</email>
      <uri>http://mwop.net/</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>The Zend Framework community is pleased to announce the
immediate availability of Zend Framework 2.3.0!</xhtml:p>
<xhtml:ul>
<xhtml:li><xhtml:a href="/downloads/latest">http://framework.zend.com/downloads/latest</xhtml:a></xhtml:li>
</xhtml:ul>
<xhtml:p>This is our first minor release in 10 months, providing the
first new features since May of 2013.</xhtml:p>
<xhtml:p>Among those features, we've updated our minimum supported PHP
version to 5.3.23, fixed a large number of issues with how form
collections work, improved performance of the service manager, and
much, much more.</xhtml:p>
<xhtml:h2>New minimum supported PHP version</xhtml:h2>
<xhtml:p>This release ups the minimum required PHP version from 5.3.3 to
<xhtml:strong>5.3.23</xhtml:strong>. Making this change affords the
following:</xhtml:p>
<xhtml:ul>
<xhtml:li>
<xhtml:p>5.3.9 and up have a fix that allows a class to implement
multiple interfaces that define the same method, so long as the
signatures are compatible. Prior to that version, doing so raised a
fatal error. This change is necessary in order to solve a problem
with separated interface usage in the framework.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p>5.3.23 contains a fix for <xhtml:a href="https://bugs.php.net/bug.php?id=52861">PHP bug #62672</xhtml:a>.
Adopting this version or greater will allow us to (eventually)
remove polyfill support that works around the symptoms of that
issue.</xhtml:p>
</xhtml:li>
</xhtml:ul>
<xhtml:h2>New Additions / Improvements</xhtml:h2>
<xhtml:p>More than 230 pull requests and issues were closed for this
release -- far too many to list individually. That said, there are
quite a few incremental improvements that will be of interest to
Zend Framework 2 users. Below is a list broken down by
component.</xhtml:p>
<xhtml:h3>Zend\Authentication</xhtml:h3>
<xhtml:ul>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/4815">#4815</xhtml:a>
promotes <xhtml:code>Zend\AuthenticationService\Adapter\Http</xhtml:code>'s
<xhtml:code>_challengeClient()</xhtml:code> method to public visibility, and
renames it to <xhtml:code>challengeClient()</xhtml:code>; the old method
remains as a proxy to the new one. This allows implementors to
issue the HTTP credential challenge manually.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5901">#5901</xhtml:a> adds
an <xhtml:code>AuthenticationServiceInterface</xhtml:code>, to allow alternate
implementations.</xhtml:p>
</xhtml:li>
</xhtml:ul>
<xhtml:h3>Zend\Cache</xhtml:h3>
<xhtml:ul>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/4512">#4512</xhtml:a>
introduces a <xhtml:code>BlackHole</xhtml:code> cache storage adapter; this
adapter is useful during development, when you do not want cache
operations to have effect, but need to test that a system using
caching works.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:code>Zend\Cache\Storage\Adapter\Apc</xhtml:code> now supports "check
and set" operations, per <xhtml:a href="https://github.com/zendframework/zf2/issues/4844">#4844</xhtml:a>.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5829">#5829</xhtml:a> adds a
new cache adapter, <xhtml:code>Memcache</xhtml:code> (not to be confused with
<xhtml:code>Memcached</xhtml:code>), for use with
<xhtml:code>ext/memcache</xhtml:code>.</xhtml:p>
</xhtml:li>
</xhtml:ul>
<xhtml:h3>Zend\Code</xhtml:h3>
<xhtml:ul>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/4989">#4989</xhtml:a> adds
the ability to identify PHP traits in the
<xhtml:code>TokenArrayScanner</xhtml:code>.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/6262">#6262</xhtml:a> adds a
<xhtml:code>getPrototype()</xhtml:code> method to
<xhtml:code>MethodReflection</xhtml:code>; this returns a structured array
detailing the namespace, class, visibility, and arguments
(including names, default values, and types) for the method.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5400">#5400</xhtml:a> adds
the capability for the <xhtml:code>PropertyScanner</xhtml:code> to determine
the PHP type of a given object property, via the new method
<xhtml:code>getValueType()</xhtml:code>.</xhtml:p>
</xhtml:li>
</xhtml:ul>
<xhtml:h3>Zend\Config</xhtml:h3>
<xhtml:ul>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/4824">#4824</xhtml:a> adds a
<xhtml:code>JavaProperties</xhtml:code> configuration reader.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/4860">#4860</xhtml:a>
provides an abstract factory for retrieving named top-level
configuration keys from the <xhtml:code>Config</xhtml:code> service. As an
example, if you have a key <xhtml:code>zf-apigility</xhtml:code>, you can now
retrieve it from the service manager using
<xhtml:code>config-zf-apigility</xhtml:code> or
<xhtml:code>zf-apigility-config</xhtml:code>. Namespaces are also often-used
for top-level keys, and notations such as
<xhtml:code>ZF\Apigility\Config</xhtml:code> may be used, too.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p>A number of improvements were made to the <xhtml:code>PhpArray</xhtml:code>
config writer to make the output it generates more readable, as
well as more consistent with the values being passed as input.
These include consistent 4-space indentation; putting the opening
<xhtml:code>array</xhtml:code> declarations on the same line as
<xhtml:code>=&gt;</xhtml:code> operators; ensuring boolean values are written
as booleans; ensuring strings are written with proper, and
readable, escapeing; allowing writing arrays using PHP 5.4
short-array syntax; and making attempts to replace paths using
<xhtml:code>__DIR__</xhtml:code> notation when possible.</xhtml:p>
</xhtml:li>
</xhtml:ul>
<xhtml:h3>Zend\Console</xhtml:h3>
<xhtml:ul>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/4449">#4449</xhtml:a> moves
the console routing logic out of <xhtml:code>Zend\Mvc</xhtml:code> and into
<xhtml:code>Zend\Console\ConsoleRouteMatcher</xhtml:code>. This allows re-use
of the <xhtml:code>Zend\Console</xhtml:code> component in a standalone fashion.
<xhtml:code>Zend\Mvc\Router\Console\Simple</xhtml:code> was refactored to
consume a <xhtml:code>ConsoleRouteMatcher</xhtml:code> instance internally.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/4606">#4606</xhtml:a> adds
support for <xhtml:code>Zend\Console</xhtml:code> to detect the console
encoding, and use that when emitting text.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5711">#5711</xhtml:a>
implements the <xhtml:code>writeTextBlock()</xhtml:code> method in the
<xhtml:code>AbstractAdapter</xhtml:code>, allowing the ability to specify a
block size and text to wrap within that block when generating
console output.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5720">#5720</xhtml:a> fixes
console routing to ensure CamelCase values in routes will be
treated as literals, and ALLCAPS can be used to define value
parameters.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5713">#5713</xhtml:a> adds
the ability to specify option callback hooks in
<xhtml:code>Zend\Console\Getopt</xhtml:code>. As examples:</xhtml:p>
</xhtml:li>
</xhtml:ul>
<xhtml:pre>
<xhtml:code>
$opts-&gt;setOptionCallback('apple' function ($value, $opts) {
      echo "You want a $value apple!\n";
});
</xhtml:code>
</xhtml:pre>
<xhtml:p>Essentially, once <xhtml:code>parse()</xhtml:code> is called, if the
specified option was provided, the callback will be triggered.
Returning a boolean <xhtml:code>false</xhtml:code> will cause cause
<xhtml:code>parse()</xhtml:code> to invalidate usage, raising an exception.</xhtml:p>
<xhtml:h3>Zend\Crypt</xhtml:h3>
<xhtml:ul>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zf2/issues/5024">#5024</xhtml:a>
removes the <xhtml:code>KEY_DERIV_HMAC</xhtml:code> constant, and allows the
ability to specify alternate PBKDF2 hashing algorithms within the
<xhtml:code>Zend\Crypt\BlockCipher</xhtml:code> class.</xhtml:li>
</xhtml:ul>
<xhtml:h3>Zend\Db</xhtml:h3>
<xhtml:ul>
<xhtml:li><xhtml:code>Zend\Db\Sql</xhtml:code> with MySQL can utilize a
<xhtml:code>Select</xhtml:code> object containing an <xhtml:code>OFFSET</xhtml:code>
without <xhtml:code>LIMIT</xhtml:code></xhtml:li>
<xhtml:li><xhtml:code>Zend\Db\Sql</xhtml:code>'s <xhtml:code>In</xhtml:code> predicate now
supports subselects</xhtml:li>
<xhtml:li><xhtml:code>Zend\Db\Sql</xhtml:code> now has a <xhtml:code>NotIn</xhtml:code>
predicate.</xhtml:li>
<xhtml:li>A method <xhtml:code>inTransaction()</xhtml:code> has been added to all
<xhtml:code>Zend\Db\Adapter</xhtml:code> drivers</xhtml:li>
<xhtml:li><xhtml:code>Zend\Db\Sql\Select</xhtml:code>'s <xhtml:code>from()</xhtml:code> can be a
subselect</xhtml:li>
<xhtml:li><xhtml:code>Zend\Db\Sql\Insert</xhtml:code> can use a Select object as the
value source <xhtml:code>(INSERT INTO ... SELECT)</xhtml:code></xhtml:li>
<xhtml:li><xhtml:code>Zend\Db\Adapter</xhtml:code> PDO now accepts a charset when
creating the DSN</xhtml:li>
</xhtml:ul>
<xhtml:h3>Zend\Dom</xhtml:h3>
<xhtml:ul>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zf2/issues/5356">#5356</xhtml:a>
provides a backwards-compatible rewrite of the
<xhtml:code>Zend\Dom\Query</xhtml:code> component and logic. It presents a new
class, <xhtml:code>Zend\Dom\Document</xhtml:code>, along with a subcomponent of
the same name containing new <xhtml:code>Query</xhtml:code> and
<xhtml:code>Nodelist</xhtml:code> classes. Usage becomes:</xhtml:li>
</xhtml:ul>
<xhtml:pre>
<xhtml:code>
use ZendDomDocument;
$document = new Document($htmlXmlOrFile, $docType, $encoding);
foreach (DocumentQuery($expression, $document, $xpathOrCssQueryType) as $match) {
    // do something with matching DOMNode
}
// More concretely:
$document = new Document($someHtml, 'DOC_HTML', 'utf-8');
foreach (DocumentQuery('img.current', $document, 'TYPE_CSS') as $match) {
    $source = $document-&gt;attributes-&gt;getNamedItem('src');
}
</xhtml:code>
</xhtml:pre>
<xhtml:p><xhtml:code>Zend\Dom\Query</xhtml:code> and <xhtml:code>Zend\Dom\Css2Xpath</xhtml:code>
have been deprecated in favor of the new API.
<xhtml:code>Zend\Test\PHPUnit</xhtml:code> still needs to be updated to use the
new API, however.</xhtml:p>
<xhtml:h3>Zend\EventManager</xhtml:h3>
<xhtml:ul>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zf2/issues/5283">#5283</xhtml:a>
deprecates the <xhtml:code>ProvidesEvents</xhtml:code> trait in favor of the
<xhtml:code>EventManagerAwareTrait</xhtml:code>; the latter is named after the
interface it implements, and includes the now standard
<xhtml:code>Trait</xhtml:code> suffix.</xhtml:li>
</xhtml:ul>
<xhtml:h3>Zend\Filter</xhtml:h3>
<xhtml:ul>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zf2/issues/5436">#5436</xhtml:a>
refactors <xhtml:code>Zend\Filter</xhtml:code> to ensure consistency throughout
the component. Filters now never trigger errors or throw
exceptions; if a filter cannot handle an incoming input, it will
return it unmodified.</xhtml:li>
</xhtml:ul>
<xhtml:h3>Zend\Form</xhtml:h3>
<xhtml:ul>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/4400">#4400</xhtml:a> allows
you to pass the string name of the element you want to create as
the second argument when using
<xhtml:code>Zend\Form\FormElementManager::get()</xhtml:code> - instead of
requiring that you pass it in as <xhtml:code>array('name' =&gt; 'name
value')</xhtml:code>.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p>The <xhtml:code>Zend\Form</xhtml:code> component has had a number of
improvements surrounding HTML escaping and form labels. Among these
is the addition of <xhtml:code>LabelAwareInterface</xhtml:code>, which defines
methods for an element or fieldset to provide a label, label
attributes, and label options (one of which is the option
<xhtml:code>disable_html_escape</xhtml:code>, allowing developers to provide
markup within the label text). Many efforts have been made to keep
this functionality backwards compatible, while simultaneously
ensuring that proper defaults are provided.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p>Numerous improvements were made to how form Collections are
managed, including improvements to counts, managing input filters,
handling nested sets, binding objects, and more.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5918">#5918</xhtml:a>
ensures that multiple CSRF elements on the same page with the same
name should not conflict, and still validate.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/4846">#4846</xhtml:a> adds
the ability to disable the <xhtml:code>InArray</xhtml:code> validator when
defining a <xhtml:code>MultiCheckbox</xhtml:code> form element.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/4884">#4884</xhtml:a>
provides the ability to replace elements within a form
collection.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/4927">#4927</xhtml:a> adds
the ability to provide a <xhtml:code>Traversable</xhtml:code> value to a nested
fieldset in a form.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/4971">#4971</xhtml:a>
updates the form factory to allow specifying <xhtml:code>null</xhtml:code>
configuration values. This allows one module to override and cancel
the setting of another when desired.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5420">#5420</xhtml:a> adds
the ability to compose <xhtml:code>Zend\Form</xhtml:code> collections via
annotations.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5456">#5456</xhtml:a> adds
the ability for annotations to provide input filter specifications
when provided on an object representing a fieldset.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5562">#5562</xhtml:a> adds
the <xhtml:code>unsetValueOption()</xhtml:code> method to <xhtml:code>Select</xhtml:code>
and <xhtml:code>MultiCheckbox</xhtml:code> element types.</xhtml:p>
</xhtml:li>
</xhtml:ul>
<xhtml:h3>Zend\Http</xhtml:h3>
<xhtml:ul>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/4950">#4950</xhtml:a> adds
<xhtml:code>match()</xhtml:code> capabilities to the <xhtml:code>ContentType</xhtml:code>
header class, similar to the implementation for <xhtml:code>Accept</xhtml:code>
header instances. This allows matching incoming data against a
mimetype in order to perform content negotiation.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5029">#5029</xhtml:a> adds a
new header class for <xhtml:code>Origin</xhtml:code> headers.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5316">#5316</xhtml:a> adds a
new header class for <xhtml:code>Content-Security-Policy</xhtml:code>
headers.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5732">#5732</xhtml:a> adds
the ability to set custom HTTP response status codes via a new
<xhtml:code>Response</xhtml:code> method,
<xhtml:code>setCustomStatusCode()</xhtml:code>.</xhtml:p>
</xhtml:li>
</xhtml:ul>
<xhtml:h3>Zend\I18n</xhtml:h3>
<xhtml:ul>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/4510">#4510</xhtml:a>
introduces <xhtml:code>Zend\I18n\Filter\NumberParse</xhtml:code>, which will
filter a string parseable by PHP's built-in
<xhtml:code>NumberFormatter</xhtml:code> to a number.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5034">#5034</xhtml:a> makes
the <xhtml:code>PhoneNumber</xhtml:code> validator
<xhtml:code>Locale</xhtml:code>-aware.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5108">#5108</xhtml:a>
introduces a <xhtml:code>TranslatorInterface</xhtml:code>, defining the methods
<xhtml:code>translate()</xhtml:code> and <xhtml:code>translatePlural()</xhtml:code>. This
will allow for alternate implementations, but also for other
components to create equivalent, component-specific interfaces, and
thus reduce dependencies.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5825">#5825</xhtml:a> adds a
new translation loader, <xhtml:code>PhpMemoryArray</xhtml:code>. It behaves
like the <xhtml:code>PhpArray</xhtml:code> loader, but instead of accepting a
file that returns an array, it accepts an array of translations
directly. This allows specifying translations as part of
configuration, or via a caching system.</xhtml:p>
</xhtml:li>
</xhtml:ul>
<xhtml:h3>Zend\InputFilter</xhtml:h3>
<xhtml:ul>
<xhtml:li>A number of updates were made regarding how collection input
filters work to ensure they are more consistent, and operate
according to user expectations with regard to empty sets, nested
sets, etc.</xhtml:li>
</xhtml:ul>
<xhtml:h3>Zend\Json</xhtml:h3>
<xhtml:ul>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zf2/issues/5933">#5933</xhtml:a>
provides the ability to use arbitrary response codes with
<xhtml:code>Zend\Json\Server</xhtml:code>.</xhtml:li>
</xhtml:ul>
<xhtml:h3>Zend\Loader</xhtml:h3>
<xhtml:ul>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zf2/issues/5783">#5783</xhtml:a> fixes
the <xhtml:code>StandardAutoloader</xhtml:code> such that if a namespace
matches, but no matching class is found, it will continue to loop
through any other namespaces present. This fixes a situation
whereby a map for a subnamespace may be registered later than the
parent; prior to the change, the subnamespace would never be
matched.</xhtml:li>
</xhtml:ul>
<xhtml:h3>Zend\Log</xhtml:h3>
<xhtml:ul>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/4455">#4455</xhtml:a> adds
new service providers for <xhtml:code>Zend\Log</xhtml:code>:
<xhtml:code>log_writers</xhtml:code> and <xhtml:code>log_processors</xhtml:code>. These
allow you to provide custom log writer and processor services for
use with the
<xhtml:code>Zend\Log\LoggerAbstractServiceFactory</xhtml:code>.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/4742">#4742</xhtml:a>
provides a new interface,
<xhtml:code>Zend\Log\LoggerAwareInterface</xhtml:code>, for hinting that an
object composes, or can compose, a <xhtml:code>Zend\Log\Logger</xhtml:code>
instance. A corresponding PHP Trait is also provided.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5875">#5875</xhtml:a> adds a
<xhtml:code>registerFatalErrorShutdownFunction()</xhtml:code> method to
<xhtml:code>Zend\Log\Logger</xhtml:code>, to handle logging fatal runtime
errors.</xhtml:p>
</xhtml:li>
</xhtml:ul>
<xhtml:h3>Zend\Mail</xhtml:h3>
<xhtml:ul>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5261">#5261</xhtml:a> adds a
new <xhtml:code>NullTransport</xhtml:code> to <xhtml:code>Zend\Mail</xhtml:code>, providing
a no-op mail transport. This can be useful in non-production
environments, or when needing to selectively disable mail sending
capabilities without altering code.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5470">#5470</xhtml:a> adds
<xhtml:code>Zend\Mail\Transport\Factory</xhtml:code>, for simplifying creation
of a mail transport via configuration.</xhtml:p>
</xhtml:li>
</xhtml:ul>
<xhtml:h3>Zend\Mvc</xhtml:h3>
<xhtml:ul>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/4849">#4849</xhtml:a>
updates <xhtml:code>Zend\Mvc\Application::run()</xhtml:code> such that it now
always returns the <xhtml:code>Application</xhtml:code> instance. If an event
returns a response object, it is always pushed into the
<xhtml:code>Application</xhtml:code> instance now so that it may be retrieved
after <xhtml:code>run()</xhtml:code> has finished executing.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/4962">#4962</xhtml:a>
modifies the various MVC factories to reference the service
<xhtml:code>ControllerManager</xhtml:code> instead of
<xhtml:code>ControllerLoader</xhtml:code> (which is a legacy name from early
beta releases); <xhtml:code>ControllerManager</xhtml:code> was made an alias of
<xhtml:code>ControllerLoader</xhtml:code>. This change future-proofs the MVC.
If you are using <xhtml:code>ControllerLoader</xhtml:code> in your own code, we
encourage you to change those references to
<xhtml:code>ControllerManager</xhtml:code> (though
<xhtml:code>ControllerLoader</xhtml:code> will continue to work for the
foreseeable future).</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5108">#5108</xhtml:a>
introduces a <xhtml:code>DummyTranslator</xhtml:code>, which will be used if
<xhtml:code>ext/intl</xhtml:code> is not present, or if the developer wishes to
disable translation (e.g., validators compose a translator by
default, but quite often the validation messages do not need to be
translated); translation can be disabled by setting the
<xhtml:code>translator</xhtml:code> configuration key to a boolean
<xhtml:code>false</xhtml:code>.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5469">#5469</xhtml:a> adds a
new <xhtml:code>AbstractConsoleController</xhtml:code>, and logic in the
<xhtml:code>ControllerManager</xhtml:code> for injecting the
<xhtml:code>ConsoleAdapter</xhtml:code> object into such controllers. This
abstract class tests if the incoming request is a console request,
and raises an exception if not; it also provides a
<xhtml:code>getConsole()</xhtml:code> method for access to the composed
<xhtml:code>ConsoleAdapter</xhtml:code>.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5612">#5612</xhtml:a>
updates <xhtml:code>Zend\Mvc\Application::init()</xhtml:code> to allow
listeners specified in the configuration passed to the method to
override those discovered during bootstrapping; in essence,
application-level configuration should have more specificity than
module-level configuration.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5670">#5670</xhtml:a>
provides the ability to create a <xhtml:code>controller_map</xhtml:code> within
<xhtml:code>view_manager</xhtml:code> configuration. This map allows you to do
the following:</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p>Indicate modules that include subnamespaces in their name to
include all namespace segments in the template name:
<xhtml:code>Xerkus\FooModule =&gt; xerkux/foo-module/</xhtml:code> via the
configuration <xhtml:code>Xerkus\FooModule =&gt; true</xhtml:code>.</xhtml:p>
</xhtml:li>
<xhtml:li>Map a specific template prefix to a given module: <xhtml:code>ZfcUser
=&gt; 'zf-commons/zfc-user</xhtml:code>.</xhtml:li>
</xhtml:ul>
<xhtml:p>This change is opt-in, and thus backwards compatible.</xhtml:p>
<xhtml:ul>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5759">#5759</xhtml:a> adds a
new method to the <xhtml:code>FlashMessenger</xhtml:code>,
<xhtml:code>renderCurrent()</xhtml:code>, allowing you to render flash messages
sent in the current request (using the same API as
<xhtml:code>renderMessages()</xhtml:code>).</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5897">#5897</xhtml:a> adds a
<xhtml:code>fromJsonRawBody()</xhtml:code> method to the <xhtml:code>Params</xhtml:code>
plugin, allowing the ability to decode and retrieve parameters
passed via the request body as JSON.</xhtml:p>
</xhtml:li>
</xhtml:ul>
<xhtml:h3>Zend\Navigation</xhtml:h3>
<xhtml:ul>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5080">#5080</xhtml:a> fixes
the <xhtml:code>Breadcrumb</xhtml:code> view helper such that it will now pass
the specified separator.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5803">#5803</xhtml:a> hides
sub menus when all pages in the sub menu are currently hidden.</xhtml:p>
</xhtml:li>
</xhtml:ul>
<xhtml:h3>Zend\Paginator</xhtml:h3>
<xhtml:ul>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/4427">#4427</xhtml:a> adds
the ability to provide <xhtml:code>$group</xhtml:code> and <xhtml:code>$having</xhtml:code>
clauses to a <xhtml:code>DbTableGateway</xhtml:code>
<xhtml:code>Zend\Paginator</xhtml:code> adapter.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5272">#5272</xhtml:a> adds a
new <xhtml:code>Callback</xhtml:code> pagination adapter; the new adapter
accepts two callbacks, one for returning the items, another for
returning the count. The items callback will receive the requested
offset and number of items per page as arguments: <xhtml:code>function
($offset, $itemsPerPage)</xhtml:code>.</xhtml:p>
</xhtml:li>
</xhtml:ul>
<xhtml:h3>Zend\Permissions\Acl</xhtml:h3>
<xhtml:ul>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zf2/issues/5628">#5628</xhtml:a> adds a
new <xhtml:code>AssertionAggregate</xhtml:code>, which enables two concepts:
the ability to chain multiple assertions, as well as the ability to
use named assertions as plugins. (The change also creates a
<xhtml:code>Zend\Permissions\Acl\Assertion\AssertionManager</xhtml:code>, which
is a plugin manager implementation).</xhtml:li>
</xhtml:ul>
<xhtml:h3>Zend\ServiceManager</xhtml:h3>
<xhtml:ul>
<xhtml:li>A number of performance improvements were made to how abstract
factories are processed and invoked.</xhtml:li>
</xhtml:ul>
<xhtml:h3>Zend\Session</xhtml:h3>
<xhtml:ul>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zf2/issues/4995">#4995</xhtml:a> adds
the ability to specify session validators in configuration consumed
by the <xhtml:code>SessionManagerFactory</xhtml:code>.</xhtml:li>
</xhtml:ul>
<xhtml:h3>Zend\Soap</xhtml:h3>
<xhtml:ul>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5792">#5792</xhtml:a> adds a
"debug mode" to <xhtml:code>Zend\Soap\Server</xhtml:code>. When enabled, any
exception thrown is treated as a <xhtml:code>Fault</xhtml:code> response (vs.
only those whitelisted).</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5810">#5810</xhtml:a> adds a
<xhtml:code>getException()</xhtml:code> method to
<xhtml:code>Zend\Soap\Server</xhtml:code>, allowing you to retrieve the
exception that caused a fault response (e.g., to log it).</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5811">#5811</xhtml:a>
creates a public <xhtml:code>getSoap()</xhtml:code> method in
<xhtml:code>Zend\Soap\Server</xhtml:code> to allow you to access the composed
<xhtml:code>SoapServer</xhtml:code> instance. This allows you to use
<xhtml:code>setReturnResponse()</xhtml:code> and still return fault responses
(which must be triggered by the <xhtml:code>SoapServer</xhtml:code> instance
directly.)</xhtml:p>
</xhtml:li>
</xhtml:ul>
<xhtml:h3>Zend\Stdlib</xhtml:h3>
<xhtml:ul>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/4534">#4534</xhtml:a>
introduces a <xhtml:code>JsonSerializable</xhtml:code> polyfill, to provide
support for that built-in PHP interface on PHP versions prior to
5.4.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/4751">#4751</xhtml:a>
provides a new interface,
<xhtml:code>Zend\Stdlib\Hydrator\HydratorAwareInterface</xhtml:code>, for
hinting that an object composes, or can compose, a
<xhtml:code>Zend\Stdlib\Hydrator\HydratorInterface</xhtml:code> instance. A
corresponding PHP Trait is also provided.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/4908">#4908</xhtml:a>
segregates <xhtml:code>Zend\Stdlib\Hydrator\HydratorInterface</xhtml:code> into
two separate interfaces,
<xhtml:code>Zend\Stdlib\Extractor\ExtractionInterface</xhtml:code> and
<xhtml:code>Zend\Stdlib\Hydrator\HydrationInterfac</xhtml:code>. The original
interface has been modified to extend both of the new interfaces.
This allows developers to implement one or the other behavior,
based on the needs of the application. (As an example, if an
application only needs to extract data for serialization, it could
typehint on <xhtml:code>Zend\Stdlib\Extractor\ExtractionInterface</xhtml:code>
only.)</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5364">#5364</xhtml:a> adds a
new subcomponent to hydrators, <xhtml:code>NamingStrategy</xhtml:code>. A
<xhtml:code>NamingStrategy</xhtml:code> can be used by hydrators to determine
the name to use for keys and properties when extracting and
hydrating.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5365">#5365</xhtml:a> adds
<xhtml:code>Zend\Stdlib\Guard</xhtml:code>, which provides traits for
performing common argument type validations. For example, an object
composing the <xhtml:code>ArrayOrTraversableGuardTrait</xhtml:code> could call
<xhtml:code>$this-&gt;guardForArrayOrTraversable($arg)</xhtml:code> in order to
validate <xhtml:code>$arg</xhtml:code> is an array or
<xhtml:code>Traversable</xhtml:code>.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5380">#5380</xhtml:a> adds
context support to hydrator strategies, allowing them to receive
the object being extracted or the array being hydrated when
performing their logic.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5702">#5702</xhtml:a> moves
<xhtml:code>Zend\Mvc\Router\PriorityList</xhtml:code> into
<xhtml:code>Zend\Stdlib</xhtml:code>, as it has general-purpose use cases. The
former class was modified to extend the latter.</xhtml:p>
</xhtml:li>
</xhtml:ul>
<xhtml:h3>Zend\Test</xhtml:h3>
<xhtml:ul>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/4946">#4946</xhtml:a> adds
two new methods to the <xhtml:code>AbstractControllerTestCase</xhtml:code>,
<xhtml:code>assertTemplateName()</xhtml:code> and
<xhtml:code>assertNotTemplateName()</xhtml:code>.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5649">#5649</xhtml:a> adds
the <xhtml:code>assertResponseReasonPhrase()</xhtml:code> assertion.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5730">#5730</xhtml:a> adds
the ability to allow session persistence when performing multiple
dispatches.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5731">#5731</xhtml:a> adds a
new argument to <xhtml:code>dispatch()</xhtml:code>,
<xhtml:code>$isXmlHttpRequest</xhtml:code>; when boolean <xhtml:code>true</xhtml:code>,
this adds an <xhtml:code>X-Requested-With: XMLHttpRequest</xhtml:code> header
to the request object.</xhtml:p>
</xhtml:li>
</xhtml:ul>
<xhtml:h3>Zend\Validator</xhtml:h3>
<xhtml:ul>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/4940">#4940</xhtml:a> adds a
new validator, <xhtml:code>Bitwise</xhtml:code>, for performing bitwise
validation operations.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5664">#5664</xhtml:a>
removes the translation of validator message <xhtml:em>keys</xhtml:em>. While
this is a backwards-incompatible change, this capability should
never have been present, and removing it fixes a number of posted
issues, as well as improves performance when retrieving validation
error messages. A related change, <xhtml:a href="https://github.com/zendframework/zf2/issues/5666">#5666</xhtml:a>,
removes translation of validation error messages from
<xhtml:code>Zend\Form\View\Helper\FormElementErrors</xhtml:code>, as
translation happens within the validators themselves; this prevents
double translation, and, again, improves performance.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5780">#5780</xhtml:a> adds
the ability to set the "break chain on failure" flag via a
configuration option; this allows setting the flag when using the
<xhtml:code>attachByName()</xhtml:code> method of the
<xhtml:code>ValidatorChain</xhtml:code>.</xhtml:p>
</xhtml:li>
</xhtml:ul>
<xhtml:h3>Zend\Version</xhtml:h3>
<xhtml:ul>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zf2/issues/4625">#4625</xhtml:a> adds
the ability to pass a <xhtml:code>Zend\Http\Client</xhtml:code> to
<xhtml:code>Zend\Version\Version::getLatest()</xhtml:code>, which should solve
situations where <xhtml:code>allow_url_fopen</xhtml:code> is disabled.</xhtml:li>
</xhtml:ul>
<xhtml:h3>Zend\View</xhtml:h3>
<xhtml:ul>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/4679">#4679</xhtml:a>
provides the ability to specify Internet Explorer conditional
stylesheets in the <xhtml:code>HeadLink</xhtml:code> and <xhtml:code>HeadStyle</xhtml:code>
view helpers, conditional metadata in the <xhtml:code>HeadMeta</xhtml:code>
view helper, and conditional scripts in the <xhtml:code>HeadScript</xhtml:code>
view helper.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5255">#5255</xhtml:a> adds
the ability to retrieve child view models based on what variable
they registered to capture to in the parent; this is implemented
via a new interface,
<xhtml:code>Zend\View\Model\RetrievableChildrenInterface</xhtml:code>, which
defines the method <xhtml:code>getChildrenByCaptureTo()</xhtml:code>.</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p><xhtml:a href="https://github.com/zendframework/zf2/issues/5266">#5266</xhtml:a>
attempts to make calls to <xhtml:code>PhpRenderer::render()</xhtml:code>
slightly more robust by checking the return value from
<xhtml:code>include</xhtml:code>ing a view script, and raising an exception
when the <xhtml:code>include</xhtml:code> fails.</xhtml:p>
</xhtml:li>
</xhtml:ul>
<xhtml:h2>Thank You!</xhtml:h2>
<xhtml:p>A big thank you to the dozens upon dozens of contributors who
helped make this new feature release a reality! This was truly a
community-driven effort, and would not have been possible without
the contributions of each and every one of you.</xhtml:p>
<xhtml:h2>Roadmap</xhtml:h2>
<xhtml:p>At this time, I am proposing a bi-monthly maintenance release
schedule; however, we will often release an initial ".1"
maintenance version sooner. After that, however, we will schedule
maintenance releases every 2 months.</xhtml:p>
<xhtml:p>For minor (feature) releases, I am proposing every six months,
giving us a September 2014 release date for 2.4.0.</xhtml:p>
<xhtml:p>If you have opinions on the release schedule, I invite you to
voice them on our <xhtml:a href="/archives">mailing lists</xhtml:a>.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
</feed>
