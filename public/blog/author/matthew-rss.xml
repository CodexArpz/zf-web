<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/">
  <channel>
    <title>Author: Matthew Weier O'Phinney - ZF Blog</title>
    <description>Author: Matthew Weier O'Phinney - ZF Blog</description>
    <pubDate>Wed, 13 Apr 2016 16:30:00 +0000</pubDate>
    <generator>Zend_Feed_Writer 2 (http://framework.zend.com)</generator>
    <link>http://framework.zend.com/blog/author/matthew.html</link>
    <atom:link rel="self" type="application/rss+xml" href="http://framework.zend.com/blog/author/matthew-rss.xml"/>
    <item>
      <title>Zend Framework 1.12.18 Released!</title>
      <pubDate>Wed, 13 Apr 2016 16:30:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/zend-framework-1-12-18-released.html</link>
      <guid>http://framework.zend.com/blog/zend-framework-1-12-18-released.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>The Zend Framework community is pleased to announce the immediate availability
of:</p>
<ul>
<li>Zend Framework <strong>1.12.18</strong>
</li>
</ul>
<p>You can download Zend Framework at:</p>
<ul>
<li>
<a href="http://framework.zend.com/downloads/latest#ZF1">http://framework.zend.com/downloads/latest#ZF1</a>
</li>
</ul><h2>Security Fixes</h2>
<p>Zend Framework 1.12.18 includes a fix for <a href="/security/advisory/ZF2016-01">security advisory ZF2016-01</a>,
a potential insufficient entropy vulnerability in a number of methods exposed
in Zend Framework 1, including:</p>
<ul>
<li>
<code>Zend_Ldap_Attribute::createPassword</code>
</li>
<li>
<code>Zend_Form_Element_Hash::_generateHash</code>
</li>
<li>
<code>Zend_Gdata_HttpClient::filterHttpRequest</code>
</li>
<li>
<code>Zend_Filter_Encrypt_Mcrypt::_srand</code>
</li>
<li>
<code>Zend_OpenId::randomBytes</code>
</li>
</ul>
<p>Moreover, the fix mitigates a flaw in <code>openssl_random_pseudo_bytes()</code>, ensuring
sufficient entropy will be used for any random number generated.</p>
<h2>Other changes</h2>
<p>In addition to the security patch, the release includes fourteen other patches,
primarily around documentation. You can view a full list at:</p>
<ul>
<li>
<a href="/changelog/1.12.18">Zend Framework 1.12.18 Changelog</a>
</li>
</ul>
<p>Many thanks to our contributors, and particularly the maintainers who
coordinated this version: Frank Brückner, Rob Allen, and Enrico Zimuel.</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Zend Framework 3 Update for 2016-03-24</title>
      <pubDate>Thu, 24 Mar 2016 20:45:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/2016-03-24-zf3-update.html</link>
      <guid>http://framework.zend.com/blog/2016-03-24-zf3-update.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>This is an installment in an ongoing series of posts on ZF3 development status.
It's been more than a month since the last update, and we've been quite
busy with:</p>
<ul>
<li>~160 pull requests merged, and ~125 issues closed.</li>
<li>~60 component releases.</li>
<li>Completion of the zend-servicemanager/zend-eventmanager migrations.</li>
<li>Completion of the component/module installer.</li>
<li>Progress on the zend-mvc version 3 changes, including separation of routing
and console tooling to separate packages.</li>
<li>Publication of documentation for 5 components to GitHub Pages.</li>
</ul><h2>Compatibility Migrations</h2>
<p>During the first week of March, we completed the forwards compatibility
migrations of components. As a reminder, we were working on updating components
that depend on any of:</p>
<ul>
<li>zend-eventmanager</li>
<li>zend-servicemanager</li>
<li>zend-stdlib</li>
</ul>
<p>to be forwards compatible with the version 3 releases of each. In particular,
the first two have version 2 releases that allow developers to make their
code forwards compatible with the version 3 releases, and we were doing
precisely that with the various Zend Framework components. As of 2 March 2016,
we completed this task — a major milestone in the ZF3 initiative!</p>
<p>The following component releases were made since the <a href="/blog/2016-02-12-zf3-biweekly-update.html">last blog update</a>
and mark the current stable versions that are forwards compatible with the v3
releases:</p>
<ul>
<li>
<a href="https://github.com/zendframework/zend-authentication/releases/tag/2.5.3">zend-authentication 2.5.3</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-barcode/releases/tag/2.6.0">zend-barcode 2.6.0</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-captcha/releases/tag/2.5.4">zend-captcha 2.5.4</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-db/releases/tag/2.7.0">zend-db 2.7.0</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-eventmanager/releases/tag/3.0.1">zend-eventmanager 3.0.1</a> (which updates the component to use zend-stdlib v3)</li>
<li>
<a href="https://github.com/zendframework/zend-file/releases/tag/2.6.1">zend-file 2.6.1</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-form/releases/tag/2.7.0">zend-form 2.7.0</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-hydrator/releases/tag/1.1.0">zend-hydrator 1.1.0</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-hydrator/releases/tag/2.1.0">zend-hydrator 2.1.0</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-inputfilter/releases/tag/2.6.0">zend-inputfilter 2.6.0</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-log/releases/tag/2.7.1">zend-log 2.7.1</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-mail/releases/tag/2.6.1">zend-mail 2.6.1</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-modulemanager/releases/tag/2.7.1">zend-modulemanager 2.7.1</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-mvc/releases/tag/2.7.3">zend-mvc 2.7.3</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-navigation/releases/tag/2.6.1">zend-navigation 2.6.1</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-paginator/releases/tag/2.6.0">zend-paginator 2.6.0</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-progressbar/releases/tag/2.5.2">zend-progressbar 2.5.2</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-session/releases/tag/2.6.2">zend-session 2.6.2</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-test/releases/tag/2.6.1">zend-test 2.6.1</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-uri/releases/tag/2.5.2">zend-uri 2.5.2</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-validator/releases/tag/2.6.0">zend-validator 2.6.0</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-view/releases/tag/2.6.5">zend-view 2.6.5</a>
</li>
</ul>
<p>In addition to the migration changes, we made a number of other updates to zend-mvc, including:</p>
<ul>
<li>addition of a new <code>MiddlewareListener</code>, allowing routing to PSR-7 middleware in the MVC layer.</li>
<li>modifications to the <code>EventManagerAwareInterface</code> initializers; since shared managers are
injected in <code>EventManager</code> instances via the constructor in zend-eventmanager v3, the initializers
needed changes in order to work with both v2 and v3.</li>
<li>
<code>AbstractController::getServiceLocator()</code> now raises an <code>E_USER_DEPRECATED</code>
notice. zend-servicemanager v3 removes the <code>ServiceLocatorAwareInterface</code>, and
zend-mvc will remove the implementations with version 3. Users should start
updating their controllers to accept dependencies via constructor injection.</li>
</ul>
<p>The above are messaged in more detail in the <a href="http://zendframework.github.io/zend-mvc/migration/">zend-mvc migration guide</a>.</p>
<h2>Component / Module Installer</h2>
<p>One goal for zend-mvc is to reduce the number of dependencies. Much of the
functionality within zend-mvc is not directly related to execution of the MVC,
but rather integrating components. Typically this is done by either providing and
wiring factories for components, or providing and/or wiring event listeners for
components.</p>
<p>We already have functionality that allows doing these tasks via the
zend-modulemanager component, which means we can expose components as application
modules. However, this creates an installation issue: just like modules, you would need to:</p>
<ol>
<li>Install the package containing the module.</li>
<li>Enable the module in your application.</li>
</ol>
<p>To automate the second task, we developed <a href="https://zendframework.github.io/zend-component-installer">zend-component-installer</a>
back in December.  As part of the current milestones, we completed that
component, by making the following changes:</p>
<ul>
<li>It now acts as a <a href="https://getcomposer.org/doc/articles/plugins.md">composer plugin</a>.
You install it as a development dependency, and it will then inspect any
package you install to see if it can handle installation tasks.
This vastly simplifies the previous iteration, which required downloading
a self-updating PHAR to install the composer scripts within an application.</li>
<li>It now prompts you to ask which file to inject the detected component or
module into, allowing you to choose from:
<ul>
<li>
<code>config/application.config.php</code> (vanilla zend-mvc application)</li>
<li>
<code>config/modules.config.php</code> (Apigility application)</li>
<li>
<code>config/development.config.php</code> (application using zend-development-mode)</li>
<li>
<code>config/config.php</code> (for Expressive users using the expressive-config-manager)</li>
<li>or &quot;do not inject&quot;.</li>
</ul>
</li>
<li>It now prompts you to ask if you want to use the selection made on additional
packages being installed.</li>
</ul>
<p>We've become quite excited about the possibilities Composer plugins and
installer scripts offer, and plan to leverage them as much as possible!</p>
<h2>zend-mvc v3 progress</h2>
<p>Several weeks ago, we created a <a href="https://github.com/zendframework/maintainers/wiki/zend-mvc-v3-refactor:-reduce-components">detailed plan for the zend-mvc v3 refactor</a>.
The work is primarily around reducing the number of dependencies zend-mvc
requires; the above work on the component installer directly enables these changes,
but much more needs to be done.</p>
<p>Since we posted that, we've also started work on the various milestones it details.
In particular, we've done the following:</p>
<ul>
<li>Created the <a href="https://zendframework.github.io/zend-router/">zend-router</a> component,
to provide all routing capabilities. This reduces the amount of code in zend-mvc
tremendously, and also makes it easier to re-use routing in other projects
(e.g., <a href="https://github.com/zendframework/zend-expressive-zendrouter/pull/6">zend-expressive-zendrouter</a>).
We also removed console routing from the component, letting it focus on HTTP
routing only (more on this).</li>
<li>Created the <a href="https://zendframework.github.io/zend-mvc-console/">zend-mvc-console</a>
component, to provide integration between zend-console, zend-mvc, zend-router,
and zend-view. Essentially, all console-related functionality from zend-mvc,
zend-router, and zend-view were pushed into this component.</li>
<li>Created <a href="https://zendframework.github.io/zend-mvc-plugin-prg/">zend-mvc-plugin-prg</a>,
which makes a standalone component out of the <code>prg()</code> controller plugin. This is the
first of <a href="https://github.com/zendframework/maintainers/wiki/zend-mvc-v3-refactor:-reduce-components#split-out-some-controller-plugins">several component plugins</a>
being developed.</li>
</ul>
<p>As part of this effort, we are <a href="https://github.com/zendframework/zend-mvc/blob/develop/doc/book/migration/to-v3-0.md">documenting migration steps</a>
needed by end-users, to ensure that developers will be able to update their
applications once version 3 is tagged.</p>
<h2>Documentation</h2>
<p>The documentation effort was put on the back-burner during these past few weeks so that
we can focus on the development efforts. Regardless, we managed to publish 5 components
to GitHub Pages:</p>
<ul>
<li>
<a href="https://zendframework.github.io/zend-barcode/">zend-barcode</a>
</li>
<li>
<a href="https://zendframework.github.io/zend-mvc/">zend-mvc</a>
</li>
<li>
<a href="https://zendframework.github.io/zend-mvc-console/">zend-mvc-console</a>
</li>
<li>
<a href="https://zendframework.github.io/zend-mvc-plugin-prg/">zend-mvc-plugin-prg</a>
</li>
<li>
<a href="https://zendframework.github.io/zend-router/">zend-router</a>
</li>
</ul>
<p>Additionally, a number of contributors, and notably <a href="http://www.froschdesignstudio.de">Frank Brückner</a>,
have been providing patches to resolve issues created following the automated
documentation migration.</p>
<h2>Diactoros, Stratigility, and Expressive</h2>
<p>A fair number of issues and feature patches have been reported on the <a href="https://github.com/zendframework/zend-diactoros">Diactoros (PSR-7)</a>,
<a href="https://github.com/zendframework/zend-stratigility">Stratigility (PSR-7 middleware foundation)</a>, and
<a href="https://zendframework.github.io/zend-expressive/">Expressive</a> projects, and we had
a short sprint to resolve these.</p>
<ul>
<li>The latest version of Diactoros is <a href="https://github.com/zendframework/zend-diactoros/releases/tag/1.3.5">1.3.5</a>,
and it incorporates around 20 bugfixes and documentation fixes; among others,
if fixes detection of HTTP/2 requests in the <code>ServerRequestFactory</code>.</li>
<li>The latest version of Stratigiliy, <a href="https://github.com/zendframework/zend-stratigility/releases/tag/1.2.0">1.2.0</a>,
makes the behavior of its internal <code>Response</code> class less error-prone following
calls to <code>end()</code>. Additionally, it:
<ul>
<li>ensures that exception details are not emitted in production mode, and makes
production mode the default.</li>
<li>adds a <code>FinalHandler::setOriginalResponse()</code> method, to allow injection
after instantiation.</li>
<li>adds support for catching <code>Throwable</code> errors in PHP 7 applications within
the dispatcher.</li>
<li>provides a more meaningful <code>InvalidMiddlewareException</code> that is raised by
<code>MiddlewarePipe::pipe()</code> for non-callable middleware.</li>
</ul>
</li>
<li>
<a href="https://github.com/zendframework/zend-expressive-skeleton/releases/tag/1.0.1">zend-expressive-skeleton</a>
provides a number of fixes:
<ul>
<li>It updates the Pimple container script to cache factory instances for re-use.</li>
<li>It updates the <code>composer.json</code> to allow installing zend-servicemanager v3,
whoops v2, and ProxyManager v2.</li>
<li>It fixes an issue in the installer whereby specified constraints were not
being passed to Composer prior to dependency resolution, resulting in
stale dependencies.</li>
<li>It removes error/exception display from the shipped default error templates,
to make them secure by default.</li>
</ul>
</li>
<li>
<a href="https://github.com/zendframework/zend-expressive-zendviewrenderer/releases/tag/1.1.0">zend-expressive-zendviewrenderer 1.1.0</a>
updates the component to be forward-compatible with the zend-servicemanager
and zend-eventmanager v3 releases.</li>
<li>
<a href="https://github.com/zendframework/zend-expressive-zendrouter/releases/tag/1.1.0">zend-expressive-zendrouter 1.1.0</a>
updates the component to depend on zend-router instead of zend-mvc.</li>
</ul>
<h2>Pull request and issue activity</h2>
<p>Since the last update, we've
<a href="https://github.com/issues?utf8=%E2%9C%93&amp;q=is:pr+is:merged+org:zendframework+closed:%222016-02-12+..+2016-03-24%22">merged around 160 pull requests</a>,
and <a href="https://github.com/issues?utf8=%E2%9C%93&amp;q=is:issue+org:zendframework+closed:%222016-02-12+..+2016-03-24%22+">resolved around 125 issues</a>.
(links require a GitHub account).</p>
<p>Unlike previous posts, we are not detailing every component release this time;
the sheer number of them (around 60!) would result in a very long read!</p>
<h2>Until next time</h2>
<p>If you want to help:</p>
<ul>
<li>Help complete the <a href="https://github.com/issues?utf8=%E2%9C%93&amp;q=is:open+is:issue+org:zendframework+label:documentation+label:EasyFix">documentation migration</a>!</li>
<li>You can help with the <a href="https://github.com/zendframework/maintainers/wiki/zend-mvc-v3-refactor:-reduce-components">MVC milestone</a>;
the linked page provides plenty of detail on how you can assist.</li>
<li>Search for <a href="https://github.com/issues?utf8=%E2%9C%93&amp;q=is:issue+org:zendframework+is:open+label:%22help+wanted%22+">help wanted</a>
or <a href="https://github.com/issues?utf8=%E2%9C%93&amp;q=is:issue+org:zendframework+is:open+label:%22EasyFix%22+">EasyFix</a>
issues (most of the latter are documentation).</li>
</ul>
<p>Many thanks to all the contributors who have provided feedback, patches, reviews,
or releases since the last update!</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Zend Framework 3 Update for 2016-03-24</title>
      <pubDate>Thu, 24 Mar 2016 20:45:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/2016-03-24-zf3-update.html</link>
      <guid>http://framework.zend.com/blog/2016-03-24-zf3-update.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>This is an installment in an ongoing series of posts on ZF3 development status.
It's been more than a month since the last update, and we've been quite
busy with:</p>
<ul>
<li>~160 pull requests merged, and ~125 issues closed.</li>
<li>~60 component releases.</li>
<li>Completion of the zend-servicemanager/zend-eventmanager migrations.</li>
<li>Completion of the component/module installer.</li>
<li>Progress on the zend-mvc version 3 changes, including separation of routing
and console tooling to separate packages.</li>
<li>Publication of documentation for 5 components to GitHub Pages.</li>
</ul><h2>Compatibility Migrations</h2>
<p>During the first week of March, we completed the forwards compatibility
migrations of components. As a reminder, we were working on updating components
that depend on any of:</p>
<ul>
<li>zend-eventmanager</li>
<li>zend-servicemanager</li>
<li>zend-stdlib</li>
</ul>
<p>to be forwards compatible with the version 3 releases of each. In particular,
the first two have version 2 releases that allow developers to make their
code forwards compatible with the version 3 releases, and we were doing
precisely that with the various Zend Framework components. As of 2 March 2016,
we completed this task — a major milestone in the ZF3 initiative!</p>
<p>The following component releases were made since the <a href="/blog/2016-02-12-zf3-biweekly-update.html">last blog update</a>
and mark the current stable versions that are forwards compatible with the v3
releases:</p>
<ul>
<li>
<a href="https://github.com/zendframework/zend-authentication/releases/tag/2.5.3">zend-authentication 2.5.3</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-barcode/releases/tag/2.6.0">zend-barcode 2.6.0</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-captcha/releases/tag/2.5.4">zend-captcha 2.5.4</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-db/releases/tag/2.7.0">zend-db 2.7.0</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-eventmanager/releases/tag/3.0.1">zend-eventmanager 3.0.1</a> (which updates the component to use zend-stdlib v3)</li>
<li>
<a href="https://github.com/zendframework/zend-file/releases/tag/2.6.1">zend-file 2.6.1</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-form/releases/tag/2.7.0">zend-form 2.7.0</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-hydrator/releases/tag/1.1.0">zend-hydrator 1.1.0</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-hydrator/releases/tag/2.1.0">zend-hydrator 2.1.0</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-inputfilter/releases/tag/2.6.0">zend-inputfilter 2.6.0</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-log/releases/tag/2.7.1">zend-log 2.7.1</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-mail/releases/tag/2.6.1">zend-mail 2.6.1</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-modulemanager/releases/tag/2.7.1">zend-modulemanager 2.7.1</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-mvc/releases/tag/2.7.3">zend-mvc 2.7.3</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-navigation/releases/tag/2.6.1">zend-navigation 2.6.1</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-paginator/releases/tag/2.6.0">zend-paginator 2.6.0</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-progressbar/releases/tag/2.5.2">zend-progressbar 2.5.2</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-session/releases/tag/2.6.2">zend-session 2.6.2</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-test/releases/tag/2.6.1">zend-test 2.6.1</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-uri/releases/tag/2.5.2">zend-uri 2.5.2</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-validator/releases/tag/2.6.0">zend-validator 2.6.0</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-view/releases/tag/2.6.5">zend-view 2.6.5</a>
</li>
</ul>
<p>In addition to the migration changes, we made a number of other updates to zend-mvc, including:</p>
<ul>
<li>addition of a new <code>MiddlewareListener</code>, allowing routing to PSR-7 middleware in the MVC layer.</li>
<li>modifications to the <code>EventManagerAwareInterface</code> initializers; since shared managers are
injected in <code>EventManager</code> instances via the constructor in zend-eventmanager v3, the initializers
needed changes in order to work with both v2 and v3.</li>
<li>
<code>AbstractController::getServiceLocator()</code> now raises an <code>E_USER_DEPRECATED</code>
notice. zend-servicemanager v3 removes the <code>ServiceLocatorAwareInterface</code>, and
zend-mvc will remove the implementations with version 3. Users should start
updating their controllers to accept dependencies via constructor injection.</li>
</ul>
<p>The above are messaged in more detail in the <a href="http://zendframework.github.io/zend-mvc/migration/">zend-mvc migration guide</a>.</p>
<h2>Component / Module Installer</h2>
<p>One goal for zend-mvc is to reduce the number of dependencies. Much of the
functionality within zend-mvc is not directly related to execution of the MVC,
but rather integrating components. Typically this is done by either providing and
wiring factories for components, or providing and/or wiring event listeners for
components.</p>
<p>We already have functionality that allows doing these tasks via the
zend-modulemanager component, which means we can expose components as application
modules. However, this creates an installation issue: just like modules, you would need to:</p>
<ol>
<li>Install the package containing the module.</li>
<li>Enable the module in your application.</li>
</ol>
<p>To automate the second task, we developed <a href="https://zendframework.github.io/zend-component-installer">zend-component-installer</a>
back in December.  As part of the current milestones, we completed that
component, by making the following changes:</p>
<ul>
<li>It now acts as a <a href="https://getcomposer.org/doc/articles/plugins.md">composer plugin</a>.
You install it as a development dependency, and it will then inspect any
package you install to see if it can handle installation tasks.
This vastly simplifies the previous iteration, which required downloading
a self-updating PHAR to install the composer scripts within an application.</li>
<li>It now prompts you to ask which file to inject the detected component or
module into, allowing you to choose from:
<ul>
<li>
<code>config/application.config.php</code> (vanilla zend-mvc application)</li>
<li>
<code>config/modules.config.php</code> (Apigility application)</li>
<li>
<code>config/development.config.php</code> (application using zend-development-mode)</li>
<li>
<code>config/config.php</code> (for Expressive users using the expressive-config-manager)</li>
<li>or &quot;do not inject&quot;.</li>
</ul>
</li>
<li>It now prompts you to ask if you want to use the selection made on additional
packages being installed.</li>
</ul>
<p>We've become quite excited about the possibilities Composer plugins and
installer scripts offer, and plan to leverage them as much as possible!</p>
<h2>zend-mvc v3 progress</h2>
<p>Several weeks ago, we created a <a href="https://github.com/zendframework/maintainers/wiki/zend-mvc-v3-refactor:-reduce-components">detailed plan for the zend-mvc v3 refactor</a>.
The work is primarily around reducing the number of dependencies zend-mvc
requires; the above work on the component installer directly enables these changes,
but much more needs to be done.</p>
<p>Since we posted that, we've also started work on the various milestones it details.
In particular, we've done the following:</p>
<ul>
<li>Created the <a href="https://zendframework.github.io/zend-router/">zend-router</a> component,
to provide all routing capabilities. This reduces the amount of code in zend-mvc
tremendously, and also makes it easier to re-use routing in other projects
(e.g., <a href="https://github.com/zendframework/zend-expressive-zendrouter/pull/6">zend-expressive-zendrouter</a>).
We also removed console routing from the component, letting it focus on HTTP
routing only (more on this).</li>
<li>Created the <a href="https://zendframework.github.io/zend-mvc-console/">zend-mvc-console</a>
component, to provide integration between zend-console, zend-mvc, zend-router,
and zend-view. Essentially, all console-related functionality from zend-mvc,
zend-router, and zend-view were pushed into this component.</li>
<li>Created <a href="https://zendframework.github.io/zend-mvc-plugin-prg/">zend-mvc-plugin-prg</a>,
which makes a standalone component out of the <code>prg()</code> controller plugin. This is the
first of <a href="https://github.com/zendframework/maintainers/wiki/zend-mvc-v3-refactor:-reduce-components#split-out-some-controller-plugins">several component plugins</a>
being developed.</li>
</ul>
<p>As part of this effort, we are <a href="https://github.com/zendframework/zend-mvc/blob/develop/doc/book/migration/to-v3-0.md">documenting migration steps</a>
needed by end-users, to ensure that developers will be able to update their
applications once version 3 is tagged.</p>
<h2>Documentation</h2>
<p>The documentation effort was put on the back-burner during these past few weeks so that
we can focus on the development efforts. Regardless, we managed to publish 5 components
to GitHub Pages:</p>
<ul>
<li>
<a href="https://zendframework.github.io/zend-barcode/">zend-barcode</a>
</li>
<li>
<a href="https://zendframework.github.io/zend-mvc/">zend-mvc</a>
</li>
<li>
<a href="https://zendframework.github.io/zend-mvc-console/">zend-mvc-console</a>
</li>
<li>
<a href="https://zendframework.github.io/zend-mvc-plugin-prg/">zend-mvc-plugin-prg</a>
</li>
<li>
<a href="https://zendframework.github.io/zend-router/">zend-router</a>
</li>
</ul>
<p>Additionally, a number of contributors, and notably <a href="http://www.froschdesignstudio.de">Frank Brückner</a>,
have been providing patches to resolve issues created following the automated
documentation migration.</p>
<h2>Diactoros, Stratigility, and Expressive</h2>
<p>A fair number of issues and feature patches have been reported on the <a href="https://github.com/zendframework/zend-diactoros">Diactoros (PSR-7)</a>,
<a href="https://github.com/zendframework/zend-stratigility">Stratigility (PSR-7 middleware foundation)</a>, and
<a href="https://zendframework.github.io/zend-expressive/">Expressive</a> projects, and we had
a short sprint to resolve these.</p>
<ul>
<li>The latest version of Diactoros is <a href="https://github.com/zendframework/zend-diactoros/releases/tag/1.3.5">1.3.5</a>,
and it incorporates around 20 bugfixes and documentation fixes; among others,
if fixes detection of HTTP/2 requests in the <code>ServerRequestFactory</code>.</li>
<li>The latest version of Stratigiliy, <a href="https://github.com/zendframework/zend-stratigility/releases/tag/1.2.0">1.2.0</a>,
makes the behavior of its internal <code>Response</code> class less error-prone following
calls to <code>end()</code>. Additionally, it:
<ul>
<li>ensures that exception details are not emitted in production mode, and makes
production mode the default.</li>
<li>adds a <code>FinalHandler::setOriginalResponse()</code> method, to allow injection
after instantiation.</li>
<li>adds support for catching <code>Throwable</code> errors in PHP 7 applications within
the dispatcher.</li>
<li>provides a more meaningful <code>InvalidMiddlewareException</code> that is raised by
<code>MiddlewarePipe::pipe()</code> for non-callable middleware.</li>
</ul>
</li>
<li>
<a href="https://github.com/zendframework/zend-expressive-skeleton/releases/tag/1.0.1">zend-expressive-skeleton</a>
provides a number of fixes:
<ul>
<li>It updates the Pimple container script to cache factory instances for re-use.</li>
<li>It updates the <code>composer.json</code> to allow installing zend-servicemanager v3,
whoops v2, and ProxyManager v2.</li>
<li>It fixes an issue in the installer whereby specified constraints were not
being passed to Composer prior to dependency resolution, resulting in
stale dependencies.</li>
<li>It removes error/exception display from the shipped default error templates,
to make them secure by default.</li>
</ul>
</li>
<li>
<a href="https://github.com/zendframework/zend-expressive-zendviewrenderer/releases/tag/1.1.0">zend-expressive-zendviewrenderer 1.1.0</a>
updates the component to be forward-compatible with the zend-servicemanager
and zend-eventmanager v3 releases.</li>
<li>
<a href="https://github.com/zendframework/zend-expressive-zendrouter/releases/tag/1.1.0">zend-expressive-zendrouter 1.1.0</a>
updates the component to depend on zend-router instead of zend-mvc.</li>
</ul>
<h2>Pull request and issue activity</h2>
<p>Since the last update, we've
<a href="https://github.com/issues?utf8=%E2%9C%93&amp;q=is:pr+is:merged+org:zendframework+closed:%222016-02-12+..+2016-03-24%22">merged around 160 pull requests</a>,
and <a href="https://github.com/issues?utf8=%E2%9C%93&amp;q=is:issue+org:zendframework+closed:%222016-02-12+..+2016-03-24%22+">resolved around 125 issues</a>.
(links require a GitHub account).</p>
<p>Unlike previous posts, we are not detailing every component release this time;
the sheer number of them (around 60!) would result in a very long read!</p>
<h2>Until next time</h2>
<p>If you want to help:</p>
<ul>
<li>Help complete the <a href="https://github.com/issues?utf8=%E2%9C%93&amp;q=is:open+is:issue+org:zendframework+label:documentation+label:EasyFix">documentation migration</a>!</li>
<li>You can help with the <a href="https://github.com/zendframework/maintainers/wiki/zend-mvc-v3-refactor:-reduce-components">MVC milestone</a>;
the linked page provides plenty of detail on how you can assist.</li>
<li>Search for <a href="https://github.com/issues?utf8=%E2%9C%93&amp;q=is:issue+org:zendframework+is:open+label:%22help+wanted%22+">help wanted</a>
or <a href="https://github.com/issues?utf8=%E2%9C%93&amp;q=is:issue+org:zendframework+is:open+label:%22EasyFix%22+">EasyFix</a>
issues (most of the latter are documentation).</li>
</ul>
<p>Many thanks to all the contributors who have provided feedback, patches, reviews,
or releases since the last update!</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Zend Framework 3 Update for 2016-02-12</title>
      <pubDate>Fri, 12 Feb 2016 17:40:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/2016-02-12-zf3-biweekly-update.html</link>
      <guid>http://framework.zend.com/blog/2016-02-12-zf3-biweekly-update.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>This is an installment in an ongoing series of bi-weekly posts on ZF3 development status.</p>
<p>The highlights:</p>
<ul>
<li>~60 pull requests merged, and ~100 issues closed.</li>
<li>Another v3 release: zend-stdlib!</li>
<li>16 components updated to zend-servicemanager/zend-eventmanager/zend-stdlib v3
changes, and tagged with stable releases.</li>
<li>25 component releases.</li>
<li>Publication of documentation for 13 components to GitHub Pages.</li>
</ul><h2>New 3.0 versions</h2>
<p>We released another component with version 3.0 stability, <a href="https://zendframework.github.io/zend-stdlib/">zend-stdlib</a>.
This release got the major version bump for a number of reasons:</p>
<ul>
<li>Per version 2.7.0, the hydrator sub-component was deprecated (it has been
moved into its own component, <a href="https://github.com/zendframework/zend-hydrator">zend-hydrator</a>).
With the new major version, we were able to remove it.</li>
<li>A number of features existed as polyfills to provide forwards-compatibility
support from PHP 5.3 or PHP 5.4 to later PHP versions. Since we now support
only PHP 5.5+, we could remove these.</li>
</ul>
<p>Unless a component depends specifically on the hydrators, it's essentially
<em>already</em> forwards-compatible with the new version 3! As such, we'll be
gradually updating components that depend on zend-stdlib to depend on <code>^2.7 || ^3.0</code>.</p>
<h2>Compatibility Migrations</h2>
<p>The past two weeks have been heavily focused on preparing components to be
forwards compatible with the version 3 releases of zend-stdlib,
zend-eventmanager, and zend-servicemanager. We had several breakthroughs that
are enabling these migrations.</p>
<p>First, we can test the different versions via additional Travis-CI jobs. As an
example, consider these PHP 5.5 entries from the zend-cache test matrix:</p>
<pre><code class="language-yaml">matrix:
  include:
    - php: 5.5
      env:
        - EXECUTE_CS_CHECK=true
        - PECL_INSTALL_APCU='apcu-4.0.8'
    - php: 5.5
      env:
        - SERVICE_MANAGER_VERSION=&quot;^2.7.5&quot;
        - EVENT_MANAGER_VERSION=&quot;^2.6.2&quot;
        - PECL_INSTALL_APCU='apcu-4.0.8'
</code></pre>
<p>Note that in the second entry, we specify specific v2 versions of
zend-eventmanager and zend-servicemanager to use.</p>
<p>Later, in our <code>before_install</code> section, we do the following:</p>
<pre><code class="language-yaml">before_install:
  - if [[ $SERVICE_MANAGER_VERSION != '' ]]; then composer require --no-update &quot;zendframework/zend-servicemanager:$SERVICE_MANAGER_VERSION&quot; ; fi
  - if [[ $SERVICE_MANAGER_VERSION == '' ]]; then composer require --no-update &quot;zendframework/zend-servicemanager:^3.0.3&quot; ; fi
  - if [[ $SERVICE_MANAGER_VERSION == '' ]]; then composer remove --dev --no-update zendframework/zend-session ; fi
  - if [[ $EVENT_MANAGER_VERSION != '' ]]; then composer require --no-update &quot;zendframework/zend-eventmanager:$EVENT_MANAGER_VERSION&quot; ; fi
  - if [[ $EVENT_MANAGER_VERSION == '' ]]; then composer require --no-update &quot;zendframework/zend-eventmanager:^3.0&quot; ; fi
</code></pre>
<p>Essentially, we have two builds. One against the v2 components, and one against
the v3 components; the items above force one or the other for the particular
build. This allows us to verify that the code works against both versions, and
that any later changes require that both versions continue to work.</p>
<p>What about that line to <em>remove</em> dependencies, though?</p>
<p>The tricky part of migration has been unravelling dependencies. If a dependency
of a component being migrated <em>also</em> depends on one of the updated components,
we have to wait until the dependency is migrated. Or do we?</p>
<p>In many cases, these dependencies are marked as <em>suggestions</em>, and as
<em>development</em> dependencies only; they are not <em>hard requirements</em> of the
component. Realizing this, we discovered the following workflow:</p>
<ul>
<li>We can remove dependencies when testing against v3 components <strong>if</strong>:
<ul>
<li>the dependency is not yet migrated</li>
<li>the dependency is <em>optional</em> (only listed in <code>require-dev</code> and/or <code>suggest</code>)</li>
</ul>
</li>
<li>We can update the tests to skip tests that depend on those particular
components <em>if classes or interfaces from that component are missing</em>.</li>
</ul>
<p>This means that we're testing specifically that the <em>current</em> component is
forwards-compatible with the new versions. Later, once those dependencies are
updated, we can re-enable those tests.</p>
<p>Finally, a contributor wrote a trait that we can compose in plugin manager
tests to verify that a plugin manager implementation is both v2 and v3
compatible. By adding these to components, we're able to verify with much more
confidence that the code works on both versions.</p>
<p>With these findings and tools in place, we were able to complete migration of
16 components these past two weeks, tagging each with new stable versions!
These include:</p>
<ul>
<li>
<a href="https://github.com/zendframework/zend-math/releases/tag/release-2.6.0">zend-math 2.6.0</a>
(technically, this one <em>removes</em> the dependency on zend-servicemanager, as it
was an internal detail, and not necessary)</li>
<li>
<a href="https://github.com/zendframework/zend-serializer/releases/tag/release-2.6.0">zend-serializer 2.6.0</a> /
<a href="https://github.com/zendframework/zend-serializer/releases/tag/release-2.6.1">zend-serializer 2.6.1</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-tag/releases/tag/release-2.6.0">zend-tag 2.6.0</a> /
<a href="https://github.com/zendframework/zend-tag/releases/tag/release-2.6.1">zend-tag 2.6.1</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-permissions-acl/releases/tag/release-2.6.0">zend-permissions-acl 2.6.0</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-crypt/releases/tag/release-2.6.0">zend-crypt 2.6.0</a>
(this one replaces zend-servicemanager with container-interop)</li>
<li>
<a href="https://github.com/zendframework/zend-filter/releases/tag/release-2.6.0">zend-filter 2.6.0</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-http/releases/tag/release-2.5.4">zend-http 2.5.4</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-server/releases/tag/release-2.6.1">zend-server 2.6.1</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-json/releases/tag/release-2.6.1">zend-json 2.6.1</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-config/releases/tag/release-2.6.0">zend-config 2.6.0</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-text/releases/tag/release-2.6.0">zend-text 2.6.0</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-console/releases/tag/release-2.6.0">zend-console 2.6.0</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-log/releases/tag/release-2.7.0">zend-log 2.7.0</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-i18n/releases/tag/release-2.6.0">zend-i18n 2.6.0</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-feed/releases/tag/release-2.7.0">zend-feed 2.7.0</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-cache/releases/tag/release-2.6.0">zend-cache 2.6.0</a> /
<a href="https://github.com/zendframework/zend-cache/releases/tag/release-2.6.1">zend-cache 2.6.1</a>
</li>
</ul>
<p>We've made every effort to ensure that these releases continue to work with
existing version 2 functionality; however, occasionally, errors occur. If you
notice such errors, please report them as soon as you can, with as many details
as you can, so we can correct them. Additionally, please be aware that
developers are fellow human beings, and be respectful in your communication.
Nobody is intentionally trying to break your applications, and contributors
desire a smooth migration for you as well.</p>
<p>At this point, we're about half-done with the migrations, and of the remaining
half, around half have patches under review. If you want to assist, please review the
<a href="https://github.com/zendframework/maintainers/wiki/ZF3-ServiceManager-component-refactors,-phase-2">migrations page</a>
to see which patches are need review, and where you might be able to help.</p>
<h2>Documentation</h2>
<p>As noted in <a href="/blog/2016-01-28-zf3-biweekly-update.html">our last update</a>, <a href="http://blog.hock.in/">Gary
Hockin</a> performed an automated migration of our
documentation from our reStructuredText sources to per-component Markdown a few
weeks ago, and opened issues against each component to guide review of the
documentation before publication. We also mentioned a plan to host
documentation via <a href="https://pages.github.com/">GitHub Pages</a>.</p>
<p>As part of the migration process, we decided to review and ready documentation
for publication for any component getting a new minor release. This has resulted in
new documentation for the following 13 components!</p>
<ul>
<li>
<a href="https://zendframework.github.io/zend-servicemanager/">zend-servicemanager</a>
</li>
<li>
<a href="https://zendframework.github.io/zend-stdlib/">zend-stdlib</a>
</li>
<li>
<a href="https://zendframework.github.io/zend-hydrator/">zend-hydrator</a>
</li>
<li>
<a href="https://zendframework.github.io/zend-tag/">zend-tag</a>
</li>
<li>
<a href="https://zendframework.github.io/zend-permissions-acl/">zend-permissions-acl</a>
</li>
<li>
<a href="https://zendframework.github.io/zend-filter/">zend-filter</a>
</li>
<li>
<a href="https://zendframework.github.io/zend-config/">zend-config</a>
</li>
<li>
<a href="https://zendframework.github.io/zend-text/">zend-text</a>
</li>
<li>
<a href="https://zendframework.github.io/zend-console/">zend-console</a>
</li>
<li>
<a href="https://zendframework.github.io/zend-log/">zend-log</a>
</li>
<li>
<a href="https://zendframework.github.io/zend-i18n/">zend-i18n</a>
</li>
<li>
<a href="https://zendframework.github.io/zend-feed/">zend-feed</a>
</li>
<li>
<a href="https://zendframework.github.io/zend-cache/">zend-cache</a>
</li>
</ul>
<p>We're very excited about the new documentation, particularly as it's
mobile-friendly, and has in-site search!</p>
<h2>Pull request and issue activity</h2>
<p>Since the last update, we've
<a href="https://github.com/issues?utf8=%E2%9C%93&amp;q=is:pr+is:merged+org:zendframework+closed:%222016-01-28+..+2016-02-12%22+">merged around 60 pull requests</a>,
<a href="https://github.com/issues?page=2&amp;q=is:issue+org:zendframework+closed:%222016-01-28+..+2016-02-12%22&amp;utf8=%E2%9C%93">closing over 100 issues</a>.
(links require a GitHub account). Activity has been particularly high on
documentation issues.</p>
<h2>Component Releases</h2>
<p>The following is a list of component releases since the last update, minus
those noted in the migration section already.  While not all releases are
related to ZF3 specifically, this list is intended to detail activity within
the organization.</p>
<ul>
<li>
<a href="https://github.com/zendframework/zend-expressive-twigrenderer/releases/tag/1.1.1">zend-expressive-twigrenderer 1.1.1</a>
updates the <code>TwigExtension</code> to implement <code>Twig_Extension_GlobalsInterface</code>, to
ensure it is forwards-compatible with Twig v2.</li>
<li>
<a href="https://github.com/zendframework/zend-servicemanager/releases/tag/release-2.7.5">zend-servicemanager 2.7.5</a>
fixes the behavior of the <code>InvokableFactory</code> for situations when options are
passed via a plugin manager, and provides tests for validating plugin managers
are ready for both v2 and v3.</li>
<li>
<a href="https://github.com/zendframework/zend-servicemanager/releases/tag/release-3.0.3">zend-servicemanager 3.0.3</a>
provides a number of fixes:
<ul>
<li>cyclical alias detection and reporting.</li>
<li>skips alias resolution if no aliases are present.</li>
<li>adds tests to verify plugin managers are v3-ready.</li>
<li>publishes documentation to GitHub Pages.</li>
</ul>
</li>
<li>
<a href="https://github.com/zendframework/ZendXml/releases/tag/release-1.0.2">ZendXml 1.0.2</a>
updates the PHP dependency to <code>^5.3.3 || ^7.0</code>, allowing it to work with any
ZF component, in any supported PHP version. It also expands the test matrix to
include PHP 7.</li>
<li>
<a href="https://github.com/zendframework/zend-i18n/releases/tag/release-2.6.0">zend-i18n 2.6.0</a>,
while previously noted, also contained the following changes:
<ul>
<li>adds support for <code>NumberFormatter</code> text attributes when using the <code>NumberFormat</code> view helper.</li>
<li>provides updated postal code verifications for Mauritius and Serbia.</li>
<li>allows multiple invocations of the <code>DateTime</code> validator with different sets of input.</li>
<li>provides null checks on provided message strings.</li>
</ul>
</li>
</ul>
<h2>Until next time</h2>
<p>If you want to help:</p>
<ul>
<li>Help complete the <a href="https://github.com/issues?utf8=%E2%9C%93&amp;q=is:open+is:issue+org:zendframework+label:documentation+label:EasyFix">documentation migration</a>!</li>
<li>Also, as noted above, you can assist with <a href="https://github.com/zendframework/maintainers/wiki/ZF3-ServiceManager-component-refactors,-phase-2">refactoring components to support v2 + v3 of zend-servicemanager</a>.</li>
<li>Search for <a href="https://github.com/issues?utf8=%E2%9C%93&amp;q=is:issue+org:zendframework+is:open+label:%22help+wanted%22+">help wanted</a>
or <a href="https://github.com/issues?utf8=%E2%9C%93&amp;q=is:issue+org:zendframework+is:open+label:%22EasyFix%22+">EasyFix</a>
issues (most of the latter are documentation).</li>
</ul>
<p>Many thanks to all the contributors who have provided feedback, patches, reviews,
or releases these past two weeks!</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Zend Framework 3 Update for 2016-01-28</title>
      <pubDate>Thu, 28 Jan 2016 16:45:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/2016-01-28-zf3-biweekly-update.html</link>
      <guid>http://framework.zend.com/blog/2016-01-28-zf3-biweekly-update.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>This is an installment in an ongoing series of bi-weekly posts on ZF3 development status.</p>
<p>The highlights:</p>
<ul>
<li>&gt; 70 pull requests merged</li>
<li>2 components updated to zend-servicemanager/zend-eventmanager v3 changes</li>
<li>23 releases of components, <strong>including <a href="/blog/2016-01-28-expressive-1.0-stable.html">Expressive 1.0</a></strong>, and new
maintenance releases of Apigility and the ZF2 package.</li>
<li>Kickstarting of the documentation migration</li>
</ul><h2>Expressive 1.0!</h2>
<p>Following <a href="/blog/2016-01-19-expressive-rc6-rc7.html">two</a>
<a href="/blog/2016-01-21-expressive-rc7-rc8.html">final</a> release candidates, and after
three months in release candidate status, we've finally tagged
<a href="/blog/2016-01-28-expressive-1.0-stable.html">Expressive 1.0 stable</a>!
Among other things, we've created a <a href="https://zendframework.github.io/zend-expressive/">dedicated documentation site</a>,
which will update automatically as features are merged to the project.</p>
<p>We feel Expressive is the true cornerstone of the ZF3 initiative, and we look forward
to seeing the middleware-based projects people develop using it!</p>
<h2>ZF2 and Apigility</h2>
<p>We noted that the <code>zendframework/zendframework</code> package, which since 2.5.0 has been a metapackage
aggregating the various independent components, was using <code>~2.5.0</code> for component constraints.
This is problematic, as many components have 2.6 and even 2.7 versions, and some of those contain
security fixes. To fix this, we released version 2.5.3, which modifies the component constraints
to <code>^2.5</code>, allowing them to get the latest 2.X series of any given component.</p>
<p>We also released version 1.3.2 of Apigility, to bring in some changes merged many months ago
to fix things like DB Autodiscovery, as well as to pick up the 2.5.3 version of ZF2.</p>
<h2>Documentation</h2>
<p><a href="http://blog.hock.in">Gary Hockin</a> generously donated some time and wrote
scripts to automate translation of individual component documentation from the
ZF2 reStructured Text sources to markdown, and submitted pull requests across
all components, which we have now merged. These are incomplete; some syntax
cannot be translated correctly, imports within files could not be automated,
etc.</p>
<p>If you want to assist, we've
<a href="https://github.com/issues?utf8=%E2%9C%93&amp;q=is:open+is:issue+org:zendframework+label:documentation+label:EasyFix">labeled all documentation tasks</a>
(link requires github login); feel free to jump in on the effort!</p>
<p>We're also working on a plan to host the documentation via <a href="https://pages.github.com">GitHub Pages</a>, to
allow constant, up-to-date documentation, based on the work we did for the Expressive
documentation. Most of the tooling for this is now <a href="https://github.com/zendframework/zf-mkdoc-theme">created</a>,
and we will be able to start pushing it out to components once their documentation
is ready to publish.</p>
<h2>Pull request activity</h2>
<p>Since the last update, we've
<a href="https://github.com/issues?utf8=%E2%9C%93&amp;q=is:pr+org:zendframework+is:merged+closed:%222016-01-14+..+2016-01-28%22">merged over 70 pull requests</a>
(link requires a GitHub account). Activity has been particularly high on
Expressive and documentation issues.</p>
<h2>Component Releases</h2>
<p>The following is a list of component releasessince the last update, minus a
number of Expressive releases leading to the stable release.  While not all
releases are related to ZF3 specifically, this list is intended to detail
activity within the organization.</p>
<ul>
<li>
<a href="https://github.com/zendframework/zend-view/releases/tag/release-2.5.3">zend-view 2.5.3</a>
adds support for the <code>itemprop</code> HTML attribute in the <code>headLink()</code> view
helper, and updates <code>PhpRenderer::render()</code> to no longer lazy-instantiate a
<code>FilterChain</code> if none is already present.</li>
<li>
<a href="https://github.com/zendframework/zend-servicemanager/releases/tag/release-2.7.4">zend-servicemanager 2.7.4</a>
fixed an issue with resolving aliases of aliases due to canonicalization
changes in previous versions.</li>
<li>
<a href="https://github.com/zendframework/zend-servicemanager/releases/tag/release-3.0.1">zend-servicemanager 3.0.1</a>
removes the dependency on zend-stdlib by inlining the <code>ArrayUtils::merge()</code>
routine into the <code>Config</code> class.</li>
<li>
<a href="https://github.com/zendframework/zend-expressive-twigrenderer/releases/tag/1.1.0">zend-expressive-twigrenderer 1.1.0</a>
adds several new features:
<ul>
<li>
<code>url</code> and <code>absolute_url</code> template functions for generating URL paths and absolute URIs.</li>
<li>New &quot;globals&quot; configuration for specifying variables to make available in all templates.</li>
</ul>
</li>
<li>
<a href="https://github.com/zendframework/zend-servicemanager/releases/tag/release-3.0.2">zend-servicemanager 3.0.2</a>
fixes an issue whereby the creation context was not being passed correctly to
abstract factories from plugin managers, and provides a performance boost for
alias resolution.</li>
<li>
<a href="https://github.com/zendframework/zend-code/releases/tag/release-3.0.1">zend-code 3.0.1</a>
moves the phpcs dependency to the require-dev section, and ensures that the
method name is required when adding a method to the class generator.</li>
<li>
<a href="https://github.com/zfcampus/zf-apigility-admin/releases/tag/1.4.1">zend-apigility-admin 1.4.1</a>
fixes an issue in the <code>RpcServiceModel</code> to ensure that a correct pattern is
generated when fetching a service by name.</li>
<li>
<a href="https://github.com/zfcampus/zf-apigility-admin-ui/releases/tag/1.2.2">zend-apigility-admin-ui 1.2.2</a>
fixes a number of issues discovered, including:
<ul>
<li>DB Autodiscovery was failing due to inability to properly select the DB
adapter name.</li>
<li>Custom authentication adapters are now displayed.</li>
<li>The regex for validating custom content-types was fixed to ensure it only
allows valid MIME type specifications.</li>
<li>Fixes validation for REST and RPC service names, raising a warning on
invalid input.</li>
</ul>
</li>
</ul>
<h2>ZF3 Refactors</h2>
<p>Our refactoring effort has slowed due to our focus on getting Expressive
stabilized, though we're starting to get a number of community contributions to
aid the effort.</p>
<p>If you wish to assist, please read the
<a href="https://github.com/zendframework/maintainers/wiki/ZF3-ServiceManager-component-refactors,-phase-2">ZF3 ServiceManager refactoring guide</a>;
be sure to edit the wiki to indicate when you're working on a component, as well
as to indicate the relevant pull request.</p>
<h2>Until next time</h2>
<p>If you want to help:</p>
<ul>
<li>As noted above, help complete the <a href="https://github.com/issues?utf8=%E2%9C%93&amp;q=is:open+is:issue+org:zendframework+label:documentation+label:EasyFix">documentation migration</a>!</li>
<li>Also, as noted above, you can assist with <a href="https://github.com/zendframework/maintainers/wiki/ZF3-ServiceManager-component-refactors,-phase-2">refactoring components to support v2 + v3 of zend-servicemanager</a>.</li>
</ul>
<p>Many thanks to all the contributors who have provided feedback, patches, reviews,
or releases these past two weeks!</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Expressive 1.0.0 STABLE Released!</title>
      <pubDate>Thu, 28 Jan 2016 16:00:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/2016-01-28-expressive-1.0-stable.html</link>
      <guid>http://framework.zend.com/blog/2016-01-28-expressive-1.0-stable.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>The Zend Framework community is pleased to announce the immediate availability
of <a href="https://zendframework.github.io/zend-expressive/">Expressive</a> 1.0.0 STABLE!</p>
<p>You can install it using <a href="https://getcomposer.org">Composer</a>,
via the <code>create-project</code> command:</p>
<pre><code class="language-bash">$ composer create-project zendframework/zend-expressive-skeleton expressive
</code></pre>
<p>If you were using a release candidate, you can update your existing applications using:</p>
<pre><code class="language-bash">$ composer require &quot;zendframework/zend-expressive:^1.0&quot;
</code></pre><h2>What's new in the stable version?</h2>
<p>Nothing!</p>
<p>Well, not &quot;nothing&quot;. Since last week, we merged a few documentation fixes, but,
more importantly, finalized our documentation. This included a few changes:</p>
<ul>
<li>Some re-organization, to better categorize the documentation hierarchy.</li>
<li>Switching from <a href="http://bookdown.io">bookdown</a> to <a href="http://www.mkdocs.org">MkDocs</a>
as our build engine of choice. We'd already been using MkDocs to publish on
<a href="http://rtfd.org">ReadTheDocs</a>, so this wasn't a huge change. The choice was made
based on stability, maturity, and ecosystem; MkDocs has been around for quite some
time, and enabled us to accomplish a number of ideas quite quickly.</li>
<li>Automated publishing to <a href="https://pages.github.com">GitHub Pages</a>, via
Travis-CI. Any time we push to our master branch, the documentation will be
updated.</li>
</ul>
<p>We're quite proud of <a href="https://zendframework.github.io/zend-expressive/">the results</a>,
and hope that the new documentation serves our users well.</p>
<h2>What's to look forward to?</h2>
<p>Shipping a stable version means that you can depend on the API going forward.
As such, we're messaging that it's production ready; start building and shipping
your applications on it today!</p>
<p>For the next feature version, we already have a few things scheduled:</p>
<ul>
<li>Removal of the deprecated <code>pre_routing</code>/<code>post_routing</code> configuration support, as
messaged in the <a href="http://zendframework.github.io/zend-expressive/reference/migration/rc-to-v1/#timeline-for-migration">migration documentation</a>.</li>
<li>Providing <a href="https://github.com/zendframework/zend-expressive-skeleton/pull/31">modular functionality</a>
by default (with opt-out). This will likely include also providing a solution
similar to the <a href="https://github.com/zendframework/zend-component-installer">component installer</a>
to aid with auto-registering installed packages.</li>
</ul>
<h2>Kudos</h2>
<p><a href="https://github.com/zendframework/zend-expressive-router/graphs/contributors">We</a>
<a href="https://github.com/zendframework/zend-expressive-aurarouter/graphs/contributors">wish</a>
<a href="https://github.com/zendframework/zend-expressive-fastroute/graphs/contributors">to</a>
<a href="https://github.com/zendframework/zend-expressive-zendrouter/graphs/contributors">thank</a>
<a href="https://github.com/zendframework/zend-expressive-template/graphs/contributors">everyone</a>
<a href="https://github.com/zendframework/zend-expressive-platesrenderer/graphs/contributors">who</a>
<a href="https://github.com/zendframework/zend-expressive-twigrenderer/graphs/contributors">contributed</a>
<a href="https://github.com/zendframework/zend-expressive-zendviewrenderer/graphs/contributors">to</a>
<a href="https://github.com/zendframework/zend-expressive-helpers/graphs/contributors">the</a>
<a href="https://github.com/zendframework/zend-expressive/graphs/contributors">Expressive</a>
<a href="https://github.com/zendframework/zend-expressive-skeleton/graphs/contributors">project</a>!
(That previous sentence is a link for every one of our 11 Expressive repositories!)</p>
<p>Additionally, we thank everyone who has provided us feedback — whether in
the form of questions, bug reports, or suggestions — these past few
months; without the critical feedback, the project would not be where it is
today.</p>
<p>A few folks stand out:</p>
<ul>
<li>
<a href="http://www.zimuel.it">Enrico Zimuel</a>, who started it all!</li>
<li>
<a href="https://xtreamwayz.com">Geert Eltink</a>, who did the hard work of making the installer work!</li>
<li>
<a href="http://harikt.com">Hari K T</a>, who nudged us to split the repository into discrete, single-purpose projects!</li>
<li>
<a href="https://github.com/michaelmoussa">Michael Moussa</a>, who suggested the idea that middleware specifications
could be pipelines themselves — and then implemented the solution!</li>
</ul>
<h2>Write your next project Expressively!</h2>
<p>Write your PSR-7 middleware today! Consult
<a href="https://zendframework.github.io/zend-expressive/">the documentation</a> to get started!</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Expressive 1.0.0RC7/RC8 Released!</title>
      <pubDate>Thu, 21 Jan 2016 16:35:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/2016-01-21-expressive-rc7-rc8.html</link>
      <guid>http://framework.zend.com/blog/2016-01-21-expressive-rc7-rc8.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>The Zend Framework community is pleased to announce the immediate availability
of Expressive 1.0.0rc7 and the Expressive Skeleton and Installer 1.0.0rc8!</p>
<p>You can install the latest versions using <a href="https://getcomposer.org">Composer</a>,
via the <code>create-project</code> command:</p>
<pre><code class="language-bash">$ composer create-project -s rc zendframework/zend-expressive-skeleton expressive
</code></pre>
<p>You can update your existing applications using:</p>
<pre><code class="language-bash">$ composer update
</code></pre>
<p>This release candidate contains bug fixes for dispatching error middleware
pipelines. Additionally, we've released a new version of our Twig integration,
and detail those changes below.</p><h2>Changes in zend-expressive RC7</h2>
<p>RC6 updated the configuration for the middleware pipeline to make it a single pipeline.
We recommended that developers make use of our middleware grouping feature, however,
which allows you to specify not just a single, named middleware service, but an
<em>array</em> of named middleware services. This feature is great for grouping middleware
based on when it should execute, and makes ordering related middleware simpler.</p>
<p>Per our suggested, default configuration:</p>
<pre><code class="language-php">use Zend\Expressive\Container\ApplicationFactory;
use Zend\Expressive\Helper;

return [
    'dependencies' =&gt; [
        'factories' =&gt; [
            Helper\ServerUrlMiddleware::class =&gt; Helper\ServerUrlMiddlewareFactory::class,
            Helper\UrlHelperMiddleware::class =&gt; Helper\UrlHelperMiddlewareFactory::class,
        ],
    ],
    // This can be used to seed pre- and/or post-routing middleware
    'middleware_pipeline' =&gt; [
        // An array of middleware to register. Each item is of the following
        // specification:
        //
        // [
        //  Required:
        //     'middleware' =&gt; 'Name or array of names of middleware services and/or callables',
        //  Optional:
        //     'path'     =&gt; '/path/to/match', // string; literal path prefix to match
        //                                     // middleware will not execute
        //                                     // if path does not match!
        //     'error'    =&gt; true, // boolean; true for error middleware
        //     'priority' =&gt; 1, // int; higher values == register early;
        //                      // lower/negative == register last;
        //                      // default is 1, if none is provided.
        // ],
        //
        // While the ApplicationFactory ignores the keys associated with
        // specifications, they can be used to allow merging related values
        // defined in multiple configuration files/locations. This file defines
        // some conventional keys for middleware to execute early, routing
        // middleware, and error middleware.
        'always' =&gt; [
            'middleware' =&gt; [
                // Add more middleware here that you want to execute on
                // every request:
                // - bootstrapping
                // - pre-conditions
                // - modifications to outgoing responses
                Helper\ServerUrlMiddleware::class,
            ],
            'priority' =&gt; 10000,
        ],

        'routing' =&gt; [
            'middleware' =&gt; [
                ApplicationFactory::ROUTING_MIDDLEWARE,
                Helper\UrlHelperMiddleware::class,
                // Add more middleware here that needs to introspect the routing
                // results; this might include:
                // - route-based authentication
                // - route-based validation
                // - etc.
                ApplicationFactory::DISPATCH_MIDDLEWARE,
            ],
            'priority' =&gt; 1,
        ],

        'error' =&gt; [
            'middleware' =&gt; [
                // Add error middleware here.
            ],
            'priority' =&gt; -10000,
            'error' =&gt; true,
        ],
    ],
];
</code></pre>
<p>Unfortunately, for <em>error middleware</em>, this was not working correctly.</p>
<p>Internally, when we encounter an array of middleware, we create a
<code>Zend\Stratigility\MiddlewarePipe</code> instance, and pipe each middleware
service to it in order. The problem is that <code>MiddlewarePipe</code> does not
implement the error middleware signature — which meant that
error middleware pipelines were completely skipped!</p>
<p>To make this work, we introduced a proxy class, <code>Zend\Expressive\ErrorMiddlewarePipe</code>,
which wraps a <code>MiddlewarePipe</code>, and exposes the error middleware signature.
This is now used internally whenever an error middleware pipeline needs
to be created.</p>
<h2>Changes in zend-expressive-skeleton RC8</h2>
<p>When we created the new default middleware pipeline configuration for RC6/RC7, we
forgot one important detail: the <code>error</code> middleware group was missing its
<code>error</code> key, meaning it wasn't attempting to create error middleware at all!
We've fixed this in RC8.</p>
<p>If you upgraded to RC6/RC7 earlier this week, make sure you add that <code>error</code>
key, as detailed in the above example.</p>
<h2>Twig integration updates</h2>
<p>Today we released <a href="https://github.com/zendframework/zend-expressive-twigrenderer/releases/tag/1.1.0">version 1.0.1 of our Twig integration</a>.
This includes a few new features:</p>
<ul>
<li>It adds a dependency on zend-expressive-helpers and, if the <code>UrlHelper</code> and <code>ServerUrlHelper</code>
services are registered, makes new <code>url</code> and <code>absolute_url</code> template functions available.</li>
<li>It adds a new &quot;globals&quot; configuration sub-section for registering variables to pass
to all templates.</li>
</ul>
<p>You can read more in the <a href="http://zend-expressive.readthedocs.org/en/latest/template/twig/">Twig integration documentation</a>.</p>
<p>Many thanks to <a href="https://xtreamwayz.com">Geert Eltink</a> for these new features!</p>
<h2>Future</h2>
<p>Code is stabilizing, and we're seeing fewer issues hitting our issue tracker.
We hope that in a week or two we can release a stable version.</p>
<p>If you are testing Expressive — whether for the first time, or updating an
existing application — please help us prepare it for general availability!</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Expressive 1.0.0RC6/RC7 Released!</title>
      <pubDate>Tue, 19 Jan 2016 19:10:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/2016-01-19-expressive-rc6-rc7.html</link>
      <guid>http://framework.zend.com/blog/2016-01-19-expressive-rc6-rc7.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>The Zend Framework community is pleased to announce the immediate availability
of Expressive 1.0.0rc6 and 1.0.0rc7!</p>
<p>You can install the latest versions using <a href="https://getcomposer.org">Composer</a>,
via the <code>create-project</code> command:</p>
<pre><code class="language-bash">$ composer create-project -s rc zendframework/zend-expressive-skeleton expressive
</code></pre>
<p>You can update your existing applications using:</p>
<pre><code class="language-bash">$ composer update
</code></pre>
<p>Unfortunately, zend-expressive RC6 introduces some breaking changes. Several
issues were raised that could not be handled in a fully backwards compatible
fashion, and we felt they were important enough to introduce before a stable
release is made. We continue to honor previous application configuration;
however, deprecation notices will be raised, and the code for parsing the old
configuration will be removed for the 1.1 release.</p>
<p>We also released zend-expressive-skeleton RC7 quick on the heels of RC6 in order
to correct an issue with installation whereby the development dependencies at
time of invocation were installed, rather than the rewritten ones. This affected
only the skeleton, which is why we're announcing RC6 <em>and</em> RC7 releases.</p>
<p>See below for full details on what has changed.</p><h2>Changes in zend-expressive RC6</h2>
<p>Like RC5, the bulk of the changes merged for RC6 were documentation, including:</p>
<ul>
<li>a cookbook recipe detailing <a href="http://zend-expressive.readthedocs.org/en/latest/helpers/url-helper/#base-path-support">how to set the base path on a <code>UrlHelper</code> instance</a>.</li>
<li>two cookbook recipes detailing mechanisms for enabling <a href="http://zend-expressive.readthedocs.org/en/latest/cookbook/setting-locale-without-routing-parameter/">localized</a> <a href="http://zend-expressive.readthedocs.org/en/latest/cookbook/setting-locale-depending-routing-parameter/">routes</a>.</li>
<li>a cookbook recipe detailing <a href="http://zend-expressive.readthedocs.org/en/latest/cookbook/debug-toolbars/">how to add several popular debug toolbars to your applications</a>.</li>
<li>a cookbook recipe detailing <a href="http://zend-expressive.readthedocs.org/en/latest/cookbook/using-routed-middleware-class-as-controller/">how to write classes for handling multiple routes</a>.  (similar to controllers in MVC-oriented systems).</li>
<li>a <a href="http://zend-expressive.readthedocs.org/en/latest/features/#flow-overview">flow diagram</a> for the &quot;Features&quot; chapter.</li>
</ul>
<p>Unlike RC5, however, we introduced a significant code change, prompted by user
feedback. In particular, we saw each of the following reported multiple times:</p>
<ul>
<li>confusion over the <code>pre_routing</code> and <code>post_routing</code> middleware pipeline keys,
and how they relate to routed middleware.</li>
<li>requests to split the routing middleware into two distinct responsibilities:
routing middleware, and dispatch middleware.</li>
<li>requests to allow dispatching middleware when triggering route result observers.</li>
</ul>
<p>On analysis, and in discussions with users, we decided to make the following changes.</p>
<h3>Splitting the routing middleware</h3>
<p>We split the routing middleware into two discrete methods: routing and dispatch.
This solved multiple problems, and enables a number of interesting workflows.</p>
<p>In particular, it allows you to define middleware that can act on the routing
results in order to satisify pre-conditions in an automated way.</p>
<p>As an example, let's say you have a workflow where you want to:</p>
<ul>
<li>Authenticate a user</li>
<li>Authorize the user</li>
<li>Perform content negotiation</li>
<li>Validate incoming body parameters</li>
</ul>
<p>However, you don't want to perform these actions for <em>every</em> request, only
specific routes.</p>
<p>Previously, you would need to define an array of middleware for each route that needs
this set of responsibilities:</p>
<pre><code class="language-php">[
    'routes' =&gt; [
        'api.ping' =&gt; [
            'path' =&gt; '/api/ping',
            'middleware' =&gt; [
                AuthenticationMiddleware::class,
                AuthorizationMiddleware::class,
                ContentNegotiationMiddleware::class,
                BodyValidationMiddleware::class,
                PingMiddleware::class,
            ],
            'allowed_methods' =&gt; ['GET'],
        ],
        'api.books' =&gt; [
            'path' =&gt; '/api/books[/{id:[a-f0-9]{8}}]',
            'middleware' =&gt; [
                AuthenticationMiddleware::class,
                AuthorizationMiddleware::class,
                ContentNegotiationMiddleware::class,
                BodyValidationMiddleware::class,
                BooksMiddleware::class,
            ],
        ],
        /* etc. */
    ],
]
</code></pre>
<p>This is repetitive, and prone to error: any change in the workflow requires propagation
to <em>every route</em>.</p>
<p>Splitting the routing and dispatch middleware allows you to pipe middleware
<em>between</em> the two actions, allowing you to register such workflows <em>once</em>. The middleware
could then introspect the route results to determine if they have work to do.</p>
<p>This means you can now write middleware like this:</p>
<pre><code class="language-php">use Zend\Expressive\Router\RouteResult;

$authenticationMiddleware = function ($request, $response, $next) use ($map, $authenticate) {
    $routeResult = $request-&gt;getAttribute(RouteResult::class, false);
    if (! $routeResult instanceof RouteResult) {
        return $next($request, $response);
    }

    if (! in_array($routeResult-&gt;getMatchedRouteName(), $map)) {
        return $next($request, $response);
    }

    $authenticationResult = $authenticate($request);
    if (! $authenticationResult-&gt;isSuccess()) {
        // ERROR!
        return new AuthenticationErrorResponse();
    }

    return $next(
        $request-&gt;withAttribute($authenticationResult-&gt;getIdentity()),
        $response
    );
}
</code></pre>
<p>You would then sandwich it between the routing and dispatch middleware.
Programmatically, that looks like:</p>
<pre><code class="language-php">$app-&gt;pipeRoutingMiddleware();
$app-&gt;pipe($authenticationMiddleware);
$app-&gt;pipeDispatchMiddleware();
</code></pre>
<p>We'll look at configuration later, as it changes more dramatically.</p>
<h3>No more auto-registration of the routing middleware</h3>
<p>Prior to RC6, the routing middleware was auto-registered when:</p>
<ul>
<li>any call to <code>route()</code> was made, including those via the methods that proxy to
it (<code>get()</code>, <code>post()</code>, <code>any()</code>, etc.).</li>
<li>as soon as the <code>Application</code> instance was invoked as middleware (i.e., by
calling <code>$app($request, $response)</code> or calling <code>$app-&gt;run()</code>).</li>
</ul>
<p>You could also always register it manually when creating your application
pipeline using the <code>pipeRoutingMiddleware()</code> method.</p>
<p>Because routing was split into two distinct actions, and one primary purpose for
doing so was to allow registering middleware between those actions, we felt that
auto-registration was not only no longer useful, but a liability.</p>
<p>As such, when creating your application programmatically, there is now <em>exactly
one workflow</em> to use to enable the routing and dispatch middleware: each must
be piped explicitly into the pipeline:</p>
<pre><code class="language-php">$app-&gt;pipe(ServerUrlMiddleware::class);
$app-&gt;pipe(BaseParamsMiddleware::class);
$app-&gt;pipeRoutingMiddleware();
$app-&gt;pipe(UrlHelperMiddleware::class);
$app-&gt;pipeDispatchMiddleware();
</code></pre>
<p><strong>If you are building your application programmatically, you <em>must</em> update it to
pipe the routing and dispatch middleware in order for it to continue to
work.</strong></p>
<p>We'll look at configuration for the <code>ApplicationFactory</code> later, as it changes as
well.</p>
<h3>No more route result observers</h3>
<p>Another consequence of splitting the routing middleware in two was a pleasant discovery:
there was no longer any need for the route result observer system!</p>
<p>The route result observer system was added in RC3 to allow the application to notify
interested observers of the results of routing, as there was no other way to trigger
functionality between the act of routing and when the matched middleware was dispatched
(if any was actually matched!).</p>
<p>Several developers complained that they couldn't return a response from these
observers when they detected an error condition, nor could they introspect the request
in such situations.</p>
<p>With the routing middleware split, there's an answer to those questions, and the
observer system is no longer needed; just place middleware between the routing
and dispatch middleware, and have it act on the <code>RouteResult</code> instance (which the
routing middleware injects as a request attribute). In fact, we've already demonstrated
this above!</p>
<p>For RC6, we removed the <code>RouteResultSubjectInterface</code> implementation from the
<code>Application</code> instance, while keeping the original methods defined in that interface;
these methods now trigger deprecation notices. If you were using observers
previously, and keep your existing RC5 configuration, we also inject a special
&quot;route result observer middleware&quot; between the routing and dispatch middleware that
will notify the observers. The deprecation messages will prompt you to update
your code, and provide a link to the migration guide to help you.</p>
<p>A new <em>minor</em> version of zend-expressive-router was released, v1.2.0, marking each of
the <code>RouteResultSubjectInterface</code> and <code>RouteResultObserverInterface</code> as deprecated.</p>
<p>A new <em>major</em> version of zend-expressive-helpers was released, v2.0.0, that removes
the <code>RouteResultObserverInterface</code> implementation from the <code>UrlHelper</code>, and updates
its related middleware to act between the routing and dispatch middleware.</p>
<h3>Simplified configuration</h3>
<p>We've alluded to configuration changes several times; it's now time to detail those.</p>
<p>One common confusion that arose was around the <code>pre_routing</code> and <code>post_routing</code> names.
Many assumed that <code>pre_routing</code> meant that the middleware listed only operated before
routing — and did not realize that such middleware could also post-process
responses. Similarly, many assumed that <code>post_routing</code> middleware was executed after
routed middleware, even when the routed middleware returned a response (it was only
executed if the routed middleware called <code>$next()</code> or if an error occurred).</p>
<p>We wanted to clarify how the middleware pipeline worked, and with the switch to split
the routing and dispatch middleware, and a desire to allow injecting middleware between
routing and dispatch, we had an opportunity to positiveily change the configuration to
make it more clear.</p>
<p><a href="http://www.zimuel.it">Enrico</a> suggested that instead of segregating into pre/post, we
have a single pipeline. This would require defining entries for the routing and
dispatch middleware as part of the pipeline, but you would then be able to see the
exact workflow.</p>
<p>One counter-argument, however, is when merging configuration, which is done by default
in the skeleton, and which is a recommended practice to keep configuration for related
functionality in discrete places. How would order be preserved?</p>
<p>We decided to introduce a <code>priority</code> key into our middleware configuration specifications.
This works with <code>SplPriorityQueue</code>: higher values are piped earlier and execute
earlier, while lower/negative values are piped later. This provides the ability to
define the pipeline across multiple files, merge it, and get a predictable order.</p>
<p>Additionally, we realized we could lever another existing feature: middleware
specifications used by the pipeline configuration allow you to specify <em>lists</em>
of middleware to execute, not just individual middleware. This means that you can
group middleware under the same priority, in the order you want it to execute. This
is a great technique for segregating configuration.</p>
<p>What we came up with ends up looking like this when you start out with the new
skeleton:</p>
<pre><code class="language-php">use Zend\Expressive\Container\ApplicationFactory;
use Zend\Expressive\Helper;

return [
    'dependencies' =&gt; [
        'factories' =&gt; [
            Helper\ServerUrlMiddleware::class =&gt; Helper\ServerUrlMiddlewareFactory::class,
            Helper\UrlHelperMiddleware::class =&gt; Helper\UrlHelperMiddlewareFactory::class,
        ],
    ],
    // This can be used to seed pre- and/or post-routing middleware
    'middleware_pipeline' =&gt; [
        // An array of middleware to register. Each item is of the following
        // specification:
        //
        // [
        //  Required:
        //     'middleware' =&gt; 'Name or array of names of middleware services and/or callables',
        //  Optional:
        //     'path'     =&gt; '/path/to/match', // string; literal path prefix to match
        //                                     // middleware will not execute
        //                                     // if path does not match!
        //     'error'    =&gt; true, // boolean; true for error middleware
        //     'priority' =&gt; 1, // int; higher values == register early;
        //                      // lower/negative == register last;
        //                      // default is 1, if none is provided.
        // ],
        //
        // While the ApplicationFactory ignores the keys associated with
        // specifications, they can be used to allow merging related values
        // defined in multiple configuration files/locations. This file defines
        // some conventional keys for middleware to execute early, routing
        // middleware, and error middleware.
        'always' =&gt; [
            'middleware' =&gt; [
                // Add more middleware here that you want to execute on
                // every request:
                // - bootstrapping
                // - pre-conditions
                // - modifications to outgoing responses
                Helper\ServerUrlMiddleware::class,
            ],
            'priority' =&gt; 10000,
        ],

        'routing' =&gt; [
            'middleware' =&gt; [
                ApplicationFactory::ROUTING_MIDDLEWARE,
                Helper\UrlHelperMiddleware::class,
                // Add more middleware here that needs to introspect the routing
                // results; this might include:
                // - route-based authentication
                // - route-based validation
                // - etc.
                ApplicationFactory::DISPATCH_MIDDLEWARE,
            ],
            'priority' =&gt; 1,
        ],

        'error' =&gt; [
            'middleware' =&gt; [
                // Add error middleware here.
            ],
            'priority' =&gt; -10000,
        ],
    ],
];
</code></pre>
<p>For existing users:</p>
<ul>
<li>Existing RC5 and earlier configuration is still honored, but will emit
deprecation notices, prompting you to update; these notices include
links to the migration guide.</li>
<li>To update, you'll need to:
<ul>
<li>update your zend-expressive-helpers version constraint to <code>^2.0</code>.</li>
<li>update your configuration, using the above as a guide.</li>
</ul>
</li>
</ul>
<p>We're excited about this change, as we feel it simplifies the configuration, adds
flexibility, and provides predictability in the system. While it is a large change
for a release candidate, we also felt it was important enough to warrant introducing
before the stable release.</p>
<h2>Full migration details</h2>
<p>The above narrative is use-case-centered. We have, however, published a <a href="http://zend-expressive.readthedocs.org/en/latest/migration/rc-to-v1/">full migration
guide</a> as part of
the release to give exact details on changes you will need to make.</p>
<h2>Future</h2>
<p>At this point, we feel that the code has stabilized significantly, and that the improvements
in these latest releases have provided important simplicity and flexibility to make
the system robust. We'll be waiting a week or two to see how you, our users, respond,
and hopefully be able to tag a stable release shortly!</p>
<p>If you are testing Expressive — whether for the first time, or updating an
existing application — please help us prepare it for general availability!</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Zend Framework 3 Update for 2016-01-14</title>
      <pubDate>Thu, 14 Jan 2016 23:00:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/2016-01-14-zf3-biweekly-update.html</link>
      <guid>http://framework.zend.com/blog/2016-01-14-zf3-biweekly-update.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>This is an installment in an ongoing series of bi-weekly posts on ZF3 development status.</p>
<p>Following a roughly two week hiatus at the end of the year, we've picked up
where we left off and continued the momentum towards the ZF3 initiatives.</p>
<p>The highlights:</p>
<ul>
<li>48 pull requests merged</li>
<li>11 releases of components, <strong>including 3 3.0 releases in 3 days!</strong>
</li>
<li>6 components updated to zend-servicemanager/zend-eventmanager v3 changes</li>
<li>Major updates for an upcoming Expressive RC6</li>
</ul><h2>3.0 Releases!</h2>
<p>A number of components reached stability in the past few weeks, and this week we
did a spree of three 3.0 releases in three days:</p>
<ul>
<li>
<a href="https://github.com/zendframework/zend-servicemanager/releases/tag/release-3.0.0">zend-servicemanager 3.0.0</a>
is the first 3.0 release of any ZF components, and features a complete rewrite
of the internals to provide up to 4x faster performance! We have been careful
to retain as much backwards compatibility as possible, and the v2.7.0 release
provides features that make migration between versions seamless for users.
<a href="http://zend-servicemanager.rtfd.org/en/latest/book/migration/">A migration guide is available</a>.</li>
<li>
<a href="https://github.com/zendframework/zend-eventmanager/releases/tag/release-3.0.0">zend-eventmanager 3.0.0</a>
is our second 3.0 release of a ZF component, and features a complete rewrite
of the internals of the EventManager implementation to provide up to 4X faster
performance. By following the <a href="http://zend-eventmanager.readthedocs.org/en/latest/migration/intro/">migration guide</a>,
you can update your v2 code to work on both v2 and v3.</li>
<li>
<a href="https://github.com/zendframework/zend-code/releases/tag/release-3.0.0">zend-code 3.0.0</a>
is our third 3.0 release of a ZF component, and features updates to allow
usage with PHP 5.5, 5.6, and PHP 7, and, specifically, scalar typehints,
return typehints, generators, and variadics.</li>
</ul>
<p>Be aware that you cannot make use of these new 3.0 versions within existing ZF2
applications quite yet; we are still in the process of updating components to
work with these releases. However, they can be used standalone, or within projects
based on Expressive!</p>
<h2>Pull request activity</h2>
<p>Since the last update, we've
<a href="https://github.com/issues?utf8=%E2%9C%93&amp;q=is:pr+org:zendframework+is:merged+closed:%3E=2015-12-22">merged 48 pull requests</a>
(link requires a GitHub account). Activity has been particularly high on
Expressive, zend-servicemanager, and components refactoring to the latest
zend-servicemanager and zend-eventmanager updates.</p>
<h2>Component Releases</h2>
<p>The following is a list of component releases (other than the 3.0 releases
listed above) since the last update.  While not all releases are related to ZF3
specifically, this list is intended to detail activity within the organization.</p>
<ul>
<li>
<a href="https://github.com/zendframework/zend-expressive-helpers/releases/tag/1.4.0">zend-expressive-helpers 1.4.0</a>
adds base path support to the <code>UrlHelper</code>.</li>
<li>
<a href="https://github.com/zendframework/zend-diactoros/releases/tag/1.3.3">Diactoros 1.3.3</a>
fixes an issue in <code>ServerRequestFactory::marshalHeaders()</code> whereby we were
explicitly omitting cookie headers; they are now aggregated.</li>
<li>
<a href="https://github.com/zendframework/zend-expressive-zendrouter/releases/tag/1.0.1">zend-expressive-zendrouter 1.0.1</a>
fixes an issue whereby appending a trailing slash when requesting a route that
did not define one resulted in a 405 instead of a 404 error.</li>
<li>
<a href="https://github.com/zendframework/zend-servicemanager/releases/tag/release-2.7.0">zend-servicemanager 2.7.0</a>,
<a href="https://github.com/zendframework/zend-servicemanager/releases/tag/release-2.7.1">zend-servicemanager 2.7.1</a>,
<a href="https://github.com/zendframework/zend-servicemanager/releases/tag/release-2.7.2">zend-servicemanager 2.7.2</a>, and
<a href="https://github.com/zendframework/zend-servicemanager/releases/tag/release-2.7.3">zend-servicemanager 2.7.3</a>
are forwards-compatibility releases, providing several features that allow
users to update their code to work with both the v2 and v3 series of the
service manager.</li>
<li>
<a href="https://github.com/zendframework/zend-eventmanager/releases/tag/release-2.6.2">zend-eventmanager 2.6.2</a>
introduces a trait, <code>EventListenerIntrospectionTrait</code>, for use with PHPUnit
test cases. It provides a consistent API for introspecting what events and
listeners are attached to an EventManager instance, and provides a custom
assertion for validating that a given listener is registered at a given
priority on a given event. This trait can be used to write assertions for
validating listener attachment in a way that will be forwards compatible with
version 3.</li>
</ul>
<h2>ZF3 Refactors</h2>
<p>Since the last update, the following components have been refactored to work
with the planned v3 versions of zend-servicemanager and zend-eventmanager.
Please note that no new versions have been released at this time; all work
remains either in pull requests or in the develop branches of each component.</p>
<ul>
<li>
<a href="https://github.com/zendframework/zend-mail/pull/47">zend-mail</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-validator/pull/49">zend-validator</a>
</li>
</ul>
<p>Additionally, we have created pull requests for several components to work with
the forwards compatibility releases of zend-servicemanager and
zend-eventmanager. These will allow us to release 2.x versions of these
components that can be used by code consuming the v3 versions of those two
components.</p>
<ul>
<li>
<a href="https://github.com/zendframework/zend-barcode/pull/16">zend-barcode</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-cache/pull/64">zend-cache</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-log/pull/17">zend-log</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-i18n/pull/22">zend-i18n</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-validator/pull/51">zend-validator</a>
</li>
</ul>
<h2>Expressive</h2>
<p>We've had quite a number of people testing Expressive heavily, and pointing out
both its strengths and weaknesses. This has resulted in a ton of additional tests,
bringing coverage to 100% in some cases, as well as copious amounts of new
documentation.</p>
<p>After several issue threads and IRC conversations, we've decided to release an
additional RC, RC6, to accomplish the following:</p>
<ul>
<li>Simplification of the middleware pipeline; we will be doing away with the
<code>pre_routing</code> and <code>post_routing</code> keys, and allowing a single pipeline
representing the entire application lifecycle.</li>
<li>Splitting of the routing middleware into separate routing and dispatch
middleware. This allows developers to tie into the application lifecycle using
middleware between routing and dispatch, facilitating such things as route-based
authentication, validation, etc.</li>
<li>Removal of auto-registration of the routing middleware; this is done to allow
substituting alternative routing middleware and/or dispatch middleware.</li>
<li>Deprecation of the route result observer system. The same functionality
can now be accomplished with middleware that acts between routing and dispatch.</li>
</ul>
<p>We've attempted to preserve backwards compatibility for existing applications, but
have marked deprecated features for removal with 1.1. A migration guide will assist
our early adopters in updating their applications.</p>
<h2>Until next time</h2>
<p>If you want to help:</p>
<ul>
<li>There are new <a href="https://github.com/zendframework/maintainers/wiki/ZF3-ServiceManager-component-refactors,-phase-2">component refactors to complete or review</a>.</li>
<li>Test Expressive, and help us reach a stable release of this new feature!</li>
</ul>
<p>Many thanks to all the contributors who have provided feedback, patches, reviews,
or releases! In particular, I want to call out:</p>
<ul>
<li>
<a href="https://github.com/Ocramius">Marco Pivetta</a> for his work on updating
zend-code to work with PHP 7 (and PHP 5.5, and PHP 5.6) features.</li>
<li>
<a href="https://github.com/bakura10">Michaël Gallego</a> for his work on the
zend-servicemanager and zend-eventmanager refactors, and his relentless pursuit
of performance increases.</li>
<li>
<a href="https://github.com/ezimuel">Enrico Zimuel</a> for his work on the
zend-eventmanager refactor, and taking on the drudgery of updating components
to the new zend-eventmanager and zend-servicemanager changes.</li>
<li>
<a href="https://github.com/RalfEggert">Ralf Eggert</a> and <a href="https://github.com/danizord">Daniel Gimenes</a>
for the constant stream of questions and suggestions for Expressive; their
feedback is changing it for the better!</li>
</ul>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Zend Framework 3 Update for 2015-12-22</title>
      <pubDate>Tue, 22 Dec 2015 23:10:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/2015-12-22-zf3-biweekly-update.html</link>
      <guid>http://framework.zend.com/blog/2015-12-22-zf3-biweekly-update.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>This is the second in an ongoing series of bi-weekly posts on ZF3 development status.</p>
<p>The highlights:</p>
<ul>
<li>45 pull requests merged</li>
<li>14 releases of components</li>
<li>5 components updated to zend-servicemanager/zend-eventmanager v3 changes</li>
<li>1 release candidates of expressive</li>
</ul><h2>Pull request activity</h2>
<p>Activity has continued to be quite high the past couple weeks, though slower
than the previous update, with <a href="https://github.com/issues?utf8=%E2%9C%93&amp;q=is:pr+org:zendframework+is:merged+closed:%3E=2015-12-10">45 pull requests merged</a>
(link requires a GitHub account). While Expressive still dominates the list, many
of these were related to ZF3 refactors and ongoing component maintenance.</p>
<h2>Component Releases</h2>
<p>The following is a list of component releases since the last update.
While not all releases are related to ZF3 specifically, this list is intended
to detail activity within the organization. It omits the Expressive release
candidates, as well as new components, which will be listed later in this post.</p>
<ul>
<li>
<a href="https://github.com/zendframework/zend-expressive-fastroute/releases/tag/1.0.1">zend-expressive-fastroute 1.0.1</a>
released 2015-12-14; fixes an issue with the returned <code>RouteResult</code>, ensuring
it contains the name, not the path, of the route matched.</li>
<li>
<a href="https://github.com/zendframework/zend-diactoros/releases/tag/1.2.1">zend-diactoros 1.2.1</a>
was a bugfix release that fixed:
<ul>
<li>issues with how <code>withHeader()</code> handled replacing existing headers that used
a different casing strategy.</li>
<li>the <code>$statusCode</code> argument of the <code>Response</code> to never allow <code>null</code> values.</li>
<li>constructor header validation on all message types to:
<ul>
<li>allow numeric values (e.g., Content-Length)</li>
<li>raise an exception on invalid header names (non-empty strings or non-string values)</li>
<li>raise an exception on invalid individual header values (non strings/non-numerics)</li>
</ul>
</li>
</ul>
</li>
<li>
<a href="https://github.com/zendframework/zend-diactoros/releases/tag/1.3.0">zend-diactoros 1.3.0</a>
was a feature release adding:
<ul>
<li>
<code>SapiEmitterTrait</code>, which replaces a number of methods in the <code>SapiEmitter</code>
to provide a re-useable base for emitters; <code>SapiEmitter</code> was updated to use
the trait instead of to directly define the methods.</li>
<li>
<code>SapiStreamEmitter</code> provides functionality for iteratively emitting
stream-based responses, and includes support for Content-Range headers.</li>
</ul>
</li>
<li>
<a href="https://github.com/zendframework/zend-diactoros/releases/tag/1.3.1">zend-diactoros 1.3.1</a>
was a bugfix release that fixed:
<ul>
<li>an issue in the response serializer, whereby the discovered status code
wasn't being cast to an integer.</li>
<li>an issue in the various concrete, text-based response types whereby they
were not rewinding the message body stream after creation, causing later
calls to <code>getContents()</code> to return an empty string (as it was starting from
the end of the stream). These now rewind the stream during initialization.</li>
</ul>
</li>
<li>
<a href="https://github.com/zendframework/zend-diactoros/releases/tag/1.3.2">zend-diactoros 1.3.2</a>
fixes an issue in the <code>ServerRequestFactory</code> whereby we were omitting parsing
for and injection of the HTTP protocol version.</li>
<li>
<a href="https://github.com/zendframework/zend-psr7bridge/releases/tag/0.2.1">zend-psr7bridge 0.2.1</a>
adds support for injecting generated PSR-7 instances with the cookies present
in the zend-http request instance.</li>
<li>
<a href="https://github.com/zendframework/zend-math/releases/tag/2.5.2">zend-math 2.5.2</a> fixes
base conversions for base36 and below.</li>
<li>
<a href="https://github.com/zendframework/zend-server/releases/tag/release-2.6.0">zend-server 2.6.0</a>
adds support for unwinding <code>{@inheritdoc}</code> annotations, and fixes a misleading
exception in <code>reflectFunction</code>.</li>
<li>
<a href="https://github.com/zfcampus/zf-development-mode/releases/tag/release-2.1.2">zf-development-mode 2.1.2</a>
fixes the factory to pull and set the configuration caching rules under the
correct configuration key.</li>
<li>
<a href="https://github.com/zendframework/zend-expressive-helpers/releases/tag/1.2.1">zend-expressive-helpers 1.2.1</a>
adds the protected method <code>getRouteResult()</code>, to allow extensions access to
the route result instance.</li>
<li>
<a href="https://github.com/zendframework/zend-expressive-helpers/releases/tag/1.3.0">zend-expressive-helpers 1.3.0</a>
adds a new general-purpose <code>BodyParamsMiddleware</code>, for parsing the request
body and returning a new instance populated with the parsed body parameters.
The solution uses a strategy pattern, allowing developers to provide
additional strategies per their application needs.</li>
</ul>
<h2>ZF3 Refactors</h2>
<p>Since the last update, the following components have been refactored to work
with the planned v3 versions of zend-servicemanager and zend-eventmanager.
Please note that no new versions have been released at this time; all work
remains either in pull requests or in the develop branches of each component.</p>
<ul>
<li>
<a href="https://github.com/zendframework/zend-session/pull/8">zend-session</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-log/pull/14">zend-log</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-tag/pull/3">zend-tag</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-text/pull/2">zend-text</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-filter/pull/15">zend-filter</a>
</li>
</ul>
<h2>Component Installer</h2>
<p>One idea floated for helping the goal of reducing dependencies in both zend-mvc
and the zf2 meta-repository is to have components also act as modules. This would
allow them to provide configuration, factories, and event listeners to the MVC
runtime in a completely opt-in fashion. The one problem with the approach,
however, is automating registration with the application.</p>
<p>To this end, we created a <a href="https://zendframework.github.io/zend-component-installer">component installer</a>.
This package provides composer post un/install scripts that look for metadata
in the package; if the metadata is present, the script adds an entry to the
application's module list. Components are added to the top of the list, and
modules to the bottom.</p>
<p>The new package can be installed as a global composer utility, or downloaded
as a self-updateable PHAR file. We will begin updating components to expose
themselves to this tooling soon, and update the application skeleton with the
scripts as generated by the package, to automate the facilities for greenfield
projects.</p>
<h2>Expressive Release Candidate</h2>
<p>Today, we issued a new release candidate of Expressive, RC5.
Be sure to read the <a href="/blog/expressive-1-0-0rc5-released.html">announcement</a> to
find out what changes have been made! The bulk of the work has gone into expanding
the documentation to cover common use case scenarios.</p>
<h2>Until next time</h2>
<p>The winter holidays are upon our team at this time, and we do not expect much progress
in the coming two weeks. Look for updates in January!</p>
<p>Until then, if you want to help:</p>
<ul>
<li>There are still <a href="https://github.com/zendframework/maintainers/wiki/ZF3-code-refactoring">component refactors to complete or review</a>.</li>
<li>Test Expressive, and help us reach a stable release of this new feature!</li>
</ul>
<p>Many thanks to all the contributors who have provided feedback, patches, reviews,
or releases!</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
  </channel>
</rss>
