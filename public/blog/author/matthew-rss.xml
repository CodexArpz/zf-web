<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/">
  <channel>
    <title>Author: Matthew Weier O'Phinney - ZF Blog</title>
    <description>Author: Matthew Weier O'Phinney - ZF Blog</description>
    <pubDate>Wed, 04 Jun 2014 18:00:00 +0000</pubDate>
    <generator>Zend_Feed_Writer 2 (http://framework.zend.com)</generator>
    <link>http://framework.zend.com/blog/author/matthew.html</link>
    <atom:link rel="self" type="application/rss+xml" href="http://framework.zend.com/blog/author/matthew-rss.xml"/>
    <item>
      <title>Apigility 1.0.2 Released!</title>
      <pubDate>Wed, 04 Jun 2014 18:00:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/apigility-1-0-2-released.html</link>
      <guid>http://framework.zend.com/blog/apigility-1-0-2-released.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>We are pleased to announce the immediate availability of Apigility 1.0.2!</p>

<ul>
    <li><a href="https://apigility.org/download">https://apigility.org/download</a></li>
</ul>

<p>This is our second maintenance release of Apigility, fixing a number of issues, and providing significant improvements for file upload capabilities.</p><h2>Upload Support</h2>

<p>Uploads were possible before this release, but were difficult to properly enable. Additionally, PATCH and PUT requests required manually handling the file uploads, as PHP does not natively support file uploads for those request methods; the Zend Framework 2 InputFilter component, because it utilizes PHP's native support for validating that an upload completed and for moving an upload file to a new location, also could not deal with these methods.</p>

<p>This release makes the following changes in order to facilitate file uploads via your Apigility API:</p>

<ul>
    <li>Content validation was altered to merge file upload data, when present, with  the submitted API fields. </li>
    <li>The Admin UI now allows you to mark a field as representing a file upload;  this ensures that content validation will work properly, as content validation  differs for file uploads. </li>
    <li>The content negotiation module now provides emulation for PHP's file upload  support when receiving PATCH and PUT requests, ensuring that the files are  uploaded in the same manner, cleaned up post-request, and passed to validation  properly. You should notice no difference between POST, PUT, or PATCH requests  when performing file uploads, whether a single or multiple files are provided.</li>
</ul>

<p>File uploads are only done using the <code>multipart/form-data</code> media type. You will need to add that media type to the content negotiation whitelist if you plan to perform file uploads.</p>

<p>If you have further questions, you can <a href="https://apigility.org/documentation//recipes/upload-files-to-api">consult the documentation</a>.</p>

<h2>Changelog</h2>

<p>While upload support is the major feature of this release, we fixed many other issues.</p>

<h3>General</h3>

<ul>
    <li><p>All repositories have updated <code>composer.json</code> files that properly define the  two branch aliases for the <code>master</code> and <code>develop</code> branches.</p></li>
    <li><p>All repositories have updated <code>README.md</code> files that provide a &quot;Requirements&quot;  section linking to the <code>composer.json</code> file.</p></li>
</ul>

<h3>zf-apigility-admin</h3>

<ul>
    <li><p><a href="https://github.com/zfcampus/zf-apigility-admin/pull/181">Fixes for the &quot;Encrypt&quot; and &quot;Compress&quot; filter adapters</a>,  ensuring that these filters can be properly created and configured.</p></li>
    <li><p><a href="https://github.com/zfcampus/zf-apigility-admin/pull/182">Ability to specify file upload fields</a>.  A field can now be marked as representing a file upload, ensuring it can then  be validated correctly.</p></li>
    <li><p><a href="https://github.com/zfcampus/zf-apigility-admin/pull/171">Fix for unclosed link in authentication screen</a>,  which was preventing edits and saves of authentication details.</p></li>
    <li><p><a href="https://github.com/zfcampus/zf-apigility-admin/pull/184">Remove charset option for Postgres adapters</a>,  as that adapter does not support setting the character set.</p></li>
    <li><p><a href="https://github.com/zfcampus/zf-apigility-admin/pull/185">Added DSN to DB adapter input filter</a>,  so that edits to an existing DB adapter will save when the DSN is provided.</p></li>
    <li><p><a href="https://github.com/zfcampus/zf-apigility-admin/pull/178">Fixes to the DB-Connected service model</a>,  to ensure that update data is saved properly.</p></li>
</ul>

<h3>zf-apigility-documentation</h3>

<ul>
    <li><a href="https://github.com/zfcampus/zf-apigility-documentation/pull/9">Fixes HTTP status code for POST operations</a>,  to now display <code>201</code> as a potential status.</li>
</ul>

<h3>zf-apigility-skeleton</h3>

<ul>
    <li><a href="https://github.com/zfcampus/zf-apigility-skeleton/pull/63">Adds composer.phar to the skeleton</a>,  since it should have always been there!</li>
</ul>

<h3>zf-content-negotiation</h3>

<ul>
    <li><a href="https://github.com/zfcampus/zf-content-negotiation/pull/18">Implements file uploads</a>  <a href="https://github.com/zfcampus/zf-content-negotiation/pull/20">via request body streaming</a>  for PUT and PATCH requests.</li>
</ul>

<h3>zf-content-validation</h3>

<ul>
    <li><a href="https://github.com/zfcampus/zf-content-validation/pull/14">Ensures file upload data is passed to validation</a>,  which allows validating file uploads.</li>
</ul>

<h3>zf-deploy</h3>

<ul>
    <li><a href="https://github.com/zfcampus/zf-deploy/pull/15">Ensures --gitignore flag is passed when copying source tree</a>.</li>
</ul>

<h3>zf-hal</h3>

<ul>
    <li><a href="https://github.com/zfcampus/zf-hal/pull/35">Always store the original entity within ZF\Hal\Entity</a>,  fixing an issue where REST controllers cast entities to arrays prior to  creating the <code>ZF\Hal\Entity</code> instance, and thus causing listeners on  <code>renderEntity</code> et. al. to receive data that could never be matched.</li>
</ul>

<h3>zf-oauth2</h3>

<ul>
    <li><a href="https://github.com/zfcampus/zf-oauth2/pull/43">Pass all OAuth2 adapter options to oauth2-server-php</a>,  enabling the ability to turn on refresh token re-issue, among other things.</li>
</ul>

<h2>Roadmap</h2>

<p>Many thanks for all the great issue reports and discussions on the <a href="http://bit.ly/apigility-users">mailing list</a> and the various issue trackers!</p>

<p>We will do additional maintenance releases on an as-needed basis. The next feature release, 1.1, is in development, and includes:</p>

<ul>
    <li>Doctrine-Connected REST services </li>
    <li>Database Autodiscovery for REST services (think of this as DB-Connected that  finds all your tables and proposes field configuration for you!) </li>
    <li>Mongo-Connected REST services </li>
    <li>HTTP Caching</li>
</ul>

<p>We would appreciate any feedback you can provide, either in the mailing lists, in issues, or via comments on associated pull requests.</p>

<p>Stay tuned!</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Apigility 1.0.0 Released!</title>
      <pubDate>Wed, 07 May 2014 15:00:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/apigility-1-0-0-released.html</link>
      <guid>http://framework.zend.com/blog/apigility-1-0-0-released.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<img src="/images/ag-hero.png" style="display: block; margin-left: auto; margin-right: auto; max-width: 100%" alt="Apigility">

<p>We're happy to announce the immediate availability of Apigility 1.0.0!</p>

<ul>
    <li><a href="http://apigility.org/download">http://apigility.org/download</a></li>
</ul>

<p>Apigility is the world's easiest way to create robust, well-formed, documented, and secure APIs.</p>

<p>We've noticed that web development has fundamentally shifted over the past few years. Server side applications that return heavy loads of HTML markup are waning; instead APIs are driving the web. APIs are being used to enable inter-division data exchange. APIs are being used as the building blocks for web applications -- allowing user interface experts the flexibility to change the look and feel of a website with no intervention from the server-side application developers. APIs are driving and empowering the mobile web, allowing creation of both native mobile applications and mobile web applications.</p>

<p>Apigility exists to allow <em>you</em> to expose <em>your</em> business logic as an API.</p><h2>Opinionated</h2>

<p>APIs are not just about tossing around some JSON or XML. They require a ton of architectural decisions every step of the way as you implement the API:</p>

<ul>
    <li>How will you handle HTTP method negotiation?<br /></li>
    <li>How will you handle content negotiation?<br /></li>
    <li>How will you handle authentication?<br /></li>
    <li>How will you handle authorization?<br /></li>
    <li>How will you handle input validation?<br /></li>
    <li>What representation format will you use?<br /></li>
    <li>How will you represent errors?<br /></li>
    <li>How will you document your API?</li>
</ul>

<p>Most of these questions have no single, correct answer. Many standards, proposals, and drafts exist for all aspects of APIs. As a developer, you have to wade through them and choose which you will use, and how you will put them together.</p>

<p>In short, when developing an API, you often spend an equal or greater amount of time developing the architecture for the API as you would writing the code you want to expose in the first place.</p>

<p>Apigility is opinionated <em>for you</em>, and provides a flexible and robust engine that answers these questions:</p>

<ul>
    <li><a href="http://tools.ietf.org/html/draft-kelly-json-hal-06">application/hal+json</a> is<br /> used for the representation format (but you can add your own representations<br /> if you really want).<br /></li>
    <li><a href="http://tools.ietf.org/html/draft-nottingham-http-problem-06">application/problem+json</a><br /> is used for representing errors.<br /></li>
    <li>HTTP method negotiation is handled early, returning appropriate response<br /> status codes and headers when invalid methods are detected. Support for<br /> <code>OPTIONS</code> requests is built in.<br /></li>
    <li>Content negotiation is handled early, returning appropriate response<br /> status codes and headers when we cannot return an appropriate representation,<br /> or cannot understand the data provided to the application.<br /></li>
    <li>Authentication is handled early, returning appropriate response<br /> status codes and headers when invalid credentials are detected. We provide<br /> HTTP Basic, HTTP Digest, and OAuth2 support out-of-the-box, but provide a<br /> flexible, event-driven system for implementing or integrating your own<br /> authentication systems.<br /></li>
    <li>Authorization is handled early, returning appropriate response<br /> status codes and headers when access is not allowed. We provide an ACL-based<br /> system that can be easily extended to provide user-specific permissions as<br /> well as an event-driven system for implementing or integrating your own<br /> authorization systems if needed.<br /></li>
    <li>Input validation is handled early, returning appropriate response status codes<br /> and error messages when invalid data is detected.<br /></li>
    <li>Documentation is provided out of the box. We provide HTML, JSON, and<br /> <a href="https://helloreverb.com/developers/swagger">Swagger</a> representations; we<br /> anticipate adding more in the future. Documentation is generated automatically<br /> from your API configuration, and you are able to add descriptions and more<br /> detail as desired.</li>
</ul>

<p>We make decisions so you don't have to. However, you'll note that we've created flexibility so that if <em>you</em> have an opinion, you can integrate it!</p>

<h2>Interface with your API</h2>

<p>Apigility is not just an engine. Apigility also provides a web-based Admin UI to allow you to quickly create and modify your API and services, set up authentication, create authorization rules, set up validations for incoming data, and write document.</p>

<img src="/images/apigility-1.0.0-dashboard.png" style="display: block; margin-left: auto; margin-right: auto; max-width: 100%" alt="Apigility Dashboard">

<p>The Admin UI is built using <a href="https://angularjs.org/">AngularJS</a>, and is backed by... an API! (We're taking the &quot;API First&quot; mantra very seriously!)</p>

<h2>Get Started in Seconds</h2>

<p>You can install Apigility in seconds; execute the following command in your shell:</p>

<pre class="console"><code>$ curl -sS http://apigility.org/install | php</code></pre>

<p>or, if you don't have <a href="http://curl.haxx.se/">curl</a> installed, use the PHP interpreter itself:</p>

<pre><code>$ php -r &quot;readfile(&#39;http://apigility.org/install&#39;);&quot; | php</code></pre>

<h2>Deploy Anywhere</h2>

<p>Apigility is built on top of Zend Framework 2, and has tools to ensure that the Admin UI is only present in development mode. As such, you can deploy Apigility anywhere you normally deploy PHP applications: a local server, your web host provider, or the cloud.</p>

<p>We provide a tool, <a href="https://github.com/zfcampus/zf-deploy">ZFDeploy</a>, to aid in creating deployment packages, including Zend Server ZPK files.</p>

<h2>Modular</h2>

<p>Apigility consists of more than a dozen Zend Framework 2 modules, each doing one specific task in the workflow. As such, you can mix and match these modules in your own ZF2 applications, or even <a href="http://apigility.org/documentation/recipes/apigility-in-an-existing-zf2-application">add Apigility to an existing application</a>.</p>

<h2>The Future</h2>

<p>Reaching 1.0 is a huge milestone -- but it's not the end of the road!</p>

<p>We already have a number of great features waiting in the wings for a 1.1 release: Doctrine-Connected services, Database Autodiscovery, Mongo-Connected services, and HTTP Caching.</p>

<p>What will <em>you</em> build today?</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Apigility 1.0.0beta3 Released!</title>
      <pubDate>Wed, 30 Apr 2014 20:30:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/apigility-1-0-0beta3-released.html</link>
      <guid>http://framework.zend.com/blog/apigility-1-0-0beta3-released.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>We are pleased to announce the immediate availability of Apigility 1.0.0beta3!</p>

<ul>
    <li><a href="http://apigility.org/download">http://apigility.org/download</a></li>
</ul>

<p>This is our third -- and likely last! -- beta release of Apigility! The features in this release are mainly around stabilization.</p><h2>Deployment and Console</h2>

<p>Most of the work we've performed since beta2 was on <a href="https://github.com/zfcampus/zf-deploy">zf-deploy</a>, our packaging/deployment tool. We made the following changes:</p>

<ul>
    <li>First, the tool can now be used both within an application, as well as a  standalone <a href="http://php.net/phar">phar</a> file. When used as a standalone phar  file, you can now self update it with the <code>self-update</code> command; this will  check <a href="https://packages.zendframework.com/">https://packages.zendframework.com/</a> for any new versions, and, if found,  do an &quot;in-place&quot; update of the tool. (Note: the library we use that provides  this functionality often emits PHP fatal errors; in practice, however, we've  noticed that the process works even when such errors are reported.) </li>
    <li>Second, we were not happy with the argument handling we were using, nor with  the strong coupling of console argument parsing logic with the logic consuming  the arguments. We built a small microframework around <code>Zend\Console</code>'s  <code>RouteMatcher</code> subcomponent that provides more flexibility around argument  handling, and are now shipping this in the module  <a href="https://github.com/zfcampus/zf-console">zf-console</a>.</li>
</ul>

<p>In addition to these architectural changes, we also implemented two new features in the tool:</p>

<ul>
    <li>You can specify a directory with the &quot;local&quot; configuration you want to use in  the deployment package via the <code>--configs</code> argument. </li>
    <li>You can specify a directory containing the ZPK skeleton you wish to use when  creating a ZPK (Zend Server deployment package); this directory should contain  a <code>deployment.xml</code> and any scripts you will be using.</li>
</ul>

<p>With these changes, we feel that <code>zf-deploy</code> is ready for inclusion in a stable Apigility release!</p>

<h2>Documentation Updates</h2>

<p>We've received a number of documentation improvements since beta2, and added a few documents as well.</p>

<p>In particular:</p>

<ul>
    <li>An error was spotted in the &quot;HAL for RPC services&quot; recipe that made the code  unusable. </li>
    <li>We've documented how to use the Zend Server SDK to deploy ZPK packages. </li>
    <li>We've added a recipe for adding Apigility modules to an existing Zend  Framework 2 application. </li>
    <li>We've added documentation on the new <code>zf-console</code> module.</li>
</ul>

<h2>Beta3 Updates</h2>

<p>In addition to the deployment and console tooling, we made the following changes:</p>

<ul>
    <li>We updated the <code>SendResponse</code> listener in <code>zf-api-problem</code> to merge in any  headers set in the application response object before sending the API Problem  response. This ensures that any previously set headers are also set -- solving  several issues observed when using third-party modules for Cross Origin  Resource Sharing (CORS), as well as HTTP authentication. </li>
    <li>The storage adapters we ship with <code>zf-oauth</code> now both allow you to specify  configuration via a <code>storage_settings</code> key; this change allows you to specify  custom tables for both the PDO and Mongo adapters. </li>
    <li>We've updated the &quot;api.enable&quot; service to ensure it works with current  versions of Apigility (and no longer raises errors!). </li>
    <li>We no longer display a resource class in the &quot;Source Code&quot; tab of a service if  a corresponding class does not exist (e.g., DB-Connected resource classes are  virtual services). </li>
    <li>We've added the option to recursively delete the directory for a service to  the Admin API; the Admin UI now presents a checkbox with this option. </li>
    <li>We've added the option to delete an entire API. By default, this only removes  the API's module from application configuration; however, you have the option  to recursively delete the API module as well (once again presented in the  Admin UI via a checkbox). </li>
    <li>We now generate factories for RPC controllers and REST resource classes when  creating new services. This simplifies the story for dependency injection of  these classes.</li>
</ul>

<h2>Roadmap</h2>

<p>At this time, we feel Apigility has become very stable, and that we have addressed the most pressing usability issues. We anticipate issuing a stable release next week (week of 5 May 2014).</p>
<p>As noted in previous beta announcements, reaching stability is only the first step, however! Features such as &quot;Doctrine-Connected&quot;, &quot;Mongo-Connected&quot;, and &quot;DB-Autodiscovery&quot; REST services are already either implemented or will be soon, and we will be debuting these in a 1.1 version in the very near future.</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Apigility 1.0.0beta2 Released!</title>
      <pubDate>Wed, 16 Apr 2014 18:30:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/apigility-1-0-0beta2-released.html</link>
      <guid>http://framework.zend.com/blog/apigility-1-0-0beta2-released.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>We are pleased to announce the immediate availability of Apigility 1.0.0beta2!</p>

<ul>
    <li><a href="http://apigility.org/download">http://apigility.org/download</a></li>
</ul>

<p>This is our second beta release of Apigility, and introduces extensive 
documentation, Admin UI performance improvements, and deployment tools!</p><h2>Documentation</h2>

<p>The primary goal of the beta phase for the Zend Framework team is documenting the project. We've made enormous headway at this point, but we'll let <strong>you</strong> be the judge of that; <a href="http://apigility.org/documentation">visit the documentation yourself</a>!</p>

<p>Among topics covered:</p>

<ul>
    <li>A &quot;Getting Started&quot; guide, and a companion, &quot;REST Service Tutorial&quot;. </li>
    <li>An API Primer </li>
    <li>Chapters on Authentication/Authorization, Content Validation, and the  Documentation features. </li>
    <li>A module-by-module reference guide, detailing configuration options.</li>
</ul>

<h2>New Features</h2>

<p>While the beta cycle is primarily around stabilizing the API and Admin UI, we decided one new feature warranted inclusion in version 1: a packaging/deployment tool, <a href="https://github.com/zfcampus/zf-deploy">zf-deploy</a>.</p>

<p>This tool allows you to create packages from your Apigility -- or any ZF2 application -- for deployment. Formats supported include zip, tar, tgz, and zpk (the Zend Server deployment package format). We plan to integrate support for deploying zpk packages soon as well.</p>

<h2>Beta2 Updates</h2>

<p>Polishing, polishing, polishing was our mantra for beta2. This included incorporating user feedback, but also scrutinizing the UI and code for consistency issues.</p>

<h3>UI Updates</h3>

<p>Following beta1, we had a number of complaints about UI responsiveness, particularly around the &quot;Fields&quot; screen. We did some analysis of the UI, and a lot of work around dynamically loading and unloading DOM in the admin based on what should be visible. As a result, we were able to significantly improve responsiveness. There may be more work to do, but early reports indicate that the changes make the Admin UI usable in situations that previously crashed the browser.</p>

<p>In addition to the performance improvements, we made the following updates:</p>

<ul>
    <li><p>On the &quot;Authorizations&quot; screen for each API, if no authentication is currently  configured, we display a message to this effect, and link to the  authentication screen. Unfortunately, in beta1, that link was invalid; we've  fixed this.</p></li>
    <li><p>The &quot;Fields&quot; tab received a slight overhaul. We noticed that items with  toggles displayed &quot;Yes/No&quot; terminology, but &quot;On/Off&quot; for the actual form  input; these now use &quot;Yes/No&quot; verbiage consistently. The &quot;Help&quot; screen could  not be dismissed with the <code>&lt;Esc&gt;</code> key; it now can. Previously, when hitting  <code>&lt;Enter&gt;</code> from the &quot;Create New Field&quot; text input, it would raise the &quot;Help&quot;  screen; it now properly creates the new field. The &quot;Description&quot; field was  moved to the first option displayed for each field, to promote documentation  of fields. We also added a &quot;Validation Failure Message&quot; field to allow  specifying a unified error message on failed validation (vs. one or more per  validator); we also ensured that &quot;blanking&quot; out the data in this field will  remove any such message previously set. Finally, filters are now listed before  validators, to signal the order in which validation operations occur  (filtering/normalization occurs before validation).</p></li>
    <li><p>The &quot;Source Code&quot; tab was not properly generating links for files; we've fixed  this in beta2.</p></li>
</ul>

<h3>Engine Updates</h3>

<p>A few improvements were made to the API engine itself:</p>

<ul>
    <li><p>The <code>UnauthorizedListener</code> registered by the <code>zf-apigility</code> module was not  registering headers set by the <code>zf-mvc-auth</code> module, meaning that the  <code>WWW-Authenticate</code> header was not propagating. This has been corrected.</p></li>
    <li><p>We modified <code>ZF\ContentNegotiation\JsonModel</code> to check for <code>json_encode()</code>  errors, and to raise an exception when one is detected. This prevents  situations where an empty response is returned on inability to serialize to  JSON.</p></li>
    <li><p><code>zf-apigility-documentation-swagger</code> was not returning a <code>Content-Type</code> header  value of <code>application/vnd.swagger+json</code>; it now does.</p></li>
    <li><p>We fixed the bcrypt cost in <code>zf-oauth2</code> to use the defaults from <code>Zend\Crypt</code>.</p></li>
    <li><p>We updated the OAuth2 database schema in <code>zf-oauth2</code> to match that of the  upstream <a href="https://github.com/bshaffer/oauth2-server-php">oauth2-server-php package</a>.</p></li>
    <li><p>We now inject the <code>ZF\Rest\ResourceEvent</code> with the current MVC request object;  you can retrieve it from within your resource class using  <code>$this-&gt;getEvent()-&gt;getRequest()</code>. This will give you access to HTTP request  headers, query string arguments, etc.</p></li>
    <li><p>We no longer allow multiple &quot;self&quot; relational links in <code>zf-hal</code>.</p></li>
    <li><p>When specifying route parameters for a <code>zf-hal</code> metadata map, you can now use  a PHP callable as the value; <code>zf-hal</code> will invoke that callable with the  object for which a link is being generated in order to get the value for that  route parameter. This is particularly useful for deterimining identifiers for  parent resources.</p></li>
    <li><p>We moved the <code>zf-apiglity-welcome</code> requirement to be a development-only  requirement.</p></li>
</ul>

<h2>Roadmap</h2>

<p>We're excited to get a stable release of Apigility as soon as we possibly can. We feel that both the engine and Admin UI have stabilized significantly, and are targetting a stable release by the end of this month. <strong>During that time, we will be working primarily on additional documentation and critical bugfixes.</strong></p>

<p>As noted in the beta1 announcement, reaching stability is only the first step, however! We already have contributors making significant headway on features such as &quot;Doctrine-Connected&quot;, &quot;Mongo-Connected&quot;, and &quot;DB-Autodiscovery&quot; REST services, and we will be debuting these in a 1.1 version not long after we reach version 1.0. Stay tuned!</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Zend Framework 2.2.7 and 2.3.1 Released!</title>
      <pubDate>Tue, 15 Apr 2014 20:05:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/zend-framework-2-2-7-and-2-3-1-released.html</link>
      <guid>http://framework.zend.com/blog/zend-framework-2-2-7-and-2-3-1-released.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
    The Zend Framework community is pleased to announce the immediate availability
    of:
</p>

<ul>
    <li>Zend Framework <strong>2.2.7</strong></li>
    <li>Zend Framework <strong>2.3.1</strong></li>
</ul>

<ul>
    <li>
        <a href="/downloads/latest#ZF2">http://framework.zend.com/downloads/latest#ZF2</a>
    </li>
</ul>

<p>
    While these are scheduled maintenance releases, they also contain important security
    fixes; we strongly encourage users to upgrade.
</p><h2>Security Fixes</h2>

<p>
    One new security advisory has been made, and has been patched in both 2.2.7
    and 2.3.1.
</p>

<p>
    <a href="/security/advisory/ZF2014-03">ZF2014-03</a>, which mitigates 
    potential cross site scripting (XSS) vectors in multiple view helpers due 
    to inappropriate HTML attribute escaping. Many view helpers were using the 
    <kbd>escapeHtml()</kbd> view helper in order to escape HTML attributes. 
    This release patches them to use the <kbd>escapeHtmlAttr()</kbd> view 
    helper in these situations.  If you use form or navigation view helpers, or 
    "HTML element" view helpers (such as <kbd>gravatar()</kbd>, 
    <kbd>htmlFlash()</kbd>, <kbd>htmlPage()</kbd>, or 
    <kbd>htmlQuicktime()</kbd>), we recommend upgrading immediately.
</ul>

<p>
    For more information, follow the links above; if you use any of the components
    affected, please upgrade as soon as possible.
</p>

<h2>2.3.1</h2>

<p>
    In addition to the security fixes listed above, <strong>2.3.1</strong> 
    contains more than 80 bugfixes. In particular, a number of improvements were
    made to the behavior of nested form fieldsets and collection input filters 
    (which often go hand-in-hand).
</p>

<p>
    For the complete list of changes, <a href="/changelog/2.3.1">read the changelog</a>.
</p>

<h2>Thank You!</h2>

<p>
    As always, I'd like to thank the many contributors who made these
    releases possible! In particular, I'd like to thank the team at 
    <a href="https://roave.com">Roave</a>, who both reported and patched the
    ZF2014-03 security issue.
</p>

<h2>Roadmap</h2>

<p>
    Zend Framework 2 maintenance releases will happen bi-monthly, with the
    next one scheduled for mid-June, 2014. Releases may occur more frequently
    if security issues are reported.
</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Zend Framework 1.12.6 Released!</title>
      <pubDate>Tue, 15 Apr 2014 20:00:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/zend-framework-1-12-6-released.html</link>
      <guid>http://framework.zend.com/blog/zend-framework-1-12-6-released.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
    The Zend Framework community is pleased to announce the immediate availability
    of Zend Framework 1.12.6!
</p>

<ul>
    <li>
        <a href="/downloads/latest#ZF1">http://framework.zend.com/downloads/latest#ZF1</a>
    </li>
</ul>

<p>
    This is a maintenance release, and corrects a backwards compatibility break 
    introduced in 1.12.4.
</p><h2>Locale Updates</h2>

<p>
    Zend Framework 1.12.4 included an update to the <a href="//cldr.unicode.org/">CLDR</a>
    version shipped, bumping to version 24. Our previous CLDR version, however, was version 
    2.0 or newer -- a version over 3 years old at this point.
</p>

<p>
    The problem that arose is that <a href="https://github.com/akrabat/zf1/blob/0282f49112688f124373bcf915abb6227d050454/library/Zend/Locale.php#L38-L67">more 
    than two dozen locales have been renamed</a> in the official CLDR sources since then,
    and Zend Framework 1.12.4 shipped exactly what CLDR ships. As a result, users
    of those old locales suddenly found their applications no longer working, due to
    newly invalid locales.
</p>

<p>
    We have created some functionality in Zend Framework 1.12.6 to alias old locales to
    the equivalent new locale string, thus restoring backwards compatibility with versions
    prior to 1.12.4.
</p>

<h2>Tag Updates</h2>

<p>
    Prior to 1.12.4, we used Subversion for maintaining Zend Framework 1, and thus for tagging
    releases. Tags in Subversion, however, are branches, not snapshots, and our 
    build process at the time took advantage of that fact, for better or for worse: we would
    build the documentation, and then replace the documentation sources with the built artifacts;
    we would inject the ZF1 Extras repository; and we would inject the Dojo repository. As a
    result, the tag was not a 1:1 snapshot of the trunk at the time, but rather the result
    of a build process.
</p>

<p>
    This meant that if a user was using <kbd>svn:externals</kbd> and pinned to a tag, they would
    have the equivalent of our distribution packages -- in other words, access to the ZF1 Extras,
    Dojo, and documentation.
</p>

<p>
    With the <a href="http://framework.zend.com/blog/2013-03-27-zf1-git-migration.html">migration 
    to Git a year ago</a>, our build processes needed to change. Git does true tags: a tag is
    a snapshot of the branch at the revision when it was tagged. The result is that tags no
    longer contain the ZF1 Extras or documentation. Several users contacted us indicating
    this broke apps in which they were using <kbd>svn:externals</kbd>.
</p>

<p>
    We have decided we will <em>not</em> be returning to the previous tagging 
    methodology, as we much prefer keeping a separation between tags and the build artifacts.
    For those users who want to retain the same semantic structure of having the ZF1 Extras
    imported via <kbd>svn:externals</kbd> within the ZF1 library, you can still do that,
    by adding an additional line to your <kbd>svn:externals</kbd> property:
</p>

<pre><code>
vendor/ZendFramework https://github.com/zendframework/zf1/tags/{VERSION}
vendor/ZendFramework/extras https://github.com/zendframework/zf1-extras/tags/{VERSION}
</code></pre>

<p>
    (Modify the above to reflect your own project structure, and to inject the appropriate version
    string.)
</p>

<h2>Thank You!</h2>

<p>
    As always, I'd like to thank the many contributors who made this
    release possible! In particular, Rob Allen identified the various locales that
    needed updating, and submitted the locale aliasing solution.
</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Apigility 1.0.0beta1 Released!</title>
      <pubDate>Sun, 23 Mar 2014 15:00:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/apigility-1-0-0beta1-released.html</link>
      <guid>http://framework.zend.com/blog/apigility-1-0-0beta1-released.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
    We are pleased to announce the immediate availability
    of Apigility 1.0.0beta1!
</p>

<ul>
    <li>
        <a href="http://apigility.org/download">http://apigility.org/download</a>
    </li>
</ul>

<p>
    This is our first beta release of Apigility, marking its initial API 
    stability, and providing a solid preview of what to expect for the first 
    stable release.
</p><h2>What is Apigility?</h2>

<p>
    Apigility is the world's easiest way to create and provide secure, well-formed
    APIs.
</p>

<p>
    Apigility provides tools for describing and documenting your APIs, both
    RESTful and RPC. You can indicate the URL that provides a service, what
    HTTP methods are allowed, what representations (e.g., JSON, HTML, XML)
    can be provided, how many items to present per page of a collection, and
    more.
</p>

<p>
    We make choices so <em>you</em> don't have to. We have standardized on 
    JSON for RPC services, and <a href="http://tools.ietf.org/html/draft-kelly-json-hal-06">Hypermedia Application Language (HAL)</a>, 
    using the JSON variant, for REST services. We provide robust error handling,
    using <a href="http://tools.ietf.org/html/draft-nottingham-http-problem-06">Problem Details for HTTP APIs (API Problem)</a>.
    HTTP method negotiation and content negotiation are built in, ensuring that
    problems are reported early and provide detail on how to submit correct
    requests.
</p>

<p>
    You can document what fields can be submitted, and configure how those
    fields will be validated. You can indicate what services require an
    authenticated user - or even restrict usage based on the HTTP method!
    You can configure how users can authenticate, and we provide HTTP Basic,
    HTTP Digest, and OAuth2 authentication out-of-the-box.
</p>

<p>
    An API is only as useful as its documentation. Apigility lets you document
    every service, every HTTP method, and even differentiate between collections
    and entities. We provide both HTML and JSON documentation by default, and
    have a separate <a href="http://swagger.wordnik.com/">Swagger UI</a> 
    implementation you can opt-in to if desired. Alternately, you can write your
    own module for exporting the documentation in your own custom format -
    we hope to provide both API Blueprint and RAML in the future!
</p>

<p>
    You can use the full Apigility skeleton to create APIs, and the Admin UI
    for manipulating them. Alternately, you can opt-in to just the modules you
    are interested in, and configure them by hand for optimal control over how
    they all work and interact.
</p>

<p>
    In short, Apigility is the most powerful tool you can use for creating
    robust APIs.
</p>

<h2>New Website!</h2>

<p>
    First in our line of announcements, 
    <a href="http://www.zimuel.it/">Enrico Zimuel</a> has completely rewritten the
    <a href="http://apigility.org/">Apigility website</a> to provide more 
    content and a more modern look!
</p>

<h2>What has changed for beta1?</h2>

<p>
    In the three weeks since we released 0.9.1, we've been quite busy. Among other
    things, we worked hard to stabilize and release Zend Framework 2.3.0, which
    allows us to now pin Apigility to a stable version of the framework. This has
    reduced the package size from over 100MB to around 20MB - a reduction of 80%!
</p>

<p>
    Additionally, we've worked hard to fix a number of lingering issues in an
    effort to stabilize the Apigility engine and streamline the Admin UI 
    experience. The following is a list of changes.
</p>

<h3>New Features</h3>

<p>
    All Apigility modules were updated to use a <a href="https://github.com/php-fig/fig-standards/blob/master/proposed/psr-4-autoloader/psr-4-autoloader.md">PSR-4</a>
    structure and autoloader. This flattens the packages significantly, and also
    allows simplification of the PHPUnit test runner. A PSR-4 variant of the ZF2
    <code>StandardAutoloader</code>, <code>ZF\Apigility\Autoloader</code>, was created to provide true
    PSR-4 autoloading, including the ability to have underscores (<code>_</code>) in class
    names, which has been a common feature request. ZF2 <code>Module</code> classes created for
    new API modules now use the new autoloader for loading classes inside the
    module.
</p>

<p>
    All modules were added to <a href="https://travis-ci.org/">Travis-CI</a>, giving us continuous integration going
    forward.
</p>

<p>Additionally, the following features were added:</p>

<ul>
<li><a href="https://github.com/zfcampus/zf-content-validation/issues/8">zfcampus/zf-content-validation#8</a> adds the ability to provide HTTP method-specific input
  filters. This feature is not yet integrated into the Apigility Admin UI, but
  can be configured manually. To do so, add method/input filter service name
  pairs for the given controller service name; if no method-specific input
  filter exists, zf-content-validation will fallback to the <code>input_filter</code> key,
  if defined. As an example:
<pre><code>
    'zf-content-validation' => array(
        'Example\V1\Rest\Status\Controller' => array(
            // This is the fallback input filter, and the one the UI
            // can define and manipulate:
            'input_filter' => 'Example\V1\Rest\Status\Validator',
            // This one will be used on POST requests only:
            'POST' => 'Example\V1\Rest\Status\NewStatusValidator',
        ),
    ),
</code></pre>
</li>

<li><a href="https://github.com/zfcampus/zf-mvc-auth/issues/20">zfcampus/zf-mvc-auth#20</a>
  provides a patch that injects the <code>MvcEvent</code> with a new key,
  <code>ZF\MvcAuth\Identity</code>. You can pull the discovered identity from this event
  parameter now. Additionally, in REST resources, calling <code>$this->getIdentity()</code>
  will retrieve the identity.
</li>

<li><a href="https://github.com/zfcampus/zf-apigility-admin/issues/124">zfcampus/zf-apigility-admin#124</a> and
  <a href="https://github.com/zfcampus/zf-apigility-admin/issues/129">zfcampus/zf-apigility-admin#129</a>
  provide initial input filters for all Apigility Admin API services, as well as
  UI integration for reporting errors. All validation errors are caught and
  reported in a single dialog within the form that raises them.
</li>

<li>The "edit settings" screen for REST services now allows editing the entity
  class and collection class names.
</li>

<li>The "API Overview" page now links services to their overviews. The service
  description is displayed beneath each service; if not yet defined, a link to
  the "edit documentation" tab for the service is provided.
</li>

<li>A new modal will be displayed to users of the Apigility Admin UI if the API
  detects that the filesystem is not writable. The modal details what changes
  need to be made in order for the UI and API to work correctly.
</li>

<li><a href="https://github.com/zfcampus/zf-oauth2/issue/30">zfcampus/zf-oauth2#30</a> splits
  out initialization of the <code>oauth2-server-php</code> server from the <code>zf-oauth2</code>
  controller, allowing the ability to replace it, write a delegator for it, etc.
</li>
</ul>

<h3>Breaking Changes</h3>

<ul>
<li><a href="https://github.com/zfcampus/zf-content-validation/issues/10">zfcampus/zf-content-validation#10</a>
  changes the key used by the <code>InputFilterAbstractServiceFactory</code> from
  <code>input_filters</code> to <code>input_filter_specs</code>. This is due to the fact that ZF 2.3.0
  introduces an <code>InputFilterManager</code>, which is already consuming the key
  <code>input_filters</code>. Wrapped in this change is the fact that the
  <code>InputFilterAbstractServiceFactory</code> is now registered as an abstract service
  factory with the <code>InputFilterManager</code>, instead of with the application service
  manager instance.
  <br /><br />
  For those updating their Apigility libraries to 1.0.0beta1, edit your
  <code>module.config.php</code> files to rename the <code>input_filters</code> key to
  <code>input_filter_specs</code>.
</li>

<li>The <code>zf-configuration</code> controller <code>ZF\Configuration\Controller</code> was moved into
  <code>zf-apigility-admin</code>. This URI for the service remains the same, but the
  controller itself has moved. (This change was done to consolidate all Admin
  API controllers in the same module, as well as to reduce the dependencies
  needed in the <code>zf-configuration</code> component.)
</li>
</ul>

<h3>Fixes</h3>

<ul>
<li><a href="https://github.com/zfcampus/zf-apigility-admin/issues/115">zfcampus/zf-apigility-admin#115</a> - Ensures
  that non-SQLite PDO OAuth2 adapters may be provided without error.
</li>

<li><a href="https://github.com/zfcampus/zf-apigility-admin/issues/117">zfcampus/zf-apigility-admin#117</a> - Ensure
  that the <code>route_match</code> is passed to the API when saving an RPC service.
</li>

<li><a href="https://github.com/zfcampus/zf-apigility-admin/issues/118">zfcampus/zf-apigility-admin#118</a> - Ensure
  that the Content Negotiation <code>selector</code> is passed to the API correctly when
  saving an RPC service.
</li>

<li><a href="https://github.com/zfcampus/zf-apigility-admin/issues/120">zfcampus/zf-apigility-admin#120</a> - Remove
  duplicate call to initialize the <code>ServerUrl</code> helper.
</li>

<li><a href="https://github.com/zfcampus/zf-apigility-admin/issues/122">zfcampus/zf-apigility-admin#122</a> and
  <a href="https://github.com/zfcampus/zf-apigility-admin/issues/123">zfcampus/zf-apigility-admin#123</a> - Add checks
  for array keys before accessing them when building the documentation graph for
  a given service operation.
</li>

<li><a href="https://github.com/zfcampus/zf-apigility-admin/issues/126">zfcampus/zf-apigility-admin#126</a> - Updates 
  the admin to pass the <code>X-UA-Compatible</code> meta tag in order to provide Internet
  Explorer compatibility.
</li>

<li><a href="https://github.com/zfcampus/zf-apigility-admin/issues/132">zfcampus/zf-apigility-admin#132</a> - Ensures
  that authorization data is fetched each time a new service is created, a
  service is updated, or a service is deleted, ensuring the table reflects the
  current list of available services and HTTP methods.
</li>

<li><a href="https://github.com/zfcampus/zf-apigility-admin/issues/133">zfcampus/zf-apigility-admin#133</a> - Updates
  the "angular-flash" functionality to anchor flash messages to the bottom of
  the window. Additionally, any error flash messages now have a "close" button,
  requiring user intervention for dismissal.
</li>

<li>Many fixes were made to the UI to improve performance, remove UI refresh
  errors, provide more consistent color schemes, ensure tabs stay focussed
  between state transitions, etc.
</li>

<li>The Apigility Admin API was updated to break the authentication service into
  more granular sub-services, one for each type of authentication supported.
  This simplifies validation, and allows for future expansion.
</li>

<li>Work was done to ensure opcode cache detection is as solid as possible. We now
  properly distinguish between APC and APCu, allowing the latter to be enabled
  when using the Admin API.
</li>

<li><code>zf-apigility-documentation</code> was not correctly aggregating RPC documentation;
  this has been fixed.
</li>

<li>We reviewed the various events triggered to ensure that they were happening in
  the correct order, which we defined as:
  <ul>
    <li>Authentication</li>
    <li>HTTP method negotiation (is the method called allowed for the service?)</li>
    <li>Authorization (is the discovered identity allowed to perform the requested action?)</li>
    <li>Content Negotiation (determine incoming Content-Type and marshal data from request body; determine if Accept and/or Content-Type are valid for the request)</li>
    <li>Content Validation</li>
  </ul>

  Several event listener priorities were updated to fit the above requirements.
  A new listener, <code>ZF\Rest\Listener\OptionsListener</code>, was introduced to handle
  HTTP method negotiation for REST services, and is registered at the same
  priority as the RPC <code>OptionsListener</code> (which previously existed).
</li>

<li><code>zf-configuration</code> was updated to never write configuration using short-array
  notation; this was done to ensure compatibility of generated configuration
  with PHP 5.3 (as developers may use the admin API via 5.4, but deploy to 5.3).
</li>

<h2>Roadmap</h2>

<p>
    We're excited to get a stable release of Apigility as soon as we possibly
    can. To that end, we plan to do a beta release weekly until it's ready.
    <strong>During that time, we will be working primarily on documentation and critical
    bugfixes</strong>. We hope to have a stable release within a month.
</p>

<p>
    Reaching stability is only the first step, however! We already have contributors
    making significant headway on features such as "Doctrine-Connected" and
    "Mongo-Connected" REST services, and we will be debuting these in a 1.1 version
    not long after we reach version 1.0. Stay tuned!
</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Zend Framework 2.3.0 Released!</title>
      <pubDate>Wed, 12 Mar 2014 18:00:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/zend-framework-2-3-0-released.html</link>
      <guid>http://framework.zend.com/blog/zend-framework-2-3-0-released.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
    The Zend Framework community is pleased to announce the immediate availability
    of Zend Framework 2.3.0!
</p>

<ul>
    <li>
        <a href="/downloads/latest">http://framework.zend.com/downloads/latest</a>
    </li>
</ul>

<p>
    This is our first minor release in 10 months, providing the first new features
    since May of 2013.
</p>

<p>
    Among those features, we've updated our minimum supported PHP version to 5.3.23,
    fixed a large number of issues with how form collections work, improved performance
    of the service manager, and much, much more.
</p><h2>New minimum supported PHP version</h2>

<p>This release ups the minimum required PHP version from 5.3.3 to <strong>5.3.23</strong>.
Making this change affords the following:</p>

<ul>
    <li>
        <p>5.3.9 and up have a fix that allows a class to implement multiple interfaces
        that define the same method, so long as the signatures are compatible. Prior
        to that version, doing so raised a fatal error. This change is necessary in
        order to solve a problem with separated interface usage in the framework.</p>
    </li>
    <li>
        <p>5.3.23 contains a fix for <a href="https://bugs.php.net/bug.php?id=52861">PHP bug #62672</a>.
        Adopting this version or greater will allow us to (eventually) remove polyfill
        support that works around the symptoms of that issue.</p>
    </li>
</ul>

<h2>New Additions / Improvements</h2>

<p>
    More than 230 pull requests and issues were closed for this release -- far 
    too many to list individually. That said, there are quite a few incremental improvements
    that will be of interest to Zend Framework 2 users. Below is a list broken down
    by component.
</p>

<h3>Zend\Authentication</h3>
<ul>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/4815">#4815</a> promotes <code>Zend\AuthenticationService\Adapter\Http</code>'s
  <code>_challengeClient()</code> method to public visibility, and renames it to
  <code>challengeClient()</code>; the old method remains as a proxy to the new one. This
  allows implementors to issue the HTTP credential challenge manually.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5901">#5901</a> adds an <code>AuthenticationServiceInterface</code>, to allow
  alternate implementations.</p>
</li>
</ul>

<h3>Zend\Cache</h3>
<ul>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/4512">#4512</a> introduces a <code>BlackHole</code> cache storage adapter; this
  adapter is useful during development, when you do not want cache operations to
  have effect, but need to test that a system using caching works.</p>
</li>
<li>
<p><code>Zend\Cache\Storage\Adapter\Apc</code> now supports "check and set" operations, per
  <a href="https://github.com/zendframework/zf2/issues/4844">#4844</a>.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5829">#5829</a> adds a new cache adapter, <code>Memcache</code> (not to be
  confused with <code>Memcached</code>), for use with <code>ext/memcache</code>.</p>
</li>
</ul>

<h3>Zend\Code</h3>
<ul>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/4989">#4989</a> adds the ability to identify PHP traits in the
  <code>TokenArrayScanner</code>.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/6262">#6262</a> adds a <code>getPrototype()</code> method to <code>MethodReflection</code>;
  this returns a structured array detailing the namespace, class, visibility,
  and arguments (including names, default values, and types) for the method.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5400">#5400</a> adds the capability for the <code>PropertyScanner</code> to
  determine the PHP type of a given object property, via the new method
  <code>getValueType()</code>.</p>
</li>
</ul>

<h3>Zend\Config</h3>
<ul>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/4824">#4824</a> adds a <code>JavaProperties</code> configuration reader.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/4860">#4860</a> provides an abstract factory for retrieving named
  top-level configuration keys from the <code>Config</code> service. As an example, if you
  have a key <code>zf-apigility</code>, you can now retrieve it from the service manager
  using <code>config-zf-apigility</code> or <code>zf-apigility-config</code>. Namespaces are also
  often-used for top-level keys, and notations such as <code>ZF\Apigility\Config</code> may
  be used, too.</p>
</li>
<li>
<p>A number of improvements were made to the <code>PhpArray</code> config writer to make the
  output it generates more readable, as well as more consistent with the values
  being passed as input. These include consistent 4-space indentation; putting
  the opening <code>array</code> declarations on the same line as <code>=&gt;</code> operators; ensuring
  boolean values are written as booleans; ensuring strings are written with
  proper, and readable, escapeing; allowing writing arrays using PHP 5.4
  short-array syntax; and making attempts to replace paths using <code>__DIR__</code>
  notation when possible.</p>
</li>
</ul>

<h3>Zend\Console</h3>
<ul>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/4449">#4449</a> moves the console routing logic out of <code>Zend\Mvc</code> and
  into <code>Zend\Console\ConsoleRouteMatcher</code>. This allows re-use of the
  <code>Zend\Console</code> component in a standalone fashion.
  <code>Zend\Mvc\Router\Console\Simple</code> was refactored to consume a
  <code>ConsoleRouteMatcher</code> instance internally.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/4606">#4606</a> adds support for <code>Zend\Console</code> to detect the console
  encoding, and use that when emitting text.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5711">#5711</a> implements the <code>writeTextBlock()</code> method in the
  <code>AbstractAdapter</code>, allowing the ability to specify a block size and text to
  wrap within that block when generating console output.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5720">#5720</a> fixes console routing to ensure CamelCase values in
  routes will be treated as literals, and ALLCAPS can be used to define value
  parameters.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5713">#5713</a> adds the ability to specify option callback hooks in
  <code>Zend\Console\Getopt</code>. As examples:</p>
</li>
</ul>

<pre><code>
$opts-&gt;setOptionCallback('apple' function ($value, $opts) {
      echo "You want a $value apple!\n";
});
</code></pre>

<p>Essentially, once <code>parse()</code> is called, if the specified option was provided,
  the callback will be triggered. Returning a boolean <code>false</code> will cause cause
  <code>parse()</code> to invalidate usage, raising an exception.</p>

<h3>Zend\Crypt</h3>
<ul>
<li><a href="https://github.com/zendframework/zf2/issues/5024">#5024</a> removes the <code>KEY_DERIV_HMAC</code> constant, and allows the
  ability to specify alternate PBKDF2 hashing algorithms within the
  <code>Zend\Crypt\BlockCipher</code> class.</li>
</ul>

<h3>Zend\Db</h3>
<ul>
<li><code>Zend\Db\Sql</code> with MySQL can utilize a <code>Select</code> object containing an <code>OFFSET</code> without <code>LIMIT</code></li>
<li><code>Zend\Db\Sql</code>'s <code>In</code> predicate now supports subselects</li>
<li><code>Zend\Db\Sql</code> now has a <code>NotIn</code> predicate.</li>
<li>A method <code>inTransaction()</code> has been added to all <code>Zend\Db\Adapter</code> drivers</li>
<li><code>Zend\Db\Sql\Select</code>'s <code>from()</code> can be a subselect</li>
<li><code>Zend\Db\Sql\Insert</code> can use a Select object as the value source <code>(INSERT INTO ... SELECT)</code></li>
<li><code>Zend\Db\Adapter</code> PDO now accepts a charset when creating the DSN</li>
</ul>

<h3>Zend\Dom</h3>
<ul>
<li><a href="https://github.com/zendframework/zf2/issues/5356">#5356</a> provides a backwards-compatible rewrite of the
  <code>Zend\Dom\Query</code> component and logic. It presents a new class,
  <code>Zend\Dom\Document</code>, along with a subcomponent of the same name containing new
  <code>Query</code> and <code>Nodelist</code> classes. Usage becomes:</li>
</ul>

<pre><code>
use ZendDomDocument;
$document = new Document($htmlXmlOrFile, $docType, $encoding);
foreach (DocumentQuery($expression, $document, $xpathOrCssQueryType) as $match) {
    // do something with matching DOMNode
}
// More concretely:
$document = new Document($someHtml, 'DOC_HTML', 'utf-8');
foreach (DocumentQuery('img.current', $document, 'TYPE_CSS') as $match) {
    $source = $document-&gt;attributes-&gt;getNamedItem('src');
}
</pre></code>

<p><code>Zend\Dom\Query</code> and <code>Zend\Dom\Css2Xpath</code> have been deprecated in favor of the
  new API. <code>Zend\Test\PHPUnit</code> still needs to be updated to use the new API,
  however.</p>

<h3>Zend\EventManager</h3>
<ul>
<li><a href="https://github.com/zendframework/zf2/issues/5283">#5283</a> deprecates the <code>ProvidesEvents</code> trait in favor of the
  <code>EventManagerAwareTrait</code>; the latter is named after the interface it
  implements, and includes the now standard <code>Trait</code> suffix.</li>
</ul>

<h3>Zend\Filter</h3>
<ul>
<li><a href="https://github.com/zendframework/zf2/issues/5436">#5436</a> refactors <code>Zend\Filter</code> to ensure consistency
  throughout the component. Filters now never trigger errors or throw
  exceptions; if a filter cannot handle an incoming input, it will return it
  unmodified.</li>
</ul>

<h3>Zend\Form</h3>
<ul>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/4400">#4400</a> allows you to pass the string name of the element you
  want to create as the second argument when using
  <code>Zend\Form\FormElementManager::get()</code> - instead of requiring that you pass it
  in as <code>array('name' =&gt; 'name value')</code>.</p>
</li>
<li>
<p>The <code>Zend\Form</code> component has had a number of improvements surrounding HTML
  escaping and form labels. Among these is the addition of
  <code>LabelAwareInterface</code>, which defines methods for an element or fieldset
  to provide a label, label attributes, and label options (one of which is the
  option <code>disable_html_escape</code>, allowing developers to provide markup within the
  label text). Many efforts have been made to keep this functionality backwards
  compatible, while simultaneously ensuring that proper defaults are provided.</p>
</li>
<li>
<p>Numerous improvements were made to how form Collections are managed, including
  improvements to counts, managing input filters, handling nested sets, binding
  objects, and more.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5918">#5918</a> ensures that multiple CSRF elements on the same page
  with the same name should not conflict, and still validate.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/4846">#4846</a> adds the ability to disable the <code>InArray</code> validator
  when defining a <code>MultiCheckbox</code> form element.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/4884">#4884</a> provides the ability to replace elements within a form
  collection.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/4927">#4927</a> adds the ability to provide a <code>Traversable</code> value to a
  nested fieldset in a form.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/4971">#4971</a> updates the form factory to allow specifying <code>null</code>
  configuration values. This allows one module to override and cancel the
  setting of another when desired.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5420">#5420</a> adds the ability to compose <code>Zend\Form</code> collections via
  annotations.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5456">#5456</a> adds the ability for annotations to provide input
  filter specifications when provided on an object representing a fieldset.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5562">#5562</a> adds the <code>unsetValueOption()</code> method to <code>Select</code> and
  <code>MultiCheckbox</code> element types.</p>
</li>
</ul>

<h3>Zend\Http</h3>
<ul>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/4950">#4950</a> adds <code>match()</code> capabilities to the <code>ContentType</code>
   header class, similar to the implementation for <code>Accept</code> header instances.
   This allows matching incoming data against a mimetype in order to perform
   content negotiation.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5029">#5029</a> adds a new header class for <code>Origin</code> headers.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5316">#5316</a> adds a new header class for <code>Content-Security-Policy</code>
  headers.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5732">#5732</a> adds the ability to set custom HTTP response status
  codes via a new <code>Response</code> method, <code>setCustomStatusCode()</code>.</p>
</li>
</ul>

<h3>Zend\I18n</h3>
<ul>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/4510">#4510</a> introduces <code>Zend\I18n\Filter\NumberParse</code>, which will
  filter a string parseable by PHP's built-in <code>NumberFormatter</code> to a number.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5034">#5034</a> makes the <code>PhoneNumber</code> validator <code>Locale</code>-aware.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5108">#5108</a> introduces a <code>TranslatorInterface</code>, defining the
  methods <code>translate()</code> and <code>translatePlural()</code>. This will allow for alternate
  implementations, but also for other components to create equivalent,
  component-specific interfaces, and thus reduce dependencies.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5825">#5825</a> adds a new translation loader, <code>PhpMemoryArray</code>. It
  behaves like the <code>PhpArray</code> loader, but instead of accepting a file that
  returns an array, it accepts an array of translations directly. This allows
  specifying translations as part of configuration, or via a caching system.</p>
</li>
</ul>

<h3>Zend\InputFilter</h3>
<ul>
<li>A number of updates were made regarding how collection input filters work to
  ensure they are more consistent, and operate according to user expectations
  with regard to empty sets, nested sets, etc.</li>
</ul>

<h3>Zend\Json</h3>
<ul>
<li><a href="https://github.com/zendframework/zf2/issues/5933">#5933</a> provides the ability to use arbitrary response codes
  with <code>Zend\Json\Server</code>. </li>
</ul>

<h3>Zend\Loader</h3>
<ul>
<li><a href="https://github.com/zendframework/zf2/issues/5783">#5783</a> fixes the <code>StandardAutoloader</code> such that if a
  namespace matches, but no matching class is found, it will continue to loop
  through any other namespaces present. This fixes a situation whereby a map for
  a subnamespace may be registered later than the parent; prior to the change,
  the subnamespace would never be matched.</li>
</ul>

<h3>Zend\Log</h3>
<ul>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/4455">#4455</a> adds new service providers for <code>Zend\Log</code>: <code>log_writers</code> and <code>log_processors</code>. These allow you to provide custom log writer and processor services for use with the <code>Zend\Log\LoggerAbstractServiceFactory</code>.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/4742">#4742</a> provides a new interface,
  <code>Zend\Log\LoggerAwareInterface</code>, for hinting that an object composes, or can
  compose, a <code>Zend\Log\Logger</code> instance. A corresponding PHP Trait is also
  provided.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5875">#5875</a> adds a <code>registerFatalErrorShutdownFunction()</code> method to
  <code>Zend\Log\Logger</code>, to handle logging fatal runtime errors.</p>
</li>
</ul>

<h3>Zend\Mail</h3>
<ul>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5261">#5261</a> adds a new <code>NullTransport</code> to <code>Zend\Mail</code>, providing a
  no-op mail transport. This can be useful in non-production environments, or
  when needing to selectively disable mail sending capabilities without altering
  code.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5470">#5470</a> adds <code>Zend\Mail\Transport\Factory</code>, for simplifying
  creation of a mail transport via configuration.</p>
</li>
</ul>

<h3>Zend\Mvc</h3>
<ul>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/4849">#4849</a> updates <code>Zend\Mvc\Application::run()</code> such that it now
  always returns the <code>Application</code> instance. If an event returns a response
  object, it is always pushed into the <code>Application</code> instance now so that it may
  be retrieved after <code>run()</code> has finished executing.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/4962">#4962</a> modifies the various MVC factories to reference the
  service <code>ControllerManager</code> instead of <code>ControllerLoader</code> (which is a legacy
  name from early beta releases); <code>ControllerManager</code> was made an alias of
  <code>ControllerLoader</code>. This change future-proofs the MVC. If you are using
  <code>ControllerLoader</code> in your own code, we encourage you to change those
  references to <code>ControllerManager</code> (though <code>ControllerLoader</code> will continue to
  work for the foreseeable future).</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5108">#5108</a> introduces a <code>DummyTranslator</code>, which will be used if
  <code>ext/intl</code> is not present, or if the developer wishes to disable translation
  (e.g., validators compose a translator by default, but quite often the
  validation messages do not need to be translated); translation can be disabled
  by setting the <code>translator</code> configuration key to a boolean <code>false</code>.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5469">#5469</a> adds a new <code>AbstractConsoleController</code>, and logic in
  the <code>ControllerManager</code> for injecting the <code>ConsoleAdapter</code> object into such
  controllers. This abstract class tests if the incoming request is a console
  request, and raises an exception if not; it also provides a <code>getConsole()</code>
  method for access to the composed <code>ConsoleAdapter</code>.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5612">#5612</a> updates <code>Zend\Mvc\Application::init()</code> to allow
  listeners specified in the configuration passed to the method to override
  those discovered during bootstrapping; in essence, application-level
  configuration should have more specificity than module-level configuration.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5670">#5670</a> provides the ability to create a <code>controller_map</code>
  within <code>view_manager</code> configuration. This map allows you to do the following:</p>
</li>
<li>
<p>Indicate modules that include subnamespaces in their name to include all
    namespace segments in the template name: <code>Xerkus\FooModule =&gt;
    xerkux/foo-module/</code> via the configuration <code>Xerkus\FooModule =&gt; true</code>.</p>
</li>
<li>Map a specific template prefix to a given module: <code>ZfcUser =&gt;
    'zf-commons/zfc-user</code>.</li>
</ul>
<p>This change is opt-in, and thus backwards compatible.</p>
<ul>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5759">#5759</a> adds a new method to the <code>FlashMessenger</code>,
  <code>renderCurrent()</code>, allowing you to render flash messages sent in the current
  request (using the same API as <code>renderMessages()</code>).</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5897">#5897</a> adds a <code>fromJsonRawBody()</code> method to the <code>Params</code>
  plugin, allowing the ability to decode and retrieve parameters passed via the
  request body as JSON.</p>
</li>
</ul>

<h3>Zend\Navigation</h3>
<ul>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5080">#5080</a> fixes the <code>Breadcrumb</code> view helper such that it will
  now pass the specified separator.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5803">#5803</a> hides sub menus when all pages in the sub menu are
  currently hidden.</p>
</li>
</ul>

<h3>Zend\Paginator</h3>
<ul>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/4427">#4427</a> adds the ability to provide <code>$group</code> and <code>$having</code> clauses to a <code>DbTableGateway</code> <code>Zend\Paginator</code> adapter.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5272">#5272</a> adds a new <code>Callback</code> pagination adapter; the new
  adapter accepts two callbacks, one for returning the items, another for
  returning the count. The items callback will receive the requested offset and
  number of items per page as arguments: <code>function ($offset, $itemsPerPage)</code>.</p>
</li>
</ul>

<h3>Zend\Permissions\Acl</h3>
<ul>
<li><a href="https://github.com/zendframework/zf2/issues/5628">#5628</a> adds a new <code>AssertionAggregate</code>, which enables two
  concepts: the ability to chain multiple assertions, as well as the ability to
  use named assertions as plugins. (The change also creates a
  <code>Zend\Permissions\Acl\Assertion\AssertionManager</code>, which is a plugin manager
  implementation).</li>
</ul>

<h3>Zend\ServiceManager</h3>
<ul>
<li>A number of performance improvements were made to how abstract factories are
  processed and invoked.</li>
</ul>

<h3>Zend\Session</h3>
<ul>
<li><a href="https://github.com/zendframework/zf2/issues/4995">#4995</a> adds the ability to specify session validators in
  configuration consumed by the <code>SessionManagerFactory</code>.</li>
</ul>

<h3>Zend\Soap</h3>
<ul>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5792">#5792</a> adds a "debug mode" to <code>Zend\Soap\Server</code>. When
  enabled, any exception thrown is treated as a <code>Fault</code> response (vs. only those
  whitelisted).</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5810">#5810</a> adds a <code>getException()</code> method to <code>Zend\Soap\Server</code>,
  allowing you to retrieve the exception that caused a fault response (e.g., to
  log it).</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5811">#5811</a> creates a public <code>getSoap()</code> method in
  <code>Zend\Soap\Server</code> to allow you to access the composed <code>SoapServer</code> instance.
  This allows you to use <code>setReturnResponse()</code> and still return fault responses
  (which must be triggered by the <code>SoapServer</code> instance directly.)</p>
</li>
</ul>

<h3>Zend\Stdlib</h3>
<ul>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/4534">#4534</a> introduces a <code>JsonSerializable</code> polyfill, to provide
  support for that built-in PHP interface on PHP versions prior to 5.4.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/4751">#4751</a> provides a new interface,
  <code>Zend\Stdlib\Hydrator\HydratorAwareInterface</code>, for hinting that an object
  composes, or can compose, a <code>Zend\Stdlib\Hydrator\HydratorInterface</code> instance.
  A corresponding PHP Trait is also provided.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/4908">#4908</a> segregates <code>Zend\Stdlib\Hydrator\HydratorInterface</code>
  into two separate interfaces, <code>Zend\Stdlib\Extractor\ExtractionInterface</code> and
  <code>Zend\Stdlib\Hydrator\HydrationInterfac</code>. The original interface has been
  modified to extend both of the new interfaces. This allows developers to
  implement one or the other behavior, based on the needs of the application.
  (As an example, if an application only needs to extract data for
  serialization, it could typehint on
  <code>Zend\Stdlib\Extractor\ExtractionInterface</code> only.)</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5364">#5364</a> adds a new subcomponent to hydrators, <code>NamingStrategy</code>.
  A <code>NamingStrategy</code> can be used by hydrators to determine the name to use for
  keys and properties when extracting and hydrating.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5365">#5365</a> adds <code>Zend\Stdlib\Guard</code>, which provides traits for
  performing common argument type validations. For example, an object composing the
  <code>ArrayOrTraversableGuardTrait</code> could call
  <code>$this-&gt;guardForArrayOrTraversable($arg)</code> in order to validate <code>$arg</code> is an
  array or <code>Traversable</code>.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5380">#5380</a> adds context support to hydrator strategies, allowing
  them to receive the object being extracted or the array being hydrated when
  performing their logic.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5702">#5702</a> moves <code>Zend\Mvc\Router\PriorityList</code> into
  <code>Zend\Stdlib</code>, as it has general-purpose use cases. The former class was
  modified to extend the latter.</p>
</li>
</ul>

<h3>Zend\Test</h3>
<ul>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/4946">#4946</a> adds two new methods to the
  <code>AbstractControllerTestCase</code>, <code>assertTemplateName()</code> and
  <code>assertNotTemplateName()</code>.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5649">#5649</a> adds the <code>assertResponseReasonPhrase()</code> assertion.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5730">#5730</a> adds the ability to allow session persistence when
  performing multiple dispatches.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5731">#5731</a> adds a new argument to <code>dispatch()</code>,
  <code>$isXmlHttpRequest</code>; when boolean <code>true</code>, this adds an <code>X-Requested-With:
  XMLHttpRequest</code> header to the request object.</p>
</li>
</ul>

<h3>Zend\Validator</h3>
<ul>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/4940">#4940</a> adds a new validator, <code>Bitwise</code>, for performing bitwise
  validation operations.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5664">#5664</a> removes the translation of validator message <em>keys</em>.
  While this is a backwards-incompatible change, this capability should never
  have been present, and removing it fixes a number of posted issues, as well as
  improves performance when retrieving validation error messages. A related
  change, <a href="https://github.com/zendframework/zf2/issues/5666">#5666</a>, removes translation of validation error
  messages from <code>Zend\Form\View\Helper\FormElementErrors</code>, as translation
  happens within the validators themselves; this prevents double translation,
  and, again, improves performance.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5780">#5780</a> adds the ability to set the "break chain on failure"
  flag via a configuration option; this allows setting the flag when using the
  <code>attachByName()</code> method of the <code>ValidatorChain</code>.</p>
</li>
</ul>

<h3>Zend\Version</h3>
<ul>
<li><a href="https://github.com/zendframework/zf2/issues/4625">#4625</a> adds the ability to pass a <code>Zend\Http\Client</code> to
  <code>Zend\Version\Version::getLatest()</code>, which should solve situations where
  <code>allow_url_fopen</code> is disabled.</li>
</ul>

<h3>Zend\View</h3>
<ul>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/4679">#4679</a> provides the ability to specify Internet Explorer
  conditional stylesheets in the <code>HeadLink</code> and <code>HeadStyle</code> view helpers,
  conditional metadata in the <code>HeadMeta</code> view helper, and conditional scripts in
  the <code>HeadScript</code> view helper.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5255">#5255</a> adds the ability to retrieve child view models based on
  what variable they registered to capture to in the parent; this is implemented
  via a new interface, <code>Zend\View\Model\RetrievableChildrenInterface</code>, which
  defines the method <code>getChildrenByCaptureTo()</code>.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5266">#5266</a> attempts to make calls to <code>PhpRenderer::render()</code>
  slightly more robust by checking the return value from <code>include</code>ing a view
  script, and raising an exception when the <code>include</code> fails.</p>
</li>
</ul>

<h2>Thank You!</h2>

<p>
    A big thank you to the dozens upon dozens of contributors who helped make this
    new feature release a reality! This was truly a community-driven effort, and 
    would not have been possible without the contributions of each and every one
    of you.
</p>

<h2>Roadmap</h2>

<p>
    At this time, I am proposing a bi-monthly maintenance release schedule; however,
    we will often release an initial ".1" maintenance version sooner. After that, however,
    we will schedule maintenance releases every 2 months.
</p>

<p>
    For minor (feature) releases, I am proposing every six months, giving us a
    September 2014 release date for 2.4.0.
</p>

<p>
    If you have opinions on the release schedule, I invite you to voice them on our
    <a href="/archives">mailing lists</a>.
</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Zend Framework 1.12.5 Released!</title>
      <pubDate>Fri, 07 Mar 2014 17:50:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/zend-framework-1-12-5-released.html</link>
      <guid>http://framework.zend.com/blog/zend-framework-1-12-5-released.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
    The Zend Framework community is pleased to announce the immediate availability
    of Zend Framework 1.12.5!
</p>

<ul>
    <li>
        <a href="/downloads/latest">http://framework.zend.com/downloads/latest</a>
    </li>
</ul>

<p>
    This release fixes PHP 5.2 support for the 1.12 series. If you use PHP 5.2 
    with Zend Framework 1.12, we encourage you to upgrade immediately.
</p><h2>5.2 support</h2>

<p>
    <a href="/blog/zend-framework-1-12-4-2-1-6-and-2-2-6-released.html">Yesterday's 1.12.4 release</a>
    provided several security fixes around XML eXternal Entity and XML Entity Expansion attack
    vectors. Unfortunately, we had not reviewed our patch to consider PHP 5.2 support, and the
    code contained PHP closures -- which have only been available since PHP 5.3.
</p>

<p>
    The code in the <code>Zend\Xml</code> component was updated to remove the closures, and
    tests for all affected components were run to ensure they worked across PHP versions from
    5.2 - 5.5.
</p>

<h2>Thank You!</h2>

<p>
    A big thank you to those contributors who spotted the errors and provided the 
    initial fixes, particularly Martin Hujer and Frank Bruckner.
</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Zend Framework 1.12.4, 2.1.6, and 2.2.6 Released!</title>
      <pubDate>Thu, 06 Mar 2014 23:00:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/zend-framework-1-12-4-2-1-6-and-2-2-6-released.html</link>
      <guid>http://framework.zend.com/blog/zend-framework-1-12-4-2-1-6-and-2-2-6-released.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
    The Zend Framework community is pleased to announce the immediate availability
    of:
</p>

<ul>
    <li>Zend Framework <strong>1.12.4</strong></li>
    <li>Zend Framework <strong>2.1.6</strong></li>
    <li>Zend Framework <strong>2.2.6</strong></li>
</ul>

<ul>
    <li>
        <a href="/downloads/latest">http://framework.zend.com/downloads/latest</a>
    </li>
</ul>

<p>
    While these are scheduled maintenance releases, they also contain important security
    fixes; we strongly encourage users to upgrade.
</p><h2>Security Fixes</h2>

<p>
    Two new security advisories have been made:
</p>

<ul>
    <li><a href="/security/advisory/ZF2014-01">ZF2014-01</a>, which mitigates
        XML eXternal Entity and XML Entity Expansion vectors in a variety of
        components. While we had taken measures two years ago to mitigate
        these issues, a researcher discovered several components that remained
        vulnerable.
    </li>

    <li><a href="/security/advisory/ZF2014-02">ZF2014-02</a>, which mitigates
        an issue in our OpenID consumers whereby a malicious Identity Provider
        could be used to spoof the identity of other providers.
    </li>
</ul>

<p>
    For more information, follow the links above; if you use any of the components
    affected, please upgrade as soon as possible.
</p>

<h2>1.12.4</h2>

<p>
    This is the first maintenance release in almost a year on the 1.12 series, and
    contains fixes too numerous to list. Among some of the more important ones,
    however:
</p>

<ul>
    <li>The testing infrastructure has been upgraded to PHPUnit 3.7, making it far simpler for contributors to test changes.</li>
    <li><a href="https://github.com/zendframework/zf1/pull/221">#221</a> removes the TinySrc view helper, as the TinySrc service no longer exists.</li>
    <li><a href="https://github.com/zendframework/zf1/pull/222">#222</a> removes the InfoCard component, as the CardSpace service no longer exists.</li>
    <li><a href="https://github.com/zendframework/zf1/pull/271">#271</a> removes the Nirvanix component, as the Nirvanix service shut down in October 2013.</li>
</ul>

<p>
    Many thanks to all the contributors who helped polish ZF1, including both Frank 
    Bruckner and Adam Lundrigan, who provided a ton of patches and feedback, and
    to Rob Allen, our release manager, for shepherding in contributions!
</p>

<h2>2.1.6</h2>

<p>
    <strong>2.1.6</strong> is a security release only, and issued to provide
    fixes for <a href="/security/advisory/ZF2014-01">ZF2014-01</a>.
</p>

<h2>2.2.6</h2>

<p>
    <strong>2.2.6</strong> is both a security and maintenance release. It
    addresses specifically <a href="/security/advisory/ZF2014-01">ZF2014-01</a>.
    Additionally, more than 100 patches were contributed to this release.
</p>

<p>
    For the complete list of changes, <a href="/changelog/2.2.6">read the changelog</a>.
</p>

<h2>ZendXml</h2>

<p>
    We have released a new component, <a href="https://github.com/zendframework/ZendXml">ZendXml</a>,
    to help PHP developers mitigate XXE and XEE vectors in their own code. We highly
    recommend using it if you ware working with XML. It is available via Composer, as well
    as via <a href="https://packages.zendframework.com/">our packages site</a>.
</p>

<h2>Component Releases</h2>

<p>The following components were updated, to the versions specified, to mitigate security issues.</p>

<ul>
    <li>ZendOpenId, v2.0.2</li>
    <li>ZendRest, v2.0.2</li>
    <li>ZendService_Amazon, v2.0.3</li>
    <li>ZendService_Api, v1.0.0</li>
    <li>ZendService_Audioscrobbler, v2.0.2</li>
    <li>ZendService_Nirvanix, v2.0.2</li>
    <li>ZendService_SlideShare, v2.0.2</li>
    <li>ZendService_Technorati, v2.0.2</li>
    <li>ZendService_WindowsAzure, v2.0.2</li>
</ul>

<h2>Thank You!</h2>

<p>
    As always, I'd like to thank the many contributors who made these
    releases possible! The project is gaining in consistency and capabilities
    daily as a result of your efforts.
</p>

<h2>Roadmap</h2>

<p>
    We plan to ship version 2.3.0 sometime next week (week of 10 March 2014).
    We will likely adopt a semi-monthly maintenance release schedule
    thereafter.
</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
  </channel>
</rss>
