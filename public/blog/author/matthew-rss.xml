<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/">
  <channel>
    <title>Author: Matthew Weier O'Phinney - ZF Blog</title>
    <description>Author: Matthew Weier O'Phinney - ZF Blog</description>
    <pubDate>Tue, 22 Dec 2015 22:15:00 +0000</pubDate>
    <generator>Zend_Feed_Writer 2 (http://framework.zend.com)</generator>
    <link>http://framework.zend.com/blog/author/matthew.html</link>
    <atom:link rel="self" type="application/rss+xml" href="http://framework.zend.com/blog/author/matthew-rss.xml"/>
    <item>
      <title>Expressive 1.0.0RC5 Released!</title>
      <pubDate>Tue, 22 Dec 2015 22:15:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/expressive-1-0-0rc5-released.html</link>
      <guid>http://framework.zend.com/blog/expressive-1-0-0rc5-released.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>The Zend Framework community is pleased to announce the immediate availability of Expressive 1.0.0rc5!</p>
<p>You can install it using <a href="https://getcomposer.org">Composer</a>, using the <code>create-project</code> command:</p>
<pre><code class="language-bash">$ composer create-project zendframework/zend-expressive-skeleton:1.0.0rc5@rc expressive
</code></pre>
<p>You can update your existing applications using:</p>
<pre><code class="language-bash">$ composer update
</code></pre>
<p>Depending on what features you're already using, you may have nothing to do, or
a few changes you may need to make; see below for more information.</p><h2>Changes in RC5</h2>
<p>The majority of the changes for RC5 were documentation additions, including chapters on:</p>
<ul>
<li>how to serve Expressive from a subdirectory of the web root.</li>
<li>how to create modular Expressive applications.</li>
<li>how to parse body parameters using new middleware from zend-expressive-helpers.</li>
</ul>
<p>Two larger changes were made, however:</p>
<ul>
<li>As noted above, zend-expressive-helpers now provides middleware for parsing
the request body into parameters.</li>
<li>The skeleton and installer now use a new <a href="https://github.com/container-interop/container-interop">container-interop</a>
version of Pimple to ensure users can use Pimple v3, versus our previous
support for only v1.</li>
</ul>
<h3>Body parameter parsing</h3>
<p><a href="http://www.php-fig.org/psr/psr-7/">PSR-7</a> provides facilities for retrieving
the parsed body parameters. Most implementations will populate this with the
contents of <code>$_POST</code> by default, but for cases where non-form submissions or
non-POST submissions are present, you need to parse and populate the body
parameters manually.</p>
<p><a href="https://github.com/zendframework/zend-expressive-helpers">zend-expressive-helpers</a>
now provides middleware for doing this, <code>Zend\Expressive\Helper\BodyParams\BodyParamsMiddleware</code>.
This middleware can be optionally added to your application, and supports the addition
of custom strategies to allow parsing arbitrary content types.</p>
<p>This functionality is completely opt-in, and will be available following a
composer update within your application.</p>
<p><a href="http://zend-expressive.readthedocs.org/en/latest/helpers/body-parse/">Read more about it in the documentation</a>.</p>
<h3>Pimple upgrade</h3>
<p>As noted, our previous Pimple support was for v1, which is unsupported at this time.
We decided to upgrade our support to the latest stable version, v3, prior to the
stable release of Expressive.</p>
<p>For those of you who were using Pimple previously, if you wish to update your application,
you will need to do the following:</p>
<ul>
<li>First, remove the previous pimple support: <code>composer remove mouf/pimple-interop pimple/pimple</code>.</li>
<li>Second, add the new v3 interop support: <code>composer require xtreamwayz/pimple-container-interop</code>.</li>
<li>Third, replace the contents of <code>config/container.php</code> with the contents of the
<a href="https://github.com/zendframework/zend-expressive-skeleton/blob/master/src/ExpressiveInstaller/Resources/config/container-pimple.php">linked skeleton file</a>.</li>
</ul>
<p>After taking those steps, you should see everything working just as it did before.</p>
<h4>zend-view changes</h4>
<p>One trivial change was made to the layout template for zend-view users: instead of using <code>headScript()</code>,
<code>inlineScript()</code> is now used, and emitted at the end of the <code>&lt;body&gt;</code> section of the layout.
This is a slight front-end performance enhancement; if you are using the default layout, we recommend
updating accordingly.</p>
<h2>Future</h2>
<p>At this point, we do not anticipate any more code changes before the stable release.
We are waiting on at least one pull request for an additional cookbook recipe, and
highly recommend users dive into the documentation and help us polish it for the
final release. Suggestions already include flow and architecture diagrams; if anybody
wants to create these, we'll happily take them!</p>
<p>If you are testing Expressive — whether for the first time, or updating an
existing application — please help us prepare it for general availability!</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Zend Framework 3 Update for 2015-12-10</title>
      <pubDate>Thu, 10 Dec 2015 16:50:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/2015-12-10-zf3-biweekly-update.html</link>
      <guid>http://framework.zend.com/blog/2015-12-10-zf3-biweekly-update.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>Per our <a href="/blog/zend-framework-3-update-and-roadmap.html">previous ZF3 update</a>, this is the
first in an ongoing series of bi-weekly posts on ZF3 development status.</p>
<p>The highlights:</p>
<ul>
<li>&gt;80 pull requests merged</li>
<li>28 releases of components</li>
<li>9 components updated to zend-servicemanager/zend-eventmanager v3 changes</li>
<li>2 release candidates of expressive</li>
</ul><h2>Pull request activity</h2>
<p>Marco Pivetta noted yesterday on twitter:</p>
<blockquote>
<p>Receiving around 15 mails/hour from zendframework repositories: work is going on at full speed :O #zf2 #zf3</p>
<p>— <a href="https://twitter.com/Ocramius">@Ocramius</a> <a href="https://twitter.com/Ocramius/status/674635264371859457">(link)</a></p>
</blockquote>
<p>Activity has been quite high the past couple weeks, with <a href="https://github.com/issues?utf8=%E2%9C%93&amp;q=is:pr+org:zendframework+is:merged+closed:%3E=2015-11-24+">more than 80 pull requests merged</a>
(link requires a GitHub account). Many of these were related to the Expressive
release candidates (more on those later), but more than half were on ZF
components, and ranged from bugfixes to new features to ZF3-specific refactors.</p>
<h2>Component Releases</h2>
<p>We released the following components and versions since the last update.
While not all releases are related to ZF3 specifically, this list is intended
to detail activity within the organization. One goal of splitting the various
components was to increase release velocity; we're definitely seeing that happen!</p>
<ul>
<li>
<a href="https://github.com/zendframework/zend-diactoros/releases/tag/1.2.0">zend-diactoros 1.2.0</a>,
which adds a <code>TextResponse</code> and <code>CallbackStream</code>, updates the <code>SapiEmitter</code> to emit a
<code>Content-Length</code> header by default, and ensures the default charset of an
<code>HtmlResposne</code> is utf-8.</li>
<li>
<a href="https://github.com/zendframework/zend-code/releases/tag/release-2.6.1">zend-code 2.6.1</a>,
which replaces the doctrine/common dependency with the more specific doctrine/annotations.</li>
<li>
<a href="https://github.com/zendframework/zend-expressive-template">zend-expressive-template</a>, a new
component containing the <code>TemplateRendererInterface</code> and related value objects used by
Expressive; this allows developers to use the interface in non-Expressive applications.</li>
<li>
<a href="https://github.com/zendframework/zend-expressive-router">zend-expressive-router</a>, a new
component containing the <code>RouterInterface</code> and related value objects used by Expressive;
this allows developers to use the interface in non-Expressive applications.</li>
<li>
<a href="https://github.com/zendframework/zend-expressive-aurarouter/releases/tag/1.0.0">zend-expressive-aurarouter 1.0.0</a>
(0.3.0 was also released); the component now depends on
zend-expressive-router instead of Expressive, and is considered stable.</li>
<li>
<a href="https://github.com/zendframework/zend-expressive-fastroute/releases/tag/1.0.0">zend-expressive-fastroute 1.0.0</a>
(0.3.0 was also released); the component now depends on
zend-expressive-router instead of Expressive, and is considered stable.</li>
<li>
<a href="https://github.com/zendframework/zend-expressive-zendrouter/releases/tag/1.0.0">zend-expressive-zendrouter 1.0.0</a>
(0.3.0 was also released); the component now depends on
zend-expressive-router instead of Expressive, and is considered stable.</li>
<li>
<a href="https://github.com/zendframework/zend-expressive-platesrenderer/releases/tag/1.0.0">zend-expressive-platesrenderer 1.0.0</a>
(0.3.0 was also released); the component now depends on
zend-expressive-template instead of Expressive, and is considered stable.</li>
<li>
<a href="https://github.com/zendframework/zend-expressive-twigrenderer/releases/tag/1.0.0">zend-expressive-twigrenderer 1.0.0</a>
(0.3.0 and 0.3.1 were also released); the component now depends on
zend-expressive-template instead of Expressive, and is considered stable.
Additionally, the component now has a new configuration structure.</li>
<li>
<a href="https://github.com/zendframework/zend-expressive-zendviewrenderer/releases/tag/1.0.0">zend-expressive-zendviewrenderer 1.0.0</a>
(0.3.0, 0.3.1, 0.4.0, and 0.4.1 were also released); the component now depends on
zend-expressive-template instead of Expressive, and is considered stable.
Additionally, the component now has custom <code>url</code> and <code>serverUrl</code> helpers
that work with zend-expressive-router and PSR-7, respectively.</li>
<li>
<a href="https://github.com/zendframework/zend-feed/releases/tag/release-2.6.0">zend-feed 2.6.0</a> provides
improvements that reduce dependencies, and allow better interoperability with other HTTP clients;
including PSR-7-based clients.</li>
<li>
<a href="https://github.com/zendframework/zend-expressive-helpers">zend-expressive-helpers</a>, a new
component that provides helpers for generating URI paths from configured routes, and fully-qualified
URIs based on the current request URI.</li>
<li>
<a href="https://github.com/zendframework/zend-test/releases/tag/release-2.5.2">zend-test 2.5.2</a> adds
support for writing tests to use PHPUnit 5.</li>
<li>
<a href="https://github.com/zendframework/zend-eventmanager/releases/tag/release-2.6.1">zend-eventmanager 2.6.1</a>
updates the dependencies to make Athletic a development-only dependency.</li>
<li>
<a href="https://github.com/zendframework/zend-db/releases/tag/release-2.6.2">zend-db 2.6.2</a> provides
a number of bugfixes</li>
<li>ZendService_Apple_Apns <a href="https://github.com/zendframework/ZendService_Apple_Apns/releases/tag/release-1.1.2">1.1.2</a>
and <a href="https://github.com/zendframework/ZendService_Apple_Apns/releases/tag/release-1.2.0">1.2.0</a>,
providing a bugfix and Safari push support, respectively.</li>
</ul>
<h2>ZF3 Refactors</h2>
<p>Since the last update, the following components have been refactored to work
with the planned v3 versions of zend-servicemanager and zend-eventmanager.
Please note that no new versions have been released at this time; all work
remains either in pull requests or in the develop branches of each component.</p>
<ul>
<li>
<a href="https://github.com/zendframework/zend-db/pull/53">zend-db</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-di/pull/5">zend-di</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-feed/pull/17">zend-feed</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-filter/pull/15">zend-filter</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-log/pull/14">zend-log</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-mail/pull/47">zend-mail</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-permissions-acl/pull/7">zend-permissions-acl</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-tag/pull/3">zend-tag</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-text/pull/2">zend-text</a>
</li>
</ul>
<h2>Expressive Release Candidates</h2>
<p>This week, we've issued two release candidates of Expressive, with RC4 being the latest.
Be sure to read the <a href="/blog/expressive-1-0-0rc3-released.html">RC3</a> and <a href="/blog/expressive-1-0-0rc4-released.html">RC4</a>
announcements to find out what changes have been made; a lot of work has occurred in the
past few weeks!</p>
<h2>Until next time</h2>
<p>We'll be providing another update on either 22 or 23 December 2015 (based on holiday
vacation schedules).</p>
<p>Until then, if you want to help:</p>
<ul>
<li>There are still <a href="https://github.com/zendframework/maintainers/wiki/ZF3-code-refactoring">component refactors to complete or review</a>.</li>
<li>We're still looking for feedback on <a href="https://github.com/zendframework/zend-mvc/issues/46">reducing zend-mvc dependencies</a>
and <a href="https://github.com/zendframework/zf2/issues/7646">identifying core components for the zf2 repository</a>.</li>
<li>Test Expressive, and help us reach a stable release of this new feature!</li>
</ul>
<p>Many thanks to all the contributors who have provided feedback, patches, reviews,
or releases!</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Expressive 1.0.0RC4 Released!</title>
      <pubDate>Wed, 09 Dec 2015 21:45:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/expressive-1-0-0rc4-released.html</link>
      <guid>http://framework.zend.com/blog/expressive-1-0-0rc4-released.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>The Zend Framework community is pleased to announce the immediate availability of Expressive 1.0.0rc4!</p>
<p>You can install it using <a href="https://getcomposer.org">Composer</a>, using the <code>create-project</code> command:</p>
<pre><code class="language-bash">$ composer create-project zendframework/zend-expressive-skeleton:1.0.0rc4@rc expressive
</code></pre>
<p>If you're already using Expressive, read below for how to update your application!</p><h2>Changes in RC4</h2>
<p>The majority of the changes for RC4 centered around polishing the skeleton and
providing more documentation. One change, however, represented a bugfix, and
will impact existing installations that were making use of the <code>UrlHelper</code> from
the zend-expressive-helpers package.</p>
<p>Changes in this release include:</p>
<h3>Updates to UrlHelper registration</h3>
<p>Two separate reports indicated that the methodology chosen for registering
<code>Zend\Expressive\Helper\UrlHelper</code> as a route result observer with the <code>Application</code>
instance was not viable. In one case, a circular dependency issue was discovered;
in the other, the <code>UrlHelper</code> instance was retrieved for the first time too late
to be triggered as a route result observer.</p>
<p>To solve this, we chose a path similar to the <code>ServerUrlHelper</code>: dedicated middleware
that, on invocation, registers the <code>UrlHelper</code> with the current <code>Application</code> instance
(or any <code>Zend\Expressive\Router\RouteResultSubjectInterface</code> implementation). For
existing users, this will require both upgrading your zend-expressive-helpers version,
as well as some minor changes to your configuration; see the <a href="#upgrading">Upgrading</a>
section below.</p>
<h3>Updates to the default source structure</h3>
<p>Prior to RC4, the <code>composer.json</code> mapped the <code>App</code> namespace to the <code>src/</code> directory,
and the <code>AppTest</code> namespace to the <code>test/</code> directory. We felt that this provided an
unreasonable limitation on application structure, and decided to change it as follows:</p>
<ul>
<li>We created the directory <code>src/App/</code>.</li>
<li>We pushed the <code>src/Action/</code> directory to <code>src/App/Action/</code>.</li>
<li>We created the directory <code>test/AppTest/</code>.</li>
<li>We pushed the <code>test/Action/</code> directory to <code>test/AppTest/Action/</code>.</li>
<li>We updated the autoloading entries in <code>composer.json</code> to map the <code>App</code> and
<code>AppTest</code> namespaces to the new subdirectories.</li>
</ul>
<p>The changes allow you to have multiple top-level namespaces under the <code>src/</code> directory,
and will help encourage a <a href="https://github.com/zendframework/zend-expressive-skeleton/pull/31">modular structure</a>
(similar to ZF2 modules, Symfony bundles, Laravel packages, etc.).</p>
<h3>Composer &quot;serve&quot; command</h3>
<p>To simplify serving your application via the built-in PHP web server, we have added
a Composer script named &quot;serve&quot;, which simply executes <code>php -S 0.0.0.0:8080 -t public/</code>.
You can invoke it as:</p>
<pre><code class="language-bash">$ composer serve
</code></pre>
<h3>Caching simplification</h3>
<p>In the skeleton application, we allow you to opt-in to configuration caching. Prior
to RC4, cached configuration was saved as a JSON serialized string; with the update
to RC4, it is now cached as a PHP file, allowing it to be pulled in via <code>include()</code>.
This approach is both simpler and more performant. Again, the <a href="#upgrading">Upgrading</a>
section below will detail how to modify your existing installation to make this
change.</p>
<h3>Twig configuration updates</h3>
<p>Version 0.3.0 of zend-expressive-twigrenderer made changes to the configuration format
for Twig users. While the old configuration can still be used, RC4 updates the default
configuration to follow the new recommended structure.</p>
<h3>zend-view configuration updates</h3>
<p>Version 0.4.0 of zend-expressive-zendviewrenderer (zend-view integration) added
the ability to consume a configured <code>Zend\View\HelperPluginManager</code> service, when
available, and also provides a factory for it. Additionally, that factory allows
using the top-level <code>view_helpers</code> key to provide additional plugins (using standard
zend-servicemanager style configuration).</p>
<p>RC4 of the Expressive skeleton updates the default zend-view configuration to
register the <code>HelperPluginManager</code>, and to define the top-level <code>view_helpers</code>
configuration key.</p>
<h3>Cross-platform documentation</h3>
<p>The &quot;usage examples&quot; section of the documentation has a section on &quot;Hello World
Using a Configuration-Driven Container&quot;. This documentation detailed using PHP's
<code>glob()</code> function to aggregate configuration files. However, <code>glob()</code> does not
work identically on all platforms.</p>
<p>The documentation has been updated to use <code>Zend\Stdlib\Glob::glob()</code>, which is
a cross-platform shim for <code>glob()</code>.</p>
<h3>Cookbook entries</h3>
<p>Two new entries have been added to the cookbook, one for configuring zend-view to
use helpers from other components (such as zend-form), and another detailing how
to add and configure custom zend-view view helpers.</p>
<h2>Upgrading</h2>
<p>If you're already using Expressive, you'll want to upgrade! To do so, you'll
need to make a few changes to your application.</p>
<h3>Dependency updates</h3>
<ul>
<li>You'll want to update zendframework/zend-expressive to RC4; this should happen on
a <code>composer update</code>.</li>
<li>You'll want to update zendframework/zend-expressive-helpers to <code>^1.2</code>, if you
are using them.</li>
</ul>
<h3>Configuration changes</h3>
<p>Configuration changes are only necessary if (a) you are upgrading from a
previous release candidate, (b) using the <code>UrlHelper</code>, and/or (c) using Twig or
zend-view.</p>
<h4>UrlHelper changes</h4>
<p>For the <code>UrlHelper</code>, you will need to make the following additions to the
<code>config/autoload/middleware-pipeline.global.php</code> file:</p>
<pre><code class="language-php">use Zend\Expressive\Helper;

return [
    'dependencies' =&gt; [
        'factories' =&gt; [
            /* ... */
            Helper\UrlHelperMiddleware::class =&gt; Helper\UrlHelperMiddlewareFactory::class,
        ],
    ],
    'middleware_pipeline' =&gt; [
        'pre_routing' =&gt; [
            // This entry was originally just for the ServerUrlMiddleware;
            // make it an array listing both that and the UrlHelperMiddleware,
            // as below:
            [
                'middleware' =&gt; [
                    Helper\ServerUrlMiddleware::class,
                    Helper\UrlHelperMiddleware::class,
                ],
            ],
            /* ... */
        ],
        'post_routing' =&gt; [
            /* ... */
        ],
    ],
    /* ... */
];
</code></pre>
<h4>Twig changes</h4>
<p>In the Twig configuration file, <code>config/autoload/templates.global.php</code>,
originally the structure was as follows:</p>
<pre><code class="language-php">return [
    'dependencies' =&gt; [ /* ... */ ],
    'templates' =&gt; [
        'extension' =&gt; 'html.twig',
        'cache_dir' =&gt; 'data/cache/twig',
        'assets_url' =&gt; '/',
        'assets_version' =&gt; null,
        'paths' =&gt; [
            'app' =&gt; ['templates/app'],
            'layout' =&gt; ['templates/layout'],
            'error' =&gt; ['templates/error'],
        ],
    ],
];
</code></pre>
<p>While this will continue to work, we recommend updating to the following structure:</p>
<pre><code class="language-php">return [
    'dependencies' =&gt; [ /* ... */ ],
    'templates' =&gt; [
        'extension' =&gt; 'html.twig',
        'paths' =&gt; [
            'app' =&gt; ['templates/app'],
            'layout' =&gt; ['templates/layout'],
            'error' =&gt; ['templates/error'],
        ],
    ],
    'twig' =&gt; [
        'cache_dir' =&gt; 'data/cache/twig',
        'assets_url' =&gt; '/',
        'assets_version' =&gt; null,
        'extensions' =&gt; [
            // extension service names or instances
        ],
    ],
];
</code></pre>
<h4>zend-view changes</h4>
<p>If you are upgrading from a previous release candidate, we recommend making the
following changes to your <code>config/autoload/templates.global.php</code> file:</p>
<pre><code class="language-php">return [
    'dependencies' =&gt; [
        'factories' =&gt; [
            /* ... */
            Zend\View\HelperPluginManager::class =&gt;
                Zend\Expressive\ZendView\HelperPluginManagerFactory::class,
        ],
    ],

    'templates' =&gt; [
        /* ... */
    ],

    // Also, add this key, to provide a place to register view helpers:
    'view_helpers' =&gt; [
        'aliases' =&gt; [ /* ... */ ],
        'invokables' =&gt; [ /* ... */ ],
        'factories' =&gt; [ /* ... */ ],
        // add other keys as necessary
    ],
]
</code></pre>
<h3>Autoloading/structure changes</h3>
<p>If you want to bring your application fully up-to-date with the expressive skeleton,
you may want to consider creating a top-level <code>src/App/</code> directory, and pushing
your <code>Action/</code> and other subdirectories under it, and updating the <code>App\\</code> namespace
autoloading entry in <code>composer.json</code> to point to the new directory:</p>
<pre><code># source trees become:
src/
    App/
        Action/
test/
    AppTest/
        Action/
</code></pre>
<p>and the <code>autoload</code> and <code>autoload-dev</code> sections of <code>composer.json</code> become:</p>
<pre><code class="language-javascript">&quot;autoload&quot;: {
    &quot;psr-4&quot;: {
        &quot;App\\&quot;: &quot;src/App/&quot;,
    }
},
&quot;autoload-dev&quot;: {
    &quot;psr-4&quot;: {
        &quot;AppTest\\&quot;: &quot;test/AppTest/&quot;,
    }
}
</code></pre>
<p>The above will allow you to start considering your middleware as discrete units
of functionality, and potentially allow you to port them betweeen applications.</p>
<h2>Future</h2>
<p>In just two days, we've had quite a large number of users reporting their
feedback, and we're quite pleased that the majority of the work done for RC4
centered around documentation! The release has a lot of polish at this point,
and we anticipate a stable release in the next couple weeks.</p>
<p>If you are testing Expressive — whether for the first time, or updating an
existing application — please help us prepare it for general availability!</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Expressive 1.0.0RC3 Released!</title>
      <pubDate>Mon, 07 Dec 2015 19:00:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/expressive-1-0-0rc3-released.html</link>
      <guid>http://framework.zend.com/blog/expressive-1-0-0rc3-released.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>The Zend Framework community is pleased to announce the immediate availability of Expressive 1.0.0rc3!</p>
<p>You can install it using <a href="https://getcomposer.org">Composer</a>, using the <code>create-project</code> command:</p>
<pre><code class="language-bash">$ composer create-project zendframework/zend-expressive-skeleton:1.0.0rc3@rc expressive
</code></pre>
<p>If you're already using Expressive, read below for how to update your application!</p><h2>Changes in RC3</h2>
<p>RC3 shows a number of improvements, including a number of <em>new components</em> created
in order to improve interoperability with other <a href="http://www.php-fig.org/psr/psr-7/">PSR-7</a>
middleware solutions.</p>
<h3>New Components</h3>
<p>First, we split our routing and templating subcomponents into their own
repositories and packages:</p>
<ul>
<li>
<a href="https://github.com/zendframework/zend-expressive-router">zendframework/zend-expressive-router</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-expressive-template">zendframework/zend-expressive-template</a>
</li>
</ul>
<p>These contain the code that was originally in <code>Zend\Expressive\Router</code> and
<code>Zend\Expressive\Template</code> (with some additions; see below), and the subcomponents
were removed from the Expressive tree entirely. Expressive now <em>depends</em> on
these packages. <em>This separation allows users of other PSR-7 middleware stacks
to use the routing and templating interfaces, as well as their implementations,
within their chosen stack.</em></p>
<p>Next, we created a new package, <a href="https://github.com/zendframework/zend-expressive-helpers">zendframework/zend-expressive-helpers</a>.
This package contains utility classes and middleware useful to Expressive, but
which could be useful to other PSR-7 frameworks as well:</p>
<ul>
<li>
<code>Zend\Expressive\Helper\ServerUrlHelper</code> provides a class for generating fully-qualified
URIs based on the current request. When you provide a path to the helper, that path
will be resolved based on the current request scheme and target. This helper depends
on dedicated middleware to seed it with the current request, which is also provided
in the package.</li>
<li>
<code>Zend\Expressive\Helper\UrlHelper</code> provides a class for generating URI paths
based on the current <code>RouterInterface</code> instance present, delegating to its
<code>generateUri()</code> method. It also has awareness of the matched <code>RouteResult</code> (more
on that later), allowing you to generate &quot;self&quot; URIs, as well as URIs with
partial parameters based on the currently matched route.</li>
</ul>
<p>You can read about the new helpers <a href="http://zend-expressive.readthedocs.org/en/latest/helpers/intro/">in the documentation</a>.</p>
<h2>Fixes and Improvements</h2>
<h3>RouteResult observers</h3>
<p>In order to provide the functionality in <code>Zend\Expressive\Helper\UrlHelper</code>, we needed
a way to inform classes of the routing results. To accomplish this, we added the following
to the zend-expressive-router package:</p>
<ul>
<li>
<code>Zend\Expressive\Router\RouteResultSubjectInterface</code>, which defines a class that will
obtain a <code>RouteResult</code> and notify observers; and</li>
<li>
<code>Zend\Expressive\Router\RouteResultObserverInterface</code>, which defines a class that will
be updated with a <code>RouteResult</code>.</li>
</ul>
<p><code>Zend\Expressive\Application</code> now implements the <code>RouteResultSubjectInterface</code>, and <code>UrlHelper</code>
is an example of an observer.</p>
<p>The documentation <a href="http://zend-expressive.readthedocs.org/en/latest/router/result-observers/">now contains information on route result observers</a>,
should you want more details on the feature.</p>
<p>A small number of fixes and improvements were also made during the RC3 lifecycle.</p>
<h3>Create Middleware Pipelines</h3>
<p><a href="https://github.com/michaelmoussa">Michael Moussa</a> provided a feature to allow specifying
not just concrete middleware, but <em>arrays</em> of middleware both when creating routed middleware
as well as when adding middleware to the pre/post_routing middleware pipelines.</p>
<p>To illustrate:</p>
<pre><code class="language-php">// Manually, for pipeline middleware:
$app-&gt;pipe('/api', [
    'Authentication',
    'Authorization',
    'ContentNegotiation',
    'Validation',
    'Resource',
]);

// Manually, for routed middleware:
$app-&gt;get('/api/resource[/{id:\d+}]', [
    'Authentication',
    'Authorization',
    'ContentNegotiation',
    'Validation',
    'Resource',
]);

// Via configuration, for pipeline middleware:
return [
    'middleware_pipeline' =&gt; [
        'pre_routing' =&gt; [
            [
                'path' =&gt; '/api',
                'middleware' =&gt; [
                    'Authentication',
                    'Authorization',
                    'ContentNegotiation',
                    'Validation',
                    'Resource',
                ],
            ],
        ],
    ],
];

// Via configuration, for routed middleware:
return [
    'routes' =&gt; [
        [
            'name' =&gt; 'api',
            'path' =&gt; '/api',
            'middleware' =&gt; [
                'Authentication',
                'Authorization',
                'ContentNegotiation',
                'Validation',
                'Resource',
            ],
            'allowed_method' =&gt; ['GET'],
        ],
    ],
];
</code></pre>
<p>In each case, any individual middleware in the list may be a callable
middleware, or the name of a service that resolves as middleware.</p>
<p>This feature should allow creating unique, complex middleware pipelines based
on specific routes a snap!</p>
<h3>Casting view models to arrays</h3>
<p>One feature users of zend-view wanted was the ability to pass <code>ViewModel</code> instances
to a renderer. Prior to RC3, if you provided a view model, normalization would destroy
any variables stored in the view model due to improper casting. This has now been resolved.</p>
<h3>Get the Full RouteResult</h3>
<p>The full <code>RouteResult</code> is now injected into the request as the attribute <code>Zend\Expressive\Router\RouteResult</code>.</p>
<h3>Fewer Silent Failures</h3>
<p>A contributor provided <a href="https://github.com/zendframework/zend-expressive/pull/197">a patch</a> that
improves the <code>ApplicationFactory</code> by raising exceptions when key services are missing, instead of
silently ignoring them. While this is a small backwards compatibility break, it provides important
information that previously led to hard-to-debug issues.</p>
<h3>Twig improvements</h3>
<p>The <a href="https://github.com/zendframework/zend-expressive-twigrenderer">zendframework/zend-expressive-twigrenderer</a>
package now allows you to register custom extensions. See the <a href="https://github.com/zendframework/zend-expressive-twigrenderer/releases/tag/0.3.0">0.3.0 changelog for details</a>
(which is the first version introducing this capability).</p>
<h3>zend-view improvements</h3>
<p>The <a href="https://github.com/zendframework/zend-expressive-zendviewrenderer">zendframework/zend-expressive-zendviewrenderer</a>
package had a number of usability updates:</p>
<ul>
<li>It now adds the zendframework/zend-i18n package as a dependency, as it's a requirement of the PhpRenderer.</li>
<li>It now provides concrete <code>ServerUrlHelper</code> and <code>UrlHelper</code> helper classes, as wrappers around the
zendframework/zend-expressive-helpers equivalents. This change allowed reducing dependencies, and
now allows the package to be used without Expressive.</li>
<li>It now provides a factory for the <code>HelperPluginManager</code>, allowing you to provide your own
instance, and thus custom helpers.</li>
</ul>
<h3>Document Creating Custom 404 Handlers</h3>
<p><a href="https://github.com/samsonasik">Abdul Malik Ikhsan</a> provided documentation covering how
to create a custom 404 handler for your application for logic such as logging.  You
<a href="http://zend-expressive.readthedocs.org/en/latest/cookbook/#how-can-i-set-custom-404-page-handling">can read it in the cookbook</a>.</p>
<h2>Upgrading</h2>
<p>If you're already using Expressive, you'll want to upgrade! To do so, you'll
need to make a few changes to your application.</p>
<h3>Dependency updates</h3>
<ul>
<li>Update <code>zendframework/zend-expressive</code> to <code>~1.0.0@rc || ^1.0</code>. This will also make
it easier to upgrade to the stable version when it comes out.</li>
<li>Update any <code>zendframework/zend-expressive-*</code> components to <code>^1.0</code>. These include
your chosen router and template system (if any).</li>
<li>Potentially add <code>zendframework/zend-expressive-helpers</code> (at <code>^1.1</code>), if you plan
to use the <code>UrlHelper</code> or <code>ServerUrlHelper</code>. (If you're using the zend-view renderer,
you'll already be getting this dependency.)</li>
</ul>
<h3>Configuration changes</h3>
<p>The only configuration changes necessary are if you want to use the new helpers. If you
won't be, and you're not using zend-view, you can skip this section.</p>
<p>First, add service entries for each to <code>config/autoload/dependencies.global.php</code>:</p>
<pre><code class="language-php">use Zend\Expressive\Helper;

return [
    'dependencies' =&gt; [
        'invokables' =&gt; [
            Helper\ServerUrlHelper::class =&gt; Helper\ServerUrlHelper::class,
            /* ... */
        ],
        'factories' =&gt; [
            Helper\UrlHelper::class =&gt; Helper\UrlHelperFactory::class,
            /* ... */
        ],
    ],
];
</code></pre>
<p>Next, you'll need to add the <code>ServerUrlMiddleware</code> to the midddleware pipeline. Edit
<code>config/autoload/middleware-pipeline.global.php</code> as follows:</p>
<pre><code class="language-php">use Zend\Expressive\Helper;

return [
    // This section will likely be new:
    'dependencies' =&gt; [
        'factories' =&gt; [
            Helper\ServerUrlMiddleware::class =&gt; Helper\ServerUrlMiddlewareFactory::class,
        ],
    ],
    // This section existed, but needs edits:
    'middleware_pipeline' =&gt; [
        'pre_routing' =&gt; [
            // Add the following:
            [ 'middleware' =&gt; ServerUrlMiddleware::class ],
            /* ... */
        ],
        'post_routing' =&gt; [
            /* ... */
        ],
    ],
];
</code></pre>
<p>Once these changes are made, your application should now be ready to use the helpers.</p>
<h2>Future</h2>
<p>We're very excited about this release! Thanks to a large number of testers and users,
we've been able to refine the offering, and improve our ability to interoperate in the
PSR-7 ecosystem. We feel this version provides a nice sweet spot for the initial
stable features, and anticipate a stable release in the next couple weeks.</p>
<p>If you are testing Expressive — whether for the first time, or updating an
existing application — please help us polish the release and get it ready
for general availability!</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Zend Framework 3 Update and Roadmap</title>
      <pubDate>Wed, 25 Nov 2015 21:45:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/zend-framework-3-update-and-roadmap.html</link>
      <guid>http://framework.zend.com/blog/zend-framework-3-update-and-roadmap.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>In October, while at ZendCon, I presented a talk on Zend Framework 3 entitled
&quot;Components, PSR-7, and Middleware: Zend Framework 3.&quot; You can
<a href="http://weierophinney.github.io/2015-10-22-ZF3/">view it online</a>, but this post
discusses current status, details some decisions, and points to the work still
to be done.  It's a long read; grab a warm beverage, maybe some popcorn, and
take your time.</p><h2>Prelude</h2>
<p>Zend Framework 3 is not just a new release of the framework. It's an <em>initiative</em>,
encompassing a number of strategies and projects. Do not get hung up on when the
main Zend Framework repository will be tagged as 3.0; the MVC is just one part
of an overall plan. This post details those parts; many of them are <em>already
accomplished.</em> Hopefully, by the end of this post, you'll see what you can
already leverage, and what you <em>may already be leveraging.</em></p>
<p>Mirroring my ZendCon presentation, I've broken this out into four primary parts:
Components, PSR-7, Middleware, and Zend Framework 3.</p>
<h2>Components</h2>
<p>Zend Framework was originally envisioned and positioned as a component library
that <em>also</em> shipped an MVC framework. Unlike <a href="http://pear.php.net">PEAR</a>, it was
all-or-nothing; if you wanted a single component, you downloaded the entire
framework; if you wanted to use the MVC framework, you downloaded the entire
framework. Over time, the MVC became the predominant feature, and most code was
written or adapted to ensure the various components worked properly when used
with the framework, with very little emphasis on standalone usage.</p>
<p>When we started on ZF2, we essentially continued down this path. However, early
in the ZF2 development, <a href="https://getcomposer.org">Composer</a> emerged in the PHP
ecosystem, and we decided to leverage that both for distribution of ZF itself,
but also for its components. However, the semi-manual/semi-automated approach we
used made components second-class citizens, requiring them to be versioned
simultaneously, resulting in slower releases.</p>
<p>As a result, a primary goal of the ZF3 initiatives was to split the components
into their own repositories, with their own development cycles; the main Zend
Framework repository then becomes a meta-package, defining the individual
components as dependencies, but shipping no actual code.</p>
<p>The split took quite some time to orchestrate, but
<a href="https://mwop.net/blog/2015-05-15-splitting-components-with-git.html">was accomplished in May</a>,
with the help of <a href="https://github.com/gianarb">Gianluca Arbezzano</a> and
<a href="http://www.corley.it/">Corley</a>, and released as version 2.5.</p>
<p>I'll be following up this post with some of the benefits we've gained from the
split, but the overall point is that the separation will help us improve
components more granularly, expand the number of contributors, and accelerate
component development.</p>
<p>Composer has been wildly successful. It simplifies and streamlines the ability
to manage application dependencies, as well as consume them in your code (by
providing a common autoloader for all dependencies). Our observation is that an
increasing number of developers and companies are choosing to piece together
bespoke frameworks targeted at their business needs using commodity components.
Splitting component lifecycles facilitates usage of ZF components in these
paradigms.</p>
<h2>PSR-7</h2>
<p><a href="http://www.php-fig.org/psr/psr-7/">PSR-7</a> (<a href="http://www.php-fig.org/psr/psr-7/meta/">meta</a>)
defines a set of HTTP message interfaces. PHP Standard Recommendations (PSR) are
a product of the <a href="http://www.php-fig.org/">Framework Interop Group</a>, which
exists to identify existing practices and development approaches, and
standardize them, with the goal of increasing interoperability between
frameworks and libraries. Composer is the fruit of the very first PSR,
<a href="http://www.php-fig.org/psr/psr-0/">PSR-0</a>, which provided a common methodology
around autoloading.</p>
<p>PSR-7 exists because PHP, for all its web centricity, does not actually model
HTTP messages. Most frameworks have provided message abstraction of one form or
another since 2005, but they all differ, which means migrating from one
framework or HTTP client library to another — or even one <strong>version</strong> of
such a project to another — requires learning a new system for dealing
with HTTP messages.</p>
<p>Interestingly, other languages, including Python, Ruby, and Node.js, <em>do</em>
provide common HTTP message abstractions, and the result is that code written
targeting HTTP messages will typically work regardless of the framework chosen.
This leads to a lot of cross-pollination, and allows developers to pick and
choose libraries based on their strengths and features, not on the framework.</p>
<p>Many of us in the PHP community feel that HTTP message abstractions should be a
<em>commodity</em>.</p>
<p>PSR-7 accomplishes this, and code targeting PSR-7 can thus be re-used by any
framework or project that also consumes PSR-7.</p>
<p>PSR-7 was accepted in mid-May; the same day it was accepted, we released:</p>
<ul>
<li>
<a href="https://github.com/zendframework/zend-diactoros">Diactoros</a>, a PSR-7
implementation.</li>
<li>
<a href="https://github.com/zendframework/zend-stratigility">Stratigility</a>, a
PSR-7 middleware foundation inspired by <a href="https://github.com/senchalabs/connect">Sencha Connect</a>.</li>
</ul>
<p>We feel that PSR-7 is the future of PHP interoperability when writing
HTTP-centric applications, and these components form a foundation for projects
that choose to target PSR-7.</p>
<h2>Middleware and Expressive</h2>
<p>When describing Stratigility in the previous section, I used the term
&quot;middleware.&quot; What is middleware?</p>
<p>Middleware is, quite simply, code sitting between an incoming HTTP request, and
the outgoing HTTP response. There are a number of different middleware
signatures floating around (subject for a pending blog post!), but the one we've
implemented in Stratigility is:</p>
<pre><code class="language-php">function (
    ServerRequestInterface $request
    ResponseInterface $response,
    callable $next
) : ResponseInterface
</code></pre>
<p>where <code>$next</code> can be used to invoke the next middleware in the system, if any.
This same signature is being adopted by a number of emerging PSR-7
centric projects such as <a href="http://relayphp.com">Relay</a>, and <a href="http://www.slimframework.com/2015/02/11/whats-up-with-version-3.html">Slim v3</a>.</p>
<p><a href="http://framework.zend.com/expressive">Expressive</a> is a new <em>microframework</em> for
building PSR-7 middleware applications.</p>
<p>Built on top of Stratigility, Expressive is meant to provide minimal plumbing
for your applications. A primary goal is to allow <em>you</em> to choose the components
you want, and then to provide minimal wiring to get you started. It provides:</p>
<ul>
<li>typehinting against <a href="https://github.com/container-interop/container-interop">container-interop</a>
allowing <em>you</em> to select a service container from which to pull middleware
once matched.</li>
<li>a <code>RouterInterface</code>, and several implementations, so you can choose a routing
implementation that best suits your application needs.</li>
<li>a <code>TemplateRendererInterface</code>, and several implementations, so you can choose
a template engine that suits the needs of the middleware you write that may
use templating — and allow you to swap out engines seamlessly.</li>
<li>an error handling mechanism, and choices for how to handle errors in both
development and production.</li>
</ul>
<p>We leverage Composer's installation hooks to prompt you for your choices (thanks
for the contribution, <a href="https://xtreamwayz.com">Geert</a>!), so that once you
install the Expressive skeleton, you're prepared to start developing
immediately.</p>
<p>Expressive is currently in release candidate status, and we hope to finalize a
stable release soon!</p>
<p>We like middleware because:</p>
<ul>
<li>it tends to be very focused and small, and thus readily understood.</li>
<li>it adapts the <a href="https://en.wikipedia.org/wiki/Unix_philosophy">Unix philosphy</a>
(creating complex behavior by piping messages between single-purpose tools)
to HTTP applications.</li>
<li>it tends to be quite performant.</li>
</ul>
<p>Any middleware that targets PSR-7 also gains the ability to interop with any
other system targeting PSR-7. This means that the ecosystem for middleware users
is not a single framework, but any framework that uses PSR-7. We're already
seeing <a href="http://github.com/oscarotero/psr7-middlewares">amazing middleware libraries</a>
popping up, and these will work <em>across the PHP ecosystem</em>. Providing a
middleware microframework via Expressive allows our users to capitalize on this.</p>
<h2>Zend Framework 3</h2>
<p>For many, &quot;Zend Framework 3&quot; means the MVC framework; as such, much of the above
may feel like a sideshow, not the main thrust of the new version. This is a
misconception.</p>
<p>We decided early this year that we will <em>not</em> be changing the MVC significantly.</p>
<p>When we went from version 1 to version 2, we did a complete rewrite of the MVC.
While the new MVC is architecturally superior, its completely different
structure meant there was zero way to automate migration, which left many ZF1
users stranded. We did not want to repeat this mistake.</p>
<p>Additionally, the primary issues around the current MVC are:</p>
<ul>
<li>performance</li>
<li>interoperability (specifically, ability to use middleware)</li>
</ul>
<p>These are things we <em>can</em> tackle, while retaining most, if not all, backwards
compatibility.</p>
<p>As such, the primary changes we identified were:</p>
<ul>
<li>zend-servicemanager performance</li>
<li>zend-eventmanager performance</li>
<li>ability to dispatch PSR-7 middleware</li>
<li>reduction of dependencies</li>
</ul>
<h3>ServiceManager</h3>
<p>We feel zend-servicemanager offers some unique features that are not found in
other containers:</p>
<ul>
<li>lazy services</li>
<li>delegator services</li>
<li>interface injection (via initializers)</li>
<li>abstract factories</li>
</ul>
<p>As such, there are tremendous reasons to choose it over other containers.
However, when you have large object graphs, and if you're heavily using features
such as abstract factories and initializers, the design in v2 can become
tremendously slow.</p>
<p><a href="http://www.michaelgallego.fr">Michäel Gallego</a> did some deep analysis of the
service manager, and identified ways the performance could be radically
improved, providing a hefty patch to do so. The main issue was that much of the
code for loading services was checking for state changes in the container; as
such, the main thrust of the patch Michäel provided was to have state changes
— additions of factories to the container — reconfigure the
container, so that <em>pulling</em> from the container becomes cheap. The result is a
4X performance boost that is <em>mostly</em> backwards compatible!</p>
<p>There are a few BC breaks with this change, however, which means any component
that provides factories is requiring updates to be compatible. These are mostly
minor, and we're currently working on ways we may be able to make code forwards
compatible while retaining backwards compatibility.</p>
<p>You can read about the changes in the <a href="https://github.com/zendframework/zend-servicemanager/blob/develop/doc/book/migration.md">migration guide</a>.</p>
<h3>EventManager</h3>
<p>Similarly, zend-eventmanager is a unique offering, providing mechanisms for:</p>
<ul>
<li>intercepting filters</li>
<li>subject/observer</li>
<li>signal slots</li>
<li>events</li>
</ul>
<p>In order to accomplish this, however, it has a lot of code around checking for
changes in shared listeners. Additionally, it has leveraged shared solutions
such as the <code>PriorityQueue</code> implementation in zend-stdlib, which provide
necessary features, but often at a performance cost.</p>
<p>Michäel Gallego, along with <a href="http://www.zimuel.it">Enrico Zimuel</a>, performed
comprehensive profiling, and provided a refactor of the component that resulted
in 4X performance benefits!</p>
<p>You can read about the changes in the <a href="https://github.com/zendframework/zend-eventmanager/tree/develop/doc/book/migration">migration guide</a>.
Of particular interest is that the 2.7 version provides forwards compatibility
features allowing you to prepare your applications <em>now</em> for version 3!</p>
<h3>Dispatching Middleware</h3>
<p>As noted in the previous section on PSR-7, we feel that the future of
PHP web applications is in middleware. We want users to benefit from the
middleware ecosystem, but also to migrate to it. To enable this, we decided to
build a <code>MiddlewareListener</code> for zend-mvc.</p>
<p>First, though, we had to build <a href="https://github.com/zendframework/zend-psr7bridge">a PSR-7 bridge</a>,
to allow translation of the zend-http request and response messages already
present in zend-mvc to PSR-7, and vice versa. (We chose <em>not</em> to use PSR-7
directly in zend-mvc, as doing so would require changes anywhere you were
previously using the request and/or response objects.) This code can be used
now, anywhere you need to do such translations.</p>
<p>With that out of the way, we developed the <code>MiddlewareListener</code>. In v3, this
will be registered by default, at a higher priority than the standard
<code>DispatchListener</code>. If it detects a <code>middleware</code> key in the route matches, it
will pull that middleware from the container and dispatch it, using the PSR-7
bridge; otherwise, it will return early, allowing the <code>DispatchListener</code> to take
over.</p>
<p>The <code>MiddlewareListener</code> thus becomes your migration path from the zend-mvc to
Expressive or other middleware stacks, but also allows you to compose middleware
from the greater ecosystem in your zend-mvc applications!</p>
<p>This feature is available currently on the develop branch of zend-mvc, and will
be released with v3 of that component.</p>
<h3>Reducing Dependencies</h3>
<p>Currently, the framework repository requires <em>every</em> Zend Framework component
(except the new ones such as Diactoros, Stratigility, Expressive, and the PSR-7
bridge). This poses a problem: what if we want to update another component
earlier than others? How will users then opt-in to such new versions?</p>
<p>As an example, we're pushing back plans for refactoring the filter, validator,
input filter, and form components, as the proposed changes will take quite some
time. However, not every application <em>needs</em> these facilities, and those that do
<em>should</em> be able to selectively upgrade. But if we pin to semantic versions
— e.g., <code>~3.0</code> — users will not be able to do so until the framework
upgrades, making it an all or nothing approach.</p>
<p>As such, we've decided to change the requirements for zend-mvc, the framework
repository, and the skeleton to the bare minimum needed for an MVC application.
We're still scoping this effort, however, so there's time to get your feedback
considered.</p>
<p>This will, of course, affect existing applications. You will need to add in
dependencies that previously were assumed. Composer, however, makes these
relatively trivial:</p>
<pre><code class="language-bash">$ composer require zendframework/zend-form
$ composer require zendframework/zend-session
$ composer require zendframework/zend-paginator
</code></pre>
<p>The more problematic part of this will be registration of abstract factories,
plugin managers, etc. We're still working on a plan for that, and encourage you
<a href="https://github.com/zendframework/zend-mvc/issues/46">to share any ideas you might have around it</a>.</p>
<h2>Documentation</h2>
<p>One area where Zend Framework is consistently criticized is its documentation.</p>
<ul>
<li>We don't have enough documentation</li>
<li>Documentation isn't updated to reflect new features.</li>
<li>Documentation doesn't detail how to consume a component within the MVC
framework; or</li>
<li>Documentation doesn't detail how to use the component standalone.</li>
</ul>
<p>With the split to component repositories, we can tackle some of this more
easily. We are in the process of moving all documentation into the relevant
component repositories, which allows us to block merging of features based on
lack of contributed documentation. This will help us keep the documentation
up-to-date.</p>
<p>However, we need help <em>writing</em> documentation. We need <em>you</em> to indicate what
documentation you feel is missing — and, better yet, <em>contribute</em> that
documentation, to help others in the same situation. One reflection I've made is
that writing documentation often also points to ways to improve the code; don't
discount writing documentation as a non-coding activity!</p>
<p>The documentation migration is being faciliated by <a href="http://blog.hock.in">Gary Hockin</a>.
He is automating the migration via a series of scripts, and also creating issues
on each repository indicating common updates that need to happen to fully
complete the transition from reStructured Text to Markdown. You can help by
perusing the list available at the link below, and submitting pull requests:</p>
<ul>
<li>
<a href="https://github.com/issues?utf8=%E2%9C%93&amp;q=is:open+is:issue+org:zendframework+label:documentation+label:EasyFix">Documentation migration issue list</a>
</li>
</ul>
<p>At the time of writing, he has not yet run the script over all repositories, but
indicates that he should accomplish this feat within the next 10 days; as such,
keep checking that link!</p>
<h2>Roadmap</h2>
<p>As noted, we've made significant progress since announcing the ZF3 initiative in
March. We still have a ways to go, however:</p>
<ul>
<li>We're still finalizing changes to Expressive prior to a stable release.</li>
<li>We're only halfway through the
<a href="https://github.com/zendframework/maintainers/wiki/ZF3-code-refactoring">list of components needing service manager and/or event manager migrations</a>,
and could use some assistance completing this task. We cannot do a zend-mvc
beta currently until this is done.</li>
<li>We're still identifying what components will be considered &quot;core&quot; to the MVC,
and could <a href="https://github.com/zendframework/zend-mvc/issues/46">use your feedback</a>.</li>
<li>Related, we're still identifying what components will be considered &quot;core&quot; to
the framework, if the list is not identical to those in the MVC; again,
<a href="https://github.com/zendframework/zf2/issues/7646">feedback is welcome</a>.</li>
</ul>
<p>For a number of considerations, we cannot at this time create a date-based
roadmap; we will do releases when code is ready and meets the project quality
guidelines. The links above, and in the documentation section, provide ways that
you can help; the more help we get, the sooner we can potentially release.</p>
<h2>Closing Notes</h2>
<p>First, this post was long, and also long overdue. My plan going forward is to
provide bi-weekly updates on the <a href="http://framework.zend.com/blog/">Zend Framework blog</a>,
so that you, Zend Framework's users and development community, can keep track
of progress. In those, I will also be listing areas where we can particularly
use contributions. Be aware, however, that with holidays coming up in many countries,
that progress will be slow in the short-term.</p>
<p>We're very excited about the Zend Framework 3 <em><strong>initiative</strong></em>. It's a change in
direction for the framework, returning to its roots as a component library
first, which happens to also provide a full-stack framework.</p>
<p>We see ZF3 as a movement: an end to framework silos, by providing quality,
commodity code that can be used everwhere and anywhere. An end to saying &quot;I'm a
ZF developer,&quot; or &quot;I'm a Laravel developer,&quot; and a return to, &quot;I'm a PHP
developer.&quot; We hope you'll help us complete that journey!</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Zend Framework 1.12.17 and 2.4.9 Released!</title>
      <pubDate>Mon, 23 Nov 2015 20:30:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/zend-framework-1-12-17-and-2-4-9-released.html</link>
      <guid>http://framework.zend.com/blog/zend-framework-1-12-17-and-2-4-9-released.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
    The Zend Framework community is pleased to announce the immediate availability
    of:
</p>

<ul>
    <li>Zend Framework <strong>1.12.17</strong></li>
    <li>Zend Framework <strong>2.4.9</strong></li>
</ul>

<ul>
    <li>
        <a href="/downloads/latest">http://framework.zend.com/downloads/latest</a>
    </li>
</ul>

<p>
    These releases contain security fixes.
</p><h2>Security Fixes</h2>

<h3>ZF2015-09</h3>

<p>
    <a href="/security/advisory/ZF2015-09">ZF2015-09</a> provides a security hardening
    patch for users of our word-based CAPTCHA adapters, ensuring better randomization
    of the letters generated.
</p>

<p>
    This particular issue touches each of the following projects, and was fixed in the
    versions specified:
</p>

<ul class="ul">
    <li>Zend Framework 1, version 1.12.17</li>
    <li>Zend Framework 2, versions 2.4.9</li>
    <li>zend-captcha, versions 2.4.9 and 2.5.2</li>
</ul>

<h3>ZF2015-10</h3>

<p>
    <a href="/security/advisory/ZF2015-10">ZF2015-10</a> addresses potential information
    disclosure for users of Zend Framework's <code>Zend\Crypt\PublicKey\Rsa</code> support,
    due to an insecure OpenSSL padding default. The issue is patched in Zend
    Framework 2.4.9 and zend-crypt 2.4.9/2.5.2.
</p>

<h2>Changelog</h2>

<p>
    For the full changelog on each version:
</p>

<ul>
    <li><a href="/changelog/1.12.17">http://framework.zend.com/changelog/1.12.17</a></li>
    <li><a href="/changelog/2.4.9">http://framework.zend.com/changelog/2.4.9</a></li>
</ul>

<h2>Long Term Support</h2>

<p>
    As a reminder, the 2.4 series is our current Long Term Support release, and will
    receive security and critical bug fixes until 31 March 2018.
</p>

<p>
    You can opt-in to the LTS version by pinning your <code>zendframework/zendframework</code>
    <a href="https://getcomposer.org">Composer</a> requirement to the version <code>~2.4.0</code>.
</p>

<p>
    <a href="/long-term-support">Visit our Long Term Support information page</a> for more information.
</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Zend Framework 1.12.16 and 2.4.8 Released!</title>
      <pubDate>Tue, 15 Sep 2015 19:00:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/zend-framework-1-12-16-and-2-4-8-released.html</link>
      <guid>http://framework.zend.com/blog/zend-framework-1-12-16-and-2-4-8-released.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
    The Zend Framework community is pleased to announce the immediate availability
    of:
</p>

<ul>
    <li>Zend Framework <strong>1.12.16</strong></li>
    <li>Zend Framework <strong>2.4.8</strong></li>
</ul>

<ul>
    <li>
        <a href="/downloads/latest">http://framework.zend.com/downloads/latest</a>
    </li>
</ul>

<p>
    These releases contain a security fixes.
</p><h2>Security Fixes</h2>

<h3>ZF2015-07</h3>

<p>
    <a href="/security/advisory/ZF2015-07">ZF2015-07</a> addresses attack vectors that
    arise due to incorrect permissions masks when creating directories and files
    within library code.
</p>

<p>
    This particular issue touches each of the following projects, and was fixed in the
    versions specified:
</p>

<ul class="ul">
    <li>Zend Framework 1, version 1.12.16</li>
    <li>Zend Framework 2, versions 2.4.8</li>
    <li>zf-apigility-doctrine, version 1.0.3</li>
    <li>zend-cache, versions 2.4.8 and 2.5.3</li>
</ul>

<h3>ZF2015-08</h3>

<p>
    <a href="/security/advisory/ZF2015-08">ZF2015-08</a> addresses potential null byte
    injection of SQL statements issued using Zend Framework's pdo_dblib
    (FreeTDS) and pdo_sqlite adapters. The issue is patched in Zend Framework 1.12.16.
</p>

<h2>Changelog</h2>

<p>
    For the full changelog on each version:
</p>

<ul>
    <li><a href="/changelog/1.12.16">http://framework.zend.com/changelog/1.12.16</a></li>
    <li><a href="/changelog/2.4.8">http://framework.zend.com/changelog/2.4.8</a></li>
</ul>

<p>
    In particular, the 2.4.8 release has numerous fixes in the InputFilter, Validator, and Form
    components introduced to increase stability and reinstate behavior prior to version 2.4.0.
    At this time, forms and input filters created using code from pre-2.4 should work identically.
</p>

<p>
    We have, however, <em>deprecated</em> the <code>allow_empty</code> and <code>continue_if_empty</code>
    flags, and provided notes in the changelog that describe alternatives to their usage. We have found 
    that these flags, particularly in combination with the <code>required</code> flag and validators,
    can lead to unexpected or unintended behavior, often contradictory. Deprecating them will
    allow us to introduce cleaner solutions in future releases.
</p>

<h2>Long Term Support</h2>

<p>
    As a reminder, the 2.4 series is our current Long Term Support release, and will
    receive security and critical bug fixes until 31 March 2018.
</p>

<p>
    You can opt-in to the LTS version by pinning your <code>zendframework/zendframework</code>
    <a href="https://getcomposer.org">Composer</a> requirement to the version <code>~2.4.0</code>.
</p>

<p>
    <a href="/long-term-support">Visit our Long Term Support information page</a> for more information.
</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Announcing Expressive</title>
      <pubDate>Wed, 26 Aug 2015 18:25:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/announcing-expressive.html</link>
      <guid>http://framework.zend.com/blog/announcing-expressive.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
    We are pleased to announce the immediate availability of a new project, 
    <a href="https://github.com/zendframework/zend-expressive">Expressive</a>!
</p>

<p>
    Expressive allows you to write <a href="http://www.php-fig.org/psr/psr-7/">PSR-7</a>
    <a href="https://github.com/zendframework/zend-stratigility/blob/master/doc/book/middleware.md">middleware</a>
    applications for the web. It is a simple micro-framework built on top of
    <a href="https://github.com/zendframework/zend-stratigility">Stratigility</a>, providing:
</p>

<ul>
    <li>Dynamic routing</li>
    <li>Dependency injection via container-interop</li>
    <li>Templating</li>
    <li>Error Handling</li>
</ul><h2>Installation and Quick Start</h2>

<p>
    Expressive can get you up and running with an application in minutes.
</p>

<p>
    To install, use <a href="https://getcomposer.org">Composer</a>:
</p>

<pre><code class="lang-bash">
$ composer require zendframework/zend-expressive aura/router zendframework/zend-servicemanager
</code></pre>

<p>
    From there to "hello, world,", all you now need is a single file:
</p>

<pre><code class="lang-php">
// In index.php
use Zend\Expressive\AppFactory;

require 'vendor/autoload.php';

$app = AppFactory::create();
$app->route('/', function ($request, $response, $next) {
    $response->getBody()->write('Hello, world!');
    return $response;
});
$app->run();
</code></pre>

<p>
    From there, fire up the built-in web server:
</p>

<pre><code class="lang-bash">
$ php -S 0.0.0.0:8080 -t .
</code></pre>

<p>
    Browse to localhost:8080, and you should see it running!
</p>

<p>
    Visit <a href="http://zend-expressive.readthedocs.org/en/stable/quick-start/">our documentation for the full quick start</a>.
</p>

<h2>Breaking out of the box</h2>

<p>
    A huge part of the PHP Renaissance has been due to the advent of
    <a href="https://getcomposer.org">Composer</a>, which has simplified dependency
    management, and led to tens of thousands of standalone libraries and packages.
    As such, frameworks, while still popular, are often being eschewed for
    homemade, application-specific frameworks made of commodity components.
    Frameworks simply cannot ignore this trend, and decoupling should become
    the norm going forward.
</p>

<p>
    With <a href="https://apigility.org">Apigility</a>, the Zend Framework team
    began using third party software as part of the solutions it provides. With
    Expressive, we took that even further: we provide abstractions for routing
    and templating capabilities, but largely rely on third-party libraries for
    the recommended implementations.
</p>

<p>
    Expressive features integrations with:
</p>

<ul>
    <li>Aura.Router</li>
    <li>FastRoute</li>
    <li>Pimple</li>
    <li>Plates</li>
    <li>Twig</li>
</ul>

<p>
    as well as related Zend Framework components. In most cases, integrations
    were developed for third party libraries <em>before</em> we wrote integrations
    with Zend Framework components!
</p>

<p>
    As such, Expressive is a small, single-purpose component that can integrate
    other components to create a custom middleware runtime for your applications.
</p>

<h2>Where does this fit with Zend Framework?</h2>

<p>
    We feel that PSR-7 opens new paradigms for both interoperability as well as
    for application design. Middleware offers a pattern for re-use and
    composability that is often far simpler to understand, and which often
    allows building complex applications from smaller pieces. As such, we want
    to provide an easy way to build middleware-based applications <em>now</em>.
</p>

<p>
    We will, however, continue to ship Zend Framework and its full-stack MVC.
    Many complex applications can benefit from the highly flexible structure it
    provides, and we plan to continue supporting those users well into the
    future. We also plan to add capabilities (quite soon!) for executing PSR-7
    based middleware from within Zend Framework applications; this provides
    migration paths in both directions for developers.
</p>

<h2>More Information and Roadmap</h2>

<p>
    Expressive is open source software, and we're trying to follow the mantra of
    "release early, release often." As such, our initial stable tag is at 0.1.0,
    and we're requesting that you start playing with it and letting us know what
    works and what doesn't. You can report issues on the <a href="https://github.com/zendframework/zend-expressive/issues">issue tracker</a>.
</p>

<p>
    One big push for us has been to document everything we can; you can currently
    <a href="http://zend-expressive.readthedocs.org/en/stable/">browse our documentation on ReadTheDocs</a>.
    If you have questions, changes, or additions you feel should be made, documentation
    is part of the code repository itself, and issues can be raised just as they can
    for code.
</p>

<p>
    While this is an initial offering, we've put a lot of thought into the various
    features and abstractions, and feel it is essentially feature complete. We do,
    however, have a bucket list of additional features we wish to support before
    we go stable:
</p>

<ul>
    <li>A skeleton application. Ideally, we would like Composer hooks that can
        ask which implementations for routing, container, and/or templating
        are desired. If you know how to do this, we'd love your help!</li>
    <li>Session encryption.</li>
    <li>HTTP Caching support.</li>
    <li>User authentication (via OAuth2 and/or other social auth mechanisms).</li>
</ul>

<p>
    Additionally, in the coming weeks, we'll be expanding our
    <a href="https://github.com/zendframework/zend-psr7bridge">PSR-7 &lt;-&gt; zend-http bridge</a>,
    and creating an alternate, PSR-7 middleware dispatcher that can be used
    with the ZF2 MVC.
</p>

<p>
    We welcome any assistance you as contributors can offer in these initiatives!
</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Zend Framework 1.12.15 and 2.4.7 Released!</title>
      <pubDate>Tue, 11 Aug 2015 17:30:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/zend-framework-1-12-15-and-2-4-7-released.html</link>
      <guid>http://framework.zend.com/blog/zend-framework-1-12-15-and-2-4-7-released.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
    The Zend Framework community is pleased to announce the immediate availability
    of:
</p>

<ul>
    <li>Zend Framework <strong>1.12.15</strong></li>
    <li>Zend Framework <strong>2.4.7</strong></li>
</ul>

<ul>
    <li>
        <a href="/downloads/latest">http://framework.zend.com/downloads/latest</a>
    </li>
</ul><h2>Zend Framework 1.12.15</h2>

<p>
    Zend Framework 1.12.15 contains several fixes to ensure backwards compatibility
    with previous releases as well as supported PHP versions:
</p>

<ul>
    <li><a href="https:/github.com/zendframework/zf1/pull/591">#591</a> ensures that
        thet patch introduced to fix <a href="/security/advisory/ZF2015-06">ZF2015-06</a>
        works for PHP 5.2 users.
    </li>

    <li><a href="https://github.com/zendframework/zf1/pull/587">#587</a> fixes a
        regular expression in <code>Zend_Http_Response::extractHeaders()</code> to ensure
        it will work with any valid header name, as well as empty header values.</li>
    <li><a href="https://github.com/zendframework/zf1/pull/597">#597</a> updates
        <code>Zend_Http_Client_Adapter_Curl</code> to ensure it properly distinguishes
        between the <code>timeout</code> and <code>request_timeout</code> options,
        using them to set <code>CURLOPT_CONNECTTIMEOUT</code> and <code>CURLOPT_TIMEOUT</code>,
        respectively.  </li>
</ul>

<p>
    For a full list of changes, see:
</p>

<ul>
    <li><a href="/changelog/1.12.15">http://framework.zend.com/changelog/1.12.15</a></li>
</ul>

<h2>Zend Framework 2.4.7</h2>

<p>
    Zend Framework 2.4.7 has a single change:
</p>

<ul>
    <li><a href="https://github.com/zendframework/zend-inputfilter/pull/15">zend-inputfilter #15</a>
        ensures that input filters can validate not just arrays, but objects implementing
        <code>ArrayAccess</code>, a scenario that broke with fixes introduced for 2.4.5.
    </li>
</ul>

<h2>Long Term Support</h2>

<p>
    As a reminder, the 2.4 series is our current Long Term Support release, and will
    receive security and critical bug fixes until 31 March 2018.
</p>

<p>
    You can opt-in to the LTS version by pinning your <code>zendframework/zendframework</code>
    <a href="https://getcomposer.org">Composer</a> requirement to the version <code>~2.4.0</code>.
</p>

<p>
    <a href="/long-term-support">Visit our Long Term Support information page</a> for more information.
</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Zend Framework 1.12.14, 2.4.6 and 2.5.2 Released!</title>
      <pubDate>Mon, 03 Aug 2015 19:15:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/zend-framework-1-12-14-2-4-6-and-2-5-2-released.html</link>
      <guid>http://framework.zend.com/blog/zend-framework-1-12-14-2-4-6-and-2-5-2-released.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
    The Zend Framework community is pleased to announce the immediate availability
    of:
</p>

<ul>
    <li>Zend Framework <strong>1.12.14</strong></li>
    <li>Zend Framework <strong>2.4.6</strong></li>
    <li>Zend Framework <strong>2.5.2</strong></li>
</ul>

<ul>
    <li>
        <a href="/downloads/latest">http://framework.zend.com/downloads/latest</a>
    </li>
</ul>

<p>
    These releases contain a critical security fix.
</p><h2>Security Fix</h2>

<p>
    Zend Framework versions 1.12.14, and 2.4.6, and 2.5.2 introduced fixes for
    <a href="/security/advisory/ZF2015-06">ZF2015-06</a>, a serious vulnerability 
    in <code>ZendXml</code> when used under PHP-FPM to process multibyte XML
    documents. The advisory provides full details; if you process XML in your
    application and will be deploying or already deploy using PHP-FPM, we recommend
    upgrading immediately.
</ul>

<h2>Other changes</h2>

<p>
    Zend Framework 1.12.14 has two other changes that may impact users:
</p>

<ul>
    <li><code>Zend_Service_DeveloperGarden</code> was removed, as the service closed its API on 30
        June 2015.</li>
    <li><code>Zend_Service_Technorati</code> was removed, as the API has been unavailable for an
        indeterminate amount of time.</li>
</ul>

<p>
    Both Zend Framework 2.4.6 and 2.5.2 also incorporate a change in <code>Zend\InputFilter</code>;
    fixes done in the 2.4/2.5 series removed support for fallback values when performing validation;
    that support has been reinstated with the latest releases.
</p>

<h3>Changelog</h3>

<p>
    For the full changelog on each version:
</p>

<ul>
    <li><a href="/changelog/1.12.14">http://framework.zend.com/changelog/1.12.14</a></li>
    <li><a href="/changelog/2.4.6">http://framework.zend.com/changelog/2.4.6</a></li>
    <li><a href="/changelog/2.5.2">http://framework.zend.com/changelog/2.5.2</a></li>
</ul>

<h2>Long Term Support</h2>

<p>
    As a reminder, the 2.4 series is our current Long Term Support release, and will
    receive security and critical bug fixes until 31 March 2018.
</p>

<p>
    You can opt-in to the LTS version by pinning your <code>zendframework/zendframework</code>
    <a href="https://getcomposer.org">Composer</a> requirement to the version <code>~2.4.0</code>.
</p>

<p>
    <a href="/long-term-support">Visit our Long Term Support information page</a> for more information.
</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
  </channel>
</rss>
