<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/">
  <channel>
    <title>Author: Matthew Weier O'Phinney - ZF Blog</title>
    <description>Author: Matthew Weier O'Phinney - ZF Blog</description>
    <pubDate>Sat, 01 Mar 2014 18:20:00 +0000</pubDate>
    <generator>Zend_Feed_Writer 2 (http://framework.zend.com)</generator>
    <link>http://framework.zend.com/blog/author/matthew.html</link>
    <atom:link rel="self" type="application/rss+xml" href="http://framework.zend.com/blog/author/matthew-rss.xml"/>
    <item>
      <title>Apigility 0.9.1 Released!</title>
      <pubDate>Sat, 01 Mar 2014 18:20:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/apigility-0-9-1-released.html</link>
      <guid>http://framework.zend.com/blog/apigility-0-9-1-released.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>Today, we're releasing version 0.9.1 of Apigility! You can grab and test it
using one of the following two methods:</p>
<ul>
    <li>Composer:
        <code>composer create-project zfcampus/zf-apigility-skeleton apigility 0.9.1</code>
    </li>
    <li>Manual download:
        <pre><code>
        wget https://github.com/zfcampus/zf-apigility-skeleton/releases/download/0.9.0/zf-apigility-skeleton-0.9.1.zip
        unzip zf-apigility-skeleton-0.9.1.zip
        </code></pre>
    </li>
</ul>

<p>This release is a maintenance release, fixing two critical issues reported against 0.9.0</p><h2>Fixes</h2>

<ul>
    <li>
        <p><a href="https://github.com/zfcampus/zf-oauth2/issues/27">zfcampus/zfoauth2#27</a>
        reported an inability to save OAuth2 adapter details from the Apigility admin
        UI. These are now corrected.</p>
    </li>

    <li>
        <p><a href="https://groups.google.com/a/zend.com/d/msgid/apigility-users/b7723f69-e4cc-4619-84d8-c3dd8c1f93a5%40zend.com">A report on the apigility-users mailing
        list</a>
        indicated that authorizations performed against REST entities were not working
        correctly. This was due to an incomplete change from "resource" to "entity"
        (as noted in the 0.9.0 release notes); the situation is now corrected.</p>
    </li>
</ul>

<h2>Future</h2>

<p>
    At this point, we turn our attention to stabilizing Zend Framework 2.3.0, 
    on which Apigility will depend, due to features added to that upcoming
    version.
</p>

<p>
    Once Zend Framework 2.3.0 is released, we will begin the beta cycle for
    Apigility 1.0.0. During that timeframe, we will due some additional improvements
    to the UI, and work to ensure the engine is stable. Additionally, we will
    document the project, providing documentation for each module, as well as
    for how the modules work together as a whole. We hope to provide "recipes"
    for a number of common practices and development and deployment situations.
</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Apigility 0.9.0 Released!</title>
      <pubDate>Mon, 03 Mar 2014 18:00:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/apigility-0-9-0-released.html</link>
      <guid>http://framework.zend.com/blog/apigility-0-9-0-released.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>Today, we're releasing version 0.9.0 of Apigility! You can grab and test it
using one of the following two methods:</p>
<ul>
    <li>Composer:
        <code>composer create-project zfcampus/zf-apigility-skeleton apigility 0.9.0</code>
    </li>
    <li>Manual download:
        <pre><code>
        wget https://github.com/zfcampus/zf-apigility-skeleton/releases/download/0.9.0/zf-apigility-skeleton-0.9.0.zip
        unzip zf-apigility-skeleton-0.9.0.zip
        </code></pre>
    </li>
</ul>

<p>This release brings in our last planned feature for the upcoming 1.0.0 stable release:
the ability to document your APIs, and then provide that documentation to your end-users!
</p><h2>Documentation</h2>

<p>
    An API is useless without documentation.
</p>

<p>
    The Apigility admin UI now allows you to capture narrative documentation 
    for your services, collections, entities, and operations. You can document
    what the request and response bodies should look like. You can document
    each field you configure.
</p>

<p>
    Apigility then merges this documentation with what it knows of your services:
    what Accept headers are allowed, what Content-Types are allowed, what response
    status codes may be expected, what fields are available, whether or not 
    authorization is required, and more. The admin UI provides a visualization of
    this information for you.
</p>

<p>
    We provide several more visualizations, too.  The 
    <kbd>zf-apigility-documentation</kbd> module is enabled now by default in 
    the <kbd>zf-apigility-skeleton</kbd>, providing both JSON and HTML 
    representations of the documentation at the URI 
    <kbd>/apigility/documentation</kbd> (the representation will depend on the 
    <kbd>Accept</kbd> header value you provide -- Apigility's own content 
    negotiation at work!).
</p>

<p>
    You can also opt in to the new <kbd>zf-apigility-documentation-swagger</kbd>
    module, which will allow you to either seed an existing <a href="https://github.com/wordnik/swagger-ui">Swagger UI</a>
    installation, or, if you visit the <kbd>/apigility/swagger</kbd> URI, provide
    the Swagger UI itself.
</p>

<p>
    To see what's possible, <a href="http://apigility.org/get-started-video.html">Introduction to Documentation</a> 
    video on the Apigility website!
</p>


<h4>Adding documentation to existing Apigility installs</h4>

<p>
    If you are already using Apigility, you will need to add the new modules to
    your application. Add the following dependencies to your <kbd>composer.json</kbd>:
</p>

<ul>
    <li><kbd>"zfcampus/zf-apigility-documentation": "~1.0-dev"</kbd> (necessary 
    for any documentation visualization, other than in the admin)</li>
    <li><kbd>"zfcampus/zf-apigility-documentation-swagger": "~1.0-dev"</kbd> (if 
    you want the Swagger UI)</li>
</ul>

<p>
    After running <kbd>composer update</kbd>, add the modules to your `config/application.config.php`:
</p>

<ul>
    <li><kbd>ZF\Apigility\Documentation</kbd></li>
    <li><kbd>ZF\Apigility\Documentation\Swagger</kbd></li>
</ul>

<h2>Changelog</h2>

<p>
    This release has been a little over two months in the making, and has a ton of changes.
    The following is a list of important changes for existing users.
</p>

<ul>
<li>
<p><strong>Changes minimum supported PHP version to 5.3.23</strong>, in line with the upcoming
  ZF 2.3.0. We still recommend <strong>5.4.8</strong> for serving the admin user interface.</p>
</li>
<li>
<p>New modules, <a href="https://github.com/zfcampus/zf-apigility-documentation">zf-apigility-documentation</a> and
  <a href="https://github.com/zfcampus/zf-apigility-documentation-swagger">zf-apigility-documentation-swagger</a>,
  providing documentation visualizations of APIs created with Apigility. The
  base module provides both JSON and HTML visualizations via the URI
  <code>/apigility/documentation</code>, based on the Accept header value present.
  zf-apigility-documentation-swagger provides an additional JSON visualization
  for the mediatype <code>application/vnd.swagger+json</code>, for seeding a <a href="https://github.com/wordnik/swagger-ui">Swagger
  UI</a> installation; additionally, it
  provides the Swagger UI via <code>/apigility/swagger</code>.</p>
</li>
</ul>
<p>zf-apigility-documentation is enabled by default in zf-apigility-skeleton;
  zf-apigility-documentation-swagger is an opt-in module.</p>
<ul>
<li>
<p><strong>The <code>/admin</code> and <code>/welcome</code> routes are now removed!</strong> The admin UI now uses
  <code>/apigility/ui</code>, and the welcome screen uses <code>/apigility/welcome</code>. New routes
  for documentation are also available, as detailed above.</p>
</li>
<li>
<p>A new module was created for Apigility-specific interfaces,
  <a href="https://github.com/zfcampus/zf-apigility-provider">zf-apigility-provider</a>.
  The primary use case is for composition in modules that may or may not be
  consumed by Apigility (e.g., a general-purpose module that could be composed
  into many projects). The only interface currently is
  <code>ZF\Apigility\Provider\ApigilityProviderInterface</code>, which replaces
  <code>Zend\Apigility\ApigilityModuleInterface</code> (and thus prevents the necessity of
  installing all Apigility modules just to implement the interface!).</p>
</li>
<li>
<p>A new module was introduced for handling development mode, 
  <a href="https://github.com/zfcampus/zf-development-mode">zf-development-mode</a>;
  this is a fork of <a href="https://github.com/19ft/NFDevelopmentMode">NFDevelopmentMode</a>,
  which was based off the equivalent functionality in zf-apigility-skeleton's
  <code>Application</code> module. We removed the functionality from the skeleton, and
  added a dependency on the new module.</p>
</li>
<li>
<p>zf-apigility-skeleton's layout was updated to match that of the admin UI.</p>
</li>
<li>
<p>zf-apigility-admin received numerous updates:</p>
<ul>
<li>
<p>Ability to add documentation of services, fields, and operations.</p>
</li>
<li>
<p>Ability to use <a href="http://www.mongodb.org/">MongoDB</a> when configuring an
  OAuth2 authentication adapter.</p>
</li>
<li>
<p>Ability to inspect, add, configure, and delete zf-content-negotiation
  selectors.</p>
</li>
<li>
<p>Links to HTML documentation of APIs managed by the Apigility instance
  (more on this below).</p>
</li>
<li>
<p>Ability to create and manipulate filter chains for each field in a
  service.</p>
</li>
<li>
<p>(Limited) detection of whether or not an opcode cache is enabled; if
  detected, a modal dialog will be presented to the end-user detailing how
  to disable it.</p>
</li>
<li>
<p>Completely overhauled and refactored admin UI application to ease
  maintenance and feature additions. The admin UI now uses
  <a href="http://bower.io">Bower</a> for managing UI asset dependencies, and
  <a href="http://gruntjs.com">Grunt</a> for building the UI distribution. We have
  dropped ng-route for the <a href="https://github.com/angular-ui/ui-router">angular-ui
  ui-router</a>, providing us with
  more flexibility in UI implementation and layout. All services,
  controllers, and directives have been moved into their own files.</p>
</li>
<li>
<p>Countless UI/UX improvements.</p>
</li>
</ul>
</li>
<li>
<p>zf-apigility-welcome has been updated to use the Apigility "Rocket ElePHPant"
  logo for the splash screen, and to provide buttons to the HTML and Swagger
  documentation, if the appropriate modules are available.</p>
</li>
<li>
<p><strong>zf-rest and zf-rpc now each store a <code>service_name</code> key in the configuration
  for each service.</strong> While efforts have been made to ensure existing
  configuration still works, we recommend adding this key to each service. The
  value should be the short name representation for the service, usually the
  name you provided when creating the service.</p>
</li>
<li>
<p><strong>All repositories have been updated to make a clean distinction between the
  terms "Entity", "Collection", and "Resource".</strong> An "Entity" is anything
  addressable via a URI containing a unique identifier. A "Collection" is any
  URI that returns a set of entities. A "Resource" refers to a URI that may
  return collections and/or entities. As such, we have several BC breaks:</p>
<ul>
<li>
<p>The event <code>renderResource</code> is now <code>renderEntity</code>.</p>
</li>
<li>
<p>The event <code>renderCollection.resource</code> is now <code>renderCollection.entity</code>.</p>
</li>
<li>
<p><code>ZF\Hal\Resource</code> was renamed to <code>ZF\Hal\Entity</code>.</p>
</li>
<li>
<p>The subkey <code>resource</code> in the zf-mvc-auth configuration is now <code>entity</code>.</p>
</li>
<li>
<p>The subkey <code>resource_http_methods</code> in zf-rest is now
  <code>entity_http_methods</code>.</p>
</li>
<li>
<p>The subkey <code>resource_class</code> in zf-rest is now <code>entity_class</code>.</p>
</li>
<li>
<p>The subkey <code>resource_identifier_name</code> in zf-rest is now
  <code>entity_identifier_name</code>. (This change only affects those who have been
  using latest master, but have not updated since late-January 2014.)</p>
</li>
<li>
<p>The subkey <code>identifier_name</code> in zf-apigility <code>db-connected</code> configuration
  is now <code>entity_identifier_name</code>;</p>
</li>
</ul>
</li>
<li>
<p>zf-hal now properly differentiates between the identifier used in the route
  definition, and the identifier used for the entity; this allows you to use one
  value on the uri -- e.g., <code>status_id</code> -- and another in your entity class --
  e.g., <code>id</code>. zf-hal will fallback to the <code>route_identifier_name</code> if no
  <code>entity_identifier_name</code> is present.</p>
</li>
<li>
<p>zf-apigility, when detecting an input filter is present, will pull values from
  the input filter, and not use any other values even if provided in the
  request. This prevents SQL errors due to unknown columns.</p>
</li>
</ul>
<p>Additionally, zf-apigility's assets were updated, and a Grunt + Bower
  toolchain provided for keeping them up-to-date.</p>
<ul>
<li>zf-rest, when detecting an input filter is present for the current request,
  will inject it into the <code>ResourceEvent</code>, allowing developers to retrieve it
  via <code>$this-&gt;getEvent()-&gt;getInputFilter()</code>. </li>
</ul>
<p>Additionally, support for <code>patchList</code> was added to the
  <code>AbstractResourceListener</code>.</p>
<ul>
<li>zf-api-problem was updated to match <a href="http://tools.ietf.org/html/draft-nottingham-http-problem-05">Problem
  API draft 5</a>.
  This has changed the internal structure and JSON representation of problem
  results. If you were manipulating <code>ApiProblem</code> objects directly previously,
  you may need to alter your code.</li>
</ul>

<h2>Future</h2>

<p>
    At this point, we turn our attention to stabilizing Zend Framework 2.3.0, 
    on which Apigility will depend, due to features added to that upcoming
    version.
</p>

<p>
    Once Zend Framework 2.3.0 is released, we will begin the beta cycle for
    Apigility 1.0.0. During that timeframe, we will due some additional improvements
    to the UI, and work to ensure the engine is stable. Additionally, we will
    document the project, providing documentation for each module, as well as
    for how the modules work together as a whole. We hope to provide "recipes"
    for a number of common practices and development and deployment situations.
</p>

<h4>Updates</h4>

<ul>
    <li>2014-03-03 12:00: Fixed zf-apigility-documentation to read zf-apigility-provider in fourth bullet-point of changelog.</li>
    <li>2014-03-01 12:20: Fixed <kbd>wget</kbd> command to reference correct download link.</li>
</ul>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Apigility 0.8.0 Released!</title>
      <pubDate>Sat, 21 Dec 2013 16:10:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/apigility-0-8-0-released.html</link>
      <guid>http://framework.zend.com/blog/apigility-0-8-0-released.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>Today, we're releasing version 0.8.0 of Apigility! You can grab and test it
using one of the following two methods:</p>
<ul>
<li>Composer:
    <code>composer create-project zfcampus/zf-apigility-skeleton apigility</code></li>
<li>Manual download:
<pre><code>
wget https://github.com/zfcampus/zf-apigility-skeleton/releases/download/0.8.0/zf-apigility-skeleton-0.8.0.zip
unzip zf-apigility-skeleton-0.8.0.zip</li>
</code></pre>
</ul>
<p>We never announced our 0.7.0 version (though we showed off the features at
several conferences this past month), so there's a ton to announce!</p><h2>Authentication and Authorization</h2>
<p>Authentication and Authorization were the number one requested feature after our
original release announcement at ZendCon 2013. We managed to get
this in place in time for ZendCon 2013 Europe, and the features include:</p>
<ul>
<li>Ability to use HTTP Basic or Digest authentication, or OAuth2.</li>
<li>Ability to create authorization rules per HTTP method, per service in your
  API.</li>
</ul>
<p>We are leveraging Zend Framework 2's <code>Zend\Authentication</code> library for HTTP
authentication, and Brent Shaffer's <a href="https://github.com/bshaffer/oauth2-server-php">oauth2-server-php</a>
library for OAuth2.</p>
<p>Apigility allows you to define one authentication scheme per application. You
can set the authentication details on the main dashboard, under the heading
"Authentication":</p>
<p style="text-align:center"><img style="border: 1px solid black" width="640" alt="Authentication choices" src="/images/ag/authentication-buttons.png"></p>
<p style="text-align:center"><img style="border: 1px solid black" width="640" alt="Authentication form" src="/images/ag/authentication-form.png"></p>
<p style="text-align:center"><img style="border: 1px solid black" width="640" alt="Authentication view" src="/images/ag/authentication-view.png"></p>
<p>To use HTTP Basic authentication, you will need to create a <code>htpasswd</code> file,
using Apache's <code>htpasswd</code> utility. When you add HTTP Basic authentication to
your application, you will specify the location of the <code>htpasswd</code> file.</p>
<p>For HTTP Digest authentication, you will need to create a file with lines in the
following format:</p>
<p><code>&lt;username&gt;:&lt;realm&gt;:&lt;credentials&gt;</code></p>
<p>The <code>credentials</code> field must be an MD5 hash of the password that will be
accepted. When adding the HTTP Digest authentication to your application, you
will specify the location of this file, and will also need to specify the
appropriate <code>realm</code>, <code>nonce\_timeout</code> (number of seconds the credentials remain
valid), and, optionally, a list of <code>digest_domains</code> (the domains for which the
same authentication information is valid).</p>
<p>To use OAuth2 authentication, you will need to setup a database, and add clients
and optionally users (users are only necessary if using the <code>password</code> grant
type). <a href="https://github.com/zfcampus/zf-oauth2">See the zf-oauth2 README</a> for
details on how to setup the database and seed it.</p>
<p>Once you have authentication setup, you can start setting up authorization
restrictions on your API. To do this, navigate to the "Authorization" menu item
in any API:</p>
<p style="text-align:center"><img style="border: 1px solid black" width="640" alt="Authorization" src="/images/ag/authorization.png"></p>
<p>By default, APIs created with Apigility are public. To require authorization on
specific services or specific HTTP methods of services, check the appropriate
boxes and save your changes. From that point forward, authentication will be
required for those actions!</p>
<p>For more information, <a href="http://bit.ly/ag-auth">view the demo video</a></p>
<h2>Cross Origin Resource Sharing</h2>
<p>In order to operate a web-based application that interact with your APIs, you
may need to investigate Cross Origin Resource Sharing (CORS). CORS describes
HTTP requests for HTTP resources made from a different domain than the resource
exists on. As an example, if your API is at <code>http://example.com/api/</code>, but you
want to request it from <code>http://my-uber-cool-app.com/</code>, CORS is in effect.</p>
<p>If a browser attempts to create an <code>XMLHttpRequest</code> to a different domain than
the current page, then it will detect a CORS request. At that point, the browser
will ask the server with the resource if the request is allowed; if the
originating server does not reply with the appropriate headers, the browser will
not submit the original request, and the <code>XMLHttpRequest</code> will fail.</p>
<p>Apigility does not deal with CORS by default, but the 0.8.0 release includes
changes that ensure that CORS requests <em>can</em> be honored if you are using a CORS
plugin. We have tested against the <a href="https://github.com/zf-fr/zfr-cors">ZfrCors ZF2
module</a>, and it works seamlessly with
Apigility at this point.</p>
<p>We highly recommend the combination of Apigility and ZfrCors when building
web-based JavaScript applications that will operate on separate domains from
your APIs.</p>
<h2>Validation</h2>
<p>Another aspect of API security is validating the incoming input. Ideally, you
should reject anything that does not validate outright, and as early as
possible.</p>
<p>0.8.0 adds a new module,
<a href="https://github.com/zfcampus/zf-content-validation">zf-content-validation</a>,
which provides a validation engine based on Zend Framework's <code>InputFilter</code>
component. This component, when a request method that contains incoming data
occurs, checks to see if the matched service has a corresponding input filter,
and, if so, attempts to validate the incoming data against it. If the validation
fails, an error response is immediately returned.</p>
<p>In the Apigility Admin UI, each service now has an "Inputs" tab that allows you
to define the input filter. In this tab, you define inputs, which correspond to
each field of data you will be expecting. For each input, you can define one or
more validators, along with any configuration you want for each. In this case, a
picture is probably more sufficient:</p>
<p style="text-align:center"><img style="border: 1px solid black" width="640" alt="Validation" src="/images/ag/inputfilter.png"></p>
<p>For more information, <a href="http://bit.ly/ag-validation">view the demo video</a>.</p>
<h2>Future</h2>
<p>At this point, we're wrapping up the featureset for a stable version of
Apigility. The last milestones we have include:</p>
<ul>
<li>a module for generating API documentation. At this time, we are favoring <a href="http://apiblueprint.org/">API
  Blueprint</a> as the markup is trivial to generate from
  our configuration, and, being markdown-derived, relatively easy to edit and
  expand once the initial generation is complete.</li>
<li>some cleanup of the UI, including some long-overdue refactoring and formalized
  testing.</li>
<li>documentation of the various components, as well as tutorials on how they all
  fit together.</li>
</ul>
<p>We hope to complete the API documentation milestone in the first weeks of 2014.
At that point, we will start the beta release cycle, spending that time to do
the UI refactoring and project documentation. Once those are complete, we'll
finally issue a stable release; we're aiming for late February 2014 at this
time.</p>

<h4>Updates</h4>

<ul>
    <li>2013-12-21 16:10 UTC: Fixed <code>wget</code> command and URI, per reports of errors in comments.</li>
</ul>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Zend Framework 2.2.5 Released!</title>
      <pubDate>Thu, 31 Oct 2013 19:00:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/zend-framework-2-2-5-released.html</link>
      <guid>http://framework.zend.com/blog/zend-framework-2-2-5-released.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
    The Zend Framework community is pleased to announce the immediate availability
    of Zend Framework 2.2.5! Packages and installation instructions are
    available at:
</p>

<ul>
    <li>
        <a href="/downloads/latest">http://framework.zend.com/downloads/latest</a>
    </li>
</ul>

<p>
    This release includes a security fix for <code>Zend\Http\PhpEnvironment\RemoteAddress</code>
    and <code>Zend\Session\Validator\RemoteAddr</code>; if you use either of these classes,
    we urge you to upgrade to 2.2.5 immediately.
</p>

<p>
    We've not had a release in a couple of months, due to an exciting development: Zend's
    Zend Framework team has announced an initial preview release of 
    <a href="http://apigility.org">Apigility</a>, an API builder and management tool, built
    on top of Zend Framework 2! If you are building APIs or plan to in the future, we
    encourage you to check out this tool and help drive it toward a stable release!
</p><h2>Security</h2>

<p>
    A developer reported a problem with how we were handling situations when
    <code>Zend\Http\PhpEnvironment\RemoteAddress</code> was configured to
    use proxies, had a list of trusted proxies, 
    <code>$_SERVER['REMOTE_ADDR']</code> was not in that list of trusted 
    proxies. Essentially, we were still consulting the <code>X-Forwarded-For</code>
    header in this situation, but should have been used the provided
    <code>$_SERVER['REMOTE_ADDR']</code>, according to the specification.
</p>

<p>
    2.2.5 fixes this situation. If you use that class, or 
    <code>Zend\Session\Validator\RemoteAddr</code>, you should upgrade immediately.
</p>

<p>
    For more details, visit the <a href="/security/advisory/ZF2013-04">ZF2013-04 security advisory</a>.
</p>

<h2>Changelog</h2>

<p>
    To see the full changelog, visit:
</p>

<ul>
    <li><a href="/changelog/2.2.5">http://framework.zend.com/changelog/2.2.5</a></li>
</ul>

<h2>Thank You!</h2>

<p>
    Thank you to everybody who has contributed to this release. With more than 
    70 issues resolved, it's one of the busiest and most robust releases on the 
    2.2 branch to-date.
</p>

<h2>Roadmap</h2>

<p>
    Maintenance releases happen (roughly) monthly on (approximately) the third 
    Wednesday. We will be gearing up for the next minor release, 2.3.0, soon.
</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Zend Framework 2.2.4 Released!</title>
      <pubDate>Mon, 26 Aug 2013 16:45:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/zend-framework-2-2-4-released.html</link>
      <guid>http://framework.zend.com/blog/zend-framework-2-2-4-released.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
    The Zend Framework community is pleased to announce the immediate availability
    of Zend Framework 2.2.4! Packages and installation instructions are
    available at:
</p>

<ul>
    <li>
        <a href="/downloads/latest">http://framework.zend.com/downloads/latest</a>
    </li>
</ul>

<p>
    This release fixes a regression found in the Form component released with version
    2.2.3; if you use that component, we urge you to upgrade to 2.2.4.
</p><h2>Regressions</h2>

<p>
    <a href="/blog/zend-framework-2-2-3-released.html">Version 2.2.3</a> introduced a
    regression in the Form component, as a side-effect of fixing another issue.
    The <code>preferFormInputFilter</code> flag was originally created to allow 
    developers to choose whether they wanted to prefer the input filter they
    explicitly composed in the form to have priority, or use the input filter 
    settings the form aggregated from default elements instead. Interestingly,
    the form component essentially enforced the latter situation (prefering what
    the form aggregated), making the flag have no semantic meaning.
</p>

<p>
    A side effect of this, however, led to a regression in the InputFilter 
    component. Starting sometime in the 2.2 series, the behavior of input
    merging was changed to merge the old input into the new. In 2.2.3, we
    corrected this behavior -- but it broke the default merging order in the
    Form component. On inspection, we discovered that the fix to the 
    InputFilter essentially gave semantic meaning back to the 
    <code>preferFormInputFilter</code> flag -- but that the default behavior -- 
    which was to prefer what the form aggregates -- was now flip-flopped.
</p>

<p>
    The fix in 2.2.4 is to enable the <code>preferFormInputFilter</code> flag
    by default, thus restoring the previous expected behavior. Additionally,
    we now provide the ability to set this flag via form options or the form
    factory.
</p>

<p>
    If you use the Form component, we urge you to upgrade to 2.2.4 immediately.
</p>

<h2>Changelog</h2>

<p>
    To see the full changelog, visit:
</p>

<ul>
    <li><a href="/changelog/2.2.4">http://framework.zend.com/changelog/2.2.4</a></li>
</ul>

<h2>Thank You!</h2>

<p>
    Many thanks to Michaël Gallego and Michael Gooden for helping me troubleshoot
    the form issues!
</p>

<h2>Roadmap</h2>

<p>
    Maintenance releases happen monthly on the third Wednesday.
</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Zend Framework 2.2.3 Released!</title>
      <pubDate>Wed, 21 Aug 2013 21:00:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/zend-framework-2-2-3-released.html</link>
      <guid>http://framework.zend.com/blog/zend-framework-2-2-3-released.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
    The Zend Framework community is pleased to announce the immediate availability
    of Zend Framework 2.2.3! Packages and installation instructions are
    available at:
</p>

<ul>
    <li>
        <a href="/downloads/latest">http://framework.zend.com/downloads/latest</a>
    </li>
</ul>

<p>
    This is the third monthly maintenance release in the 2.2 series. 
</p><h2>Changelog</h2>

<p>
    This release features over 25 changes. Some notable changes include:
</p>

<ul>
    <li>An update that ensures the filter and validator plugin managers are injected 
        into the input filter factory when using the form factory. (<a href="https://github.com/zendframework/zf2/issues/4851">#4851</a>)</li>
    <li>Fixes to code generation to ensure <code>use</code> statements are unique, and that
        non-namespaced class generation is possible. 
        (<a href="https://github.com/zendframework/zf2/issues/4988">#4988</a> and 
        <a href="https://github.com/zendframework/zf2/issues/4990">#4990</a>)</li>
    <li>A fix to input filters and forms to ensure overwriting of inputs and input filters
        happens correctly. (<a href="https://github.com/zendframework/zf2/issues/4996">#4996</a>)</li>
</ul>

<p>
    To see the full changelog, visit:
</p>

<ul>
    <li><a href="/changelog/2.2.3">http://framework.zend.com/changelog/2.2.3</a></li>
</ul>

<h2>Thank You!</h2>

<p>
    I'd like to thank everyone who provided issue reports, typo fixes, maintenance
    improvements, bugfixes, and documentation improvements; your efforts make the
    framework increasingly better!
</p>

<h2>Roadmap</h2>

<p>
    Maintenance releases happen monthly on the third Wednesday.
</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Zend Framework 2.2.2 Released!</title>
      <pubDate>Wed, 24 Jul 2013 17:00:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/zend-framework-2-2-2-released.html</link>
      <guid>http://framework.zend.com/blog/zend-framework-2-2-2-released.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
    The Zend Framework community is pleased to announce the immediate availability
    of Zend Framework 2.2.2! Packages and installation instructions are
    available at:
</p>

<ul>
    <li>
        <a href="/downloads/latest">http://framework.zend.com/downloads/latest</a>
    </li>
</ul>

<p>
    This is the second monthly maintenance release in the 2.2 series. 
</p><h2>Changelog</h2>

<p>
    This release features over 60 changes. Some notable changes include:
</p>

<ul>
    <li>The cURL adapter for <code>Zend\Http</code> will no longer double-decode
    gzip-encoded bodies. (<a href="https://github.com/zendframework/zf2/issues/4555">#4555</a>)</li>
    <li>A <code>headLink()</code> method was added to the HeadLink view helper
    so that its usage matches the documentation. (<a href="https://github.com/zendframework/zf2/issues/4105">#4105</a>)</li>
    <li>The validator plugin manager was updated to include the new 
    "PhoneNumber" validator. (<a href="https://github.com/zendframework/zf2/issues/4644">#4644</a>)</li>
    <li>Abstract methods in the <code>AbstractRestfulController</code> were made
    non-abstract, and modified to set a 405 ("Method Not Allowed") status. (<a href="https://github.com/zendframework/zf2/issues/4808">#4808</a>)</li>
</ul>

<p>
    To see the full changelog, visit:
</p>

<ul>
    <li><a href="/changelog/2.2.2">http://framework.zend.com/changelog/2.2.2</a></li>
</ul>

<h2>Thank You!</h2>

<p>
    I'd like to thank everyone who provided issue reports, typo fixes, maintenance
    improvements, bugfixes, and documentation improvements; your efforts make the
    framework increasingly better!
</p>

<h2>Roadmap</h2>

<p>
    Maintenance releases happen monthly on the third Wednesday. Version 2.3.0 
    is tentatively scheduled for September.
</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Zend Framework 2.2.1 Released!</title>
      <pubDate>Wed, 12 Jun 2013 20:00:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/zend-framework-2-2-1-released.html</link>
      <guid>http://framework.zend.com/blog/zend-framework-2-2-1-released.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
    The Zend Framework community is pleased to announce the immediate availability
    of Zend Framework 2.2.1! Packages and installation instructions are
    available at:
</p>

<ul>
    <li>
        <a href="/downloads/latest">http://framework.zend.com/downloads/latest</a>
    </li>
</ul>

<p>
    This is the first monthly maintenance release in the 2.2 series. 
</p><h2>Changelog</h2>

<p>
    This release features almost 70 changes, ranging from minor typographical 
    issues to changes to allow easier utilisation of new features introduced in 
    2.2 (e.g., you can now actually select the new 
    <code>TranslatorAwareTreeRouteStack</code> as a router via configuration).  
    The full changelog for 2.2.1 is available:
</p>

<ul>
    <li><a href="/changelog/2.2.1">http://framework.zend.com/changelog/2.2.1</a></li>
</ul>

<h2>Thank You!</h2>

<p>
    I'd like to thank everyone who provided issue reports, typo fixes, maintenance
    improvements, bugfixes, and documentation improvements; your efforts make the
    framework increasingly better!
</p>

<h2>Roadmap</h2>

<p>
    Maintenance releases happen monthly on the third Wednesday. Version 2.3.0 
    is tentatively scheduled for the end of August.
</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Zend Framework 2.2.0 Stable Released!</title>
      <pubDate>Wed, 15 May 2013 15:00:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/zend-framework-2-2-0-stable-released.html</link>
      <guid>http://framework.zend.com/blog/zend-framework-2-2-0-stable-released.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
    The Zend Framework community is pleased to announce the immediate availability
    of Zend Framework 2.2.0! Packages and installation instructions are
    available at:
</p>

<ul>
    <li>
            <a href="/downloads/latest">http://framework.zend.com/downloads/latest</a>
    </li>
</ul>

<p>
    This is the first <em>stable</em> release in the 2.2 series.
</p><h2>Usability and Consistency</h2>

<p>
    The primary focus of the 2.2 release has been usability and consistency, 
    primarily with regard to creation and configuration of services such as 
    hydrators, input filters, logs, DB connections, cache objects, translators, 
    and forms.
</p>

<p>
    Most of these services now have what are known as "Abstract Factories" that
    are either registered by default, or can be added quickly to your 
    application configuration. Abstract factories are used by the service
    manager when you have multiple services that follow the same instantiation
    pattern, but which have different names. The typical pattern the new 
    abstract factories follow is to use key/configuration pairs under a common
    top-level configuration key to describe the instances desired:
</p>

<pre class="highlight"><code><span style="color: #000000">
<span style="color: #0000BB">&lt;?php<br /></span><span style="color: #DD0000">'log'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;array(<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">'Application\Log'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;array(<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">'writers'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;array(<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;array(<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">'name'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">'stream'</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">'priority'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #0000BB">1000</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">'options'&nbsp;&nbsp;</span><span style="color: #007700">=&gt;&nbsp;array(<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">'stream'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">'data/logs/app.log'</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;),<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;),<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;),<br />&nbsp;&nbsp;&nbsp;&nbsp;),<br />),<br /></span>
</span>
</code></pre>

<p>
    The above creates a logger named "Application\Log" which you can retrieve 
    directly from the service manager. If you wanted to have additional loggers,
    you could do so by adding additional entries under the "log" heading, each
    named, and each providing configuration for a logger.
</p>

<p>
    Besides the logger abstract factory illustrated above, the following 
    components each have abstract factories now, too, using the configuration 
    keys noted:
</p>

<ul>
    <li><code>Zend\Cache</code>: "caches" configuration section, allowing multiple
        named cache storage objects.
    </li>

    <li><code>Zend\Db</code>: "adapters" subkey of the "db" configuration section;
        this abstract factory allows you to finally have multiple named DB adapter
        instances, effectively allowing for read-only and write-only connections.
    </li>

    <li><code>Zend\Form</code>: "forms" configuration section (which makes use 
        of several old and new plugin managers, as noted below).</li>
</ul>

<p>
    A number of new plugin managers were also added. Plugin managers are 
    specialized service manager instances used by objects that will be consuming
    many different related object instances, often based on runtime conditions.
    As examples, view helpers and controller plugins are mediated by plugin
    managers.
</p>

<p>
    The new plugin manager instances include:
</p>

<ul>
    <li><code>Zend\Stdlib\Hydrator\HydratorPluginManager</code>, for retrieving hydrator
        instances. This allows re-use of individual hydrators, and coupled with the 
        forms abstract factory, allows usage of custom hydrators across your form 
        instances.
    </li>

    <li><code>Zend\InputFilter\InputFilterPluginManager</code>, for retrieving
        (configurable) input filter instances. This allows re-use of input filters, as
        well as ensures that all input instances are provided with custom validators
        and/or filters (from the existing validator and filter plugin managers). The
        forms abstract factory makes use of this, which allows us to finally tie 
        together the various plugin managers to create fully configurable and custom
        forms.
    </li>
</ul>

<p>
    Finally, a couple new service factories were created. Service factories 
    usually have a 1:1 relationship between the named service and the instance
    provided, and are ideal for situations where you only need one instance of
    a given service type. In the case of the new factories for 2.2, these include
    <em>translators</em> and <em>sessions</em>.
</p>

<h2>Data Definition Language Abstraction</h2>

<p>
    Zend Framework 2.2 also offers initial support in <code>Zend\Db</code> 
    for dynamic DDL queries.  DDL, for Data Definition Language, is a subset of 
    SQL that comprises different commands for building RDBMS data 
    structures like tables, columns, constraints, indexes, views, triggers 
    and the like.
</p>

<p>
    Initial support is limited to creating tables with SQL92 data-types, and 
    some specialization for MySQL support.  Here is an example of <code>CREATE 
    TABLE</code> statement:
</p>

<pre class="highlight"><code><span style="color: #000000">
<span style="color: #0000BB">&lt;?php<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">use&nbsp;</span><span style="color: #0000BB">Zend</span><span style="color: #007700">\</span><span style="color: #0000BB">Db</span><span style="color: #007700">\</span><span style="color: #0000BB">Sql</span><span style="color: #007700">\</span><span style="color: #0000BB">Sql</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;use&nbsp;</span><span style="color: #0000BB">Zend</span><span style="color: #007700">\</span><span style="color: #0000BB">Db</span><span style="color: #007700">\</span><span style="color: #0000BB">Sql</span><span style="color: #007700">\</span><span style="color: #0000BB">Ddl</span><span style="color: #007700">;<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000BB">$t&nbsp;</span><span style="color: #007700">=&nbsp;new&nbsp;</span><span style="color: #0000BB">Ddl</span><span style="color: #007700">\</span><span style="color: #0000BB">CreateTable</span><span style="color: #007700">();<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000BB">$t</span><span style="color: #007700">-&gt;</span><span style="color: #0000BB">setTable</span><span style="color: #007700">(</span><span style="color: #DD0000">'bar'</span><span style="color: #007700">);<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000BB">$t</span><span style="color: #007700">-&gt;</span><span style="color: #0000BB">addColumn</span><span style="color: #007700">(new&nbsp;</span><span style="color: #0000BB">Ddl</span><span style="color: #007700">\</span><span style="color: #0000BB">Column</span><span style="color: #007700">\</span><span style="color: #0000BB">Integer</span><span style="color: #007700">(<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">'id'</span><span style="color: #007700">,&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000BB">12</span><span style="color: #007700">,&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000BB">true</span><span style="color: #007700">,&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000BB">null</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[</span><span style="color: #DD0000">'auto_increment'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #0000BB">true</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'comment'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">'Some&nbsp;comment'</span><span style="color: #007700">]<br />&nbsp;&nbsp;&nbsp;&nbsp;));<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000BB">$t</span><span style="color: #007700">-&gt;</span><span style="color: #0000BB">addColumn</span><span style="color: #007700">(new&nbsp;</span><span style="color: #0000BB">Ddl</span><span style="color: #007700">\</span><span style="color: #0000BB">Column</span><span style="color: #007700">\</span><span style="color: #0000BB">Varchar</span><span style="color: #007700">(</span><span style="color: #DD0000">'name'</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">255</span><span style="color: #007700">));<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000BB">$t</span><span style="color: #007700">-&gt;</span><span style="color: #0000BB">addColumn</span><span style="color: #007700">(new&nbsp;</span><span style="color: #0000BB">Ddl</span><span style="color: #007700">\</span><span style="color: #0000BB">Column</span><span style="color: #007700">\</span><span style="color: #0000BB">Char</span><span style="color: #007700">(</span><span style="color: #DD0000">'foo'</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">20</span><span style="color: #007700">));<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000BB">$t</span><span style="color: #007700">-&gt;</span><span style="color: #0000BB">addConstraint</span><span style="color: #007700">(new&nbsp;</span><span style="color: #0000BB">Ddl</span><span style="color: #007700">\</span><span style="color: #0000BB">Constraint</span><span style="color: #007700">\</span><span style="color: #0000BB">PrimaryKey</span><span style="color: #007700">(</span><span style="color: #DD0000">'id'</span><span style="color: #007700">));<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000BB">$t</span><span style="color: #007700">-&gt;</span><span style="color: #0000BB">addConstraint</span><span style="color: #007700">(new&nbsp;</span><span style="color: #0000BB">Ddl</span><span style="color: #007700">\</span><span style="color: #0000BB">Constraint</span><span style="color: #007700">\</span><span style="color: #0000BB">UniqueKey</span><span style="color: #007700">(<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[</span><span style="color: #DD0000">'name'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'foo'</span><span style="color: #007700">],<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">'my_unique_key'<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">));<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000BB">$sql&nbsp;</span><span style="color: #007700">=&nbsp;new&nbsp;</span><span style="color: #0000BB">Sql</span><span style="color: #007700">(</span><span style="color: #0000BB">$adapter</span><span style="color: #007700">);<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #0000BB">$sql</span><span style="color: #007700">-&gt;</span><span style="color: #0000BB">getSqlStringForSqlObject</span><span style="color: #007700">(</span><span style="color: #0000BB">$t</span><span style="color: #007700">);<br /></span>
</span>
</code></pre>

<p>Once this table is created, it can then be altered:</p>

<pre class="highlight"><code><span style="color: #000000">
<span style="color: #0000BB">&lt;?php<br />&nbsp;&nbsp;&nbsp;&nbsp;$t&nbsp;</span><span style="color: #007700">=&nbsp;new&nbsp;</span><span style="color: #0000BB">Ddl</span><span style="color: #007700">\</span><span style="color: #0000BB">AlterTable</span><span style="color: #007700">(</span><span style="color: #DD0000">'bar'</span><span style="color: #007700">);<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000BB">$t</span><span style="color: #007700">-&gt;</span><span style="color: #0000BB">changeColumn</span><span style="color: #007700">(</span><span style="color: #DD0000">'name'</span><span style="color: #007700">,&nbsp;new&nbsp;</span><span style="color: #0000BB">Ddl</span><span style="color: #007700">\</span><span style="color: #0000BB">Column</span><span style="color: #007700">\</span><span style="color: #0000BB">Varchar</span><span style="color: #007700">(</span><span style="color: #DD0000">'new_name'</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">50</span><span style="color: #007700">));<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000BB">$t</span><span style="color: #007700">-&gt;</span><span style="color: #0000BB">addColumn</span><span style="color: #007700">(new&nbsp;</span><span style="color: #0000BB">Ddl</span><span style="color: #007700">\</span><span style="color: #0000BB">Column</span><span style="color: #007700">\</span><span style="color: #0000BB">Varchar</span><span style="color: #007700">(</span><span style="color: #DD0000">'another'</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">255</span><span style="color: #007700">));<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000BB">$t</span><span style="color: #007700">-&gt;</span><span style="color: #0000BB">addColumn</span><span style="color: #007700">(new&nbsp;</span><span style="color: #0000BB">Ddl</span><span style="color: #007700">\</span><span style="color: #0000BB">Column</span><span style="color: #007700">\</span><span style="color: #0000BB">Varchar</span><span style="color: #007700">(</span><span style="color: #DD0000">'other_id'</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">255</span><span style="color: #007700">));<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000BB">$t</span><span style="color: #007700">-&gt;</span><span style="color: #0000BB">dropColumn</span><span style="color: #007700">(</span><span style="color: #DD0000">'foo'</span><span style="color: #007700">);<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000BB">$t</span><span style="color: #007700">-&gt;</span><span style="color: #0000BB">addConstraint</span><span style="color: #007700">(new&nbsp;</span><span style="color: #0000BB">Ddl</span><span style="color: #007700">\</span><span style="color: #0000BB">Constraint</span><span style="color: #007700">\</span><span style="color: #0000BB">ForeignKey</span><span style="color: #007700">(<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">'my_fk'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'other_id'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'other_table'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'id'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'CASCADE'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'CASCADE'<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">));<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000BB">$t</span><span style="color: #007700">-&gt;</span><span style="color: #0000BB">dropConstraint</span><span style="color: #007700">(</span><span style="color: #DD0000">'my_index'</span><span style="color: #007700">);<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #0000BB">$sql</span><span style="color: #007700">-&gt;</span><span style="color: #0000BB">getSqlStringForSqlObject</span><span style="color: #007700">(</span><span style="color: #0000BB">$t</span><span style="color: #007700">);<br /></span>
</span>
</code></pre>

<p>Or even dropped:</p>

<pre class="highlight"><code><span style="color: #000000">
<span style="color: #0000BB">&lt;?php<br />&nbsp;&nbsp;&nbsp;&nbsp;$dt&nbsp;</span><span style="color: #007700">=&nbsp;new&nbsp;</span><span style="color: #0000BB">Ddl</span><span style="color: #007700">\</span><span style="color: #0000BB">DropTable</span><span style="color: #007700">(</span><span style="color: #DD0000">'bar'</span><span style="color: #007700">);<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #0000BB">$sql</span><span style="color: #007700">-&gt;</span><span style="color: #0000BB">getSqlStringForSqlObject</span><span style="color: #007700">(</span><span style="color: #0000BB">$dt</span><span style="color: #007700">);<br /></span>
</span>
</code></pre>

<p>
    What can this be used for?
</p>

<p>
    That is where you come in.  This particular feature was asked for numerous 
    times during ZF1 development.  We'd like to see what kind of ZF2 modules 
    can be created with this base infrastructure.  Migration assistant?  ORM 
    database creation tool?  Advanced CMS?  Let us know; we'll be adding more 
    vendor specific support over the 2.2 to 2.3 timeline.
</p>

<h2>New Service Wrappers</h2>

<p>
    Zend Framework has a long history of providing API wrappers; in fact, they
    were a prominent part of the initial pre-release! The tradition continues
    in ZF2, though each API wrapper now has its own repository.
</p>

<p>
    Alongside the 2.2.0 release, we're also providing initial beta releases of
    two new service components: <code>ZendService_Api</code> and 
    <code>ZendService_OpenStack</code>.
</p>

<h3>ZendService_Api</h3>

<p>
    This is an HTTP microframework for consuming generic API calls in PHP. This 
    framework can be used to create PHP libraries that consume specific HTTP APIs 
    using either a simple configuration array or files. This project uses the 
    <code>Zend\Http\Client</code> component of Zend Framework 2.
    <a href="http://www.zimuel.it/en/zendservice-api-micro-http-framework/">Enrico has 
blogged about the component previously.</a>
</p>

<h3>ZendService_OpenStack</h3>

<p>
    We began the development of a new library to support the last API version of <a 
    href="http://www.openstack.org">OpenStack</a>.
    The goal of this component is to simplify the usage of OpenStack in PHP, 
    providing a simple object oriented interface to its API services.
    This component is based on <code>ZendService_Api</code>, giving us a flexible 
    way to update the HTTP specification with the future API versions.
</p>

<h2>ZFTool Diagnostic Features</h2>

<p>
    Artur Bodera (aka Thinkscape) provided a new diagnostics feature for ZFTool. 
    Using this feature, we can allow the execution of customized diagnostics tests 
    in ZF2 projects, including testing for the required PHP version, testing for 
    specific PHP extensions, testing for specific ZF2 modules, testing for specific 
    PHP INI settings, and more; <a 
    href="https://github.com/zendframework/ZFTool/blob/master/docs/DIAGNOSTICS.md">read 
    the documentation to get an idea of the variety of tests available.</a>
</p>

<p>
    Moreover, with the collaboration of the <a 
    href="https://github.com/liip/LiipMonitor">LiipMonitor project</a>, we decided 
    to create common interfaces for performing diagnostic tests in PHP 
    applications.  An initial draft is available in the <a 
    href="https://github.com/zendframework/ZendDiagnostics">ZendDiagnostic 
    repository</a>.
</p>

<p>
    The diagnostics feature is available in the <a href="https://packages.zendframework.com/zftool.phar">
    latest version of ZFTool</a>.
</p>

<h2>Hydrator Improvements</h2>

<p>
    As noted earlier, <code>Zend\Stdlib\Hydrator</code> now has a plugin manager
    you can compose into your objects for managing hydrator instances. However,
    beyond that, we also now have an "Aggregate Hydrator", which allows you to
    provide specialized mapping of your object types to hydrators via an event-based
    system.
</p>

<p>
    Why is this exciting? Many of our users utilize <a href="http://doctrine-project.org">Doctrine</a>
    as an Object Relational Mapping (ORM) system. Oftentimes, the entities that you
    work with will also form a hierarchical structure. The Aggregate Hydrator allows
    allows you to attach a single hydrator to the parent object, and ensure that all
    child and descendant objects are either hydrated or extracted according to their
    type.
</p>

<h2>Reducing Dependencies</h2>

<p>
    We have started work on a new story for the framework: reducing dependencies
    for individual components. We have received feedback from a number of 
    developers and organizations indicating that even though each component
    can be installed individually, the number of dependencies most components
    mark as required leads to a situation where they feel they must choose
    whether or not they adopt the framework, versus adopting just the component.
    While of course we'd like them to adopt the framework, we'd rather they
    get a taste for it, if you will.
</p>

<p>
    While this story is primarily slated for 2.3, we have made our first steps
    in 2.2, with the <code>Zend\Feed</code> and <code>Zend\Validator</code>
    components. 
</p>

<p>
    <code>Zend\Validator</code> removed its dependency on the i18n component.
    We achieved this by creating <a href="http://martinfowler.com/eaaCatalog/separatedInterface.html" target="_blank">Separated 
    Interfaces</a> for the translator. Considering translation was only enabled
    if you explicitly injected a translator, this was a natural course of action.
    (It also introduced a minor backwards compatibility break; see below for more
    information.)
</p>

<p>
    For <code>Zend\Feed</code>, many "required" dependencies were actually
    optional already, and we could mark them as such. There were two that were
    not, however, and which required similar treatment as <code>Zend\Validator</code>
    in creating separated interfaces: the service manager (used for extension
    management) and HTTP (for fetching remote feeds with the reader). Interfaces
    were developed for each of these, and <code>Zend\Feed</code> now has only
    two required dependencies. A nice side benefit is that you can now use
    third-party HTTP clients with <code>Zend\Feed\Reader</code>!
</p>

<h2>Migration Notes</h2>

<p>
    While we have worked hard to keep code backwards compatible (BC), there are a few
    noteworth changes that <em>may</em> affect your code.
</p>

<ul>
    <li><code>Zend\Validator</code> no longer directly consumes a <code>Zend\I18n\Translator\Translator</code> 
        instance; instead, you must either implement <code>Zend\Validator\Translator\TranslatorInterface</code>
        or use <code>Zend\Mvc\I18n\Translator</code>. In most cases, this change
        should be transparent, as validator instances managed by the 
        ValidatorPluginManager will already be using the correct instance.
    </li>

    <li>In 2.1.5, a BC break was accidently introduced into <code>Zend\Navigation</code> in
        order to enable a feature: MVC pages were altered to always use route match values when
        available when generating URIs. 2.2.0 was modified to add a flag to enable this
        behavior on demand, but defaults to the original behavior, which does not
        pass the route match values to the pages. If you relied on this behavior
        in 2.1.5, add the following option to your individual MVC page definitions:

        <pre class="highlight"><code><span style="color: #000000">
<span style="color: #0000BB">&lt;?php<br /></span><span style="color: #DD0000">'use_route_match'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #0000BB">true</span><span style="color: #007700">,<br /></span>
</span>
</code>        </pre>
    </li>
</ul>

<h2>Other Notable Improvements</h2>

<ul>
    <li>
        <strong>Authentication:</strong> The DB adapter now supports non-RDBMS credential validation.
    </li>

    <li>
        <strong>Cache:</strong> New storage backend: Redis.
    </li>

    <li>
        <strong>Code:</strong> The ClassGenerator now has a removeMethod() method.
    </li>

    <li>
        <strong>Console:</strong> Incremental improvements to layout and colorization of banners
        and usage messages; fixes for how literal and non-literal matches are returned.
    </li>

    <li>
        <strong>Filter:</strong> New DateTimeFormatter filter.
    </li>

    <li>
        <strong>Form:</strong> Many incremental improvements to selected 
        elements; new FormAbstractServiceFactory for defining form services; minor improvements
        to make the form component work with the DI service factory.
    </li>

    <li>
        <strong>InputFilter</strong>: new CollectionInputFilter for working 
        with form Collections; new InputFilterPluginManager providing 
        integration and services for the ServiceManager.
    </li>

    <li>
        <strong>I18n:</strong> We removed ext/intl as a hard requirement, and made it only a
        suggested requirement; the Translator has an optional dependency on the EventManager,
        providing the ability to tie into "missing message" and "missing translations" events;
        new country-specific PhoneNumber validator.
    </li>

    <li>
        <strong>ModuleManager:</strong> Now allows passing actual Module instances (not just names).
    </li>

    <li>
        <strong>Navigation:</strong> Incremental improvements, particularly to URL generation.
    </li>

    <li>
        <strong>MVC:</strong> You can now configure the initial set of MVC 
        event listeners in the configuration file; the MVC stack now detects generic HTTP responses
        when detecting event short circuiting; the default ExceptionStrategy 
        now allows returning JSON; opt-in translatable segment routing; many incremental
        improvements to the AbstractRestfulController to make it more configurable and
        extensible; the Forward plugin was refactored to no longer require a 
        ServiceLocatorAware controller, and instead receive the ControllerManager via its
        factory.
    </li>

    <li>
        <strong>Paginator:</strong> Support for TableGateway objects.
    </li>

    <li>
        <strong>ServiceManager:</strong> Incremental improvements; performance optimizations;
        delegate factories, which provide a way to write factories for objects that replace
        a service with a decorator; "lazy" factories, allowing the ability to 
        delay factory creation invocation until the moment of first use.
    </li>

    <li>
        <strong>Stdlib:</strong> Addition of a HydratorAwareInterface; creation 
        of a HydratorPluginManager.
    </li>

    <li>
        <strong>SOAP:</strong> Major refactor of WSDL generation to make it more maintainable.
    </li>

    <li>
        <strong>Validator:</strong> New Brazilian IBAN format for IBAN validator; validators 
        now only return unique error messages; improved Maestro detection in 
        CreditCard validator.
    </li>

    <li>
        <strong>Version:</strong> use the ZF website API for finding the latest version,
        instead of GitHub.
    </li>

    <li>
        <strong>View:</strong> Many incremental improvements, primarily to 
        helpers; deprecation of the Placeholder Registry and removal of it from 
        the implemented placeholder system; new explicit factory classes for helpers
        that have collaborators (making them easier to override/replace).
    </li>
</ul>

<h2>Changelog</h2>

<p>
    Greater than 150 patches were applied for 2.2.0. 
</p>

<ul>
    <li><a href="/changelog/2.2.0">http://framework.zend.com/changelog/2.2.0</a></li>
</ul>

<h2>Other Announcements</h2>

<p>
    Over a month ago, we migrated <a href="https://github.com/zendframework/zf1">Zend 
    Framework 1 to GitHub</a>. At that time, we also migrated active issues created since
    1.12.0 to the <a href="https://github.com/zendframework/zf1/issues">GitHub issue tracker</a>,
    and marked our self-hosted issue tracker read-only. We have decided to turn off that issue
    tracker, but still retain the original issues at their original locations for purposes
    of history and transparency. You can find information on the change on our <a href="/issues">
    issues landing page</a>.
</p>

<h2>Thank You!</h2>

<p>
    Please join me in thanking everyone who provided new features and code 
    improvements for the 2.2.0 release! We had a huge leap forward in usability
    of many components, and a number of key new features that make developing
    applications simpler. We'll be continuing on these themes for the next
    release as well.
</p>

<h2>Roadmap</h2>

<p>
    Maintenance releases are scheduled for the third Wednesday of each month;
    expect 2.2.1 on 19 June 2013. Minor releases are scheduled roughly every 
    quarter; look for 2.3 sometime around mid-August or early September. 
    Proposals and ideas for stories will be presented on the zf-contributors
    mailing list; subscribe by sending an email to 
    zf-contributors-subscribe [at] lists.zend.com if you are interested in
    assisting with its development.
</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Zend Framework 2.2.0rc3 Released!</title>
      <pubDate>Fri, 10 May 2013 13:30:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/zend-framework-2-2-0rc3-released.html</link>
      <guid>http://framework.zend.com/blog/zend-framework-2-2-0rc3-released.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
    The Zend Framework community is pleased to announce the immediate availability
    of Zend Framework 2.2.0rc3! Packages and installation instructions are
    available at:
</p>

<ul>
    <li>
        <a href="https://packages.zendframework.com/">http://packages.zendframework.com/</a>
    </li>
</ul>

<p>
    This is a <em>release candidate</em>. It is not the final release, and 
    while stability is generally considered good, there may still be issues
    to resolve between now and the stable release. Use in production with 
    caution.
</p>

<p>
    <strong>DO</strong> please test your applications on this RC, as we would 
    like to ensure that it remains backwards compatible, and that the migration
    path is smooth.
</p><h2>Changes in this version</h2>

<p>
    Please see our <a href="/blog/zend-framework-2-2-0rc1-released.html">post for 2.2.0rc1</a>
    and our <a href="/blog/zend-framework-2-2-0rc1-released.html">post for 2.2.0rc2</a>
    for a list of changes. In addition to those changes, the following have been
    made:
</p>

<ul>
    <li>
    <p>
        A late addition of <code>Zend\Stdlib\Hydrator\Aggregate</code> was made. This
        functionality allows the ability to map hydrators to objects via events, and
        generally streamlines the process of having a single hydrator for a hierarchy
        of objects. Read more in the <a href="http://zf2.readthedocs.org/en/latest/modules/zend.stdlib.hydrator.aggregate.html">AggregateHydrator documentation</a>.
    </p>
    </li>

    <li>
    <p>
        Improvements were made to <code>Zend\Di</code> to make it work better with the
        various "Aware" interfaces that have proliferated throughout the framework,
        eliminating issues where the component would attempt to instantiate an interface.
    </p>
    </li>
</ul>

<h2>Changelog</h2>

<p>
    Almost 200 patches were applied for 2.2.0. We will not release a full
    changelog until we create the stable release. In the meantime, you can
    view a full set of patches applied for 2.2.0 in the 2.2.0 milestone on
    GitHub:
</p>

<ul>
    <li><a href="https://github.com/zendframework/zf2/issues?milestone=14&state=closed">Zend Framework 2.2.0 milestone</a></li>
</ul>

<h2>Thank You!</h2>

<p>
    Please join me in thanking everyone who provided new features and code 
    improvements for this upcoming 2.2.0 release!
</p>

<h2>Roadmap</h2>

<p>
    This is the third release candidate. At this time, we anticipate a stable 
    release sometime mid-week next week.
</p>

<p>
    Over the next few days, we will be expanding on documentation, and fixing 
    any critical issues brought to our attention; we do not anticipate many,
    if any, critical issues at this time, however.
</p>

<p>
    Again, <strong>DO</strong> please test your applications on this RC, as we 
    would like to ensure that it remains backwards compatible, and that the 
    migration path is smooth.
</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
  </channel>
</rss>
