<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/">
  <channel>
    <title>Author: Matthew Weier O'Phinney - ZF Blog</title>
    <description>Author: Matthew Weier O'Phinney - ZF Blog</description>
    <pubDate>Wed, 16 Apr 2014 18:30:00 +0000</pubDate>
    <generator>Zend_Feed_Writer 2 (http://framework.zend.com)</generator>
    <link>http://framework.zend.com/blog/author/matthew.html</link>
    <atom:link rel="self" type="application/rss+xml" href="http://framework.zend.com/blog/author/matthew-rss.xml"/>
    <item>
      <title>Apigility 1.0.0beta2 Released!</title>
      <pubDate>Wed, 16 Apr 2014 18:30:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/apigility-1-0-0beta2-released.html</link>
      <guid>http://framework.zend.com/blog/apigility-1-0-0beta2-released.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>We are pleased to announce the immediate availability of Apigility 1.0.0beta2!</p>

<ul>
    <li><a href="http://apigility.org/download">http://apigility.org/download</a></li>
</ul>

<p>This is our second beta release of Apigility, and introduces extensive 
documentation, Admin UI performance improvements, and deployment tools!</p><h2>Documentation</h2>

<p>The primary goal of the beta phase for the Zend Framework team is documenting the project. We've made enormous headway at this point, but we'll let <strong>you</strong> be the judge of that; <a href="http://apigility.org/documentation">visit the documentation yourself</a>!</p>

<p>Among topics covered:</p>

<ul>
    <li>A &quot;Getting Started&quot; guide, and a companion, &quot;REST Service Tutorial&quot;. </li>
    <li>An API Primer </li>
    <li>Chapters on Authentication/Authorization, Content Validation, and the  Documentation features. </li>
    <li>A module-by-module reference guide, detailing configuration options.</li>
</ul>

<h2>New Features</h2>

<p>While the beta cycle is primarily around stabilizing the API and Admin UI, we decided one new feature warranted inclusion in version 1: a packaging/deployment tool, <a href="https://github.com/zfcampus/zf-deploy">zf-deploy</a>.</p>

<p>This tool allows you to create packages from your Apigility -- or any ZF2 application -- for deployment. Formats supported include zip, tar, tgz, and zpk (the Zend Server deployment package format). We plan to integrate support for deploying zpk packages soon as well.</p>

<h2>Beta2 Updates</h2>

<p>Polishing, polishing, polishing was our mantra for beta2. This included incorporating user feedback, but also scrutinizing the UI and code for consistency issues.</p>

<h3>UI Updates</h3>

<p>Following beta1, we had a number of complaints about UI responsiveness, particularly around the &quot;Fields&quot; screen. We did some analysis of the UI, and a lot of work around dynamically loading and unloading DOM in the admin based on what should be visible. As a result, we were able to significantly improve responsiveness. There may be more work to do, but early reports indicate that the changes make the Admin UI usable in situations that previously crashed the browser.</p>

<p>In addition to the performance improvements, we made the following updates:</p>

<ul>
    <li><p>On the &quot;Authorizations&quot; screen for each API, if no authentication is currently  configured, we display a message to this effect, and link to the  authentication screen. Unfortunately, in beta1, that link was invalid; we've  fixed this.</p></li>
    <li><p>The &quot;Fields&quot; tab received a slight overhaul. We noticed that items with  toggles displayed &quot;Yes/No&quot; terminology, but &quot;On/Off&quot; for the actual form  input; these now use &quot;Yes/No&quot; verbiage consistently. The &quot;Help&quot; screen could  not be dismissed with the <code>&lt;Esc&gt;</code> key; it now can. Previously, when hitting  <code>&lt;Enter&gt;</code> from the &quot;Create New Field&quot; text input, it would raise the &quot;Help&quot;  screen; it now properly creates the new field. The &quot;Description&quot; field was  moved to the first option displayed for each field, to promote documentation  of fields. We also added a &quot;Validation Failure Message&quot; field to allow  specifying a unified error message on failed validation (vs. one or more per  validator); we also ensured that &quot;blanking&quot; out the data in this field will  remove any such message previously set. Finally, filters are now listed before  validators, to signal the order in which validation operations occur  (filtering/normalization occurs before validation).</p></li>
    <li><p>The &quot;Source Code&quot; tab was not properly generating links for files; we've fixed  this in beta2.</p></li>
</ul>

<h3>Engine Updates</h3>

<p>A few improvements were made to the API engine itself:</p>

<ul>
    <li><p>The <code>UnauthorizedListener</code> registered by the <code>zf-apigility</code> module was not  registering headers set by the <code>zf-mvc-auth</code> module, meaning that the  <code>WWW-Authenticate</code> header was not propagating. This has been corrected.</p></li>
    <li><p>We modified <code>ZF\ContentNegotiation\JsonModel</code> to check for <code>json_encode()</code>  errors, and to raise an exception when one is detected. This prevents  situations where an empty response is returned on inability to serialize to  JSON.</p></li>
    <li><p><code>zf-apigility-documentation-swagger</code> was not returning a <code>Content-Type</code> header  value of <code>application/vnd.swagger+json</code>; it now does.</p></li>
    <li><p>We fixed the bcrypt cost in <code>zf-oauth2</code> to use the defaults from <code>Zend\Crypt</code>.</p></li>
    <li><p>We updated the OAuth2 database schema in <code>zf-oauth2</code> to match that of the  upstream <a href="https://github.com/bshaffer/oauth2-server-php">oauth2-server-php package</a>.</p></li>
    <li><p>We now inject the <code>ZF\Rest\ResourceEvent</code> with the current MVC request object;  you can retrieve it from within your resource class using  <code>$this-&gt;getEvent()-&gt;getRequest()</code>. This will give you access to HTTP request  headers, query string arguments, etc.</p></li>
    <li><p>We no longer allow multiple &quot;self&quot; relational links in <code>zf-hal</code>.</p></li>
    <li><p>When specifying route parameters for a <code>zf-hal</code> metadata map, you can now use  a PHP callable as the value; <code>zf-hal</code> will invoke that callable with the  object for which a link is being generated in order to get the value for that  route parameter. This is particularly useful for deterimining identifiers for  parent resources.</p></li>
    <li><p>We moved the <code>zf-apiglity-welcome</code> requirement to be a development-only  requirement.</p></li>
</ul>

<h2>Roadmap</h2>

<p>We're excited to get a stable release of Apigility as soon as we possibly can. We feel that both the engine and Admin UI have stabilized significantly, and are targetting a stable release by the end of this month. <strong>During that time, we will be working primarily on additional documentation and critical bugfixes.</strong></p>

<p>As noted in the beta1 announcement, reaching stability is only the first step, however! We already have contributors making significant headway on features such as &quot;Doctrine-Connected&quot;, &quot;Mongo-Connected&quot;, and &quot;DB-Autodiscovery&quot; REST services, and we will be debuting these in a 1.1 version not long after we reach version 1.0. Stay tuned!</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Zend Framework 2.2.7 and 2.3.1 Released!</title>
      <pubDate>Tue, 15 Apr 2014 20:05:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/zend-framework-2-2-7-and-2-3-1-released.html</link>
      <guid>http://framework.zend.com/blog/zend-framework-2-2-7-and-2-3-1-released.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
    The Zend Framework community is pleased to announce the immediate availability
    of:
</p>

<ul>
    <li>Zend Framework <strong>2.2.7</strong></li>
    <li>Zend Framework <strong>2.3.1</strong></li>
</ul>

<ul>
    <li>
        <a href="/downloads/latest#ZF2">http://framework.zend.com/downloads/latest#ZF2</a>
    </li>
</ul>

<p>
    While these are scheduled maintenance releases, they also contain important security
    fixes; we strongly encourage users to upgrade.
</p><h2>Security Fixes</h2>

<p>
    One new security advisory has been made, and has been patched in both 2.2.7
    and 2.3.1.
</p>

<p>
    <a href="/security/advisory/ZF2014-03">ZF2014-03</a>, which mitigates 
    potential cross site scripting (XSS) vectors in multiple view helpers due 
    to inappropriate HTML attribute escaping. Many view helpers were using the 
    <kbd>escapeHtml()</kbd> view helper in order to escape HTML attributes. 
    This release patches them to use the <kbd>escapeHtmlAttr()</kbd> view 
    helper in these situations.  If you use form or navigation view helpers, or 
    "HTML element" view helpers (such as <kbd>gravatar()</kbd>, 
    <kbd>htmlFlash()</kbd>, <kbd>htmlPage()</kbd>, or 
    <kbd>htmlQuicktime()</kbd>), we recommend upgrading immediately.
</ul>

<p>
    For more information, follow the links above; if you use any of the components
    affected, please upgrade as soon as possible.
</p>

<h2>2.3.1</h2>

<p>
    In addition to the security fixes listed above, <strong>2.3.1</strong> 
    contains more than 80 bugfixes. In particular, a number of improvements were
    made to the behavior of nested form fieldsets and collection input filters 
    (which often go hand-in-hand).
</p>

<p>
    For the complete list of changes, <a href="/changelog/2.3.1">read the changelog</a>.
</p>

<h2>Thank You!</h2>

<p>
    As always, I'd like to thank the many contributors who made these
    releases possible! In particular, I'd like to thank the team at 
    <a href="https://roave.com">Roave</a>, who both reported and patched the
    ZF2014-03 security issue.
</p>

<h2>Roadmap</h2>

<p>
    Zend Framework 2 maintenance releases will happen bi-monthly, with the
    next one scheduled for mid-June, 2014. Releases may occur more frequently
    if security issues are reported.
</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Zend Framework 1.12.6 Released!</title>
      <pubDate>Tue, 15 Apr 2014 20:00:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/zend-framework-1-12-6-released.html</link>
      <guid>http://framework.zend.com/blog/zend-framework-1-12-6-released.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
    The Zend Framework community is pleased to announce the immediate availability
    of Zend Framework 1.12.6!
</p>

<ul>
    <li>
        <a href="/downloads/latest#ZF1">http://framework.zend.com/downloads/latest#ZF1</a>
    </li>
</ul>

<p>
    This is a maintenance release, and corrects a backwards compatibility break 
    introduced in 1.12.4.
</p><h2>Locale Updates</h2>

<p>
    Zend Framework 1.12.4 included an update to the <a href="//cldr.unicode.org/">CLDR</a>
    version shipped, bumping to version 24. Our previous CLDR version, however, was version 
    2.0 or newer -- a version over 3 years old at this point.
</p>

<p>
    The problem that arose is that <a href="https://github.com/akrabat/zf1/blob/0282f49112688f124373bcf915abb6227d050454/library/Zend/Locale.php#L38-L67">more 
    than two dozen locales have been renamed</a> in the official CLDR sources since then,
    and Zend Framework 1.12.4 shipped exactly what CLDR ships. As a result, users
    of those old locales suddenly found their applications no longer working, due to
    newly invalid locales.
</p>

<p>
    We have created some functionality in Zend Framework 1.12.6 to alias old locales to
    the equivalent new locale string, thus restoring backwards compatibility with versions
    prior to 1.12.4.
</p>

<h2>Tag Updates</h2>

<p>
    Prior to 1.12.4, we used Subversion for maintaining Zend Framework 1, and thus for tagging
    releases. Tags in Subversion, however, are branches, not snapshots, and our 
    build process at the time took advantage of that fact, for better or for worse: we would
    build the documentation, and then replace the documentation sources with the built artifacts;
    we would inject the ZF1 Extras repository; and we would inject the Dojo repository. As a
    result, the tag was not a 1:1 snapshot of the trunk at the time, but rather the result
    of a build process.
</p>

<p>
    This meant that if a user was using <kbd>svn:externals</kbd> and pinned to a tag, they would
    have the equivalent of our distribution packages -- in other words, access to the ZF1 Extras,
    Dojo, and documentation.
</p>

<p>
    With the <a href="http://framework.zend.com/blog/2013-03-27-zf1-git-migration.html">migration 
    to Git a year ago</a>, our build processes needed to change. Git does true tags: a tag is
    a snapshot of the branch at the revision when it was tagged. The result is that tags no
    longer contain the ZF1 Extras or documentation. Several users contacted us indicating
    this broke apps in which they were using <kbd>svn:externals</kbd>.
</p>

<p>
    We have decided we will <em>not</em> be returning to the previous tagging 
    methodology, as we much prefer keeping a separation between tags and the build artifacts.
    For those users who want to retain the same semantic structure of having the ZF1 Extras
    imported via <kbd>svn:externals</kbd> within the ZF1 library, you can still do that,
    by adding an additional line to your <kbd>svn:externals</kbd> property:
</p>

<pre><code>
vendor/ZendFramework https://github.com/zendframework/zf1/tags/{VERSION}
vendor/ZendFramework/extras https://github.com/zendframework/zf1-extras/tags/{VERSION}
</code></pre>

<p>
    (Modify the above to reflect your own project structure, and to inject the appropriate version
    string.)
</p>

<h2>Thank You!</h2>

<p>
    As always, I'd like to thank the many contributors who made this
    release possible! In particular, Rob Allen identified the various locales that
    needed updating, and submitted the locale aliasing solution.
</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Apigility 1.0.0beta1 Released!</title>
      <pubDate>Sun, 23 Mar 2014 15:00:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/apigility-1-0-0beta1-released.html</link>
      <guid>http://framework.zend.com/blog/apigility-1-0-0beta1-released.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
    We are pleased to announce the immediate availability
    of Apigility 1.0.0beta1!
</p>

<ul>
    <li>
        <a href="http://apigility.org/download">http://apigility.org/download</a>
    </li>
</ul>

<p>
    This is our first beta release of Apigility, marking its initial API 
    stability, and providing a solid preview of what to expect for the first 
    stable release.
</p><h2>What is Apigility?</h2>

<p>
    Apigility is the world's easiest way to create and provide secure, well-formed
    APIs.
</p>

<p>
    Apigility provides tools for describing and documenting your APIs, both
    RESTful and RPC. You can indicate the URL that provides a service, what
    HTTP methods are allowed, what representations (e.g., JSON, HTML, XML)
    can be provided, how many items to present per page of a collection, and
    more.
</p>

<p>
    We make choices so <em>you</em> don't have to. We have standardized on 
    JSON for RPC services, and <a href="http://tools.ietf.org/html/draft-kelly-json-hal-06">Hypermedia Application Language (HAL)</a>, 
    using the JSON variant, for REST services. We provide robust error handling,
    using <a href="http://tools.ietf.org/html/draft-nottingham-http-problem-06">Problem Details for HTTP APIs (API Problem)</a>.
    HTTP method negotiation and content negotiation are built in, ensuring that
    problems are reported early and provide detail on how to submit correct
    requests.
</p>

<p>
    You can document what fields can be submitted, and configure how those
    fields will be validated. You can indicate what services require an
    authenticated user - or even restrict usage based on the HTTP method!
    You can configure how users can authenticate, and we provide HTTP Basic,
    HTTP Digest, and OAuth2 authentication out-of-the-box.
</p>

<p>
    An API is only as useful as its documentation. Apigility lets you document
    every service, every HTTP method, and even differentiate between collections
    and entities. We provide both HTML and JSON documentation by default, and
    have a separate <a href="http://swagger.wordnik.com/">Swagger UI</a> 
    implementation you can opt-in to if desired. Alternately, you can write your
    own module for exporting the documentation in your own custom format -
    we hope to provide both API Blueprint and RAML in the future!
</p>

<p>
    You can use the full Apigility skeleton to create APIs, and the Admin UI
    for manipulating them. Alternately, you can opt-in to just the modules you
    are interested in, and configure them by hand for optimal control over how
    they all work and interact.
</p>

<p>
    In short, Apigility is the most powerful tool you can use for creating
    robust APIs.
</p>

<h2>New Website!</h2>

<p>
    First in our line of announcements, 
    <a href="http://www.zimuel.it/">Enrico Zimuel</a> has completely rewritten the
    <a href="http://apigility.org/">Apigility website</a> to provide more 
    content and a more modern look!
</p>

<h2>What has changed for beta1?</h2>

<p>
    In the three weeks since we released 0.9.1, we've been quite busy. Among other
    things, we worked hard to stabilize and release Zend Framework 2.3.0, which
    allows us to now pin Apigility to a stable version of the framework. This has
    reduced the package size from over 100MB to around 20MB - a reduction of 80%!
</p>

<p>
    Additionally, we've worked hard to fix a number of lingering issues in an
    effort to stabilize the Apigility engine and streamline the Admin UI 
    experience. The following is a list of changes.
</p>

<h3>New Features</h3>

<p>
    All Apigility modules were updated to use a <a href="https://github.com/php-fig/fig-standards/blob/master/proposed/psr-4-autoloader/psr-4-autoloader.md">PSR-4</a>
    structure and autoloader. This flattens the packages significantly, and also
    allows simplification of the PHPUnit test runner. A PSR-4 variant of the ZF2
    <code>StandardAutoloader</code>, <code>ZF\Apigility\Autoloader</code>, was created to provide true
    PSR-4 autoloading, including the ability to have underscores (<code>_</code>) in class
    names, which has been a common feature request. ZF2 <code>Module</code> classes created for
    new API modules now use the new autoloader for loading classes inside the
    module.
</p>

<p>
    All modules were added to <a href="https://travis-ci.org/">Travis-CI</a>, giving us continuous integration going
    forward.
</p>

<p>Additionally, the following features were added:</p>

<ul>
<li><a href="https://github.com/zfcampus/zf-content-validation/issues/8">zfcampus/zf-content-validation#8</a> adds the ability to provide HTTP method-specific input
  filters. This feature is not yet integrated into the Apigility Admin UI, but
  can be configured manually. To do so, add method/input filter service name
  pairs for the given controller service name; if no method-specific input
  filter exists, zf-content-validation will fallback to the <code>input_filter</code> key,
  if defined. As an example:
<pre><code>
    'zf-content-validation' => array(
        'Example\V1\Rest\Status\Controller' => array(
            // This is the fallback input filter, and the one the UI
            // can define and manipulate:
            'input_filter' => 'Example\V1\Rest\Status\Validator',
            // This one will be used on POST requests only:
            'POST' => 'Example\V1\Rest\Status\NewStatusValidator',
        ),
    ),
</code></pre>
</li>

<li><a href="https://github.com/zfcampus/zf-mvc-auth/issues/20">zfcampus/zf-mvc-auth#20</a>
  provides a patch that injects the <code>MvcEvent</code> with a new key,
  <code>ZF\MvcAuth\Identity</code>. You can pull the discovered identity from this event
  parameter now. Additionally, in REST resources, calling <code>$this->getIdentity()</code>
  will retrieve the identity.
</li>

<li><a href="https://github.com/zfcampus/zf-apigility-admin/issues/124">zfcampus/zf-apigility-admin#124</a> and
  <a href="https://github.com/zfcampus/zf-apigility-admin/issues/129">zfcampus/zf-apigility-admin#129</a>
  provide initial input filters for all Apigility Admin API services, as well as
  UI integration for reporting errors. All validation errors are caught and
  reported in a single dialog within the form that raises them.
</li>

<li>The "edit settings" screen for REST services now allows editing the entity
  class and collection class names.
</li>

<li>The "API Overview" page now links services to their overviews. The service
  description is displayed beneath each service; if not yet defined, a link to
  the "edit documentation" tab for the service is provided.
</li>

<li>A new modal will be displayed to users of the Apigility Admin UI if the API
  detects that the filesystem is not writable. The modal details what changes
  need to be made in order for the UI and API to work correctly.
</li>

<li><a href="https://github.com/zfcampus/zf-oauth2/issue/30">zfcampus/zf-oauth2#30</a> splits
  out initialization of the <code>oauth2-server-php</code> server from the <code>zf-oauth2</code>
  controller, allowing the ability to replace it, write a delegator for it, etc.
</li>
</ul>

<h3>Breaking Changes</h3>

<ul>
<li><a href="https://github.com/zfcampus/zf-content-validation/issues/10">zfcampus/zf-content-validation#10</a>
  changes the key used by the <code>InputFilterAbstractServiceFactory</code> from
  <code>input_filters</code> to <code>input_filter_specs</code>. This is due to the fact that ZF 2.3.0
  introduces an <code>InputFilterManager</code>, which is already consuming the key
  <code>input_filters</code>. Wrapped in this change is the fact that the
  <code>InputFilterAbstractServiceFactory</code> is now registered as an abstract service
  factory with the <code>InputFilterManager</code>, instead of with the application service
  manager instance.
  <br /><br />
  For those updating their Apigility libraries to 1.0.0beta1, edit your
  <code>module.config.php</code> files to rename the <code>input_filters</code> key to
  <code>input_filter_specs</code>.
</li>

<li>The <code>zf-configuration</code> controller <code>ZF\Configuration\Controller</code> was moved into
  <code>zf-apigility-admin</code>. This URI for the service remains the same, but the
  controller itself has moved. (This change was done to consolidate all Admin
  API controllers in the same module, as well as to reduce the dependencies
  needed in the <code>zf-configuration</code> component.)
</li>
</ul>

<h3>Fixes</h3>

<ul>
<li><a href="https://github.com/zfcampus/zf-apigility-admin/issues/115">zfcampus/zf-apigility-admin#115</a> - Ensures
  that non-SQLite PDO OAuth2 adapters may be provided without error.
</li>

<li><a href="https://github.com/zfcampus/zf-apigility-admin/issues/117">zfcampus/zf-apigility-admin#117</a> - Ensure
  that the <code>route_match</code> is passed to the API when saving an RPC service.
</li>

<li><a href="https://github.com/zfcampus/zf-apigility-admin/issues/118">zfcampus/zf-apigility-admin#118</a> - Ensure
  that the Content Negotiation <code>selector</code> is passed to the API correctly when
  saving an RPC service.
</li>

<li><a href="https://github.com/zfcampus/zf-apigility-admin/issues/120">zfcampus/zf-apigility-admin#120</a> - Remove
  duplicate call to initialize the <code>ServerUrl</code> helper.
</li>

<li><a href="https://github.com/zfcampus/zf-apigility-admin/issues/122">zfcampus/zf-apigility-admin#122</a> and
  <a href="https://github.com/zfcampus/zf-apigility-admin/issues/123">zfcampus/zf-apigility-admin#123</a> - Add checks
  for array keys before accessing them when building the documentation graph for
  a given service operation.
</li>

<li><a href="https://github.com/zfcampus/zf-apigility-admin/issues/126">zfcampus/zf-apigility-admin#126</a> - Updates 
  the admin to pass the <code>X-UA-Compatible</code> meta tag in order to provide Internet
  Explorer compatibility.
</li>

<li><a href="https://github.com/zfcampus/zf-apigility-admin/issues/132">zfcampus/zf-apigility-admin#132</a> - Ensures
  that authorization data is fetched each time a new service is created, a
  service is updated, or a service is deleted, ensuring the table reflects the
  current list of available services and HTTP methods.
</li>

<li><a href="https://github.com/zfcampus/zf-apigility-admin/issues/133">zfcampus/zf-apigility-admin#133</a> - Updates
  the "angular-flash" functionality to anchor flash messages to the bottom of
  the window. Additionally, any error flash messages now have a "close" button,
  requiring user intervention for dismissal.
</li>

<li>Many fixes were made to the UI to improve performance, remove UI refresh
  errors, provide more consistent color schemes, ensure tabs stay focussed
  between state transitions, etc.
</li>

<li>The Apigility Admin API was updated to break the authentication service into
  more granular sub-services, one for each type of authentication supported.
  This simplifies validation, and allows for future expansion.
</li>

<li>Work was done to ensure opcode cache detection is as solid as possible. We now
  properly distinguish between APC and APCu, allowing the latter to be enabled
  when using the Admin API.
</li>

<li><code>zf-apigility-documentation</code> was not correctly aggregating RPC documentation;
  this has been fixed.
</li>

<li>We reviewed the various events triggered to ensure that they were happening in
  the correct order, which we defined as:
  <ul>
    <li>Authentication</li>
    <li>HTTP method negotiation (is the method called allowed for the service?)</li>
    <li>Authorization (is the discovered identity allowed to perform the requested action?)</li>
    <li>Content Negotiation (determine incoming Content-Type and marshal data from request body; determine if Accept and/or Content-Type are valid for the request)</li>
    <li>Content Validation</li>
  </ul>

  Several event listener priorities were updated to fit the above requirements.
  A new listener, <code>ZF\Rest\Listener\OptionsListener</code>, was introduced to handle
  HTTP method negotiation for REST services, and is registered at the same
  priority as the RPC <code>OptionsListener</code> (which previously existed).
</li>

<li><code>zf-configuration</code> was updated to never write configuration using short-array
  notation; this was done to ensure compatibility of generated configuration
  with PHP 5.3 (as developers may use the admin API via 5.4, but deploy to 5.3).
</li>

<h2>Roadmap</h2>

<p>
    We're excited to get a stable release of Apigility as soon as we possibly
    can. To that end, we plan to do a beta release weekly until it's ready.
    <strong>During that time, we will be working primarily on documentation and critical
    bugfixes</strong>. We hope to have a stable release within a month.
</p>

<p>
    Reaching stability is only the first step, however! We already have contributors
    making significant headway on features such as "Doctrine-Connected" and
    "Mongo-Connected" REST services, and we will be debuting these in a 1.1 version
    not long after we reach version 1.0. Stay tuned!
</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Zend Framework 2.3.0 Released!</title>
      <pubDate>Wed, 12 Mar 2014 18:00:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/zend-framework-2-3-0-released.html</link>
      <guid>http://framework.zend.com/blog/zend-framework-2-3-0-released.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
    The Zend Framework community is pleased to announce the immediate availability
    of Zend Framework 2.3.0!
</p>

<ul>
    <li>
        <a href="/downloads/latest">http://framework.zend.com/downloads/latest</a>
    </li>
</ul>

<p>
    This is our first minor release in 10 months, providing the first new features
    since May of 2013.
</p>

<p>
    Among those features, we've updated our minimum supported PHP version to 5.3.23,
    fixed a large number of issues with how form collections work, improved performance
    of the service manager, and much, much more.
</p><h2>New minimum supported PHP version</h2>

<p>This release ups the minimum required PHP version from 5.3.3 to <strong>5.3.23</strong>.
Making this change affords the following:</p>

<ul>
    <li>
        <p>5.3.9 and up have a fix that allows a class to implement multiple interfaces
        that define the same method, so long as the signatures are compatible. Prior
        to that version, doing so raised a fatal error. This change is necessary in
        order to solve a problem with separated interface usage in the framework.</p>
    </li>
    <li>
        <p>5.3.23 contains a fix for <a href="https://bugs.php.net/bug.php?id=52861">PHP bug #62672</a>.
        Adopting this version or greater will allow us to (eventually) remove polyfill
        support that works around the symptoms of that issue.</p>
    </li>
</ul>

<h2>New Additions / Improvements</h2>

<p>
    More than 230 pull requests and issues were closed for this release -- far 
    too many to list individually. That said, there are quite a few incremental improvements
    that will be of interest to Zend Framework 2 users. Below is a list broken down
    by component.
</p>

<h3>Zend\Authentication</h3>
<ul>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/4815">#4815</a> promotes <code>Zend\AuthenticationService\Adapter\Http</code>'s
  <code>_challengeClient()</code> method to public visibility, and renames it to
  <code>challengeClient()</code>; the old method remains as a proxy to the new one. This
  allows implementors to issue the HTTP credential challenge manually.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5901">#5901</a> adds an <code>AuthenticationServiceInterface</code>, to allow
  alternate implementations.</p>
</li>
</ul>

<h3>Zend\Cache</h3>
<ul>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/4512">#4512</a> introduces a <code>BlackHole</code> cache storage adapter; this
  adapter is useful during development, when you do not want cache operations to
  have effect, but need to test that a system using caching works.</p>
</li>
<li>
<p><code>Zend\Cache\Storage\Adapter\Apc</code> now supports "check and set" operations, per
  <a href="https://github.com/zendframework/zf2/issues/4844">#4844</a>.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5829">#5829</a> adds a new cache adapter, <code>Memcache</code> (not to be
  confused with <code>Memcached</code>), for use with <code>ext/memcache</code>.</p>
</li>
</ul>

<h3>Zend\Code</h3>
<ul>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/4989">#4989</a> adds the ability to identify PHP traits in the
  <code>TokenArrayScanner</code>.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/6262">#6262</a> adds a <code>getPrototype()</code> method to <code>MethodReflection</code>;
  this returns a structured array detailing the namespace, class, visibility,
  and arguments (including names, default values, and types) for the method.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5400">#5400</a> adds the capability for the <code>PropertyScanner</code> to
  determine the PHP type of a given object property, via the new method
  <code>getValueType()</code>.</p>
</li>
</ul>

<h3>Zend\Config</h3>
<ul>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/4824">#4824</a> adds a <code>JavaProperties</code> configuration reader.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/4860">#4860</a> provides an abstract factory for retrieving named
  top-level configuration keys from the <code>Config</code> service. As an example, if you
  have a key <code>zf-apigility</code>, you can now retrieve it from the service manager
  using <code>config-zf-apigility</code> or <code>zf-apigility-config</code>. Namespaces are also
  often-used for top-level keys, and notations such as <code>ZF\Apigility\Config</code> may
  be used, too.</p>
</li>
<li>
<p>A number of improvements were made to the <code>PhpArray</code> config writer to make the
  output it generates more readable, as well as more consistent with the values
  being passed as input. These include consistent 4-space indentation; putting
  the opening <code>array</code> declarations on the same line as <code>=&gt;</code> operators; ensuring
  boolean values are written as booleans; ensuring strings are written with
  proper, and readable, escapeing; allowing writing arrays using PHP 5.4
  short-array syntax; and making attempts to replace paths using <code>__DIR__</code>
  notation when possible.</p>
</li>
</ul>

<h3>Zend\Console</h3>
<ul>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/4449">#4449</a> moves the console routing logic out of <code>Zend\Mvc</code> and
  into <code>Zend\Console\ConsoleRouteMatcher</code>. This allows re-use of the
  <code>Zend\Console</code> component in a standalone fashion.
  <code>Zend\Mvc\Router\Console\Simple</code> was refactored to consume a
  <code>ConsoleRouteMatcher</code> instance internally.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/4606">#4606</a> adds support for <code>Zend\Console</code> to detect the console
  encoding, and use that when emitting text.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5711">#5711</a> implements the <code>writeTextBlock()</code> method in the
  <code>AbstractAdapter</code>, allowing the ability to specify a block size and text to
  wrap within that block when generating console output.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5720">#5720</a> fixes console routing to ensure CamelCase values in
  routes will be treated as literals, and ALLCAPS can be used to define value
  parameters.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5713">#5713</a> adds the ability to specify option callback hooks in
  <code>Zend\Console\Getopt</code>. As examples:</p>
</li>
</ul>

<pre><code>
$opts-&gt;setOptionCallback('apple' function ($value, $opts) {
      echo "You want a $value apple!\n";
});
</code></pre>

<p>Essentially, once <code>parse()</code> is called, if the specified option was provided,
  the callback will be triggered. Returning a boolean <code>false</code> will cause cause
  <code>parse()</code> to invalidate usage, raising an exception.</p>

<h3>Zend\Crypt</h3>
<ul>
<li><a href="https://github.com/zendframework/zf2/issues/5024">#5024</a> removes the <code>KEY_DERIV_HMAC</code> constant, and allows the
  ability to specify alternate PBKDF2 hashing algorithms within the
  <code>Zend\Crypt\BlockCipher</code> class.</li>
</ul>

<h3>Zend\Db</h3>
<ul>
<li><code>Zend\Db\Sql</code> with MySQL can utilize a <code>Select</code> object containing an <code>OFFSET</code> without <code>LIMIT</code></li>
<li><code>Zend\Db\Sql</code>'s <code>In</code> predicate now supports subselects</li>
<li><code>Zend\Db\Sql</code> now has a <code>NotIn</code> predicate.</li>
<li>A method <code>inTransaction()</code> has been added to all <code>Zend\Db\Adapter</code> drivers</li>
<li><code>Zend\Db\Sql\Select</code>'s <code>from()</code> can be a subselect</li>
<li><code>Zend\Db\Sql\Insert</code> can use a Select object as the value source <code>(INSERT INTO ... SELECT)</code></li>
<li><code>Zend\Db\Adapter</code> PDO now accepts a charset when creating the DSN</li>
</ul>

<h3>Zend\Dom</h3>
<ul>
<li><a href="https://github.com/zendframework/zf2/issues/5356">#5356</a> provides a backwards-compatible rewrite of the
  <code>Zend\Dom\Query</code> component and logic. It presents a new class,
  <code>Zend\Dom\Document</code>, along with a subcomponent of the same name containing new
  <code>Query</code> and <code>Nodelist</code> classes. Usage becomes:</li>
</ul>

<pre><code>
use ZendDomDocument;
$document = new Document($htmlXmlOrFile, $docType, $encoding);
foreach (DocumentQuery($expression, $document, $xpathOrCssQueryType) as $match) {
    // do something with matching DOMNode
}
// More concretely:
$document = new Document($someHtml, 'DOC_HTML', 'utf-8');
foreach (DocumentQuery('img.current', $document, 'TYPE_CSS') as $match) {
    $source = $document-&gt;attributes-&gt;getNamedItem('src');
}
</pre></code>

<p><code>Zend\Dom\Query</code> and <code>Zend\Dom\Css2Xpath</code> have been deprecated in favor of the
  new API. <code>Zend\Test\PHPUnit</code> still needs to be updated to use the new API,
  however.</p>

<h3>Zend\EventManager</h3>
<ul>
<li><a href="https://github.com/zendframework/zf2/issues/5283">#5283</a> deprecates the <code>ProvidesEvents</code> trait in favor of the
  <code>EventManagerAwareTrait</code>; the latter is named after the interface it
  implements, and includes the now standard <code>Trait</code> suffix.</li>
</ul>

<h3>Zend\Filter</h3>
<ul>
<li><a href="https://github.com/zendframework/zf2/issues/5436">#5436</a> refactors <code>Zend\Filter</code> to ensure consistency
  throughout the component. Filters now never trigger errors or throw
  exceptions; if a filter cannot handle an incoming input, it will return it
  unmodified.</li>
</ul>

<h3>Zend\Form</h3>
<ul>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/4400">#4400</a> allows you to pass the string name of the element you
  want to create as the second argument when using
  <code>Zend\Form\FormElementManager::get()</code> - instead of requiring that you pass it
  in as <code>array('name' =&gt; 'name value')</code>.</p>
</li>
<li>
<p>The <code>Zend\Form</code> component has had a number of improvements surrounding HTML
  escaping and form labels. Among these is the addition of
  <code>LabelAwareInterface</code>, which defines methods for an element or fieldset
  to provide a label, label attributes, and label options (one of which is the
  option <code>disable_html_escape</code>, allowing developers to provide markup within the
  label text). Many efforts have been made to keep this functionality backwards
  compatible, while simultaneously ensuring that proper defaults are provided.</p>
</li>
<li>
<p>Numerous improvements were made to how form Collections are managed, including
  improvements to counts, managing input filters, handling nested sets, binding
  objects, and more.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5918">#5918</a> ensures that multiple CSRF elements on the same page
  with the same name should not conflict, and still validate.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/4846">#4846</a> adds the ability to disable the <code>InArray</code> validator
  when defining a <code>MultiCheckbox</code> form element.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/4884">#4884</a> provides the ability to replace elements within a form
  collection.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/4927">#4927</a> adds the ability to provide a <code>Traversable</code> value to a
  nested fieldset in a form.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/4971">#4971</a> updates the form factory to allow specifying <code>null</code>
  configuration values. This allows one module to override and cancel the
  setting of another when desired.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5420">#5420</a> adds the ability to compose <code>Zend\Form</code> collections via
  annotations.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5456">#5456</a> adds the ability for annotations to provide input
  filter specifications when provided on an object representing a fieldset.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5562">#5562</a> adds the <code>unsetValueOption()</code> method to <code>Select</code> and
  <code>MultiCheckbox</code> element types.</p>
</li>
</ul>

<h3>Zend\Http</h3>
<ul>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/4950">#4950</a> adds <code>match()</code> capabilities to the <code>ContentType</code>
   header class, similar to the implementation for <code>Accept</code> header instances.
   This allows matching incoming data against a mimetype in order to perform
   content negotiation.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5029">#5029</a> adds a new header class for <code>Origin</code> headers.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5316">#5316</a> adds a new header class for <code>Content-Security-Policy</code>
  headers.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5732">#5732</a> adds the ability to set custom HTTP response status
  codes via a new <code>Response</code> method, <code>setCustomStatusCode()</code>.</p>
</li>
</ul>

<h3>Zend\I18n</h3>
<ul>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/4510">#4510</a> introduces <code>Zend\I18n\Filter\NumberParse</code>, which will
  filter a string parseable by PHP's built-in <code>NumberFormatter</code> to a number.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5034">#5034</a> makes the <code>PhoneNumber</code> validator <code>Locale</code>-aware.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5108">#5108</a> introduces a <code>TranslatorInterface</code>, defining the
  methods <code>translate()</code> and <code>translatePlural()</code>. This will allow for alternate
  implementations, but also for other components to create equivalent,
  component-specific interfaces, and thus reduce dependencies.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5825">#5825</a> adds a new translation loader, <code>PhpMemoryArray</code>. It
  behaves like the <code>PhpArray</code> loader, but instead of accepting a file that
  returns an array, it accepts an array of translations directly. This allows
  specifying translations as part of configuration, or via a caching system.</p>
</li>
</ul>

<h3>Zend\InputFilter</h3>
<ul>
<li>A number of updates were made regarding how collection input filters work to
  ensure they are more consistent, and operate according to user expectations
  with regard to empty sets, nested sets, etc.</li>
</ul>

<h3>Zend\Json</h3>
<ul>
<li><a href="https://github.com/zendframework/zf2/issues/5933">#5933</a> provides the ability to use arbitrary response codes
  with <code>Zend\Json\Server</code>. </li>
</ul>

<h3>Zend\Loader</h3>
<ul>
<li><a href="https://github.com/zendframework/zf2/issues/5783">#5783</a> fixes the <code>StandardAutoloader</code> such that if a
  namespace matches, but no matching class is found, it will continue to loop
  through any other namespaces present. This fixes a situation whereby a map for
  a subnamespace may be registered later than the parent; prior to the change,
  the subnamespace would never be matched.</li>
</ul>

<h3>Zend\Log</h3>
<ul>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/4455">#4455</a> adds new service providers for <code>Zend\Log</code>: <code>log_writers</code> and <code>log_processors</code>. These allow you to provide custom log writer and processor services for use with the <code>Zend\Log\LoggerAbstractServiceFactory</code>.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/4742">#4742</a> provides a new interface,
  <code>Zend\Log\LoggerAwareInterface</code>, for hinting that an object composes, or can
  compose, a <code>Zend\Log\Logger</code> instance. A corresponding PHP Trait is also
  provided.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5875">#5875</a> adds a <code>registerFatalErrorShutdownFunction()</code> method to
  <code>Zend\Log\Logger</code>, to handle logging fatal runtime errors.</p>
</li>
</ul>

<h3>Zend\Mail</h3>
<ul>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5261">#5261</a> adds a new <code>NullTransport</code> to <code>Zend\Mail</code>, providing a
  no-op mail transport. This can be useful in non-production environments, or
  when needing to selectively disable mail sending capabilities without altering
  code.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5470">#5470</a> adds <code>Zend\Mail\Transport\Factory</code>, for simplifying
  creation of a mail transport via configuration.</p>
</li>
</ul>

<h3>Zend\Mvc</h3>
<ul>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/4849">#4849</a> updates <code>Zend\Mvc\Application::run()</code> such that it now
  always returns the <code>Application</code> instance. If an event returns a response
  object, it is always pushed into the <code>Application</code> instance now so that it may
  be retrieved after <code>run()</code> has finished executing.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/4962">#4962</a> modifies the various MVC factories to reference the
  service <code>ControllerManager</code> instead of <code>ControllerLoader</code> (which is a legacy
  name from early beta releases); <code>ControllerManager</code> was made an alias of
  <code>ControllerLoader</code>. This change future-proofs the MVC. If you are using
  <code>ControllerLoader</code> in your own code, we encourage you to change those
  references to <code>ControllerManager</code> (though <code>ControllerLoader</code> will continue to
  work for the foreseeable future).</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5108">#5108</a> introduces a <code>DummyTranslator</code>, which will be used if
  <code>ext/intl</code> is not present, or if the developer wishes to disable translation
  (e.g., validators compose a translator by default, but quite often the
  validation messages do not need to be translated); translation can be disabled
  by setting the <code>translator</code> configuration key to a boolean <code>false</code>.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5469">#5469</a> adds a new <code>AbstractConsoleController</code>, and logic in
  the <code>ControllerManager</code> for injecting the <code>ConsoleAdapter</code> object into such
  controllers. This abstract class tests if the incoming request is a console
  request, and raises an exception if not; it also provides a <code>getConsole()</code>
  method for access to the composed <code>ConsoleAdapter</code>.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5612">#5612</a> updates <code>Zend\Mvc\Application::init()</code> to allow
  listeners specified in the configuration passed to the method to override
  those discovered during bootstrapping; in essence, application-level
  configuration should have more specificity than module-level configuration.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5670">#5670</a> provides the ability to create a <code>controller_map</code>
  within <code>view_manager</code> configuration. This map allows you to do the following:</p>
</li>
<li>
<p>Indicate modules that include subnamespaces in their name to include all
    namespace segments in the template name: <code>Xerkus\FooModule =&gt;
    xerkux/foo-module/</code> via the configuration <code>Xerkus\FooModule =&gt; true</code>.</p>
</li>
<li>Map a specific template prefix to a given module: <code>ZfcUser =&gt;
    'zf-commons/zfc-user</code>.</li>
</ul>
<p>This change is opt-in, and thus backwards compatible.</p>
<ul>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5759">#5759</a> adds a new method to the <code>FlashMessenger</code>,
  <code>renderCurrent()</code>, allowing you to render flash messages sent in the current
  request (using the same API as <code>renderMessages()</code>).</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5897">#5897</a> adds a <code>fromJsonRawBody()</code> method to the <code>Params</code>
  plugin, allowing the ability to decode and retrieve parameters passed via the
  request body as JSON.</p>
</li>
</ul>

<h3>Zend\Navigation</h3>
<ul>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5080">#5080</a> fixes the <code>Breadcrumb</code> view helper such that it will
  now pass the specified separator.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5803">#5803</a> hides sub menus when all pages in the sub menu are
  currently hidden.</p>
</li>
</ul>

<h3>Zend\Paginator</h3>
<ul>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/4427">#4427</a> adds the ability to provide <code>$group</code> and <code>$having</code> clauses to a <code>DbTableGateway</code> <code>Zend\Paginator</code> adapter.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5272">#5272</a> adds a new <code>Callback</code> pagination adapter; the new
  adapter accepts two callbacks, one for returning the items, another for
  returning the count. The items callback will receive the requested offset and
  number of items per page as arguments: <code>function ($offset, $itemsPerPage)</code>.</p>
</li>
</ul>

<h3>Zend\Permissions\Acl</h3>
<ul>
<li><a href="https://github.com/zendframework/zf2/issues/5628">#5628</a> adds a new <code>AssertionAggregate</code>, which enables two
  concepts: the ability to chain multiple assertions, as well as the ability to
  use named assertions as plugins. (The change also creates a
  <code>Zend\Permissions\Acl\Assertion\AssertionManager</code>, which is a plugin manager
  implementation).</li>
</ul>

<h3>Zend\ServiceManager</h3>
<ul>
<li>A number of performance improvements were made to how abstract factories are
  processed and invoked.</li>
</ul>

<h3>Zend\Session</h3>
<ul>
<li><a href="https://github.com/zendframework/zf2/issues/4995">#4995</a> adds the ability to specify session validators in
  configuration consumed by the <code>SessionManagerFactory</code>.</li>
</ul>

<h3>Zend\Soap</h3>
<ul>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5792">#5792</a> adds a "debug mode" to <code>Zend\Soap\Server</code>. When
  enabled, any exception thrown is treated as a <code>Fault</code> response (vs. only those
  whitelisted).</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5810">#5810</a> adds a <code>getException()</code> method to <code>Zend\Soap\Server</code>,
  allowing you to retrieve the exception that caused a fault response (e.g., to
  log it).</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5811">#5811</a> creates a public <code>getSoap()</code> method in
  <code>Zend\Soap\Server</code> to allow you to access the composed <code>SoapServer</code> instance.
  This allows you to use <code>setReturnResponse()</code> and still return fault responses
  (which must be triggered by the <code>SoapServer</code> instance directly.)</p>
</li>
</ul>

<h3>Zend\Stdlib</h3>
<ul>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/4534">#4534</a> introduces a <code>JsonSerializable</code> polyfill, to provide
  support for that built-in PHP interface on PHP versions prior to 5.4.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/4751">#4751</a> provides a new interface,
  <code>Zend\Stdlib\Hydrator\HydratorAwareInterface</code>, for hinting that an object
  composes, or can compose, a <code>Zend\Stdlib\Hydrator\HydratorInterface</code> instance.
  A corresponding PHP Trait is also provided.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/4908">#4908</a> segregates <code>Zend\Stdlib\Hydrator\HydratorInterface</code>
  into two separate interfaces, <code>Zend\Stdlib\Extractor\ExtractionInterface</code> and
  <code>Zend\Stdlib\Hydrator\HydrationInterfac</code>. The original interface has been
  modified to extend both of the new interfaces. This allows developers to
  implement one or the other behavior, based on the needs of the application.
  (As an example, if an application only needs to extract data for
  serialization, it could typehint on
  <code>Zend\Stdlib\Extractor\ExtractionInterface</code> only.)</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5364">#5364</a> adds a new subcomponent to hydrators, <code>NamingStrategy</code>.
  A <code>NamingStrategy</code> can be used by hydrators to determine the name to use for
  keys and properties when extracting and hydrating.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5365">#5365</a> adds <code>Zend\Stdlib\Guard</code>, which provides traits for
  performing common argument type validations. For example, an object composing the
  <code>ArrayOrTraversableGuardTrait</code> could call
  <code>$this-&gt;guardForArrayOrTraversable($arg)</code> in order to validate <code>$arg</code> is an
  array or <code>Traversable</code>.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5380">#5380</a> adds context support to hydrator strategies, allowing
  them to receive the object being extracted or the array being hydrated when
  performing their logic.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5702">#5702</a> moves <code>Zend\Mvc\Router\PriorityList</code> into
  <code>Zend\Stdlib</code>, as it has general-purpose use cases. The former class was
  modified to extend the latter.</p>
</li>
</ul>

<h3>Zend\Test</h3>
<ul>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/4946">#4946</a> adds two new methods to the
  <code>AbstractControllerTestCase</code>, <code>assertTemplateName()</code> and
  <code>assertNotTemplateName()</code>.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5649">#5649</a> adds the <code>assertResponseReasonPhrase()</code> assertion.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5730">#5730</a> adds the ability to allow session persistence when
  performing multiple dispatches.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5731">#5731</a> adds a new argument to <code>dispatch()</code>,
  <code>$isXmlHttpRequest</code>; when boolean <code>true</code>, this adds an <code>X-Requested-With:
  XMLHttpRequest</code> header to the request object.</p>
</li>
</ul>

<h3>Zend\Validator</h3>
<ul>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/4940">#4940</a> adds a new validator, <code>Bitwise</code>, for performing bitwise
  validation operations.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5664">#5664</a> removes the translation of validator message <em>keys</em>.
  While this is a backwards-incompatible change, this capability should never
  have been present, and removing it fixes a number of posted issues, as well as
  improves performance when retrieving validation error messages. A related
  change, <a href="https://github.com/zendframework/zf2/issues/5666">#5666</a>, removes translation of validation error
  messages from <code>Zend\Form\View\Helper\FormElementErrors</code>, as translation
  happens within the validators themselves; this prevents double translation,
  and, again, improves performance.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5780">#5780</a> adds the ability to set the "break chain on failure"
  flag via a configuration option; this allows setting the flag when using the
  <code>attachByName()</code> method of the <code>ValidatorChain</code>.</p>
</li>
</ul>

<h3>Zend\Version</h3>
<ul>
<li><a href="https://github.com/zendframework/zf2/issues/4625">#4625</a> adds the ability to pass a <code>Zend\Http\Client</code> to
  <code>Zend\Version\Version::getLatest()</code>, which should solve situations where
  <code>allow_url_fopen</code> is disabled.</li>
</ul>

<h3>Zend\View</h3>
<ul>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/4679">#4679</a> provides the ability to specify Internet Explorer
  conditional stylesheets in the <code>HeadLink</code> and <code>HeadStyle</code> view helpers,
  conditional metadata in the <code>HeadMeta</code> view helper, and conditional scripts in
  the <code>HeadScript</code> view helper.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5255">#5255</a> adds the ability to retrieve child view models based on
  what variable they registered to capture to in the parent; this is implemented
  via a new interface, <code>Zend\View\Model\RetrievableChildrenInterface</code>, which
  defines the method <code>getChildrenByCaptureTo()</code>.</p>
</li>
<li>
<p><a href="https://github.com/zendframework/zf2/issues/5266">#5266</a> attempts to make calls to <code>PhpRenderer::render()</code>
  slightly more robust by checking the return value from <code>include</code>ing a view
  script, and raising an exception when the <code>include</code> fails.</p>
</li>
</ul>

<h2>Thank You!</h2>

<p>
    A big thank you to the dozens upon dozens of contributors who helped make this
    new feature release a reality! This was truly a community-driven effort, and 
    would not have been possible without the contributions of each and every one
    of you.
</p>

<h2>Roadmap</h2>

<p>
    At this time, I am proposing a bi-monthly maintenance release schedule; however,
    we will often release an initial ".1" maintenance version sooner. After that, however,
    we will schedule maintenance releases every 2 months.
</p>

<p>
    For minor (feature) releases, I am proposing every six months, giving us a
    September 2014 release date for 2.4.0.
</p>

<p>
    If you have opinions on the release schedule, I invite you to voice them on our
    <a href="/archives">mailing lists</a>.
</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Zend Framework 1.12.5 Released!</title>
      <pubDate>Fri, 07 Mar 2014 17:50:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/zend-framework-1-12-5-released.html</link>
      <guid>http://framework.zend.com/blog/zend-framework-1-12-5-released.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
    The Zend Framework community is pleased to announce the immediate availability
    of Zend Framework 1.12.5!
</p>

<ul>
    <li>
        <a href="/downloads/latest">http://framework.zend.com/downloads/latest</a>
    </li>
</ul>

<p>
    This release fixes PHP 5.2 support for the 1.12 series. If you use PHP 5.2 
    with Zend Framework 1.12, we encourage you to upgrade immediately.
</p><h2>5.2 support</h2>

<p>
    <a href="/blog/zend-framework-1-12-4-2-1-6-and-2-2-6-released.html">Yesterday's 1.12.4 release</a>
    provided several security fixes around XML eXternal Entity and XML Entity Expansion attack
    vectors. Unfortunately, we had not reviewed our patch to consider PHP 5.2 support, and the
    code contained PHP closures -- which have only been available since PHP 5.3.
</p>

<p>
    The code in the <code>Zend\Xml</code> component was updated to remove the closures, and
    tests for all affected components were run to ensure they worked across PHP versions from
    5.2 - 5.5.
</p>

<h2>Thank You!</h2>

<p>
    A big thank you to those contributors who spotted the errors and provided the 
    initial fixes, particularly Martin Hujer and Frank Bruckner.
</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Zend Framework 1.12.4, 2.1.6, and 2.2.6 Released!</title>
      <pubDate>Thu, 06 Mar 2014 23:00:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/zend-framework-1-12-4-2-1-6-and-2-2-6-released.html</link>
      <guid>http://framework.zend.com/blog/zend-framework-1-12-4-2-1-6-and-2-2-6-released.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
    The Zend Framework community is pleased to announce the immediate availability
    of:
</p>

<ul>
    <li>Zend Framework <strong>1.12.4</strong></li>
    <li>Zend Framework <strong>2.1.6</strong></li>
    <li>Zend Framework <strong>2.2.6</strong></li>
</ul>

<ul>
    <li>
        <a href="/downloads/latest">http://framework.zend.com/downloads/latest</a>
    </li>
</ul>

<p>
    While these are scheduled maintenance releases, they also contain important security
    fixes; we strongly encourage users to upgrade.
</p><h2>Security Fixes</h2>

<p>
    Two new security advisories have been made:
</p>

<ul>
    <li><a href="/security/advisory/ZF2014-01">ZF2014-01</a>, which mitigates
        XML eXternal Entity and XML Entity Expansion vectors in a variety of
        components. While we had taken measures two years ago to mitigate
        these issues, a researcher discovered several components that remained
        vulnerable.
    </li>

    <li><a href="/security/advisory/ZF2014-02">ZF2014-02</a>, which mitigates
        an issue in our OpenID consumers whereby a malicious Identity Provider
        could be used to spoof the identity of other providers.
    </li>
</ul>

<p>
    For more information, follow the links above; if you use any of the components
    affected, please upgrade as soon as possible.
</p>

<h2>1.12.4</h2>

<p>
    This is the first maintenance release in almost a year on the 1.12 series, and
    contains fixes too numerous to list. Among some of the more important ones,
    however:
</p>

<ul>
    <li>The testing infrastructure has been upgraded to PHPUnit 3.7, making it far simpler for contributors to test changes.</li>
    <li><a href="https://github.com/zendframework/zf1/pull/221">#221</a> removes the TinySrc view helper, as the TinySrc service no longer exists.</li>
    <li><a href="https://github.com/zendframework/zf1/pull/222">#222</a> removes the InfoCard component, as the CardSpace service no longer exists.</li>
    <li><a href="https://github.com/zendframework/zf1/pull/271">#271</a> removes the Nirvanix component, as the Nirvanix service shut down in October 2013.</li>
</ul>

<p>
    Many thanks to all the contributors who helped polish ZF1, including both Frank 
    Bruckner and Adam Lundrigan, who provided a ton of patches and feedback, and
    to Rob Allen, our release manager, for shepherding in contributions!
</p>

<h2>2.1.6</h2>

<p>
    <strong>2.1.6</strong> is a security release only, and issued to provide
    fixes for <a href="/security/advisory/ZF2014-01">ZF2014-01</a>.
</p>

<h2>2.2.6</h2>

<p>
    <strong>2.2.6</strong> is both a security and maintenance release. It
    addresses specifically <a href="/security/advisory/ZF2014-01">ZF2014-01</a>.
    Additionally, more than 100 patches were contributed to this release.
</p>

<p>
    For the complete list of changes, <a href="/changelog/2.2.6">read the changelog</a>.
</p>

<h2>ZendXml</h2>

<p>
    We have released a new component, <a href="https://github.com/zendframework/ZendXml">ZendXml</a>,
    to help PHP developers mitigate XXE and XEE vectors in their own code. We highly
    recommend using it if you ware working with XML. It is available via Composer, as well
    as via <a href="https://packages.zendframework.com/">our packages site</a>.
</p>

<h2>Component Releases</h2>

<p>The following components were updated, to the versions specified, to mitigate security issues.</p>

<ul>
    <li>ZendOpenId, v2.0.2</li>
    <li>ZendRest, v2.0.2</li>
    <li>ZendService_Amazon, v2.0.3</li>
    <li>ZendService_Api, v1.0.0</li>
    <li>ZendService_Audioscrobbler, v2.0.2</li>
    <li>ZendService_Nirvanix, v2.0.2</li>
    <li>ZendService_SlideShare, v2.0.2</li>
    <li>ZendService_Technorati, v2.0.2</li>
    <li>ZendService_WindowsAzure, v2.0.2</li>
</ul>

<h2>Thank You!</h2>

<p>
    As always, I'd like to thank the many contributors who made these
    releases possible! The project is gaining in consistency and capabilities
    daily as a result of your efforts.
</p>

<h2>Roadmap</h2>

<p>
    We plan to ship version 2.3.0 sometime next week (week of 10 March 2014).
    We will likely adopt a semi-monthly maintenance release schedule
    thereafter.
</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Apigility 0.9.1 Released!</title>
      <pubDate>Sat, 01 Mar 2014 18:20:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/apigility-0-9-1-released.html</link>
      <guid>http://framework.zend.com/blog/apigility-0-9-1-released.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>Today, we're releasing version 0.9.1 of Apigility! You can grab and test it
using one of the following two methods:</p>
<ul>
    <li>Composer:
        <code>composer create-project zfcampus/zf-apigility-skeleton apigility 0.9.1</code>
    </li>
    <li>Manual download:
        <pre><code>
        wget https://github.com/zfcampus/zf-apigility-skeleton/releases/download/0.9.0/zf-apigility-skeleton-0.9.1.zip
        unzip zf-apigility-skeleton-0.9.1.zip
        </code></pre>
    </li>
</ul>

<p>This release is a maintenance release, fixing two critical issues reported against 0.9.0</p><h2>Fixes</h2>

<ul>
    <li>
        <p><a href="https://github.com/zfcampus/zf-oauth2/issues/27">zfcampus/zfoauth2#27</a>
        reported an inability to save OAuth2 adapter details from the Apigility admin
        UI. These are now corrected.</p>
    </li>

    <li>
        <p><a href="https://groups.google.com/a/zend.com/d/msgid/apigility-users/b7723f69-e4cc-4619-84d8-c3dd8c1f93a5%40zend.com">A report on the apigility-users mailing
        list</a>
        indicated that authorizations performed against REST entities were not working
        correctly. This was due to an incomplete change from "resource" to "entity"
        (as noted in the 0.9.0 release notes); the situation is now corrected.</p>
    </li>
</ul>

<h2>Future</h2>

<p>
    At this point, we turn our attention to stabilizing Zend Framework 2.3.0, 
    on which Apigility will depend, due to features added to that upcoming
    version.
</p>

<p>
    Once Zend Framework 2.3.0 is released, we will begin the beta cycle for
    Apigility 1.0.0. During that timeframe, we will due some additional improvements
    to the UI, and work to ensure the engine is stable. Additionally, we will
    document the project, providing documentation for each module, as well as
    for how the modules work together as a whole. We hope to provide "recipes"
    for a number of common practices and development and deployment situations.
</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Apigility 0.9.0 Released!</title>
      <pubDate>Mon, 03 Mar 2014 18:00:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/apigility-0-9-0-released.html</link>
      <guid>http://framework.zend.com/blog/apigility-0-9-0-released.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>Today, we're releasing version 0.9.0 of Apigility! You can grab and test it
using one of the following two methods:</p>
<ul>
    <li>Composer:
        <code>composer create-project zfcampus/zf-apigility-skeleton apigility 0.9.0</code>
    </li>
    <li>Manual download:
        <pre><code>
        wget https://github.com/zfcampus/zf-apigility-skeleton/releases/download/0.9.0/zf-apigility-skeleton-0.9.0.zip
        unzip zf-apigility-skeleton-0.9.0.zip
        </code></pre>
    </li>
</ul>

<p>This release brings in our last planned feature for the upcoming 1.0.0 stable release:
the ability to document your APIs, and then provide that documentation to your end-users!
</p><h2>Documentation</h2>

<p>
    An API is useless without documentation.
</p>

<p>
    The Apigility admin UI now allows you to capture narrative documentation 
    for your services, collections, entities, and operations. You can document
    what the request and response bodies should look like. You can document
    each field you configure.
</p>

<p>
    Apigility then merges this documentation with what it knows of your services:
    what Accept headers are allowed, what Content-Types are allowed, what response
    status codes may be expected, what fields are available, whether or not 
    authorization is required, and more. The admin UI provides a visualization of
    this information for you.
</p>

<p>
    We provide several more visualizations, too.  The 
    <kbd>zf-apigility-documentation</kbd> module is enabled now by default in 
    the <kbd>zf-apigility-skeleton</kbd>, providing both JSON and HTML 
    representations of the documentation at the URI 
    <kbd>/apigility/documentation</kbd> (the representation will depend on the 
    <kbd>Accept</kbd> header value you provide -- Apigility's own content 
    negotiation at work!).
</p>

<p>
    You can also opt in to the new <kbd>zf-apigility-documentation-swagger</kbd>
    module, which will allow you to either seed an existing <a href="https://github.com/wordnik/swagger-ui">Swagger UI</a>
    installation, or, if you visit the <kbd>/apigility/swagger</kbd> URI, provide
    the Swagger UI itself.
</p>

<p>
    To see what's possible, <a href="http://apigility.org/get-started-video.html">Introduction to Documentation</a> 
    video on the Apigility website!
</p>


<h4>Adding documentation to existing Apigility installs</h4>

<p>
    If you are already using Apigility, you will need to add the new modules to
    your application. Add the following dependencies to your <kbd>composer.json</kbd>:
</p>

<ul>
    <li><kbd>"zfcampus/zf-apigility-documentation": "~1.0-dev"</kbd> (necessary 
    for any documentation visualization, other than in the admin)</li>
    <li><kbd>"zfcampus/zf-apigility-documentation-swagger": "~1.0-dev"</kbd> (if 
    you want the Swagger UI)</li>
</ul>

<p>
    After running <kbd>composer update</kbd>, add the modules to your `config/application.config.php`:
</p>

<ul>
    <li><kbd>ZF\Apigility\Documentation</kbd></li>
    <li><kbd>ZF\Apigility\Documentation\Swagger</kbd></li>
</ul>

<h2>Changelog</h2>

<p>
    This release has been a little over two months in the making, and has a ton of changes.
    The following is a list of important changes for existing users.
</p>

<ul>
<li>
<p><strong>Changes minimum supported PHP version to 5.3.23</strong>, in line with the upcoming
  ZF 2.3.0. We still recommend <strong>5.4.8</strong> for serving the admin user interface.</p>
</li>
<li>
<p>New modules, <a href="https://github.com/zfcampus/zf-apigility-documentation">zf-apigility-documentation</a> and
  <a href="https://github.com/zfcampus/zf-apigility-documentation-swagger">zf-apigility-documentation-swagger</a>,
  providing documentation visualizations of APIs created with Apigility. The
  base module provides both JSON and HTML visualizations via the URI
  <code>/apigility/documentation</code>, based on the Accept header value present.
  zf-apigility-documentation-swagger provides an additional JSON visualization
  for the mediatype <code>application/vnd.swagger+json</code>, for seeding a <a href="https://github.com/wordnik/swagger-ui">Swagger
  UI</a> installation; additionally, it
  provides the Swagger UI via <code>/apigility/swagger</code>.</p>
</li>
</ul>
<p>zf-apigility-documentation is enabled by default in zf-apigility-skeleton;
  zf-apigility-documentation-swagger is an opt-in module.</p>
<ul>
<li>
<p><strong>The <code>/admin</code> and <code>/welcome</code> routes are now removed!</strong> The admin UI now uses
  <code>/apigility/ui</code>, and the welcome screen uses <code>/apigility/welcome</code>. New routes
  for documentation are also available, as detailed above.</p>
</li>
<li>
<p>A new module was created for Apigility-specific interfaces,
  <a href="https://github.com/zfcampus/zf-apigility-provider">zf-apigility-provider</a>.
  The primary use case is for composition in modules that may or may not be
  consumed by Apigility (e.g., a general-purpose module that could be composed
  into many projects). The only interface currently is
  <code>ZF\Apigility\Provider\ApigilityProviderInterface</code>, which replaces
  <code>Zend\Apigility\ApigilityModuleInterface</code> (and thus prevents the necessity of
  installing all Apigility modules just to implement the interface!).</p>
</li>
<li>
<p>A new module was introduced for handling development mode, 
  <a href="https://github.com/zfcampus/zf-development-mode">zf-development-mode</a>;
  this is a fork of <a href="https://github.com/19ft/NFDevelopmentMode">NFDevelopmentMode</a>,
  which was based off the equivalent functionality in zf-apigility-skeleton's
  <code>Application</code> module. We removed the functionality from the skeleton, and
  added a dependency on the new module.</p>
</li>
<li>
<p>zf-apigility-skeleton's layout was updated to match that of the admin UI.</p>
</li>
<li>
<p>zf-apigility-admin received numerous updates:</p>
<ul>
<li>
<p>Ability to add documentation of services, fields, and operations.</p>
</li>
<li>
<p>Ability to use <a href="http://www.mongodb.org/">MongoDB</a> when configuring an
  OAuth2 authentication adapter.</p>
</li>
<li>
<p>Ability to inspect, add, configure, and delete zf-content-negotiation
  selectors.</p>
</li>
<li>
<p>Links to HTML documentation of APIs managed by the Apigility instance
  (more on this below).</p>
</li>
<li>
<p>Ability to create and manipulate filter chains for each field in a
  service.</p>
</li>
<li>
<p>(Limited) detection of whether or not an opcode cache is enabled; if
  detected, a modal dialog will be presented to the end-user detailing how
  to disable it.</p>
</li>
<li>
<p>Completely overhauled and refactored admin UI application to ease
  maintenance and feature additions. The admin UI now uses
  <a href="http://bower.io">Bower</a> for managing UI asset dependencies, and
  <a href="http://gruntjs.com">Grunt</a> for building the UI distribution. We have
  dropped ng-route for the <a href="https://github.com/angular-ui/ui-router">angular-ui
  ui-router</a>, providing us with
  more flexibility in UI implementation and layout. All services,
  controllers, and directives have been moved into their own files.</p>
</li>
<li>
<p>Countless UI/UX improvements.</p>
</li>
</ul>
</li>
<li>
<p>zf-apigility-welcome has been updated to use the Apigility "Rocket ElePHPant"
  logo for the splash screen, and to provide buttons to the HTML and Swagger
  documentation, if the appropriate modules are available.</p>
</li>
<li>
<p><strong>zf-rest and zf-rpc now each store a <code>service_name</code> key in the configuration
  for each service.</strong> While efforts have been made to ensure existing
  configuration still works, we recommend adding this key to each service. The
  value should be the short name representation for the service, usually the
  name you provided when creating the service.</p>
</li>
<li>
<p><strong>All repositories have been updated to make a clean distinction between the
  terms "Entity", "Collection", and "Resource".</strong> An "Entity" is anything
  addressable via a URI containing a unique identifier. A "Collection" is any
  URI that returns a set of entities. A "Resource" refers to a URI that may
  return collections and/or entities. As such, we have several BC breaks:</p>
<ul>
<li>
<p>The event <code>renderResource</code> is now <code>renderEntity</code>.</p>
</li>
<li>
<p>The event <code>renderCollection.resource</code> is now <code>renderCollection.entity</code>.</p>
</li>
<li>
<p><code>ZF\Hal\Resource</code> was renamed to <code>ZF\Hal\Entity</code>.</p>
</li>
<li>
<p>The subkey <code>resource</code> in the zf-mvc-auth configuration is now <code>entity</code>.</p>
</li>
<li>
<p>The subkey <code>resource_http_methods</code> in zf-rest is now
  <code>entity_http_methods</code>.</p>
</li>
<li>
<p>The subkey <code>resource_class</code> in zf-rest is now <code>entity_class</code>.</p>
</li>
<li>
<p>The subkey <code>resource_identifier_name</code> in zf-rest is now
  <code>entity_identifier_name</code>. (This change only affects those who have been
  using latest master, but have not updated since late-January 2014.)</p>
</li>
<li>
<p>The subkey <code>identifier_name</code> in zf-apigility <code>db-connected</code> configuration
  is now <code>entity_identifier_name</code>;</p>
</li>
</ul>
</li>
<li>
<p>zf-hal now properly differentiates between the identifier used in the route
  definition, and the identifier used for the entity; this allows you to use one
  value on the uri -- e.g., <code>status_id</code> -- and another in your entity class --
  e.g., <code>id</code>. zf-hal will fallback to the <code>route_identifier_name</code> if no
  <code>entity_identifier_name</code> is present.</p>
</li>
<li>
<p>zf-apigility, when detecting an input filter is present, will pull values from
  the input filter, and not use any other values even if provided in the
  request. This prevents SQL errors due to unknown columns.</p>
</li>
</ul>
<p>Additionally, zf-apigility's assets were updated, and a Grunt + Bower
  toolchain provided for keeping them up-to-date.</p>
<ul>
<li>zf-rest, when detecting an input filter is present for the current request,
  will inject it into the <code>ResourceEvent</code>, allowing developers to retrieve it
  via <code>$this-&gt;getEvent()-&gt;getInputFilter()</code>. </li>
</ul>
<p>Additionally, support for <code>patchList</code> was added to the
  <code>AbstractResourceListener</code>.</p>
<ul>
<li>zf-api-problem was updated to match <a href="http://tools.ietf.org/html/draft-nottingham-http-problem-05">Problem
  API draft 5</a>.
  This has changed the internal structure and JSON representation of problem
  results. If you were manipulating <code>ApiProblem</code> objects directly previously,
  you may need to alter your code.</li>
</ul>

<h2>Future</h2>

<p>
    At this point, we turn our attention to stabilizing Zend Framework 2.3.0, 
    on which Apigility will depend, due to features added to that upcoming
    version.
</p>

<p>
    Once Zend Framework 2.3.0 is released, we will begin the beta cycle for
    Apigility 1.0.0. During that timeframe, we will due some additional improvements
    to the UI, and work to ensure the engine is stable. Additionally, we will
    document the project, providing documentation for each module, as well as
    for how the modules work together as a whole. We hope to provide "recipes"
    for a number of common practices and development and deployment situations.
</p>

<h4>Updates</h4>

<ul>
    <li>2014-03-03 12:00: Fixed zf-apigility-documentation to read zf-apigility-provider in fourth bullet-point of changelog.</li>
    <li>2014-03-01 12:20: Fixed <kbd>wget</kbd> command to reference correct download link.</li>
</ul>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Apigility 0.8.0 Released!</title>
      <pubDate>Sat, 21 Dec 2013 16:10:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/apigility-0-8-0-released.html</link>
      <guid>http://framework.zend.com/blog/apigility-0-8-0-released.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>Today, we're releasing version 0.8.0 of Apigility! You can grab and test it
using one of the following two methods:</p>
<ul>
<li>Composer:
    <code>composer create-project zfcampus/zf-apigility-skeleton apigility</code></li>
<li>Manual download:
<pre><code>
wget https://github.com/zfcampus/zf-apigility-skeleton/releases/download/0.8.0/zf-apigility-skeleton-0.8.0.zip
unzip zf-apigility-skeleton-0.8.0.zip</li>
</code></pre>
</ul>
<p>We never announced our 0.7.0 version (though we showed off the features at
several conferences this past month), so there's a ton to announce!</p><h2>Authentication and Authorization</h2>
<p>Authentication and Authorization were the number one requested feature after our
original release announcement at ZendCon 2013. We managed to get
this in place in time for ZendCon 2013 Europe, and the features include:</p>
<ul>
<li>Ability to use HTTP Basic or Digest authentication, or OAuth2.</li>
<li>Ability to create authorization rules per HTTP method, per service in your
  API.</li>
</ul>
<p>We are leveraging Zend Framework 2's <code>Zend\Authentication</code> library for HTTP
authentication, and Brent Shaffer's <a href="https://github.com/bshaffer/oauth2-server-php">oauth2-server-php</a>
library for OAuth2.</p>
<p>Apigility allows you to define one authentication scheme per application. You
can set the authentication details on the main dashboard, under the heading
"Authentication":</p>
<p style="text-align:center"><img style="border: 1px solid black" width="640" alt="Authentication choices" src="/images/ag/authentication-buttons.png"></p>
<p style="text-align:center"><img style="border: 1px solid black" width="640" alt="Authentication form" src="/images/ag/authentication-form.png"></p>
<p style="text-align:center"><img style="border: 1px solid black" width="640" alt="Authentication view" src="/images/ag/authentication-view.png"></p>
<p>To use HTTP Basic authentication, you will need to create a <code>htpasswd</code> file,
using Apache's <code>htpasswd</code> utility. When you add HTTP Basic authentication to
your application, you will specify the location of the <code>htpasswd</code> file.</p>
<p>For HTTP Digest authentication, you will need to create a file with lines in the
following format:</p>
<p><code>&lt;username&gt;:&lt;realm&gt;:&lt;credentials&gt;</code></p>
<p>The <code>credentials</code> field must be an MD5 hash of the password that will be
accepted. When adding the HTTP Digest authentication to your application, you
will specify the location of this file, and will also need to specify the
appropriate <code>realm</code>, <code>nonce\_timeout</code> (number of seconds the credentials remain
valid), and, optionally, a list of <code>digest_domains</code> (the domains for which the
same authentication information is valid).</p>
<p>To use OAuth2 authentication, you will need to setup a database, and add clients
and optionally users (users are only necessary if using the <code>password</code> grant
type). <a href="https://github.com/zfcampus/zf-oauth2">See the zf-oauth2 README</a> for
details on how to setup the database and seed it.</p>
<p>Once you have authentication setup, you can start setting up authorization
restrictions on your API. To do this, navigate to the "Authorization" menu item
in any API:</p>
<p style="text-align:center"><img style="border: 1px solid black" width="640" alt="Authorization" src="/images/ag/authorization.png"></p>
<p>By default, APIs created with Apigility are public. To require authorization on
specific services or specific HTTP methods of services, check the appropriate
boxes and save your changes. From that point forward, authentication will be
required for those actions!</p>
<p>For more information, <a href="http://bit.ly/ag-auth">view the demo video</a></p>
<h2>Cross Origin Resource Sharing</h2>
<p>In order to operate a web-based application that interact with your APIs, you
may need to investigate Cross Origin Resource Sharing (CORS). CORS describes
HTTP requests for HTTP resources made from a different domain than the resource
exists on. As an example, if your API is at <code>http://example.com/api/</code>, but you
want to request it from <code>http://my-uber-cool-app.com/</code>, CORS is in effect.</p>
<p>If a browser attempts to create an <code>XMLHttpRequest</code> to a different domain than
the current page, then it will detect a CORS request. At that point, the browser
will ask the server with the resource if the request is allowed; if the
originating server does not reply with the appropriate headers, the browser will
not submit the original request, and the <code>XMLHttpRequest</code> will fail.</p>
<p>Apigility does not deal with CORS by default, but the 0.8.0 release includes
changes that ensure that CORS requests <em>can</em> be honored if you are using a CORS
plugin. We have tested against the <a href="https://github.com/zf-fr/zfr-cors">ZfrCors ZF2
module</a>, and it works seamlessly with
Apigility at this point.</p>
<p>We highly recommend the combination of Apigility and ZfrCors when building
web-based JavaScript applications that will operate on separate domains from
your APIs.</p>
<h2>Validation</h2>
<p>Another aspect of API security is validating the incoming input. Ideally, you
should reject anything that does not validate outright, and as early as
possible.</p>
<p>0.8.0 adds a new module,
<a href="https://github.com/zfcampus/zf-content-validation">zf-content-validation</a>,
which provides a validation engine based on Zend Framework's <code>InputFilter</code>
component. This component, when a request method that contains incoming data
occurs, checks to see if the matched service has a corresponding input filter,
and, if so, attempts to validate the incoming data against it. If the validation
fails, an error response is immediately returned.</p>
<p>In the Apigility Admin UI, each service now has an "Inputs" tab that allows you
to define the input filter. In this tab, you define inputs, which correspond to
each field of data you will be expecting. For each input, you can define one or
more validators, along with any configuration you want for each. In this case, a
picture is probably more sufficient:</p>
<p style="text-align:center"><img style="border: 1px solid black" width="640" alt="Validation" src="/images/ag/inputfilter.png"></p>
<p>For more information, <a href="http://bit.ly/ag-validation">view the demo video</a>.</p>
<h2>Future</h2>
<p>At this point, we're wrapping up the featureset for a stable version of
Apigility. The last milestones we have include:</p>
<ul>
<li>a module for generating API documentation. At this time, we are favoring <a href="http://apiblueprint.org/">API
  Blueprint</a> as the markup is trivial to generate from
  our configuration, and, being markdown-derived, relatively easy to edit and
  expand once the initial generation is complete.</li>
<li>some cleanup of the UI, including some long-overdue refactoring and formalized
  testing.</li>
<li>documentation of the various components, as well as tutorials on how they all
  fit together.</li>
</ul>
<p>We hope to complete the API documentation milestone in the first weeks of 2014.
At that point, we will start the beta release cycle, spending that time to do
the UI refactoring and project documentation. Once those are complete, we'll
finally issue a stable release; we're aiming for late February 2014 at this
time.</p>

<h4>Updates</h4>

<ul>
    <li>2013-12-21 16:10 UTC: Fixed <code>wget</code> command and URI, per reports of errors in comments.</li>
</ul>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
  </channel>
</rss>
