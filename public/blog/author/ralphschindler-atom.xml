<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">Author: Ralph Schindler - ZF Blog</title>
  <updated>2013-02-01T17:00:00+0000</updated>
  <generator uri="http://framework.zend.com" version="2">Zend_Feed_Writer</generator>
  <link rel="alternate" type="text/html" href="http://framework.zend.com/blog/author/ralphschindler.html"/>
  <link rel="self" type="application/atom+xml" href="http://framework.zend.com/blog/author/ralphschindler-atom.xml"/>
  <id>http://framework.zend.com/blog/author/ralphschindler.html</id>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Zend\Db in ZF 2.1]]></title>
    <published>2013-02-01T17:00:00+0000</published>
    <updated>2013-02-01T17:00:00+0000</updated>
    <link rel="alternate" type="text/html" href="http://framework.zend.com/blog/zend-db-in-zf-2-1.html"/>
    <id>http://framework.zend.com/blog/zend-db-in-zf-2-1.html</id>
    <author>
      <name>Ralph Schindler</name>
      <email>ralph.s@zend.com</email>
      <uri>http://ralphschindler.com/</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p><xhtml:code>Zend\Db</xhtml:code> just got a little better with the release
of Zend Framework 2.1. All the cool things you could do on Mysql,
SQLite, Postgresql and SQL Server can now be done on DB2 and
Oracle. In addition, a number of additions were brought into the
<xhtml:code>Zend\Db\Sql\Select</xhtml:code> object as well.</xhtml:p>
<xhtml:h3>Connecting to DB2 and Oracle</xhtml:h3>
<xhtml:p>Connecting to DB2 whether on Windows, *nix, Mac, or the IBM i,
is the same as any other driver - using the array notation:</xhtml:p>
<xhtml:pre class="highlight">
use Zend\Db\Adapter\Adapter as DbAdapter;

// DB2 Connection
$adapter = new DbAdapter(array(
    'driver' =&gt; 'IbmDb2',
    'database' =&gt; '*LOCAL',
    'username' =&gt; '',
    'password' =&gt; '',
    'driver_options' =&gt; array(
        'i5_naming' =&gt; DB2_I5_NAMING_ON,
        'i5_libl' =&gt; 'LIB1 LIB2 LIB3'
    ),
    'platform_options' =&gt; array('quote_identifiers' =&gt; false)
);

// Oracle Connection
$adapter = new DbAdapter(array(
    'driver' =&gt; 'Oci8',
    'hostname' =&gt; 'localhost/XE',
    'username' =&gt; 'developer',
    'password' =&gt; 'developer'
));
</xhtml:pre>
<xhtml:p>Both Oracle and DB2 carry different conventional usage patterns
and workflows than their more modern successors in the relational
database space. As such, certain default behaviors can be turned
off. For example, by default, when queries are generated via any of
the <xhtml:code>Zend\Db\Sql</xhtml:code> object (SQL abstraction), all known
identifiers are identifier quoted. That means if a developer wrote:
<xhtml:code>$select-&gt;from('foo');</xhtml:code> then "foo" would be quoted in
the database platform specific way. For MySQL this means
back-ticks, like <xhtml:code>`foo`</xhtml:code>, and for most other database
that means being quoted with double quotes. In cases of Oracle and
DB2 where there is a pronounced history of not quoting identifiers,
<xhtml:code>Zend\Db\Adapter</xhtml:code> can be provided an option to turn this
off - as you can see above in the "platform_options".</xhtml:p>
<xhtml:p>Once an adapter is created, it can be used by any of the
<xhtml:code>Zend\Db</xhtml:code> API. Here are a few examples of what you can
do:</xhtml:p>
<xhtml:pre class="highlight">
// Zend\Db\TableGateway
use Zend\Db\TableGateway\TableGateway;
 
$table = new TableGateway('ARTIST'), $adapter);
$results = $table-&gt;select(array('ARTIST_ID &gt; ?' =&gt; 5000));

// iterate results outputting each column
foreach ($results as $row) {
  echo '&lt;tr&gt;';
  foreach ($row as $col) {
    echo '&lt;td&gt;' . $col . '&lt;/td&gt;';
  }
  echo '&lt;/tr&gt;';
}
</xhtml:pre>
<xhtml:p>A more complex query:</xhtml:p>
<xhtml:pre class="highlight">
// complex query
$sql = new Sql($adapter);
$select = $sql-&gt;select()-&gt;from('ARTIST')
    -&gt;columns(array()) // no columns from main table
    -&gt;join('ALBUM', 'ARTIST.ARTIST_ID = ALBUM.ARTIST_ID', array('TITLE', 'RELEASE_DATE'))
    -&gt;order(array('RELEASE_DATE', 'TITLE'))
    -&gt;where-&gt;like('ARTIST.NAME', '%Brit%');
$statement = $sql-&gt;prepareStatementFromSqlObject($select);
foreach ($statement-&gt;execute() as $row) {
    // var_dump($row);
}
</xhtml:pre>
<xhtml:h3>Other Interesting Additions to Zend\Db\Sql</xhtml:h3>
<xhtml:p>Join From SubSelect:</xhtml:p>
<xhtml:pre class="highlight">
$subselect = new Select;
$subselect-&gt;from('bar')-&gt;where-&gt;like('y', '%Foo%');
$select = new Select;
$select-&gt;from('foo')-&gt;join(array('z' =&gt; $select39subselect), 'z.foo = bar.id');

// produces SQL92 SQL (newlines added for readability):
SELECT "foo".*, "z".*
    FROM "foo"
    INNER JOIN (
        SELECT "bar".* FROM "bar"
            WHERE "y" LIKE '%Foo%'
        ) AS "z" ON "z"."foo" = "bar"."id"
</xhtml:pre>
<xhtml:p>Expressions inside Order:</xhtml:p>
<xhtml:pre class="highlight">
$select = new Select;
$select-&gt;order(new Expression('RAND()'));
</xhtml:pre>
<xhtml:h3>Call to Action</xhtml:h3>
<xhtml:p>Since our DB2 and Oracle drivers are new, we are sure they are
not perfect yet and can be improved to better allow a more natural
workflow for the database needs of a DB2 or Oracle developer. If
you find anything that is a bug, or feature request, please take
the time to fill out an issue on our github repository for ZF2:</xhtml:p>
<xhtml:ul>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zf2/issues">https://github.com/zendframework/zf2/issues</xhtml:a></xhtml:li>
</xhtml:ul>
<xhtml:p>Happy ZFing!</xhtml:p>
</xhtml:div>
    </content>
  </entry>
</feed>
