<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/">
  <channel>
    <title>Blog Entries - ZF Blog</title>
    <description>Blog Entries - ZF Blog</description>
    <pubDate>Thu, 28 Jan 2016 16:45:00 +0000</pubDate>
    <generator>Zend_Feed_Writer 2 (http://framework.zend.com)</generator>
    <link>http://framework.zend.com/blog.html</link>
    <atom:link rel="self" type="application/rss+xml" href="http://framework.zend.com/blog-rss.xml"/>
    <item>
      <title>Zend Framework 3 Update for 2016-01-28</title>
      <pubDate>Thu, 28 Jan 2016 16:45:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/2016-01-28-zf3-biweekly-update.html</link>
      <guid>http://framework.zend.com/blog/2016-01-28-zf3-biweekly-update.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>This is an installment in an ongoing series of bi-weekly posts on ZF3 development status.</p>
<p>The highlights:</p>
<ul>
<li>&gt; 70 pull requests merged</li>
<li>2 components updated to zend-servicemanager/zend-eventmanager v3 changes</li>
<li>23 releases of components, <strong>including <a href="/blog/2016-01-28-expressive-1.0-stable.html">Expressive 1.0</a></strong>, and new
maintenance releases of Apigility and the ZF2 package.</li>
<li>Kickstarting of the documentation migration</li>
</ul><h2>Expressive 1.0!</h2>
<p>Following <a href="/blog/2016-01-19-expressive-rc6-rc7.html">two</a>
<a href="/blog/2016-01-21-expressive-rc7-rc8.html">final</a> release candidates, and after
three months in release candidate status, we've finally tagged
<a href="/blog/2016-01-28-expressive-1.0-stable.html">Expressive 1.0 stable</a>!
Among other things, we've created a <a href="https://zendframework.github.io/zend-expressive/">dedicated documentation site</a>,
which will update automatically as features are merged to the project.</p>
<p>We feel Expressive is the true cornerstone of the ZF3 initiative, and we look forward
to seeing the middleware-based projects people develop using it!</p>
<h2>ZF2 and Apigility</h2>
<p>We noted that the <code>zendframework/zendframework</code> package, which since 2.5.0 has been a metapackage
aggregating the various independent components, was using <code>~2.5.0</code> for component constraints.
This is problematic, as many components have 2.6 and even 2.7 versions, and some of those contain
security fixes. To fix this, we released version 2.5.3, which modifies the component constraints
to <code>^2.5</code>, allowing them to get the latest 2.X series of any given component.</p>
<p>We also released version 1.3.2 of Apigility, to bring in some changes merged many months ago
to fix things like DB Autodiscovery, as well as to pick up the 2.5.3 version of ZF2.</p>
<h2>Documentation</h2>
<p><a href="http://blog.hock.in">Gary Hockin</a> generously donated some time and wrote
scripts to automate translation of individual component documentation from the
ZF2 reStructured Text sources to markdown, and submitted pull requests across
all components, which we have now merged. These are incomplete; some syntax
cannot be translated correctly, imports within files could not be automated,
etc.</p>
<p>If you want to assist, we've
<a href="https://github.com/issues?utf8=%E2%9C%93&amp;q=is:open+is:issue+org:zendframework+label:documentation+label:EasyFix">labeled all documentation tasks</a>
(link requires github login); feel free to jump in on the effort!</p>
<p>We're also working on a plan to host the documentation via <a href="https://pages.github.com">GitHub Pages</a>, to
allow constant, up-to-date documentation, based on the work we did for the Expressive
documentation. Most of the tooling for this is now <a href="https://github.com/zendframework/zf-mkdoc-theme">created</a>,
and we will be able to start pushing it out to components once their documentation
is ready to publish.</p>
<h2>Pull request activity</h2>
<p>Since the last update, we've
<a href="https://github.com/issues?utf8=%E2%9C%93&amp;q=is:pr+org:zendframework+is:merged+closed:%222016-01-14+..+2016-01-28%22">merged over 70 pull requests</a>
(link requires a GitHub account). Activity has been particularly high on
Expressive and documentation issues.</p>
<h2>Component Releases</h2>
<p>The following is a list of component releasessince the last update, minus a
number of Expressive releases leading to the stable release.  While not all
releases are related to ZF3 specifically, this list is intended to detail
activity within the organization.</p>
<ul>
<li>
<a href="https://github.com/zendframework/zend-view/releases/tag/release-2.5.3">zend-view 2.5.3</a>
adds support for the <code>itemprop</code> HTML attribute in the <code>headLink()</code> view
helper, and updates <code>PhpRenderer::render()</code> to no longer lazy-instantiate a
<code>FilterChain</code> if none is already present.</li>
<li>
<a href="https://github.com/zendframework/zend-servicemanager/releases/tag/release-2.7.4">zend-servicemanager 2.7.4</a>
fixed an issue with resolving aliases of aliases due to canonicalization
changes in previous versions.</li>
<li>
<a href="https://github.com/zendframework/zend-servicemanager/releases/tag/release-3.0.1">zend-servicemanager 3.0.1</a>
removes the dependency on zend-stdlib by inlining the <code>ArrayUtils::merge()</code>
routine into the <code>Config</code> class.</li>
<li>
<a href="https://github.com/zendframework/zend-expressive-twigrenderer/releases/tag/1.1.0">zend-expressive-twigrenderer 1.1.0</a>
adds several new features:
<ul>
<li>
<code>url</code> and <code>absolute_url</code> template functions for generating URL paths and absolute URIs.</li>
<li>New &quot;globals&quot; configuration for specifying variables to make available in all templates.</li>
</ul>
</li>
<li>
<a href="https://github.com/zendframework/zend-servicemanager/releases/tag/release-3.0.2">zend-servicemanager 3.0.2</a>
fixes an issue whereby the creation context was not being passed correctly to
abstract factories from plugin managers, and provides a performance boost for
alias resolution.</li>
<li>
<a href="https://github.com/zendframework/zend-code/releases/tag/release-3.0.1">zend-code 3.0.1</a>
moves the phpcs dependency to the require-dev section, and ensures that the
method name is required when adding a method to the class generator.</li>
<li>
<a href="https://github.com/zfcampus/zf-apigility-admin/releases/tag/1.4.1">zend-apigility-admin 1.4.1</a>
fixes an issue in the <code>RpcServiceModel</code> to ensure that a correct pattern is
generated when fetching a service by name.</li>
<li>
<a href="https://github.com/zfcampus/zf-apigility-admin-ui/releases/tag/1.2.2">zend-apigility-admin-ui 1.2.2</a>
fixes a number of issues discovered, including:
<ul>
<li>DB Autodiscovery was failing due to inability to properly select the DB
adapter name.</li>
<li>Custom authentication adapters are now displayed.</li>
<li>The regex for validating custom content-types was fixed to ensure it only
allows valid MIME type specifications.</li>
<li>Fixes validation for REST and RPC service names, raising a warning on
invalid input.</li>
</ul>
</li>
</ul>
<h2>ZF3 Refactors</h2>
<p>Our refactoring effort has slowed due to our focus on getting Expressive
stabilized, though we're starting to get a number of community contributions to
aid the effort.</p>
<p>If you wish to assist, please read the
<a href="https://github.com/zendframework/maintainers/wiki/ZF3-ServiceManager-component-refactors,-phase-2">ZF3 ServiceManager refactoring guide</a>;
be sure to edit the wiki to indicate when you're working on a component, as well
as to indicate the relevant pull request.</p>
<h2>Until next time</h2>
<p>If you want to help:</p>
<ul>
<li>As noted above, help complete the <a href="https://github.com/issues?utf8=%E2%9C%93&amp;q=is:open+is:issue+org:zendframework+label:documentation+label:EasyFix">documentation migration</a>!</li>
<li>Also, as noted above, you can assist with <a href="https://github.com/zendframework/maintainers/wiki/ZF3-ServiceManager-component-refactors,-phase-2">refactoring components to support v2 + v3 of zend-servicemanager</a>.</li>
</ul>
<p>Many thanks to all the contributors who have provided feedback, patches, reviews,
or releases these past two weeks!</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Expressive 1.0.0 STABLE Released!</title>
      <pubDate>Thu, 28 Jan 2016 16:00:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/2016-01-28-expressive-1.0-stable.html</link>
      <guid>http://framework.zend.com/blog/2016-01-28-expressive-1.0-stable.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>The Zend Framework community is pleased to announce the immediate availability
of <a href="https://zendframework.github.io/zend-expressive/">Expressive</a> 1.0.0 STABLE!</p>
<p>You can install it using <a href="https://getcomposer.org">Composer</a>,
via the <code>create-project</code> command:</p>
<pre><code class="language-bash">$ composer create-project zendframework/zend-expressive-skeleton expressive
</code></pre>
<p>If you were using a release candidate, you can update your existing applications using:</p>
<pre><code class="language-bash">$ composer require &quot;zendframework/zend-expressive:^1.0&quot;
</code></pre><h2>What's new in the stable version?</h2>
<p>Nothing!</p>
<p>Well, not &quot;nothing&quot;. Since last week, we merged a few documentation fixes, but,
more importantly, finalized our documentation. This included a few changes:</p>
<ul>
<li>Some re-organization, to better categorize the documentation hierarchy.</li>
<li>Switching from <a href="http://bookdown.io">bookdown</a> to <a href="http://www.mkdocs.org">MkDocs</a>
as our build engine of choice. We'd already been using MkDocs to publish on
<a href="http://rtfd.org">ReadTheDocs</a>, so this wasn't a huge change. The choice was made
based on stability, maturity, and ecosystem; MkDocs has been around for quite some
time, and enabled us to accomplish a number of ideas quite quickly.</li>
<li>Automated publishing to <a href="https://pages.github.com">GitHub Pages</a>, via
Travis-CI. Any time we push to our master branch, the documentation will be
updated.</li>
</ul>
<p>We're quite proud of <a href="https://zendframework.github.io/zend-expressive/">the results</a>,
and hope that the new documentation serves our users well.</p>
<h2>What's to look forward to?</h2>
<p>Shipping a stable version means that you can depend on the API going forward.
As such, we're messaging that it's production ready; start building and shipping
your applications on it today!</p>
<p>For the next feature version, we already have a few things scheduled:</p>
<ul>
<li>Removal of the deprecated <code>pre_routing</code>/<code>post_routing</code> configuration support, as
messaged in the <a href="http://zendframework.github.io/zend-expressive/reference/migration/rc-to-v1/#timeline-for-migration">migration documentation</a>.</li>
<li>Providing <a href="https://github.com/zendframework/zend-expressive-skeleton/pull/31">modular functionality</a>
by default (with opt-out). This will likely include also providing a solution
similar to the <a href="https://github.com/zendframework/zend-component-installer">component installer</a>
to aid with auto-registering installed packages.</li>
</ul>
<h2>Kudos</h2>
<p><a href="https://github.com/zendframework/zend-expressive-router/graphs/contributors">We</a>
<a href="https://github.com/zendframework/zend-expressive-aurarouter/graphs/contributors">wish</a>
<a href="https://github.com/zendframework/zend-expressive-fastroute/graphs/contributors">to</a>
<a href="https://github.com/zendframework/zend-expressive-zendrouter/graphs/contributors">thank</a>
<a href="https://github.com/zendframework/zend-expressive-template/graphs/contributors">everyone</a>
<a href="https://github.com/zendframework/zend-expressive-platesrenderer/graphs/contributors">who</a>
<a href="https://github.com/zendframework/zend-expressive-twigrenderer/graphs/contributors">contributed</a>
<a href="https://github.com/zendframework/zend-expressive-zendviewrenderer/graphs/contributors">to</a>
<a href="https://github.com/zendframework/zend-expressive-helpers/graphs/contributors">the</a>
<a href="https://github.com/zendframework/zend-expressive/graphs/contributors">Expressive</a>
<a href="https://github.com/zendframework/zend-expressive-skeleton/graphs/contributors">project</a>!
(That previous sentence is a link for every one of our 11 Expressive repositories!)</p>
<p>Additionally, we thank everyone who has provided us feedback — whether in
the form of questions, bug reports, or suggestions — these past few
months; without the critical feedback, the project would not be where it is
today.</p>
<p>A few folks stand out:</p>
<ul>
<li>
<a href="http://www.zimuel.it">Enrico Zimuel</a>, who started it all!</li>
<li>
<a href="https://xtreamwayz.com">Geert Eltink</a>, who did the hard work of making the installer work!</li>
<li>
<a href="http://harikt.com">Hari K T</a>, who nudged us to split the repository into discrete, single-purpose projects!</li>
<li>
<a href="https://github.com/michaelmoussa">Michael Moussa</a>, who suggested the idea that middleware specifications
could be pipelines themselves — and then implemented the solution!</li>
</ul>
<h2>Write your next project Expressively!</h2>
<p>Write your PSR-7 middleware today! Consult
<a href="https://zendframework.github.io/zend-expressive/">the documentation</a> to get started!</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Expressive 1.0.0RC7/RC8 Released!</title>
      <pubDate>Thu, 21 Jan 2016 16:35:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/2016-01-21-expressive-rc7-rc8.html</link>
      <guid>http://framework.zend.com/blog/2016-01-21-expressive-rc7-rc8.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>The Zend Framework community is pleased to announce the immediate availability
of Expressive 1.0.0rc7 and the Expressive Skeleton and Installer 1.0.0rc8!</p>
<p>You can install the latest versions using <a href="https://getcomposer.org">Composer</a>,
via the <code>create-project</code> command:</p>
<pre><code class="language-bash">$ composer create-project -s rc zendframework/zend-expressive-skeleton expressive
</code></pre>
<p>You can update your existing applications using:</p>
<pre><code class="language-bash">$ composer update
</code></pre>
<p>This release candidate contains bug fixes for dispatching error middleware
pipelines. Additionally, we've released a new version of our Twig integration,
and detail those changes below.</p><h2>Changes in zend-expressive RC7</h2>
<p>RC6 updated the configuration for the middleware pipeline to make it a single pipeline.
We recommended that developers make use of our middleware grouping feature, however,
which allows you to specify not just a single, named middleware service, but an
<em>array</em> of named middleware services. This feature is great for grouping middleware
based on when it should execute, and makes ordering related middleware simpler.</p>
<p>Per our suggested, default configuration:</p>
<pre><code class="language-php">use Zend\Expressive\Container\ApplicationFactory;
use Zend\Expressive\Helper;

return [
    'dependencies' =&gt; [
        'factories' =&gt; [
            Helper\ServerUrlMiddleware::class =&gt; Helper\ServerUrlMiddlewareFactory::class,
            Helper\UrlHelperMiddleware::class =&gt; Helper\UrlHelperMiddlewareFactory::class,
        ],
    ],
    // This can be used to seed pre- and/or post-routing middleware
    'middleware_pipeline' =&gt; [
        // An array of middleware to register. Each item is of the following
        // specification:
        //
        // [
        //  Required:
        //     'middleware' =&gt; 'Name or array of names of middleware services and/or callables',
        //  Optional:
        //     'path'     =&gt; '/path/to/match', // string; literal path prefix to match
        //                                     // middleware will not execute
        //                                     // if path does not match!
        //     'error'    =&gt; true, // boolean; true for error middleware
        //     'priority' =&gt; 1, // int; higher values == register early;
        //                      // lower/negative == register last;
        //                      // default is 1, if none is provided.
        // ],
        //
        // While the ApplicationFactory ignores the keys associated with
        // specifications, they can be used to allow merging related values
        // defined in multiple configuration files/locations. This file defines
        // some conventional keys for middleware to execute early, routing
        // middleware, and error middleware.
        'always' =&gt; [
            'middleware' =&gt; [
                // Add more middleware here that you want to execute on
                // every request:
                // - bootstrapping
                // - pre-conditions
                // - modifications to outgoing responses
                Helper\ServerUrlMiddleware::class,
            ],
            'priority' =&gt; 10000,
        ],

        'routing' =&gt; [
            'middleware' =&gt; [
                ApplicationFactory::ROUTING_MIDDLEWARE,
                Helper\UrlHelperMiddleware::class,
                // Add more middleware here that needs to introspect the routing
                // results; this might include:
                // - route-based authentication
                // - route-based validation
                // - etc.
                ApplicationFactory::DISPATCH_MIDDLEWARE,
            ],
            'priority' =&gt; 1,
        ],

        'error' =&gt; [
            'middleware' =&gt; [
                // Add error middleware here.
            ],
            'priority' =&gt; -10000,
            'error' =&gt; true,
        ],
    ],
];
</code></pre>
<p>Unfortunately, for <em>error middleware</em>, this was not working correctly.</p>
<p>Internally, when we encounter an array of middleware, we create a
<code>Zend\Stratigility\MiddlewarePipe</code> instance, and pipe each middleware
service to it in order. The problem is that <code>MiddlewarePipe</code> does not
implement the error middleware signature — which meant that
error middleware pipelines were completely skipped!</p>
<p>To make this work, we introduced a proxy class, <code>Zend\Expressive\ErrorMiddlewarePipe</code>,
which wraps a <code>MiddlewarePipe</code>, and exposes the error middleware signature.
This is now used internally whenever an error middleware pipeline needs
to be created.</p>
<h2>Changes in zend-expressive-skeleton RC8</h2>
<p>When we created the new default middleware pipeline configuration for RC6/RC7, we
forgot one important detail: the <code>error</code> middleware group was missing its
<code>error</code> key, meaning it wasn't attempting to create error middleware at all!
We've fixed this in RC8.</p>
<p>If you upgraded to RC6/RC7 earlier this week, make sure you add that <code>error</code>
key, as detailed in the above example.</p>
<h2>Twig integration updates</h2>
<p>Today we released <a href="https://github.com/zendframework/zend-expressive-twigrenderer/releases/tag/1.1.0">version 1.0.1 of our Twig integration</a>.
This includes a few new features:</p>
<ul>
<li>It adds a dependency on zend-expressive-helpers and, if the <code>UrlHelper</code> and <code>ServerUrlHelper</code>
services are registered, makes new <code>url</code> and <code>absolute_url</code> template functions available.</li>
<li>It adds a new &quot;globals&quot; configuration sub-section for registering variables to pass
to all templates.</li>
</ul>
<p>You can read more in the <a href="http://zend-expressive.readthedocs.org/en/latest/template/twig/">Twig integration documentation</a>.</p>
<p>Many thanks to <a href="https://xtreamwayz.com">Geert Eltink</a> for these new features!</p>
<h2>Future</h2>
<p>Code is stabilizing, and we're seeing fewer issues hitting our issue tracker.
We hope that in a week or two we can release a stable version.</p>
<p>If you are testing Expressive — whether for the first time, or updating an
existing application — please help us prepare it for general availability!</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Expressive 1.0.0RC6/RC7 Released!</title>
      <pubDate>Tue, 19 Jan 2016 19:10:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/2016-01-19-expressive-rc6-rc7.html</link>
      <guid>http://framework.zend.com/blog/2016-01-19-expressive-rc6-rc7.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>The Zend Framework community is pleased to announce the immediate availability
of Expressive 1.0.0rc6 and 1.0.0rc7!</p>
<p>You can install the latest versions using <a href="https://getcomposer.org">Composer</a>,
via the <code>create-project</code> command:</p>
<pre><code class="language-bash">$ composer create-project -s rc zendframework/zend-expressive-skeleton expressive
</code></pre>
<p>You can update your existing applications using:</p>
<pre><code class="language-bash">$ composer update
</code></pre>
<p>Unfortunately, zend-expressive RC6 introduces some breaking changes. Several
issues were raised that could not be handled in a fully backwards compatible
fashion, and we felt they were important enough to introduce before a stable
release is made. We continue to honor previous application configuration;
however, deprecation notices will be raised, and the code for parsing the old
configuration will be removed for the 1.1 release.</p>
<p>We also released zend-expressive-skeleton RC7 quick on the heels of RC6 in order
to correct an issue with installation whereby the development dependencies at
time of invocation were installed, rather than the rewritten ones. This affected
only the skeleton, which is why we're announcing RC6 <em>and</em> RC7 releases.</p>
<p>See below for full details on what has changed.</p><h2>Changes in zend-expressive RC6</h2>
<p>Like RC5, the bulk of the changes merged for RC6 were documentation, including:</p>
<ul>
<li>a cookbook recipe detailing <a href="http://zend-expressive.readthedocs.org/en/latest/helpers/url-helper/#base-path-support">how to set the base path on a <code>UrlHelper</code> instance</a>.</li>
<li>two cookbook recipes detailing mechanisms for enabling <a href="http://zend-expressive.readthedocs.org/en/latest/cookbook/setting-locale-without-routing-parameter/">localized</a> <a href="http://zend-expressive.readthedocs.org/en/latest/cookbook/setting-locale-depending-routing-parameter/">routes</a>.</li>
<li>a cookbook recipe detailing <a href="http://zend-expressive.readthedocs.org/en/latest/cookbook/debug-toolbars/">how to add several popular debug toolbars to your applications</a>.</li>
<li>a cookbook recipe detailing <a href="http://zend-expressive.readthedocs.org/en/latest/cookbook/using-routed-middleware-class-as-controller/">how to write classes for handling multiple routes</a>.  (similar to controllers in MVC-oriented systems).</li>
<li>a <a href="http://zend-expressive.readthedocs.org/en/latest/features/#flow-overview">flow diagram</a> for the &quot;Features&quot; chapter.</li>
</ul>
<p>Unlike RC5, however, we introduced a significant code change, prompted by user
feedback. In particular, we saw each of the following reported multiple times:</p>
<ul>
<li>confusion over the <code>pre_routing</code> and <code>post_routing</code> middleware pipeline keys,
and how they relate to routed middleware.</li>
<li>requests to split the routing middleware into two distinct responsibilities:
routing middleware, and dispatch middleware.</li>
<li>requests to allow dispatching middleware when triggering route result observers.</li>
</ul>
<p>On analysis, and in discussions with users, we decided to make the following changes.</p>
<h3>Splitting the routing middleware</h3>
<p>We split the routing middleware into two discrete methods: routing and dispatch.
This solved multiple problems, and enables a number of interesting workflows.</p>
<p>In particular, it allows you to define middleware that can act on the routing
results in order to satisify pre-conditions in an automated way.</p>
<p>As an example, let's say you have a workflow where you want to:</p>
<ul>
<li>Authenticate a user</li>
<li>Authorize the user</li>
<li>Perform content negotiation</li>
<li>Validate incoming body parameters</li>
</ul>
<p>However, you don't want to perform these actions for <em>every</em> request, only
specific routes.</p>
<p>Previously, you would need to define an array of middleware for each route that needs
this set of responsibilities:</p>
<pre><code class="language-php">[
    'routes' =&gt; [
        'api.ping' =&gt; [
            'path' =&gt; '/api/ping',
            'middleware' =&gt; [
                AuthenticationMiddleware::class,
                AuthorizationMiddleware::class,
                ContentNegotiationMiddleware::class,
                BodyValidationMiddleware::class,
                PingMiddleware::class,
            ],
            'allowed_methods' =&gt; ['GET'],
        ],
        'api.books' =&gt; [
            'path' =&gt; '/api/books[/{id:[a-f0-9]{8}}]',
            'middleware' =&gt; [
                AuthenticationMiddleware::class,
                AuthorizationMiddleware::class,
                ContentNegotiationMiddleware::class,
                BodyValidationMiddleware::class,
                BooksMiddleware::class,
            ],
        ],
        /* etc. */
    ],
]
</code></pre>
<p>This is repetitive, and prone to error: any change in the workflow requires propagation
to <em>every route</em>.</p>
<p>Splitting the routing and dispatch middleware allows you to pipe middleware
<em>between</em> the two actions, allowing you to register such workflows <em>once</em>. The middleware
could then introspect the route results to determine if they have work to do.</p>
<p>This means you can now write middleware like this:</p>
<pre><code class="language-php">use Zend\Expressive\Router\RouteResult;

$authenticationMiddleware = function ($request, $response, $next) use ($map, $authenticate) {
    $routeResult = $request-&gt;getAttribute(RouteResult::class, false);
    if (! $routeResult instanceof RouteResult) {
        return $next($request, $response);
    }

    if (! in_array($routeResult-&gt;getMatchedRouteName(), $map)) {
        return $next($request, $response);
    }

    $authenticationResult = $authenticate($request);
    if (! $authenticationResult-&gt;isSuccess()) {
        // ERROR!
        return new AuthenticationErrorResponse();
    }

    return $next(
        $request-&gt;withAttribute($authenticationResult-&gt;getIdentity()),
        $response
    );
}
</code></pre>
<p>You would then sandwich it between the routing and dispatch middleware.
Programmatically, that looks like:</p>
<pre><code class="language-php">$app-&gt;pipeRoutingMiddleware();
$app-&gt;pipe($authenticationMiddleware);
$app-&gt;pipeDispatchMiddleware();
</code></pre>
<p>We'll look at configuration later, as it changes more dramatically.</p>
<h3>No more auto-registration of the routing middleware</h3>
<p>Prior to RC6, the routing middleware was auto-registered when:</p>
<ul>
<li>any call to <code>route()</code> was made, including those via the methods that proxy to
it (<code>get()</code>, <code>post()</code>, <code>any()</code>, etc.).</li>
<li>as soon as the <code>Application</code> instance was invoked as middleware (i.e., by
calling <code>$app($request, $response)</code> or calling <code>$app-&gt;run()</code>).</li>
</ul>
<p>You could also always register it manually when creating your application
pipeline using the <code>pipeRoutingMiddleware()</code> method.</p>
<p>Because routing was split into two distinct actions, and one primary purpose for
doing so was to allow registering middleware between those actions, we felt that
auto-registration was not only no longer useful, but a liability.</p>
<p>As such, when creating your application programmatically, there is now <em>exactly
one workflow</em> to use to enable the routing and dispatch middleware: each must
be piped explicitly into the pipeline:</p>
<pre><code class="language-php">$app-&gt;pipe(ServerUrlMiddleware::class);
$app-&gt;pipe(BaseParamsMiddleware::class);
$app-&gt;pipeRoutingMiddleware();
$app-&gt;pipe(UrlHelperMiddleware::class);
$app-&gt;pipeDispatchMiddleware();
</code></pre>
<p><strong>If you are building your application programmatically, you <em>must</em> update it to
pipe the routing and dispatch middleware in order for it to continue to
work.</strong></p>
<p>We'll look at configuration for the <code>ApplicationFactory</code> later, as it changes as
well.</p>
<h3>No more route result observers</h3>
<p>Another consequence of splitting the routing middleware in two was a pleasant discovery:
there was no longer any need for the route result observer system!</p>
<p>The route result observer system was added in RC3 to allow the application to notify
interested observers of the results of routing, as there was no other way to trigger
functionality between the act of routing and when the matched middleware was dispatched
(if any was actually matched!).</p>
<p>Several developers complained that they couldn't return a response from these
observers when they detected an error condition, nor could they introspect the request
in such situations.</p>
<p>With the routing middleware split, there's an answer to those questions, and the
observer system is no longer needed; just place middleware between the routing
and dispatch middleware, and have it act on the <code>RouteResult</code> instance (which the
routing middleware injects as a request attribute). In fact, we've already demonstrated
this above!</p>
<p>For RC6, we removed the <code>RouteResultSubjectInterface</code> implementation from the
<code>Application</code> instance, while keeping the original methods defined in that interface;
these methods now trigger deprecation notices. If you were using observers
previously, and keep your existing RC5 configuration, we also inject a special
&quot;route result observer middleware&quot; between the routing and dispatch middleware that
will notify the observers. The deprecation messages will prompt you to update
your code, and provide a link to the migration guide to help you.</p>
<p>A new <em>minor</em> version of zend-expressive-router was released, v1.2.0, marking each of
the <code>RouteResultSubjectInterface</code> and <code>RouteResultObserverInterface</code> as deprecated.</p>
<p>A new <em>major</em> version of zend-expressive-helpers was released, v2.0.0, that removes
the <code>RouteResultObserverInterface</code> implementation from the <code>UrlHelper</code>, and updates
its related middleware to act between the routing and dispatch middleware.</p>
<h3>Simplified configuration</h3>
<p>We've alluded to configuration changes several times; it's now time to detail those.</p>
<p>One common confusion that arose was around the <code>pre_routing</code> and <code>post_routing</code> names.
Many assumed that <code>pre_routing</code> meant that the middleware listed only operated before
routing — and did not realize that such middleware could also post-process
responses. Similarly, many assumed that <code>post_routing</code> middleware was executed after
routed middleware, even when the routed middleware returned a response (it was only
executed if the routed middleware called <code>$next()</code> or if an error occurred).</p>
<p>We wanted to clarify how the middleware pipeline worked, and with the switch to split
the routing and dispatch middleware, and a desire to allow injecting middleware between
routing and dispatch, we had an opportunity to positiveily change the configuration to
make it more clear.</p>
<p><a href="http://www.zimuel.it">Enrico</a> suggested that instead of segregating into pre/post, we
have a single pipeline. This would require defining entries for the routing and
dispatch middleware as part of the pipeline, but you would then be able to see the
exact workflow.</p>
<p>One counter-argument, however, is when merging configuration, which is done by default
in the skeleton, and which is a recommended practice to keep configuration for related
functionality in discrete places. How would order be preserved?</p>
<p>We decided to introduce a <code>priority</code> key into our middleware configuration specifications.
This works with <code>SplPriorityQueue</code>: higher values are piped earlier and execute
earlier, while lower/negative values are piped later. This provides the ability to
define the pipeline across multiple files, merge it, and get a predictable order.</p>
<p>Additionally, we realized we could lever another existing feature: middleware
specifications used by the pipeline configuration allow you to specify <em>lists</em>
of middleware to execute, not just individual middleware. This means that you can
group middleware under the same priority, in the order you want it to execute. This
is a great technique for segregating configuration.</p>
<p>What we came up with ends up looking like this when you start out with the new
skeleton:</p>
<pre><code class="language-php">use Zend\Expressive\Container\ApplicationFactory;
use Zend\Expressive\Helper;

return [
    'dependencies' =&gt; [
        'factories' =&gt; [
            Helper\ServerUrlMiddleware::class =&gt; Helper\ServerUrlMiddlewareFactory::class,
            Helper\UrlHelperMiddleware::class =&gt; Helper\UrlHelperMiddlewareFactory::class,
        ],
    ],
    // This can be used to seed pre- and/or post-routing middleware
    'middleware_pipeline' =&gt; [
        // An array of middleware to register. Each item is of the following
        // specification:
        //
        // [
        //  Required:
        //     'middleware' =&gt; 'Name or array of names of middleware services and/or callables',
        //  Optional:
        //     'path'     =&gt; '/path/to/match', // string; literal path prefix to match
        //                                     // middleware will not execute
        //                                     // if path does not match!
        //     'error'    =&gt; true, // boolean; true for error middleware
        //     'priority' =&gt; 1, // int; higher values == register early;
        //                      // lower/negative == register last;
        //                      // default is 1, if none is provided.
        // ],
        //
        // While the ApplicationFactory ignores the keys associated with
        // specifications, they can be used to allow merging related values
        // defined in multiple configuration files/locations. This file defines
        // some conventional keys for middleware to execute early, routing
        // middleware, and error middleware.
        'always' =&gt; [
            'middleware' =&gt; [
                // Add more middleware here that you want to execute on
                // every request:
                // - bootstrapping
                // - pre-conditions
                // - modifications to outgoing responses
                Helper\ServerUrlMiddleware::class,
            ],
            'priority' =&gt; 10000,
        ],

        'routing' =&gt; [
            'middleware' =&gt; [
                ApplicationFactory::ROUTING_MIDDLEWARE,
                Helper\UrlHelperMiddleware::class,
                // Add more middleware here that needs to introspect the routing
                // results; this might include:
                // - route-based authentication
                // - route-based validation
                // - etc.
                ApplicationFactory::DISPATCH_MIDDLEWARE,
            ],
            'priority' =&gt; 1,
        ],

        'error' =&gt; [
            'middleware' =&gt; [
                // Add error middleware here.
            ],
            'priority' =&gt; -10000,
        ],
    ],
];
</code></pre>
<p>For existing users:</p>
<ul>
<li>Existing RC5 and earlier configuration is still honored, but will emit
deprecation notices, prompting you to update; these notices include
links to the migration guide.</li>
<li>To update, you'll need to:
<ul>
<li>update your zend-expressive-helpers version constraint to <code>^2.0</code>.</li>
<li>update your configuration, using the above as a guide.</li>
</ul>
</li>
</ul>
<p>We're excited about this change, as we feel it simplifies the configuration, adds
flexibility, and provides predictability in the system. While it is a large change
for a release candidate, we also felt it was important enough to warrant introducing
before the stable release.</p>
<h2>Full migration details</h2>
<p>The above narrative is use-case-centered. We have, however, published a <a href="http://zend-expressive.readthedocs.org/en/latest/migration/rc-to-v1/">full migration
guide</a> as part of
the release to give exact details on changes you will need to make.</p>
<h2>Future</h2>
<p>At this point, we feel that the code has stabilized significantly, and that the improvements
in these latest releases have provided important simplicity and flexibility to make
the system robust. We'll be waiting a week or two to see how you, our users, respond,
and hopefully be able to tag a stable release shortly!</p>
<p>If you are testing Expressive — whether for the first time, or updating an
existing application — please help us prepare it for general availability!</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Zend Framework 3 Update for 2016-01-14</title>
      <pubDate>Thu, 14 Jan 2016 23:00:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/2016-01-14-zf3-biweekly-update.html</link>
      <guid>http://framework.zend.com/blog/2016-01-14-zf3-biweekly-update.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>This is an installment in an ongoing series of bi-weekly posts on ZF3 development status.</p>
<p>Following a roughly two week hiatus at the end of the year, we've picked up
where we left off and continued the momentum towards the ZF3 initiatives.</p>
<p>The highlights:</p>
<ul>
<li>48 pull requests merged</li>
<li>11 releases of components, <strong>including 3 3.0 releases in 3 days!</strong>
</li>
<li>6 components updated to zend-servicemanager/zend-eventmanager v3 changes</li>
<li>Major updates for an upcoming Expressive RC6</li>
</ul><h2>3.0 Releases!</h2>
<p>A number of components reached stability in the past few weeks, and this week we
did a spree of three 3.0 releases in three days:</p>
<ul>
<li>
<a href="https://github.com/zendframework/zend-servicemanager/releases/tag/release-3.0.0">zend-servicemanager 3.0.0</a>
is the first 3.0 release of any ZF components, and features a complete rewrite
of the internals to provide up to 4x faster performance! We have been careful
to retain as much backwards compatibility as possible, and the v2.7.0 release
provides features that make migration between versions seamless for users.
<a href="http://zend-servicemanager.rtfd.org/en/latest/book/migration/">A migration guide is available</a>.</li>
<li>
<a href="https://github.com/zendframework/zend-eventmanager/releases/tag/release-3.0.0">zend-eventmanager 3.0.0</a>
is our second 3.0 release of a ZF component, and features a complete rewrite
of the internals of the EventManager implementation to provide up to 4X faster
performance. By following the <a href="http://zend-eventmanager.readthedocs.org/en/latest/migration/intro/">migration guide</a>,
you can update your v2 code to work on both v2 and v3.</li>
<li>
<a href="https://github.com/zendframework/zend-code/releases/tag/release-3.0.0">zend-code 3.0.0</a>
is our third 3.0 release of a ZF component, and features updates to allow
usage with PHP 5.5, 5.6, and PHP 7, and, specifically, scalar typehints,
return typehints, generators, and variadics.</li>
</ul>
<p>Be aware that you cannot make use of these new 3.0 versions within existing ZF2
applications quite yet; we are still in the process of updating components to
work with these releases. However, they can be used standalone, or within projects
based on Expressive!</p>
<h2>Pull request activity</h2>
<p>Since the last update, we've
<a href="https://github.com/issues?utf8=%E2%9C%93&amp;q=is:pr+org:zendframework+is:merged+closed:%3E=2015-12-22">merged 48 pull requests</a>
(link requires a GitHub account). Activity has been particularly high on
Expressive, zend-servicemanager, and components refactoring to the latest
zend-servicemanager and zend-eventmanager updates.</p>
<h2>Component Releases</h2>
<p>The following is a list of component releases (other than the 3.0 releases
listed above) since the last update.  While not all releases are related to ZF3
specifically, this list is intended to detail activity within the organization.</p>
<ul>
<li>
<a href="https://github.com/zendframework/zend-expressive-helpers/releases/tag/1.4.0">zend-expressive-helpers 1.4.0</a>
adds base path support to the <code>UrlHelper</code>.</li>
<li>
<a href="https://github.com/zendframework/zend-diactoros/releases/tag/1.3.3">Diactoros 1.3.3</a>
fixes an issue in <code>ServerRequestFactory::marshalHeaders()</code> whereby we were
explicitly omitting cookie headers; they are now aggregated.</li>
<li>
<a href="https://github.com/zendframework/zend-expressive-zendrouter/releases/tag/1.0.1">zend-expressive-zendrouter 1.0.1</a>
fixes an issue whereby appending a trailing slash when requesting a route that
did not define one resulted in a 405 instead of a 404 error.</li>
<li>
<a href="https://github.com/zendframework/zend-servicemanager/releases/tag/release-2.7.0">zend-servicemanager 2.7.0</a>,
<a href="https://github.com/zendframework/zend-servicemanager/releases/tag/release-2.7.1">zend-servicemanager 2.7.1</a>,
<a href="https://github.com/zendframework/zend-servicemanager/releases/tag/release-2.7.2">zend-servicemanager 2.7.2</a>, and
<a href="https://github.com/zendframework/zend-servicemanager/releases/tag/release-2.7.3">zend-servicemanager 2.7.3</a>
are forwards-compatibility releases, providing several features that allow
users to update their code to work with both the v2 and v3 series of the
service manager.</li>
<li>
<a href="https://github.com/zendframework/zend-eventmanager/releases/tag/release-2.6.2">zend-eventmanager 2.6.2</a>
introduces a trait, <code>EventListenerIntrospectionTrait</code>, for use with PHPUnit
test cases. It provides a consistent API for introspecting what events and
listeners are attached to an EventManager instance, and provides a custom
assertion for validating that a given listener is registered at a given
priority on a given event. This trait can be used to write assertions for
validating listener attachment in a way that will be forwards compatible with
version 3.</li>
</ul>
<h2>ZF3 Refactors</h2>
<p>Since the last update, the following components have been refactored to work
with the planned v3 versions of zend-servicemanager and zend-eventmanager.
Please note that no new versions have been released at this time; all work
remains either in pull requests or in the develop branches of each component.</p>
<ul>
<li>
<a href="https://github.com/zendframework/zend-mail/pull/47">zend-mail</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-validator/pull/49">zend-validator</a>
</li>
</ul>
<p>Additionally, we have created pull requests for several components to work with
the forwards compatibility releases of zend-servicemanager and
zend-eventmanager. These will allow us to release 2.x versions of these
components that can be used by code consuming the v3 versions of those two
components.</p>
<ul>
<li>
<a href="https://github.com/zendframework/zend-barcode/pull/16">zend-barcode</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-cache/pull/64">zend-cache</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-log/pull/17">zend-log</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-i18n/pull/22">zend-i18n</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-validator/pull/51">zend-validator</a>
</li>
</ul>
<h2>Expressive</h2>
<p>We've had quite a number of people testing Expressive heavily, and pointing out
both its strengths and weaknesses. This has resulted in a ton of additional tests,
bringing coverage to 100% in some cases, as well as copious amounts of new
documentation.</p>
<p>After several issue threads and IRC conversations, we've decided to release an
additional RC, RC6, to accomplish the following:</p>
<ul>
<li>Simplification of the middleware pipeline; we will be doing away with the
<code>pre_routing</code> and <code>post_routing</code> keys, and allowing a single pipeline
representing the entire application lifecycle.</li>
<li>Splitting of the routing middleware into separate routing and dispatch
middleware. This allows developers to tie into the application lifecycle using
middleware between routing and dispatch, facilitating such things as route-based
authentication, validation, etc.</li>
<li>Removal of auto-registration of the routing middleware; this is done to allow
substituting alternative routing middleware and/or dispatch middleware.</li>
<li>Deprecation of the route result observer system. The same functionality
can now be accomplished with middleware that acts between routing and dispatch.</li>
</ul>
<p>We've attempted to preserve backwards compatibility for existing applications, but
have marked deprecated features for removal with 1.1. A migration guide will assist
our early adopters in updating their applications.</p>
<h2>Until next time</h2>
<p>If you want to help:</p>
<ul>
<li>There are new <a href="https://github.com/zendframework/maintainers/wiki/ZF3-ServiceManager-component-refactors,-phase-2">component refactors to complete or review</a>.</li>
<li>Test Expressive, and help us reach a stable release of this new feature!</li>
</ul>
<p>Many thanks to all the contributors who have provided feedback, patches, reviews,
or releases! In particular, I want to call out:</p>
<ul>
<li>
<a href="https://github.com/Ocramius">Marco Pivetta</a> for his work on updating
zend-code to work with PHP 7 (and PHP 5.5, and PHP 5.6) features.</li>
<li>
<a href="https://github.com/bakura10">Michaël Gallego</a> for his work on the
zend-servicemanager and zend-eventmanager refactors, and his relentless pursuit
of performance increases.</li>
<li>
<a href="https://github.com/ezimuel">Enrico Zimuel</a> for his work on the
zend-eventmanager refactor, and taking on the drudgery of updating components
to the new zend-eventmanager and zend-servicemanager changes.</li>
<li>
<a href="https://github.com/RalfEggert">Ralf Eggert</a> and <a href="https://github.com/danizord">Daniel Gimenes</a>
for the constant stream of questions and suggestions for Expressive; their
feedback is changing it for the better!</li>
</ul>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Zend Framework 3 Update for 2015-12-22</title>
      <pubDate>Tue, 22 Dec 2015 23:10:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/2015-12-22-zf3-biweekly-update.html</link>
      <guid>http://framework.zend.com/blog/2015-12-22-zf3-biweekly-update.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>This is the second in an ongoing series of bi-weekly posts on ZF3 development status.</p>
<p>The highlights:</p>
<ul>
<li>45 pull requests merged</li>
<li>14 releases of components</li>
<li>5 components updated to zend-servicemanager/zend-eventmanager v3 changes</li>
<li>1 release candidates of expressive</li>
</ul><h2>Pull request activity</h2>
<p>Activity has continued to be quite high the past couple weeks, though slower
than the previous update, with <a href="https://github.com/issues?utf8=%E2%9C%93&amp;q=is:pr+org:zendframework+is:merged+closed:%3E=2015-12-10">45 pull requests merged</a>
(link requires a GitHub account). While Expressive still dominates the list, many
of these were related to ZF3 refactors and ongoing component maintenance.</p>
<h2>Component Releases</h2>
<p>The following is a list of component releases since the last update.
While not all releases are related to ZF3 specifically, this list is intended
to detail activity within the organization. It omits the Expressive release
candidates, as well as new components, which will be listed later in this post.</p>
<ul>
<li>
<a href="https://github.com/zendframework/zend-expressive-fastroute/releases/tag/1.0.1">zend-expressive-fastroute 1.0.1</a>
released 2015-12-14; fixes an issue with the returned <code>RouteResult</code>, ensuring
it contains the name, not the path, of the route matched.</li>
<li>
<a href="https://github.com/zendframework/zend-diactoros/releases/tag/1.2.1">zend-diactoros 1.2.1</a>
was a bugfix release that fixed:
<ul>
<li>issues with how <code>withHeader()</code> handled replacing existing headers that used
a different casing strategy.</li>
<li>the <code>$statusCode</code> argument of the <code>Response</code> to never allow <code>null</code> values.</li>
<li>constructor header validation on all message types to:
<ul>
<li>allow numeric values (e.g., Content-Length)</li>
<li>raise an exception on invalid header names (non-empty strings or non-string values)</li>
<li>raise an exception on invalid individual header values (non strings/non-numerics)</li>
</ul>
</li>
</ul>
</li>
<li>
<a href="https://github.com/zendframework/zend-diactoros/releases/tag/1.3.0">zend-diactoros 1.3.0</a>
was a feature release adding:
<ul>
<li>
<code>SapiEmitterTrait</code>, which replaces a number of methods in the <code>SapiEmitter</code>
to provide a re-useable base for emitters; <code>SapiEmitter</code> was updated to use
the trait instead of to directly define the methods.</li>
<li>
<code>SapiStreamEmitter</code> provides functionality for iteratively emitting
stream-based responses, and includes support for Content-Range headers.</li>
</ul>
</li>
<li>
<a href="https://github.com/zendframework/zend-diactoros/releases/tag/1.3.1">zend-diactoros 1.3.1</a>
was a bugfix release that fixed:
<ul>
<li>an issue in the response serializer, whereby the discovered status code
wasn't being cast to an integer.</li>
<li>an issue in the various concrete, text-based response types whereby they
were not rewinding the message body stream after creation, causing later
calls to <code>getContents()</code> to return an empty string (as it was starting from
the end of the stream). These now rewind the stream during initialization.</li>
</ul>
</li>
<li>
<a href="https://github.com/zendframework/zend-diactoros/releases/tag/1.3.2">zend-diactoros 1.3.2</a>
fixes an issue in the <code>ServerRequestFactory</code> whereby we were omitting parsing
for and injection of the HTTP protocol version.</li>
<li>
<a href="https://github.com/zendframework/zend-psr7bridge/releases/tag/0.2.1">zend-psr7bridge 0.2.1</a>
adds support for injecting generated PSR-7 instances with the cookies present
in the zend-http request instance.</li>
<li>
<a href="https://github.com/zendframework/zend-math/releases/tag/2.5.2">zend-math 2.5.2</a> fixes
base conversions for base36 and below.</li>
<li>
<a href="https://github.com/zendframework/zend-server/releases/tag/release-2.6.0">zend-server 2.6.0</a>
adds support for unwinding <code>{@inheritdoc}</code> annotations, and fixes a misleading
exception in <code>reflectFunction</code>.</li>
<li>
<a href="https://github.com/zfcampus/zf-development-mode/releases/tag/release-2.1.2">zf-development-mode 2.1.2</a>
fixes the factory to pull and set the configuration caching rules under the
correct configuration key.</li>
<li>
<a href="https://github.com/zendframework/zend-expressive-helpers/releases/tag/1.2.1">zend-expressive-helpers 1.2.1</a>
adds the protected method <code>getRouteResult()</code>, to allow extensions access to
the route result instance.</li>
<li>
<a href="https://github.com/zendframework/zend-expressive-helpers/releases/tag/1.3.0">zend-expressive-helpers 1.3.0</a>
adds a new general-purpose <code>BodyParamsMiddleware</code>, for parsing the request
body and returning a new instance populated with the parsed body parameters.
The solution uses a strategy pattern, allowing developers to provide
additional strategies per their application needs.</li>
</ul>
<h2>ZF3 Refactors</h2>
<p>Since the last update, the following components have been refactored to work
with the planned v3 versions of zend-servicemanager and zend-eventmanager.
Please note that no new versions have been released at this time; all work
remains either in pull requests or in the develop branches of each component.</p>
<ul>
<li>
<a href="https://github.com/zendframework/zend-session/pull/8">zend-session</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-log/pull/14">zend-log</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-tag/pull/3">zend-tag</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-text/pull/2">zend-text</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-filter/pull/15">zend-filter</a>
</li>
</ul>
<h2>Component Installer</h2>
<p>One idea floated for helping the goal of reducing dependencies in both zend-mvc
and the zf2 meta-repository is to have components also act as modules. This would
allow them to provide configuration, factories, and event listeners to the MVC
runtime in a completely opt-in fashion. The one problem with the approach,
however, is automating registration with the application.</p>
<p>To this end, we created a <a href="https://zendframework.github.io/zend-component-installer">component installer</a>.
This package provides composer post un/install scripts that look for metadata
in the package; if the metadata is present, the script adds an entry to the
application's module list. Components are added to the top of the list, and
modules to the bottom.</p>
<p>The new package can be installed as a global composer utility, or downloaded
as a self-updateable PHAR file. We will begin updating components to expose
themselves to this tooling soon, and update the application skeleton with the
scripts as generated by the package, to automate the facilities for greenfield
projects.</p>
<h2>Expressive Release Candidate</h2>
<p>Today, we issued a new release candidate of Expressive, RC5.
Be sure to read the <a href="/blog/expressive-1-0-0rc5-released.html">announcement</a> to
find out what changes have been made! The bulk of the work has gone into expanding
the documentation to cover common use case scenarios.</p>
<h2>Until next time</h2>
<p>The winter holidays are upon our team at this time, and we do not expect much progress
in the coming two weeks. Look for updates in January!</p>
<p>Until then, if you want to help:</p>
<ul>
<li>There are still <a href="https://github.com/zendframework/maintainers/wiki/ZF3-code-refactoring">component refactors to complete or review</a>.</li>
<li>Test Expressive, and help us reach a stable release of this new feature!</li>
</ul>
<p>Many thanks to all the contributors who have provided feedback, patches, reviews,
or releases!</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Expressive 1.0.0RC5 Released!</title>
      <pubDate>Tue, 22 Dec 2015 22:15:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/expressive-1-0-0rc5-released.html</link>
      <guid>http://framework.zend.com/blog/expressive-1-0-0rc5-released.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>The Zend Framework community is pleased to announce the immediate availability of Expressive 1.0.0rc5!</p>
<p>You can install it using <a href="https://getcomposer.org">Composer</a>, using the <code>create-project</code> command:</p>
<pre><code class="language-bash">$ composer create-project zendframework/zend-expressive-skeleton:1.0.0rc5@rc expressive
</code></pre>
<p>You can update your existing applications using:</p>
<pre><code class="language-bash">$ composer update
</code></pre>
<p>Depending on what features you're already using, you may have nothing to do, or
a few changes you may need to make; see below for more information.</p><h2>Changes in RC5</h2>
<p>The majority of the changes for RC5 were documentation additions, including chapters on:</p>
<ul>
<li>how to serve Expressive from a subdirectory of the web root.</li>
<li>how to create modular Expressive applications.</li>
<li>how to parse body parameters using new middleware from zend-expressive-helpers.</li>
</ul>
<p>Two larger changes were made, however:</p>
<ul>
<li>As noted above, zend-expressive-helpers now provides middleware for parsing
the request body into parameters.</li>
<li>The skeleton and installer now use a new <a href="https://github.com/container-interop/container-interop">container-interop</a>
version of Pimple to ensure users can use Pimple v3, versus our previous
support for only v1.</li>
</ul>
<h3>Body parameter parsing</h3>
<p><a href="http://www.php-fig.org/psr/psr-7/">PSR-7</a> provides facilities for retrieving
the parsed body parameters. Most implementations will populate this with the
contents of <code>$_POST</code> by default, but for cases where non-form submissions or
non-POST submissions are present, you need to parse and populate the body
parameters manually.</p>
<p><a href="https://github.com/zendframework/zend-expressive-helpers">zend-expressive-helpers</a>
now provides middleware for doing this, <code>Zend\Expressive\Helper\BodyParams\BodyParamsMiddleware</code>.
This middleware can be optionally added to your application, and supports the addition
of custom strategies to allow parsing arbitrary content types.</p>
<p>This functionality is completely opt-in, and will be available following a
composer update within your application.</p>
<p><a href="http://zend-expressive.readthedocs.org/en/latest/helpers/body-parse/">Read more about it in the documentation</a>.</p>
<h3>Pimple upgrade</h3>
<p>As noted, our previous Pimple support was for v1, which is unsupported at this time.
We decided to upgrade our support to the latest stable version, v3, prior to the
stable release of Expressive.</p>
<p>For those of you who were using Pimple previously, if you wish to update your application,
you will need to do the following:</p>
<ul>
<li>First, remove the previous pimple support: <code>composer remove mouf/pimple-interop pimple/pimple</code>.</li>
<li>Second, add the new v3 interop support: <code>composer require xtreamwayz/pimple-container-interop</code>.</li>
<li>Third, replace the contents of <code>config/container.php</code> with the contents of the
<a href="https://github.com/zendframework/zend-expressive-skeleton/blob/master/src/ExpressiveInstaller/Resources/config/container-pimple.php">linked skeleton file</a>.</li>
</ul>
<p>After taking those steps, you should see everything working just as it did before.</p>
<h4>zend-view changes</h4>
<p>One trivial change was made to the layout template for zend-view users: instead of using <code>headScript()</code>,
<code>inlineScript()</code> is now used, and emitted at the end of the <code>&lt;body&gt;</code> section of the layout.
This is a slight front-end performance enhancement; if you are using the default layout, we recommend
updating accordingly.</p>
<h2>Future</h2>
<p>At this point, we do not anticipate any more code changes before the stable release.
We are waiting on at least one pull request for an additional cookbook recipe, and
highly recommend users dive into the documentation and help us polish it for the
final release. Suggestions already include flow and architecture diagrams; if anybody
wants to create these, we'll happily take them!</p>
<p>If you are testing Expressive — whether for the first time, or updating an
existing application — please help us prepare it for general availability!</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Zend Framework 3 Update for 2015-12-10</title>
      <pubDate>Thu, 10 Dec 2015 16:50:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/2015-12-10-zf3-biweekly-update.html</link>
      <guid>http://framework.zend.com/blog/2015-12-10-zf3-biweekly-update.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>Per our <a href="/blog/zend-framework-3-update-and-roadmap.html">previous ZF3 update</a>, this is the
first in an ongoing series of bi-weekly posts on ZF3 development status.</p>
<p>The highlights:</p>
<ul>
<li>&gt;80 pull requests merged</li>
<li>28 releases of components</li>
<li>9 components updated to zend-servicemanager/zend-eventmanager v3 changes</li>
<li>2 release candidates of expressive</li>
</ul><h2>Pull request activity</h2>
<p>Marco Pivetta noted yesterday on twitter:</p>
<blockquote>
<p>Receiving around 15 mails/hour from zendframework repositories: work is going on at full speed :O #zf2 #zf3</p>
<p>— <a href="https://twitter.com/Ocramius">@Ocramius</a> <a href="https://twitter.com/Ocramius/status/674635264371859457">(link)</a></p>
</blockquote>
<p>Activity has been quite high the past couple weeks, with <a href="https://github.com/issues?utf8=%E2%9C%93&amp;q=is:pr+org:zendframework+is:merged+closed:%3E=2015-11-24+">more than 80 pull requests merged</a>
(link requires a GitHub account). Many of these were related to the Expressive
release candidates (more on those later), but more than half were on ZF
components, and ranged from bugfixes to new features to ZF3-specific refactors.</p>
<h2>Component Releases</h2>
<p>We released the following components and versions since the last update.
While not all releases are related to ZF3 specifically, this list is intended
to detail activity within the organization. One goal of splitting the various
components was to increase release velocity; we're definitely seeing that happen!</p>
<ul>
<li>
<a href="https://github.com/zendframework/zend-diactoros/releases/tag/1.2.0">zend-diactoros 1.2.0</a>,
which adds a <code>TextResponse</code> and <code>CallbackStream</code>, updates the <code>SapiEmitter</code> to emit a
<code>Content-Length</code> header by default, and ensures the default charset of an
<code>HtmlResposne</code> is utf-8.</li>
<li>
<a href="https://github.com/zendframework/zend-code/releases/tag/release-2.6.1">zend-code 2.6.1</a>,
which replaces the doctrine/common dependency with the more specific doctrine/annotations.</li>
<li>
<a href="https://github.com/zendframework/zend-expressive-template">zend-expressive-template</a>, a new
component containing the <code>TemplateRendererInterface</code> and related value objects used by
Expressive; this allows developers to use the interface in non-Expressive applications.</li>
<li>
<a href="https://github.com/zendframework/zend-expressive-router">zend-expressive-router</a>, a new
component containing the <code>RouterInterface</code> and related value objects used by Expressive;
this allows developers to use the interface in non-Expressive applications.</li>
<li>
<a href="https://github.com/zendframework/zend-expressive-aurarouter/releases/tag/1.0.0">zend-expressive-aurarouter 1.0.0</a>
(0.3.0 was also released); the component now depends on
zend-expressive-router instead of Expressive, and is considered stable.</li>
<li>
<a href="https://github.com/zendframework/zend-expressive-fastroute/releases/tag/1.0.0">zend-expressive-fastroute 1.0.0</a>
(0.3.0 was also released); the component now depends on
zend-expressive-router instead of Expressive, and is considered stable.</li>
<li>
<a href="https://github.com/zendframework/zend-expressive-zendrouter/releases/tag/1.0.0">zend-expressive-zendrouter 1.0.0</a>
(0.3.0 was also released); the component now depends on
zend-expressive-router instead of Expressive, and is considered stable.</li>
<li>
<a href="https://github.com/zendframework/zend-expressive-platesrenderer/releases/tag/1.0.0">zend-expressive-platesrenderer 1.0.0</a>
(0.3.0 was also released); the component now depends on
zend-expressive-template instead of Expressive, and is considered stable.</li>
<li>
<a href="https://github.com/zendframework/zend-expressive-twigrenderer/releases/tag/1.0.0">zend-expressive-twigrenderer 1.0.0</a>
(0.3.0 and 0.3.1 were also released); the component now depends on
zend-expressive-template instead of Expressive, and is considered stable.
Additionally, the component now has a new configuration structure.</li>
<li>
<a href="https://github.com/zendframework/zend-expressive-zendviewrenderer/releases/tag/1.0.0">zend-expressive-zendviewrenderer 1.0.0</a>
(0.3.0, 0.3.1, 0.4.0, and 0.4.1 were also released); the component now depends on
zend-expressive-template instead of Expressive, and is considered stable.
Additionally, the component now has custom <code>url</code> and <code>serverUrl</code> helpers
that work with zend-expressive-router and PSR-7, respectively.</li>
<li>
<a href="https://github.com/zendframework/zend-feed/releases/tag/release-2.6.0">zend-feed 2.6.0</a> provides
improvements that reduce dependencies, and allow better interoperability with other HTTP clients;
including PSR-7-based clients.</li>
<li>
<a href="https://github.com/zendframework/zend-expressive-helpers">zend-expressive-helpers</a>, a new
component that provides helpers for generating URI paths from configured routes, and fully-qualified
URIs based on the current request URI.</li>
<li>
<a href="https://github.com/zendframework/zend-test/releases/tag/release-2.5.2">zend-test 2.5.2</a> adds
support for writing tests to use PHPUnit 5.</li>
<li>
<a href="https://github.com/zendframework/zend-eventmanager/releases/tag/release-2.6.1">zend-eventmanager 2.6.1</a>
updates the dependencies to make Athletic a development-only dependency.</li>
<li>
<a href="https://github.com/zendframework/zend-db/releases/tag/release-2.6.2">zend-db 2.6.2</a> provides
a number of bugfixes</li>
<li>ZendService_Apple_Apns <a href="https://github.com/zendframework/ZendService_Apple_Apns/releases/tag/release-1.1.2">1.1.2</a>
and <a href="https://github.com/zendframework/ZendService_Apple_Apns/releases/tag/release-1.2.0">1.2.0</a>,
providing a bugfix and Safari push support, respectively.</li>
</ul>
<h2>ZF3 Refactors</h2>
<p>Since the last update, the following components have been refactored to work
with the planned v3 versions of zend-servicemanager and zend-eventmanager.
Please note that no new versions have been released at this time; all work
remains either in pull requests or in the develop branches of each component.</p>
<ul>
<li>
<a href="https://github.com/zendframework/zend-db/pull/53">zend-db</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-di/pull/5">zend-di</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-feed/pull/17">zend-feed</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-filter/pull/15">zend-filter</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-log/pull/14">zend-log</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-mail/pull/47">zend-mail</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-permissions-acl/pull/7">zend-permissions-acl</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-tag/pull/3">zend-tag</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-text/pull/2">zend-text</a>
</li>
</ul>
<h2>Expressive Release Candidates</h2>
<p>This week, we've issued two release candidates of Expressive, with RC4 being the latest.
Be sure to read the <a href="/blog/expressive-1-0-0rc3-released.html">RC3</a> and <a href="/blog/expressive-1-0-0rc4-released.html">RC4</a>
announcements to find out what changes have been made; a lot of work has occurred in the
past few weeks!</p>
<h2>Until next time</h2>
<p>We'll be providing another update on either 22 or 23 December 2015 (based on holiday
vacation schedules).</p>
<p>Until then, if you want to help:</p>
<ul>
<li>There are still <a href="https://github.com/zendframework/maintainers/wiki/ZF3-code-refactoring">component refactors to complete or review</a>.</li>
<li>We're still looking for feedback on <a href="https://github.com/zendframework/zend-mvc/issues/46">reducing zend-mvc dependencies</a>
and <a href="https://github.com/zendframework/zf2/issues/7646">identifying core components for the zf2 repository</a>.</li>
<li>Test Expressive, and help us reach a stable release of this new feature!</li>
</ul>
<p>Many thanks to all the contributors who have provided feedback, patches, reviews,
or releases!</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Expressive 1.0.0RC4 Released!</title>
      <pubDate>Wed, 09 Dec 2015 21:45:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/expressive-1-0-0rc4-released.html</link>
      <guid>http://framework.zend.com/blog/expressive-1-0-0rc4-released.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>The Zend Framework community is pleased to announce the immediate availability of Expressive 1.0.0rc4!</p>
<p>You can install it using <a href="https://getcomposer.org">Composer</a>, using the <code>create-project</code> command:</p>
<pre><code class="language-bash">$ composer create-project zendframework/zend-expressive-skeleton:1.0.0rc4@rc expressive
</code></pre>
<p>If you're already using Expressive, read below for how to update your application!</p><h2>Changes in RC4</h2>
<p>The majority of the changes for RC4 centered around polishing the skeleton and
providing more documentation. One change, however, represented a bugfix, and
will impact existing installations that were making use of the <code>UrlHelper</code> from
the zend-expressive-helpers package.</p>
<p>Changes in this release include:</p>
<h3>Updates to UrlHelper registration</h3>
<p>Two separate reports indicated that the methodology chosen for registering
<code>Zend\Expressive\Helper\UrlHelper</code> as a route result observer with the <code>Application</code>
instance was not viable. In one case, a circular dependency issue was discovered;
in the other, the <code>UrlHelper</code> instance was retrieved for the first time too late
to be triggered as a route result observer.</p>
<p>To solve this, we chose a path similar to the <code>ServerUrlHelper</code>: dedicated middleware
that, on invocation, registers the <code>UrlHelper</code> with the current <code>Application</code> instance
(or any <code>Zend\Expressive\Router\RouteResultSubjectInterface</code> implementation). For
existing users, this will require both upgrading your zend-expressive-helpers version,
as well as some minor changes to your configuration; see the <a href="#upgrading">Upgrading</a>
section below.</p>
<h3>Updates to the default source structure</h3>
<p>Prior to RC4, the <code>composer.json</code> mapped the <code>App</code> namespace to the <code>src/</code> directory,
and the <code>AppTest</code> namespace to the <code>test/</code> directory. We felt that this provided an
unreasonable limitation on application structure, and decided to change it as follows:</p>
<ul>
<li>We created the directory <code>src/App/</code>.</li>
<li>We pushed the <code>src/Action/</code> directory to <code>src/App/Action/</code>.</li>
<li>We created the directory <code>test/AppTest/</code>.</li>
<li>We pushed the <code>test/Action/</code> directory to <code>test/AppTest/Action/</code>.</li>
<li>We updated the autoloading entries in <code>composer.json</code> to map the <code>App</code> and
<code>AppTest</code> namespaces to the new subdirectories.</li>
</ul>
<p>The changes allow you to have multiple top-level namespaces under the <code>src/</code> directory,
and will help encourage a <a href="https://github.com/zendframework/zend-expressive-skeleton/pull/31">modular structure</a>
(similar to ZF2 modules, Symfony bundles, Laravel packages, etc.).</p>
<h3>Composer &quot;serve&quot; command</h3>
<p>To simplify serving your application via the built-in PHP web server, we have added
a Composer script named &quot;serve&quot;, which simply executes <code>php -S 0.0.0.0:8080 -t public/</code>.
You can invoke it as:</p>
<pre><code class="language-bash">$ composer serve
</code></pre>
<h3>Caching simplification</h3>
<p>In the skeleton application, we allow you to opt-in to configuration caching. Prior
to RC4, cached configuration was saved as a JSON serialized string; with the update
to RC4, it is now cached as a PHP file, allowing it to be pulled in via <code>include()</code>.
This approach is both simpler and more performant. Again, the <a href="#upgrading">Upgrading</a>
section below will detail how to modify your existing installation to make this
change.</p>
<h3>Twig configuration updates</h3>
<p>Version 0.3.0 of zend-expressive-twigrenderer made changes to the configuration format
for Twig users. While the old configuration can still be used, RC4 updates the default
configuration to follow the new recommended structure.</p>
<h3>zend-view configuration updates</h3>
<p>Version 0.4.0 of zend-expressive-zendviewrenderer (zend-view integration) added
the ability to consume a configured <code>Zend\View\HelperPluginManager</code> service, when
available, and also provides a factory for it. Additionally, that factory allows
using the top-level <code>view_helpers</code> key to provide additional plugins (using standard
zend-servicemanager style configuration).</p>
<p>RC4 of the Expressive skeleton updates the default zend-view configuration to
register the <code>HelperPluginManager</code>, and to define the top-level <code>view_helpers</code>
configuration key.</p>
<h3>Cross-platform documentation</h3>
<p>The &quot;usage examples&quot; section of the documentation has a section on &quot;Hello World
Using a Configuration-Driven Container&quot;. This documentation detailed using PHP's
<code>glob()</code> function to aggregate configuration files. However, <code>glob()</code> does not
work identically on all platforms.</p>
<p>The documentation has been updated to use <code>Zend\Stdlib\Glob::glob()</code>, which is
a cross-platform shim for <code>glob()</code>.</p>
<h3>Cookbook entries</h3>
<p>Two new entries have been added to the cookbook, one for configuring zend-view to
use helpers from other components (such as zend-form), and another detailing how
to add and configure custom zend-view view helpers.</p>
<h2>Upgrading</h2>
<p>If you're already using Expressive, you'll want to upgrade! To do so, you'll
need to make a few changes to your application.</p>
<h3>Dependency updates</h3>
<ul>
<li>You'll want to update zendframework/zend-expressive to RC4; this should happen on
a <code>composer update</code>.</li>
<li>You'll want to update zendframework/zend-expressive-helpers to <code>^1.2</code>, if you
are using them.</li>
</ul>
<h3>Configuration changes</h3>
<p>Configuration changes are only necessary if (a) you are upgrading from a
previous release candidate, (b) using the <code>UrlHelper</code>, and/or (c) using Twig or
zend-view.</p>
<h4>UrlHelper changes</h4>
<p>For the <code>UrlHelper</code>, you will need to make the following additions to the
<code>config/autoload/middleware-pipeline.global.php</code> file:</p>
<pre><code class="language-php">use Zend\Expressive\Helper;

return [
    'dependencies' =&gt; [
        'factories' =&gt; [
            /* ... */
            Helper\UrlHelperMiddleware::class =&gt; Helper\UrlHelperMiddlewareFactory::class,
        ],
    ],
    'middleware_pipeline' =&gt; [
        'pre_routing' =&gt; [
            // This entry was originally just for the ServerUrlMiddleware;
            // make it an array listing both that and the UrlHelperMiddleware,
            // as below:
            [
                'middleware' =&gt; [
                    Helper\ServerUrlMiddleware::class,
                    Helper\UrlHelperMiddleware::class,
                ],
            ],
            /* ... */
        ],
        'post_routing' =&gt; [
            /* ... */
        ],
    ],
    /* ... */
];
</code></pre>
<h4>Twig changes</h4>
<p>In the Twig configuration file, <code>config/autoload/templates.global.php</code>,
originally the structure was as follows:</p>
<pre><code class="language-php">return [
    'dependencies' =&gt; [ /* ... */ ],
    'templates' =&gt; [
        'extension' =&gt; 'html.twig',
        'cache_dir' =&gt; 'data/cache/twig',
        'assets_url' =&gt; '/',
        'assets_version' =&gt; null,
        'paths' =&gt; [
            'app' =&gt; ['templates/app'],
            'layout' =&gt; ['templates/layout'],
            'error' =&gt; ['templates/error'],
        ],
    ],
];
</code></pre>
<p>While this will continue to work, we recommend updating to the following structure:</p>
<pre><code class="language-php">return [
    'dependencies' =&gt; [ /* ... */ ],
    'templates' =&gt; [
        'extension' =&gt; 'html.twig',
        'paths' =&gt; [
            'app' =&gt; ['templates/app'],
            'layout' =&gt; ['templates/layout'],
            'error' =&gt; ['templates/error'],
        ],
    ],
    'twig' =&gt; [
        'cache_dir' =&gt; 'data/cache/twig',
        'assets_url' =&gt; '/',
        'assets_version' =&gt; null,
        'extensions' =&gt; [
            // extension service names or instances
        ],
    ],
];
</code></pre>
<h4>zend-view changes</h4>
<p>If you are upgrading from a previous release candidate, we recommend making the
following changes to your <code>config/autoload/templates.global.php</code> file:</p>
<pre><code class="language-php">return [
    'dependencies' =&gt; [
        'factories' =&gt; [
            /* ... */
            Zend\View\HelperPluginManager::class =&gt;
                Zend\Expressive\ZendView\HelperPluginManagerFactory::class,
        ],
    ],

    'templates' =&gt; [
        /* ... */
    ],

    // Also, add this key, to provide a place to register view helpers:
    'view_helpers' =&gt; [
        'aliases' =&gt; [ /* ... */ ],
        'invokables' =&gt; [ /* ... */ ],
        'factories' =&gt; [ /* ... */ ],
        // add other keys as necessary
    ],
]
</code></pre>
<h3>Autoloading/structure changes</h3>
<p>If you want to bring your application fully up-to-date with the expressive skeleton,
you may want to consider creating a top-level <code>src/App/</code> directory, and pushing
your <code>Action/</code> and other subdirectories under it, and updating the <code>App\\</code> namespace
autoloading entry in <code>composer.json</code> to point to the new directory:</p>
<pre><code># source trees become:
src/
    App/
        Action/
test/
    AppTest/
        Action/
</code></pre>
<p>and the <code>autoload</code> and <code>autoload-dev</code> sections of <code>composer.json</code> become:</p>
<pre><code class="language-javascript">&quot;autoload&quot;: {
    &quot;psr-4&quot;: {
        &quot;App\\&quot;: &quot;src/App/&quot;,
    }
},
&quot;autoload-dev&quot;: {
    &quot;psr-4&quot;: {
        &quot;AppTest\\&quot;: &quot;test/AppTest/&quot;,
    }
}
</code></pre>
<p>The above will allow you to start considering your middleware as discrete units
of functionality, and potentially allow you to port them betweeen applications.</p>
<h2>Future</h2>
<p>In just two days, we've had quite a large number of users reporting their
feedback, and we're quite pleased that the majority of the work done for RC4
centered around documentation! The release has a lot of polish at this point,
and we anticipate a stable release in the next couple weeks.</p>
<p>If you are testing Expressive — whether for the first time, or updating an
existing application — please help us prepare it for general availability!</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Expressive 1.0.0RC3 Released!</title>
      <pubDate>Mon, 07 Dec 2015 19:00:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/expressive-1-0-0rc3-released.html</link>
      <guid>http://framework.zend.com/blog/expressive-1-0-0rc3-released.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>The Zend Framework community is pleased to announce the immediate availability of Expressive 1.0.0rc3!</p>
<p>You can install it using <a href="https://getcomposer.org">Composer</a>, using the <code>create-project</code> command:</p>
<pre><code class="language-bash">$ composer create-project zendframework/zend-expressive-skeleton:1.0.0rc3@rc expressive
</code></pre>
<p>If you're already using Expressive, read below for how to update your application!</p><h2>Changes in RC3</h2>
<p>RC3 shows a number of improvements, including a number of <em>new components</em> created
in order to improve interoperability with other <a href="http://www.php-fig.org/psr/psr-7/">PSR-7</a>
middleware solutions.</p>
<h3>New Components</h3>
<p>First, we split our routing and templating subcomponents into their own
repositories and packages:</p>
<ul>
<li>
<a href="https://github.com/zendframework/zend-expressive-router">zendframework/zend-expressive-router</a>
</li>
<li>
<a href="https://github.com/zendframework/zend-expressive-template">zendframework/zend-expressive-template</a>
</li>
</ul>
<p>These contain the code that was originally in <code>Zend\Expressive\Router</code> and
<code>Zend\Expressive\Template</code> (with some additions; see below), and the subcomponents
were removed from the Expressive tree entirely. Expressive now <em>depends</em> on
these packages. <em>This separation allows users of other PSR-7 middleware stacks
to use the routing and templating interfaces, as well as their implementations,
within their chosen stack.</em></p>
<p>Next, we created a new package, <a href="https://github.com/zendframework/zend-expressive-helpers">zendframework/zend-expressive-helpers</a>.
This package contains utility classes and middleware useful to Expressive, but
which could be useful to other PSR-7 frameworks as well:</p>
<ul>
<li>
<code>Zend\Expressive\Helper\ServerUrlHelper</code> provides a class for generating fully-qualified
URIs based on the current request. When you provide a path to the helper, that path
will be resolved based on the current request scheme and target. This helper depends
on dedicated middleware to seed it with the current request, which is also provided
in the package.</li>
<li>
<code>Zend\Expressive\Helper\UrlHelper</code> provides a class for generating URI paths
based on the current <code>RouterInterface</code> instance present, delegating to its
<code>generateUri()</code> method. It also has awareness of the matched <code>RouteResult</code> (more
on that later), allowing you to generate &quot;self&quot; URIs, as well as URIs with
partial parameters based on the currently matched route.</li>
</ul>
<p>You can read about the new helpers <a href="http://zend-expressive.readthedocs.org/en/latest/helpers/intro/">in the documentation</a>.</p>
<h2>Fixes and Improvements</h2>
<h3>RouteResult observers</h3>
<p>In order to provide the functionality in <code>Zend\Expressive\Helper\UrlHelper</code>, we needed
a way to inform classes of the routing results. To accomplish this, we added the following
to the zend-expressive-router package:</p>
<ul>
<li>
<code>Zend\Expressive\Router\RouteResultSubjectInterface</code>, which defines a class that will
obtain a <code>RouteResult</code> and notify observers; and</li>
<li>
<code>Zend\Expressive\Router\RouteResultObserverInterface</code>, which defines a class that will
be updated with a <code>RouteResult</code>.</li>
</ul>
<p><code>Zend\Expressive\Application</code> now implements the <code>RouteResultSubjectInterface</code>, and <code>UrlHelper</code>
is an example of an observer.</p>
<p>The documentation <a href="http://zend-expressive.readthedocs.org/en/latest/router/result-observers/">now contains information on route result observers</a>,
should you want more details on the feature.</p>
<p>A small number of fixes and improvements were also made during the RC3 lifecycle.</p>
<h3>Create Middleware Pipelines</h3>
<p><a href="https://github.com/michaelmoussa">Michael Moussa</a> provided a feature to allow specifying
not just concrete middleware, but <em>arrays</em> of middleware both when creating routed middleware
as well as when adding middleware to the pre/post_routing middleware pipelines.</p>
<p>To illustrate:</p>
<pre><code class="language-php">// Manually, for pipeline middleware:
$app-&gt;pipe('/api', [
    'Authentication',
    'Authorization',
    'ContentNegotiation',
    'Validation',
    'Resource',
]);

// Manually, for routed middleware:
$app-&gt;get('/api/resource[/{id:\d+}]', [
    'Authentication',
    'Authorization',
    'ContentNegotiation',
    'Validation',
    'Resource',
]);

// Via configuration, for pipeline middleware:
return [
    'middleware_pipeline' =&gt; [
        'pre_routing' =&gt; [
            [
                'path' =&gt; '/api',
                'middleware' =&gt; [
                    'Authentication',
                    'Authorization',
                    'ContentNegotiation',
                    'Validation',
                    'Resource',
                ],
            ],
        ],
    ],
];

// Via configuration, for routed middleware:
return [
    'routes' =&gt; [
        [
            'name' =&gt; 'api',
            'path' =&gt; '/api',
            'middleware' =&gt; [
                'Authentication',
                'Authorization',
                'ContentNegotiation',
                'Validation',
                'Resource',
            ],
            'allowed_method' =&gt; ['GET'],
        ],
    ],
];
</code></pre>
<p>In each case, any individual middleware in the list may be a callable
middleware, or the name of a service that resolves as middleware.</p>
<p>This feature should allow creating unique, complex middleware pipelines based
on specific routes a snap!</p>
<h3>Casting view models to arrays</h3>
<p>One feature users of zend-view wanted was the ability to pass <code>ViewModel</code> instances
to a renderer. Prior to RC3, if you provided a view model, normalization would destroy
any variables stored in the view model due to improper casting. This has now been resolved.</p>
<h3>Get the Full RouteResult</h3>
<p>The full <code>RouteResult</code> is now injected into the request as the attribute <code>Zend\Expressive\Router\RouteResult</code>.</p>
<h3>Fewer Silent Failures</h3>
<p>A contributor provided <a href="https://github.com/zendframework/zend-expressive/pull/197">a patch</a> that
improves the <code>ApplicationFactory</code> by raising exceptions when key services are missing, instead of
silently ignoring them. While this is a small backwards compatibility break, it provides important
information that previously led to hard-to-debug issues.</p>
<h3>Twig improvements</h3>
<p>The <a href="https://github.com/zendframework/zend-expressive-twigrenderer">zendframework/zend-expressive-twigrenderer</a>
package now allows you to register custom extensions. See the <a href="https://github.com/zendframework/zend-expressive-twigrenderer/releases/tag/0.3.0">0.3.0 changelog for details</a>
(which is the first version introducing this capability).</p>
<h3>zend-view improvements</h3>
<p>The <a href="https://github.com/zendframework/zend-expressive-zendviewrenderer">zendframework/zend-expressive-zendviewrenderer</a>
package had a number of usability updates:</p>
<ul>
<li>It now adds the zendframework/zend-i18n package as a dependency, as it's a requirement of the PhpRenderer.</li>
<li>It now provides concrete <code>ServerUrlHelper</code> and <code>UrlHelper</code> helper classes, as wrappers around the
zendframework/zend-expressive-helpers equivalents. This change allowed reducing dependencies, and
now allows the package to be used without Expressive.</li>
<li>It now provides a factory for the <code>HelperPluginManager</code>, allowing you to provide your own
instance, and thus custom helpers.</li>
</ul>
<h3>Document Creating Custom 404 Handlers</h3>
<p><a href="https://github.com/samsonasik">Abdul Malik Ikhsan</a> provided documentation covering how
to create a custom 404 handler for your application for logic such as logging.  You
<a href="http://zend-expressive.readthedocs.org/en/latest/cookbook/#how-can-i-set-custom-404-page-handling">can read it in the cookbook</a>.</p>
<h2>Upgrading</h2>
<p>If you're already using Expressive, you'll want to upgrade! To do so, you'll
need to make a few changes to your application.</p>
<h3>Dependency updates</h3>
<ul>
<li>Update <code>zendframework/zend-expressive</code> to <code>~1.0.0@rc || ^1.0</code>. This will also make
it easier to upgrade to the stable version when it comes out.</li>
<li>Update any <code>zendframework/zend-expressive-*</code> components to <code>^1.0</code>. These include
your chosen router and template system (if any).</li>
<li>Potentially add <code>zendframework/zend-expressive-helpers</code> (at <code>^1.1</code>), if you plan
to use the <code>UrlHelper</code> or <code>ServerUrlHelper</code>. (If you're using the zend-view renderer,
you'll already be getting this dependency.)</li>
</ul>
<h3>Configuration changes</h3>
<p>The only configuration changes necessary are if you want to use the new helpers. If you
won't be, and you're not using zend-view, you can skip this section.</p>
<p>First, add service entries for each to <code>config/autoload/dependencies.global.php</code>:</p>
<pre><code class="language-php">use Zend\Expressive\Helper;

return [
    'dependencies' =&gt; [
        'invokables' =&gt; [
            Helper\ServerUrlHelper::class =&gt; Helper\ServerUrlHelper::class,
            /* ... */
        ],
        'factories' =&gt; [
            Helper\UrlHelper::class =&gt; Helper\UrlHelperFactory::class,
            /* ... */
        ],
    ],
];
</code></pre>
<p>Next, you'll need to add the <code>ServerUrlMiddleware</code> to the midddleware pipeline. Edit
<code>config/autoload/middleware-pipeline.global.php</code> as follows:</p>
<pre><code class="language-php">use Zend\Expressive\Helper;

return [
    // This section will likely be new:
    'dependencies' =&gt; [
        'factories' =&gt; [
            Helper\ServerUrlMiddleware::class =&gt; Helper\ServerUrlMiddlewareFactory::class,
        ],
    ],
    // This section existed, but needs edits:
    'middleware_pipeline' =&gt; [
        'pre_routing' =&gt; [
            // Add the following:
            [ 'middleware' =&gt; ServerUrlMiddleware::class ],
            /* ... */
        ],
        'post_routing' =&gt; [
            /* ... */
        ],
    ],
];
</code></pre>
<p>Once these changes are made, your application should now be ready to use the helpers.</p>
<h2>Future</h2>
<p>We're very excited about this release! Thanks to a large number of testers and users,
we've been able to refine the offering, and improve our ability to interoperate in the
PSR-7 ecosystem. We feel this version provides a nice sweet spot for the initial
stable features, and anticipate a stable release in the next couple weeks.</p>
<p>If you are testing Expressive — whether for the first time, or updating an
existing application — please help us polish the release and get it ready
for general availability!</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
  </channel>
</rss>
