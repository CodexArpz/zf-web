<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/">
  <channel>
    <title>Blog Entries - ZF Blog</title>
    <description>Blog Entries - ZF Blog</description>
    <pubDate>Wed, 13 Aug 2014 21:30:00 +0000</pubDate>
    <generator>Zend_Feed_Writer 2 (http://framework.zend.com)</generator>
    <link>http://framework.zend.com/blog.html</link>
    <atom:link rel="self" type="application/rss+xml" href="http://framework.zend.com/blog-rss.xml"/>
    <item>
      <title>Apigility 1.0.4 Released!</title>
      <pubDate>Wed, 13 Aug 2014 21:30:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/apigility-1-0-4-released.html</link>
      <guid>http://framework.zend.com/blog/apigility-1-0-4-released.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<h1>Apigility 1.0.4</h1>

<p>We are pleased to announce the immediate availability of Apigility 1.0.4!</p>

<ul>
    <li><a href="https://apigility.org/download">https://apigility.org/download</a></li>
</ul>

<p>This is our fourth maintenance release of Apigility.</p><h2>IBM i Support</h2>

<p>This release contains a number of fixes to ensure the ability to use Apigility on IBM i. Among them:</p>

<ul>
    <li>We are pinning support to Zend Framework 2.3.2 and above, which contains updates supporting DB2:<br /></li>
    <li>Full transaction support.<br /></li>
    <li>Fixed LIMIT support, allowing for paginated DB result sets.<br /></li>
    <li>Fixes to database-backed authentication<br /></li>
    <li>The ability to specify database driver options via the Admin UI. Most DB2<br /> connections need additional driver options specified, and you can now do so via the UI.</li>
</ul>

<h2>UI Improvements</h2>

<p>One lingering issue we've had reported is an error when creating APIs: the UI reports an error, but the API has been created. We made several patches that, in aggregate, should resolve these issues going forward:</p>

<ul>
    <li>We discovered that our promise chains in the Admin UI were not optimally constructed, and could potentially raise errors under the appropriate conditions; these have been fixed.<br /></li>
    <li>We introduced comprehensive cache control headers to prevent client-side caching of Admin API calls.<br /></li>
    <li>We introduced a timeout between successful completion of API creation and deletion calls, and subsequent fetching of the API list from the Admin API. In working with <a href="https://github.com/jguittard">Julien Guittard</a>, we were able to find an optimal timeout that resolves the issue.</li>
</ul>

<p>Additionally, for those users using Apache to serve the Admin UI and Admin API, we have stopped using backslashes in URI identifiers (Apache rejects URI-encoded slashes by default).</p>

<p>Other fixes were also made that are detailed under the &quot;zf-apigility-admin&quot; header below.</p>

<h2>Documentation fixes</h2>

<p>zf-apigility-documentation was not using the correct configuration key to discover input filters, which meant it was not reporting fields at all. This had further implications for zf-apigility-documentation-swagger, which was then unable to expose models based on those fields. This situation is now resolved.</p>

<h2>Collections</h2>

<p>While Apigility has supported retrieving collections in REST services, creating, replacing, updating, or deleting them has been an exercise left to the developer previously. With this release, field definitions can now be used to validate the items passed to collections, giving collections first-class support.</p>

<h2>Console</h2>

<p>zf-console was extensively updated, with many contributions and ideas from Zend's <a href="https://github.com/slaff">Slavey Karadzhov</a>. These include:</p>

<ul>
    <li>Simplification of mapping the command name to the route. By default the command name is considered the first argument of the route now.<br /></li>
    <li>Command handlers may now be specified in the configuration via the <code>handler</code> key for a command.<br /></li>
    <li>A number of useful CLI-specific filters are now provided, including an <code>Explode</code> filter (split comma or other delimited arguments to an array), a <code>QueryString</code> filter (specify arguments in query string format), and a <code>Json</code> filter (specify arguments in JSON).<br /></li>
    <li>Better error handling and error reporting.<br /></li>
    <li>The ability to generate autocompletion scripts for your CLI commands.</li>
</ul>

<p>zf-console is shaping up as a capable microframework for CLI commands!</p>

<h2>Thank You!</h2>

<p>Many thanks to everyone who contributed fixes, big or small, towards this release!</p>

<h2>Issues closed:</h2>

<h3>zf-apigility-admin</h3>

<ul>
    <li><a href="https://github.com/zfcampus/zf-apigility-admin/pull/220">Timeout delay upon API creation and deletion</a><br /></li>
    <li><a href="https://github.com/zfcampus/zf-apigility-admin/pull/219">Introduced timeouts to API create/delete actions</a><br /></li>
    <li><a href="https://github.com/zfcampus/zf-apigility-admin/pull/218">Disable HTTP caching for Admin API</a><br /></li>
    <li><a href="https://github.com/zfcampus/zf-apigility-admin/pull/215">url-encoded backslashes cause issues in Apache</a><br /></li>
    <li><a href="https://github.com/zfcampus/zf-apigility-admin/pull/214">File permissions upon resources files creation</a><br /></li>
    <li><a href="https://github.com/zfcampus/zf-apigility-admin/pull/213">Revise promise chains</a><br /></li>
    <li><a href="https://github.com/zfcampus/zf-apigility-admin/pull/212">Allow defining DB adapter driver options</a><br /></li>
    <li><a href="https://github.com/zfcampus/zf-apigility-admin/pull/211">Resolves #210 by correcting the dead link</a><br /></li>
    <li><a href="https://github.com/zfcampus/zf-apigility-admin/pull/205">Undefined index: input_filter_specs</a><br /></li>
    <li><a href="https://github.com/zfcampus/zf-apigility-admin/pull/204">OAuth2 Mongo Adapter cannot be created successfully</a><br /></li>
    <li><a href="https://github.com/zfcampus/zf-apigility-admin/pull/196">zf-hal option 'render_collections' can break Apigility admin</a><br /></li>
    <li><a href="https://github.com/zfcampus/zf-apigility-admin/pull/190">Feature request: Ability to disable pagination from admin ui</a><br /></li>
    <li><a href="https://github.com/zfcampus/zf-apigility-admin/issues/175">Creating new API fails with &quot;API not found&quot;</a><br /></li>
    <li><a href="https://github.com/zfcampus/zf-apigility-admin/pull/172">Can't Edit OAuth Adapter</a></li>
</ul>

<h3>zf-apigility-documentation</h3>

<ul>
    <li><a href="https://github.com/zfcampus/zf-apigility-documentation/pull/13">Fixed usage of configuration-driven creation of input filters</a></li>
</ul>

<h3>zf-apigility-documentation-swagger</h3>

<ul>
    <li><a href="https://github.com/zfcampus/zf-apigility-documentation-swagger/pull/6">Use service name instead of api name to describe endpoint</a><br /></li>
    <li><a href="https://github.com/zfcampus/zf-apigility-documentation-swagger/pull/5">Add dependency</a></li>
</ul>

<h3>zf-apigility-skeleton</h3>

<ul>
    <li><a href="https://github.com/zfcampus/zf-apigility-skeleton/pull/76">Bump ZF2 version requirement</a><br /></li>
    <li><a href="https://github.com/zfcampus/zf-apigility-skeleton/pull/73">Prefix config glob path</a><br /></li>
    <li><a href="https://github.com/zfcampus/zf-apigility-skeleton/issues/71">Apache configuration</a><br /></li>
    <li><a href="https://github.com/zfcampus/zf-apigility-skeleton/pull/67">Ensure default Apache site is disabled</a></li>
</ul>

<h3>zf-console</h3>

<ul>
    <li><a href="https://github.com/zfcampus/zf-console/pull/11">Added out-of-the-box autocompletion help for all applications based on zf-console</a><br /></li>
    <li><a href="https://github.com/zfcampus/zf-console/pull/9">Better error handling</a><br /></li>
    <li><a href="https://github.com/zfcampus/zf-console/pull/8">Useful filters</a><br /></li>
    <li><a href="https://github.com/zfcampus/zf-console/pull/7">Allow setting handler in route configuration</a><br /></li>
    <li><a href="https://github.com/zfcampus/zf-console/pull/5">Simplify mapping the command name to the route</a></li>
</ul>

<h3>zf-content-validation</h3>

<ul>
    <li><a href="https://github.com/zfcampus/zf-content-validation/pull/20">Bug: Validation bypassed when POST is empty</a><br /></li>
    <li><a href="https://github.com/zfcampus/zf-content-validation/pull/19">isCollection() method returning true for entities</a><br /></li>
    <li><a href="https://github.com/zfcampus/zf-content-validation/pull/3">Problems concerning validating collections</a></li>
</ul>

<h3>zf-deploy</h3>

<ul>
    <li><a href="https://github.com/zfcampus/zf-deploy/pull/27">Remove include of application configuration</a><br /></li>
    <li><a href="https://github.com/zfcampus/zf-deploy/pull/26">Cannot validate deployment.xml if zfdeploy.phar is in a folder with spaces</a><br /></li>
    <li><a href="https://github.com/zfcampus/zf-deploy/pull/22">Updated to use features from latest master of zf-console</a><br /></li>
    <li><a href="https://github.com/zfcampus/zf-deploy/pull/21">Execute composer.phar with the PHP binary running zf-deploy</a></li>
</ul>

<h3>zf-hal</h3>

<ul>
    <li><a href="https://github.com/zfcampus/zf-hal/issues/51">422 status when my entity has no identifier on creation</a><br /></li>
    <li><a href="https://github.com/zfcampus/zf-hal/pull/50">Possible issue on HAL collection first link of the paginator.</a><br /></li>
    <li><a href="https://github.com/zfcampus/zf-hal/pull/48">Allow -1 for page size</a><br /></li>
    <li><a href="https://github.com/zfcampus/zf-hal/pull/47">Links in metadata map are no longer honored</a><br /></li>
    <li><a href="https://github.com/zfcampus/zf-hal/pull/45">Update Hal Plugin to support entities with $id = 0</a><br /></li>
    <li><a href="https://github.com/zfcampus/zf-hal/pull/39">Can't return a collection object with embedded entities when content negotiation is set to Json</a></li>
</ul>

<h3>zf-mvc-auth</h3>

<ul>
    <li><a href="https://github.com/zfcampus/zf-mvc-auth/pull/36">deny_by_default inverts permission rules</a><li>
    <li><a href="https://github.com/zfcampus/zf-mvc-auth/pull/35">Support for OAuth2 Token in Query String / POST Body</a></li>
</ul>

<h3>zf-oauth2</h3>

<ul>
    <li><a href="https://github.com/zfcampus/zf-oauth2/pull/58">Use content negotiation in AuthController</a><br /></li>
    <li><a href="https://github.com/zfcampus/zf-oauth2/pull/56">Ensure bodyParams is an array before creating request</a><br /></li>
    <li><a href="https://github.com/zfcampus/zf-oauth2/pull/54">Update PdoAdapter.php</a><br /></li>
    <li><a href="https://github.com/zfcampus/zf-oauth2/pull/48">refactored the class to support better reuse when extending the class</a><br /></li>
    <li><a href="https://github.com/zfcampus/zf-oauth2/issues/46">Separate MongoClient creation from MongoAdapter factory</a></li>
</ul>

<h3>zf-rest:</h3>

<ul>
    <li><a href="https://github.com/zfcampus/zf-rest/pull/43">Allow returning entities without identifiers from creation routines</a><br /></li>
    <li><a href="https://github.com/zfcampus/zf-rest/pull/39">Allow Header tied to 'id' param.</a><br /></li>
    <li><a href="https://github.com/zfcampus/zf-rest/pull/38">Can't attach to a resource's event using the SharedEventManager</a><br /></li>
    <li><a href="https://github.com/zfcampus/zf-rest/pull/36">Update RestController to handle entities with $id = 0</a><br /></li>
    <li><a href="https://github.com/zfcampus/zf-rest/pull/31">Can't return a collection object with embedded entities when content negotiation is set to Json</a></li>
</ul>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Zend Framework 2.3.2 Released!</title>
      <pubDate>Mon, 11 Aug 2014 17:30:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/zend-framework-2-3-2-released.html</link>
      <guid>http://framework.zend.com/blog/zend-framework-2-3-2-released.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
    The Zend Framework community is pleased to announce the immediate availability
    of Zend Framework 2.3.2!
</p>

<ul>
    <li>
        <a href="/downloads/latest">http://framework.zend.com/downloads/latest</a>
    </li>
</ul>

<p>
    This is the second maintenance release in the 2.3 series, and resolves more than 100 issues.
</p><h2>Notable Changes</h2>

<p>
    The following changes are noted as being fixes that may have potential implications
    for existing applications.
</p>

<ul>
    <li><a href="https://github.com/zendframework/zf2/pull/6295">#6295</a>
        introduces a slight change to how <kbd>Zend\Form\Fieldset</kbd> handles disabled 
        values. Previously, they were represented in the form, and still 
        processed on submit, which allowed the possibility of changing the 
        value. This pull request modifies the behavior to extract the original 
        value from any bound data if present and use that value instead, which 
        is the correct behavior.
    </li>

    <li><a href="https://github.com/zendframework/zf2/pull/6423">#6423</a>
        modifies the behavior of <kbd>Zend\Validator\File\UploadFile</kbd> to only 
        return the <kbd>FILE_NOT_FOUND</kbd> error if upload was successful; previously, 
        it incorrectly would report this error even if an error occurred during 
        upload.
    </li>
</ul>

<p>For the full changelog, visit:</p>

<ul>
    <li><a href="/changelog/2.3.2">http://framework.zend.com/changelog/2.3.2</a></li>
</ul>

<h2>Thank You!</h2>

<p>
    A big thank you to the host of contributors who helped make this
    maintenance release a reality!
</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Zend Framework 1.12.7 Released!</title>
      <pubDate>Thu, 12 Jun 2014 20:00:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/zend-framework-1-12-7-released.html</link>
      <guid>http://framework.zend.com/blog/zend-framework-1-12-7-released.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
    The Zend Framework community is pleased to announce the immediate availability
    of Zend Framework 1.12.7:
</p>

<ul>
    <li>
        <a href="/downloads/latest#ZF1">http://framework.zend.com/downloads/latest#ZF1</a>
    </li>
</ul>

<p>
    This release contains an important security fix in 
    <code>Zend_Db_Select</code>; we strongly encourage users of this component to 
    upgrade.
</p><h2>Security Fixes</h2>

<p>
    One new security advisory has been made, and has been patched in 1.12.7:
</p>

<p>
    <a href="/security/advisory/ZF2014-04">ZF2014-04</a>, which mitigates 
    a potential SQL Injection (SQLi) vector when usiing ORDER BY clauses in
    <kbd>Zend_Db_Select</kbd>; SQL function calls were improperly detected, rendering
    ORDER clauses such as <kbd>MD5(1);drop table foo</kbd> unfiltered. The
    logic has been updated to prevent SQLi vectors, and users of this functionality
    are strongly encouraged to upgrade immediately.
</ul>

<p>
    For more information, follow the link above; if you use the component
    affected, please upgrade as soon as possible.
</p>

<h2>Important Changes</h2>

<p>
    In addition to the security fix above, a number of other important changes
    were made, including:
</p>

<ul>
    <li>Support for PHPUnit 4 and 4.1, both within the Zend Framework test suite
        and inside the <kbd>Zend_Test_PHPUnit</kbd> component.</li>
    <li>Backported support from ZF2 for recursive page removal within
        <kbd>Zend_Navigation</kbd>.</li>
    <li>Support within the <kbd>Hostname</kbd> validator for the newly released
        IANA top level domains.</li>
    <li>Forward-compatibility changes were made to ensure Zend Framework 1 will run on
        the upcoming PHP 5.6.</li>
</ul>

<p>
    For the complete list of changes, <a href="/changelog/1.12.7">read the changelog</a>.
</p>

<h2>Thank You!</h2>

<p>
    As always, I'd like to thank the many contributors who made this
    release possible, particularly Cassiano Dal Pizzol and Lars Kneschke for
    reporting the security vulnerability, and Enrico Zimuel for patching it.
</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Apigility 1.0.3 Released!</title>
      <pubDate>Thu, 05 Jun 2014 16:30:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/apigility-1-0-3-released.html</link>
      <guid>http://framework.zend.com/blog/apigility-1-0-3-released.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>We are pleased to announce the immediate availability of Apigility 1.0.3!</p>

<ul>
    <li><a href="https://apigility.org/download">https://apigility.org/download</a></li>
</ul>

<p>This is our third maintenance release of Apigility, and the first containing security fixes; read on for more information.</p><h2>Security Fixes</h2>

<p>We were notified by <a href="https://github.com/stefanotorresi">Stefano Torresi</a> of a potential security vector in <code>ZF\Apigility\DbConnectedResource</code>. While the <code>create()</code> method of that class pulls data from the composed input filter, if present, the <code>patch()</code> and <code>update()</code> methods were not, making it possible for an attacker to send unwanted data to the API service.</p>

<p>We have updated the class to pull from the composed input filter, if present, for each of the <code>create()</code>, <code>patch()</code>, and <code>update()</code> methods.</p>

<p>If you use DB-Connected REST resources in Apigility, we <strong>strongly</strong> recommend updating immediately. You can do so by running <code>composer update</code> inside your application.</p>

<p><a href="/security/advisory/AG2014-01">Read the security advisory for more details.</a></p>

<h2>Deployment Fixes</h2>

<p>We were notified that the logic for finding a Composer executable in <a href="https://github.com/zfcampus/zf-deploy">zf-deploy</a> would fail in some situations. A fix was contributed that better resolves the path to the executable, particularly in situations where a <code>composer.phar</code> must first be downloaded.</p>

<p>Additionally, in reviewing this fix, <a href="https://twitter.com/ezimuel">Enrico Zimuel</a> noted that we needed test coverage for most of the ZFDeploy functionality; we now have a comprehensive set of tests, all passing!</p>

<h2>Documentation Fixes</h2>

<p><a href="https://github.com/kaloyan-raev">Kaloyan Raev</a> noted that the HTML documentation does not render properly under Internet Explorer, due to the order in which media type selectors are matched. A swap in the order fixes the situation, and continues to work as expected under other browsers.</p>

<h2>Thank You!</h2>

<p>Many thanks to Stefano Torresi for working with us on the DB-Connected security issue, to Kaloyan Raev for his assistance with zf-deploy and the documentation, and to Enrico Zimuel, for the huge amount of testing he added to zf-deploy!</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Apigility 1.0.2 Released!</title>
      <pubDate>Wed, 04 Jun 2014 18:00:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/apigility-1-0-2-released.html</link>
      <guid>http://framework.zend.com/blog/apigility-1-0-2-released.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>We are pleased to announce the immediate availability of Apigility 1.0.2!</p>

<ul>
    <li><a href="https://apigility.org/download">https://apigility.org/download</a></li>
</ul>

<p>This is our second maintenance release of Apigility, fixing a number of issues, and providing significant improvements for file upload capabilities.</p><h2>Upload Support</h2>

<p>Uploads were possible before this release, but were difficult to properly enable. Additionally, PATCH and PUT requests required manually handling the file uploads, as PHP does not natively support file uploads for those request methods; the Zend Framework 2 InputFilter component, because it utilizes PHP's native support for validating that an upload completed and for moving an upload file to a new location, also could not deal with these methods.</p>

<p>This release makes the following changes in order to facilitate file uploads via your Apigility API:</p>

<ul>
    <li>Content validation was altered to merge file upload data, when present, with  the submitted API fields. </li>
    <li>The Admin UI now allows you to mark a field as representing a file upload;  this ensures that content validation will work properly, as content validation  differs for file uploads. </li>
    <li>The content negotiation module now provides emulation for PHP's file upload  support when receiving PATCH and PUT requests, ensuring that the files are  uploaded in the same manner, cleaned up post-request, and passed to validation  properly. You should notice no difference between POST, PUT, or PATCH requests  when performing file uploads, whether a single or multiple files are provided.</li>
</ul>

<p>File uploads are only done using the <code>multipart/form-data</code> media type. You will need to add that media type to the content negotiation whitelist if you plan to perform file uploads.</p>

<p>If you have further questions, you can <a href="https://apigility.org/documentation/recipes/upload-files-to-api">consult the documentation</a>.</p>

<h2>Changelog</h2>

<p>While upload support is the major feature of this release, we fixed many other issues.</p>

<h3>General</h3>

<ul>
    <li><p>All repositories have updated <code>composer.json</code> files that properly define the  two branch aliases for the <code>master</code> and <code>develop</code> branches.</p></li>
    <li><p>All repositories have updated <code>README.md</code> files that provide a &quot;Requirements&quot;  section linking to the <code>composer.json</code> file.</p></li>
</ul>

<h3>zf-apigility-admin</h3>

<ul>
    <li><p><a href="https://github.com/zfcampus/zf-apigility-admin/pull/181">Fixes for the &quot;Encrypt&quot; and &quot;Compress&quot; filter adapters</a>,  ensuring that these filters can be properly created and configured.</p></li>
    <li><p><a href="https://github.com/zfcampus/zf-apigility-admin/pull/182">Ability to specify file upload fields</a>.  A field can now be marked as representing a file upload, ensuring it can then  be validated correctly.</p></li>
    <li><p><a href="https://github.com/zfcampus/zf-apigility-admin/pull/171">Fix for unclosed link in authentication screen</a>,  which was preventing edits and saves of authentication details.</p></li>
    <li><p><a href="https://github.com/zfcampus/zf-apigility-admin/pull/184">Remove charset option for Postgres adapters</a>,  as that adapter does not support setting the character set.</p></li>
    <li><p><a href="https://github.com/zfcampus/zf-apigility-admin/pull/185">Added DSN to DB adapter input filter</a>,  so that edits to an existing DB adapter will save when the DSN is provided.</p></li>
    <li><p><a href="https://github.com/zfcampus/zf-apigility-admin/pull/178">Fixes to the DB-Connected service model</a>,  to ensure that update data is saved properly.</p></li>
</ul>

<h3>zf-apigility-documentation</h3>

<ul>
    <li><a href="https://github.com/zfcampus/zf-apigility-documentation/pull/9">Fixes HTTP status code for POST operations</a>,  to now display <code>201</code> as a potential status.</li>
</ul>

<h3>zf-apigility-skeleton</h3>

<ul>
    <li><a href="https://github.com/zfcampus/zf-apigility-skeleton/pull/63">Adds composer.phar to the skeleton</a>,  since it should have always been there!</li>
</ul>

<h3>zf-content-negotiation</h3>

<ul>
    <li><a href="https://github.com/zfcampus/zf-content-negotiation/pull/18">Implements file uploads</a>  <a href="https://github.com/zfcampus/zf-content-negotiation/pull/20">via request body streaming</a>  for PUT and PATCH requests.</li>
</ul>

<h3>zf-content-validation</h3>

<ul>
    <li><a href="https://github.com/zfcampus/zf-content-validation/pull/14">Ensures file upload data is passed to validation</a>,  which allows validating file uploads.</li>
</ul>

<h3>zf-deploy</h3>

<ul>
    <li><a href="https://github.com/zfcampus/zf-deploy/pull/15">Ensures --gitignore flag is passed when copying source tree</a>.</li>
</ul>

<h3>zf-hal</h3>

<ul>
    <li><a href="https://github.com/zfcampus/zf-hal/pull/35">Always store the original entity within ZF\Hal\Entity</a>,  fixing an issue where REST controllers cast entities to arrays prior to  creating the <code>ZF\Hal\Entity</code> instance, and thus causing listeners on  <code>renderEntity</code> et. al. to receive data that could never be matched.</li>
</ul>

<h3>zf-oauth2</h3>

<ul>
    <li><a href="https://github.com/zfcampus/zf-oauth2/pull/43">Pass all OAuth2 adapter options to oauth2-server-php</a>,  enabling the ability to turn on refresh token re-issue, among other things.</li>
</ul>

<h2>Roadmap</h2>

<p>Many thanks for all the great issue reports and discussions on the <a href="http://bit.ly/apigility-users">mailing list</a> and the various issue trackers!</p>

<p>We will do additional maintenance releases on an as-needed basis. The next feature release, 1.1, is in development, and includes:</p>

<ul>
    <li>Doctrine-Connected REST services </li>
    <li>Database Autodiscovery for REST services (think of this as DB-Connected that  finds all your tables and proposes field configuration for you!) </li>
    <li>Mongo-Connected REST services </li>
    <li>HTTP Caching</li>
</ul>

<p>We would appreciate any feedback you can provide, either in the mailing lists, in issues, or via comments on associated pull requests.</p>

<p>Stay tuned!</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Apigility 1.0.0 Released!</title>
      <pubDate>Wed, 07 May 2014 15:00:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/apigility-1-0-0-released.html</link>
      <guid>http://framework.zend.com/blog/apigility-1-0-0-released.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<img src="/images/ag-hero.png" style="display: block; margin-left: auto; margin-right: auto; max-width: 100%" alt="Apigility">

<p>We're happy to announce the immediate availability of Apigility 1.0.0!</p>

<ul>
    <li><a href="http://apigility.org/download">http://apigility.org/download</a></li>
</ul>

<p>Apigility is the world's easiest way to create robust, well-formed, documented, and secure APIs.</p>

<p>We've noticed that web development has fundamentally shifted over the past few years. Server side applications that return heavy loads of HTML markup are waning; instead APIs are driving the web. APIs are being used to enable inter-division data exchange. APIs are being used as the building blocks for web applications -- allowing user interface experts the flexibility to change the look and feel of a website with no intervention from the server-side application developers. APIs are driving and empowering the mobile web, allowing creation of both native mobile applications and mobile web applications.</p>

<p>Apigility exists to allow <em>you</em> to expose <em>your</em> business logic as an API.</p><h2>Opinionated</h2>

<p>APIs are not just about tossing around some JSON or XML. They require a ton of architectural decisions every step of the way as you implement the API:</p>

<ul>
    <li>How will you handle HTTP method negotiation?<br /></li>
    <li>How will you handle content negotiation?<br /></li>
    <li>How will you handle authentication?<br /></li>
    <li>How will you handle authorization?<br /></li>
    <li>How will you handle input validation?<br /></li>
    <li>What representation format will you use?<br /></li>
    <li>How will you represent errors?<br /></li>
    <li>How will you document your API?</li>
</ul>

<p>Most of these questions have no single, correct answer. Many standards, proposals, and drafts exist for all aspects of APIs. As a developer, you have to wade through them and choose which you will use, and how you will put them together.</p>

<p>In short, when developing an API, you often spend an equal or greater amount of time developing the architecture for the API as you would writing the code you want to expose in the first place.</p>

<p>Apigility is opinionated <em>for you</em>, and provides a flexible and robust engine that answers these questions:</p>

<ul>
    <li><a href="http://tools.ietf.org/html/draft-kelly-json-hal-06">application/hal+json</a> is<br /> used for the representation format (but you can add your own representations<br /> if you really want).<br /></li>
    <li><a href="http://tools.ietf.org/html/draft-nottingham-http-problem-06">application/problem+json</a><br /> is used for representing errors.<br /></li>
    <li>HTTP method negotiation is handled early, returning appropriate response<br /> status codes and headers when invalid methods are detected. Support for<br /> <code>OPTIONS</code> requests is built in.<br /></li>
    <li>Content negotiation is handled early, returning appropriate response<br /> status codes and headers when we cannot return an appropriate representation,<br /> or cannot understand the data provided to the application.<br /></li>
    <li>Authentication is handled early, returning appropriate response<br /> status codes and headers when invalid credentials are detected. We provide<br /> HTTP Basic, HTTP Digest, and OAuth2 support out-of-the-box, but provide a<br /> flexible, event-driven system for implementing or integrating your own<br /> authentication systems.<br /></li>
    <li>Authorization is handled early, returning appropriate response<br /> status codes and headers when access is not allowed. We provide an ACL-based<br /> system that can be easily extended to provide user-specific permissions as<br /> well as an event-driven system for implementing or integrating your own<br /> authorization systems if needed.<br /></li>
    <li>Input validation is handled early, returning appropriate response status codes<br /> and error messages when invalid data is detected.<br /></li>
    <li>Documentation is provided out of the box. We provide HTML, JSON, and<br /> <a href="https://helloreverb.com/developers/swagger">Swagger</a> representations; we<br /> anticipate adding more in the future. Documentation is generated automatically<br /> from your API configuration, and you are able to add descriptions and more<br /> detail as desired.</li>
</ul>

<p>We make decisions so you don't have to. However, you'll note that we've created flexibility so that if <em>you</em> have an opinion, you can integrate it!</p>

<h2>Interface with your API</h2>

<p>Apigility is not just an engine. Apigility also provides a web-based Admin UI to allow you to quickly create and modify your API and services, set up authentication, create authorization rules, set up validations for incoming data, and write document.</p>

<img src="/images/apigility-1.0.0-dashboard.png" style="display: block; margin-left: auto; margin-right: auto; max-width: 100%" alt="Apigility Dashboard">

<p>The Admin UI is built using <a href="https://angularjs.org/">AngularJS</a>, and is backed by... an API! (We're taking the &quot;API First&quot; mantra very seriously!)</p>

<h2>Get Started in Seconds</h2>

<p>You can install Apigility in seconds; execute the following command in your shell:</p>

<pre class="console"><code>$ curl -sS http://apigility.org/install | php</code></pre>

<p>or, if you don't have <a href="http://curl.haxx.se/">curl</a> installed, use the PHP interpreter itself:</p>

<pre><code>$ php -r &quot;readfile(&#39;http://apigility.org/install&#39;);&quot; | php</code></pre>

<h2>Deploy Anywhere</h2>

<p>Apigility is built on top of Zend Framework 2, and has tools to ensure that the Admin UI is only present in development mode. As such, you can deploy Apigility anywhere you normally deploy PHP applications: a local server, your web host provider, or the cloud.</p>

<p>We provide a tool, <a href="https://github.com/zfcampus/zf-deploy">ZFDeploy</a>, to aid in creating deployment packages, including Zend Server ZPK files.</p>

<h2>Modular</h2>

<p>Apigility consists of more than a dozen Zend Framework 2 modules, each doing one specific task in the workflow. As such, you can mix and match these modules in your own ZF2 applications, or even <a href="http://apigility.org/documentation/recipes/apigility-in-an-existing-zf2-application">add Apigility to an existing application</a>.</p>

<h2>The Future</h2>

<p>Reaching 1.0 is a huge milestone -- but it's not the end of the road!</p>

<p>We already have a number of great features waiting in the wings for a 1.1 release: Doctrine-Connected services, Database Autodiscovery, Mongo-Connected services, and HTTP Caching.</p>

<p>What will <em>you</em> build today?</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Apigility 1.0.0beta3 Released!</title>
      <pubDate>Wed, 30 Apr 2014 20:30:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/apigility-1-0-0beta3-released.html</link>
      <guid>http://framework.zend.com/blog/apigility-1-0-0beta3-released.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>We are pleased to announce the immediate availability of Apigility 1.0.0beta3!</p>

<ul>
    <li><a href="http://apigility.org/download">http://apigility.org/download</a></li>
</ul>

<p>This is our third -- and likely last! -- beta release of Apigility! The features in this release are mainly around stabilization.</p><h2>Deployment and Console</h2>

<p>Most of the work we've performed since beta2 was on <a href="https://github.com/zfcampus/zf-deploy">zf-deploy</a>, our packaging/deployment tool. We made the following changes:</p>

<ul>
    <li>First, the tool can now be used both within an application, as well as a  standalone <a href="http://php.net/phar">phar</a> file. When used as a standalone phar  file, you can now self update it with the <code>self-update</code> command; this will  check <a href="https://packages.zendframework.com/">https://packages.zendframework.com/</a> for any new versions, and, if found,  do an &quot;in-place&quot; update of the tool. (Note: the library we use that provides  this functionality often emits PHP fatal errors; in practice, however, we've  noticed that the process works even when such errors are reported.) </li>
    <li>Second, we were not happy with the argument handling we were using, nor with  the strong coupling of console argument parsing logic with the logic consuming  the arguments. We built a small microframework around <code>Zend\Console</code>'s  <code>RouteMatcher</code> subcomponent that provides more flexibility around argument  handling, and are now shipping this in the module  <a href="https://github.com/zfcampus/zf-console">zf-console</a>.</li>
</ul>

<p>In addition to these architectural changes, we also implemented two new features in the tool:</p>

<ul>
    <li>You can specify a directory with the &quot;local&quot; configuration you want to use in  the deployment package via the <code>--configs</code> argument. </li>
    <li>You can specify a directory containing the ZPK skeleton you wish to use when  creating a ZPK (Zend Server deployment package); this directory should contain  a <code>deployment.xml</code> and any scripts you will be using.</li>
</ul>

<p>With these changes, we feel that <code>zf-deploy</code> is ready for inclusion in a stable Apigility release!</p>

<h2>Documentation Updates</h2>

<p>We've received a number of documentation improvements since beta2, and added a few documents as well.</p>

<p>In particular:</p>

<ul>
    <li>An error was spotted in the &quot;HAL for RPC services&quot; recipe that made the code  unusable. </li>
    <li>We've documented how to use the Zend Server SDK to deploy ZPK packages. </li>
    <li>We've added a recipe for adding Apigility modules to an existing Zend  Framework 2 application. </li>
    <li>We've added documentation on the new <code>zf-console</code> module.</li>
</ul>

<h2>Beta3 Updates</h2>

<p>In addition to the deployment and console tooling, we made the following changes:</p>

<ul>
    <li>We updated the <code>SendResponse</code> listener in <code>zf-api-problem</code> to merge in any  headers set in the application response object before sending the API Problem  response. This ensures that any previously set headers are also set -- solving  several issues observed when using third-party modules for Cross Origin  Resource Sharing (CORS), as well as HTTP authentication. </li>
    <li>The storage adapters we ship with <code>zf-oauth</code> now both allow you to specify  configuration via a <code>storage_settings</code> key; this change allows you to specify  custom tables for both the PDO and Mongo adapters. </li>
    <li>We've updated the &quot;api.enable&quot; service to ensure it works with current  versions of Apigility (and no longer raises errors!). </li>
    <li>We no longer display a resource class in the &quot;Source Code&quot; tab of a service if  a corresponding class does not exist (e.g., DB-Connected resource classes are  virtual services). </li>
    <li>We've added the option to recursively delete the directory for a service to  the Admin API; the Admin UI now presents a checkbox with this option. </li>
    <li>We've added the option to delete an entire API. By default, this only removes  the API's module from application configuration; however, you have the option  to recursively delete the API module as well (once again presented in the  Admin UI via a checkbox). </li>
    <li>We now generate factories for RPC controllers and REST resource classes when  creating new services. This simplifies the story for dependency injection of  these classes.</li>
</ul>

<h2>Roadmap</h2>

<p>At this time, we feel Apigility has become very stable, and that we have addressed the most pressing usability issues. We anticipate issuing a stable release next week (week of 5 May 2014).</p>
<p>As noted in previous beta announcements, reaching stability is only the first step, however! Features such as &quot;Doctrine-Connected&quot;, &quot;Mongo-Connected&quot;, and &quot;DB-Autodiscovery&quot; REST services are already either implemented or will be soon, and we will be debuting these in a 1.1 version in the very near future.</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Apigility 1.0.0beta2 Released!</title>
      <pubDate>Wed, 16 Apr 2014 18:30:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/apigility-1-0-0beta2-released.html</link>
      <guid>http://framework.zend.com/blog/apigility-1-0-0beta2-released.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>We are pleased to announce the immediate availability of Apigility 1.0.0beta2!</p>

<ul>
    <li><a href="http://apigility.org/download">http://apigility.org/download</a></li>
</ul>

<p>This is our second beta release of Apigility, and introduces extensive 
documentation, Admin UI performance improvements, and deployment tools!</p><h2>Documentation</h2>

<p>The primary goal of the beta phase for the Zend Framework team is documenting the project. We've made enormous headway at this point, but we'll let <strong>you</strong> be the judge of that; <a href="http://apigility.org/documentation">visit the documentation yourself</a>!</p>

<p>Among topics covered:</p>

<ul>
    <li>A &quot;Getting Started&quot; guide, and a companion, &quot;REST Service Tutorial&quot;. </li>
    <li>An API Primer </li>
    <li>Chapters on Authentication/Authorization, Content Validation, and the  Documentation features. </li>
    <li>A module-by-module reference guide, detailing configuration options.</li>
</ul>

<h2>New Features</h2>

<p>While the beta cycle is primarily around stabilizing the API and Admin UI, we decided one new feature warranted inclusion in version 1: a packaging/deployment tool, <a href="https://github.com/zfcampus/zf-deploy">zf-deploy</a>.</p>

<p>This tool allows you to create packages from your Apigility -- or any ZF2 application -- for deployment. Formats supported include zip, tar, tgz, and zpk (the Zend Server deployment package format). We plan to integrate support for deploying zpk packages soon as well.</p>

<h2>Beta2 Updates</h2>

<p>Polishing, polishing, polishing was our mantra for beta2. This included incorporating user feedback, but also scrutinizing the UI and code for consistency issues.</p>

<h3>UI Updates</h3>

<p>Following beta1, we had a number of complaints about UI responsiveness, particularly around the &quot;Fields&quot; screen. We did some analysis of the UI, and a lot of work around dynamically loading and unloading DOM in the admin based on what should be visible. As a result, we were able to significantly improve responsiveness. There may be more work to do, but early reports indicate that the changes make the Admin UI usable in situations that previously crashed the browser.</p>

<p>In addition to the performance improvements, we made the following updates:</p>

<ul>
    <li><p>On the &quot;Authorizations&quot; screen for each API, if no authentication is currently  configured, we display a message to this effect, and link to the  authentication screen. Unfortunately, in beta1, that link was invalid; we've  fixed this.</p></li>
    <li><p>The &quot;Fields&quot; tab received a slight overhaul. We noticed that items with  toggles displayed &quot;Yes/No&quot; terminology, but &quot;On/Off&quot; for the actual form  input; these now use &quot;Yes/No&quot; verbiage consistently. The &quot;Help&quot; screen could  not be dismissed with the <code>&lt;Esc&gt;</code> key; it now can. Previously, when hitting  <code>&lt;Enter&gt;</code> from the &quot;Create New Field&quot; text input, it would raise the &quot;Help&quot;  screen; it now properly creates the new field. The &quot;Description&quot; field was  moved to the first option displayed for each field, to promote documentation  of fields. We also added a &quot;Validation Failure Message&quot; field to allow  specifying a unified error message on failed validation (vs. one or more per  validator); we also ensured that &quot;blanking&quot; out the data in this field will  remove any such message previously set. Finally, filters are now listed before  validators, to signal the order in which validation operations occur  (filtering/normalization occurs before validation).</p></li>
    <li><p>The &quot;Source Code&quot; tab was not properly generating links for files; we've fixed  this in beta2.</p></li>
</ul>

<h3>Engine Updates</h3>

<p>A few improvements were made to the API engine itself:</p>

<ul>
    <li><p>The <code>UnauthorizedListener</code> registered by the <code>zf-apigility</code> module was not  registering headers set by the <code>zf-mvc-auth</code> module, meaning that the  <code>WWW-Authenticate</code> header was not propagating. This has been corrected.</p></li>
    <li><p>We modified <code>ZF\ContentNegotiation\JsonModel</code> to check for <code>json_encode()</code>  errors, and to raise an exception when one is detected. This prevents  situations where an empty response is returned on inability to serialize to  JSON.</p></li>
    <li><p><code>zf-apigility-documentation-swagger</code> was not returning a <code>Content-Type</code> header  value of <code>application/vnd.swagger+json</code>; it now does.</p></li>
    <li><p>We fixed the bcrypt cost in <code>zf-oauth2</code> to use the defaults from <code>Zend\Crypt</code>.</p></li>
    <li><p>We updated the OAuth2 database schema in <code>zf-oauth2</code> to match that of the  upstream <a href="https://github.com/bshaffer/oauth2-server-php">oauth2-server-php package</a>.</p></li>
    <li><p>We now inject the <code>ZF\Rest\ResourceEvent</code> with the current MVC request object;  you can retrieve it from within your resource class using  <code>$this-&gt;getEvent()-&gt;getRequest()</code>. This will give you access to HTTP request  headers, query string arguments, etc.</p></li>
    <li><p>We no longer allow multiple &quot;self&quot; relational links in <code>zf-hal</code>.</p></li>
    <li><p>When specifying route parameters for a <code>zf-hal</code> metadata map, you can now use  a PHP callable as the value; <code>zf-hal</code> will invoke that callable with the  object for which a link is being generated in order to get the value for that  route parameter. This is particularly useful for deterimining identifiers for  parent resources.</p></li>
    <li><p>We moved the <code>zf-apiglity-welcome</code> requirement to be a development-only  requirement.</p></li>
</ul>

<h2>Roadmap</h2>

<p>We're excited to get a stable release of Apigility as soon as we possibly can. We feel that both the engine and Admin UI have stabilized significantly, and are targetting a stable release by the end of this month. <strong>During that time, we will be working primarily on additional documentation and critical bugfixes.</strong></p>

<p>As noted in the beta1 announcement, reaching stability is only the first step, however! We already have contributors making significant headway on features such as &quot;Doctrine-Connected&quot;, &quot;Mongo-Connected&quot;, and &quot;DB-Autodiscovery&quot; REST services, and we will be debuting these in a 1.1 version not long after we reach version 1.0. Stay tuned!</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Zend Framework 2.2.7 and 2.3.1 Released!</title>
      <pubDate>Tue, 15 Apr 2014 20:05:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/zend-framework-2-2-7-and-2-3-1-released.html</link>
      <guid>http://framework.zend.com/blog/zend-framework-2-2-7-and-2-3-1-released.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
    The Zend Framework community is pleased to announce the immediate availability
    of:
</p>

<ul>
    <li>Zend Framework <strong>2.2.7</strong></li>
    <li>Zend Framework <strong>2.3.1</strong></li>
</ul>

<ul>
    <li>
        <a href="/downloads/latest#ZF2">http://framework.zend.com/downloads/latest#ZF2</a>
    </li>
</ul>

<p>
    While these are scheduled maintenance releases, they also contain important security
    fixes; we strongly encourage users to upgrade.
</p><h2>Security Fixes</h2>

<p>
    One new security advisory has been made, and has been patched in both 2.2.7
    and 2.3.1.
</p>

<p>
    <a href="/security/advisory/ZF2014-03">ZF2014-03</a>, which mitigates 
    potential cross site scripting (XSS) vectors in multiple view helpers due 
    to inappropriate HTML attribute escaping. Many view helpers were using the 
    <kbd>escapeHtml()</kbd> view helper in order to escape HTML attributes. 
    This release patches them to use the <kbd>escapeHtmlAttr()</kbd> view 
    helper in these situations.  If you use form or navigation view helpers, or 
    "HTML element" view helpers (such as <kbd>gravatar()</kbd>, 
    <kbd>htmlFlash()</kbd>, <kbd>htmlPage()</kbd>, or 
    <kbd>htmlQuicktime()</kbd>), we recommend upgrading immediately.
</ul>

<p>
    For more information, follow the links above; if you use any of the components
    affected, please upgrade as soon as possible.
</p>

<h2>2.3.1</h2>

<p>
    In addition to the security fixes listed above, <strong>2.3.1</strong> 
    contains more than 80 bugfixes. In particular, a number of improvements were
    made to the behavior of nested form fieldsets and collection input filters 
    (which often go hand-in-hand).
</p>

<p>
    For the complete list of changes, <a href="/changelog/2.3.1">read the changelog</a>.
</p>

<h2>Thank You!</h2>

<p>
    As always, I'd like to thank the many contributors who made these
    releases possible! In particular, I'd like to thank the team at 
    <a href="https://roave.com">Roave</a>, who both reported and patched the
    ZF2014-03 security issue.
</p>

<h2>Roadmap</h2>

<p>
    Zend Framework 2 maintenance releases will happen bi-monthly, with the
    next one scheduled for mid-June, 2014. Releases may occur more frequently
    if security issues are reported.
</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Zend Framework 1.12.6 Released!</title>
      <pubDate>Tue, 15 Apr 2014 20:00:00 +0000</pubDate>
      <link>http://framework.zend.com/blog/zend-framework-1-12-6-released.html</link>
      <guid>http://framework.zend.com/blog/zend-framework-1-12-6-released.html</guid>
      <author>matthew@zend.com (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
    The Zend Framework community is pleased to announce the immediate availability
    of Zend Framework 1.12.6!
</p>

<ul>
    <li>
        <a href="/downloads/latest#ZF1">http://framework.zend.com/downloads/latest#ZF1</a>
    </li>
</ul>

<p>
    This is a maintenance release, and corrects a backwards compatibility break 
    introduced in 1.12.4.
</p><h2>Locale Updates</h2>

<p>
    Zend Framework 1.12.4 included an update to the <a href="//cldr.unicode.org/">CLDR</a>
    version shipped, bumping to version 24. Our previous CLDR version, however, was version 
    2.0 or newer -- a version over 3 years old at this point.
</p>

<p>
    The problem that arose is that <a href="https://github.com/akrabat/zf1/blob/0282f49112688f124373bcf915abb6227d050454/library/Zend/Locale.php#L38-L67">more 
    than two dozen locales have been renamed</a> in the official CLDR sources since then,
    and Zend Framework 1.12.4 shipped exactly what CLDR ships. As a result, users
    of those old locales suddenly found their applications no longer working, due to
    newly invalid locales.
</p>

<p>
    We have created some functionality in Zend Framework 1.12.6 to alias old locales to
    the equivalent new locale string, thus restoring backwards compatibility with versions
    prior to 1.12.4.
</p>

<h2>Tag Updates</h2>

<p>
    Prior to 1.12.4, we used Subversion for maintaining Zend Framework 1, and thus for tagging
    releases. Tags in Subversion, however, are branches, not snapshots, and our 
    build process at the time took advantage of that fact, for better or for worse: we would
    build the documentation, and then replace the documentation sources with the built artifacts;
    we would inject the ZF1 Extras repository; and we would inject the Dojo repository. As a
    result, the tag was not a 1:1 snapshot of the trunk at the time, but rather the result
    of a build process.
</p>

<p>
    This meant that if a user was using <kbd>svn:externals</kbd> and pinned to a tag, they would
    have the equivalent of our distribution packages -- in other words, access to the ZF1 Extras,
    Dojo, and documentation.
</p>

<p>
    With the <a href="http://framework.zend.com/blog/2013-03-27-zf1-git-migration.html">migration 
    to Git a year ago</a>, our build processes needed to change. Git does true tags: a tag is
    a snapshot of the branch at the revision when it was tagged. The result is that tags no
    longer contain the ZF1 Extras or documentation. Several users contacted us indicating
    this broke apps in which they were using <kbd>svn:externals</kbd>.
</p>

<p>
    We have decided we will <em>not</em> be returning to the previous tagging 
    methodology, as we much prefer keeping a separation between tags and the build artifacts.
    For those users who want to retain the same semantic structure of having the ZF1 Extras
    imported via <kbd>svn:externals</kbd> within the ZF1 library, you can still do that,
    by adding an additional line to your <kbd>svn:externals</kbd> property:
</p>

<pre><code>
vendor/ZendFramework https://github.com/zendframework/zf1/tags/{VERSION}
vendor/ZendFramework/extras https://github.com/zendframework/zf1-extras/tags/{VERSION}
</code></pre>

<p>
    (Modify the above to reflect your own project structure, and to inject the appropriate version
    string.)
</p>

<h2>Thank You!</h2>

<p>
    As always, I'd like to thank the many contributors who made this
    release possible! In particular, Rob Allen identified the various locales that
    needed updating, and submitted the locale aliasing solution.
</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
  </channel>
</rss>
