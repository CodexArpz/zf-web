<h2>AG2014-01: Potential Database Injection Vector in DB-Connected REST Services</h2>

<p>
    <a href="https://github.com/zfcampus/zf-apigility">zf-apigility</a> contains a class,
    <code>ZF\Apigility\DbConnectedResource</code>, used by all DB-Connected REST services for
    prototyping web services that write to a database table, or for simple CRUD-style web
    services.
</p>

<p>
    This class was correctly pulling data from the composed input filter, if any, for
    <code>create()</code> operations. However, it was not doing so for <code>update()</code>
    and <code>patch()</code> operations, leading to the potential for unfiltered data to
    make its way to the database.
<p>

<p>
    Note, however, that this is not a SQL injection vulnerability, as database updates
    were still using the underlying database abstraction layer. However, in cases where
    values are expected to be normalized, unfiltered versions could enter the database;
    additionally, if any data not matching existing database columns were provided, database
    errors could occur.
</p>


<h3>Action Taken</h3>

<p>
    Each of the <code>create()</code>, <code>update()</code>, and <code>patch()</code> operations
    in the <code>ZF\Apigility\DbConnectedResource</code> class were updated to always pull data from
    the composed input filter when present.
</p>

<p>
    The following releases contain the fixes:
</p>

<ul class="ul">
    <li>zf-apibility 1.0.2</li>
    <li>Apigility (zf-apigility-skeleton) 1.0.3</li>
</ul>

<h2>Other Information</h2>

<h3>Acknowledgments</h3>

<p>
    The Zend Framework team thanks the following for identifying the issues and 
    working with us to help protect its users:
</p>

<ul>
    <li>Stefano Torresi (<a href="https://github.com/stefanotorresi">github.com/stefanotorresi</a>) for reporting the issue.</li>
</ul>
