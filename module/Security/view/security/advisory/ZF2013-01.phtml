<h2>ZF2013-01: Route Parameter Injection Via Query String in Zend\Mvc</h2>

<p>
    In Zend Framework 2, <code>Zend\Mvc\Router\Http\Query</code> is used 
    primarily to allow appending query strings to URLs when assembled. However, 
    due to the fact that it captures any query parameters into the 
    <code>RouteMatch</code>, and the fact that <code>RouteMatch</code> 
    parameters are merged with any parent routes, this can lead to overriding 
    already captured routing parameters, bypassing constraints defined in the 
    parents.
</p>

<p>
    As an example, consider the following route definition:
</p>

<pre class="highlight">
array(
    'user' => array(
        'type' => 'segment',
        'options' => array(
            'route' => '/user/:key',
            'defaults' => array(
                'controller' => 'UserController',
                'action'     => 'show-action',
            ),
            'constraints' => array(
                'key' => '[a-z0-9]+',
            ),
        ),
        'child_routes' => array(
            'query' => array('type' => 'query'),
        ),
    ),
)
</pre>

<p>
    If the request URI was <code>/user/foo/?controller=SecretController&amp;key=invalid_value</code>,
    the <code>RouteMatch</code> returned after routing would contain the following:
</p>

<pre class="highlight">
array(
    'controller' => 'SecretController',
    'action'     => 'show-action',
    'key'        => 'invalid_value',
)
</pre>

<p>
    This would lead to execution of a different controller than intended, with a 
    value for the <code>key</code> parameter that bypassed the constraints outlined
    in the parent route.
</p>

<h3>Action Taken</h3>

<p>
    Zend Framework 2.1 introduced changes to the router implementation that now 
    allows passing both query string values and fragment values during URI 
    assembly, effectively obsoleting the original use case of the <code>Query</code>
    route. As an example, you can now do the following:
</p>

<pre class="highlight">
$url = $router->assemble(array(
    'name' => 'foo',
), array(
    'query' => array(
        'page' => 3,
        'sort' => 'DESC',
    ), 
    // or: 'query' => 'page=3&sort=DESC'
));

// via URL helper/plugin:
$rendererOrController->url('foo', array(), array('query' => $request->getQuery()));
</pre>

<p>
    As such, for versions 2.0.8 and 2.1.4, we have marked 
    <code>Zend\Mvc\Router\Http\Query</code> deprecated. Additionally, we have 
    modified the code in its <code>match()</code> method to no longer pass
    the query parameters to the <code>RouteMatch</code>, eliminating the 
    possibility of route parameter injection entirely.
</p>

<h3>Recommendations</h3>

<p>
    If you are using the <code>Query</code> route in Zend Framework 2, we 
    recommend upgrading to Zend Framework 2.0.8 or 2.1.4 immediately.
</p>

<h2>Other Information</h2>
<h3>Acknowledgments</h3>

<p>
    The Zend Framework team thanks the following for identifying the issues and 
    working with us to help protect its users:
</p>

<ul class="ul">
    <li><a href="https://github.com/codemagician">codemagician</a> for alerting us to the issue</li>
    <li>Ben Scholzen for providing the solution</li>
</ul>

<?php echo $this->render('security/policy'); ?>
