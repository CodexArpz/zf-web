<h2>ZF2013-02: Potential Information Disclosure and Insufficient Entropy 
    vulnerabilities in Zend\Math\Rand and Zend\Validate\Csrf Components</h2>

<p>
    In Zend Framework 2, the <code>Zend\Math\Rand</code> component generates 
    random bytes using the OpenSSL or Mcrypt extensions when available but will 
    otherwise use PHP's <code>mt_rand()</code> function as a fallback. All 
    outputs from <code>mt_rand()</code> are predictable for the same PHP 
    process if an attacker can brute force the seed used by the 
    Marsenne-Twister algorithm in a Seed Recovery Attack. This attack can be 
    successfully applied with minimum effort if the attacker has access to 
    either a random number from <code>mt_rand()</code> or a Session ID 
    generated without using additional entropy. This makes 
    <code>mt_rand()</code> unsuitable for generating non-trivial random bytes 
    since it has Insufficient Entropy to protect against brute force attacks on 
    the seed.
</p>

<p>
    The <code>Zend\Validate\Csrf</code> component generates CSRF tokens by SHA1 
    hashing a salt, random number possibly generated using 
    <code>mt_rand()</code> and a form name. Where the salt is known, an 
    attacker can brute force the SHA1 hash with minimum effort to discover the 
    random number when <code>mt_rand()</code> is utilised as a fallback to the 
    OpenSSL and Mcrypt extensions. This constitutes an Information Disclosure 
    where the recovered random number may itself be brute forced to recover the 
    seed value and predict the output of other <code>mt_rand()</code> calls for 
    the same PHP process.  This may potentially lead to vulnerabilities in 
    areas of an application where <code>mt_rand()</code> calls exist beyond the 
    scope of Zend Framework.
</p>

<h3>Action Taken</h3>

<p>
    Zend Framework have revised the <code>Zend\Math\Rand</code> component to replace the
    current <code>mt_rand()</code> fallback for OpenSSL/Mcrypt with Anthony Ferrara's
    <a href="https://github.com/ircmaxell/RandomLib">RandomLib</a>, incorporating an additional
    entropy source based on <a href="https://github.com/GeorgeArgyros/Secure-random-bytes-in-PHP">source code published by George Argyros</a>. The new
    fallback collects entropy from numerous sources other than PHP's internal seed
    mechanism and extracts random bytes from the resulting mixed entropy pool.
</p>

<h3>Recommendations</h3>

<p>
    If you are using either <code>Zend\Math\Rand</code> or 
    <code>Zend\Validate\Csrf</code>, do not have either the OpenSSL or Mcrypt 
    extensions installed in PHP, <em>and</em> are on a non-Unix-like system, we 
    recommend upgrading immediately to version 2.0.8 or 2.1.4.
</p>

<h2>Other Information</h2>
<h3>Acknowledgments</h3>

<p>
    The Zend Framework team thanks the following for identifying the issues and 
    working with us to help protect its users:
</p>

<ul class="ul">
    <li>PÃ¡draic Brady for identifying and reporting the issue, as well as providing a patch to resolve the issue</li>
    <li>Enrico Zimuel for collaborating on and reviewing the solution</li>
</ul>

<?php echo $this->render('security/policy'); ?>
