<h2>ZF2014-05: Anonymous authentication in ldap_bind() function of PHP, using null byte</h2>

<p>
    PHP's LDAP extension provides bindings to the C-based OpenLDAP library,
    including the <kbd>ldap_bind</kbd> function, to perform LDAP binds. The PHP-side function
    takes an LDAP connection object, username (DN), and password string as
    arguments, with its semantics being the same as the OpenLDAP <kbd>ldap_bind</kbd>
    function called with the <kbd>LDAP_AUTH_SIMPLE</kbd> method argument.
</p>

<p>
    PHP passes the PHP string arguments to the OpenLDAP C function - which expects
    C-style null-terminated strings - by passing a pointer to the PHP string's
    value data in memory. String values in PHP can contain arbitrary byte values,
    including the null character (byte value <kbd>0x00</kbd>). If an argument to PHP's
    <kbd>ldap_bind</kbd> contains such a null byte, no special action is taken, so from the
    OpenLDAP C <kbd>ldap_bind</kbd> function's point of view, such strings are truncated at
    the first null byte.
</p>

<p>
    Hence, an attacker can pass a string starting with a null byte as a password
    when authenticating to an application that uses PHP's <kbd>ldap_bind</kbd>. This will, in
    many cases, bypass the application's own check for a non-empty password (since
    the string is non-empty from PHP's perspective), but still appear to be empty
    to the OpenLDAP <kbd>ldap_bind</kbd> function, leading to an unauthenticated bind being
    performed against the application's intent. This allows an authentication bypass,
    as the attacker can login as any given user without needing to know their real
    LDAP password.
</p>

<p>
    We used the PHP function <kbd>ldap_bind()</kbd> in the <kbd>Zend\Ldap</kbd> 
    component of ZF2 and in the <kbd>Zend_Ldap</kbd> class of ZF1.
</p>

<h2>More Information</h2>

<p>
    This vulnerability was originally reported in the PHP manual:
</p>

<ul>
    <li><a href="http://php.net/manual/en/function.ldap-bind.php#73718">http://php.net/manual/en/function.ldap-bind.php#73718</a></li>
</ul>

<p>
    and in more general detail in the following report:
</p>

<ul>
    <li><a href="https://net.educause.edu/ir/library/pdf/csd4875.pdf">https://net.educause.edu/ir/library/pdf/csd4875.pdf</a></li>
</ul>

<p>
    The vulnerability was patched within PHP's LDAP extension starting with PHP 
    5.5.12 and PHP 5.4.28. Prior versions remain vulnerable, which is what the
    patch associated with this advisory attempts addresses.
</p>

<h3>Action Taken</h3>

<p>We filtered the password input, removing null bytes, using the following code:</p>

<pre class="highlight">
$password = str_replace("\0", '', $password);
</pre>

<p>This action sanitizes the password, preventing anonymous authentication.</p>

<p>The following releases contain the fixes:</p>

<ul>
    <li>Zend Framework 1.12.9</li>
    <li>Zend Framework 2.2.8</li>
    <li>Zend Framework 2.3.3</li>
</ul>

<p>
    If you are using an affected version of PHP, and utilizing the LDAP functionality
    from Zend Framework, we highly recommend upgrading immediately.
</p>

<h3>Acknowledgments</h3>

<p>
    The Zend Framework team thanks the following for identifying the issues and 
    working with us to help protect its users:
</p>

<ul>
    <li>Matthew Daley, who discovered and reported the issue in <kbd>Zend\Ldap</kbd> component of ZF2;</li>
    <li>Enrico Zimuel, who provided the patch.</li>
</ul>

<?php echo $this->render('security/policy'); ?>
