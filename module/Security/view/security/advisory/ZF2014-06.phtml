<h2>ZF2014-06: SQL injection vector when manually quoting values for sqlsrv extension, using null byte</h2>

<p>
    The sqlsrv PHP extension, which provides the ability to connect to Microsoft SQL Server
    from PHP, does not provide a built-in quoting mechanism for manually quoting values to
    pass via SQL queries; developers are encouraged to use prepared statements. Zend Framework
    provides quoting mechanisms via Zend Framework 1's <kbd>Zend_Db_Adapter_Sqlsrv</kbd> and
    Zend Framework 2's <kbd>Zend\Db\Adapter\Platform\SqlServer</kbd> classes; these traditionally
    use the recommended "double single quote" (<kbd>''</kbd>) as quoting delimiters.
</p>

<p>
    SQL Server treats null bytes in a query as a string terminator, allowing an 
    attacker to add arbitrary SQL following a null byte, and thus create a SQL injection.
</p>

<p>
    Developers using the relevant <kbd>PDO_Sqlsrv</kbd> adapter in any version 
    of Zend Framework are <em>not</em> vulnerable to this attack, as PDO provides
    a native quoting mechanism that prevents the attack vector.
</p>

<h3>Action Taken</h3>

<p>
    When quoting values for SQL server, we now pass them to PHP's <kbd>addcslashes</kbd>
    function to sanitize and properly quote null bytes:
</p>

<pre class="highlight">
$value = addcslashes($value, "\000\032");
</pre>

<p>This action quotes null bytes, preventing SQL injection vectors.</p>

<p>The following releases contain the fixes:</p>

<ul>
    <li>Zend Framework 1.12.9</li>
    <li>Zend Framework 2.2.8</li>
    <li>Zend Framework 2.3.3</li>
</ul>

<p>
    If you are using an affected version of PHP, and utilizing the sqlsrv PHP extensio
    within Zend Framework, we highly recommend upgrading immediately.
</p>

<h3>Acknowledgments</h3>

<p>
    The Zend Framework team thanks the following for identifying the issues and 
    working with us to help protect its users:
</p>

<ul>
    <li>Jonas Sandstr√∂m, who discovered and reported the issue against the <kbd>Zend_Db_Adapter_Sqlsrv</kbd> component of ZF1;</li>
    <li>Matthew Weier O'Phinney, who provided the patch.</li>
</ul>

<?php echo $this->render('security/policy'); ?>
