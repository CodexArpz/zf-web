<h2>ZF2013-03: SQL injection due to execution of platform-specific SQL containing interpolations</h2>

<p>
    The <code>Zend\Db</code> component in Zend Framework 2 provides platform
    abstraction, which is used in particular for SQL abstraction. Two methods
    defined in the platform interface, <code>quoteValue()</code> and 
    <code>quoteValueList()</code>, allow users to manually quote values for
    creating SQL statements; these are in turn consumed by aspects of the
    SQL abstraction platform, including <code>Zend\Db\Sql\Sql::getSqlStringForSqlObject()</code>,
    and the <code>getSqlString()</code> method provided in a number of 
    classes in the <code>Zend\Db\Sql</code> namespace.
</p>

<p>
    While these methods are primarily intended for debugging and logging purposes,
    developers can use them to produce SQL that is then passed to the driver to
    execute. Due to a flaw in how the <code>quoteValue()</code> and 
    <code>quoteValueList()</code> methods were written, this can lead to potential
    SQL injection.
</p>

<p>
    The offending code is located in any of the <code>Zend\Db\Adapter\Platform*</code>
    objects, particularly the <code>quoteValue()</code> and <code>quoteValueList()</code> methods. These 
    methods did not take into account most of the possible escapable characters 
    that would need to be escaped when attempting to create a quoted value for 
    interpolation into a SQL string. Moreover, these methods did value quoting 
    without extension level coordination which, when available, takes 
    character-sets into account when quoting.
</p>

<h3>Action Taken</h3>

<p>
    We have made the following changes to the Platform objects:
</p>

<ul>
    <li>Platform objects now accept the Driver as an optional parameter. This 
    allows <code>quoteValue()</code> to use the driver level quoting/escaping mechanism to 
    provide an "as safe as possible" value.</li>

    <li>If a driver level quoting/escaping function is not available, the 
    Platform object will throw an <code>E_USER_NOTICE</code>.</li>

    <li>A new API was introduced for the use cases that need quoting without 
    the possibility of a warning being triggered: 
    <code>Zend\Db\Adapter\Platform\PlatformInterface::quoteTrustedValue()</code>.</li>
</ul>

<h3>Recommendations</h3>

<p>
    You are only affected by this as an issue if you directly consume one of the 
    following API's in your code, <strong>and</strong> execute the results with
    your database adapter:
</p>

<ul>
    <li><code>Zend\Db\Adapter\Platform*::quoteValue()</code></li>
    <li><code>Zend\Db\Adapter\Platform*::quoteValueList()</code></li>
    <li><code>Zend\Db\Sql\Sql->getSqlStringForSqlObject()</code></li>
    <li><code>Zend\Db\Sql\Select->getSqlString()</code></li>
    <li><code>Zend\Db\Sql\Insert->getSqlString()</code></li>
    <li><code>Zend\Db\Sql\Update->getSqlString()</code></li>
    <li><code>Zend\Db\Sql\Delete->getSqlString()</code></li>
</ul>

<p>
    ZF2's <code>Zend\Db</code> and other components that utilize 
    <code>Zend\Db</code> never directly rely on interpolation of values into SQL 
    strings. This means that unless you find any of the above calls in your code, 
    or any code that effectively calls <code>quoteValue()</code>, this issue does 
    not affect you.
</p>

<p>
    If you do, however, we recommend immediately upgrading to either version 
    2.0.8 or 2.1.4.
</p>

<p>
    While this advice can be found in many places, it is always worth 
    repeating: you should never rely on interpolation of values into SQL 
    strings; always use prepared statements / parameterization / extension 
    specific value binding.
</p>

<h2>Other Information</h2>
<h3>Acknowledgments</h3>

<p>
    The Zend Framework team thanks the following for identifying the issues and 
    working with us to help protect its users:
</p>

<ul class="ul">
    <li><a href="https://github.com/tux-rampage">Axel H.</a> for alerting us to the issue</li>
    <li>Ralph Schindler for implementing a solution</li>
</ul>

<?php echo $this->render('security/policy'); ?>
