<h2>ZF-8106: Null values are transform in string(0) with StringTrim filter.</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2009-10-20T03:16:55.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-10-24T01:59:54.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.10.0 (27/Jan/10)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                thomas (thomas963)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Thomas Weidner (thomas)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Filter</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Hello,</p>

<p>(i already post this in wrong section, sorry : <a href="http://framework.zend.com/issues/browse/ZF-8099">http://framework.zend.com/issues/browse/ZF-8099</a>, and thanks for answer, but Zend_Filter_Null was proposed as solution but it is not an efficient resolution of the problem).</p>

<p>Null value are transformed in empty string when passing thrue the StringTrim filter (and maybe other escaper i didn't test).
This is problem,especially for database storing, where you need often to keep null type.
For instance if you need to differentiate null and empty string (and use booth type), after filtering you can not know if original data was null or empty sting as it goes out of the filter as empty string in all case. Even the new Zend_Filter_Null is useless in this case, as it just convert but is unable to know the original type.</p>

<p>The problem is in the 1.9.4 version (and 1.9.3 and maybe before...).
StringTrim should remove empty space before and after of the string, as intended, not transform null value in sring. It is a bug.
Or it should be named StringTrimAndNullToEmptyString filter ; )</p>

<p>How to recreate:</p>

<hr /><p>Zend_Loader::loadClass('Zend_Filter_Input');
$filters = array(
'*' =&gt; 'StringTrim' // try to comment and decomment this line
);</p>

<p>$validators = array(
'date' =&gt; array(array('Regex', '/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/'), 'allowEmpty' =&gt; true),
);</p>

<p>$datas['date'] = null;
$input = new Zend_Filter_Input($filters, $validators, $datas);</p>

<p>var_dump($datas); // here date is null, so ok.
$datas_valid = $input-&gt;getUnescaped(); // or getEscaped() change nothing
var_dump($datas_valid); // here date is string(0) or null, depending the comment or decomment of the stringtrim filter... should always be null !
// And for my application string(0) give me an SQL error as date can only be date format or null (no date given) comming from a web form.</p>

<hr /><p>Cheers,
Thomas</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2009-10-21T12:19:42.000+0000</p> 
        <div class="body">
            <p>And how do you come to the idea that "trim" does not return a string ?</p>

<p>StringTrim works exactly like PHP's "trim()" method except that it adds unicode behaviour.</p>

<p>A filter which is intented to return an string will always convert any input to string representation. And an empty string is the representation for a null input.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by thomas (thomas963) on 2009-10-22T03:31:04.000+0000</p> 
        <div class="body">
            <p>Hello,</p>

<p>Yes, trim() php function return string type.
So you are right StringTrim filter should send back a string.</p>

<p>A solution to my problem would be to create a new filter type, named StingOnlyTrim for exemple, so only the sting type are trimmed. Int or null value are not trimmed (as it is not needed for them). So depending case of use we could use StringTrim (if we want to have in all case String type in output) or StringOnlyTrim (if we want to have only the string type variable trimmed and keep the original data type of the variable).</p>

<p>Another solution would be to be able to filter depending the type of the variable:</p>

<p>$filters = array(
    '*' =&gt; Array('StringTrim', TYPE_CHAR); // we could have TYPE_ALL (by default), TYPE_CHAR, TYPE_INT, TYPE_NULL, etc. 
);</p>

<p>Just ideas ; )</p>

<p>Thanks. For me problem is resolve. If you think it is you can close it.</p>

<p>Cheers,
Thomas.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2009-10-24T01:58:08.000+0000</p> 
        <div class="body">
            <p>The correct solution would be simply to extend Zend_Filter_StringTrim when you are in need of additional behaviour which does not fall under the 80/20 rule from ZF.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2009-10-24T01:59:54.000+0000</p> 
        <div class="body">
            <p>Closing as Wont Fix.</p>

        </div>
    </div>
    </div>

