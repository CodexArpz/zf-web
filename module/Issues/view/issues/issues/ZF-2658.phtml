<h2>ZF-2658: More Flexible Mapping For Zend_Log_Writer_Db</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2008-02-14T15:17:21.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2011-03-26T17:22:07.000+0000</dd>

    <dt>Status:</dt>
    <dd>Postponed</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Eddo Rotman (karnaf)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Log</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>In my opinion, the mapping logic is too rigid.  If there is a mapping present, the insertion of log messages includes those fields <em>and only those fields</em> each and every time.  This produces undesired results when:</p>

<h1>New fields are added using the setEventItem method and there is no mapping for them.  These fields will never be inserted.</h1>

<h1>When fields are empty and must be inserted as NULL, insertion failure.  Since the fields are all named, these should just be skipped.</h1>

<h1>Fields that don't need to be mapped still must have a mapping entry, just so it is included ('message' =&gt; 'message').</h1>

<p>I think most people would use mapping as an overload of field names.  That would address all the issues above.  Fields that are not overloaded (name wise) would be inserted as is.  Something like the following:</p>

<p>Database (
  creation,
  priority,
  message
);</p>

<p>Mapping = array('creation' =&gt; 'timestamp');</p>

<pre class="highlight"><code>
if ($this-&gt;_columnMap === null) {
    $dataToInsert = $event;
} else {
    $dataToInsert = array();
    foreach ($this-&gt;_columnMap as $columnName =&gt; $fieldKey) {
        if (isset($event[$fieldKey])) { $dataToInsert[$columnName] = $event[$fieldKey]; }
        unset($event[$fieldKey]);
    }
    if (count($event)) {
        foreach ($event as $eventKey =&gt; $eventVal) {
            $dataToInsert[$eventKey] = $eventVal;
        }
    }
}
</code></pre>

<p>One final thought.  In my opinion, the mapping logic should be reversed.  So, instead of mapping database field names to log event items, it should be log event items mapped to database fields.  Its not really a big deal, because you can just flip the mapping array, but I think it is more intuitive.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2009-01-26T09:36:17.000+0000</p> 
        <div class="body">
            <p>This seems like a worthy change. Arthur, have you signed a CLA so that we can use the code above? Also, can you write the necessary unit tests and add the necessary tables to the test schema?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Arthur Kang (arthurkang3) on 2009-01-27T12:16:40.000+0000</p> 
        <div class="body">
            <p>I have not signed a CLA.  I will get that in.</p>

<p>I have no experience with unit tests.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2010-03-21T10:26:58.000+0000</p> 
        <div class="body">
            <p>Reassigned to component maintainer</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Beno√Æt Durand (intiilapa) on 2011-03-26T17:22:07.000+0000</p> 
        <div class="body">
            <p>@Arthur, You have not yet signed the CLA apparently.</p>

        </div>
    </div>
    </div>

