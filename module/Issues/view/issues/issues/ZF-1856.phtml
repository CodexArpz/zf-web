<h2>ZF-1856: Using subquery in from() is broken because of new schema logic</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2007-08-15T17:51:16.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2008-02-26T12:55:59.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.0.4 (26/Feb/08)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Bill Monkman (bmonkman)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Simon Mundy (peptolab)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Db_Select</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Using a subquery as the table argument in the from() call used to work fine, like so:</p>

<p>$select = $db-&gt;select();
$select-&gt;from("(select people.id from people)", "count(id)");</p>

<p>I know there are cleaner ways to get the same result, but this is a simplified version and in some cases it is necessary to do a select like this, for example when doing your own pagination you may want to put the sql from one query into a call like this to find out the number of rows returned from it.</p>

<p>When doing this, if the code in the table argument contains a period, the new schema code on line 358 in Select.php will break the query:</p>

<pre><code>    // Schema from table name overrides schema argument
    if (false !== strpos($tableName, '.')) {
        list($schema, $tableName) = explode('.', $tableName);
    }
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2007-08-16T13:30:51.000+0000</p> 
        <div class="body">
            <p>Assigned to Bill</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by julien PAULI (doctorrock83) on 2007-11-27T14:24:49.000+0000</p> 
        <div class="body">
            <p>Same behavior with subselect queries with Zend_Db_Select :</p>

<pre class="highlight"><code>
$db-&gt;select()
-&gt;from ('table1', array('t1_label'))
-&gt;joinInner(
      array('T2' =&gt; new Zend_Db_Expr (
         '('.
         $db-&gt;select()
         -&gt;from('table2', array('t2_label'))
         -&gt;where('condition')
         .')'
      )),
      'table1.t2_id = T2.t2_id',
      array('t2_label')
)
</code></pre>

<p>breaks it as well :</p>

<p><code>(SELECT
``table2&lt;pre class="highlight"&gt;&lt;code&gt;.&lt;/code&gt;&lt;/pre&gt;t2_label``
FROM ``table2``
WHERE condition)</code></p>

<p>patch could be :</p>

<pre class="highlight"><code>
  if (!$tableName instanceof Zend_Db_Expr &amp;&amp; false !== strpos($tableName, '.')) {
            list($schema, $tableName) = explode('.', $tableName);
        }
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Simon Mundy (peptolab) on 2008-01-18T21:38:57.000+0000</p> 
        <div class="body">
            <p>This use-case can be avoided by using the Zend_Db_Expr object to enclose the subquery.</p>

        </div>
    </div>
    </div>

