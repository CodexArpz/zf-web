<h2>ZF2-562: Zend\Log\Write\Db creates non-existing database table columns</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2012-09-15T18:45:25.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-10-08T20:14:29.000+0000</dd>

    <dt>Status:</dt>
    <dd>Closed</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Matthew Weier O'Phinney (matthew)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend\Log</li>
            <li>zend\log</li>
            <li>zend\log\writer\db</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Zend\Log\Writer\Db::eventIntoColumn creates new non-existing database table columns when $value is an array.</p>

<pre class="highlight"><code>
protected function eventIntoColumn(array $event)
{
    if (empty($event)) {
        return array();
    }

    $data = array();
    foreach ($event as $name =&gt; $value) {
        if (is_array($value)) {
            foreach ($value as $key =&gt; $subvalue) {
                // New database table columns are being created here...
                $data[$name . $this-&gt;separator . $key] = $subvalue;
            }
        } else {
            $data[$name] = $value;
        }
    }
    return $data;
}</code></pre>

<p>This is highly illogical, because now this PHP-script decides what database table columns should exist. When an array with other keys is used all of a sudden the script generates new, other database columns and eventually make the entire script fail again because of a database error due to non-existing columns. The user should define the columns to be used and the script should never add non-existing database tabel columns on its own.</p>

<p>More logical would be to define a way to handle arrays with something like json_encode() or serialize(). The most important thing is that it does not break the logging like it does now, so when $value is an array it <em>must always</em> return a string, because that is the only type of variable you can write to a database table column.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Ralph Schindler (ralph) on 2012-10-08T20:14:29.000+0000</p> 
        <div class="body">
            <p>This issue has been closed on Jira and moved to GitHub for issue tracking.  To continue following the resolution of this issues, please visit: <a href="https://github.com/zendframework/zf2/issues/2588">https://github.com/zendframework/zf2/issues/2588</a></p>

        </div>
    </div>
    </div>

