<h2>ZF-8296: createRow leads to Zend_Db_Table_Row_Abstract init method call prior to row data being set</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2009-11-12T12:54:06.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2010-11-18T14:46:39.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Ralph Schindler (ralph)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Db_Table</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>If you call createRow() from a table instance the order of execution inside that method means that the row is instantiated with no data, which calls the rows' init() method.  I can certainly see using the row data in the init method (as my case brought to light).  Simply setting the config['data'] property prior to instantiating the row object solves this problem.</p>

<p>OLD CODE: (starts at line 1440 of Zend/Db/Table/Abstract.php)
        $config = array(
            'table'    =&gt; $this,
            'data'     =&gt; $defaults,
            'readOnly' =&gt; false,
            'stored'   =&gt; false
        );</p>

<pre><code>    if (!class_exists($this-&gt;_rowClass)) {
        require_once 'Zend/Loader.php';
        Zend_Loader::loadClass($this-&gt;_rowClass);
    }
    $row = new $this-&gt;_rowClass($config);
    $row-&gt;setFromArray($data);
    return $row;
</code></pre>

<p>NEW (FIXED) CODE:
        foreach($defaults as $k =&gt; $v)
        {
            if(array_key_exists($k, $data)) $defaults[$k] = $data[$k];
        }</p>

<pre><code>    $config = array(
        'table'    =&gt; $this,
        'data'     =&gt; $defaults,
        'readOnly' =&gt; false,
        'stored'   =&gt; false
    );

    $rowClass = $this-&gt;getRowClass();
    if (!class_exists($rowClass)) {
        require_once 'Zend/Loader.php';
        Zend_Loader::loadClass($rowClass);
    }
    $row = new $rowClass($config);
    return $row;
</code></pre>

<p>The only change I made was to ensure that any data set in the incoming data array got inserted into the data of the row prior to it's initialization and subsequent init() method call.  I first noticed this issue in 1.9.0, but it probably existed prior to that.  I did make sure that the issue persisted through 1.9.5.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Ralph Schindler (ralph) on 2010-11-18T14:46:39.000+0000</p> 
        <div class="body">
            <p>This is by design.  createRow() is creating an un-attached row object, $data is then used to populate the row object after it has been created.  This is why at the end of createRow() you see setFromArray($data).</p>

<p>If you are using the same Row type as with a rowset, init() can be sure that the values in the row object have come from the database.  With createRow() they will not be there b/c the row is not yet stored.</p>

<p>I am closing this as not-an-issue, but perhaps you want to open a feature request. Or discuss what you are attempting to do on the mailing list.</p>

<p>-ralph</p>

        </div>
    </div>
    </div>

