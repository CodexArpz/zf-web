<h2>ZF-7907: Current view helper strategy does not work with namespaced classes</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2009-09-21T05:50:53.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-11-20T21:38:01.000+0000</dd>

    <dt>Status:</dt>
    <dd>Open</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
        None
                    </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_View</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-7350">ZF-7350</a></li>
            <li><a href="/issues/browse/ZF-8205">ZF-8205</a></li>
            <li><a href="/issues/browse/ZF-9604">ZF-9604</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>This class cannot be used as a view helper since the main method is treated as a constructor. The possibility of using a direct() method should be provided.</p>

<p>namespace NakedPhp\Mvc\View\Helper;
use NakedPhp\Metadata\NakedObject;
class DisplayObject extends \Zend_View_Helper_Abstract
{
    public function __construct()
    {
    }
    public function displayObject()
    {
        return '';
    }
}</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Giorgio Sironi (giorgiosironi) on 2009-09-21T05:57:39.000+0000</p> 
        <div class="body">
            <p>Workaround: use a __call method instead.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Raphael Dehousse (thymus) on 2010-07-15T00:58:46.000+0000</p> 
        <div class="body">
            <p>Hello,</p>

<p>For this, I overload Zend_View_Abstract to add in the __call method</p>

<pre class="highlight"><code>
// call the helper method
if ( method_exists('direct', $helper) ) {
    $name = 'direct';
}
return call_user_func_array(
    array($helper, $name),
    $args
);
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Raphael Dehousse (thymus) on 2010-07-15T01:53:00.000+0000</p> 
        <div class="body">
            <p>Error in my previous comment because Zend_View_Helper_Abstract has an empty "direct" method</p>

<pre class="highlight"><code>
if ( method_exists($helper, $name) ) {
    $methodName = $name;
} else {
    $methodName = 'direct';
}

return call_user_func_array(array($helper, $methodName), $args);
</code></pre>

<p>is working for me in 1.10.6 :)</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Steven Rosato (ratius) on 2010-09-03T06:35:31.000+0000</p> 
        <div class="body">
            <p>As far as I am concerned, implementing the direct() function with required arguments will fail with a fatal error such as:</p>

<pre class="highlight"><code>
public function direct($key, $namespace = 'default',
        $returnModel = null, array $args = array())
{
    $modelContainer = \Zend_Controller_Front::getInstance()
        -&gt;getParam('bootstrap')
        -&gt;getResource('ModelContainer');

     return $modelContainer-&gt;getModel($key, $namespace, $returnModel, $args);
}
</code></pre>

<pre class="highlight"><code>Fatal error: Declaration of Majisti\View\Helper\Model::direct() 
must be compatible with that of Zend_View_Helper_Interface::direct()</code></pre>

<p>I have used Raph's overloading strategy, but with the function name 'helper' instead, though this would still forbid anyone to have a Helper named Helper, but that would be kind of unintuitive.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2010-09-03T06:50:41.000+0000</p> 
        <div class="body">
            <p>We've run into this in ZF2 already. The solution is that all arguments <em>must</em> be optional, and then you perform checks for required arguments as the first part of the body.</p>

<p>That said, we're likely moving to a slightly different paradigm for ZF2 anyways: you will retrieve your helper object from a broker, and simply call the methods you want:</p>

<pre class="highlight"><code>
echo $broker-&gt;load('display-object')-&gt;render($key, $namespace);
</code></pre>

<p>This is slightly more verbose, but also (a) faster (__call(), since it often uses call_user_func_array() internally, is around 6X slower than directly calling a method), (b) more explicit, and thus easier to understand (many newcomers do not understand where to find methods like "form()" and "headTitle()" -- the helper system is hard to grasp immediately), and (c) more portable (we can build the broker into other templating solutions easily).</p>

<p>I'm not sure if we can easily accommodate namespaced helpers in ZF1, to be honest.</p>

        </div>
    </div>
    </div>

