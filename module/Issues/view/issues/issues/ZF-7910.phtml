<h2>ZF-7910: Element::getDecorator result differs after Element::getDecorators call</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2009-09-21T08:13:49.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2011-05-30T21:21:57.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Anselm FÃ¶hr (anselm)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Bart McLeod (mcleod@spaceweb.nl)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Form</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Trying to call getDecorator with the full decorator name is not working until we call getDecorators() first:</p>

<p>$e = new Zend_Form_Element_Text("test");
$x = $e-&gt;getDecorator("Zend_Form_Decorator_Description");
// $x is false</p>

<p>$e = new Zend_Form_Element_Text("test");
$e-&gt;getDecorators();
$x = $e-&gt;getDecorator("Zend_Form_Decorator_Description");
// $x is the decorator</p>

<p>However, calling getDecorator("Description") returns the right decorator in both cases.
I am not exactly sure if this behaviour is intended, at least it is very confusing.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Bart McLeod (mcleod@spaceweb.nl) on 2011-05-23T22:12:29.000+0000</p> 
        <div class="body">
            <p>This behavior is by design. The decorator plugins are lazy loaded. That means they are loaded based on how the plugin loader for the decorator is configured by the user or by default. The loading mechanism works with the short name and the prefix. Together with the path, these form a valid class to load. If a full class name is provided there is simply no point in trying to match it against a shortname, therefore the lazy loading process will not be invoked on such a call. After getDecorators() has been called, all decorators are loaded as instances and will be registered by their full name. From that moment on, you can get them by their full name. You can also register your own decorator instances by their full name. Default decorators are registered by their shortname and can only be retrieved by there shortname, unless they have already been loaded. You can override them, by providing a path and a prefix and make sure a decorator with the same shortname, such as 'Errors' can be found on that path with that prefix. This explains that lazy loading has to have taken place, before you can retrieve a decorator that was registered as a string only, by its fullname. The fullname will in fact only be known when the stack of prefix paths has been searched down far enough to find a matching decorator.</p>

        </div>
    </div>
    </div>

