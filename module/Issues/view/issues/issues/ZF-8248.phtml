<h2>ZF-8248: Disturbing lack of validation in Example 38.7. - Database Storage -  DbStorage extends Zend_OpenId_Consumer_Storage</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Docs:  Improvement</dd>

    <dt>Created:</dt>
    <dd>2009-11-07T20:01:22.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-11-19T16:11:04.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.9.6 (24/Nov/09)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                jw (ronny stalker)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Dmitry Stogov (dmitry)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_OpenId</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>I must admit I am not wholly familiar with either Zend_Db or Zend_OpenId, but the code examples in Example 38.7. Database Storage
worry me because they just seem to trust the incoming data so much.</p>

<h2>e.g</h2>

<p>public function delAssociation($url)
    {
        $table = $this-&gt;_association_table;
        $this-&gt;_db-&gt;query("delete from $table where url = '$url'");
        return true;
    }</p>

<hr /><p>I think it would be wise to mention somewhere in the docs how we know that $url is not going to carry an SQL injection attack so that paranoid folk like me don't get anxious when reading it.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2009-11-19T16:11:03.000+0000</p> 
        <div class="body">
            <p>All documentation examined for bad security and update; fixes committed to trunk and 1.9 release branch.</p>

        </div>
    </div>
    </div>

