<h2>ZF-11240: Zend_Form + Session + create_function</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2011-03-29T00:29:29.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-03-13T19:10:12.000+0000</dd>

    <dt>Status:</dt>
    <dd>Closed</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                John Wallverb (john.wallverb)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Adam Lundrigan (adamlundrigan)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Form</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Zend_Form cannot be stored in session and reused later, because Zend_Form_Element loadDeafult decorators is using:</p>

<p>$getId = create_function('$decorator', 'return $decorator-&gt;getElement()-&gt;getId() . "-element";');</p>

<p>and anonymous lambda functions cannot be stored in session, on next render of form fetched from session we will see the following code:</p>

<p></p>

<p>It would be also good to use call_user_func instead of $val<a href="$this">'callback'</a>; as it wont accept static methods of a class to be passed (in Zend_Form_Element_HtmlTag)</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Martin PÃ¤rtel (mpartel) on 2011-05-10T15:34:29.000+0000</p> 
        <div class="body">
            <p>This also breaks serializing forms for caching etc. Maybe implement __sleep().</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Adam Lundrigan (adamlundrigan) on 2012-03-13T19:10:11.000+0000</p> 
        <div class="body">
            <p>A possible workaround has been provided.  {{Zend_Form}} itself is not designed to be ported around via sessions - you should transport the data instead and populate a new instance on the other end.</p>

        </div>
    </div>
    </div>

