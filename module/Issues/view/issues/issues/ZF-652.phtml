<h2>ZF-652: Incomplete matching of ISO 8601 (and possibly others)</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2006-12-14T22:42:33.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2007-07-05T14:43:34.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>0.7.0 (18/Jan/07)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Thomas Weidner (thomas)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Date</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>The Zend_Date matching of ISO 8601 does not match the specification.</p>

<p>As noted on this <a href="http://www.iso.org/iso/en/prods-services/popstds/datesandtime.html">summery page</a> on the ISO website,</p>

<p>{quote}
The standard has provisions for:
(1)     the omission of components representing smaller units (seconds, minutes), where such precision is not needed,
(2)     the addition of a decimal fraction to the smallest time unit where higher precision is needed.
{quote}</p>

<p>Item 1 refers to all units except years, in decreasing order of importance.  2006-12-25 is just as valid as 2006-12-25T00:00:00, or 2006-12.</p>

<p>See also the <a href="http://en.wikipedia.org/wiki/ISO_8601#General_principles">Wikipedia entry</a>, which also says that both hyphens and colons are optional.</p>

<p>As a result, the regular expression is much too strict:</p>

<pre class="highlight"><code>
$result = preg_match('/\d{4}-\d{2}-\d{2}[T\s]{1}\d{2}:\d{2}:\d{2}/', $date, $match);
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2006-12-15T04:24:56.000+0000</p> 
        <div class="body">
            <p>The complete ISO8601 standard will never be supported.</p>

<p>Problems on parsing ISO8601 are for example :</p>

<p>"200612"</p>

<p>could be interpreted as 12th June 2020
or December 2006
or 2 Jannuar 2006
or day 12 of the year 2006</p>

<p>Also ISO 8601 defines a week per month
200605W2
This is also not possible to supportable for now.</p>

<p>ISO8601 is meant to give support for dates which are normally used within sql databases.
For now only complete dates are supported.
Means Date and Time like given through MYSQL or MSSQL.</p>

<p>If only time is needed just use TIMES instead of ISO8601
If only date is needed just use DATES instead of ISO8601</p>

<p>If you have a ISO8601 date and know the format you can also use the 
getDate function from Zend_Locale_Format which accepts format patterns.</p>

<p>It will be integrated within Zend_Date later on to accept any known date.
But not for the first release.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2006-12-17T16:52:11.000+0000</p> 
        <div class="body">
            <p>Support for additional ISO 8601 formats were added. 80-90% of the ISO standard are now supported.</p>

<p>Not supported are 
 - only parts of date (f.e. year without month, use getDate instead)
 - only parts of time (f.e. no second, use getDate instead)
 - fractional seconds
 - format week (use getDate instead)
 - format dayofyear (use getDate instead)</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Ratzloff (mratzloff) on 2006-12-18T12:17:23.000+0000</p> 
        <div class="body">
            <p>If no hyphens are used, "200612" should be interpreted as December 2006.  Leading zeros are always required, and I think it is reasonable to require "YYYY" dates.  The ordinal date of  January 12, 2006 would be 2006-012 or 2006012.  Ordinal dates are detectable because they are the only allowed values that have just seven numeric characters (without a "W").  I would also say drop support for leading hyphens, as they can cause confusion.  Leading hyphens are commonly used to represent BCE dates.</p>

<p>For Zend_Scheduler, which is partially dependent on Zend_Date (and is essentially complete but may or may not be accepted into the framework), users can specify both earliest and latest allowable date-times to run.  They do this in the form of the string, which can be as specific as they need:</p>

<p>2006-12
2006-12-25
2006-12-25T00
2006-12-25T00:00</p>

<p>I cannot predict what form they will use exactly.  The problem is that if I then decided to parse it, I would be adding a lot of unrelated parsing code to cover the area of ISO 8601 that Zend_Date does not cover—i.e., parts of date.  Also, I need a timestamp in return, which I suppose I could create from Zend_Locale_Format if I knew the exact format that would be used but which would be easier to just parse on my own.  And it seems like the domain of Zend_Locale_Format should just be, well, formatting (cosmetic things, like order of items, etc.).</p>

<p>I could also require all dates in complete ISO 8601 format (YYYY-MM-DDTHH:MM:SS), which is the case now, but not all users are familiar with the full standard, and most people specifying this would only be concerned with dates, not times.  However, the option for times should not be disallowed, either.</p>

<p>I know it sounds like I'm saying to drop support for this or that feature while supporting the one I want, but the standard isn't perfect and imposing some reasonable limits (four-digit dates, no leading hyphens) would make parsing a lot less problematic.  Partial date support, however, is one of the most significant aspects of the standard, and I can guarantee that other people will ask for it later.  It seems like you're really close as it is with the series of regular expressions you've added.</p>

<p>Thanks for your time working on this, I appreciate it.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2006-12-18T13:08:17.000+0000</p> 
        <div class="body">
            <p>Exactly the useage you asked for is for what Zend_Locale_Format was written.
It does not "cosmetic things"... it normalizes or localizes input and output.</p>

<p>The "ordering" you expected to see is a automatic correction which Zend_Locale_Format can do when expected inputs are impossible. For example a month greater then 12.</p>

<p>Partitial formats can also be parsed using the following example:</p>

<p>$value = Zend_Locale_Format::getDate('2004-10','YYYY-MM-ddThh:mm:ss');
print_r($value);
// ourputs year =&gt; 2004, month =&gt; 10</p>

<p>Then you will get an array with the proper content.
All you will then have to do is create a date object and fill the missing values with 0 or 1.</p>

<p>Even if the customer does the following the date is parsed correct
$value = Zend_Locale_Format::getDate('20-2004-10','YYYY-MM-ddThh:mm:ss');
print_r($value);
// ourputs year =&gt; 2004, month =&gt; 10, day =&gt; 20</p>

<p>If this is not enough for you I would say that the user has to give a Zend_Date object to you so you can be sure the entered date is proper.</p>

<p>Btw:
Leading hypens must be supported, because Zend_Date was designed also for useage of BCE dates. It can calculate unlimited dates. Even more then 64bit timestamps.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Ratzloff (mratzloff) on 2006-12-18T13:25:32.000+0000</p> 
        <div class="body">
            <p>Thanks, Thomas.  I'll look at Zend_Locale_Format::getDate() in more detail.  Your examples helped—it's not always apparent from looking at the code exactly how it is intended to work.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2006-12-18T13:43:07.000+0000</p> 
        <div class="body">
            <p>That's why I wrote the docu ;-)</p>

        </div>
    </div>
    </div>

