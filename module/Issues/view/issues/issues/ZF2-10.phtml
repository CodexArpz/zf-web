<h2>ZF2-10: iterating over a Zend_Config</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2009-03-23T11:57:59.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-10-08T20:15:38.000+0000</dd>

    <dt>Status:</dt>
    <dd>Closed</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                meugen (meugen)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Ben Scholzen (dasprid)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend\Config</li>
            <li>zf-crteam-padraic</li>
            <li>zf-crteam-priority</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-7772">ZF-7772</a></li>
            <li><a href="/issues/browse/ZF-7010">ZF-7010</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>There are two xml-files.</p>

<pre class="highlight"><code>
&lt;?xml version="1.0" encoding="utf-8" ?&gt;
</code></pre>

<p>and</p>

<pre class="highlight"><code>
&lt;?xml version="1.0" encoding="utf-8" ?&gt;
</code></pre>

<p>and the sample code:</p>

<pre class="highlight"><code>
&lt;?php
    require_once 'Zend/Config.php';
    require_once 'Zend/Config/Xml.php';
    
    $config = new Zend_config_xml('/path/to/config.xml');
    foreach ($config-&gt;files-&gt;file as $value)
        echo 'id: '.$value-&gt;id.'<br />location: '.
            htmlspecialchars($value-&gt;location).'';
?&gt;
</code></pre>

<p>If the {{/path/to/config.xml}} to substitute {{config1.xml}}, then everything works correctly. But if you substitute {{config2.xml}} error</p>

<pre class="highlight"><code>
Notice: Trying to get property of non-object in D:\www\index.php on line 7
</code></pre>

<p>How can I iterate all items {{file}}, if their number is not known in advance (one or more than one)?</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Rob Allen (rob) on 2009-04-05T12:04:41.000+0000</p> 
        <div class="body">
            <p>Can't fix at Zend_Config level. Workaround is to use UTF8 files without a BOM marker.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Rob Allen (rob) on 2009-04-05T12:12:32.000+0000</p> 
        <div class="body">
            <p>(Closed wrong issue!)</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Rob Allen (rob) on 2009-04-05T12:19:40.000+0000</p> 
        <div class="body">
            <p>I'm not sure there's any way to resolve this issue due to the other than creating a dummy key to force an array:</p>

<pre class="highlight"><code>
&lt;?xml version="1.0" encoding="utf-8" ?&gt;
</code></pre>

<p>might work, but don't forget to test for id being null.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Patrick van Dissel (tdm) on 2009-09-03T00:56:22.000+0000</p> 
        <div class="body">
            <p>This issue also exists when using the toArray() method of Zend_Config.
The problem is that you just want the array to ALWAYS have the same layout.
Config files tent to grow and be extended, just like XML files.</p>

<p>In my opinion the Zend_Config API should work the same as the of SimpleXml, here two extended examples and their output:
h2. Using SimpleXML</p>

<pre class="highlight"><code>
&lt;?php
// Files with single file element
$xmlString1 = &lt;&lt;indexindex.html
XML;

// Files with multiple file elements
$xmlString2 = &lt;&lt;indexindex.htmlindex2index2.html
XML;

echo "Files with single file element, looping files-&gt;file:\n";
$xml1 = new SimpleXMLElement($xmlString1);
foreach ($xml1-&gt;files-&gt;file as $file) {
    var_dump($file);
    printf("%s: %s\n", 'id', $file-&gt;id);
    printf("%s: %s\n", 'localtion', $file-&gt;location);
}
echo "Files with single file element, looping files-&gt;file-&gt;id:\n";
foreach ($xml1-&gt;files-&gt;file-&gt;id as $id) {
    var_dump($id);
    printf("%s: %s\n", 'id', $id);
}

echo "Files with multiple file elements, looping files-&gt;file:\n";
$xml2 = new SimpleXMLElement($xmlString2);
foreach ($xml2-&gt;files-&gt;file as $file) {
    var_dump($file);
    printf("%s: %s\n", 'id', $file-&gt;id);
    printf("%s: %s\n", 'localtion', $file-&gt;location);
}
echo "Files with multiple file elements, looping files-&gt;file-&gt;id:\n";
foreach ($xml2-&gt;files-&gt;file-&gt;id as $id) {
    var_dump($id);
    printf("%s: %s\n", 'id', $id);
}
</code></pre>

<pre class="literal">
Files with single file element, looping files-&gt;file:
object(SimpleXMLElement)#3 (2) {
  ["id"]=&gt;
  string(5) "index"
  ["location"]=&gt;
  string(10) "index.html"
}
id: index
localtion: index.html
Files with single file element, looping files-&gt;file-&gt;id:
object(SimpleXMLElement)#2 (1) {
  [0]=&gt;
  string(5) "index"
}
id: index
Files with multiple file elements, looping files-&gt;file:
object(SimpleXMLElement)#6 (2) {
  ["id"]=&gt;
  string(5) "index"
  ["location"]=&gt;
  string(10) "index.html"
}
id: index
localtion: index.html
object(SimpleXMLElement)#3 (2) {
  ["id"]=&gt;
  string(6) "index2"
  ["location"]=&gt;
  string(11) "index2.html"
}
id: index2
localtion: index2.html
Files with multiple file elements, looping files-&gt;file-&gt;id:
object(SimpleXMLElement)#4 (1) {
  [0]=&gt;
  string(5) "index"
}
id: index
</pre>

<p>h2. Using Zend_Config_Xml
<em>possibly a global Zend_Config or other Zend_Config</em>* types issue, I have not tested that_</p>

<pre class="highlight"><code>
&lt;?php
set_include_path(
    get_include_path()
    . PATH_SEPARATOR . 'library/'
);

require_once 'Zend/Loader/Autoloader.php';
Zend_Loader_Autoloader::getInstance()-&gt;setFallbackAutoloader(true);

// Files with single file element
$xmlString1 = &lt;&lt;indexindex.html
XML;

// Files with multiple file elements
$xmlString2 = &lt;&lt;indexindex.htmlindex2index2.html
XML;

echo "Files with single file element, looping files-&gt;file:\n";
$xml1 = new Zend_Config_Xml($xmlString1);
foreach ($xml1-&gt;files-&gt;file as $file) {
    var_dump($file);
    printf("%s: %s\n", 'id', $file-&gt;id);
    printf("%s: %s\n", 'localtion', $file-&gt;location);
}
echo "Files with single file element, looping files-&gt;file-&gt;id:\n";
foreach ($xml1-&gt;files-&gt;file-&gt;id as $id) {
    var_dump($id);
    printf("%s: %s\n", 'id', $id);
}

echo "Files with multiple file elements, looping files-&gt;file:\n";
$xml2 = new Zend_Config_Xml($xmlString2);
foreach ($xml2-&gt;files-&gt;file as $file) {
    var_dump($file);
    printf("%s: %s\n", 'id', $file-&gt;id);
    printf("%s: %s\n", 'localtion', $file-&gt;location);
}
echo "Files with multiple file elements, looping files-&gt;file-&gt;id:\n";
foreach ($xml2-&gt;files-&gt;file-&gt;id as $id) {
    var_dump($id);
    printf("%s: %s\n", 'id', $id);
}
</code></pre>

<pre class="literal">
Files with single file element, looping files-&gt;file:
string(5) "index"
<br /><b>Notice</b>:  Trying to get property of non-object in <b>D:\www\htdocs\dev\config\config.php</b> on line <b>44</b><br />
id: 
<br /><b>Notice</b>:  Trying to get property of non-object in <b>D:\www\htdocs\dev\config\config.php</b> on line <b>45</b><br />

localtion: 
string(10) "index.html"
<br /><b>Notice</b>:  Trying to get property of non-object in <b>D:\www\htdocs\dev\config\config.php</b> on line <b>44</b><br />
id: 
<br /><b>Notice</b>:  Trying to get property of non-object in <b>D:\www\htdocs\dev\config\config.php</b> on line <b>45</b><br />

localtion: 
Files with single file element, looping files-&gt;file-&gt;id:
<br /><b>Warning</b>:  Invalid argument supplied for foreach() in <b>D:\www\htdocs\dev\config\config.php</b> on line <b>48</b><br />
Files with multiple file elements, looping files-&gt;file:
object(Zend_Config)#9 (8) {
  ["_allowModifications:protected"]=&gt;
  bool(false)
  ["_index:protected"]=&gt;
  int(0)
  ["_count:protected"]=&gt;
  int(2)
  ["_data:protected"]=&gt;
  array(2) {
    ["id"]=&gt;
    string(5) "index"
    ["location"]=&gt;
    string(10) "index.html"
  }
  ["_skipNextIteration:protected"]=&gt;
  NULL
  ["_loadedSection:protected"]=&gt;
  NULL
  ["_extends:protected"]=&gt;
  array(0) {
  }
  ["_loadFileErrorStr:protected"]=&gt;
  NULL
}
id: index
localtion: index.html
object(Zend_Config)#11 (8) {
  ["_allowModifications:protected"]=&gt;
  bool(false)
  ["_index:protected"]=&gt;
  int(0)
  ["_count:protected"]=&gt;
  int(2)
  ["_data:protected"]=&gt;
  array(2) {
    ["id"]=&gt;
    string(6) "index2"
    ["location"]=&gt;
    string(11) "index2.html"
  }
  ["_skipNextIteration:protected"]=&gt;
  NULL
  ["_loadedSection:protected"]=&gt;
  NULL
  ["_extends:protected"]=&gt;
  array(0) {
  }
  ["_loadFileErrorStr:protected"]=&gt;
  NULL
}
id: index2
localtion: index2.html
Files with multiple file elements, looping files-&gt;file-&gt;id:
<br /><b>Warning</b>:  Invalid argument supplied for foreach() in <b>D:\www\htdocs\dev\config\config.php</b> on line <b>61</b><br /></pre>

<p>{color:red}note:{color} Output rendered with PHP in error_reporting mode = E_ALL | E_STRICT</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Rob Allen (rob) on 2009-09-04T09:31:17.000+0000</p> 
        <div class="body">
            <p>I'm open to ideas on how to solve this without breaking backwards compatibility.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ben Scholzen (dasprid) on 2009-09-04T10:48:51.000+0000</p> 
        <div class="body">
            <p>You could just do:</p>

<pre class="highlight"><code>
$files = (isset($files-&gt;file[0]) ? $files-&gt;file : array($files-&gt;file));
</code></pre>

<p>And then just work with the $files variable as array. That works pretty well.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wim Godden (wimg) on 2011-04-28T14:25:29.000+0000</p> 
        <div class="body">
            <p>Although this is fixable, fixing it will always break backwards compatibility.
When a developer knows there's only 1 item, code such as this will be broken :</p>

<pre class="highlight"><code>
echo $config-&gt;files-&gt;file['id'];
</code></pre>

<p>Because it will in fact have to become :</p>

<pre class="highlight"><code>
$file = $config-&gt;files-&gt;file-&gt;toArray();
echo $file[0]['id'];
</code></pre>

<p>I would advise against modifying this for ZF 1.x - not sure how this will be handled in ZF 2, but introducing this backwards incompatibility is not a good idea in any case...</p>

<p>The only other option is to modify just the magic/fluent notation, but that will make things complicated and will cause inconsistency between fluent notation and array notation, which should be avoided.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Rob Allen (rob) on 2011-04-28T14:47:51.000+0000</p> 
        <div class="body">
            <p>One idea I have had is to introduce a children() method that always returns an iterator/array regardless of whether there is is one or many children:</p>

<pre class="highlight"><code>
$files = $config-&gt;files-&gt;children();
foreach ($files as $file) {
    echo $file-&gt;id;
}
</code></pre>

<p>Thoughts on this approach?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Rob Allen (rob) on 2011-05-27T02:30:37.000+0000</p> 
        <div class="body">
            <p>Moved to ZF2 as likely to involve a BC break.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Evan Coury (evan.pro) on 2012-07-21T00:46:22.000+0000</p> 
        <div class="body">
            <p>Approaching RC1, we need to decide if anything is going to be done about this.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ralph Schindler (ralph) on 2012-10-08T20:15:38.000+0000</p> 
        <div class="body">
            <p>This issue has been closed on Jira and moved to GitHub for issue tracking.  To continue following the resolution of this issues, please visit: <a href="https://github.com/zendframework/zf2/issues/2443">https://github.com/zendframework/zf2/issues/2443</a></p>

        </div>
    </div>
    </div>

