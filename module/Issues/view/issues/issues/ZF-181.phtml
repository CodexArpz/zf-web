<h2>ZF-181: date/time abstraction</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>New Feature</dd>

    <dt>Created:</dt>
    <dd>2006-07-01T09:43:50.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2011-08-17T03:42:35.000+0000</dd>

    <dt>Status:</dt>
    <dd>Postponed</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>Next Major Release ()</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Ralph Schindler (ralph)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Db</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>I like the database abstraction layer so far, but what really seems missing is proper date/time abstraction, and that's an area where database systems can be quite different and abstraction would be extremely welcome.</p>

<p>Bill: Sounds great!</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2006-11-13T15:22:39.000+0000</p> 
        <div class="body">
            <p>Changing fix version to 0.8.0.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-01-03T13:04:33.000+0000</p> 
        <div class="body">
            <p>Hi Ron, we are finally looking at this issue.  One new component we are developing for Zend Framework is called Zend_Date.  This is a very sophisticated class for handling dates, with special attention to locale support.</p>

<p>What I would suggest is that each Zend_Db_Adapter class have a method to convert an object of Zend_Date into a string in the format appropriate for a date literal in the respective RDBMS back-end.  For example, MySQL prefers 'YYYY-MM-DD HH:MM:SS' format.</p>

<p>This could either by done by the user using a static method:</p>

<pre class="highlight"><code>
$db-&gt;query('INSERT INTO myTable (dateColumn) VALUES (?)',
  Zend_Db_Adapter_Pdo_Mysql::dateString( $myZendDateObject ) );
</code></pre>

<p>Or else it could be done "automatically", such that the query() method discovers if any of its bound parameters are instances of the Zend_Date class, and converts them to the correct string format internally before sending them to the RDBMS back-end.</p>

<pre class="highlight"><code>
$db-&gt;query('INSERT INTO myTable (dateColumn) VALUES (?)',
  $myZendDateObject ); // Zend_Db takes care of the conversion
</code></pre>

<p>Both solution can coexist.  You can supply either a Zend_Date or a string for a bound parameter for a date column.  So if you don't like the way Zend_Db converts the Zend_Date object to a string, you can do it yourself and pass a string formatted how you like.</p>

<p>What Zend_Db cannot easily do is to enforce that Zend_Date objects are used only in contexts for SQL date columns.  To do this, Zend_Db would need to be able to evaluate the semantics of the SQL statements, and this is beyond the scope of Zend_Db.</p>

<p>Zend_Db can convert Zend_Date objects to a string representation, but it must assume that the user has used that value in an appropriate context.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-01-03T13:18:07.000+0000</p> 
        <div class="body">
            <p>Regarding fetching date values, a string date/time value could be used in the constructor of a Zend_Date object:</p>

<pre class="highlight"><code>
$result = $db-&gt;fetchAssoc('SELECT dateColumn FROM myTable');
$myZendDateObject = new Zend_Date( $result['dateColumn'] );
</code></pre>

<p>This solution works with all fetch modes, and both Zend_Db_Statement and Zend_Db_Row.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Joseph Wilk (joesniff) on 2007-02-07T04:18:20.000+0000</p> 
        <div class="body">
            <p>Might be missing something with the fetching code mentioned. I'm implementing a data abstraction layer and have adopted the approach for SQL statements mentioned.</p>

<p>My problem comes from how I take date results from the database and turn them into a Zend_Date.</p>

<p>As far as I see this the Zend_Date needs to know the format of the date in order to extract the values.
<code>
$myZendDateObject = new Zend_Date( $result['dateColumn'] );
</code></p>

<p>Even if you pass in a date format string ('dMy h:m:s') you are unable to accurately break a string date up. 
ie. 1112006 (is this 1st of 11th month of 11th of 1st month. Even with a format string you cannot identify this instance. Perhapes its perdantic point as you will not recieve a date of that format from the DB engine.</p>

<p>I've started to think going down the road of a MYSQL_Date, MSSQL_Date objects which I pass into Zend_Date and it can use the object to extract the values.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Joseph Wilk (joesniff) on 2007-02-07T07:40:01.000+0000</p> 
        <div class="body">
            <p>I've played around with the Zend_Date and note that my problem is that Zend_Date cannot tell what type the date is. You have to explicity pass the part (ie. Zend_Date::ISO_8601). Hence theres a need to tell Zend_Date what the Db is and what format its date is coming out as.</p>

<p>Something like</p>

<pre class="highlight"><code>
$result = $db-&gt;fetchAssoc('SELECT dateColumn FROM myTable');
$myZendDateObject = new Zend_Date( $result['dateColumn'] , $zendDbAdapter-&gt;getDbDateFormat());
</code></pre>

<p>Thats just one possible way of handling it.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-04-10T16:29:24.000+0000</p> 
        <div class="body">
            <p>Assigning to Darby.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Artur Jedlinski (nataniel) on 2007-09-28T00:09:29.000+0000</p> 
        <div class="body">
            <p>Even better solution than Joseph proposed would be:</p>

<pre class="highlight"><code>$result = $db-&gt;fetchAssoc('SELECT dateColumn FROM myTable');
$myZendDateObject = $db-&gt;createDate($result['dateColumn']);</code></pre>

<p>Then the Zend_Db_Adapter_Abstract would have:
```
(it can be just getDateFormat() instead of getDbDateFormat() as we are already in Db context).</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Joseph Wilk (joesniff) on 2007-09-28T09:27:40.000+0000</p> 
        <div class="body">
            <p>Much nicer than my example, but don't forget you need to have the option of having the locale</p>

<pre class="literal"> 
$result = $db-&gt;fetchAssoc('SELECT dateColumn FROM myTable');
$myZendDateObject = $db-&gt;createDate($result['dateColumn'], $locale);
</pre>

<p>Zend_Db_Adapter_Abstract</p>

<pre class="literal"> 
return new Zend_Date( $value , $this-&gt;getDbDateFormat(), $locale);
</pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2008-03-11T03:35:38.000+0000</p> 
        <div class="body">
            <p>Class will be reworked by Simon... sorry if I confused anybody. He has a better overview over the complete Db design, not only Zend_Db_Select and will help better than me.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-03-25T20:43:58.000+0000</p> 
        <div class="body">
            <p>Please categorize/fix as needed.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-03-25T22:06:44.000+0000</p> 
        <div class="body">
            <p>Resetting 'fix version priority' and 'fix version' to be re-evaluated for next release.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2009-01-06T14:25:52.000+0000</p> 
        <div class="body">
            <p>This issue has gone unaddressed for too long. I'm re-assigning to Ralph for re-evaluation and categorization.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ralph Schindler (ralph) on 2009-01-09T09:45:38.000+0000</p> 
        <div class="body">
            <p>Can someone please comment as to whether the Zend_Db_Expr and Zend_Date components solve this need?</p>

<p>If not, I will close this within 1 week.</p>

<p>Thanks,
Ralph</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2009-01-09T10:01:46.000+0000</p> 
        <div class="body">
            <p>There are two ways:</p>

<p>1.) Use ISO constants as described by Bill</p>

<pre class="highlight"><code>
$date = new Zend_Date($result['datecolumn'], Zend_Date::ISO_8601);
</code></pre>

<p>This supports all known default date formats from databases.</p>

<p>2.) Use timestamp as output</p>

<pre class="highlight"><code>
$date = new Zend_Date($result['timestampcolumn']);
</code></pre>

<p>This issue should be closed in favor of ZF-1978.</p>

<p>Greetings
The Zend_Date-Master :-)</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Cornelius Weiss (nelius) on 2009-01-09T10:06:32.000+0000</p> 
        <div class="body">
            <p>This issue has to be solved in the Zend_Db_Adapter, as it is DB brand dependend!</p>

<p>In any case, the adapters need to know the date(time) representations of the specific brand!</p>

<p>On one hand the adapter should autoconvert Zend_Dates into the required representation. In the case the DB supports connection Timezones, also the Timezone should be adjusted.</p>

<p>On the other hand in fetch mode, dates should optionally be converted to Zend_Dates by the adapter.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2009-01-09T10:21:45.000+0000</p> 
        <div class="body">
            <p>First: The adapter itself has not to know it's datetime representation.
Because there is no way for the adapter to change it's representation when the user give a wrong one.
Also when the adapter outputs a datetime representation Zend_Date has to know the representation and not the adapter.</p>

<p>Second: The adapter can impossibly autoconvert Zend_Dates into a representation nor can it handle Timezones. There is no way to get the actual used timezone of the database.</p>

<p>When Zend_Date uses a defined timezone it's on you to set the wished timezone on Zend_Date for the database. It can not be adjusted by the adapter.</p>

<p>Third: Components should be loosly coupled. It would be a bad practice to automatically return a Zend_Date object instead of a string or integer. It should be on the developer to give the wished column to Zend_Date.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ralph Schindler (ralph) on 2010-02-12T11:15:44.000+0000</p> 
        <div class="body">
            <p>Unassigned, and marking as postponed till 2.0</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ramon Henrique Ornelas (ramon) on 2011-01-09T18:08:16.000+0000</p> 
        <div class="body">
            <p>Reassigned to [~ralph]</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ramon Henrique Ornelas (ramon) on 2011-01-09T18:10:04.000+0000</p> 
        <div class="body">
            <p>Postponed to ZF2</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Handrus Stephan Nogueira (handrus) on 2011-08-17T03:42:35.000+0000</p> 
        <div class="body">
            <p>Any news at this one?</p>

        </div>
    </div>
    </div>

