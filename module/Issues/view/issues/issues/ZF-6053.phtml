<h2>ZF-6053: Add new string pad filter</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>New Feature</dd>

    <dt>Created:</dt>
    <dd>2009-03-18T02:15:11.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-12-07T15:09:52.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.10.0 (27/Jan/10)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Thomas Weidner (thomas)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Filter</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
        <li><a href="/issues/secure/attachment/11804/StringPad.php">StringPad.php</a></li>
        </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Class could be something like:</p>

&lt;?php

require_once 'Zend/Filter/Interface.php';

class Zend_Filter_StringPad implements Zend_Filter_Interface
{
    const TYPE_BOTH  = 'both';
    const TYPE_LEFT  = 'left';
    const TYPE_RIGHT = 'right';

    /**
     * Padding length
     * @var string
     */               
    protected $_length;
    /**
     * Padding characters
     * @var string
     */               
    protected $_string;
    /**
     * Padding type
     * @var string
     */               
    protected $_type;

    public function __construct($length, $string = ' ', $type = self::PADDING_RIGHT) {
        $this-&gt;setLength($length);
        $this-&gt;setString($string);
        $this-&gt;setType($type);
    }

    /**
     * Retrieve padding length
     *
     * @return int
     */
    public function getLength() {
        return $this-&gt;_length;
    }

    /**
     * Retrieve padding characters
     *
     * @return string
     */
    public function getString() {
        return $this-&gt;_string;
    }

    /**
     * Retrieve padding type
     *
     * @return string
     */
    public function getType() {
        return $this-&gt;_type;
    }

    /**
     * Set padding length
     *
     * @param  int $length
     * @return Zend_Filter_StringPad
     */
    public function setLength($length) {
        $this-&gt;_length = (int) $length;
        return $this;
    }

    /**
     * Set padding characters
     *
     * @param  string $string
     * @return Zend_Filter_StringPad
     */
    public function setString($string) {
        $this-&gt;_string = (string) $string;
        return $this;
    }

    /**
     * Set padding type
     *
     * @param  string $type
     * @return Zend_Filter_StringPad
     */
    public function setType($type) {
        switch ($type)
        {
            case self::TYPE_BOTH:
            case self::TYPE_LEFT:
            case self::TYPE_RIGHT:
                $this-&gt;_type = $type;
                break;
            default:
                throw new Zend_Filter_Exception('Padding type is invalid');
        }

        return $this;
    }

    /**
     * Converts our pad type consts to STR_PAD_* consts
     *
     * @return string
     */
    protected function _getType() {
        switch ($this-&gt;_type)
        {
            case self::TYPE_LEFT:
                return STR_PAD_LEFT;
            case self::TYPE_RIGHT:
                return STR_PAD_RIGHT;
            default:
                return STR_PAD_BOTH;
        }
    }

    /**
     * Pad a string to a certain length with another string
     *
     * @param  string $value
     * @return string
     */
    public function filter($value) {
        $pad = '';

        if (strlen($value) &gt; 0) {
            $pad = str_pad($value, $this-&gt;_length, $this-&gt;_string, $this-&gt;_getType());
        }

        return $pad;
    }
}

?&gt;

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Ben Scholzen (dasprid) on 2009-03-18T02:21:35.000+0000</p> 
        <div class="body">
            <p>If so, it should use Zend_Text_MultiByte::strPad() to allow correct padding of non-ascii strings.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Václav Vaník (dimmu) on 2009-03-18T02:55:52.000+0000</p> 
        <div class="body">
            <p>Multibyte-safe version of the Zend_Filter_StringPad</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Václav Vaník (dimmu) on 2009-03-18T02:57:47.000+0000</p> 
        <div class="body">
            <p>Oh Ben, you are right. I added the multibyte-safe version. I think it is not necessary to use Zend_Text_MultiByte class because of dependency.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2009-04-17T00:00:51.000+0000</p> 
        <div class="body">
            <p>A proposal where this feature is part of has been added to Wiki.
Waiting for Recommendation and Response from Zend since 15.April.2009</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2009-12-07T15:09:52.000+0000</p> 
        <div class="body">
            <p>Closing as "needs proposal".
The proposal is already written and waiting for acceptance.
See here for details and vote for it: <a href="http://framework.zend.com/wiki/display/ZFPROP/Zend_Filter_StringPad+-++Thomas+Weidner">http://framework.zend.com/wiki/display/…</a></p>

        </div>
    </div>
    </div>

