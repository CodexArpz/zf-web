<h2>ZF-7670: Handling &quot;Unknown Error&quot; from unregistered soap exceptions</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2009-08-24T04:09:11.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-11-20T21:37:45.000+0000</dd>

    <dt>Status:</dt>
    <dd>Open</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
        None
                    </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Soap_Server</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
        <li><a href="/issues/secure/attachment/12811/Zend_Soap_Server.patch">Zend_Soap_Server.patch</a></li>
        </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>When using the soap server in a large multifunctional application and an Exception occurs that is not found in registered Exception types It throw a rather unhelpful "Unknown Error".</p>

<p>I have had to edit the Fault method in Zend_Soap_Server. to allow the passing of non registered exceptions.</p>

<p>My patch is quick and dirty but it may be worth adding an option flag that can be set to allow the use of unregistered Exceptions.</p>

<p>method now reads as</p>

<pre class="highlight"><code>
    public function fault($fault = null, $code = "Receiver")
    {
        if ($fault instanceof Exception) {
            $class = get_class($fault);
            if (in_array($class, $this-&gt;_faultExceptions)) {
                $message = $fault-&gt;getMessage();
                $eCode   = $fault-&gt;getCode();
                $code    = empty($eCode) ? $code : $eCode;
            } else {
                $eCode   = $fault-&gt;getCode();
                $code    = empty($eCode) ? $code : $eCode;
                $message = 'Unregistered Exception: "'.$class.'" '.$fault-&gt;getMessage();
            }
        } elseif(is_string($fault)) {
            $message = $fault;
        } else {
            $message = 'Unknown error';
        }

        $allowedFaultModes = array(
            'VersionMismatch', 'MustUnderstand', 'DataEncodingUnknown',
            'Sender', 'Receiver', 'Server'
        );
        if(!in_array($code, $allowedFaultModes)) {
            $code = "Receiver";
        }

        return new SoapFault($code, $message);
    }
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Benjamin Eberlei (beberlei) on 2009-09-04T13:25:05.000+0000</p> 
        <div class="body">
            <p>Sounds like a maybe, i'll think about it</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Amr Mostafa (alienbrain) on 2009-09-06T01:11:51.000+0000</p> 
        <div class="body">
            <p>Perhaps one simple way of doing that is to check using {{instanceof}} instead of {{get_class}}. That way, if someone wants to allow all exceptions, they can register the base exception class {{Exception}}.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Curtis Corliss (ccorliss) on 2010-02-28T04:28:19.000+0000</p> 
        <div class="body">
            <p>I agree with the concept of registering exceptions with the soap server, as opposed to directly returning all exceptions as seen in the description code.  However - I don't think comparing the class name as a string is the best approach.  This can make error handling very cumbersome in more complex applications.</p>

<p>I have attached a patch to check if the thrown exception is an instance of a registered exception.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Curtis Corliss (ccorliss) on 2010-02-28T04:48:20.000+0000</p> 
        <div class="body">
            <p>Can you review this patch?  I don't have commit privileges yet.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Levi Stanley (niterain) on 2010-03-19T06:48:13.000+0000</p> 
        <div class="body">
            <p>Interesting, I was getting this error last month, ended up just using Zend's autodiscovery, and using php's soap server directly instead.  Since it gave more useful information.</p>

        </div>
    </div>
    </div>

