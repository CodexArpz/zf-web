<h2>ZF2-326: Zend\Code\Generator allows invalid class/method/property names</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2012-05-29T15:02:30.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-10-08T20:15:15.000+0000</dd>

    <dt>Status:</dt>
    <dd>Closed</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Ralph Schindler (ralph)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend\Code\Generator</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-7645">ZF-7645</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>[ Cloned from ZF-7645 ]</p>

<p>Zend_CodeGenerator does not prevent invalid PHP class/method/property names. For example, it allows names with spaces, names beginning with numbers, and names containing non-alphanumeric characters. The Zend_CodeGenerator component should not create invalid code...it should either filter the names into usable values or throw an exception. Preferrably it filters the names (and any other invalid code) into valid, usable values.</p>

<p>An excellent example is having spaces in class (or method, or property) names...a simple solution would be to setup an inflection filter on the class name to convert spaces to camelcase or underscore...and this could perhaps be configurable.</p>

<p>On names beginning with numbers, we could either remove the number automatically, or prepend the name with an underscore (less desired though...underscore indicates a protected method/property).</p>

<p>Non-alphanumeric characters could be easily stripped with an Alnum filter.</p>

<p>This does nothing to address actual code validation inside methods...such as correct syntax. This would ideally be validated as well, but that is probably a separate issue in itself. A Zend_Validate class would need to be written for PHP code, and then used inside Zend_CodeGenerator. Probably have to throw an exception on invalid code...could be difficult and unreliable to attempt to correct it (but who knows, maybe someone out there can pull it off). The class/method/property names would be pretty easy to auto correct, but it might turn out that the best solution is exceptions also.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Ralph Schindler (ralph) on 2012-10-08T20:15:15.000+0000</p> 
        <div class="body">
            <p>This issue has been closed on Jira and moved to GitHub for issue tracking.  To continue following the resolution of this issues, please visit: <a href="https://github.com/zendframework/zf2/issues/2485">https://github.com/zendframework/zf2/issues/2485</a></p>

        </div>
    </div>
    </div>

