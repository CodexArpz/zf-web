<h2>ZF-11217: Change class Zend_Crypt_DiffieHellman methods getGenerator and getPrime to return different types</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2011-03-23T15:24:30.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2011-03-24T15:57:16.000+0000</dd>

    <dt>Status:</dt>
    <dd>Open</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                PÃ¡draic Brady (padraic)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Crypt</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Currently Zend_Crypt_DiffieHellman getGenerator and getPrime methods look like this:</p>

<pre class="highlight"><code>
public function getPrime()
{
    if (!isset($this-&gt;_prime)) {
        require_once('Zend/Crypt/DiffieHellman/Exception.php');
        throw new Zend_Crypt_DiffieHellman_Exception('No prime number has been set');
    }
    return $this-&gt;_prime;
}

public function getGenerator()
{
    if (!isset($this-&gt;_generator)) {
        require_once('Zend/Crypt/DiffieHellman/Exception.php');
        throw new Zend_Crypt_DiffieHellman_Exception('No generator number has been set');
    }
    return $this-&gt;_generator;
}
</code></pre>

<p>The suggestion would be to slightly change these methods to look like this:</p>

<pre class="highlight"><code>
public function getPrime($type = self::NUMBER)
{
    if (!isset($this-&gt;_prime)) {
        require_once('Zend/Crypt/DiffieHellman/Exception.php');
        throw new Zend_Crypt_DiffieHellman_Exception('No prime number has been set');
    }
    if ($type == self::NUMBER) {
        return $this-&gt;_prime;
    } else if ($type == self::BTWOC) {
        return $this-&gt;_math-&gt;btwoc($this-&gt;_math-&gt;toBinary($this-&gt;_prime));
    }

    return $this-&gt;_math-&gt;toBinary($this-&gt;_prime);
}

public function getGenerator($type = self::NUMBER)
{
    if (!isset($this-&gt;_generator)) {
        require_once('Zend/Crypt/DiffieHellman/Exception.php');
        throw new Zend_Crypt_DiffieHellman_Exception('No generator number has been set');
    }
    if ($type == self::NUMBER) {
        return $this-&gt;_generator;
    } else if ($type == self::BTWOC) {
        return $this-&gt;_math-&gt;btwoc($this-&gt;_math-&gt;toBinary($this-&gt;_generator));
    }
    return $this-&gt;_math-&gt;toBinary($this-&gt;_generator);
}
</code></pre>

<p>This is because sometimes you need a different representation of these values, for example 
OpenID specification states:
    8.1.2.  Diffie-Hellman Request Parameters
    &lt;...&gt;
    * openid.dh_modulus
          Value: base64(btwoc(p))
    * openid.dh_gen
          Value: base64(btwoc(g))
p - DiffieHellman prime
g - DiffieHellman generator</p>

<p>as you may see it is required that prime and generator should be processed by btwoc function before passing them to base64_encode.</p>

<p>This would be a really handy improvement.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>
    <p class="comments">No comments to display</p>
    
</div>

