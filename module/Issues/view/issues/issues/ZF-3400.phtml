<h2>ZF-3400: Zend_Cache_Core::save() requires that $data be a string or that it be auto-serialized</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2008-06-05T16:01:50.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-01-09T19:21:13.000+0000</dd>

    <dt>Status:</dt>
    <dd>Closed</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>Next Major Release ()</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Marc Bennewitz (private) (mabe)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Cache</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-6169">ZF-6169</a></li>
            <li><a href="/issues/browse/ZF-11248">ZF-11248</a></li>
            <li><a href="/issues/browse/ZF-10596">ZF-10596</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Trying to store and integer or an object throws a fatal exception even when using a cache backend that supports a large range of values. Memcache and APC can store complete objects and they do not need to be pre-serialized for those backends. It is generally wise to wrap data in an object prior to storing it because otherwise arrays are mangled in certain circumstances.</p>

<p>Checking the validity of the passed dat should be the domain of the backend, not the front-end. The front-end has no way of knowing which data is valid for a particular backend. As mentioned, Memcache and APC have no trouble dealing with complex objects or arrays. In any case, storing an integer should be reasonable.</p>

<p>Lines 276-283 from Zend_Cache_Core:</p>

<pre class="highlight"><code> 
        if ($this-&gt;_options['automatic_serialization']) {
            // we need to serialize datas before storing them
            $data = serialize($data);
        } else {
            if (!is_string($data)) {
                Zend_Cache::throwException("Datas must be string or set automatic_serialization = true");
            }
        }
</code></pre>

<p>Test code to demonstrate the problem:</p>

<pre class="highlight"><code>
$frontendOptions = array(
    'caching' =&gt; true,
    'logging' =&gt; false,
    'lifetime' =&gt; 3600,
    'automatic_cleaning_factor' =&gt; 0,
);
$backendOptions = array(
    'servers' =&gt; array(array('host' =&gt; 'localhost', 'port' =&gt; 11211, 'persistent' =&gt; false)),
    'compression' =&gt; true,
);
$cache = Zend_Cache::factory('Core', 'Memcached', $frontendOptions, $backendOptions);
$cache-&gt;save(1, 'test_cache');
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Fabien MARTY (fab) on 2008-06-06T11:59:10.000+0000</p> 
        <div class="body">
            <p>Now, Zend_Cache stores strings and only strings, regardless of the backend</p>

<p>the automatic_serialization option is only an ease</p>

<p>I won't change this until a major rewrite</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Grady Kuhnline (heygrady2) on 2008-06-06T13:00:54.000+0000</p> 
        <div class="body">
            <p>I'm not sure this would take a major re-write.</p>

<p>I see a few valid options here:</p>

<h1>relax the current check that requires the data to be a string</h1>

<h1>* I really don't understand why this check currently exists</h1>

<h1>* The main reason I can see that this exists is for the Zend_Cache_Backend_File and Zend_Cache_Backend_Sqlite</h1>

<h1>*# Storing an integer without serialization will inadvertently change its type to string but will otherwise come through unharmed</h1>

<h1>*# Storing a non-serialized boolean will change it to an integer or an empty value</h1>

<h1>*# Storing an array will generate unexpected results</h1>

<h1>* Zend_Cache_Backend_File should probably be the place to do the autoserialization.</h1>

<h1>*# Each backend should be responsible for knowing how to format its own data</h1>

<h1>*# The File backend is dealing with the peculiarities of file_put_contents and file_get_contents</h1>

<h1>*# Other back-ends have their own restrictions</h1>

<h1>*# Most memory backends have no restrictions on data type, making unserialize unnecessary</h1>

<h1>add a validateData() method to the Zend_Cache_Backend_Interface</h1>

<h1>* This allows each backend to determine whether or not it is able to process the data be handed to it.</h1>

<h1>* It may also be reasonable to have a _prepareData() method which can dress up data being stored</h1>

<h1>** APC could [<a href="http://us3.php.net/manual/en/function.apc-store.php#73560%7Cwrap">http://us3.php.net/manual/en/â€¦</a> the data] in a stdClass object to protect it.</h1>

<h1>** File and SQLite could auto-serialize</h1>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Marc Bennewitz (private) (mabe) on 2009-06-22T23:40:32.000+0000</p> 
        <div class="body">
            <p>Hi,</p>

<p>I'm working on a Zend_Cache refactoring proposal.
This would implement serialization on backend side.</p>

<p>Please take a look and tell your opinions.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Fabien MARTY (fab) on 2009-07-17T11:03:33.000+0000</p> 
        <div class="body">
            <p>change Assignee because I'm inactive now</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Marc Bennewitz (private) (mabe) on 2012-01-09T19:21:13.000+0000</p> 
        <div class="body">
            <p>This won't be fixed in ZF1.
-&gt; fixed in ZF2-133</p>

        </div>
    </div>
    </div>

