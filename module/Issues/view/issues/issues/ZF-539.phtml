<h2>ZF-539: PostgreSQL: Leaving columns with default values out of inserts</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Patch</dd>

    <dt>Created:</dt>
    <dd>2006-11-11T03:13:10.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-01-23T10:04:03.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Ralph Schindler (ralph)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Db</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
        <li><a href="/issues/secure/attachment/10146/db_handle_defaults_and_pk.patch">db_handle_defaults_and_pk.patch</a></li>
            <li><a href="/issues/secure/attachment/10147/db_handle_defaults_table_row.patch">db_handle_defaults_table_row.patch</a></li>
            <li><a href="/issues/secure/attachment/10187/db_handle_defaults_table_row_2.patch">db_handle_defaults_table_row_2.patch</a></li>
            <li><a href="/issues/secure/attachment/10463/db_handle_defaults_table_row_3.patch">db_handle_defaults_table_row_3.patch</a></li>
        </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>When you have a column in PostgreSQL that is marked as NOT NULL and has a default value (e.g. a SERIAL primary key) and you try to insert a new row by using Zend_Db_Table-&gt;fetchNew() and calling save() on this row it will give you the following error:</p>

<pre class="literal">
Fatal error: Uncaught exception 'PDOException' with message 'SQLSTATE[23502]: 
Not null violation: 7 ERROR:  null value in column "" violates not-null constraint' 
in .../library/Zend/Db/Adapter/Abstract.php:171
Stack trace:
#0 .../library/Zend/Db/Adapter/Abstract.php(171): PDOStatement-&gt;execute()
#1 .../library/Zend/Db/Adapter/Abstract.php(242): Zend_Db_Adapter_Abstract-&gt;query('INSERT INTO ...', Array)
#2 .../library/Zend/Db/Table.php(235): Zend_Db_Adapter_Abstract-&gt;insert('', Array)
#3 .../library/Zend/Db/Table/Row.php(143): Zend_Db_Table-&gt;insert(Array)
#4 .../library/: Zend_Db_Table_Row-&gt;save()
</pre>

<p>Zend_Db tries to insert a row with NULL values for every column that you do not explicitly set, which the database considers a NOT NULL violation.  The enclosed patch fixes this by not including columns that have default values in the INSERT statement so that the table's default values are used unless explicitly set in the row object.  This patch also tries to guess primary key names so that one generally does not need to set those in Zend_Db_Table child classes.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Alex Adriaanse (alexadriaanse) on 2006-11-11T17:39:49.000+0000</p> 
        <div class="body">
            <p>The same thing can happen when using Zend_Db_Table-&gt;fetchRow() to fetch a row which does not exist.  This new patch (which is to be applied in addition to the previous patch) fixes this.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2006-11-13T15:04:14.000+0000</p> 
        <div class="body">
            <p>Assigning to Bill Karwin</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2006-11-13T15:22:38.000+0000</p> 
        <div class="body">
            <p>Changing fix version to 0.8.0.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Alex Adriaanse (alexadriaanse) on 2006-12-11T02:35:05.000+0000</p> 
        <div class="body">
            <p>The attached patch fixes a bug in one of the previous patches where columns with default values would be ignored when setting through setFromArray().  This patch also fixes a warning in __get() that the previous patch triggered.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2006-12-11T12:01:44.000+0000</p> 
        <div class="body">
            <p>Thanks very much for the patch Alex!  I'm currently focused working on Gdata for the upcoming release, but soon I'll be focusing on Zend_Db.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-01-03T23:40:20.000+0000</p> 
        <div class="body">
            <p>Reformat sample in description to avoid wide-screen effect.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Alex Adriaanse (alexadriaanse) on 2007-05-07T13:42:11.000+0000</p> 
        <div class="body">
            <p>I have updated my patch to version 0.9.3 of the Zend Framework.  db_handle_defaults_table_row_3.patch replaces all previous patches in this ticket.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-05-08T13:41:28.000+0000</p> 
        <div class="body">
            <p>Hi Alex,</p>

<p>I am not sure if you're aware of some changes in Zend_Db_Table_Abstract that are relevant to the use case you described in your original issue statement above.</p>

<ul><li>The abstract Table class infers the primary key column(s) from the metadata so that you don't have to declare them.</li>
<li>If you declare {{protected $_sequence = 'sequencename';}} in your derived Table class, the {{insert()}} method gets the next value from this sequence and assigns it to the </li>
<li>Special case for PostgreSQL: if you declare {{protected $_sequence = true;}} (this is the default code in the Table abstract class), the class changes the {{$_sequence}} value to a string naming the sequence, using the convention used by {{SERIAL}} keys in PostgreSQL:  {{</li>
</ul><p>&lt;</p>

<p>table&gt;__seq}}.  Then the sequence behavior described above takes effect.</p>

<p>So this should solve the use case of creating a new row; a value should be assigned to the primary key.</p>

<p>This does not solve the use case of other columns declared as {{NOT NULL}} which are not in the primary key.  I'm not sure if your patch was intended to solve that case.</p>

<p>I see in PostgreSQL there is a syntax for inserting default values:</p>

<pre class="highlight"><code>
INSERT INTO tablename (col1, col2, col3) VALUES (1, 'abc', DEFAULT);
</code></pre>

<p>What would you think of the following solution: if analysis of the {{table-&gt;info()}} shows that a column is declared NOT NULL, and it has a DEFAULT that is non-null, and the incoming row data has a null for that column, replace the value in the incoming row array with an unquoted SQL expression by using {{new Zend_Db_Expr{'DEFAULT'}}.  That should allow us to keep the entry in the row array, but it will cause the PostgreSQL engine to do the right thing.</p>

<p>This should be done only if the column is NOT NULL and has a DEFAULT, though; if either of those conditions are not met, it's inappropriate to make the change.  That is, if the column isn't declared NOT NULL, then null is a valid thing to enter.  If the column has no DEFAULT clause, we can't use the DEFAULT keyword in the INSERT statement.</p>

<p>Do you happen to know how many others of the RDBMS brands supported by Zend_Db support this usage of the DEFAULT keyword in an INSERT statement?  E.g. MySQL, Oracle, SQLite, MS SQL Server.  What I'm wondering is if we need to write this code to run only for certain RDBMS or if it's supported standardly.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Alex Adriaanse (alexadriaanse) on 2007-05-12T15:39:01.000+0000</p> 
        <div class="body">
            <p>I did notice some of the changes, which allowed me to eliminate parts of my previous patches, but I did not investigate closely enough to see if it allowed for a better approach to this problem.</p>

<p>I like the solution that you presented.  It has the nice benefit of allowing us to avoid making assumptions about sequence naming conventions, which is an issue I've run into before (e.g. sequence names do not change after renaming a table or column so the naming assumptions no longer hold).</p>

<p>As for the case where a column permits NULLs but also has a DEFAULT value, I think it'd be nice to allow the user to specify whether they want to use NULL or DEFAULT.  Essentially, if they don't set the column value it will use DEFAULT, but if they explicitly set it to NULL then it'll insert NULL.</p>

<p>I looked at the documentation for a number of database and it appears that MySQL, Oracle, MS SQL Server, and DB2 support the DEFAULT keyword.  However, I did not see this syntax in the SQLite documentation, and a quick test confirms that it does not support this keyword (it gave me a syntax error).</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-03-25T20:43:59.000+0000</p> 
        <div class="body">
            <p>Please categorize/fix as needed.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-04-18T13:11:57.000+0000</p> 
        <div class="body">
            <p>This doesn't appear to have been fixed in 1.5.0. Please update if this is not correct.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-12-04T12:53:16.000+0000</p> 
        <div class="body">
            <p>Reassigning as Ralph is the maintainer of Zend_Db</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ralph Schindler (ralph) on 2009-01-09T12:13:59.000+0000</p> 
        <div class="body">
            <p>Is this still an issue?  If so, is it not already covered by either</p>

<p>ZF-1870 (for Zend_Db_Table)
or the addition of Zend_Db_Expr?  (i presume the use case would be = new Zend_Db_Expr('DEFAULT') )</p>

<p>-ralph</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Alex Adriaanse (alexadriaanse) on 2009-01-23T10:04:03.000+0000</p> 
        <div class="body">
            <p>I just tried reproducing this issue and wasn't able to.  Upon closer review, it looks like this was fixed back in version 1.5.0.</p>

        </div>
    </div>
    </div>

