<h2>ZF-2923: Zend_Loader::autoload() causes a file not found warning when unable to include the class</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2008-03-19T09:46:21.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-03-13T04:01:57.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.8.0 (30/Apr/09)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Jack Sleight (jacksleight)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Matthew Weier O'Phinney (matthew)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Loader</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-2463">ZF-2463</a></li>
            <li><a href="/issues/browse/ZF-2996">ZF-2996</a></li>
            <li><a href="/issues/browse/ZF-2724">ZF-2724</a></li>
            <li><a href="/issues/browse/ZF-2701">ZF-2701</a></li>
            <li><a href="/issues/browse/ZF-2924">ZF-2924</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Autoload functions should not cause errors when they can't include the requested class. They may only be one function in the autoload stack, or they may be being used by class_exists() to simply check if a class is available. It isn't the job of any individual autoload to ensure a class is defined, therefore they should fail silently in the event that they cannot include the class.</p>

<p>At present the Zend_Loader::loadClass() method (used by Zend_Loader::autoload()) causes a PHP file not found warning if it cannot include the requested class. (Line 83)</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Darby Felton (darby) on 2008-03-19T10:00:48.000+0000</p> 
        <div class="body">
            <p>One obvious solution is to change the {{autoload()}} method to suppress errors on the call to {{self::loadClass()}}, but what happens when the file does exist, and it has  a parse error or a warning that the developer should see? Such error suppression solves one problem while causing other potential problems. The complexity of dealing with PHP errors here is a bit like a waterbed... if you push down one side, the other side pops up.</p>

<p>The next step would be to capture the errors and make them available to the calling script (except fatal errors of course), but this may be a performance hog. We'll need some tests and benchmarks, I think.</p>

<p>Maybe someone else has a better idea?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Jack Sleight (jacksleight) on 2008-03-19T10:33:39.000+0000</p> 
        <div class="body">
            <p>So we have four options:</p>

<ol><li>Don't check the file exists before inclusion and get errors when not found</li>
<li>Don't check the file exists before inclusion and suppress all errors, including parse errors</li>
<li>Don't check the file exists before inclusion but somehow catch the PHP file not found warning and suppress it, at the cost of performance</li>
<li>Check the file exists before inclusion, at the cost of performance</li>
</ol><p>None of them are ideal really. For the time being I've settled on option 4 for my workaround. Although I've got no idea on the actual performance impact of this.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Darby Felton (darby) on 2008-03-19T13:10:45.000+0000</p> 
        <div class="body">
            <p>Please see <a href="http://framework.zend.com/fisheye/changelog/Zend_Framework/?cs=8903">SVN r8903</a> as a possible solution.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Darby Felton (darby) on 2008-03-19T13:15:04.000+0000</p> 
        <div class="body">
            <p>Of course, this solution also suppresses any such "file not found" warnings from user code, such as in the following:</p>

<pre class="highlight"><code>
Zend_Loader::registerAutoload();
$foo = new Foo();
</code></pre>

<p>In Foo.php:</p>

<pre class="highlight"><code>
include_once 'Foo/Exception.php';
class Foo
{}
</code></pre>

<p>If '{{Foo/Exception.php}}' is not found, then the warnings generated by this user code are invisible.</p>

<p>We could augment the solution with an accumulation of such warnings rather than suppressing them altogether into the void. I'll commit another version that does this shortly.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Darby Felton (darby) on 2008-03-19T13:25:27.000+0000</p> 
        <div class="body">
            <p>Please see <a href="http://framework.zend.com/fisheye/changelog/Zend_Framework/?cs=8904">SVN 8904</a> for the augmented solution.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Jack Sleight (jacksleight) on 2008-03-19T14:32:00.000+0000</p> 
        <div class="body">
            <p>I've just run some (fairly unscientific) benchmarks on my standard application skeleton, here's the results:</p>

<p>Average load time in seconds based on 10 requests:</p>

<p>Using simple error suppression on the include_once (@): 0.3055
Checking file exists before inclusion (Zend_Loader::isReadable()): 0.3442
Using the new error suppression method in incubator: 0.3086</p>

<p>So, there's practically no performance hit with the new method. Looks good to me.</p>

<p>You make a good point regarding the inclusion of other files, but I see that as less of an issue. I guess you could always change the regex in suppressFileNotFoundWarnings() to look for the file name as well, so that only errors related to that file are suppressed? Mind you, you can't parse anything to the error handler can you? So I guess it would complicated things further.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by old of Satoru Yoshida (yoshida@zend.co.jp) on 2008-04-23T10:55:00.000+0000</p> 
        <div class="body">
            <p>I resolved ZF-2985 today.  Please tell me if ZF-2985 causes something wrong.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2008-11-22T08:44:02.000+0000</p> 
        <div class="body">
            <p>Resolved in trunk in r12769. However, this is a slight change in behavior, and cannot be released until the next minor release (1.8.0).</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by James Dempster (letssurf) on 2009-03-13T02:18:11.000+0000</p> 
        <div class="body">
            <p>Matthew is this still on track to be released in 1.8.0?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2009-03-13T04:01:53.000+0000</p> 
        <div class="body">
            <p>Yes -- Zend_Loader_Autoloader is complete in the incubator, and just needs to be documented before I push it to trunk, and that offers the most comprehensive solution.</p>

        </div>
    </div>
    </div>

