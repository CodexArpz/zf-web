<h2>ZF-10150: Zend_Date broken when using mbstring with overloading</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2010-07-13T21:38:26.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2010-07-29T05:37:24.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.11.0 (02/Nov/10)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Thomas Weidner (thomas)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Date</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
        <li><a href="/issues/secure/attachment/13213/Zend.patch">Zend.patch</a></li>
            <li><a href="/issues/secure/attachment/13212/Zend.patch">Zend.patch</a></li>
        </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>When outputting Zend_Date::DATE_LONG in locales with UTF-8 in the format string (such as 'zh') the output is returning half the string with only half the last character.</p>

<p>This is only when mbstring.func_overload is enabled for strlen and the internal encoding is set to UTF-8.</p>

<pre class="highlight"><code>
mbstring.internal_encoding = UTF-8
mbstring.func_overload = 7
</code></pre>

<p>Test case:</p>

<pre class="highlight"><code>
$date = new Zend_Date('2008-12-10');
echo $date-&gt;get(Zend_Date::DATE_LONG, 'zh');
</code></pre>

<p>Output:
2008年10�</p>

<p>Expected:
2008年10月12日</p>

<p>This issue appears to still be happening in SVN trunk.</p>

<p>Faulty function:
Zend_Date::_toToken()
_toToken loops over the format string using strlen() to determine the length of the string, and uses $part[$i] to access the individual bytes.
The issue comes about when strlen is overloaded by turning on mbstring.func_overload. This causes strlen to return the number of UTF-8 characters in the string, not the number of bytes.</p>

<p>Rejected solution:
use mb_strlen($part, '8bit') in place of strlen($part) to make sure it returns the number of bytes in the string regardless of the current internal encoding.
NOTE: This solution was rejected because use of mb_ functions is not acceptable in the Zend_Date.</p>

<p>New proposed solution:
use isset($part[$i]) in place of strlen($part) in the for loop.
This is the same check that is used further down that same function to make sure it does not read off the end of the string when reading of the current position.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Michael Cooper (mic159) on 2010-07-13T21:54:14.000+0000</p> 
        <div class="body">
            <p>Attached proposed patch</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Michael Cooper (mic159) on 2010-07-13T21:56:47.000+0000</p> 
        <div class="body">
            <p>Added relevant php.ini configuration settings.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2010-07-13T23:30:50.000+0000</p> 
        <div class="body">
            <p>Patch not accepted.
Usage of mb* is not allowed within these components.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Michael Cooper (mic159) on 2010-07-14T00:35:43.000+0000</p> 
        <div class="body">
            <p>Attached alternative solution patch.</p>

<p>Alternative solution:
Use isset($part[$i]) instead to detect the end of the string.</p>

<p>isset() is also used further down in the function to detect the end of the string.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2010-07-29T01:41:36.000+0000</p> 
        <div class="body">
            <p>Verification:
I just added a unittest.</p>

<p>The problem does not occur when mbstring is used without overloading and it does also not occur when mbstring isn't available at all.</p>

<p>In all cases this method works as expected.</p>

<p>Only when mbstring is used with overloading then things do not work anymore because utf8 is no longer handled as utf8.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2010-07-29T01:42:32.000+0000</p> 
        <div class="body">
            <p>Changed issue header</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Michael Cooper (mic159) on 2010-07-29T02:30:22.000+0000</p> 
        <div class="body">
            <p>Updated description with new proposed solution.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2010-07-29T05:35:34.000+0000</p> 
        <div class="body">
            <p>Fixed with r22713
Thank you for your time and report</p>

        </div>
    </div>
    </div>

