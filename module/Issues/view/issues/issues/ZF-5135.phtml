<h2>ZF-5135: Zend Loader can't find my extended Zend_Controller_Action</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2008-12-02T04:05:35.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-11-25T00:32:40.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Marco Kaiser (bate)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Controller</li>
            <li>Zend_Loader</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Hi,</p>

<p>In my controllers, I have created a "Base controller" where by my base controller extends Zend_Controller_Action, sets up properties for my view (in the constructor) then my controllers extend this class.</p>

<p>For example:</p>

<pre class="highlight"><code>
// in /application/controllers
abstract class SupportbaseController extends Zend_Controller_Action
{
//etc
}}

then I can do
class IndexController extends SupportbaseController
{
//etc
}

</code></pre>

<p>This works fine in 1.6.2, but in 1.7.1 I get:
{quote}
WARNING (Zend_Loader::include_once(SupportbaseController.php) [function.Zend-Loader-include-once]: failed to open stream: No such file or directory) in /xxxxxxxxxx/Zend/Loader.php at line 83
{quote}</p>

<p>If I manually require the file, it all works fine, so it looks like it can work out that "SupportBase" is a controller (i.e. it is looking in the root, rather than the application/controller directory)</p>

<p>I accept that I could have done something wrong, or trying to do something that ZF isn't designed to to (but the documentation isn't too clear is it) - and this works fine in 1.6.2.</p>

<p>Thanks,
James.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Greg Gomez (ultra_blue) on 2009-01-15T13:19:42.000+0000</p> 
        <div class="body">
            <p>I'm having the same issue, and I was able to work around it the same way James did.</p>

<p>Are we really in error here or is it a coder error? In other words, am I doing something wrong that used to be ok?</p>

<p>Thanks!
Greg</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2009-01-15T15:17:45.000+0000</p> 
        <div class="body">
            <p>Is '.' on your include_path? If not, add it.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Greg Gomez (ultra_blue) on 2009-01-15T15:27:19.000+0000</p> 
        <div class="body">
            <p>Hi, Matthew:</p>

<p>Thanks for taking the time to reply!</p>

<p>Yeah, '.' is on our path. First thing in bootstrap's set_include_path(), in fact.</p>

<p>Thanks,
Greg</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Sebastian Matusiak (zeff) on 2009-02-15T06:15:23.000+0000</p> 
        <div class="body">
            <p>Hello James,</p>

<p>I experienced same problems when switching from version 1.6 to 1.7.
My workaround is to append the path of my controller directory to the include path.</p>

<p>Say, your directory structure is:</p>

<p>/application
    /models
    /controllers
    ...
/library
    /Zend
    ...
/public
    index.php</p>

<p>So, in your index.php you would have something like that:
...
define('INDEX_PATH', realpath(dirname(<strong>FILE</strong>)));
$paths = array(
    INDEX_PATH . '/../library',
    INDEX_PATH . '/../application/models',
    INDEX_PATH . '/../application/controllers',
    get_include_path()
);
set_include_path(implode(PATH_SEPARATOR, $paths));
...</p>

<p>As with version 1.6 it worked without this explicit inclusion of controllers directory to the include path.</p>

<p>Regards,
Sebastian.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by James Dunmore (jdunmore) on 2009-02-16T07:06:47.000+0000</p> 
        <div class="body">
            <p>Hi Sebastian,</p>

<p>Yes, I've applied something very slightly different, but on a similar principle; the thing that is bugging me is that it works in 1.6, and not in 1.7, which does imply an undocumented change (or at least something changed to start working how it should, in which case I've done something wrong).</p>

<p>Although set_include_path at run time is an expensive operation (compared to it being set in php.ini)</p>

<p>Matthew  - yes "." is on my include path as well - any other help would be appreciated (again, is this a ZF fault, or something that (now more than one person) has done incorrectly)</p>

<p>Thanks.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by James Lyttelton (aqls) on 2009-03-09T08:35:18.000+0000</p> 
        <div class="body">
            <p>Same issue here.
In Zend/Controller/Dispatcher/Standard.php
in ZF version 1.6 lines 341 to 349
the loadClass() method uses Zend_Loader::loadFile()
with this code:</p>

<pre><code>    $dir         = dirname($loadFile);
    $file        = basename($loadFile);

    try {
        Zend_Loader::loadFile($file, $dir, true);
    } catch (Zend_Exception $e) {
        require_once 'Zend/Controller/Dispatcher/Exception.php';
        throw new Zend_Controller_Dispatcher_Exception('Cannot load controller class "' . $className . '" from file "' . $file . '" in directory "' . $dir . '"');
    }
</code></pre>

<p>in ZF version 1.7 lines 337 to 340
the loadClass() method now uses include_once()
with this code:</p>

<pre><code>    if (!include_once $loadFile) {
        require_once 'Zend/Controller/Dispatcher/Exception.php';
        throw new Zend_Controller_Dispatcher_Exception('Cannot load controller class "' . $className . '" from file "' . $loadFile . "'");
    }
</code></pre>

<p>My temporary patch to get it working for me is to comment out the new 'include_once()' code in the new Standard.php (directly above) and paste in the old 'Zend_Loader' code (also above). I'm not sure of the best way to work around this in the bootstrap.</p>

<p>The relevant Zend_Loader::loadFile code is as follows:
    public static function loadFile($filename, $dirs = null, $once = false)
    {
        self::_securityCheck($filename);</p>

<pre><code>    /**
     * Search in provided directories, as well as include_path
     */
    $incPath = false;
    if (!empty($dirs) &amp;&amp; (is_array($dirs) || is_string($dirs))) {
        if (is_array($dirs)) {
            $dirs = implode(PATH_SEPARATOR, $dirs);
        }
        $incPath = get_include_path();
        set_include_path($dirs . PATH_SEPARATOR . $incPath);
    }

    /**
     * Try finding for the plain filename in the include_path.
     */
    if ($once) {
        include_once $filename;
    } else {
        include $filename;
    }

    /**
     * If searching in directories, reset include_path
     */
    if ($incPath) {
        set_include_path($incPath);
    }

    return true;
}
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by James Dunmore (jdunmore) on 2009-03-09T09:37:17.000+0000</p> 
        <div class="body">
            <p>Hi James,</p>

<p>Thanks for finding that - brilliant; I concur; I've been through the source of Zend/Controller/Dispatcher/Standard.php, and the lines you mention have changed from:</p>

<p>Zend_Loader::loadFile($file, $dir, true);</p>

<p>to</p>

<p>include_once $loadFile</p>

<p>I think the key point is that in 1.7.1, previous to the new include_once, it doesn't utilise as much of the following (that 1.6 with Zend_Loader::loadFile did)</p>

<pre class="highlight"><code> 
$dispatchDir = $this-&gt;getDispatchDirectory();
332         $loadFile    = $dispatchDir . DIRECTORY_SEPARATOR . $this-&gt;classToFilename($className);
333         $dir         = dirname($loadFile);
334         $file        = basename($loadFile);
</code></pre>

<p>So there is a change, which has caused code to break - what we (still) need to establish is should we now write code in a certain way to now reflect this change?</p>

<p>Thanks.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Marco Kaiser (bate) on 2009-11-20T05:25:05.000+0000</p> 
        <div class="body">
            <p>With 1.7+ release there was a BC break. You have to Namespace you classes like MyApp_SupportController
to get it working with the new introduced autoloader mechanism. Otherwise you have to add it to the include path.</p>

<p>If not true, please provide a working setup with path and application layout.</p>

        </div>
    </div>
    </div>

