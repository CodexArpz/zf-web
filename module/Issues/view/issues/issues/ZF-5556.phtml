<h2>ZF-5556: Zend_Form_Element, ability to allowBrackets</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>New Feature</dd>

    <dt>Created:</dt>
    <dd>2009-01-15T06:19:11.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-01-15T06:51:50.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Ing. Jitka Darbujanova (jitka_sunny)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Matthew Weier O'Phinney (matthew)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Form</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>There is no way to allow brackets on setName() function.</p>

<p>See this example:
$cat= new Zend_Form_Element_Select('cat[]'); //I have overrided helper
-&gt; this will call setName($name) and this function calls -&gt;filterName($name);
this will filter the brackets and I cant make the system no to filter although it goes thru "public function filterName($value, $allowBrackets = false)"</p>

<p>What about such definition in Zend_Form_Element?</p>

<p>public function setName($name, $allowBrackets = false){
     $name = $this-&gt;filterName($name, $allowBrackets );
     ... }</p>

<p>and in construtor: "public function __construct($spec, $options = null)"
there can be condition on it:
...
  if (is_string($spec)) {
     $withBrackets = null;
     if (is_array($options) &amp;&amp; isset($options['allowBrackets])) $withBrackets =  $options['allowBrackets];
     $this-&gt;setName($spec, $withBrackets);
  }
...</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2009-01-15T06:49:46.000+0000</p> 
        <div class="body">
            <p>Names internally cannot have brackets as they are used in a variety of lookups. However, you can indicate that an element represents an array -- which will propagate to the view helpers and result in having brackets in the output. You do this by setting the isArray flag on the element:</p>

<pre class="highlight"><code>
$element-&gt;setIsArray(true);
</code></pre>

<p>Or, at instantiation:</p>

<pre class="highlight"><code>
$element = new Zend_Form_Element_Text('foo', array(
    'isArray' =&gt; true,
));
</code></pre>

<p>both will result in the final output having the following attributes in the markup:</p>

<pre class="highlight"><code>
name="foo[]" id="foo"
</code></pre>

        </div>
    </div>
    </div>

