<h2>ZF-2993: Zend_Layout renders twice on ViewRenderer exception</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2008-03-28T14:08:25.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2008-09-02T10:39:04.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.6.0 (02/Sep/08)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Philip Sharp (psharp)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Ralph Schindler (ralph)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Layout</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Given a TestController with actions "succesful" and "missingviewscript", configured to use the following layout:</p>

<pre class="highlight"><code>
[DEFAULT LAYOUT HEADER]
&lt;?php 
    echo $this-&gt;layout()-&gt;content;
?&gt;
[DEFAULT LAYOUT FOOTER]
</code></pre>

<p>And an ErrorController, configured to use the following layout:</p>

<pre class="highlight"><code>
[ERROR LAYOUT HEADER]
&lt;?php 
    echo $this-&gt;layout()-&gt;content;
?&gt;
[ERROR LAYOUT FOOTER]
</code></pre>

<p>With the following defaults unchanged:
Zend_Controller_Front::_throwExceptions is false, Zend_Layout::_mvcSuccessfulActionOnly is true, and Zend_Controller_Action_Helper_ViewRenderer and Zend_Controller_Plugin_ErrorHandler are enabled.</p>

<p>/test/succesful expected and seen:</p>

<pre class="highlight"><code>
[DEFAULT LAYOUT HEADER]
(TestController::succesfulAction output)
[DEFAULT LAYOUT FOOTER]
</code></pre>

<p>/test/missingaction expected and seen:</p>

<pre class="highlight"><code>
ERROR LAYOUT HEADER]
(ErrorController::errorAction output)
[ERROR LAYOUT FOOTER]
</code></pre>

<p>/test/missingviewscript expected:</p>

<pre class="highlight"><code>
[ERROR LAYOUT HEADER]
(ErrorController::errorAction output)
[ERROR LAYOUT FOOTER]
</code></pre>

<p>/test/missingviewscript seen:</p>

<pre class="highlight"><code>
[ERROR LAYOUT HEADER]
[DEFAULT LAYOUT HEADER]

[DEFAULT LAYOUT FOOTER]
(ErrorController::errorAction output)
[ERROR LAYOUT FOOTER]
</code></pre>

<p>This appears to occur because when _throwExceptions is false, the exception thrown by Zend_Controller_Action_Helper_ViewRenderer is caught and Zend_Layout_Controller_Action_Helper_Layout::postDispatch() is allowed to run, setting _isActionControllerSuccessful to true. Therefore the default layout is rendered around the empty content of missingviewscriptAction, then the error layout is rendered around this content and the errorAction content.</p>

<p>The preferred bahavior would be to skip rendering of the layout around the missingviewscriptAction, either by default or through configuration.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2008-03-28T14:21:32.000+0000</p> 
        <div class="body">
            <p>Assigning to Ralph for triage.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Jonathan Tai (jtai) on 2008-03-29T03:14:30.000+0000</p> 
        <div class="body">
            <p>Also, if you add another action to TestController called "viewscriptexception" and a corresponding viewscriptexception.pthml that throws an exception, you get the same double-render issue.</p>

<p>The way I understand it, here's what's happening.  The following assumes that the error handler, view renderer, and layout plugins are all active.</p>

<p>Zend_Controller_Front::dispatch() calls the Zend_Controller_Action::dispatch()</p>

<p>Zend_Controller_Action::dispatch() calls $this-&gt;$action(), which returns normally (no exception is thrown yet)</p>

<p>Zend_Controller_Action::dispatch() calls $this-&gt;_helper-&gt;notifyPostDispatch()</p>

<p>The layout helper gets notified first.  In Zend_Layout_Controller_Action_Helper_Layout::postDispatch(), $this-&gt;_isActionControllerSuccessful is set to true.</p>

<p>The viewrenderer helper gets notified next.  In Zend_Controller_Action_Helper_ViewRenderer::postDispatch(), $this-&gt;render() is called.  This is where the trouble begins - in Philip's example, the view script is not found (thus generating an exception); in my example, the view script is found but it throws an exception.</p>

<p>Control now returns to the front controller (Zend_Controller_Front::dispatch()).  The exception is caught, and $this-&gt;_response-&gt;setExecption() is called.  Next, Zend_Controller_Front::dispatch() calls $this-&gt;_plugins-&gt;postDispatch().</p>

<p>The layout plugin is again notified first.  Zend_Layout_Controller_Plugin_Layout::postDispatch() runs, and since isActionControllerSuccessful was set to true earlier, it doesn't return early.  An empty layout is rendered.</p>

<p>The errorhandler is notified next.  Zend_Controller_Plugin_ErrorHandler::postDispatch() runs, sets a bunch of stuff, forwards to the error controllre, which renders again, causing the second layout and error content to be rendered.</p>

<p>The way I've found to band-aid over the issue is to apply the following patch:</p>

<pre class="highlight"><code>
--- library/Zend/Layout/Controller/Plugin/Layout.php  Wed Mar 19 22:28:37 2008 -0700
+++ library/Zend/Layout/Controller/Plugin/Layout.php  Wed Mar 19 23:11:40 2008 -0700
@@ -123,8 +123,14 @@
             return;
         }
 
-        $response   = $this-&gt;getResponse();
-        $content    = $response-&gt;getBody(true);
+        $response = $this-&gt;getResponse();
+
+        // Return early if an exception was thrown, unless this is the error handler
+        if ($response-&gt;isException() &amp;&amp; !$request-&gt;getParam('error_handler')) {
+            return;
+        }
+
+        $content = $response-&gt;getBody(true);
         $contentKey = $layout-&gt;getContentKey();
 
         if (isset($content['default'])) {
</code></pre>

<p>This causes the first run through Zend_Layout_Controller_Plugin_Layout::postDispatch() to return early, because the response already has its exception set, but no error handler has been set yet, since the error handler plugin has not yet run.  The second run through Zend_Layout_Controller_Plugin_Layout::postDispatch() renders the layout and the error content, as expected.</p>

<p>There are two problems with this patch that are immediately obvious.  First, it doesn't take mvcSuccessfulActionOnly into account.  If mvcSuccessfulActionOnly is set to false, this patch will still cause the layout to not render the first time around.  Another problem is that the fix is hard-coded to detect behavior of the error handler plugin, which links the two classes together in a way that they probably shouldn't be linked.  In particular, if the error handler plugin was disabled, exceptions would never be rendered with a layout.  So this patch is not probably not ready to be applied as-is.  But I hope it illustrates the problem and makes getting to a real fix easier.</p>

<p>Finally, I'd like to mention that the documentation for mvcSuccessfulActionOnly on <a href="http://framework.zend.com/manual/en/zend.layout.options.html">http://framework.zend.com/manual/en/â€¦</a> has a typo in it - "flag" is incorrectly spelled as "flat".</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2008-05-09T11:51:34.000+0000</p> 
        <div class="body">
            <p>Scheduling for next mini release</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ralph Schindler (ralph) on 2008-07-26T12:42:06.000+0000</p> 
        <div class="body">
            <p>There is actually a simple fix for this you can put into your bootstrap file.  Before the call to use Zend_Layout::startMvc(/* ... */); try explicitly added the ViewRenderer to the Broker.</p>

<p>The call would basically look like this:</p>

<pre class="highlight"><code>
Zend_Controller_Action_HelperBroker::addHelper(new Zend_Controller_Action_Helper_ViewRenderer());
Zend_Layout::startMvc(array('layout' =&gt; 'default', 'layoutPath' =&gt; APPLICATION_PATH . '/layouts/'));
</code></pre>

<p>What this allows to happen is that the viewRenderer will run before the Layout action helper and will be able to detect if a view script exception had occured, thus affecting whether or not Zend_Layout can detect if there was a SuccessfulAction.</p>

<p>The real solution which I have been working on is implementing a better stack for the Zend_Controller_Action_HelperBroker.  This is turning out to be more than a few line fix, so I think it would be best to use the above workaround in 1.5.x and then I will introduce the HelperBroker_Stack in 1.6 as a new feature.</p>

<p>Having a proper stack will allow Zend_Controller to register the ViewRenderer at a specific predetermined location in the stack, and will also allow Zend_Layout to register its action helper at a predetermined location in the stack.  If both can go into known locations, we can ensure that the viewRenderer (And all other future action helpers - system or user), can be assured that they can run before the layout action helper thus - fixing the problem of "unkown state regarding successful action controllers".</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ralph Schindler (ralph) on 2008-07-26T12:42:40.000+0000</p> 
        <div class="body">
            <p>Moving to next minor release at it includes a new feature.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ralph Schindler (ralph) on 2008-08-06T22:38:44.000+0000</p> 
        <div class="body">
            <p>Fixed at r10734 in trunk.
Fixed at r10746 in release 1.6 branch.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-09-02T10:39:04.000+0000</p> 
        <div class="body">
            <p>Updating for the 1.6.0 release.</p>

        </div>
    </div>
    </div>

