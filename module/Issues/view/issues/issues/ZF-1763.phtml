<h2>ZF-1763: &quot;Function&quot; frontend should allow to pass callback as function name.</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2007-07-24T10:42:21.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2008-12-31T05:46:27.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Marcin Stefaniak (bimbelt)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Fabien MARTY (fab)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Cache</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>At this time only strings are allowed.
But it should be easy to serialize class/object and method name given in callback array to generate proper cache id.</p>

<p>Here's my proposal:</p>

<pre class="highlight"><code>
private function _makeId($name, $parameters) 
{
     if (is_array($name)) {
          if (count($name) != 2) {
               Zend_Cache::throwException('Callback array must contain two elements: class/object and method name');
          }
          
          // We serialize objects to distinct two objects of the same class
          // FIXME: Some object can't be serialized, like PDO instances.
          if (is_object($name[0])) {
               $name[0] = serialize($name[0]);
          }
          
          if (!is_string($name[0])) {
               Zend_Cache::throwException('Incorrect class name');
          }
          
          if (!is_string($name[1])) {
               Zend_Cache::throwException('Incorrect method name');
          }
          
          $name = $name[0].'::'.$name[1];
     }
     
    if (!is_string($name)) {
        Zend_Cache::throwException('Incorrect function name');
    }
    if (!is_array($parameters)) {
        Zend_Cache::throwException('parameters argument must be an array');
    }
    return md5($name . serialize($parameters));
}

</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2007-07-25T00:36:37.000+0000</p> 
        <div class="body">
            <p>Assigned to Fabien</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Darien Hager (hagerd) on 2008-01-24T20:08:55.000+0000</p> 
        <div class="body">
            <p>It sounds like thsi functionality is actually the current responsibility of Zend_Cache_Frontend_Class, to cache static method calls and dynamic calls on objects.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Fabien MARTY (fab) on 2008-12-31T05:46:26.000+0000</p> 
        <div class="body">
            <p>there is now a setCachedEntity() method in Zend_Cache_Frontend_Class, with it, you can do this in two lines</p>

        </div>
    </div>
    </div>

