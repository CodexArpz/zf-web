<h2>ZF-9630: add fetchBodyStructure to Zend_Mail_Protocol</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>New Feature</dd>

    <dt>Created:</dt>
    <dd>2010-04-07T06:09:03.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2011-08-31T00:12:32.000+0000</dd>

    <dt>Status:</dt>
    <dd>Open</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Nico Edtinger (nico)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Mail</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>It would be nice to have an official access to FETCH BODYSTRUCTURE, including output parsing in Zend_Mail_Protocol. This would make it so much more efficient to retrieve message overviews.</p>

<p>Currently, this can be achieved using requestAndResponse, but the output handling has then to be done 'by hand' ...</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Dominik Gehl (dominikgehl) on 2010-04-07T09:04:36.000+0000</p> 
        <div class="body">
            <p>The following function allows to parse the output and to return an object similar to imap_fetchstructure</p>

<pre class="literal">
    static function parseStructure($structureArray) {

        $types = array('text','multipart','message','application','audio','image','video');
        $encodings = array('7BIT','8BIT','BINARY','BASE64','QUOTED-PRINTABLE');
            
        if (! is_array($structureArray[0])) {
            $structureObj = new StdClass;
            $structureObj-&gt;type = ((($pos = array_search(strtolower($structureArray[0]), $types)) === false) ? count($types) : $pos);
            if ($structureArray[1] == 'NIL') {
                $structureObj-&gt;ifsubtype = 0;
            }
            else {
                $structureObj-&gt;ifsubtype = 1;
                $structureObj-&gt;subtype = $structureArray[1];
            }
            if (! is_array($structureArray[2])) {
                $structureObj-&gt;ifparameters = 0;
            }
            else {
                $structureObj-&gt;ifparameters = 1;
                $structureObj-&gt;parameters = array();
                $i=0;
                while ($i &lt; count($structureArray[2])) {
                    $parameterObj = new StdClass;
                    $parameterObj-&gt;attribute = $structureArray[2][$i];
                    $i++;
                    $parameterObj-&gt;value = $structureArray[2][$i];
                    $i++;
                    $structureObj-&gt;parameters[] = $parameterObj;
                }
            }
            if ($structureArray[3] == 'NIL') {
                $structureObj-&gt;ifid = 0;
            }
            else {
                $structureObj-&gt;ifId = 1;
                $structureObj-&gt;id = $structureArray[3];
            }
            if ($structureArray[4] == 'NIL') {
                $structureObj-&gt;ifdescription = 0;
            }
            else {
                $structureObj-&gt;ifdescription = 1;
                $structureObj-&gt;description = $structureArray[4];
            }
            $structureObj-&gt;encoding = ((($pos = array_search(strtoupper($structureArray[5]), $encodings)) === false) ? count($encodings) : $pos);
            $structureObj-&gt;bytes = $structureArray[6];
            if (($structureObj-&gt;type == 0) &amp;&amp; isset($structureArray[7]) &amp;&amp; ($structureArray[7] != 'NIL')) {
                $structureObj-&gt;lines = $structureArray[7];
            }
            if (!isset($structureArray[8]) || ($structureArray[8] == 'NIL')) {
                $structureObj-&gt;ifdisposition = 0;
                $structureObj-&gt;ifdparameters = 0;
            }
            else {
                $structureObj-&gt;ifdisposition=1;
                $structureObj-&gt;disposition = $structureArray[8][0];
                if (!isset($structureArray[8][1]) || !is_array($structureArray[8][1])) {
                    $structureObj-&gt;ifdparameters = 0;
                }
                else {
                    $structureObj-&gt;ifdparameters = 1;
                    $structureObj-&gt;dparameters = array();
                    $i=0;
                    while ($i &lt; count($structureArray[8][1])) {
                        $parameterObj = new StdClass;
                        $parameterObj-&gt;attribute = $structureArray[8][1][$i];
                        $i++;
                        $parameterObj-&gt;value = $structureArray[8][1][$i];
                        $i++;
                        $structureObj-&gt;dparameters[] = $parameterObj;
                    }
                }
            }
            return $structureObj;
        }
        else {
            $partsNb = 0;
            $structureObj = new StdClass;
            $structureObj-&gt;type = 1;
            $structureObj-&gt;parts = array();
            while (($partsNbparts[] = self::parseStructure($structureArray[$partsNb]);
                $partsNb++;
            }
            if ($structureArray[$partsNb] == 'NIL') {
                $structureObj-&gt;ifsubtype = 0;
            }
            else {
                $structureObj-&gt;ifsubtype = 1;
                $structureObj-&gt;subtype = $structureArray[$partsNb];
            }
            if (!isset($structureArray[$partsNb+1]) || ($structureArray[$partsNb+1] == 'NIL')) {
                $structureObj-&gt;ifparameters = 0;
            }
            else {
                $structureObj-&gt;ifparameters = 1;
                $structureObj-&gt;parameters = array();
                $i=0;
                while ($i &lt; count($structureArray[$partsNb+1])) {
                    $parameterObj = new StdClass;
                    $parameterObj-&gt;attribute = $structureArray[$partsNb+1][$i];
                    $i++;
                    $parameterObj-&gt;value = $structureArray[$partsNb+1][$i];
                    $i++;
                    $structureObj-&gt;parameters[] = $parameterObj;
                }
            }
            if (!isset($structureArray[$partsNb+2]) || ($structureArray[$partsNb+2] == 'NIL')) {
                $structureObj-&gt;ifdisposition = 0;
                $structureObj-&gt;ifdparameters = 0;
            }
            else {
                $structureObj-&gt;ifdisposition = 1;
                $structureObj-&gt;disposition = $structureArray[$partsNb+2][0];
                if (!isset($structureArray[$partsNb+2][1]) || !is_array($structureArray[$partsNb+2][1])) {
                    $structureObj-&gt;ifdparameters = 0;
                }
                else {
                    $structureObj-&gt;ifdparameters = 1;
                    $structureObj-&gt;dparameters = array();
                    $i=0;
                    while ($i &lt; count($structureArray[$partsNb+2][1])) {
                        $parameterObj = new StdClass;
                        $parameterObj-&gt;attribute = $structureArray[$partsNb+2][1][$i];
                        $i++;
                        $parameterObj-&gt;value = $structureArray[$partsNb+2][1][$i];
                        $i++;
                        $structureObj-&gt;dparameters[] = $parameterObj;
                    }
                }
            }
            return $structureObj;

        }
    }
</pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Nico Edtinger (nico) on 2010-04-09T09:07:10.000+0000</p> 
        <div class="body">
            <p>Actually Zend_Mail_Part has a recursive iterator that can be, among other things, used to retrieve the structure of a message. That doesn't mean FETCH BODYSTRUCTURE doesn't make sense, but I think it might be a good idea to create Zend_Mail_Part_Imap and have it prefetch the structure when a Zend_Mail_Message_Imap is returned in getMessage(). The benefit is having the same interface as in all other storage classes and an object that's ready to use if you find a part in the structure that you want to do something with (like fetching it's content/body).</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by HeWo (hewo) on 2011-08-25T15:07:03.000+0000</p> 
        <div class="body">
            <p>Dominik, thank you for your promising function.</p>

<p>I am relativly new to the zend framework and am trying to establish an alternative to the built-in php_imap.. functions in my scripts because of its restrictations on public webservers with apache and more than 1024 opened files (<a href="http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=478193">http://bugs.debian.org/cgi-bin/bugreport.cgi/â€¦</a>).</p>

<p>I really would like to use your function to replace imap_fetchstructure, which i rely on, but I do not understand how to use your function. Where is the $structureArray to be found?</p>

<p>Right now I am using Zend_Mail_Storage_Pop3, but I can go to Imap if needed. I am using ZF 1.11.10_minimal.</p>

<p>Thank you and best Regards</p>

<p>HeWo</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Dominik Gehl (dominikgehl) on 2011-08-31T00:12:32.000+0000</p> 
        <div class="body">
            <p>Hi HeWo,</p>

<p>you could use some code like this:</p>

<p>$bodyStructure = $zend_mail_protocol_obj-&gt;requestAndResponse('FETCH', array($id, 'BODYSTRUCTURE'));
$bodyStructureObj = parseStructure($bodyStructure[0][2][1]);</p>

<p>Let me know if you need more details,
Dominik</p>

        </div>
    </div>
    </div>

