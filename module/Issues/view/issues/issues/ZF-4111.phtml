<h2>ZF-4111: Zend_Form_Element_Select auto InArray validator incorrect/unintended behaviour</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2008-08-28T15:22:03.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2011-08-14T14:22:17.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Andrew Collington (amnuts)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Pádraic Brady (padraic)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Validate</li>
            <li>zf-crteam-padraic</li>
            <li>zf-crteam-priority</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
        <li><a href="/issues/secure/attachment/13606/ZF-4111-rtuin.patch">ZF-4111-rtuin.patch</a></li>
        </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>When creating an element that allows for multiple selections, the InArray validator automatically set returns false when you would expect it to return true....</p>

<p>If, for example, Zend_Form_Element_Multiselect were used to produce the following select list:</p>

<p>Feed 1Feed 2</p>

<p>and I selected both options, then what would be expected to return on validation would be true as both of the options I'm selecting are in the select list.  However, in the InArray isValid() method, the value and haystack look like:</p>

<p>Value = array(2) {
[0] =&gt; string(22) "http://localhost/feed1"
[1] =&gt; string(22) "http://localhost/feed2"
}</p>

<p>Haystack = array(2) {
[0] =&gt; string(22) "http://localhost/feed1"
[1] =&gt; string(22) "http://localhost/feed2"
}</p>

<p>which means that the in_array method is looking for an instance of an array containing feed1 and feed2 in the haystack array, which itself is one-dimensional.</p>

&lt;?php

$value = array(
   "http://localhost/feed1",
   "http://localhost/feed2"
);

$haystack = array(
   "http://localhost/feed1",
   "http://localhost/feed2"
);

var_dump(in_array($value, $haystack, false)); 

// bool(false)

?&gt;

<p>Correct behaviour for the in_array function, but incorrect/unintended usage for validating that the options selected are all contained within the select list.</p>

<p>This probably relates to ZF-3985.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by David Rogers (al_the_x) on 2009-02-28T17:57:36.000+0000</p> 
        <div class="body">
            <p>I'm running into the same or similar issue in my application. I'm constructing a standard Select Element, a la:</p>

&lt;?php

$Form = new Zend_Form(array(
    'elements' =&gt; array(
        'select' =&gt; array('select', array(
            'multiple' =&gt; true,
            'multiOptions' =&gt; array(
                'option1', 'option2',
            ),
        )),
    ),
));

echo $Form;
?&gt;

<p>This produces the desirable effect:</p>


    option1option2

<p>Selecting either option and attempting to validate the form always fails, due to the use of in_array() in the InArray Validator, as noted above, however validation works correctly when using the Mutiselect Element. I understand that's preferred solution for this problem, but shouldn't Select have <em>some</em> useful behavior defined for when the "multiple" flag / attribute is passed? Is there a plan to merge these two elements? Can I help!? Thanks.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Richard Tuin (richardtuin) on 2011-01-22T06:37:39.000+0000</p> 
        <div class="body">
            <p>Added a fix for this issue along with the approperiate unit tests.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Adam Lundrigan (adamlundrigan) on 2011-06-08T23:21:18.000+0000</p> 
        <div class="body">
            <p>Does this need to be fixed?  I'm thinking it's more of a design choice than a bug; Zend_Form_Element_Select is for single-select combo boxes and Zend_Form_Element_Multiselect is for multiple-select combo boxes.  The manual page makes that same distinction (<a href="http://framework.zend.com/manual/en/zend.form.standardElements.html#zend.form.standardElements.multiselect">http://framework.zend.com/manual/en/…</a>).</p>

<p>Related question:  Why is there both Select and Multiselect?  Couldn't the two be merged?</p>

<p>Could we perhaps emit a friendly warning when Select is passed multiple=true, just to warn that Multiselect is the better choice?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Pádraic Brady (padraic) on 2011-08-14T14:22:17.000+0000</p> 
        <div class="body">
            <p>Marked as won't fix for the following reasons:</p>

<ol><li>This is not a Zend_Validate bug.</li>
<li>Issue is not evidenced when using Zend_Form_Element_Multiselect as is the recommended action.</li>
<li>Associated patch may fix this particular issue but in the wrong component. The problem lies with Zend_Form which is why MultiSelect should be used.</li>
</ol>
        </div>
    </div>
    </div>

