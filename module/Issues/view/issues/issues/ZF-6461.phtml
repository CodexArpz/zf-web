<h2>ZF-6461: Split Zend_Db_Table_Row_Abstract::findDependentRowset to allow direct access to the Zend_Db_Table_Select object</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2009-04-29T00:03:01.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-05-29T02:31:16.000+0000</dd>

    <dt>Status:</dt>
    <dd>Closed</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Roger Hunwicks (rhunwicks)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Adam Lundrigan (adamlundrigan)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Db_Table</li>
            <li>Zend_Paginator</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-4692">ZF-4692</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Zend_Db_Table_Row_Abstract::findDependentRowset  find the child rows for a particular table for a Zend_Db_Table_Row object.</p>

<p>It does this by building a Zend_Db_Table_Select object and then calling Zend_Db_Table_Abstract::fetchAll to return the rows:</p>

<pre class="literal">
    public function findDependentRowset($dependentTable, $ruleKey = null, Zend_Db_Table_Select $select = null)
    {
        $db = $this-&gt;_getTable()-&gt;getAdapter();

         Build Zend_Db_Table_Select object $select 

        return $dependentTable-&gt;fetchAll($select);
    }
</pre>

<p>Sometimes it is more useful to have direct access to the $select object than it is to the rowset. My use case is using Zend_Paginator to display a paginated list of child rows in a master-detail screen. This works best (for us at least) if we have a Zend_Db_Table_Select representing the whole rowset, and we then allow Zend_Paginator to change the offset and limit clauses as required to bring back the required rows.</p>

<p>This is easily accomplished if we split the existing findDependentRowset into a method to build the $select and a separate method to return the rowset.</p>

<p>The new getDependentSelect is identical to the existing findDependentRowset except for the last line which returns the $select instead of a rowset:</p>

<pre class="literal">
    /**
     * Generate a select statement to query a dependent table to retrieve rows matching the current row.
     *
     * @param string|Zend_Db_Table_Abstract  $dependentTable
     * @param string                         OPTIONAL $ruleKey
     * @param Zend_Db_Table_Select           OPTIONAL $select
     * @return Zend_Db_Table_Select          Query result from $dependentTable
     * @throws Zend_Db_Table_Row_Exception   If $dependentTable is not a table or is not loadable.
     */
    public function getDependentSelect($dependentTable, $ruleKey = null, Zend_Db_Table_Select $select = null)
    {
        $db = $this-&gt;_getTable()-&gt;getAdapter();

        if (is_string($dependentTable)) {
            try {
                @Zend_Loader::loadClass($dependentTable);
            } catch (Zend_Exception $e) {
                require_once 'Zend/Db/Table/Row/Exception.php';
                throw new Zend_Db_Table_Row_Exception($e-&gt;getMessage());
            }
            $dependentTable = new $dependentTable(array('db' =&gt; $db));
        }
        if (! $dependentTable instanceof Zend_Db_Table_Abstract) {
            $type = gettype($dependentTable);
            if ($type == 'object') {
                $type = get_class($dependentTable);
            }
            require_once 'Zend/Db/Table/Row/Exception.php';
            throw new Zend_Db_Table_Row_Exception("Dependent table must be a Zend_Db_Table_Abstract, but it is $type");
        }

        if ($select === null) {
            $select = $dependentTable-&gt;select();
        } else {
            $select-&gt;setTable($dependentTable);
        }

        $map = $this-&gt;_prepareReference($dependentTable, $this-&gt;_getTable(), $ruleKey);

        for ($i = 0; $i &lt; count($map[Zend_Db_Table_Abstract::COLUMNS]); ++$i) {
            $parentColumnName = $db-&gt;foldCase($map[Zend_Db_Table_Abstract::REF_COLUMNS][$i]);
            $value = $this-&gt;_data[$parentColumnName];
            // Use adapter from dependent table to ensure correct query construction
            $dependentDb = $dependentTable-&gt;getAdapter();
            $dependentColumnName = $dependentDb-&gt;foldCase($map[Zend_Db_Table_Abstract::COLUMNS][$i]);
            $dependentColumn = $dependentDb-&gt;quoteIdentifier($dependentColumnName, true);
            $dependentInfo = $dependentTable-&gt;info();
            $type = $dependentInfo[Zend_Db_Table_Abstract::METADATA][$dependentColumnName]['DATA_TYPE'];
            $select-&gt;where("$dependentColumn = ?", $value, $type);
        }

        return $select;
    }
</pre>

<p>findDependentRowset now becomes a call to getDependentSelect:</p>

<pre class="literal">
    /**
     * Query a dependent table to retrieve rows matching the current row.
     *
     * @param string|Zend_Db_Table_Abstract  $dependentTable
     * @param string                         OPTIONAL $ruleKey
     * @param Zend_Db_Table_Select           OPTIONAL $select
     * @return Zend_Db_Table_Rowset_Abstract Query result from $dependentTable
     * @throws Zend_Db_Table_Row_Exception If $dependentTable is not a table or is not loadable.
     */
    public function findDependentRowset($dependentTable, $ruleKey = null, Zend_Db_Table_Select $select = null)
    {
        $select = $this-&gt;getDependentSelect($dependentTable, $ruleKey, $select);
        return $select-&gt;getTable()-&gt;fetchAll($select);
    }
</pre>

<p>This allows my use case to work easily:</p>

<pre class="literal">
            // Create the child paginator
            $select = $row-&gt;getDependentSelect($child);
            $page = $this-&gt;_request-&gt;getParam('page');
            $paginator = Zend_Paginator::factory($select, 'DbTableSelect');
            $paginator-&gt;setCurrentPageNumber($page);
            $this-&gt;view-&gt;childPaginator = $paginator;
</pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Jurrien Stutterheim (norm2782) on 2009-07-29T08:27:04.000+0000</p> 
        <div class="body">
            <p>Might be useful to refactor the many-to-many and parent-row support as well.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Adam Lundrigan (adamlundrigan) on 2012-05-29T02:31:16.000+0000</p> 
        <div class="body">
            <p>Duplicate of ZF-4692</p>

        </div>
    </div>
    </div>

