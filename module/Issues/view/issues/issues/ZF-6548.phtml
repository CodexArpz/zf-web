<h2>ZF-6548: Zend_Cache_Backend_File Indexing</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2009-05-05T18:38:16.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-01-09T20:02:53.000+0000</dd>

    <dt>Status:</dt>
    <dd>Closed</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>Next Major Release ()</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Marc Bennewitz (private) (mabe)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Cache</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>When cleaning caches based on tags or expiry (manual or automated), if there are a lot of caches with the same prefix it will take too long and in some cases timeout requests.</p>

<p>I propose that tags and expiries be stored in central index files for each prefix, that way Zend_Cache_Backend_File doesn't have to open every single cache metadata file to figure out which ones need to be cleaned, instead it could open just one file and loop through an array.</p>

<p>This could be made more efficient not only by storing an array of all caches, but also storing arrays for each tag with all caches containing that tag. This will minimise memory/processor usage.</p>

<p>I came across this problem when a highly load balanced would "randomly" take 30-60 seconds or more on some requests. It turned out the default automatic cleanup of 1/10 was occuring often and i had hundreds of thousands of caches with the same prefix (equivalent to the number of rows in a table). Each time it would loop through hundreds of thousands of files over NFS just to see if they were due to expire.</p>

<p>More details here:
<a href="http://www.yewchube.com/?p=58">http://www.yewchube.com/?p=58</a>
<a href="http://www.yewchube.com/?p=62">http://www.yewchube.com/?p=62</a></p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Fabien MARTY (fab) on 2009-07-17T11:03:39.000+0000</p> 
        <div class="body">
            <p>change Assignee because I'm inactive now</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Marc Bennewitz (private) (mabe) on 2010-07-20T01:35:16.000+0000</p> 
        <div class="body">
            <p>If we create an index file to store all tags and expire times for every entry it would slow down writes.</p>

<p>But for speed up cleaning by expire on ZF2 we are using filemtime to calculate the expire time of a cache entry.
Tags will be stored anymore on a metadata file but the new structure would allow you to set the tagging plugin on file storage which enables tagging support for every backend and is working with an index.</p>

<p>I would be happy if you could test the performance of the new filesystem storage.
-&gt; <a href="http://framework.zend.com/wiki/display/ZFPROP/Zend+Cache+2.0+-+Marc+Bennewitz">http://framework.zend.com/wiki/display/â€¦</a>
-&gt; <a href="http://github.com/marc-mabe/zf2/tree/cache">http://github.com/marc-mabe/zf2/tree/cache</a></p>

<p>Greetings</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Marc Bennewitz (private) (mabe) on 2012-01-09T20:02:53.000+0000</p> 
        <div class="body">
            <p>This issue won't be fixed in ZF1.</p>

<p>For ZF2 clearing should be faster because it's using GlobIterator instead of glob and don't need to read much files as ZF1 needs.
It's also searching (reading) files of each cache file to get the tags. If virtial tagging will be implemented this can be used for tagging, too.
-&gt; see ZF2-137</p>

        </div>
    </div>
    </div>

