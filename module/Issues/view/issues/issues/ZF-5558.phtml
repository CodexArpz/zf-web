<h2>ZF-5558: CLONE -Zend_Controller_Router_Route_Regex won't assemble when used with xml config</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2009-01-15T09:18:46.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-09-18T15:48:52.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Robert Hänsel (r-o-b-e-r-t)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Jan Pieper (jpieper)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Controller</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-7658">ZF-7658</a></li>
            <li><a href="/issues/browse/ZF-3474">ZF-3474</a></li>
            <li><a href="/issues/browse/ZF-2312">ZF-2312</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>When setting a reverse route through an xml config file, the assemble method of the regex route fails. The _getMappedValues method expects it's map to be in index =&gt; key form:</p>

<pre class="highlight"><code>
$index = (!is_int($key)) ? array_search($key, $this-&gt;_map, true) : $key;
</code></pre>

<p>this will fail when used with xml, which doesn't support this, a sample config could contain:</p>

<pre class="highlight"><code>

        1
    
        2
    </code></pre>

<p>By limitation of xml this is different from the ini config and manual setup. When parsing the url this isn't a problem, but the assemble method fails to get any parts from the  _getMappedValues method to parse into the query string and throws an exception. It can easily solved by modifying the method a little:</p>

<pre class="highlight"><code>
$index = (!is_int($key)) ? array_search($key, $this-&gt;_map, true) : $key;
if (false !== $index) {
    $return[$index] = $values[$key];
} elseif (isset($this-&gt;_map[$key])) {
    //non-numerical setup
    $return[$key] = $this-&gt;_map[$key];
}
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Robert Hänsel (r-o-b-e-r-t) on 2009-01-15T09:26:02.000+0000</p> 
        <div class="body">
            <p>As Maurice described in Bug #3474 there is a problem, when you try tu use Zend_Controller_Route_Regex with $router-&gt;addConfig($config, 'routes');</p>

<p>The Zend_Config object is initialized with a XML-file.</p>

<p>Due to the limitation of the xml-config object that only strings are returned.</p>

<p>All the mappings 1 ... are not recognized.</p>

<p>Robert</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Robert Hänsel (r-o-b-e-r-t) on 2009-01-15T09:39:59.000+0000</p> 
        <div class="body">
            <p>My fix for this problem:</p>

<p>in File Zend/Controller/Router/Route/Regex.php:131</p>

<pre class="highlight"><code>
       } elseif ($reversed) {


                $index = (!is_int ($key)) ? array_search ($key, $this-&gt;_map, true) : $key;
                if (false !== $index) {
                    $return[$index] = $values[$key];
                } elseif (array_key_exists($key, $this-&gt;_map)) {
                    //non-numerical setup
                    $return[(int)$this-&gt;_map[$key]] = $key;
                }


      } elseif ($preserve) {
                $return[$key] = $value;
      }
</code></pre>

<p>so long</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Robert Hänsel (r-o-b-e-r-t) on 2009-01-15T09:55:13.000+0000</p> 
        <div class="body">
            <p>In my last comment was a little Error ...</p>

<p>now it works correct</p>

<p>in File Zend/Controller/Router/Route/Regex.php:131</p>

<pre class="highlight"><code>

} elseif ($reversed) {


                $index = (!is_int ($key)) ? array_search ($key, $this-&gt;_map, true) : $key;
                if (false !== $index) {
                    $return[$index] = $values[$key];
                } elseif (array_key_exists($key, $this-&gt;_map)) {
                    //non-numerical setup
                    $return[(int)$this-&gt;_map[$key]] = $values[$key];
                }


      } elseif ($preserve) {
                $return[$key] = $value;
      }

</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by David Heidrich (bowlingx) on 2009-08-03T01:55:36.000+0000</p> 
        <div class="body">
            <p>Why still not fixed in ZF 1.9.0?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Robert Hänsel (r-o-b-e-r-t) on 2009-08-18T00:41:01.000+0000</p> 
        <div class="body">
            <p>My Solution for this:</p>

<p>Replace Zend/Config/Xml.php (L252-282) with this one:</p>

<pre class="literal">
// Search for children
        if (count($xmlObject-&gt;children()) &gt; 0) {
            foreach ($xmlObject-&gt;children() as $key =&gt; $value) {
                if (count($value-&gt;children()) &gt; 0 || count($value-&gt;children(self::XML_NAMESPACE)) &gt; 0) {
                    $value = $this-&gt;_toArray($value);
                } else if (count($value-&gt;attributes()) &gt; 0 || count($value-&gt;attributes(self::XML_NAMESPACE)) &gt; 0) {
                    $attributes = $value-&gt;attributes();
                    $attributesNS = $value-&gt;attributes(self::XML_NAMESPACE);

                    // Old Zend_Config Style
                    if (!isset($attributes['value']) &amp;&amp; isset($attributes['type'])) {
                        $value = $this-&gt;typeConvert($value, $attributes);
                    } elseif (isset($attributes['value'])&amp;&amp; isset($attributes['type'])) {
                        $value = $this-&gt;typeConvert($attributes['value'], $attributes);
                    // New Zend_Config Style (1.9+)
                    } elseif (!isset($attributesNS['value']) &amp;&amp; isset($attributesNS['type'])) {
                        $value = $this-&gt;typeConvert($value, $attributesNS);
                    } elseif (isset($attributesNS['value']) &amp;&amp; isset($attributesNS['type'])) {
                        $value = $this-&gt;typeConvert($attributesNS['value'], $attributesNS);
                    } elseif (isset($attributes['value'])) {
                        $value = (string) $attributes['value'];
                    } else {
                        $value = $this-&gt;_toArray($value);
                    }
                } else {
                     $value = $this-&gt;typeConvert($value, $value-&gt;attributes());
                }

                if (array_key_exists($key, $config)) {
                    if (!is_array($config[$key]) || !array_key_exists(0, $config[$key])) {
                        $config[$key] = array($config[$key]);
                    }

                    $config[$key][] = $value;
                } else {
                    $config[$key] = $value;
                }
            }
        } else if (!isset($xmlObject['extends']) &amp;&amp; !isset($nsAttributes['extends']) &amp;&amp; (count($config) === 0)) {
            // Object has no children nor attributes and doesn't use the extends
            // attribute: it's a string
            $config = (string) $xmlObject;
        }
</pre>

<p>And add the following new protected function:</p>

<pre class="literal">
/**
     * Cast the type in the given Format
     *
     * @param mixed $value
     * @param mixed $attributes
     * @return mixed - The converted Type
     */
    protected function typeConvert($value, $attributes = array()) {
        $value = trim((string) $value);
        if (count($attributes) &amp;&amp; isset($attributes['type'])) {
            switch (strtolower($attributes['type'])) {
                case 'int':
                case 'integer':
                    return (int) $value;
                case 'bool':
                case 'boolean':
                    return ($value == 'true')?true:false;
                case 'float':
                    return (float)$value;
                default:
                    return (string) $value;
            }
        }
        return $value;
    }
</pre>

<p>Now you can set the Type in the Config-XML File.</p>

<pre class="literal">
[...]
foo bar3306truefoo bar123
  [....]

[...]
</pre>

<p>Now you can just simply add the type that you want ...</p>

<p>It's possible to write the value as attribute e.g.  or to use 123 .. is both the same</p>

<p>If you use the ZF Namespace use  or 123</p>

<p>But dont mix it up  wont work</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Eugene (codemaker) on 2009-08-21T02:46:50.000+0000</p> 
        <div class="body">
            <p>I'm use default method getVariables in a __construct:</p>

<p>{quote}
public function __construct($route, $defaults = array(), $map = array(), $reverse = null)
 {
...
        $this-&gt;_map = $this-&gt;getVariables($this-&gt;_map);
}
{quote}</p>

<p>and all works fine</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Jan Pieper (jpieper) on 2009-09-18T15:44:50.000+0000</p> 
        <div class="body">
            <p>Fixed in r18294, see [ZF-7658].</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Dolf Schimmel (Freeaqingme) (freak) on 2009-09-18T15:48:52.000+0000</p> 
        <div class="body">
            <p>Assigning issue to ~jpieper as he fixed it.</p>

        </div>
    </div>
    </div>

