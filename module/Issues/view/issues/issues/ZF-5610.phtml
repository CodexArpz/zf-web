<h2>ZF-5610: Solution to fetching/saving localized Float values using Zend_Db</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2009-01-22T06:32:49.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-08-18T13:40:42.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Dmitry Pereslegin (dvp)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Dolf Schimmel (Freeaqingme) (freak)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Db</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-1457">ZF-1457</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Need solution to fetching/saving Float values using Zend_Db on locale-aware sites.</p>

<p>Currently, I have to perform transformations:</p>

<pre class="highlight"><code>
$row; // Zend_Db_Table_Row

$value = '0,6'; // Localized float value (eg from Form)
$formatOptions = array(
    'locale' =&gt; Zend_Registry::get('Zend_Locale')
);
$row-&gt;value = Zend_Locale_Format::getFloat($value, $formatOptions);
</code></pre>

<pre class="highlight"><code>
$row; // Zend_Db_Table_Row

$formatOptions = array(
    'locale' =&gt; new Zend_Locale('en_US') // locale of MySQL floats
);
$value = Zend_Locale_Format::getFloat($row-&gt;value, $formatOptions);
</code></pre>

<p>instead of simple:</p>

<pre class="highlight"><code>
$row; // Zend_Db_Table_Row

$value = '0,6'; // Localized float value (eg from Form)
$row-&gt;value = $value
</code></pre>

<pre class="highlight"><code>
$row; // Zend_Db_Table_Row

$value = $row-&gt;value;
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2009-01-22T08:39:49.000+0000</p> 
        <div class="body">
            <p>This is not a issue of Zend_Locale... erased component relation</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2009-01-22T08:41:44.000+0000</p> 
        <div class="body">
            <p>This is definitly the wrong place for float conversion.</p>

<p>Within the database as also within the code you should ALWAYS work and use the standard float representation.</p>

<p>ONLY when you have to DISPLAY or INPUT/OUTPUT the value to the user you must localize it.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Dmitry Pereslegin (dvp) on 2009-01-22T16:18:10.000+0000</p> 
        <div class="body">
            <p>Right, but ...
When fetching float values from Db, they receive in the string representation (eg "0.6")
before populating their to form need to perform each float value floatval(), otherwise they will be printed in the presentation of the database</p>

<pre class="highlight"><code>
...
setlocale(LC_ALL, 'un_US.UTF-8');
$locale = new Zend_Locale(Zend_Locale::BROWSER);
Zend_Registry::set('Zend_Locale', $locale);
...
</code></pre>

<pre class="highlight"><code>
$row; // Zend_Db_Table_Row

$floatCols = array('compression', 'piston_stroke'); // float cols (from metadata)

$form; // Zend_Form

$data = $row-&gt;toArray();

$formatOptions = array(
    'locale' =&gt; Zend_Registry::get('Zend_Locale')
);
foreach ($floatCols as $key)
    if (isset($data[$key]))
        $data[$key] = Zend_Locale_Format::toFloat($data[$key], $formatOptions);

$form-&gt;populate($data);
</code></pre>

<p>and when fetching data from Form i'am forced to perform transformation</p>

<pre class="highlight"><code>
$row; // Zend_Db_Table_Row

$floatCols = array('compression', 'piston_stroke'); // float cols (from metadata)

$form; // Zend_Form

$values = $form-&gt;getValues();

foreach ($floatCols as $floatCol)
{
    $value = $values[$floatCol];
    $values[$floatCol] = strlen($value) ? Zend_Locale_Format::getFloat($value) : null;
}

$row-&gt;setFromArray($values);
</code></pre>

<p>Too difficult for the standard tasks on the locale-aware sites</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Dmitry Pereslegin (dvp) on 2009-01-22T16:20:22.000+0000</p> 
        <div class="body">
            <p>Sorry, populate block code bad ... this is right</p>

<pre class="highlight"><code>
$row; // Zend_Db_Table_Row

$floatCols = array('compression', 'piston_stroke'); // float cols (from metadata)

$form; // Zend_Form

$data = $row-&gt;toArray();

foreach ($floatCols as $key)
    if (isset($data[$key]))
        $data[$key] = floatval($data[$key]);

$form-&gt;populate($data);
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Moritz Mertinkat (maurice) on 2009-01-23T01:42:27.000+0000</p> 
        <div class="body">
            <p>Yes, this is NOT an issue of Zend_Locale and should NOT become one.</p>

<p>What is needed here are INPUT and OUTPUT filters for Zend_Form_Element. I wonder why there isn't anything like that in Zend already.</p>

<p>$element-&gt;addInputFilter('toLocaleFloat');
$element-&gt;addOutputFilter('toRealFloat');</p>

<p>Further we should have $element-&gt;populate($value) which calls the InputFilter chain and something like $element-&gt;getValue() which applies the OutputFilter chain.</p>

<p>I'm going to add something like that in the next few days as I'm really in need of such a feature for a lot of fields (dates, currency values). If you're interested, just drop me a line. Maybe I'm also writing a proposal...</p>

<p>Regards,
Maurice</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Dolf Schimmel (Freeaqingme) (freak) on 2009-08-17T18:08:48.000+0000</p> 
        <div class="body">
            <p>I definitely would NOT want to see any such feature near Zend_Db. If I want to insert a value '0,03' I expect my rdbms to receive the value '0,03' and not 0.03 .</p>

<p>Same goes for retrieving values; if I have the value '0.03' in my Db, I expect to receive the value 0.03, and not '0,03'. What happens if I want to do some calculations with the floats zend_db returned? Kinda unhandy if they contain comma's.</p>

<p>@Moritz Zend_Form already has the getValues() method, which you can use to apply such a filter.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2009-08-17T23:58:34.000+0000</p> 
        <div class="body">
            <p>Just one note:
There is a Zend_Filter_LocalizedToNormalizes which can also convert localized float values to normalized ones and another filter for the reverse conversion.</p>

<p>And filters can be applied to Zend_Form elements as also be used standalone.</p>

<p>In my opinion this issue can be closed as not an issue.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Dolf Schimmel (Freeaqingme) (freak) on 2009-08-18T13:40:27.000+0000</p> 
        <div class="body">
            <p>I'm closing this issue as not-an-issue as the general consensus (here, and on IRC) seems to be that it is definitely not something to be done within Zend_Db, and that such functionality is already provided in places where it's much better located.</p>

        </div>
    </div>
    </div>

