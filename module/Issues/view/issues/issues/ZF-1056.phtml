<h2>ZF-1056: simulating session data using Zend_Session_Namespace support for expiring data</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2007-03-15T10:43:03.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2007-07-05T14:43:56.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Gavin (gavin)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Session</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Feedback wanted.</p>

<p>Perhaps very few developers have need of this feature that provides
a form of "logical" vs. "physical" session data?</p>

<p>{quote}
-------- Original Message --------
Subject:    [fw-auth] Zend_Session_Namespace - small patch
Date:   Tue, 13 Mar 2007 18:37:04 -0700
From:   Gavin Vess <a href="mailto:gavin@zend.com">gavin@zend.com</a>
To:     Zend Auth List <a href="mailto:fw-auth@lists.zend.com">fw-auth@lists.zend.com</a></p>

<p>We currently have <em>transparent</em> read access to data expiring at the end 
of a session that works just like accessing any other key in a session 
namespace.  However, there is no write access to this set of data.<br />
Write access would support the concept of logical session data.  For 
example, there is no method in Zend_Session_Namespace:</p>

<p>public function setTemp($name, $value)</p>

<p>With such a method, we can keep temporary, computed "session" data 
grouped together with regular persistent session data, without making 
the temporary data persistent.  Then, we can use all the other nice 
features, like magic __get() with the computed session data.  For those 
with complex situations where some computed data simply can not be 
stored along with regular session data, this patch provides a mechanism 
to "splice in" and simulate persistence of "out of band" session data, 
<em>without</em> breaking the session namespace concept.  The rest of the 
application will not be burdened with unnecessary logic to determine 
where to find this computed session data.</p>

<p>It sets the variable in the _expiredData[] section of the private static 
variable.</p>

<p>Thoughts?</p>

<p>Cheers,
Gavin
{quote}</p>

<pre class="highlight"><code>
    /**
    * setTemp() - method to set a variable/value in this object's 
namespace, but place it in the
    * expired section, so that the value will not persist to the next 
request.
    *
    * @param string $name - programmatic name of a key, in a 
 pair in the current namespace
    * @param mixed $value - value in the  pair to assign to 
the $name key
    * @throws Zend_Session_Exception
    * @return $this
    */
   protected function setTemp($name, $value)
   {
       if (isset(self::$_namespaceLocks[$this-&gt;_namespace])) {
           throw new Zend_Session_Exception('This session/namespace has 
been marked as read-only.');
       }

       if ($name === '') {
           throw new Zend_Session_Exception("The '$name' key must be a 
non-empty string");
       }

       if (parent::$_writable === false) {
           throw new 
Zend_Session_Exception(parent::_THROW_NOT_WRITABLE_MSG);
       }

       $name = (string) $name;

       self::$_expiringData[$this-&gt;_namespace][$name] = $value;

       return $this;
   }
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Gavin (gavin) on 2007-03-22T18:47:29.000+0000</p> 
        <div class="body">
            <p>Interest in this tiny feature is completely non-existent at this time.</p>

        </div>
    </div>
    </div>

