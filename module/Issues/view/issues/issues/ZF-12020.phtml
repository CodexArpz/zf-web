<h2>ZF-12020: Modify Zend_Form::isValid() to ignore flagged elements</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2012-01-23T18:43:13.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-02-26T19:19:45.000+0000</dd>

    <dt>Status:</dt>
    <dd>Open</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Derek Gray (dgray90)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Christian Albrecht (alab)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Form</li>
            <li>validating</li>
            <li>zf-crteam-review</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-6909">ZF-6909</a></li>
            <li><a href="/issues/browse/ZF-10056">ZF-10056</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p><a href="http://framework.zend.com/issues/browse/ZF-2661">http://framework.zend.com/issues/browse/ZF-2661</a>
<a href="http://framework.zend.com/issues/browse/ZF-6909">http://framework.zend.com/issues/browse/ZF-6909</a></p>

<p>In both of these older tickets, Matthew Weier O'Phinney states that by setting a form element's ignore status to 'true', both Zend_Form::getValues() and Zend_Form::isValid() will ignore that element. This is indeed the case for Zend_Form::getValues(), but Zend_Form::isValid() does not effectively ignore user input from elements that are supposed to be ignored. A glance at the source code confirms that the phrase 'ignore' appears nowhere in the isValid() function of either Zend_Form or Zend_Form_Element.</p>

<p>Say I have a read-only 'due date' field which is flagged to be ignored -- the user might manipulate this field using a browser such as Chrome, and when the isValid() method is called on the form, the value of 'due date' is set to the user-modified value. Not exactly the behavior one might expect.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Derek Gray (dgray90) on 2012-01-24T03:43:18.000+0000</p> 
        <div class="body">
            <p>I suppose there are instances where a developer may want to ignore an element when calling getValues() but still validate that element (CSRF, as mentioned by Adam Lundrigan. (<a href="http://framework.zend.com/issues/browse/ZF-10056">http://framework.zend.com/issues/browse/ZF-10056</a>)) Perhaps a new property/getter/setter can be defined? Something along the lines of $element-&gt;setProtected(true)?</p>

<p>Or might the populate() method be patched to NOT populate fields flagged as 'ignore'? This way, one might write:</p>

<p>if ($this-&gt;_request-&gt;getPost()){
    $this-&gt;form-&gt;populate($this-&gt;_request-&gt;getPost());
    if ($this-&gt;form-&gt;isValid()){
        // Do whatever suits you here
    }
}</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Derek Gray (dgray90) on 2012-01-24T03:52:34.000+0000</p> 
        <div class="body">
            <p>Oh, that's right, isValid() requires an array. The form can't just check itself after being populated, I guess. Nevermind that idea.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Derek Gray (dgray90) on 2012-01-25T22:21:20.000+0000</p> 
        <div class="body">
            <p>I don't know how to upload patch files or whatever. But I see nobody is apparently checking these issues. Perhaps because they are busy developing ZF which I can greatly appreciate. :)</p>

<p>Anyways, what I have done is patched Zend_Form and Zend_Form_Element as such: In Zend_Form::isValid() and Zend_Form::isValidPartial(), following lines of code have been added:</p>

<pre><code>    foreach ($this-&gt;getElements() as $key =&gt; $element) { //Included to show where I have inserted
        if ($element-&gt;getProtect()) {
            continue;
        }
</code></pre>

<p>And then in Zend_Form_Element, this has been added:</p>

<pre><code>/**
 * Protect flag (causes an element to be ignored during validation)
 * @var bool
 */
protected $_protect = false;

/**
 * Set protect flag (causes an element to be ignored during validation)
 *
 * @param  bool $flag
 * @return Zend_Form_Element
 */
public function setProtect($flag)
{
    $this-&gt;_protect = (bool) $flag;
    return $this;
}

/**
 * Get protect flag (used when retrieving values at form level)
 *
 * @return bool
 */
public function getProtect()
{
    return $this-&gt;_protect;
}
</code></pre>

<p>If anyone knows how I can turn these into code blocks, please let me know. I hope the development team considers this addition and the functionality it will provide without conflicting with CSRF and other element that may need to be ignored while still validated.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Frank Br√ºckner (frosch) on 2012-01-26T10:17:53.000+0000</p> 
        <div class="body">
            <p>{quote}If anyone knows how I can turn these into code blocks, please let me know.{quote}
Press the question mark below the text area and you get the help for the markup.</p>

<p>Here is an example:</p>

<pre class="highlight"><code></code></pre>

<p>`</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Derek Gray (dgray90) on 2012-01-26T16:58:05.000+0000</p> 
        <div class="body">
            <p>Thank you so much Frank. Now I will be able to provide a better look at the 'patch'.</p>

<pre class="highlight"><code>
    /**
     * Validate the form
     *
     * @param  array $data
     * @return boolean
     */
    public function isValid($data)
    {
        if (!is_array($data)) {
            require_once 'Zend/Form/Exception.php';
            throw new Zend_Form_Exception(__METHOD__ . ' expects an array');
        }
        $translator = $this-&gt;getTranslator();
        $valid      = true;
        $eBelongTo  = null;

        if ($this-&gt;isArray()) {
            $eBelongTo = $this-&gt;getElementsBelongTo();
            $data = $this-&gt;_dissolveArrayValue($data, $eBelongTo);
        }
        $context = $data;
        foreach ($this-&gt;getElements() as $key =&gt; $element) {
            if ($element-&gt;getProtect()) {
                continue;
            }
            if (null !== $translator &amp;&amp; $this-&gt;hasTranslator()
                    &amp;&amp; !$element-&gt;hasTranslator()) {
                $element-&gt;setTranslator($translator);
            }
            $check = $data;
            if (($belongsTo = $element-&gt;getBelongsTo()) !== $eBelongTo) {
                $check = $this-&gt;_dissolveArrayValue($data, $belongsTo);
            }
            if (!isset($check[$key])) {
                $valid = $element-&gt;isValid(null, $context) &amp;&amp; $valid;
            } else {
                $valid = $element-&gt;isValid($check[$key], $context) &amp;&amp; $valid;
                $data = $this-&gt;_dissolveArrayUnsetKey($data, $belongsTo, $key);
            }
        }
        foreach ($this-&gt;getSubForms() as $key =&gt; $form) {
            if (null !== $translator &amp;&amp; !$form-&gt;hasTranslator()) {
                $form-&gt;setTranslator($translator);
            }
            if (isset($data[$key]) &amp;&amp; !$form-&gt;isArray()) {
                $valid = $form-&gt;isValid($data[$key]) &amp;&amp; $valid;
            } else {
                $valid = $form-&gt;isValid($data) &amp;&amp; $valid;
            }
        }

        $this-&gt;_errorsExist = !$valid;

        // If manually flagged as an error, return invalid status
        if ($this-&gt;_errorsForced) {
            return false;
        }

        return $valid;
    }

    /**
     * Validate a partial form
     *
     * Does not check for required flags.
     *
     * @param  array $data
     * @return boolean
     */
    public function isValidPartial(array $data)
    {
        $eBelongTo  = null;

        if ($this-&gt;isArray()) {
            $eBelongTo = $this-&gt;getElementsBelongTo();
            $data = $this-&gt;_dissolveArrayValue($data, $eBelongTo);
        }

        $translator = $this-&gt;getTranslator();
        $valid      = true;
        $context    = $data;

        foreach ($this-&gt;getElements() as $key =&gt; $element) {
            if ($element-&gt;getProtect()) {
                continue;
            }
            $check = $data;
            if (($belongsTo = $element-&gt;getBelongsTo()) !== $eBelongTo) {
                $check = $this-&gt;_dissolveArrayValue($data, $belongsTo);
            }
            if (isset($check[$key])) {
                if (null !== $translator &amp;&amp; !$element-&gt;hasTranslator()) {
                    $element-&gt;setTranslator($translator);
                }
                $valid = $element-&gt;isValid($check[$key], $context) &amp;&amp; $valid;
                $data = $this-&gt;_dissolveArrayUnsetKey($data, $belongsTo, $key);
            }
        }
        foreach ($this-&gt;getSubForms() as $key =&gt; $form) {
            if (null !== $translator &amp;&amp; !$form-&gt;hasTranslator()) {
                $form-&gt;setTranslator($translator);
            }
            if (isset($data[$key]) &amp;&amp; !$form-&gt;isArray()) {
                $valid = $form-&gt;isValidPartial($data[$key]) &amp;&amp; $valid;
            } else {
                $valid = $form-&gt;isValidPartial($data) &amp;&amp; $valid;
            }
        }

        $this-&gt;_errorsExist = !$valid;
        return $valid;
    }
</code></pre>

<pre class="highlight"><code>
    /**
     * Protect flag (causes an element to be ignored during validation)
     * @var bool
     */
    protected $_protect = false;

    /**
     * Set protect flag (causes an element to be ignored during validation)
     *
     * @param  bool $flag
     * @return Zend_Form_Element
     */
    public function setProtect($flag)
    {
        $this-&gt;_protect = (bool) $flag;
        return $this;
    }

    /**
     * Get protect flag (used when retrieving values at form level)
     *
     * @return bool
     */
    public function getProtect()
    {
        return $this-&gt;_protect;
    }
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Derek Gray (dgray90) on 2012-01-26T23:03:41.000+0000</p> 
        <div class="body">
            <p>Yeah... just checked the ZF 2.0.0 Beta 2 source and this feature is not there either.</p>

<p>Please, ZF team, consider this simple and unobtrusive improvement!</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Frank Br√ºckner (frosch) on 2012-01-27T07:44:43.000+0000</p> 
        <div class="body">
            <p>@Derek
The work on Zend_Form 2.0 has not started yet!</p>

<p>Can you provide some unit tests for your patch?
You must sign the <a href="http://framework.zend.com/wiki/display/ZFPROP/Contributor+License+Agreement">CLA</a>, otherwise your patch is not accepted.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Derek Gray (dgray90) on 2012-01-27T14:40:10.000+0000</p> 
        <div class="body">
            <p>I see. I will read about the CLA and unit testing right away. Thank you!</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Derek Gray (dgray90) on 2012-01-27T16:44:26.000+0000</p> 
        <div class="body">
            <p>Okay. I will sign and submit the CLA. And honestly, Zend can have all rights to this. It's nothing. I looked at unit testing, and while intriguing, at this time I must put full focus on the application I am currently developing. I don't know when or if I could get to a unit test -- but this is an <em>extremely</em> simple patch.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Adam Lundrigan (adamlundrigan) on 2012-02-25T19:17:51.000+0000</p> 
        <div class="body">
            <p>Derek:  Could you provide a diff against SVN trunk?  I can take a look and see if it's something that we can push for ZF 1.12, and if so I don't mind writing the unit tests to go with it.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Adam Lundrigan (adamlundrigan) on 2012-02-25T19:24:22.000+0000</p> 
        <div class="body">
            <p>I believe that this will also be addressed in ZF2's Zend\Form component.  The RFC (<a href="http://framework.zend.com/wiki/display/ZFDEV2/RFC+-+Forms">here</a>) has this as part of it's design goals:
{quote}
* MUST allow partial validations
** SHOULD allow indicating which specific elements must be valid
{quote}</p>

<p>Could you have a quick read-through that RFC to ensure that i'm correct in thinking that it takes into account the situation you're encounting?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Derek Gray (dgray90) on 2012-02-25T23:19:45.000+0000</p> 
        <div class="body">
            <p>That RFC does seem to address it. Instead of saying 'indicating which specific elements must be valid', what I have implemented is 'indicating which specific elements should not be validated/populated with user input.'</p>

<p>Here are this difs for 1.11.11:</p>

<pre class="highlight"><code>

--- Element.php 2012-02-25 17:17:19.000000000 -0600
+++ Element.php.orig    2012-02-25 17:07:04.000000000 -0600
@@ -121,12 +121,6 @@
      * @var bool
      */
     protected $_ignore = false;
-
-    /**
-     * Protect flag (causes an element to be ignored during validation)
-     * @var bool
-     */
-    protected $_protect = false;

     /**
      * Does the element represent an array?
@@ -783,28 +777,6 @@
     {
         return $this-&gt;_ignore;
     }
-
-    /**
-     * Set protect flag (causes an element to be ignored during validation)
-     *
-     * @param  bool $flag
-     * @return Zend_Form_Element
-     */
-    public function setProtect($flag)
-    {
-        $this-&gt;_protect = (bool) $flag;
-        return $this;
-    }
-
-    /**
-     * Get protect flag (used when retrieving values at form level)
-     *
-     * @return bool
-     */
-    public function getProtect()
-    {
-        return $this-&gt;_protect;
-    }

     /**
      * Set flag indicating if element represents an array
</code></pre>

<pre class="highlight"><code>
--- Form.php    2012-02-25 17:02:15.000000000 -0600
+++ Form.php.orig       2012-02-25 17:06:53.000000000 -0600
@@ -2238,9 +2238,6 @@
         }
         $context = $data;
         foreach ($this-&gt;getElements() as $key =&gt; $element) {
-            if ($element-&gt;getProtect()) {
-                continue;
-            }
             if (null !== $translator &amp;&amp; $this-&gt;hasTranslator()
                     &amp;&amp; !$element-&gt;hasTranslator()) {
                 $element-&gt;setTranslator($translator);
@@ -2299,9 +2296,6 @@
         $context    = $data;

         foreach ($this-&gt;getElements() as $key =&gt; $element) {
-            if ($element-&gt;getProtect()) {
-                continue;
-            }
             $check = $data;
             if (($belongsTo = $element-&gt;getBelongsTo()) !== $eBelongTo) {
                 $check = $this-&gt;_dissolveArrayValue($data, $belongsTo);

</code></pre>

<p>Thank you for your response and attention, I greatly appreciate it. :)</p>

        </div>
    </div>
    </div>

