<h2>ZF-2752: Zend_Registry needs an unset method.</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2008-02-28T08:29:02.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2008-03-07T16:57:30.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Roberto Bouza (bouzafr)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                julien PAULI (doctorrock83)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Registry</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Zend_Registry has it's own set method which uses "offsetSet". There is a need to sometimes delete a reference on the Registry and just assigning "null" to it doesn't do it.</p>

<p>So I think that creating a simple very basic method "delete" - because unset is a reserved word for PHP - we can accomplish this. I did the changes on my local code and it's working wonderful here is the little piece of code I added to Zend_Registry.php</p>

<pre class="highlight"><code>
/**
     * Unsetter method, basically same as offsetUnset().
     *
     * This method can be called from an object of type Zend_Registry, or it
     * can be called statically.  In the latter case, it uses the default
     * static instance stored in the class.
     *
     * @param string $index The location in the ArrayObject in which to unset
     *   the value.
     * @return void
     */
    public static function delete($index)
    {
        $instance = self::getInstance();
        $instance-&gt;offsetUnset($index);
    }
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Darby Felton (darby) on 2008-02-28T10:42:33.000+0000</p> 
        <div class="body">
            <p>It may be worth noting that the <a href="">www.martinfowler.com/eaaCatalog/registry.html</a>" rel="nofollow"&gt;Registry pattern, according to Martin Fowler, does not provide the ability to remove items from the Registry. That may not mean much to us, but having a use case to explain why it's needed might help.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by julien PAULI (doctorrock83) on 2008-02-28T11:06:31.000+0000</p> 
        <div class="body">
            <p>Have you tried that use case ?</p>

<p>public function testUnsetValueInRegistry()
    {
        $registry = Zend_Registry::getInstance();
        $registry-&gt;set('foo','bar');
        $this-&gt;assertNotNull($registry-&gt;offsetGet('foo'));
        unset($registry['foo']);
        $this-&gt;assertFalse($registry-&gt;offsetExists('foo'));
    }</p>

<p>It actually works for me, as Zend_Registry extends ArrayObject ...</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Roberto Bouza (bouzafr) on 2008-02-28T14:25:02.000+0000</p> 
        <div class="body">
            <p>Julien,</p>

<p>Just to answer both comments:</p>

<p>1.- No I haven't. Your solution is good. It works, but don't you think we should be accessing the object methods per se instead of the ArrayObject? Just to keep the abstraction level as it is. - just a thought -</p>

<p>2.- To answer Darby, I think is worth it. Look a this example (which is the problem we are having):</p>

<p>I'm creating a Zend_Registry and storing there a few generic objects that I need through all the application. One of this object is a Zend_Db and a Zend_Log implementation. On top of this we have a Zend_Cache object which is storing on the filesystem this registry - as a serialized item -.</p>

<p>As we know the Db and Log cannot be serialized because they have open descriptors to the filesystem or the DB. So this two objects on particular they need to be removed from the registry so it can be stored on the cache.</p>

<p>Now I tried to set the variable to 'null' for my key let say $resgistry-&gt;set('db', null) and still doing this I get an error from the PDO saying it cannot be serialized (So i'm guessing some reference is being made on the ArrayObject that the null is not getting rid of) , but changing the code using offsetUnset I was able to remove that entry and the object gets stored.</p>

<p>I hope this helps.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by julien PAULI (doctorrock83) on 2008-02-29T02:46:55.000+0000</p> 
        <div class="body">
            <p>That's strange.
When you set a null value to a named index in the registry, it will put null in it ...</p>

<p>I just tested that and it worked. No copies are made anywhere, Zend_Registry acts by reference (and we like that behavior).</p>

<p>The only difference between setting null and unsetting, is that when you set null, the key word still stays in the registry with the associated value of NULL.
When you unset, then both the key and the value are destroyed.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Roberto Bouza (bouzafr) on 2008-03-07T15:22:25.000+0000</p> 
        <div class="body">
            <p>Julien,</p>

<p>I think you can close this issue. I'm using your approach:</p>

<p>unset($registry['db'])</p>

<p>This one is the one that is working fine for me.</p>

<p>Thank you.</p>

        </div>
    </div>
    </div>

