<h2>ZF-672: Zend_Registry needs its set() and has() methods back</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2006-12-20T10:32:20.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2007-07-05T14:43:35.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>0.7.0 (18/Jan/07)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Gavin (gavin)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Registry</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Was it an oversight that Zend_Registry lost its set() and has() methods when it was refactored to extend ArrayObject, despite still having a corresponding get() method?  I don't know about everyone else, but I prefer to pass around a registry object explicitly rather than rely on the static Zend::register()/isRegistered() methods.  I would really like these methods back.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Gavin (gavin) on 2006-12-26T19:37:02.000+0000</p> 
        <div class="body">
            <p>$ini_array = parse_ini_file('your_stuff.ini'); // purely optional 
// ArrayObject::ARRAY_AS_PROPS enables accessing values using $registry-&gt;$indexName, in addition to $registry[$indexName].
// However, beware of name collisions, if you extend Zend_Registry and add private variables.
$registry = new Zend_Registry($ini_array, ArrayObject::ARRAY_AS_PROPS); 
Zend::initRegistry($registry);</p>

<p>See the comments:
<a href="http://www.php.net/manual/en/function.arrayobject-construct.php">http://php.net/manual/en/…</a></p>

<p>Does this technique provide the desired features without subclassing Zend_Registry?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Ratzloff (mratzloff) on 2006-12-26T22:36:56.000+0000</p> 
        <div class="body">
            <p>Per Andi's comment on the list, it seems that this functionality is already present without passing this constant.  I tried it before and it seemed to work.  In any event, whether or not the parameter is required, that API works for me.  Thanks, Gavin.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Gavin (gavin) on 2006-12-27T14:25:39.000+0000</p> 
        <div class="body">
            <p>The documentation for SPL classes are weak, but show the optional $flag parameter defaulting to a value that prevents access to elements in an ArrayObject as properties:</p>

<p>__construct ($array, $flags=0, $iterator_class="ArrayIterator")</p>

<p><a href="http://www.php.net/~helly/php/ext/spl/classArrayObject.html">http://php.net/~helly/php/…</a></p>

<p>I've added an example to the documentation for Zend_Registry.
See the Fisheye link for changeset information.</p>

        </div>
    </div>
    </div>

