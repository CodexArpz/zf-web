<h2>ZF-2289: Multiple Assertions</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2007-12-10T05:05:31.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2008-03-21T16:25:37.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.5.0 (17/Mar/08)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Marcos Gil Fuertes (marcis)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Darby Felton (darby)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Acl</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>I think it would be interesting if it was possible to assign more than one assertion in the allow and deny methods (4th parameter). Or maybe a new method to add more assertions...</p>

<p>Of course you can implement a new Zend_Acl_Assert_Interface class calling multiple asserts, but it's boring.</p>

<p>Thanx</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Darby Felton (darby) on 2007-12-10T12:30:11.000+0000</p> 
        <div class="body">
            <p>I think that the proper solution is, as you suggested, to implement the assertion method... however you want, including assertion chains. This is actually quite trivial to do, and I don't see a compelling need to bloat the API with this. If you disagree, please feel free to reopen the issue with more feedback. Thank you! :)</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Marcos Gil Fuertes (marcis) on 2007-12-12T06:35:59.000+0000</p> 
        <div class="body">
            <p>OK, thanks.</p>

<p>I was implementing a new class (calling multiple asserts) for each combination of asserts in the application. Now, I realized it can be done by implementing a generic 'MultiAssert' class like this:</p>

<pre class="highlight"><code> 
class MultiAssert implements Zend_Acl_Assert_Interface {

    protected $_asserts;

    public function __construct(array $asserts) {
        foreach ($asserts as $assert) {
            Zend_Loader::autoload($assert);
            $this-&gt;_asserts[] = new $assert();
        }
    }

    public function assert(Zend_Acl $acl, Zend_Acl_Role_Interface $role = null,
                           Zend_Acl_Resource_Interface $resource = null, $privilege = null) {
        $result = TRUE;
        foreach ($this-&gt;_asserts as $assert) {
            $result &amp;= $assert-&gt;assert($acl, $role, $resource, $privilege);
        }
        return $result ;
    }
}
</code></pre>

        </div>
    </div>
    </div>

