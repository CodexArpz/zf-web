<h2>ZF-12094: Critical injection-possibility with InArray-validation (false positive)</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2012-03-10T10:05:39.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-07-20T19:16:41.000+0000</dd>

    <dt>Status:</dt>
    <dd>Open</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Pádraic Brady (padraic)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Form</li>
            <li>Zend_Validate</li>
            <li>After1.12.0</li>
            <li>zf-crteam-review</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-11812">ZF-11812</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>The automatic inArray validator when using multioptions is vulnerable to string-injection if one of the values in the multioption array is 0. With the code below I would be able to inject any string as value due to (int)'string' resulting in 0 and therefore is accepted by in_array.</p>

<p>More info about this issue at PHP.net: <a href="http://php.net/manual/en/function.in-array.php#104501">http://php.net/manual/en/…</a></p>

<pre class="highlight"><code>
        $this-&gt;setOptions(array(
            'method'  =&gt; 'post',
            ),
            'elements'    =&gt; array(
                'sex' =&gt; array('select', array(
                    'label'         =&gt; 'Sex',
                    'required'      =&gt; true,
                    'multioptions'   =&gt; array(
                        ''              =&gt; 'Select',
                        0               =&gt; 'Male',
                        1               =&gt; 'Female',
                    )
                ))
            )
        )
</code></pre>

<p>Forcing the values in the haystack to strings fixes this issue (Note: Forcing them in the multioptions array have no effect).</p>

<pre class="highlight"><code>
                    'validators' =&gt; array(
                        array('InArray', false, array(array((string)0, (string)1)))
                    )
</code></pre>

<p>Enabling strict checking will not work as the haystack contains integers while the needle from the POST-data is a string.</p>

<pre class="highlight"><code>
                    'validators' =&gt; array(
                        array('InArray', false, array(array(0, 1), 'strict'))
                    )
</code></pre>

<p>As the browser sends back the POST-data as strings I would recommend to alter Zend_Validate_InArray::isValid() to force the haystack values to be strings.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Adam Lundrigan (adamlundrigan) on 2012-06-05T02:16:03.000+0000</p> 
        <div class="body">
            <p>Same type of bug as reported in ZF-11812, different location.</p>

<p>What is the best course of action here?  Should we modify the InArray validator in the method specified?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Rob Allen (rob) on 2012-06-13T20:41:26.000+0000</p> 
        <div class="body">
            <p>After 1.12 as not sure what the implications of this change are.</p>

        </div>
    </div>
    </div>

