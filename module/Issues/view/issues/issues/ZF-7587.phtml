<h2>ZF-7587: Amf setClass() ignores pre-initialized objects and creates new objects</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2009-08-13T11:30:56.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2011-05-13T20:56:03.000+0000</dd>

    <dt>Status:</dt>
    <dd>Open</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Chris Priebe (chris.priebe)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Wade Arnold (wadearnold)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Amf</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-5393">ZF-5393</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
        <li><a href="/issues/secure/attachment/12905/reuse_objects_in_set_class.patch">reuse_objects_in_set_class.patch</a></li>
        </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>I need to set paramets into the __constructor of my PHP object before passing it off to Zend to use it as a Remote Procedure Call.</p>

<p>This works in Zend_Json but not in Zend_Amf.  To do this with the Zend_JSON class I just create my object and pass it along as $this-&gt;server-&gt;setClass($object) and it will use that object in Zend/Server/Abstract.php method _displatch for $object = $invocable-&gt;getObject();</p>

<p>Instead the Zend_Amf_Server class overrides the Abstract _dispatch call and ignores the class I passed it.
Instead it always calls $object = $info-&gt;getDeclaringClass()-&gt;newInstance();</p>

<p>Thus is creates  a new instance and I am unable to use dependancy injection to establish my object.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Georg W채chter (georgwaechter) on 2010-03-16T14:00:16.000+0000</p> 
        <div class="body">
            <p>i ran into the same problem as i use dependency injection for my objects too. I wrote a simple patch that solves this issue. Please have a look ...</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Georg W채chter (georgwaechter) on 2010-03-16T14:00:48.000+0000</p> 
        <div class="body">
            <p>the patch attached</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wade Arnold (wadearnold) on 2010-03-18T10:52:55.000+0000</p> 
        <div class="body">
            <p>Any ideas for a good way of writing a test case for this behavior?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Georg W채chter (georgwaechter) on 2010-03-18T11:20:12.000+0000</p> 
        <div class="body">
            <p>yes, i'm going to write one or two unit tests ..</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Georg W채chter (georgw) on 2011-05-13T20:56:03.000+0000</p> 
        <div class="body">
            <p>Ok. The patch is now more than one year old and sadly i hadn't the time to setup the full Zend Framework develpoment environment together with its unit tests to write another one for this use case.</p>

<p>But as the comments of the implemented Zend Server Interface state the setClass method behaves currently not as expected. Passing objects should be a valid option. I appreciate if we could commit this patch to trunk.</p>

<p>By the way i'll contribute another patch that fixes this behavior for Zend_Rest_Server too!</p>

        </div>
    </div>
    </div>

