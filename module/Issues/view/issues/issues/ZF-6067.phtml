<h2>ZF-6067: Implementing IteratorAggregate in custum Arraycollection results in empty result on the Flex side</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2009-03-19T09:43:28.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-11-20T20:53:03.000+0000</dd>

    <dt>Status:</dt>
    <dd>Closed</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Florian (flocki)
            </dd>

    <dt>Assignee:</dt>
    <dd>
        None
                    </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Amf</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>I' writing an ArrayCollection Object in php.  Which looks like this:
class RemoteObject extends Object {
    function getASClassName() {
        return get_class($this);
    }
}</p>

<p>/**
 * PHP ArrayCollection Class. implementing the IteratorAggregate interface 
 * breaks the automatic mapping to AS<br />
 *
 */
class ArrayCollection extends RemoteObject  implements  IteratorAggregate, ArrayAccess, Countable {</p>

<pre><code>public $source = array();

function __construct($source = array()){
    if(!is_array($source)) {
        $source = array();
    }
    $this-&gt;source = $source;    
}
/**
 * add an item to the ArrayCollection
 *
 * @param mixed $item
 * @param mixed $num
 */
function addItem($item,$num = null) {
    if(is_null($num)) {
        $this-&gt;source[]=$item;
    } else {
        $this-&gt;source[$num]=$item;
    }
}
/**
 * emulate AS3 properties 
 *
 * @param string $member
 * @return mixed

function __get($member) {
    switch ($member) {
        case 'length':
            //print debug("acessing length");
            return count($this-&gt;source);
            break;
        default:
            break;
    }
}
</code></pre>

<p>*/
    /**
     * The following cuntions allow treatment of the Arraycollection class 
     * as if it was an array. They implement the ArrayAccess interface
     */
    function offsetExists($offset) {
        return isset($this-&gt;source[$offset]);
    }
    function offsetGet($offset) {
        return $this-&gt;source[$offset];
    }
    function offsetSet($offset,$value) {
        //print debug_obj($value,sprintf('setting new value at %s',$offset));
        $this-&gt;source[$offset] = $value;
    }
    function offsetUnset($offset) {
        unset($this-&gt;source[$offset]);
    }</p>

<pre><code>/**
 * Impelent countable
 */
function count() {
    return count($this-&gt;source);
}

/**
 * Create a new iterator from an ArrayCollection instance
 *
 * @return  ArrayIterator
 */
function getIterator() {
    return new  ArrayIterator($this-&gt;source);
}
</code></pre>

<p>}</p>

<p>however, if the "IteratorAggregate" interface is implemented the result on the Flex side is always empty.</p>

<p>e.g.: returning new ArrayCollection(array('a'=&gt;'A','b'=&gt;'B'));</p>

<p>produces the following erros in the Flex debugger.</p>

<p>Error: Unknown Property: 'a'.
Error: Unknown Property: 'b'.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Rob Allen (rob) on 2012-11-20T20:53:03.000+0000</p> 
        <div class="body">
            <p>Bulk change of all issues last updated before 1st January 2010 as "Won't Fix".</p>

<p>Feel free to re-open and provide a patch if you want to fix this issue.</p>

        </div>
    </div>
    </div>

