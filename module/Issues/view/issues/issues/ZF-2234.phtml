<h2>ZF-2234: Invalid use of optional parameters</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2007-11-26T06:49:41.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2008-05-08T09:31:35.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li> 1.5.2 (15/May/08)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Darby Felton (darby)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Acl</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>There are some methods (full list below) in Zend_Acl class, where optional parameters are used incorrectly - they are not placed on the end of the parameters list, so they are followed by mandatory parameters, which actually makes optional parameters implicitly mandatory. Looks like this is done intentionally to allow passing NULL's instead of actual classes, but has a huge side effect when using Reflection on Zend_Acl.</p>

<p>Here is an example of the wrong behaviour when reflecting the Zend_Acl::_roleDFSVisitAllPrivileges() method:</p>

<p>$method = new ReflectionMethod('Zend_Acl', '_roleDFSVisitAllPrivileges');
$params = $method-&gt;getParameters();
echo $params[1]-&gt;isOptional() ? 'true' : 'false'; // is $resource parameter optional?</p>

<p>The output is 'false', though 'true' is expected.</p>

<p>I'm not actually sure if this is a ReflectionMethod implementation bug, or a Zend_Acl bug, but it looks like a controversial design to me.</p>

<p>Here is the list of affected methods I discovered:
_roleDFSVisitAllPrivileges
_roleDFSOnePrivilege
_roleDFSVisitOnePrivilege</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-03-25T20:40:00.000+0000</p> 
        <div class="body">
            <p>Please categorize/fix as needed.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Marc Jakubowski (octavian) on 2008-03-27T05:24:06.000+0000</p> 
        <div class="body">
            <p>I don´t think the mentioned method signatures should be changed, because there is some kind of parameter convention in all Acl methods like:</p>

<p>"function ($role, $resource, ...)"</p>

<p>except in "_getRules()" and "_getRuleTypes". If any parameter orders should be changed, then those two.</p>

<p>So I´d vote to not fix this issue in favor of a consistent api, that would be more useful to the users.</p>

<p>Regards</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by George Miroshnikov (laggyluke) on 2008-03-27T05:38:24.000+0000</p> 
        <div class="body">
            <p>These methods are protected and AFAIK Zend_Acl is not intended to be extended widely, so personally I don't see any issues with API inconsistency that can affect users.
On the other side, having marginally-valid PHP code in enterprise-level framework such as ZF is IMO unacceptable.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Marc Jakubowski (octavian) on 2008-04-01T06:10:16.000+0000</p> 
        <div class="body">
            <p>Hmm, but why do you want to reflect these methods when you don't want to extend them/change behavior?</p>

<p>Just curious on your use case, because I spend some time extending it and want to see what others make of the ACL functionality :)</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by George Miroshnikov (laggyluke) on 2008-04-01T07:25:39.000+0000</p> 
        <div class="body">
            <p>To be honest, my use case is bogus and I would never recommend anyone doing something I did, not even mentioning expecting ZF to be compatible with it :)
I discovered this issue while experimenting with a highly bug-prone proprietary unit testing framework.</p>

<p>Nevertheless, the problem is not in the inability to properly reflect Zend_Acl, but in invalid (or marginally-valid) use of optional parameters in PHP, regardless of their context. Maybe I'm wrong and such use of optional parameters is perfectly valid - that is for ZF team to decide.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Darby Felton (darby) on 2008-05-08T09:29:24.000+0000</p> 
        <div class="body">
            <p>Fixed in trunk with <a href="http://framework.zend.com/code/changelog/Zend_Framework/?cs=9417">SVN r9417</a>.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Darby Felton (darby) on 2008-05-08T09:31:35.000+0000</p> 
        <div class="body">
            <p>Fixed for 1.5.2 with <a href="http://framework.zend.com/code/changelog/Zend_Framework/?cs=9419">SVN r9419</a>.</p>

        </div>
    </div>
    </div>

