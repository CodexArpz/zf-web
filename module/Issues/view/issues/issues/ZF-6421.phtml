<h2>ZF-6421: joinLeft overwrites value of the field to join on with NULL in case no matching right table entry is found</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2009-04-25T12:40:48.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-06-12T21:44:15.000+0000</dd>

    <dt>Status:</dt>
    <dd>Open</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Christian Opitz (nogenius)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Ralph Schindler (ralph)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Db_Select</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Using a left join seems to overwrite the value of the field to join on in the left table with NULL in case  no matching right table entry is found.</p>

<p>Assume you have the following tables for users and domains:</p>

<pre class="highlight"><code>
CREATE TABLE IF NOT EXISTS `user` (
  `id_user` tinyint(4) NOT NULL auto_increment,
  `firstname` varchar(50) NOT NULL,
  PRIMARY KEY  (`id_user`)
) 

INSERT INTO `user` (`id_user`,  `firstname`) VALUES
(1, 'Christian');


CREATE TABLE IF NOT EXISTS `domain` (
  `id_domain` tinyint(4) NOT NULL auto_increment,
  `id_user` tinyint(4) NOT NULL,
  `name_domain` varchar(50) NOT NULL,
  PRIMARY KEY  (`id_domain`)
) 
</code></pre>

<p>Now you want to do a left join and get all users and the assigned domains with one of the following code examples.</p>

<pre class="highlight"><code>$select = $db-&gt;select()
             -&gt;from('user')
             -&gt;joinLeftUsing('domain', 'id_user');
$user = $db-&gt;fetchAll($select);</code></pre>

<pre class="highlight"><code>$select = $db-&gt;select()
             -&gt;from('user')
             -&gt;joinLeft(('domain'),
                    'user.id_user = domain.id_user');
$user = $db-&gt;fetchAll($select);</code></pre>

<pre class="highlight"><code>
$user = $db-&gt;fetchAll(' SELECT `user` . * , `domain` . *
FROM `user`
LEFT JOIN `domain` ON `domain`.`id_user` = `user`.`id_user`');
</code></pre>

<p>The generated SQL query is always correct:</p>

<pre class="highlight"><code>
SELECT `user`.*, `domain`.* FROM `user` LEFT JOIN `domain` ON `domain`.id_user = `user`.id_user
</code></pre>

<p>But the result is not correct:
Array ( [0] =&gt; Array ( [id_user] =&gt; [firstname] =&gt; Christian [name_domain] =&gt; ) )</p>

<p>The result should be:
*Array ( [0] =&gt; Array ( [id_user] =&gt; 1 [firstname] =&gt; Christian [name_domain] =&gt; ) ) *</p>

<p>The correct result can from my point of view currently only be reached with the following workaround:
Explicitly select the columns from your right table, and do not select the field used in the join clause-</p>

<p>Example (<em>note the additional colunm selection 'name_domain' in contrast to the example above</em>):</p>

<pre class="highlight"><code>$select = $db-&gt;select()
             -&gt;from('user')
             -&gt;joinLeftUsing('domain', 'id_user', 'name_domain');
$user = $db-&gt;fetchAll($select);</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Vestigal (vestigal) on 2012-06-12T21:44:14.000+0000</p> 
        <div class="body">
            <p>I can confirm that this is an issue.</p>

        </div>
    </div>
    </div>

