<h2>ZF-3794: Cross site scripting in Zend_Db_Statement_Exception handling</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2008-07-29T10:00:38.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2008-09-02T10:39:08.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.6.0 (02/Sep/08)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                quentin berdugo (qbo)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Ralph Schindler (ralph)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Db</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
        <li><a href="/issues/secure/attachment/11441/ishot-9.jpg">ishot-9.jpg</a></li>
        </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Error message for Zend_Db_Statement_Exception for "Unclosed quotation mark after the character string" displays the user-submited data in a non-secure way, allwing cross-site scripting on error messages.</p>

<p>Exploit code needs to be free from single or double quotes (esaped in the erreor message) or spaces but it's still exploitable like this :</p>

<p>param='</p>

<p>which gives the following :</p>

<p><span style="background-color:#cc0000;color:#fce94f;font-size:x-large;">( ! )</span> Zend_Db_Statement_Exception: SQLSTATE[HY000]: General error: 20018 Unclosed quotation mark after the character string ''. [20018] (severity 5) [(null)] in /usr/local/lib/php/ZendFramework-1.0.2/library/Zend/Db/Statement/Pdo.php on line <i>227</i></p>

<p>call stack :</p>

<p>Call Stack</p>

<h1>Time    Memory  Function    Location</h1>

<p>1   0.0003  69852   {main}( )   ../main.php:0
2   0.0324  2102164 Zend_Controller_Front-&gt;dispatch( $request = ???, $response = ??? )  ../main.php:42</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2008-07-29T10:27:57.000+0000</p> 
        <div class="body">
            <p>Scheduling for 1.6.0GA. One thing to note: you should never, never have display_errors on in a production system. When display_errors is off, you will not display this error.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by julien PAULI (doctorrock83) on 2008-07-29T12:17:41.000+0000</p> 
        <div class="body">
            <p>Note : message in exception directly comes from PDO</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ralph Schindler (ralph) on 2008-08-06T14:20:34.000+0000</p> 
        <div class="body">
            <p>This is not an issue within Zend_Db_Statement_Exception itself.  The problem you are experiencing is due to your application printing the exception message to the browser.</p>

<p>Generally speaking, applications should send exceptions to a log file or some similar place during production.  Since XSS only affects the web, solving this problem inside Zend_Db_Statement_Exception itself doesnt make alot of sense since Zend_Db_Statements can be used in any environment, not just web.  Also consider that you could be filtering all of your application exceptions before they are displayed on the screen.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-09-02T10:39:08.000+0000</p> 
        <div class="body">
            <p>Updating for the 1.6.0 release.</p>

        </div>
    </div>
    </div>

