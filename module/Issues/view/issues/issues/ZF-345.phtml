<h2>ZF-345: 'Wrong TermInfoIndexFile file format' exception with large index, prepared with Jave Lucene 2.0</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2006-08-30T16:40:52.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2008-12-19T13:25:43.000+0000</dd>

    <dt>Status:</dt>
    <dd>Closed</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Alexander Veremyev (alexander)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Alexander Veremyev (alexander)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Search_Lucene</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Message from Irwin:</p>

<hr /><p>I've created an index with Java Lucene version 2.0.
When I tried to open the index with Zend Framework version 0.1.5,
I got the following error message:</p>

<p>(ioppenhm@chinaski-71) ~/wp/genindex: php search.php
Index contains 659388 documents.</p>

<p>Fatal error: Uncaught exception 'Zend_Search_Lucene_Exception' with
message 'Wrong TermInfoIndexFile file format' in
/home/ioppenhm/zend/library/Zend/Search/Lucene/Index/SegmentInfo.php:322
Stack trace: 
....
Does this mean that Zend Lucene is NOT compatible with Java Lucene 2.0?
I also tried to open an index that was created by PyLucene (which is
compatible with Java Lucene 2.0) and got the same results.
BTW. both indices were fully optimized.</p>

<p>Which versions of Zend Lucene are known to be compatible with Zend Lucene?</p>

<p>Best regards,
Irwin Oppenheim
Amsterdam, The Netherlands</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Alexander Veremyev (alexander) on 2006-08-31T16:57:25.000+0000</p> 
        <div class="body">
            <p>PHP fseek() function takes PHP integer (C long) as an input for offset.
Thus largest file offset, which can be used on 32-bit platform is ~2Gb.</p>

<p>I made necessary changes (and committed them into SVN) to give correct error messages instead of 'Wrong file format'.
This code should also work proper on 64-bit systems.</p>

<p>Theoretically, it's possible to emulate large seeks by several smaller... But a) it will slow down execution for common indices b) ftell() and filesize() returns int as a result and also don't work with files which are large then 2Gb.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-12-19T13:25:43.000+0000</p> 
        <div class="body">
            <p>Bookkeeping. Closing old issues and assigning them to the person who ultimately resolved the issue.</p>

        </div>
    </div>
    </div>

