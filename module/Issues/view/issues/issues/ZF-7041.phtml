<h2>ZF-7041: Zend_Db_Adapter returns &quot;double(X, Y) unsigned&quot; instead of &quot;double&quot; for a column DATA_TYPE and voids SCALE and PRECISION keys</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2009-06-18T05:08:32.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-11-20T21:37:42.000+0000</dd>

    <dt>Status:</dt>
    <dd>Reopened</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
        None
                    </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Db_Adapter_Mysqli</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
        <li><a href="/issues/secure/attachment/13503/ZF-7041.patch">ZF-7041.patch</a></li>
        </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>I don't know if it's supposed to be like this, but when I try to access the metadata of any random MySQL table which have a DOUBLE field, the Zend_Db_Adapter_Pdo_Mysql returns "double(X, Y) unsigned" instead of "double" for a column DATA_TYPE. Additionnaly, it also voids the SCALE and PRECISION keys in the metadata, which is quite strange because it works perfectly using FLOAT and DECIMAL types.</p>

<p>{quote}
array
  'SCHEMA_NAME' =&gt; null
  'TABLE_NAME' =&gt; string 'test' (length=4)
  'COLUMN_NAME' =&gt; string 'float3_3' (length=8)
  'COLUMN_POSITION' =&gt; int 10
  'DATA_TYPE' =&gt; string 'float' (length=5)
  'DEFAULT' =&gt; null
  'NULLABLE' =&gt; boolean false
  'LENGTH' =&gt; null
  'SCALE' =&gt; string '3' (length=1)
  'PRECISION' =&gt; string '3' (length=1)
  'UNSIGNED' =&gt; null
  'PRIMARY' =&gt; boolean false
  'PRIMARY_POSITION' =&gt; null
  'IDENTITY' =&gt; boolean false</p>

<p>array
  'SCHEMA_NAME' =&gt; null
  'TABLE_NAME' =&gt; string 'test' (length=4)
  'COLUMN_NAME' =&gt; string 'double5_3' (length=9)
  'COLUMN_POSITION' =&gt; int 11
  'DATA_TYPE' =&gt; string 'double(5,3) unsigned' (length=20)
  'DEFAULT' =&gt; null
  'NULLABLE' =&gt; boolean false
  'LENGTH' =&gt; null
  'SCALE' =&gt; null
  'PRECISION' =&gt; null
  'UNSIGNED' =&gt; boolean true
  'PRIMARY' =&gt; boolean false
  'PRIMARY_POSITION' =&gt; null
  'IDENTITY' =&gt; boolean false
{quote}</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Sebastian Iancu (sebastian.i) on 2010-12-01T07:19:25.000+0000</p> 
        <div class="body">
            <p>At the <a href="http://phpbenelux.eu/en/bughuntday2010">PHP Benelux BugHuntDay 2010</a> I was focusing on solving this bug and I came out with this patch.</p>

<p>There are many other type of fields suffering by the same behavior, not only DOUBLE, and it is pretty much depending on the used SQL server. I was only focusing on MySQL 5.1 and Sqlite3, thus my patch only address these adapters (MySQLi, PDO-MySQL and PDO-Sqlite).</p>

<p>PDO-Sqlite also have the same misbehavior, but to solve entirely is more complicated, because of the sqlite-affinity and the conversion rules of user-types to internal type and affinity.</p>

<p>Others may want to further contribute on this subject.</p>

<p>The patch contains also relevant unit tests.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ramon Henrique Ornelas (ramon) on 2010-12-06T15:47:32.000+0000</p> 
        <div class="body">
            <p>Correct me if i wrong but is missing apply the patch to this issue that already was marked how fixed.</p>

        </div>
    </div>
    </div>

