<h2>ZF-8813: AMF responses with multiple bodies comprising objects time out</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2010-01-13T20:18:31.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-11-20T21:37:25.000+0000</dd>

    <dt>Status:</dt>
    <dd>Open</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
        None
                    </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Amf</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>If a response has multiple bodies (in response to a request containing multiple bodies), and one or more of the bodies consists of an Object (as opposed to primitive) the response will time out.</p>

<p>The request is properly processed (and the relevant methods on the services have been invoked), it seems to be an issue with serializing the response.</p>

<p>I haven't done any packet sniffing yet, but have verified this with a fresh install of Zend AMF 1.9.7.</p>

<p>My AS3 / MXML example code is:</p>

<pre><code>&lt;mx:ChannelSet id="channelSet"&gt;
&lt;/mx:ChannelSet&gt;

&lt;mx:RemoteObject id="test" destination="Test" source="Test" showBusyCursor="true" channelSet="{ channelSet }" /&gt;
&lt;mx:RemoteObject id="test2" destination="Test2" source="Test2" showBusyCursor="true" channelSet="{ channelSet }" /&gt;
</code></pre>

<p>private function init() : void
            {
                var amfChannel  : AMFChannel    = new AMFChannel( null, "http://localhost/amf_test/" );</p>

<pre><code>            channelSet.addChannel( amfChannel );

            var bla : TestClass = new TestClass();

            var call    : AsyncToken    = test.testMethod( bla );
            var call2   : AsyncToken    = test2.testMethod( "Test2" );

            call.addResponder( this );
            call2.addResponder( this );
        }
</code></pre>

<p>On the server-side there is a mapped PHP version of TestClass and Test and Test2 simply echo whatever is sent to them.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Theo Denovan (theodore) on 2010-01-13T20:18:53.000+0000</p> 
        <div class="body">
            <p>Formatting</p>

        </div>
    </div>
    </div>

