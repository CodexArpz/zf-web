<h2>ZF-10389: Duplicate HTML id attributes on elements with the same name in different subforms</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2010-08-27T10:22:17.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-11-20T21:37:58.000+0000</dd>

    <dt>Status:</dt>
    <dd>Open</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Andrew Ballard (aballard)
            </dd>

    <dt>Assignee:</dt>
    <dd>
        None
                    </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Form</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>I have seen a couple threads in the mailing list archives describing this issue, but they haven't received much feedback:</p>

<p><a href="http://zend-framework-community.634137.n4.nabble.com/Avoid-ID-duplication-on-multiple-subforms-td670099.html">http://zend-framework-community.634137.n4.nabble.com/…</a></p>

<p><a href="http://zend-framework-community.634137.n4.nabble.com/Zend-Form-label-decorator-duplicated-id-td663687.html">http://zend-framework-community.634137.n4.nabble.com/…</a></p>

<p>I think there is a pretty simple fix to this, if someone can verify it.</p>

<p>1) In Zend_Form_Decorator_Label, lines 316-323:</p>

<pre class="highlight"><code>
if (null !== $tag) {
    require_once 'Zend/Form/Decorator/HtmlTag.php';
    $decorator = new Zend_Form_Decorator_HtmlTag();
    $decorator-&gt;setOptions(array('tag' =&gt; $tag,
-                                'id'  =&gt; $this-&gt;getElement()-&gt;getName() . '-label'));
+                                'id'  =&gt; $this-&gt;getElement()-&gt;getFullyQualifiedName() . '-label'));

    $label = $decorator-&gt;render($label);
}
</code></pre>

<p>2) In Zend_Form_Element, lines 317-324:</p>

<pre class="highlight"><code>
if (empty($decorators)) {
    $this-&gt;addDecorator('ViewHelper')
        -&gt;addDecorator('Errors')
        -&gt;addDecorator('Description', array('tag' =&gt; 'p', 'class' =&gt; 'description'))
        -&gt;addDecorator('HtmlTag', array('tag' =&gt; 'dd',
-                                       'id'  =&gt; $this-&gt;getName() . '-element'))
+                                       'id'  =&gt; $this-&gt;getFullyQualifiedName() . '-element'))
        -&gt;addDecorator('Label', array('tag' =&gt; 'dt'));
}
</code></pre>

<p>In both cases, it involves substituting {{getFullyQualifiedName()}} for {{getName()}}.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Andrew Ballard (aballard) on 2010-08-27T11:24:28.000+0000</p> 
        <div class="body">
            <p>Ok, after trying a couple things, that idea isn't quite right. The fully qualified name likely has characters that are not valid for an id value. In the decorator, that seems to be solvable by using {{getId()}} instead of {{getFullyQualifiedName()}}.</p>

<p>The form element is a little more involved. At the time the code I posted executes, {{getId()}} does not yet address the {{belongsTo}} path. I guess the change I suggested could be pushed off to {{render($view)}}, where {{getId()}} returns the correct value. I don't know what side effects that might introduce, though.</p>

        </div>
    </div>
    </div>

