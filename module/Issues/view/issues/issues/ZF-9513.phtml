<h2>ZF-9513: Multipart binary attachment broken by Zend_Mime_Decode::splitMime</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2010-03-23T01:26:01.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2011-09-15T17:49:53.000+0000</dd>

    <dt>Status:</dt>
    <dd>Open</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Benjamin Eberlei (beberlei)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Mime</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Hello.</p>

<p>I checked the bugs and I see nothing about the issues I found yesterday into the Zend_Mime component.</p>

<p>What I do ?
I am making an http request and the answer comes as multipart/mixed, with 2 parts, first is an text/xml and the second is a binary file.</p>

<p>Result: The binary file got corrupted because:
1. you are using string functions instead of multibyte string functions in splitMime... and I think in other Mime components... but they are not involved (see Zend_Mime_Message::_disassembleMime)</p>

<ol><li>you have some strange line inside those functions marked with TODO: </li>
</ol><pre class="literal"> 
        // TODO: we're ignoring \r for now - is this function fast enough and is it safe to asume noone needs \r?
        $body = str_replace("\r", '', $body); 
</pre>

<ul><li>I had to comment it not to corrupt the binary file.</li>
</ul><ol><li>The result after I put mb_string to work and took out the str_replace at point 2... has 1 byte in plus. Something is fishy into the substr you are using... not sure, but I think I solved this one also by considering $p as being too big...</li>
</ol><p>Here is the diff:</p>

<pre class="literal"> 
     public static function splitMime($body, $boundary)
     {
         // TODO: we're ignoring \r for now - is this function fast enough and is it safe to asume noone needs \r?
-        $body = str_replace("\r", '', $body);
+        // $body = str_replace("\r", '', $body);
 
         $start = 0;
         $res = array();
         // find every mime part limiter and cut out the
         // string before it.
         // the part before the first boundary string is discarded:
-        $p = strpos($body, '--' . $boundary . "\n", $start);
+        $p = mb_strpos($body, '--' . $boundary . "\n", $start);
         if ($p === false) {
             // no parts found!
             return array();
         }
 
         // position after first boundary line
-        $start = $p + 3 + strlen($boundary);
+        $start = $p + 3 + mb_strlen($boundary);
 
-        while (($p = strpos($body, '--' . $boundary . "\n", $start)) !== false) {
-            $res[] = substr($body, $start, $p-$start);
-            $start = $p + 3 + strlen($boundary);
+        while (($p = mb_strpos($body, '--' . $boundary . "\n", $start)) !== false) {
+            $res[] = mb_substr($body, $start, $p-$start - 1);
+            $start = $p + 3 + mb_strlen($boundary);
         }
 
         // no more parts, find end boundary
-        $p = strpos($body, '--' . $boundary . '--', $start);
+        $p = mb_strpos($body, '--' . $boundary . '--', $start);
         if ($p===false) {
             throw new Zend_Exception('Not a valid Mime Message: End Missing');
         }
 
         // the remaining part also needs to be parsed:
-        $res[] = substr($body, $start, $p-$start);
+        $res[] = mb_substr($body, $start, $p-$start - 1);
         return $res;
     }
</pre>

<p>With base64_encoded attachments all is OK ... of course, as the Zend_Mail is working probably properly.</p>

<p>Thank you for a resolution on this.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Satoru Yoshida (satoruyoshida) on 2010-06-12T06:33:20.000+0000</p> 
        <div class="body">
            <p>Sorry, I have been inactive since last April.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Patrick Schulz (pschulz) on 2011-09-15T17:49:53.000+0000</p> 
        <div class="body">
            <p>Hi, I have the same behavior here. ZF Version 1.11.10.
This line seem to corrupt the whole content.</p>

        </div>
    </div>
    </div>

