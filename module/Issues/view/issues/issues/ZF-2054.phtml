<h2>ZF-2054: Formatted month and day values are sometimes inverted</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2007-10-10T00:34:50.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2007-10-10T16:48:46.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.0.3 (30/Nov/07)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Thomas Weidner (thomas)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Date</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>This appears to happen when the month of the given date is greater than 9. See the code below for an example exposing the bug. Note that the first call to dateTest produces the expected output, while the month and day are inverted in the fourth line of the output for the second call when strtotime() is not called on the parameter before passing it to the Zend_Date constructor, whereas the output is correct when strtotime() is called on the parameter before passing it to the Zend_Date constructor.</p>

<pre class="highlight"><code>
dateTest('2007-09-07 23:08:00');
/*
Output:
$datetime = 2007-09-07 23:08:00
strtotime($date) = 1189224480
date('Y-m-d H:i:s', strtotime($datetime)) = 2007-09-07 23:08:00
(new Zend_Date($datetime))-&gt;toString('YYYY-MM-dd HH:mm:ss') = 2007-07-09 23:08:00
(new Zend_Date(strtotime($datetime)))-&gt;toString('YYYY-MM-dd HH:mm:ss') = 2007-09-07 23:08:00
*/

dateTest('2007-10-09 23:08:00');
/*
Output:
$datetime = 2007-10-09 23:08:00
strtotime($date) = 1191989280
date('Y-m-d H:i:s', strtotime($datetime)) = 2007-10-09 23:08:00
(new Zend_Date($datetime))-&gt;toString('YYYY-MM-dd HH:mm:ss') = 2007-09-10 23:08:00
(new Zend_Date(strtotime($datetime)))-&gt;toString('YYYY-MM-dd HH:mm:ss') = 2007-10-09 23:08:00
*/

function dateTest($datetime)
{
    echo '$datetime = ' . $datetime . "\n";
    echo 'strtotime($date) = ' . strtotime($datetime) . "\n";
    echo 'date(\'Y-m-d H:i:s\', strtotime($datetime)) = ' . 
        date('Y-m-d H:i:s', strtotime($datetime)) . "\n";
    $date = new Zend_Date($datetime);
    echo '(new Zend_Date($datetime))-&gt;toString(\'YYYY-MM-dd HH:mm:ss\') = ' . 
        $date-&gt;toString('YYYY-MM-dd HH:mm:ss') . "\n";
    $date = new Zend_Date(strtotime($datetime));
    echo '(new Zend_Date(strtotime($datetime)))-&gt;toString(\'YYYY-MM-dd HH:mm:ss\') = ' . 
        $date-&gt;toString('YYYY-MM-dd HH:mm:ss
}
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2007-10-10T13:31:59.000+0000</p> 
        <div class="body">
            <p>What is your default locale ?
I expect that's your problem...</p>

<p>Reason:
In your second example you gave an integer to Zend_Date.
Integers are treated as unix timestamps. This is why this example works in your eyes.</p>

<p>In your first example you gave an string to Zend_Date.
Strings are treated as localized inputs. If you do not provide an locale Zend_Date uses your default locale from your browser or from your server.</p>

<p>The problem occurs when you give an input which differs from your default locale.
Example:
When you give '10.04.2007 10:00:00' and your default locale is 'YYYY-MM-dd HH:mm:ss' your input will not be parsed correct. There is some automatically correction... 2007 can never be a month for example, and so on.
But days and months smaller then 13 can not automatically be corrected.</p>

<p>But every "normal" user will give an input in the format he is familiar with.
Or you define a input format which the user hsa to do... then use the optional parameters of Zend_Date.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2007-10-10T13:34:16.000+0000</p> 
        <div class="body">
            <p>Btw:
strtotime uses the english notation...</p>

<p>So if you call Zend_Date with the locale 'en' it works like strtotime.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Turland (elazar) on 2007-10-10T13:56:43.000+0000</p> 
        <div class="body">
            <p>I tried changing this line:</p>

<p>$date = new Zend_Date($datetime);</p>

<p>to this:</p>

<p>$date = new Zend_Date($datetime, Zend_Date::DATES, 'en_US')</p>

<p>as per examples from the documentation and your suggestion, which I'm assuming is what you were inferring.</p>

<p><a href="http://framework.zend.com/manual/en/zend.date.overview.html#zend.date.options">http://framework.zend.com/manual/en/â€¦</a></p>

<p>The output is identical. This is under PHP 5.2.4, if that's relevant.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2007-10-10T16:24:44.000+0000</p> 
        <div class="body">
            <p>No... you are assuming wrong.</p>

<p>The standard format for en_US is "MMM d, yyyy"...
You are giving "YYYY-MM-dd" as input.</p>

<p>So eighter you use the right locale-input
OR
if you know that your input is always formatted as ISO you should always use the format Zend_Date::ISO_8601 for your input</p>

<p>Btw:
Running your code I am not receiving the output you gave... but this is because my default locale differs from yours.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Turland (elazar) on 2007-10-10T16:36:57.000+0000</p> 
        <div class="body">
            <p>OK, changing the format to Zend_Date::ISO_8601 causes the output to be correct. You can go ahead and close this issue.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2007-10-10T16:48:46.000+0000</p> 
        <div class="body">
            <p>Closing this issue as it's no "problem" of Zend_Date.</p>

<p>Tip: If you have a database value as input you should always use Zend_Date::ISO_8601 as stated in the documentation.</p>

        </div>
    </div>
    </div>

