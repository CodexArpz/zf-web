<h2>ZF-7292: Simplifying the use of ordering when Zend_Form implementation extended</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2009-07-16T02:12:39.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-11-20T20:53:30.000+0000</dd>

    <dt>Status:</dt>
    <dd>Closed</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                thing2b (thing2b)
            </dd>

    <dt>Assignee:</dt>
    <dd>
        None
                    </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Form</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Although all Form elements have a setOrder function, this method of ordering elements on a form can become difficult when a form is extended multiple times. If you are extending a form when setOrder has not be used (or not used wisely, or the extending class is quite complex) it can be difficult to get the order right.</p>

<p>To make this ordering easier, I think that Zend_Form needs something along the lines of the following code:</p>

<pre class="highlight"><code>
   
    public function insertAt($el,$targetOrder)
    {
        $this-&gt;_sort();
        foreach ($this-&gt;_order as $key =&gt; $order){
            if ($order &gt;= $targetOrder){
                $this-&gt;_order[$key] = ++$order;
                $this-&gt;{$key}-&gt;setOrder($order);
            }
        }
        $el-&gt;setOrder($targetOrder);
        $this-&gt;addElement($el);
        $this-&gt;_orderUpdated = TRUE;
    }
    
    public function insertAtStart($el)
    {
        $this-&gt;_sort();
        $lowest = FALSE;
        foreach ($this-&gt;_order as $key =&gt; $order) {
            if ($lowest === FALSE || $order &lt; $lowest){
                $lowest = $order;
            }
        }
        $this-&gt;insertAt($el,$lowest);
    }
    
    public function insertAtEnd($el)
    {
        $this-&gt;_sort();
        $highest = FALSE;
        foreach ($this-&gt;_order as $key =&gt; $order) {
            if ($highest === FALSE || $order &gt; $highest){
                $highest = $order;
            }
        }
        $this-&gt;insertAt($el,$highest+1);
    }
    
    public function insertBefore($existingName,$el)
    {
        $this-&gt;_sort();
        
        // Get Element Order
        $targetOrder = $this-&gt;{$existingName}-&gt;getOrder();
        $this-&gt;insertAt($el,$targetOrder);
    }
    
    public function insertAfter($existingName,$el)
    {
        $this-&gt;_sort();
        
        // Get Element Order
        $targetOrder = $this-&gt;{$existingName}-&gt;getOrder() + 1;
        $this-&gt;insertAt($el,$targetOrder);
    }
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Rob Allen (rob) on 2012-11-20T20:53:30.000+0000</p> 
        <div class="body">
            <p>Bulk change of all issues last updated before 1st January 2010 as "Won't Fix".</p>

<p>Feel free to re-open and provide a patch if you want to fix this issue.</p>

        </div>
    </div>
    </div>

