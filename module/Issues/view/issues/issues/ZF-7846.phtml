<h2>ZF-7846: Add exception to describeTable() to identify missing metadata</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2009-09-15T02:28:58.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-11-20T20:53:29.000+0000</dd>

    <dt>Status:</dt>
    <dd>Closed</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Roger Hunwicks (rhunwicks)
            </dd>

    <dt>Assignee:</dt>
    <dd>
        None
                    </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Db_Adapter_Oracle</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-7070">ZF-7070</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>With Zend_Db_Table_Adapter_Oracle (and probably with the other adapters) it is possible for the SQL query used by describeTable() to work successfully, but return no data. For example, if the table does not exist, or the user does not have any privileges on the table then the query returns an empty array and describeTable() completes successfully.</p>

<p>If the database adapter cannot get any metadata successfully, then it is unlikely that the application is going to work correctly, even if all the necessary information is specified in the concrete Zend_Db_Table class, but the error will not be apparent immediately and will be harder to debug as a result.</p>

<p>In my case I was receiving:</p>

<pre class="highlight"><code>`

The error message also includes no indication of which concrete class is causing the error. In my case it was because we had forgotten to grant SELECT privileges to the application user on the table in question.

Given that describeTable() is almost always used in conjunction with Zend_Db_Table, and that the Zend_Db_Table will likely fail if the database adapter can't work out the metadata, even if it isn't going to use it, I think that it would be better if describeTable() treated missing metadata as an exception. E.g. change
</code></pre>

<pre><code>public function describeTable($tableName, $schemaName = null)
{
    &lt;snip&gt;
    $stmt = $this-&gt;query($sql, $bind);

    /**
     * Use FETCH_NUM so we are not dependent on the CASE attribute of the PDO connection
     */
    $result = $stmt-&gt;fetchAll(Zend_Db::FETCH_NUM);&lt;pre class="highlight"&gt;&lt;code&gt;
</code></pre>

<p>to
    public function describeTable($tableName, $schemaName = null)
    {
        
        $stmt = $this-&gt;query($sql, $bind);</p>

<pre><code>    /**
     * Use FETCH_NUM so we are not dependent on the CASE attribute of the PDO connection
     */
    $result = $stmt-&gt;fetchAll(Zend_Db::FETCH_NUM);
    if ($result === array()) {
        $table = $schemaName !== null ? $schemaName . '.' . $tableName : $tableName;
        $message = 'Cannot identify columns or primary key for table ' . $table .
                   '; check that the table exists and that privileges ' .
                   'have been granted to user ' . $this-&gt;_config['username'];
        throw new Zend_Db_Adapter_Oracle_Exception($message);
    }```
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Roger Hunwicks (rhunwicks) on 2009-09-15T02:32:58.000+0000</p> 
        <div class="body">
            <p>This is a similar issue for Zend_Db_Adapter_Pdo_Pgsql. My solution would work for this issue to.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Roger Hunwicks (rhunwicks) on 2009-09-15T05:46:42.000+0000</p> 
        <div class="body">
            <p>I have thought of one circumstance where describeTable() brings back an empty array, but that the application could work correctly anyway.</p>

<p>If the $_name for the table is actually a synonym, then the query will fail (because the table doesn't exist) but the application would continue to work correctly (assuming that the concrete Zend_Db_Table class has all the necessary metadata in it).</p>

<p>I have thought of two fixes for this:</p>

<h1>describeTable() tries to find a public or private synonym with that name and then re-executes the describe table, before raising the error. It would be better to do this only when the query returns no rows, rather than all the time, to avoid an unnecessary database query in the usual use case. I don't know if this error and/or solution would apply to non-Oracle database adapters.</h1>

<h1>Expect the application developer to override Zend_Db_Table_Abstract::_setupMetadata() where it fails but the application developer knows the application will work anyway. This might be worth mentioning specifically in the user guide.</h1>

<p>The synonym approach has the advantage that it saves the developer having to create the metadata manually for those tables. This code works for the synonym method:</p>

<pre class="highlight"><code>
        $result = $stmt-&gt;fetchAll(Zend_Db::FETCH_NUM);
        // Raise an exception if the database adapter cannot find the table
        // but check for a synonym first
        if ($result === array()) {
            $sql = "SELECT TABLE_NAME, TABLE_OWNER
                    FROM ALL_SYNONYMS
                    WHERE SYNONYM_NAME = UPPER(:TBNAME)";
            $bind[':TBNAME'] = $tableName;
            if ($schemaName) {
                $sql .= ' AND OWNER = UPPER(:SCNAME)';
                $bind[':SCNAME'] = $schemaName;
            }
            $stmt = $this-&gt;query($sql, $bind);
            foreach ($stmt-&gt;fetchAll(Zend_Db::FETCH_NUM) as $synonym) {
                $result = $this-&gt;describeTable($synonym[0], $synonym[1]);
                if ($result !== array()) {
                    break;
                }
            }
        }
        if ($result === array()) {
        $table = $schemaName !== null ? $schemaName . '.' . $tableName : $tableName;
            $message = 'Cannot identify columns or primary key for table ' . $table .
                       '; check that the table exists and that privileges ' .
                       'have been granted to user ' . $this-&gt;_config['username'];
            throw new Zend_Db_Adapter_Oracle_Exception($message);

        }
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Laura Dean (ldean) on 2009-10-01T07:33:55.000+0000</p> 
        <div class="body">
            <p>Well, I was looking for a way to check if a table exists in a certain database, and it looks like describeTable could do that now but not if this change goes in so I think I'll watch this issue and see what happens.  I suppose I could use listTables instead.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Rob Allen (rob) on 2012-11-20T20:53:29.000+0000</p> 
        <div class="body">
            <p>Bulk change of all issues last updated before 1st January 2010 as "Won't Fix".</p>

<p>Feel free to re-open and provide a patch if you want to fix this issue.</p>

        </div>
    </div>
    </div>

