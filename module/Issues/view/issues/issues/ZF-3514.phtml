<h2>ZF-3514: Zend_Framework_Search_Lucene throws XXX.del is not readable</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2008-06-25T14:29:43.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-01-13T07:38:08.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.6.0 (02/Sep/08)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Josh Schumacher (joshs633)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Alexander Veremyev (alexander)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Search_Lucene</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-5531">ZF-5531</a></li>
            <li><a href="/issues/browse/ZF-3853">ZF-3853</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Possibly related to: <a href="http://framework.zend.com/issues/browse/ZF-2448">http://framework.zend.com/issues/browse/ZF-2448</a></p>

<p>Occasionally (at seemingly random intervals), performing a query throws an exception such as, 
File '/search/lucene_index/_30_j.del' is not readable</p>

<p>If you look at the structure of /search/lucene_index/, there is a _30_k.del file but no _30_j.del file.  It appears the delGen is being incremented incorrectly occasionally possibly.</p>

<p>The exception is raised from Zend_Search_Lucene_Index_SegmentInfo line 303.
$delFile = $this-&gt;<em>directory-&gt;getFileObject($this-&gt;_name . '</em>' . base_convert($this-&gt;_delGen, 10, 36) . '.del');</p>

<p>For a temporary, quick fix, I have modified Zend_Search_Lucene_Index_SegmentInfo to touch the file before it attempts to getFileObject.
 303             $delFile = $this-&gt;<em>directory-&gt;touchFile($this-&gt;_name . '</em>' . base_convert($this-&gt;<em>delGen, 10, 36) . '.del');
 304             $delFile = $this-&gt;_directory-&gt;getFileObject($this-&gt;_name . '</em>' . base_convert($this-&gt;_delGen, 10, 36) . '.del');</p>

<p>I have reproduced this bug in 1.5.1 and 1.5.2</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Matthew Ratzloff (mratzloff) on 2008-07-08T16:36:15.000+0000</p> 
        <div class="body">
            <p>This is a really bizarre bug.  Indexing fails in the same place every time, and it's not dependent on the particular item being indexed, it's dependent on when it is indexed (e.g., the 720th item (just an example) fails no matter what the 720th item actually is).  This isn't a memory issue as far as I can tell.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Josh Schumacher (joshs633) on 2008-07-08T17:08:46.000+0000</p> 
        <div class="body">
            <p>It should be noted that I have also reproduced this bug with a checkout of trunk at revision 10001.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Jurrien Stutterheim (norm2782) on 2008-07-23T00:59:20.000+0000</p> 
        <div class="body">
            <p>Got the same bug here. It's weird... I have an app that's been live for over a year without problems. Only when I moved it to a new VPS this problem started to show.
Would optimizing the index regularly prevent this bug from occurring?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Alexander Veremyev (alexander) on 2008-07-23T13:26:35.000+0000</p> 
        <div class="body">
            <p>Could you provide full stack trace for the exception?
There are two different situations where the problem may occur (opening index and updating index just updated by another process).</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Aaron Heimlich (aheimlich) on 2008-07-23T14:49:44.000+0000</p> 
        <div class="body">
            <p>I've encountered this issue before with our internal ZF app (also at seemingly random intervals). I can't seem to comment on the issue, though, so I'm posting a stack trace here (with some potentially sensitive info masked).</p>

<p>Hope it's useful.</p>

<pre class="literal"> 
exception 'Zend_Search_Lucene_Exception' with message 'File '***/data/search/lucene/_5kf_54.del' is not readable.' in ***/library/Zend/Search/Lucene/Storage/File/Filesystem.php:59
Stack trace:
#0 ***/library/Insight/Search/Index/Adapter/Lucene/Storage/File/Filesystem.php(27): Zend_Search_Lucene_Storage_File_Filesystem-&gt;__construct('/***...', 'r+b')
#1 ***/library/Insight/Search/Index/Adapter/Lucene/Storage/Directory/Filesystem.php(100): Insight_Search_Index_Adapter_Lucene_Storage_File_Filesystem-&gt;__construct('/***...')
#2 ***/library/Zend/Search/Lucene/Index/SegmentInfo.php(303): Insight_Search_Index_Adapter_Lucene_Storage_Directory_Filesystem-&gt;getFileObject('_5kf_54.del')
#3 ***/library/Zend/Search/Lucene.php(380): Zend_Search_Lucene_Index_SegmentInfo-&gt;__const in ***/library/Zend/Search/Lucene/Storage/File/Filesystem.php on line 59 
</pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Josh Schumacher (joshs633) on 2008-07-23T14:57:06.000+0000</p> 
        <div class="body">
            <p>Thanks for the stacktrace Aaron, I don't have one sitting around anymore.</p>

<p>Alexander, if there are two possible situations, shouldn't we address both of the possibilities?  Since the issue was appearing at seemingly random intervals for myself and others, we can't guarantee which one of the two conditions are occurring.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Alexander Veremyev (alexander) on 2008-07-24T01:54:58.000+0000</p> 
        <div class="body">
            <p>Aeron:
Thanks!</p>

<p>Josh:
There are two places where Zend_Search_Lucene_Index_SegmentInfo object is created using already existing index segment. I don't see what is the cause of the problem now, so stacktrace helps to define where the problem actualy appears.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Alexander Veremyev (alexander) on 2008-07-24T05:05:31.000+0000</p> 
        <div class="body">
            <p>I found where the problem was.</p>

<p>Segments updating (which may happen if some documents were deleted) and segments_xxx file updaing were performed separately.  So there was a lack for index updating lock.
It may cause the floowing actions sequence:</p>

<p>process1 performs segments updating and writes new del file <em>30_j.del -&gt;
process2 performs segments updating and writes new del file _30_k.del -&gt;
process2 performs segment updating and writes new segments_xxx (with the latest del file generation k for segment _30) -&gt;
process1 performs segment updating and writes new segments_xxx+1 (with the latest del file generation j for segment _30) -&gt;
process1 performs index directory cleanup and deletes all _30</em>*.del file excepting the last -&gt;
latest segments_yyy refers del generation for segment _30 as _j, but index folder doesn't contain _30_j.del file =&gt; index is corrupted, exception is thrown.</p>

<p>Fixed for the trunk, release-1.5 and release-1.6 branches. Will be included into ZF 1.5.3 (should come within a week).</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-09-02T10:39:02.000+0000</p> 
        <div class="body">
            <p>Updating for the 1.6.0 release.</p>

        </div>
    </div>
    </div>

