<h2>ZF-6246: Zend_Application needs an getConfig()</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2009-04-09T01:33:33.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-07-24T04:56:50.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Matthew Weier O'Phinney (matthew)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Application</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-6345">ZF-6345</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
        <li><a href="/issues/secure/attachment/12091/zend_app.patch">zend_app.patch</a></li>
        </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Some things, as router it does accept only Zend_Config, not array, so we would like either to get options as array or as Zend_Config.</p>

<p>So a getConfig would be useful, or a getOptions with some params as ARRAY/CONFIG.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2009-04-17T05:27:12.000+0000</p> 
        <div class="body">
            <p>You can already do this:</p>

<pre class="highlight"><code>
$config = new Zend_Config($application-&gt;getOptions());
</code></pre>

<p>Since this is a one-line solution, I'm going to close this issue.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ben Scholzen (dasprid) on 2009-04-17T05:47:38.000+0000</p> 
        <div class="body">
            <p>Well, but this costs extra performance, and when the config already existed when loading...</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2009-04-17T07:32:18.000+0000</p> 
        <div class="body">
            <p>You're making the assumption that they're using a config file -- when they may actually be passing an array. ;)</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Rafael Machado Dohms (rdohms) on 2009-07-21T08:11:11.000+0000</p> 
        <div class="body">
            <p>Using the method stated above is just fine, but there is a big problem there.</p>

<p>The result of:</p>

<pre class="highlight"><code>
$config = new Zend_Config($application-&gt;getOptions());
</code></pre>

<p>is different from the original config that was sent to Zend_Application beacuse of line 119 of Zend_Application:</p>

<pre class="highlight"><code>
$options = array_change_key_case($options, CASE_LOWER);
</code></pre>

<p>This makes a param like logDir become logdir in "reloaded" config, hence, $config-&gt;logDir renders NULL.</p>

<p>The case conversion is used in setOptions to make it easier to read the basic props, like phpsettings and such, the problem is that these options get stored in a lowercase format, which is not needed since they were already processed. So this operation should be done on a copy of the original array, and the original array should be stored, allowing the rest of the application to read the config normally.</p>

<p>Working on a patch for this.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2009-07-21T08:21:56.000+0000</p> 
        <div class="body">
            <p>That's a really bad idea -- that means two copies of the array internally, and since options may be added or modified at any time, it'll be a nightmare to keep up-to-date.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Rafael Machado Dohms (rdohms) on 2009-07-21T10:14:59.000+0000</p> 
        <div class="body">
            <p>Matthew,</p>

<p>Not really.
As per the patch attached, if you move that line a bit down, the case conversion only happens to data used inside the function and what is stored is the original values. Hence you don't have any extra processing that you don't already do today.</p>

<p>This will however break any ZF code that depends on this alteration of option cases, as opposed to breaking any user application that tries to use getOptions to get cased parameters.</p>

<p>imho you should not alter the case of user created options (non standard ZF options)</p>

        </div>
    </div>
    </div>

