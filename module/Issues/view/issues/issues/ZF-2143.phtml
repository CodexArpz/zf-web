<h2>ZF-2143: Allow the where() method of Zend_Db_Select to accept &quot;named placeholeders&quot; from an array</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2007-11-04T14:57:06.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2010-11-23T05:56:50.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>Next Major Release ()</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Ryan Mauger (bittarman)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Db_Select</li>
            <li>Zend_Db_Table</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-2144">ZF-2144</a></li>
            <li><a href="/issues/browse/ZF-2228">ZF-2228</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>The where() method of Zend_Db_Select can be called with a second parameter that gets quoted and substituted into the first parameter and replaces the placeholder (question mark).  Since the where() method can be called multiple times, multiple parameters can be quoted.</p>

<pre class="highlight"><code>
$select = $db-&gt;select()
    -&gt;from("products")
    -&gt;where("product_name = ?", $prod)
    -&gt;where("price &lt; ?", $minimumPrice)
    -&gt;orWhere("price &gt; ?", $maximumPrice);
</code></pre>

<p>It would be nice if we could pass an array to the where() method that was used to populate "named placeholders" that correspond to the keys of the array. e.g.</p>

<pre class="highlight"><code>
$params = array('product' =&gt; $prod, 'minprice' =&gt; $minimumPrice, 'maxprice' =&gt; $maximumPrice);

$select = $db-&gt;select()
    -&gt;from("products")
    -&gt;where("product_name = :product AND (price &lt; :minprice OR price &gt; :maxprice)", $params);
</code></pre>

<p>The utility of this functionality becomes clearer if the array with the parameters is coming another source e.g.</p>

<pre class="highlight"><code>
$params = $request-&gt;getPost;

$select = $db-&gt;select()
    -&gt;from("products")
    -&gt;where("product_name = :product AND (price &lt; :minprice OR price &gt; :maxprice)", $params);
</code></pre>

<p>This could potentially be extended to the Ztend_Db_Table::fetchAll() method as well e.g.</p>

<pre class="highlight"><code>
$table = new Products();
$where = array("product_name = :prod AND (price &gt; :minPrice OR price &lt; :maxPrice)" =&gt; $requst-&gt;getPost());
$table-&gt;fetchAll($where);
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Darby Felton (darby) on 2007-11-05T14:46:59.000+0000</p> 
        <div class="body">
            <p>Assigning to [~thomas].</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Andi Gutmans (andi) on 2007-11-08T18:19:17.000+0000</p> 
        <div class="body">
            <p>I think this idea has merit but the example use-case is very scary i.e. passing POST data directly into the query :) Definitely shouldn't find its way into a proposal or documentation.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2007-11-09T00:39:19.000+0000</p> 
        <div class="body">
            <p>Of course we will not show usage of getPost directly to the query.</p>

<p>In my usecases I have discussed with Simon and Darby this usecase was not included in this way. We will add an example which will add an filtered/validated array to the query so the benefit of array usage is clear.</p>

<p>We do not want to show unsecure deadly usage :-)</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Marc Richards (talawahdotnet) on 2007-11-09T08:18:39.000+0000</p> 
        <div class="body">
            <p>Yeah, I was just doing that for brevity.  Validation would definitely be necessary.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2007-11-17T07:08:15.000+0000</p> 
        <div class="body">
            <p>Integrated to trunk...
Please check SVN8640 or later and give us feedback.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2007-11-22T03:08:03.000+0000</p> 
        <div class="body">
            <p>Solution not accepted by community and main author.
Reverted the changes.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2007-11-22T03:35:03.000+0000</p> 
        <div class="body">
            <p>Unassigned as original additional where methodology was not accepted.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2008-01-25T13:45:19.000+0000</p> 
        <div class="body">
            <p>Integrated with SVN7576. Cored with Release 1.5</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2008-03-12T13:02:06.000+0000</p> 
        <div class="body">
            <p>Erased from core for review of complete component</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-03-25T20:43:52.000+0000</p> 
        <div class="body">
            <p>Please categorize/fix as needed.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-12-19T11:04:36.000+0000</p> 
        <div class="body">
            <p>Ralph, we need to put this one to bed. I see the use case, but if there isn't a lot of interest (note there are 0 votes) and it can be done another way, then we should probably close as 'will not fix'. Please provide comment if you think this issue should remain open.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ralph Schindler (ralph) on 2009-01-10T10:34:51.000+0000</p> 
        <div class="body">
            <p>This will be evaluated in part with ZF-2228, within 2 weeks</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Chance Garcia (chance) on 2009-05-29T11:17:12.000+0000</p> 
        <div class="body">
            <p>I would like to see named binding implement in Zend_Db_Select::where() as well.</p>

<p>even though the existing solution works, the ease of implementation is awkward for trying to automate. The readability of named vs unnamed binding is debatable.</p>

<p>Regardless of whether or not named binding will be implemented, the reference guide and api should note that named binding isn't possible and provide the example of how to do unnamed binding for multiple binds.
This ticket is the only reason I figured out/found out that $select-&gt;where('foo=?',$foo)-&gt;where('bar=?',$bar)  is how to do multiple binds.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ryan Mauger (bittarman) on 2010-11-23T05:56:48.000+0000</p> 
        <div class="body">
            <p>Closing as no longer an issue.</p>

<p>This functionality is already available, though through a slightly different notation.</p>

<pre class="highlight"><code>
$db-&gt;select()
       -&gt;from('products')
       -&gt;where('product = :product AND (foo = :foo OR bar = :bar)')
       -&gt;bind(array('product' =&gt; $product, 'foo' =&gt; $foo, 'bar' =&gt; $bar));
</code></pre>

<p>or</p>

<pre class="highlight"><code>
$select = $db-&gt;select()
       -&gt;from('products')
       -&gt;where('product = :product AND (foo = :foo OR bar = :bar)');
$db-&gt;fetchAll($select, array('product' =&gt; $product, 'foo' =&gt; $foo, 'bar' =&gt; $bar));
</code></pre>

<p>This also works with Zend_Db_Table_Select</p>

        </div>
    </div>
    </div>

