<h2>ZF-2204: wrong stacking of plugins.</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2007-11-14T17:26:33.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-01-10T10:50:11.000+0000</dd>

    <dt>Status:</dt>
    <dd>Postponed</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>Next Major Release ()</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Ralph Schindler (ralph)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Controller</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
        <li><a href="/issues/secure/attachment/10994/Broker.php.diff">Broker.php.diff</a></li>
        </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>It's description of Matthew Weier O'Phinney:
"Let's say you have 3 plugins, one registered with no stackIndex, one
with a stackIndex of 99, and another with one of 50. If you register
another, it will get a stackIndex of 3, when it should get a stackIndex
of 1. "</p>

<pre class="highlight"><code>
    public function registerPlugin(Zend_Controller_Plugin_Abstract $plugin, $stackIndex = null)
    {
        //code
        } else {
            $stackIndex = count($this-&gt;_plugins); // why?
            while (isset($this-&gt;_plugins[$stackIndex])) {
                ++$stackIndex;
            }
            $this-&gt;_plugins[$stackIndex] = $plugin;
        }
        //code
    }
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2007-11-16T14:52:14.000+0000</p> 
        <div class="body">
            <p>Scheduling for 1.0.3</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2007-11-26T15:49:13.000+0000</p> 
        <div class="body">
            <p>Postponing to 1.1.0. Right now, I can't figure out a way to do stack ordering that's (a) easily user manipulable (b) maintains reasonable internal index order when indices are automatically generated, and (c) retains backwards compatibility. When I can sit down with the code and ensure (c) in particular can be met, while meeting (a) and (b), we can proceed -- and that will need to wait for 1.1.0.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Jordan Ryan Moore (jordanryanmoore) on 2007-12-17T12:44:55.000+0000</p> 
        <div class="body">
            <p>Attaching patch that fixes this bug.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-04-18T13:12:01.000+0000</p> 
        <div class="body">
            <p>This doesn't appear to have been fixed in 1.5.0. Please update if this is not correct.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ralph Schindler (ralph) on 2008-04-22T10:38:29.000+0000</p> 
        <div class="body">
            <p>Updating project management info.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2008-11-05T08:23:02.000+0000</p> 
        <div class="body">
            <p>Assigning to Ralph.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ralph Schindler (ralph) on 2009-01-10T10:50:10.000+0000</p> 
        <div class="body">
            <p>This actually works very similar to how php would increment stack index.  Notice:</p>

<pre class="highlight"><code>
~/tmp$ cat php-array-indexes.php 
&lt;?php

$stack = array();
$stack[-99] = 'foo';
$stack[-50] = 'bar';
$stack[] = 'baz';

var_dump($stack);

$stack[50] = 'bar2';
$stack[] = 'baz2';

var_dump($stack);
~/tmp$ php php-array-indexes.php 
array(3) {
  [-99]=&gt;
  string(3) "foo"
  [-50]=&gt;
  string(3) "bar"
  [0]=&gt;
  string(3) "baz"
}
array(5) {
  [-99]=&gt;
  string(3) "foo"
  [-50]=&gt;
  string(3) "bar"
  [0]=&gt;
  string(3) "baz"
  [50]=&gt;
  string(4) "bar2"
  [51]=&gt;
  string(4) "baz2"
}
</code></pre>

<p>In our case, the next number represents both the next available positive index AS WELL as the number (if none was provided) of the plugin that was pushed onto the stack.  I think this behavior is correct.  On the other hand, i think the actual index and top/bottom of the stack might need to be re-evaluated.</p>

        </div>
    </div>
    </div>

