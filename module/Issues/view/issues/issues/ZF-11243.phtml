<h2>ZF-11243: Zend_Db_Table_Rowset_Abstract toArray doesn't always call toArray on rows.</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2011-03-29T20:15:05.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-04-04T16:39:48.000+0000</dd>

    <dt>Status:</dt>
    <dd>Open</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Joe Gornick (jgornick)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Ralph Schindler (ralph)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Db_Table</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>The Zend_Db_Table_Row_Abstract toArray method isn't always called when calling toArray on the Zend_Db_Table_Rowset_Abstract.  Currently there's a TODO in the code that states this issue:</p>

<pre class="highlight"><code>`

When calling toArray on the rowset, shouldn't we be instantiating the row class and calling the toArray method on it?

Here's an updated version of the method up for discussion:

</code></pre>

<p>/**
 * Returns all data as an array.
 *
 * Updates the $_data property with current row object values.
 *
 * @return array
 */
public function toArray()
{
    if (!$this-&gt;_rows &amp;&amp; $this-&gt;_data) {
        foreach ($this-&gt;_data as $i =&gt; $data) {
            $this-&gt;_loadAndReturnRow($i);
        }
    }</p>

<pre><code>// @todo This works only if we have iterated through
// the result set once to instantiate the rows.
foreach ($this-&gt;_rows as $i =&gt; $row) {
    $this-&gt;_data[$i] = $row-&gt;toArray();
}
return $this-&gt;_data;
</code></pre>

<p>} 
```</p>

<p>Thoughts?</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Ralph Schindler (ralph) on 2011-04-01T17:37:55.000+0000</p> 
        <div class="body">
            <p>By iterating and loading rows, there is a chance memory might increase.  I wonder if this should be optional behavior?</p>

<p>Is there something you're missing by not instantiating a row object?</p>

<p>-ralph</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Joe Gornick (jgornick) on 2011-04-05T07:00:32.000+0000</p> 
        <div class="body">
            <p>I needed the rows to be initialized because when I call toArray on the rowset, I want it to call toArray on each row as well.  In my implementation, I had the toArray for each row producing a custom array representation of the row.</p>

<p>Thoughts?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by AsTeR (asterfr) on 2012-04-04T16:39:48.000+0000</p> 
        <div class="body">
            <p>TMHO the proposition is wrong, it'll fail if some rows but not all have already been loaded with _loadAndReturnRow, _rows would be set but incomplete, here's an improved version.</p>

<pre class="highlight"><code>
public function toArray()
{
    foreach ($this-&gt;_data as $i =&gt; $data) {
        $row = $this-&gt;_loadAndReturnRow($i);
        $this-&gt;_data[$i] = $row-&gt;toArray();
    }
    return $this-&gt;_data;
}
</code></pre>

<p>I agree that the current behavior is unexpected, the user of the class shouldn't care wether or not rows have been accessed.</p>

<p>I suggest to simply iterate over rows registered in the _data array, at first glance this has no overhead.</p>

        </div>
    </div>
    </div>

