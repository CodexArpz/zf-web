<h2>ZF-10548: Zend_Tool_Project_Context_Zf_BootstrapFile::getApplicationInstance() does not allow for config[]=... in application.ini</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2010-10-11T08:55:10.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-05-18T12:05:39.000+0000</dd>

    <dt>Status:</dt>
    <dd>Reopened</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Ralph Schindler (ralph)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Tool</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-10945">ZF-10945</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Zend_Application will read and merge multiple configuration files when in a .ini file you specify an attribute like so;</p>

<p>config[] = path/to/other.ini</p>

<p>Zend_Tool currently doesn't honor this method, because it utilizes the config attribute itself. This forces a developer to not use the configs directories if he also uses Zend_Tool.</p>

<p>Simple enough to fix in Zend_Tool_Project_Context_Zf_BootstrapFile::getApplicationInstance</p>

<pre class="highlight"><code>
    public function getApplicationInstance()
    {
        if ($this-&gt;_applicationInstance == null) {
            if ($this-&gt;_applicationConfigFile-&gt;getContext()-&gt;exists()) {
                define('APPLICATION_PATH', $this-&gt;_applicationDirectory-&gt;getPath());
                $applicationOptions = array();
                $applicationOptions['config'] = $this-&gt;_applicationConfigFile-&gt;getPath();
    
                $this-&gt;_applicationInstance = new Zend_Application(
                    'development',
                    $applicationOptions
                    );
            }
        }
    }
</code></pre>

<p>To</p>

<pre class="highlight"><code>
    public function getApplicationInstance()
    {
        if ($this-&gt;_applicationInstance == null) {
            if ($this-&gt;_applicationConfigFile-&gt;getContext()-&gt;exists()) {
                define('APPLICATION_PATH', $this-&gt;_applicationDirectory-&gt;getPath());
                $this-&gt;_applicationInstance = new Zend_Application(
                    'development',
                    $this-&gt;_applicationConfigFile-&gt;getPath()
                    );
            }
        }
        
        return $this-&gt;_applicationInstance;
    }
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Bas K (bas) on 2011-01-13T11:40:12.000+0000</p> 
        <div class="body">
            <p>please see <a href="http://framework.zend.com/issues/browse/ZF-10945">http://framework.zend.com/issues/browse/ZF-10945</a> as this turned out to be an issue with Zend_Application</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bas K (bas) on 2011-05-10T17:53:40.000+0000</p> 
        <div class="body">
            <p>The behavior seen is actually not a issue with Zend_Tool but with the way Zend_Application handles its invocation (see issue 10945).</p>

<p>The simplest solution would be to change the (mentioned in this post) code so it works around the issue.</p>

        </div>
    </div>
    </div>

