<h2>ZF-1583: Zend_Cache_Backend_APC should be Zend_Cache_Backend_Apc</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2007-06-18T11:50:01.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2007-07-05T14:44:20.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.0.0 (30/Jun/07)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Geoffrey Tran (potatobob)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Fabien MARTY (fab)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Cache</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>h4. Problem
In the Apc.php file,  Zend_Cache_Backend_APC should be Zend_Cache_Backend_Apc as it seems to break the naming convention.</p>

<pre class="highlight"><code>
/**
 * @package    Zend_Cache
 * @subpackage Backend
 * @copyright  Copyright (c) 2005-2007 Zend Technologies USA Inc. (<a href="http://www.zend.com">http://www.zend.com</a>)
 * @license    <a href="http://framework.zend.com/license/new-bsd">http://framework.zend.com/license/new-bsd</a>     New BSD License
 */
class Zend_Cache_Backend_APC extends Zend_Cache_Backend implements Zend_Cache_Backend_Interface
</code></pre>

<hr /><p><a href="">www.spotsec.com</a>" rel="nofollow"&gt;SpotSec</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Fabien MARTY (fab) on 2007-06-19T16:42:22.000+0000</p> 
        <div class="body">
            <p>fixed in manual SVN</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Fabien MARTY (fab) on 2007-06-19T16:45:57.000+0000</p> 
        <div class="body">
            <p>sorry I fixed this task by error</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Fabien MARTY (fab) on 2007-06-19T16:46:22.000+0000</p> 
        <div class="body">
            <p>ok for 1.1.0</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Geoffrey Tran (potatobob) on 2007-06-27T13:12:59.000+0000</p> 
        <div class="body">
            <p>Hi Marty, can you clarify as to why this issue has been scheduled for 1.1.0? As far as I can see renaming the class to fit  naming conventions will not affect the stability of the 1.0 api because class names are case in-sensitive. Perhaps you could enlighten me on this. :)</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Fabien MARTY (fab) on 2007-06-27T14:09:03.000+0000</p> 
        <div class="body">
            <p>Because, file names are not case insensitive (on linux/unix :</p>

<pre class="highlight"><code>
// [...]       
        // For perfs reasons, we do not use the Zend_Loader::loadClass() method
        // (security controls are explicit)
        require_once str_replace('_', DIRECTORY_SEPARATOR, $frontendClass) . '.php';
        require_once str_replace('_', DIRECTORY_SEPARATOR, $backendClass) . '.php';
// [...]
</code></pre>

<p>So I prefer do not change anything before 1.0</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Geoffrey Tran (potatobob) on 2007-06-27T14:26:29.000+0000</p> 
        <div class="body">
            <p>Thanks for the quick reply :), but either you or some one else implemented normalization of the input so that problem would not apply to this situation.</p>

<pre class="highlight"><code>
[...]
        // because lowercase will fail
        $frontend = self::_normalizeName($frontend);
        $backend  = self::_normalizeName($backend);
[...]
        // For perfs reasons, we do not use the Zend_Loader::loadClass() method
        // (security controls are explicit)
        require_once str_replace('_', DIRECTORY_SEPARATOR, $frontendClass) . '.php';
        require_once str_replace('_', DIRECTORY_SEPARATOR, $backendClass) . '.php';
[...]
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Darby Felton (darby) on 2007-06-28T09:56:08.000+0000</p> 
        <div class="body">
            <p>This small issue would be better fixed now than later, in my opinion, since the effect will only be worse after 1.0.0 GA and uptake dramatically increases. Sure, we wanted to be stable before now, but we must be stable after 1.0.0 GA. Are there really compelling reasons to delay this simple fix?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Fabien MARTY (fab) on 2007-06-28T14:46:47.000+0000</p> 
        <div class="body">
            <p>Sorry Geoffrey ! I read too fast !</p>

<p>fixed in SVN (thanks)</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Geoffrey Tran (potatobob) on 2007-06-28T14:59:38.000+0000</p> 
        <div class="body">
            <p>These things happen :) were all busy.</p>

        </div>
    </div>
    </div>

