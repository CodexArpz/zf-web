<h2>ZF-280: Allow Zend_Controller_Action to abort before run()</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>New Feature</dd>

    <dt>Created:</dt>
    <dd>2006-07-23T09:42:05.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2007-07-05T14:43:16.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>0.2.0 (29/Oct/06)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Simon Mundy (peptolab)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Matthew Weier O'Phinney (matthew)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Controller</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Zend_Controller_Dispatcher has a plugin architecture for handling pre/post processing of dispatch tokens, but there is currently no way to prevent a Zend_Controller_Action from being executed if it has been selected for dispatch. However it is likely that a controller may need to be aborted before the action is called. An example of this is a controller that relies on a shopping cart that may wish to _redirect to a completely separate login controller, or a selective caching mechanism that tests for specific controller logic before returning a hit or miss. These kinds of fine-grain control of application processing are not really possible via the dispatch plugin mechanism, as they handle only a dispatch token, not an instance of the controller itself.</p>

<p>Would it be possible to add an _abort() method to a controller action? This could be called from the constructor, and could either set up a protected property to indicate a non-execution ($_abort = true) or a new token to execute ($_abort = new Zend_Controller_Dispatch_Token('mycontroller', 'login'))</p>

<p>This would prevent instances of multiple (and identical) function calls within each action to effect the same kind of result.</p>

<p>UC:-</p>

<pre class="highlight"><code>
class MyController extends Zend_Controller_Action
{
    function __construct()
    {
        $session = Zend::registry('session');
        if (!$session-&gt;active) {
            $this-&gt;_abort(new Zend_Controller_Dispatcher_Token('mylogin', 'index', array('refer' =&gt; 'mycontroller')));
        }
    }
}
</code></pre>

<p>I realise this can be achieved by using a Dispatcher plugin, but that would seem inefficient to perform such a specific controller check at a more 'global' level.</p>

<p>I propose the _abort() method as it follows the convention of the existing _redirect and _forward methods. It could refer to a private property $_abort and this could be accessed in the run() method, preceding the calls to determine the current action name.</p>

<p>e.g.</p>

<pre class="highlight"><code>
    final public function run(Zend_Controller_Dispatcher_Interface $dispatcher,
                              Zend_Controller_Dispatcher_Token    $action)
    {
        if ($this-&gt;_abort) {
            return $this-&gt;_nextAction; // returns null or Zend_Controller_Dispatcher_Token
        }

        $this-&gt;_action     = $action;
        $this-&gt;_params     = $action-&gt;getParams();
        ...etc...
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2006-11-02T00:49:20.000+0000</p> 
        <div class="body">
            <p>This has been addressed in the MVC implementation in the incubator (current SVN and 0.2.0 release). Implement the preDispatch() method, and, if you want to abort execution of the selected action, call _forward():</p>

<pre class="highlight"><code>
public function preDispatch()
{
    $session = Zend::registry('session');
    if (!$session-&gt;active) {
        $this-&gt;_forward('mylogin', 'index', array('refer' =&gt; 'mycontroller'));
    }
}
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2006-11-02T00:49:56.000+0000</p> 
        <div class="body">
            <p>Fixed in MVC in incubator in 0.2.0</p>

        </div>
    </div>
    </div>

