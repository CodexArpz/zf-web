<h2>ZF-5198: Zend_Date::WEEKDAY_NARROW destroys multibyte-characters</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2008-12-10T06:31:21.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2008-12-11T12:05:58.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                David Aurelio (_david)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Thomas Weidner (thomas)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Date</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Zend_Date::get() uses substr() to return dates formatted as Zend_Date::WEEKDAY_NARROW, which obviously doesn't work with multibyte charsets (as long it has not been overloaded with mb_substr).</p>

<p>This shortening method may also distort the meaning of the output for ideographic writing systems (not sure about that, but according to google translate "星期三" means "wednesday" while "星" means "star").</p>

<h1>EDIT:</h1>

<p>Sorry for editing, but I could not find a possibility to add a comment.</p>

<p>Maybe I should have opened two bugs ...
While it is debatable whether the user of a framework or the framework itself should provide the functionality to distinguish between ideographic and alphabetic languages, it seems pretty clear to me that</p>

<p>{{&lt;?php}}
{{$date = new Zend_Date('2008-12-10');}}
{{echo $date-&gt;get(Zend_Date::WEEKDAY_NARROW, 'pl');}}</p>

<p>is not supposed to output "�".
This issue is due to the usage of substr() on an UTF-8-string, as I had already pointed out. It has also been the main reason for opening this bug. I really can't understand the reason for setting the resolution of this bug to "Won't Fix".</p>

<h1>EDIT 2:</h1>

<p>Once again, sorry for editing. Is there a way to comment?</p>

<p>The title of this Issue is "Zend_Date::WEEKDAY_NARROW destroys multibyte-characters". This has nothing to do with the second problem mentioned in my description, which is arguable and a "Won't Fix" for that is acceptable.</p>

<p>Please read the first paragraph of my issue report once again. No mentioning of chinese. But mentioning multibyte characters. This is clearly a bug. No need for excuses.</p>

<h1>EDIT 3:</h1>

<p>I'm sorry I have to say this, but I get the impression that you're either too haughty to admit there is a problem with the (your?) implementation or you really have no clue about multibyte encodings. You've been pointed to the exact location by Martin. If the use of mb_* functions breaks your code, just use iconv_substr instead. But I'm sure you ‒ as a professional programmer ‒ already knew about that. I will open a new bug without mentioning the minor issue concerning ideographic writing systems. Maybe the point will be clearer to you, then.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2008-12-10T08:25:09.000+0000</p> 
        <div class="body">
            <p>According to manual:</p>

<p>"Weekday (Name of the day, localized, abbreviated, only the first digit)"
"F for Friday"</p>

<p>So this can not work for multicharacter languages when the meaning of one character is different than using the whole weekdayname.</p>

<p>The solution is not to use this constant with multichar languages like chinese, korean or japanese when they can not be used this way.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2008-12-10T09:35:38.000+0000</p> 
        <div class="body">
            <p>Your issue was about chinese producing a false output for weekdays.</p>

<p>As I said, when a abbreviation of a day has a different meaning in a language you can not use abbreviated days when you are working with such a language.</p>

<p>There is no way to differ for the framework what you want. All data which is provided by Zend_Date are originally from a Unicode database. There is no way for us to check all translations and all strings of this database if they are consistent or not.</p>

<p>Therefor I said: When you are using multicharacter languages, where the abbreviated string has a different meaning than the complete word, you can not use the abbreviation constants.</p>

<p>This is something the user has to be aware and not ZF.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Martin Hujer (mhujer) on 2008-12-10T09:53:14.000+0000</p> 
        <div class="body">
            <p>It does not work also for Czech.</p>

<pre class="highlight"><code>$date = new Zend_Date('2008-12-11');
var_dump($date-&gt;get(Zend_Date::WEEKDAY_NARROW, 'cs'));</code></pre>

<p>I think, most of the Czech ZF users will be waiting for: 'č' and if they get '�' they won't be very happy.</p>

<p>Fix can be done somehow like: in Zend/Date.php:839 change  return substr($day, 0, 1); to return mb_substr($day, 0, 1, 'utf-8');
But it should be more sophisticated and allow setting of the encoding.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2008-12-10T10:45:46.000+0000</p> 
        <div class="body">
            <p>*) I may be blind but these "星期三"  are definitly chinese hant or pigdin characters.</p>

<p>*) Please do not throw together multiple issues in one... this is really bad behaviour and complicates search, reply and fixing. Thank you.</p>

<p><em>) Actually it is not possible to add mb_</em> functions to Zend_Date as it is based in iconv_* and not mb_*. This dependency would break things elsewhere in Zend_Date. Czech characters are no multibyte so the issue is not the same.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Dolf Schimmel (Freeaqingme) (freak) on 2008-12-10T14:04:08.000+0000</p> 
        <div class="body">
            <p>David,</p>

<p>First of all, let me please start by saying that constantly editing your first post is very irritating, especially if you keep doing so after you were asked to stop it. If you really can't find it, look harder, or click this link: <a href="http://framework.zend.com/issues/secure/AddComment!default.jspa?id=16822">http://framework.zend.com/issues/secure/…</a></p>

<p>Secondly, the problem with the thing you're trying to address is that your solution would break BC, and that a lot of people currently do not have the mb_ functions installed and/or enabled. Instead of Thomas not knowing about multibyte encodings, and maybe seems to ignore you, it sounds like you are not realizing on how a framework is developed, and what kind of aspects are to be taken into account. Of course you can disagree with decisions made by a component lead. If you do, I'd like to invite you to IRC ( <a>irc://irc.freenode.org/zftalk.dev</a> ) or the ZF-contributors mailinglist.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2008-12-11T12:05:57.000+0000</p> 
        <div class="body">
            <p>Multichar languages are not supported by unicode</p>

        </div>
    </div>
    </div>

