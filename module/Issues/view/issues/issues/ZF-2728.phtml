<h2>ZF-2728: Add a possibility to avoid that filters are recursively applied to each array value.</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2008-02-25T11:18:20.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2008-11-26T09:00:07.000+0000</dd>

    <dt>Status:</dt>
    <dd>Closed</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Laurent Melmoux (laurent melmoux)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Matthew Weier O'Phinney (matthew)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Form</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>If an element's value is an array, the filters are recursively applied to each array value. But sometime you may need to have a filter to work directly on an array (to remove elements on some conditions for example)</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2008-03-05T10:15:35.000+0000</p> 
        <div class="body">
            <p>I need some code -- what exactly do you want to accomplish, and how does Zend_Form_Element prevent you from accomplishing it?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Laurent Melmoux (laurent melmoux) on 2008-03-05T11:49:08.000+0000</p> 
        <div class="body">
            <p>Fore example if you have a many to many table to describe which kind of bed and how many of them you have in a hotel bedroom. 
You display in your form all the bed's type with a checkbox and a select with a array notation like this.</p>

<p>beds[2][id] 
beds[2][num]</p>

<p>beds[3][id] 
beds[3][num]</p>

<p>beds[4][id] 
beds[4][num]</p>

<p>When you submit the form you will get all the beds type in the $_POST['beds'] var. 
When the checkbox haven't been checked the key $beds[index][id] won't be set. So you may want a custom filter to remove the unchecked elements.</p>

<p>But as Zend_Filter_Element::getValue() is construct it will prevent to have the filter working because it will call the filter for each elements of the array</p>

<pre class="highlight"><code>
// Zend_Filter_Element::getValue()
array_walk_recursive($valueFiltered, array($this, '_filterValue'));
</code></pre>

<p>while we would like the plain array to be passed to the filter.</p>

<p>Hope my English is not too obscure :)</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-03-25T20:29:10.000+0000</p> 
        <div class="body">
            <p>Please categorize/fix as needed.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2008-04-22T11:15:34.000+0000</p> 
        <div class="body">
            <p>Use getRawValue() to pull the plain, infiltered array, which you can then pass to your own custom filter.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Jaka Jancar (jaka) on 2008-11-20T12:07:57.000+0000</p> 
        <div class="body">
            <p>Please consider this again, Matthew.</p>

<p>It really is an issue, especially because Zend_Form_Element is IMPOSSIBLE to modify without re-implementing all the Zend_Form_Element_* classes.</p>

<p>The problem is that some of us have defined elements that are arrays by themselves, and instead of filtering them as a whole, this filters their individual values.</p>

<p>E.g. an element that represents a date and is an array with keys day/month/year. Instead of filtering the date as a whole, this would run the filters on the individual date components.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2008-11-20T12:17:02.000+0000</p> 
        <div class="body">
            <p>I need a concrete use case: what is the data being filtered, how the filter would be attached, and what the expected outcome will be. I understand what you're getting at, but I'm not going to take a stab in the dark at implementing it without these details.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Jaka Jancar (jaka) on 2008-11-20T12:39:15.000+0000</p> 
        <div class="body">
            <p>I'll try to provide you with a clear example, but before I do so, if you don't mind, can you tell me WHY is the recursion there at all? Which elements return recursive values that need recursive filtering?</p>

<p>Just so I see both sides of the problem.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2008-11-20T12:40:46.000+0000</p> 
        <div class="body">
            <p>Look through the issue tracker; the feature was added by user request.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Jaka Jancar (jaka) on 2008-11-20T14:01:54.000+0000</p> 
        <div class="body">
            <p>Seems I can't find the ticket... doesn't matter.</p>

<p>The problem is difficult to demonstrate, because it's conceptual and you run into it only after you've extended Zend_Form_Element and the renderers quite a bit. Nevertheless, I'll try to give you an example (it seems to me that both me and the OP were doing a similar thing). Please bear with me, this is long :)</p>

<p>Added to Zend_Form is the functionality for two things:</p>

<ul><li><p><em>compound elements</em> (or "objects" if you will), which are represented in HTML using PHP array notation (object[property]). This is Zend_Form_Element_Person in this example.</p>

<ul><li><em>dynamic arrays of elements</em> (either scalar or objects). An array of scalars (e.g. text inputs) would be represented in HTML as text[0], text[1],... An array of objects would be represented as object[0][propA], object[0][propB], object[1][propA], object[1][propB]... Thanks to Zend_Form's architecture, you can add array support pretty easily.</li>
</ul></li>
</ul><p>The conceptual problem only shows itself when you use both in combination.</p>

<p>This all works <em>really</em> well, and with very little Javascript you can even let the user customize the number of items in the array without reloading a page.</p>

<p>(If you contact me privately, I'd be glad to show you how cool this all works out in practice (unfortunately, I can't yet publicly publish it), so perhaps you can keep it in mind for Zend_Form 2.0 :).)</p>

<p>Here's a VERY basic example (it assumes arrays have only one member). It shows a custom "object element", Person. The form then asks you for details about your father, your mother, and your siblings (for the purposes of the example, you can only specify one).</p>

<pre class="highlight"><code>
&lt;?php

set_include_path('library' . PATH_SEPARATOR . get_include_path());
require_once 'Zend/Loader.php';
Zend_Loader::registerAutoload();

class Zend_Form_Element_Person extends Zend_Form_Element_Xhtml {
    public function render(Zend_View_Interface $view = null) {
        $name = $this-&gt;getFullyQualifiedName();
        $name = str_replace('[]', '[0]', $name); // in reality would have to draw multiple sets in a loop, each with a different index, if $this-&gt;isArray()
        return $name .':<br />'                         
             . ' - Name: <br />'
             . ' - Age: <br />'
             . ' - Favorite color: <br /><br />';
    }
}

if ($_POST) {
    echo '</code></pre><pre><code>'.htmlspecialchars(print_r($_POST,true)).'</code></pre><code>';   
}

$form = new Zend_Form();
$form-&gt;setView(new Zend_View());
$form-&gt;addElement('person', 'father');
$form-&gt;addElement('person', 'mother');
$form-&gt;addElement('person', 'siblings', array('isArray'=&gt;true));                            
$form-&gt;addElement('submit', 'submit');
echo $form-&gt;render();

</code>

<p>You can see it in action here: <a href="http://jaka.kubje.org/temp/ZF-2728/">http://jaka.kubje.org/temp/ZF-2728/</a></p>

<p>Now if you enter details about your family, the $_POST will look like this:</p>

<pre class="highlight"><code>
Array
(
    [father] =&gt; Array
        (
            [name] =&gt; John Doe
            [age] =&gt; 50
            [favoriteColor] =&gt; blue
        )

    [mother] =&gt; Array
        (
            [name] =&gt; Jane Doe
            [age] =&gt; 48
            [favoriteColor] =&gt; red
        )

    [siblings] =&gt; Array
        (
            [0] =&gt; Array
                (
                    [name] =&gt; Jackie Doe
                    [age] =&gt; 18
                    [favoriteColor] =&gt; pink
                )

        )

    [submit] =&gt; submit
)
</code></pre>

<p>Now you make My_Filter_Person, which works on a person as a whole.</p>

<p>The filtering code in Zend_Form_Element is the following:</p>

<pre class="highlight"><code>
         if ($this-&gt;isArray() &amp;&amp; is_array($valueFiltered)) {
             array_walk_recursive($valueFiltered, array($this, '_filterValue'));
         } else {
             $this-&gt;_filterValue($valueFiltered, $valueFiltered);
         }
</code></pre>

<p>When filtering the father and mother elements, which are not arrays, the validator will receive an "object" like this:</p>

<pre class="highlight"><code>
    [father] =&gt; Array
        (
            [name] =&gt; John Doe
            [age] =&gt; 50
            [favoriteColor] =&gt; blue
        )
</code></pre>

<p>This works as expected.</p>

<p>With siblings, which is an array, you'd expect the filter to be run multiple times, once for each value. And indeed, this is how it works for arrays of scalars.</p>

<p>However for arrays of objects, it's a different story. If array_walk were used, the filter would run multiple times, once for each object, just like for father and mother element, and all would be fine and dandy. Unfortunately array_walk_recursive is used, which causes filters to run not only on first-level values, but also descends into children, which effectively runs them on object properties.</p>

<p>Hope this demonstrates it well enough.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Jaka Jancar (jaka) on 2008-11-21T02:51:13.000+0000</p> 
        <div class="body">
            <p>Oh and btw, this is also how validators are run in isValid() - once per value. They do not recurse down the values.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Laurent Melmoux (laurent melmoux) on 2008-11-21T04:31:23.000+0000</p> 
        <div class="body">
            <p>Well there is some USE CASE where the recursive behaviour is nice to have and some where you like to avoid it.</p>

<p>Just to add anthor USE CASE, one is when your filter needs to work on an array of values as a whole and not value per value.</p>

<p>Lest take for example an articles module where you can publish articles and with an article associate an unlimited number of reference url.</p>

<p>In your form you have the elements for the article and a link "add url" which let you dynamically add urls element form. When sumited the urls appear like this:</p>

<p>$_POST[links] =&gt; array('url1', 'url2', 'url3');</p>

<p>Lest say now that you have 2 filters:</p>

<p>•   My_Filter_Url which format url and remove any 'http://' Here the recursive behaviour is pefect.
•   My_Filter_UrlBlackList which is removing url from the array if the are part of a blacklist. Then here we don't want the recursive behaviour but have the full array past to the filter.</p>

<p>I'm wandering if it will be possible to pass a isRecursiveFilter option to the Zend_Form_Element::addFilter() to switch off the behaviour on demand ? I'm not sure about this request I haven't look at the Zend_Form code since several moths :)</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Laurent Melmoux (laurent melmoux) on 2008-11-24T08:52:12.000+0000</p> 
        <div class="body">
            <p>Indeed it would be nice if Zend_Form could support <em>dynamic arrays of elements</em> :)</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Laurent Melmoux (laurent melmoux) on 2008-11-26T08:23:22.000+0000</p> 
        <div class="body">
            <p>support dynamic arrays of elements could be usefull for multiple insert/update forms too.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2008-11-26T08:37:57.000+0000</p> 
        <div class="body">
            <p>I'm closing this again. If you want such support, please create a proposal. It needs to specify the requirements succinctly, and layout a plan for how to keep backwards compatibility with how these elements currently work.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Jaka Jancar (jaka) on 2008-11-26T08:56:58.000+0000</p> 
        <div class="body">
            <p>Ehh...</p>

<p>You say you need a concrete use case. I give you one (as succinct as possible). Then you close it w/o an explanation why and tell me I should now create a proposal.</p>

<p>Proposal for fixing what is basically a bug. A piece of code which no-one even knows why it is there. Something that causes filters to behave inconsistently between arrays and non-arrays. And makes them behave inconsistently with validators.</p>

<p>Don't fix it as far as I'm concerned, I can keep patching ZF until you run into the same problem and fix it. But don't waste my time having me write stuff in vain.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Jaka Jancar (jaka) on 2008-11-26T09:00:07.000+0000</p> 
        <div class="body">
            <p>Oh, and to be clear, I "do not want such support". Laurent wants such support. I want to be able to implement it myself, using Zend_Form as a base. I would only like Zend_Form to work logically/consistently, so I can do so.</p>

        </div>
    </div>
    </div>

