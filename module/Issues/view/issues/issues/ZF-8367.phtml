<h2>ZF-8367: Represents seconds with Zend_Date</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2009-11-22T01:40:41.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-11-23T10:18:51.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.10.0 (27/Jan/10)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Raphael Dehousse (thymus)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Thomas Weidner (thomas)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Date</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Hello,</p>

<p>Maybe it's not a bug, but in this case, it's a question.</p>

<p>Some days ago, I tried to display a duration (in seconds) with Zend_Date. I had some problems to represent it correctly since it was not related to a unix timestamp.</p>

<pre class="highlight"><code>
&lt;?php

include('Zend/Date.php');

$seconds = 90;

echo 'Seconds : ' . $seconds . PHP_EOL;
$date = new Zend_Date($seconds);
echo 'Should display 00:01:30' . PHP_EOL . PHP_EOL;

echo 'Timezone Europe/Brussels (UTC+1)' . PHP_EOL;
$date-&gt;setTimezone('Europe/Brussels');
echo $date-&gt;get('HH:mm:ss') . PHP_EOL;

echo 'Timezone Europe/London (UTC+0)' . PHP_EOL;
$date-&gt;setTimezone('Europe/London');
echo $date-&gt;get('HH:mm:ss') . PHP_EOL;

echo 'Timezone UTC' . PHP_EOL;
$date-&gt;setTimezone('UTC');
echo $date-&gt;get('HH:mm:ss') . PHP_EOL;

</code></pre>

<p>Here is the output :</p>

<p>Seconds : 90
Should display 00:01:30</p>

<p>Timezone Europe/Brussels (UTC+1)
01:01:30
Timezone Europe/London (UTC+0)
01:01:30
Timezone UTC
00:01:30</p>

<p>Indeed, to have the correct representation, you have to use -&gt;setTimezone('UTC');</p>

<p>So, so strange as it is, for Zend_Date, Europe/London is not the same as UTC. I do not understand why.</p>

<p>AFAIK and on Wikipedia,
Time zone   GMT (UTC0)
 - Summer (DST)     BST (UTC+1)</p>

<p>But even if I add Zend_Date::setOptions(array('fix_dst' =&gt; false)); in the beginning of the script, the result is not yet good.</p>

<p>Is it normal or is it a bug ?</p>

<p>Thanks !</p>

<p>Cheers,</p>

<p>Raphaël</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2009-11-22T01:58:04.000+0000</p> 
        <div class="body">
            <p>Sorry but you're completly wrong:</p>

<p>UTC is a timezone which does not have any DST.</p>

<p>Europe/London on the other side is identical to GMT+0 which DOES take DST into account.</p>

<p>Note that there is no UTC+1 but there is a GMT+1</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Raphael Dehousse (thymus) on 2009-11-22T14:25:47.000+0000</p> 
        <div class="body">
            <p>Hello,</p>

<p>Ok, but then, why the Zend_Date::setOptions(array('fix_dst' =&gt; false)); does not fix the thing?</p>

<p>Thank you</p>

<p>Cheers,</p>

<p>Raphaël</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2009-11-22T23:05:19.000+0000</p> 
        <div class="body">
            <p>Why should it?</p>

<p>According to manual:
{quote}
14.4.1.2. DST and Date Math
When dates are manipulated, sometimes they cross over a DST change, normally resulting in the date losing or gaining an hour. For exmaple, when adding months to a date before a DST change, if the resulting date is after the DST change, then the resulting date will appear to lose or gain an hour, resulting in the time value of the date changing. For boundary dates, such as midnight of the first or last day of a month, adding enough months to cross a date boundary results in the date losing an hour and becoming the last hour of the preceding month, giving the appearance of an "off by 1" error. To avoid this situation, the DST change ignored by using the fix_dst option. When crossing the Summer or Winter DST boundary, normally an hour is substracted or added depending on the date. For example, date math crossing the Spring DST leads to a date having a day value one less than expected, if the time part of the date was originally 00:00:00. Since Zend_Date is based on timestamps, and not calendar dates with a time component, the timestamp loses an hour, resulting in the date having a calendar day value one less than expected. To prevent such problems use the option fix_dst, which defaults to TRUE, causing DST to have no effect on date "math" (addMonth(), subMonth()). Use Zend_Date::setOptions(array('fix_dst' =&gt; false)) to enable the subtraction or addition of the DST adjustment when performing date "math".</p>

<p>If your actual timezone within the instance of Zend_Date is set to UTC or GMT the option 'fix_dst' will not be used because these two timezones do not work with DST. When you change the timezone for this instance again to a timezone which is not UTC or GMT the previous set 'fix_dst' option will be used again for date "math". 
{quote}</p>

<p>I don't see you crossing a DST... you just changed the timezone of an existing date object without doing any calculation.</p>

<p>fix_dst does only prevent problems with calculation by crossing a DST border when people are not aware of real time calculations.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2009-11-23T00:58:00.000+0000</p> 
        <div class="body">
            <p>Closing as non-Issue</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Raphael Dehousse (thymus) on 2009-11-23T10:18:49.000+0000</p> 
        <div class="body">
            <p>Ok, thank you very much for the explanation :)</p>

<p>Cheers,</p>

<p>Raph</p>

        </div>
    </div>
    </div>

