<h2>ZF-218: Support column syntax in Zend_Db_Table</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2006-07-10T01:37:08.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2007-07-05T14:43:13.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>0.9.2 (06/Apr/07)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Jonathan Adami (pitilezard)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Bill Karwin (bkarwin)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Db_Table</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-38">ZF-38</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Hi,</p>

<p>I've recently used the ZendFramework and I try to test all functionalities or at least, those I need !</p>

<p>When using the ActiveRecord Zend_Db_Table, I thought that it could be great to have an ActiveRecord working like RoR. For instance, a table Logs :</p>

<p>For the moment you have to do like following :</p>

<pre class="highlight"><code>
$log = new Logs();
$log-&gt;insert(array(
    'level' =&gt; 'MONLEVEL',
    'message' =&gt; 'Hop un test'
));
</code></pre>

<p>And I'd rather like to do :</p>

<pre class="highlight"><code>
$log = new Logs();
$log-&gt;level = 'MONLEVEL';
$log-&gt;message = 'Hop un test';
$log-&gt;insert();
</code></pre>

<p>In order to do that, I've changed the Zend_Db_Table like that :</p>

<pre class="highlight"><code>
    public function insert($data = null)
    {
        if ($data == null) {
            $data = array();
            foreach ($this-&gt;_cols as $col) {
                if (!empty($this-&gt;{$col})) {
                    $data[$col] = $this-&gt;{$col}; 
                }
            }
        }
        $this-&gt;_db-&gt;insert(
            $this-&gt;_name,
            $data
        );
        return $this-&gt;_db-&gt;lastInsertId();
    }
</code></pre>

<p>It could be great to externalize the function and to do it for update and delete ! What do you think about it ?</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Jonathan Adami (pitilezard) on 2006-07-10T06:45:43.000+0000</p> 
        <div class="body">
            <p>I just put some code tags</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Superbiji (superbiji) on 2006-07-17T03:49:27.000+0000</p> 
        <div class="body">
            <p>I love this feature addition to Zend_Db_Table ^^</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2006-11-13T15:22:39.000+0000</p> 
        <div class="body">
            <p>Changing fix version to 0.8.0.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-01-05T17:06:26.000+0000</p> 
        <div class="body">
            <p>Recategorize as Zend_Db_Table component.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-02-26T21:48:47.000+0000</p> 
        <div class="body">
            <p>Zend_Db_Table already supports something very close to what you describe:</p>

<pre class="highlight"><code>
$log = new Logs();

$logRow = $log-&gt;fetchNew();
$logRow-&gt;level = 'MONLEVEL';
$logRow-&gt;message = 'Hop un test';
$logRow-&gt;save(); // performs insert() for new row

$logRow-&gt;level = 'TUELEVEL';
$logRow-&gt;save(); // performs update() for existing row
</code></pre>

<p>The Table and Row classes are separate, so you can perform save() either to insert or update a Row, you can instantiate a new Row object, you can have multiple Row objects in your app simultaneously, etc.  It's more flexible.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-04-04T14:40:24.000+0000</p> 
        <div class="body">
            <p>Reworded summary.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-04-04T14:41:29.000+0000</p> 
        <div class="body">
            <p>The existing Row Data Gateway implementation provides similar functionality and is more flexible than the Ruby on Rails style of syntax.  So we are not going to implement the RoR style.</p>

        </div>
    </div>
    </div>

