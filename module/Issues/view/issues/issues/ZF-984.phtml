<h2>ZF-984: Zend_Acl : debug for inheritance of rules : get source from used rule</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Community Driven Feature</dd>

    <dt>Created:</dt>
    <dd>2007-02-27T00:54:53.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2013-02-10T16:15:49.000+0000</dd>

    <dt>Status:</dt>
    <dd>Open</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>Next Minor Release ()</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Daniel Fullarton (linead)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Acl</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
        <li><a href="/issues/secure/attachment/12439/acl.diff">acl.diff</a></li>
            <li><a href="/issues/secure/attachment/12291/logtest.php">logtest.php</a></li>
        </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>hello,</p>

<p>The Zend_Acl inheritance system of to be applied rules is powerful because it does allow inheriting rules from multiple parents.
The drawback of this mechanic is that the Acl is like a black box returning the 'last inserted' rule.</p>

<p>When debugging an application, or even during normal usage, it can be very informative for the users to get informed what rules have been applied.
Following a previous discussion with Darby Felton :
Consider the following code:</p>

&lt;?php
require_once 'Zend/Acl.php';
$acl = new Zend_Acl();

require_once 'Zend/Acl/Role.php';
$acl-&gt;addRole(new Zend_Acl_Role('guest'))
    -&gt;addRole(new Zend_Acl_Role('member'))
    -&gt;addRole(new Zend_Acl_Role('admin'));

$parents = array('guest', 'member', 'admin');
$acl-&gt;addRole(new Zend_Acl_Role('someUser'), $parents);

require_once 'Zend/Acl/Resource.php';
$acl-&gt;add(new Zend_Acl_Resource('someResource'));

$acl-&gt;deny('guest', 'someResource');
$acl-&gt;allow('member', someResource');

echo $acl-&gt;isAllowed('guest', 'someResource') ? 'allowed' : 'denied';
?&gt;

<p>So, the printed result should be 'Allowed' since the rules are checked as 
admin =&gt; no rule
member =&gt;allowed
===&gt;exit (guest is not processed)</p>

<p>The problem is then to know that the 'allowed' result actually comes from the 'member' Role, not from 'Guest' nor 'Admin'
My suggestion is then to allow a debug output (or whatever its name) that could return an array as:</p>

<p>0]function isAllowed on 'guest'  'someResource': check for specific rule: none
[1]function isAllowed on 'guest'  'someResource': check for rule on parent 'admin' : none
[2]function isAllowed on 'guest'  'someResource': check for rule on parent 'member' : 'allowed' returning this value
[3]end of processing
this would be very very helpful when debugging an application!!</p>

<p>The developers will benefit from this because they will be able to follow the complete logical commands operating their application
The users will benefit because they can be informed why a resource is not available, and react accordingly (ask privileges to the admins, change the access rules, etc)</p>

<p>I belive this would be quite simple to achieve as this only reflects the way Acl did the processing (inside some kinds of loops,I guess)</p>

<p>Your comments are welcome.</p>

<p>Vincent</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Darby Felton (darby) on 2007-02-27T07:51:34.000+0000</p> 
        <div class="body">
            <p>I really like this idea! How better to illustrate the way inheritance works in Zend_Acl than by providing dynamic feedback from working with your own data? I also think it would be quite simple to build this into Zend_Acl.</p>

<p>Thanks, Vincent, for the suggestions!</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-04-18T13:12:02.000+0000</p> 
        <div class="body">
            <p>This doesn't appear to have been fixed in 1.5.0. Please update if this is not correct.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2009-01-14T13:31:37.000+0000</p> 
        <div class="body">
            <p>Assigning to Ralph to get closure on this issues.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ralph Schindler (ralph) on 2009-08-18T09:51:31.000+0000</p> 
        <div class="body">
            <p>If we are to support this, it should be done by adding a Zend_Log instance to the $acl object.</p>

<p>I would support this if the API include a setLogger(Zend_Log $logger); method.  And then if internal methods used a INFO level log to output about information within the ACL.</p>

<p>Thoughts?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Torio Farazdagi (torio) on 2009-08-18T10:03:37.000+0000</p> 
        <div class="body">
            <p>Ralph,
Nice idea. That would create a cleaner and understandable API. Having attached logger instead of "debug" method should be a preferred solution.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ralph Schindler (ralph) on 2009-09-10T08:55:11.000+0000</p> 
        <div class="body">
            <p>While this is a worthwhile feature, the ZF team will not develop this feature, but if a community member would like to pick up and develop it, they may make an assignment of it.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Daniel Fullarton (linead) on 2009-10-06T23:33:09.000+0000</p> 
        <div class="body">
            <p>This sounded like a great idea, so i whipped something up today. 
Following ralph's suggestion this adds a setLogger public method and changes the DFS searches to log to it.</p>

<p>See logtest.php for a quick demonstration.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Torio Farazdagi (torio) on 2009-10-07T09:26:58.000+0000</p> 
        <div class="body">
            <p>Daniel,
You provided Zend_Log - in place I suppose of Zend_Acl (that would actually send messages to assigned Zend_Log) instance. Or am I missing something?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Daniel Fullarton (linead) on 2009-10-07T15:20:30.000+0000</p> 
        <div class="body">
            <p>Sorry about that Torio, wasn't paying enough attention last night. Here's the Acl.php that you actually need.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Daniel Fullarton (linead) on 2009-10-15T20:41:50.000+0000</p> 
        <div class="body">
            <p>added a svn diff for the change.</p>

        </div>
    </div>
    </div>

