<h2>ZF-6119: Zend_Cache_Frontend_Page improvement for cache_with_cookie_variables and sessions</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2009-03-24T12:35:55.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-11-20T20:53:33.000+0000</dd>

    <dt>Status:</dt>
    <dd>Closed</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
        None
                    </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Cache</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Using sessions in an application may have a possibly undesired effect on Zend_Cache_Frontend_Page:</p>

<p>When trying to cache a page via the Zend_Cache_Frontend_Page frontend, and with options cache_with_session_variables = true and cache_with_post_variables = false, then no cache-id will be generated. Reason for this is that the session generates a volatile cookie with a predefined session name. Even if no other data is set in the cookies, then no cache-id is generated. This is expected behaviour, but it may be undesired. After all, if you refrain from using cookies, then you should be able to generate a cache-id.</p>

<p>An improvement should be built into Zend_Cache_Frontend_Page::_makePartialId(). If cache_with_session_variables is true, then the session name ("PHPSESSID" per default) index should not be taken into account when trying to create a partial Id for the $_COOKIES superglobal.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Dolf Starreveld (dolfs) on 2009-04-04T17:43:47.000+0000</p> 
        <div class="body">
            <p>I'd go one step further and say that the namespace meta data (SESSION['_ZF') etc. should also not be taken into account. This too is data that the innocent developer may not be aware of as present in the SESSION array and including it can cause the ID to change for every page.</p>

<p>The problem becomes even more lethal when combined with the various approaches found on the Web to implement an inactivity timeout. All invariably involve setting a "last Activity time" into the session on each request. (Either directly, or indirectly through rememberMe which calls regenerateID, etc.). Each page will cause the serialized version of the SESSION to change, causing a new key, causing a cache miss. All suggested solutions fail for this scenario (meaning they effectively negate the page cache if, for other reasons, the key must depend on the SESSION content).</p>

<p>Another approach involves subclassing Zend_Cache_FrontEnd_Page to generate ids differently, but unfortunately, makeID (called in start), is private, forcing you to completely override start (which is not private), which seems rather inefficient and undesirable.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Dolf Starreveld (dolfs) on 2009-04-04T18:14:27.000+0000</p> 
        <div class="body">
            <p>Pardon in the above comment, the remark about the visibility of makeId pertains to 1.6.x versions.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Fabien MARTY (fab) on 2009-07-17T11:03:31.000+0000</p> 
        <div class="body">
            <p>change Assignee because I'm inactive now</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Rob Allen (rob) on 2012-11-20T20:53:33.000+0000</p> 
        <div class="body">
            <p>Bulk change of all issues last updated before 1st January 2010 as "Won't Fix".</p>

<p>Feel free to re-open and provide a patch if you want to fix this issue.</p>

        </div>
    </div>
    </div>

