<h2>ZF-11410: Variables in global scope can be overwritten</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2011-05-25T19:48:30.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2013-02-13T14:37:07.000+0000</dd>

    <dt>Status:</dt>
    <dd>Closed</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Lee Davis (leedavis81)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Frank Br√ºckner (frosch)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Form</li>
            <li>View_Helper</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>In most form element view helpers extract is being used to pull out the elements name, value, attribs etc. Although its bad practice to have variables in global scope some people still code this way. By performing an extract any variable in global scope sharing these names will get overwritten.</p>

<pre class="highlight"><code>
        $info = $this-&gt;_getInfo($name, $value, $attribs);
        extract($info); // name, value, attribs, options, listsep, disable, escape
</code></pre>

<p>Proposed solutions:</p>

<p>remove the extract all together and reference the values from the $info array already set (reduces memory usage too).</p>

<pre class="highlight"><code>
        $info = $this-&gt;_getInfo($name, $value, $attribs);

        // build the element
        if ($info['disable']) {
            // disabled; display nothing
            return  '';
        }
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Rob Allen (rob) on 2011-11-11T21:07:18.000+0000</p> 
        <div class="body">
            <p>The extract() only puts variables into the scope of the current method, not into the global space.</p>

        </div>
    </div>
    </div>

