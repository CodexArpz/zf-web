<h2>ZF-4762: Zend_Date calculates unexpected results with some dates</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2008-10-31T08:20:49.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2008-12-04T08:44:27.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Christian Kaps (akkie)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Thomas Weidner (thomas)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Date</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>With some dates, Zend_Date calculates unexpected results. Dates are 23.09.2008 20:00:00 or 14.10.2008 16:00:00</p>

<pre class="highlight"><code>
ini_set('date.timezone', 'UTC');

$date = new Zend_Date(mktime(20, 0, 0, 9, 23, 2008));
$date-&gt;set(0, Zend_Date::MINUTE);
var_dump($date-&gt;get(Zend_Date::TIMESTAMP)); #string '1.2222E+9' (length=9)
</code></pre>

<pre class="highlight"><code>
ini_set('date.timezone', 'UTC');

$date = new Zend_Date(mktime(16, 0, 0, 10, 14, 2008));
$date-&gt;set(0, Zend_Date::MINUTE);
var_dump($date-&gt;get(Zend_Date::TIMESTAMP)); #string '1.224E+9' (length=8)
</code></pre>

<p>Greetings,
Christian</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2008-10-31T15:10:48.000+0000</p> 
        <div class="body">
            <p>I see no problem...
Running mktime on the given dates gives the same result as using Zend_Date.</p>

<p>23.09.2008 20:00:00 is 1222200000 which is also returned by Zend_Date</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Christian Kaps (akkie) on 2008-11-04T02:53:41.000+0000</p> 
        <div class="body">
            <p>Whit the same code?</p>

<p>I can reproduce it on 2 machines. One running REHL4 and one running Gentoo 2.6.25-r7.</p>

<p>Greetings,
Christian</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2008-12-03T01:29:44.000+0000</p> 
        <div class="body">
            <p>Your PHP or OS version converts given inputs to float when a cast to string is done.</p>

<p>mktime outputs a integer.
Internally the timestamp is stored as is.</p>

<p>When you calculate something the only check is that, if the given number exceeds integer it switches to float calculation.</p>

<p>When outputting a timestamp it is checked if it fits in integer (intval) and then the value is casted to an integer. So it seems that intval does not work as needed in your environment.</p>

<p>You could cast the value back to integer.
There is no way to handle such an situation within ZF.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Christian Kaps (akkie) on 2008-12-04T08:44:26.000+0000</p> 
        <div class="body">
            <p>I think, I have found the problem.</p>

<p>I doesn<code>t use the bcmath functions so Zend_Date use the class Zend_Locale_Math_PhpMath. This class uses PHP</code>s round function.</p>

<p>The round function returns values as float in different formats:</p>

<pre class="highlight"><code>
echo round(1222200000, 0);  # 1.2222E+9
echo round(1900000000, 0);  # 1900000000
</code></pre>

<p>This should be a normal behaviour. 
{quote}
<a href="http://bugs.php.net/bug.php?id=46297">http://bugs.php.net/bug.php?id=46297</a></p>

<p>Floating point values have a limited precision. Hence a value might 
not have the same string representation after any processing. That also
includes writing a floating point value in your script and directly 
printing it without any mathematical operations.
{quote}</p>

<p>The Zend_Locale_Math::normalize method which will be used in this construct, converts the float to a string. And it is impossible to convert the string 1.2222E+9 to the correct integer.</p>

<p>Greetings,
Christian</p>

        </div>
    </div>
    </div>

