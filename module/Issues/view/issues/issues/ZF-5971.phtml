<h2>ZF-5971: Make Zend_Log_Writer_Db test DB connection</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2009-03-09T08:09:28.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-03-16T14:25:42.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                julien PAULI (doctorrock83)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Wil Sinclair (wil)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Log</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>I'm actually surprised that Zend_Log_Writer_Db doesn't test the DB connection before using it.
Also, it doesn't even catch any exception from Zend_Db, which could lead, in some rare cases, to infinite loops.</p>

<p>Consider a Zend_Log that logs DB connection errors. What if a Zend_Log_Writer_Db has been provided into it , and the DB is down ?</p>

<p>2 things :</p>

<p>The heavy one would be to use in the Zend_Log_Writer_Db's constructor</p>

<pre class="highlight"><code>
try {
    $this-&gt;_db-&gt;getConnection();
} catch (Zend_Db_Exception $e) {
   // some stuff like throw new Zend_Log_Exception($e-&gt;getMessage());
}
</code></pre>

<p>That is heavy as it requires a physical connection to the DB even if it won't use it in the future.</p>

<p>The lighter code could be to write such a code at the time the query is done, aka _write() method, resulting in a sort of redefining the Db_Exception to a Log_Exception, it looks better I think.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2009-03-16T14:09:27.000+0000</p> 
        <div class="body">
            <p>I'm not seeing what the problem is here. We could catch the Db_Exception and throw a Log_Exception, but this looks like yucky exception chaining; I don't see any benefit. Could you please elaborate on the scenario in which you'd get an infinite loop?</p>

<p>,Wil</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by julien PAULI (doctorrock83) on 2009-03-16T14:25:28.000+0000</p> 
        <div class="body">
            <p>Well there is none. Anyway ErrorHandler throws the exception out of the Frontcontroller, so such a code is not a problem :</p>

<pre class="highlight"><code>
try {
   $obj-&gt;something(), // a DB exception is thrown here
} catch { Zend_Exception $e) { // but I want a wide catch
   $log-&gt;log($e); // $log has a db backend, it will throw an exception
}
</code></pre>

<p>Such a use case can happen in an MVC app where ErrorHandler widely catch exceptions to log them.
Anyway, a try catch should be done on the log operation as well, all right for me</p>

<p>-Closing-</p>

        </div>
    </div>
    </div>

