<h2>ZF-38: Zend_Db_Table should allow custom Row objects</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2006-06-19T23:08:31.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2007-07-05T14:43:07.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>0.9.0 (17/Mar/07)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Bill Karwin (bkarwin)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Db_Table</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-218">ZF-218</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
        <li><a href="/issues/secure/attachment/10050/Rowset.php.patch">Rowset.php.patch</a></li>
            <li><a href="/issues/secure/attachment/10049/Table.php.patch">Table.php.patch</a></li>
        </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p><a href="http://framework.zend.com/developer/ticket/26">http://framework.zend.com/developer/ticket/26</a></p>

<p>The Zend_Db_Table object should allow configuration of the Row object returned. Currently it's hard coded and it's difficult to create an extension object for the Zend_Db_Table_Row object because of this. A protected property, such as $_rowClassname could be set in any extensions of Zend_Db_Table that would allow a custom Row object to be returned.</p>

<p>This would allow Zend Framework to keep it's goal of being a base for an application, instead of being the application.</p>

<p>Good work so far guys. I'm drooling over this Zend Framework!</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Zend Framework (zend_framework) on 2006-06-19T23:09:07.000+0000</p> 
        <div class="body">
            <p>05/06/06 02:40:31: Modified by stephane.crivisier@epitech.net</p>

<p>Here is my way to do this:</p>

<p>Add some static methods in Zend_Db_Table to change the Row object name and a static property to remember it. Change the Zend_Db_Table_Rowset to use Zend_Db_Table::getDefaultRowName() and create a object with that name instead of the Zend_Db_Table_Row object.</p>

<p>Here is the patch:</p>

<pre class="highlight"><code>
diff -r /home/stem/www/ZendFramework/trunk/library/Zend/Db/Table.php ./Zend/Db/Table.php
52a59,84
&gt;      * For row object
&gt;      *
&gt;      * @var string
&gt;      */
&gt;     static protected $_defaultRowName = 'Zend_Db_Table_Row';
&gt; 
&gt;     /**
&gt;      * Set the default Row object name
&gt;      *
&gt;      * @param string $name
&gt;      */
&gt;     static public function setDefaultRowName($name)
&gt;     {
&gt;       self::$_defaultRowName = $name;
&gt;     }
&gt;
&gt;     /**
&gt;      * Get the default Row object name
&gt;      * If none have been set by setDefaultRow(), return the default value: 'Zend_Db_Table_Row'
&gt;      *
&gt;      * @return string
&gt;      */
&gt;     static public function getDefaultRowName()
&gt;     {
&gt;       return self::$_defaultRowName;
&gt;     }
&gt; 
&gt;     /**
150d181
&lt;      * @return Zend_Db_Adapter
330c361
&lt;      * @return mixed The row results per the Zend_Db_Adapter fetch mode.
---
&gt;      * @return Zend_Db_Table_Row The row results per the Zend_Db_Adapter fetch mode.
333a365,369
&gt;         return new self::$_defaultRowName(array(
&gt;             'db'    =&gt; $this-&gt;_db,
&gt;             'table' =&gt; $this,
&gt;             'data'  =&gt; $this-&gt;_fetch('Row', $where, $order, 1),
&gt;         ));
349a386,391
&gt;         return new self::$_defaultRowName(array(
&gt;             'db'    =&gt; $this-&gt;_db,
&gt;             'table' =&gt; $this,
&gt;             'data'  =&gt; array_combine($keys, $vals),
&gt; 
&gt;         ));
diff -r /home/stem/www/ZendFramework/trunk/library/Zend/Db/Table/Rowset.php ./Zend/Db/Table/Rowset.php
113c111,112
&lt;             $this-&gt;_rows[$this-&gt;_pointer] = new Zend_Db_Table_Row(array(
---
&gt;             $name = Zend_Db_Table::getDefaultRow();
&gt;             $this-&gt;_rows[$this-&gt;_pointer] = new $name(array(
</code></pre>

<p>sorry if this one is not valide, I'm not used to use the diff command and it's between svn and 0.1.3 version :( I think it's really simple and the teem smart enougth to do the changes by the hand if necessary
05/11/06 20:44:08: Modified by dev@zayso.org</p>

<p>Fully agree with the notion of being able to specify the row class. Should also be able to specify a class for returning a set of rows.</p>

<p>Disagree with the use of a static variable for the class name. I want different tables to return different types of rows.</p>

<p>I implemented this functionality using inheritiance: abstract class Mine_Db_Table extends Zend_Db_Table {</p>

<pre><code>    protected $_rowClassName = 'Zend_Db_Table_Row'; protected $_rowsetClassName = 'Zend_Db_Table_Rowset';
</code></pre>

<p>class PersonTable? extends Mine_Db_Table {</p>

<pre><code>    protected $_rowClassName = 'PersonRow'; protected $_rowsetClassName = 'PersonRows';
</code></pre>

<p>Seems to work well.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Art Hundiak (cerad) on 2006-07-11T15:44:55.000+0000</p> 
        <div class="body">
            <p>Now that 0.1.5 has been released I'm hoping that we can get some idea if some of these suggested enhancements will be added to the frame work.  There has been at least two email threads on this enhancement which sort of indicates that people might want it.  Or maybe DB_Table is to be replaced by some sort of Active Record system?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Fabien MARTY (fab) on 2006-07-11T15:58:50.000+0000</p> 
        <div class="body">
            <p>same idea here :</p>

<p><a href="http://framework.zend.com/wiki/display/ZFMLGEN/mail/1625">http://framework.zend.com/wiki/display/…</a></p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Fabien MARTY (fab) on 2006-07-11T16:00:46.000+0000</p> 
        <div class="body">
            <p>a possible patch for Table.php</p>

<p>about proposal :
<a href="http://framework.zend.com/wiki/display/ZFMLGEN/mail/1625">http://framework.zend.com/wiki/display/…</a></p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Fabien MARTY (fab) on 2006-07-11T16:01:33.000+0000</p> 
        <div class="body">
            <p>The end of the patch for</p>

<p><a href="http://framework.zend.com/wiki/display/ZFMLGEN/mail/1625">http://framework.zend.com/wiki/display/…</a></p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Gavin (gavin) on 2006-07-11T17:31:35.000+0000</p> 
        <div class="body">
            <p>I believe there are some important bugs (listed in our issue tracker) relating to the Zend_Db* classes that should be resolved before adding significant new functionality.</p>

<p>Currently, I think many would like a more Active Record like abstraction in the ZF, but want to avoid having to generate stub class code for every table in the DB, maintain complex logic/structure in configuration files, or create unique classes for every table participating in the group of tables mapped by these abstractions to an object-oriented API.</p>

<p>Such desires seem to imply reflection on database schemas using special case code for each database, caching the results efficiently, and algorithmically mapping data in the tables to object accessors/properties without precluding the interjection of subclasses to compute more complex object properties from available data.  Reflection would require some degree of schema design-by-convention.  Query aggregation, Unit of Work, lazy loading, and effective modelling of common object relationships and aggregations pose thorny problems for algorithmic mappings, especially when considering a single implementation that addresses all these concerns.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Fabien MARTY (fab) on 2006-07-12T11:20:50.000+0000</p> 
        <div class="body">
            <p>Hum... I understand that you want to close bugs before adding significant new functionality but IMHO :
- it's a little patch (between 10 and 20 lines with comments included on 2 files)
- there is no API break at all (because with default values, it's just work as now)
- there is no new method (just two protected properties with good default values)</p>

<p>Even the manual won't have to be modified (if you don't want to describe the new features) !</p>

<p>IMHO, it's a very constructive and pragmatic patch :
- People who wants a complete ORM mapping will be able to build a system upon Zend_Db_Table
- People who prefers a lite system will be able to continue with current features (without extra code because the current way will continue to work without modification at all)</p>

<p>Of course, the complete and lite solution as you describe is not for tomorrow and will need a lot of reflection and work. That's why I think this patch (which is only a first step to show the path) has to be applied ASAP.</p>

<p>Regards</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Justin Hendrickson (toxygene) on 2006-07-12T11:26:04.000+0000</p> 
        <div class="body">
            <p>It'd be a better idea to use a protected function to get the return type instead of a protected property. By using a function, users could overload the function and return different types based on data from the result set, thus allowing Zend_Db_Table to be used with single table inheritance setups.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2006-11-13T15:14:33.000+0000</p> 
        <div class="body">
            <p>Changing fix version to 0.8.0.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-01-05T17:06:25.000+0000</p> 
        <div class="body">
            <p>Recategorize as Zend_Db_Table component.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Rob Allen (rob) on 2007-02-25T08:31:17.000+0000</p> 
        <div class="body">
            <p>Bill,</p>

<p>When you say: "Changing fix version to 0.8.0.", do you mean that this will be fixed in 0.9.0?</p>

<p>Or, to put it another way. How likely is this bug likely to be fixed for ZF 1.0?</p>

<p>Regards,</p>

<p>Rob...</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-02-25T11:39:32.000+0000</p> 
        <div class="body">
            <p>During the ZF 0.8 iteration, I fixed 37 bugs in Zend_Db, but I concentrated on Zend_Db_Adapter and Zend_Db_Select issues.</p>

<p>I also wrote unit tests for Zend_Db_Table, Zend_Db_Table_Row, and Zend_Db_Table_Rowset, to raise unit test code coverage from 0% to 100% on those classes.  I felt this was prerequisite to working on the classes.</p>

<p>Now that we are in the ZF 0.9 iteration, I plan to address many issues in Zend_Db_Table and its companions.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-03-15T22:16:09.000+0000</p> 
        <div class="body">
            <p>As of revision 3995, Zend_Db_Table_Row is now Zend_Db_Table_Row_Abstract, and likewise Zend_Db_Table_Rowset is now Zend_Db_Table_Rowset_Abstract.</p>

<p>The Row and Rowset classes can be extended.  The Zend_Db_Table recognizes keys in its options array 'rowClass' and 'rowsetClass', which name the user's choice for their custom Row and Rowset classes.</p>

        </div>
    </div>
    </div>

