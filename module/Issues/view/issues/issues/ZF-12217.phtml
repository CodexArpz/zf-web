<h2>ZF-12217: Zend_Captcha Enhancement To Support Inlined Base64 Images</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2012-05-18T17:14:09.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-05-18T17:14:09.000+0000</dd>

    <dt>Status:</dt>
    <dd>Open</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Pete Smith (httpete)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Stanislav Malyshev (stas)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Captcha</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Zend_Captcha relies on Zend_Captcha_Image which uses imagepng($img, $FILE) to write the image file to disk. Then, this needs to be cleaned up in later in the garbage collection. For large scalable sites, local dirs is a pain and a security threat. This is a perfect case to send the image with the inline /base64 encoding:</p>

<p><a href="http://www.websiteoptimization.com/speed/tweak/inline-images/">http://websiteoptimization.com/speed/tweak/â€¦</a></p>

<p>We were able to accomplish this by overwriting the generateImage method, but it would have been easier if the generateImage was separate from the writing to the disk. In that way, we could have allowed the base class to generate the image, and then fetch the base64 encoded content for inline embedding instead of writing to disk. Split up that method.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>
    <p class="comments">No comments to display</p>
    
</div>

