<h2>ZF-2061: Add a seal() method to Zend_Config</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>New Feature</dd>

    <dt>Created:</dt>
    <dd>2007-10-12T09:59:24.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2008-01-23T15:22:46.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.0.3 (30/Nov/07)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Nico Edtinger (nico)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Rob Allen (rob)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Config</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>I tried to use the new merge() method, but had the problem, that our main config object was read-only. Adding allowModifications to the Zend_Config constructor was easy, but now it's also writable outside of our front-controller. It would be nice if Zend_Config could be sealed (setting Zend_Config::_allowModifications to false) after the init phase.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2007-10-15T13:47:39.000+0000</p> 
        <div class="body">
            <p>Assigned to Rob</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Darby Felton (darby) on 2007-10-17T07:49:26.000+0000</p> 
        <div class="body">
            <p>I like the idea of post-construction configurability, but I would instead recommend the solution to be adding a {{setAllowModifications(boolean $enabled)}} method or similar, though maybe there is better name for {{$enabled}}.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Rob Allen (rob) on 2007-10-18T02:15:28.000+0000</p> 
        <div class="body">
            <p>setAllowModifications() implies that a Zend_Config object can be made writable at will.</p>

<p>Maybe something like setReadOnly() so that it's a one-way operation ?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Nico Edtinger (nico) on 2007-10-19T15:35:14.000+0000</p> 
        <div class="body">
            <p>I also think disallowing modifications should be one-way as it's something you'd do to enforce code standards. The name (seal() or setReadOnly()) doesn't matter to me.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Darby Felton (darby) on 2007-10-19T15:45:50.000+0000</p> 
        <div class="body">
            <p>If I understand correctly, this is trivially accomplished by extending Zend_Config:</p>

<pre class="highlight"><code>
class MyConfig extends Zend_Config
{
    public function seal()
    {
        $this-&gt;_allowModifications = false;
        return $this;
    }
}
</code></pre>

<p>Considering the above comments and the fact that it could also be harmful to allow only {{seal()}}/{{setReadOnly()}} - many people would have the opposite problem (needing write access to a locked object) - it would seem that this is best done in userland instead of bloating the framework component with possibly problematic functionality.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Nico Edtinger (nico) on 2007-10-19T17:02:52.000+0000</p> 
        <div class="body">
            <p>It's not that easy because you need to apply the change recursively. And that's currently not possible because __construct() and __set() use new Zend_Config instead of new self and therefor all childs won't have a seal method.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Darby Felton (darby) on 2007-11-07T13:01:25.000+0000</p> 
        <div class="body">
            <p>Yes, of course, I missed that. What would the implementation look like, now that I committed <a href="http://framework.zend.com/fisheye/changelog/Zend_Framework/?cs=6767">SVN r6767</a>?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Rob Allen (rob) on 2007-11-15T10:28:24.000+0000</p> 
        <div class="body">
            <p>Hi Nico,</p>

<p>Does Darby's change in SVN r6767 allow you to solve your problem if you write the userland class :</p>

<pre class="highlight"><code>class MyConfig extends Zend_Config
{
    public function seal()
    {
        $this-&gt;_allowModifications = false;
        return $this;
    }
}</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Rob Allen (rob) on 2007-11-23T17:48:52.000+0000</p> 
        <div class="body">
            <p>I'd like to resolve this issue one way or another if possible.</p>

<p>Choices are:</p>

<ol><li>Resolve as "Won't Fix" or "Not an Issue" and users will have to create a user-land class.</li>
<li>Add a setReadOnly() function to Zend_Config.</li>
</ol><p>Personally, I'm tending towards (2) as merging multiple config files into a single Zend_Config doesn't strike me as that unusual a use-case and with merge() we are implicitly endorsing this use-case anyway. May as well tidy up after ourselves!</p>

<p>Thoughts?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Rob Allen (rob) on 2007-11-27T14:51:13.000+0000</p> 
        <div class="body">
            <p>Added setReadOnly() in <a href="http://framework.zend.com/fisheye/changelog/Zend_Framework/?cs=6967">svn 6967</a> on the trunk and <a href="http://framework.zend.com/fisheye/changelog/Zend_Framework/?cs=6968">svn 6968</a> on the release-1.0 branch.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-01-23T15:22:46.000+0000</p> 
        <div class="body">
            <p>Fixing Fix Version to follow issue tracker conventions.</p>

        </div>
    </div>
    </div>

