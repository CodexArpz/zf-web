<h2>ZF-9443: Zend_Version, can I please extend it?</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>New Feature</dd>

    <dt>Created:</dt>
    <dd>2010-03-17T10:24:03.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-11-20T21:37:30.000+0000</dd>

    <dt>Status:</dt>
    <dd>Open</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Josh Ribakoff (josh.ribakoff@gmail.com)
            </dd>

    <dt>Assignee:</dt>
    <dd>
        None
                    </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Version</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-10363">ZF-10363</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>As some of the legacy projects I work on slowly adopt ZF, we also adopt some of ZF's conventions (naming, unit testing).</p>

<p>One thing I find common to all projects is tracking the current version. Sometimes I make a file version.text, but I like the way ZF handles it, with the Zend_Version class.</p>

<p>Would it make sense to let me extend that for use in my other projects (so I don't duplicate the compareVersion method?).</p>

<p>I'd suggest to remove the "final class" and convert it to late static binding, just in case.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Michael Rehbein (tech13) on 2010-03-17T10:33:09.000+0000</p> 
        <div class="body">
            <p>Since ZF 1.10 still supports PHP 5.2, late static binding isn't an option.  Still an option for ZF2.</p>

<p>Could adjust the compare to</p>

<p>public static function compareVersion($version, $version2 = Zend_Version::VERSION)</p>

<p>to allow for BC, and still use the compare version for items outside of ZF.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2010-03-17T10:41:14.000+0000</p> 
        <div class="body">
            <p>The essence of Zend_Version boils down to two things:</p>

<ul><li>A constant (Zend_Version::VERSION)</li>
<li>The compareVersion() method</li>
</ul><p>compareVersion() is really simply a wrapper for PHP's version_compare, though it contains some minor logic to accommodate what we termed "Preview Release" versions prior to 1.8, but which were, in fact, alpha versions. (The logic does a simple regular expression to translate "pr" to "a" in the version string.) If we did not have those versions haunting us, we would have no need for the method, to be honest.</p>

<p>As long as your version numbers follow those that version_compare() understands, I really see no need to extend Zend_Version; simply create a namespace-level constant or a class constant, and feed it to version_compare().</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2010-03-17T10:42:47.000+0000</p> 
        <div class="body">
            <p>We may revisit the "final" declaration for 2.0, but likely not prior to that.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Josh Ribakoff (josh.ribakoff@gmail.com) on 2010-03-17T11:01:56.000+0000</p> 
        <div class="body">
            <p>If you guys don't intend to add additional business logic to that namespace in the future, then I guess we'd have no use for it.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Beno√Æt Durand (intiilapa) on 2010-09-02T09:59:36.000+0000</p> 
        <div class="body">
            <p>I can add a method isLastest() to complete the method getLatest().</p>

        </div>
    </div>
    </div>

