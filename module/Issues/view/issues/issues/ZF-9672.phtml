<h2>ZF-9672: setDispatched() documentation suggests actions can be aborted</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Docs:  Problem</dd>

    <dt>Created:</dt>
    <dd>2010-04-13T10:43:49.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-11-20T21:38:06.000+0000</dd>

    <dt>Status:</dt>
    <dd>Open</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Michael Stillwell (mjs)
            </dd>

    <dt>Assignee:</dt>
    <dd>
        None
                    </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Controller</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>I think there's some terminology issues relating to the way setDispatched()is documented in relation to Zend Controller Plugins.  I think it should be modified to make it clear that: (a) plugins typically cannot prevent a controller action from being invoked; and (b) setting the "dispatched" flag on a request via the setDispatched() method affects the preDispatch() process of plugins only, not whether the a controller action itself is invoked.</p>

<p>preDispatch() is described at <a href="http://framework.zend.com/manual/en/zend.controller.plugins.html">http://framework.zend.com/manual/en/â€¦</a> as:</p>

<p>preDispatch() is called before an action is dispatched by the dispatcher. This callback allows for proxy or filter behavior. By altering the request and resetting its dispatched flag (via Zend_Controller_Request_Abstract::setDispatched(false)), the current action may be skipped and/or replaced.</p>

<p>This passage suggests that plugins can prevent a controller action from being dispatched, but in fact fiddling with the dispatched status via setDispatched() typically cannot prevent a controller action from being invoked.</p>

<p>The relevant section of code (from Zend_Controller_Front) is:</p>

<pre class="highlight"><code>
            do {
                $this-&gt;_request-&gt;setDispatched(true);

                /**
                 * Notify plugins of dispatch startup
                 */
                $this-&gt;_plugins-&gt;preDispatch($this-&gt;_request);

                /**
                 * Skip requested action if preDispatch() has reset it
                 */
                if (!$this-&gt;_request-&gt;isDispatched()) {
                    continue;
                }

                /**
                 * Dispatch request
                 */
                try {
                    $dispatcher-&gt;dispatch($this-&gt;_request, $this-&gt;_response);
                } catch (Exception $e) {
                    if ($this-&gt;throwExceptions()) {
                        throw $e;
                    }
                    $this-&gt;_response-&gt;setException($e);
                }

                /**
                 * Notify plugins of dispatch completion
                 */
                $this-&gt;_plugins-&gt;postDispatch($this-&gt;_request);
            } while (!$this-&gt;_request-&gt;isDispatched());
</code></pre>

<p>$this-&gt;_plugins-&gt;preDispatch($this-&gt;_request) loops over all plugins within a try ... catch block--if the front controller is not set to throw exceptions, there is no way to prevent all registered plugins from running.  (i.e. throwing an exception will not prevent it, nor will calling methods on the request or response objects.)</p>

<p>In addition, not only is it impossible to prevent plugins from running, it's impossible for them to prevent</p>

<pre class="highlight"><code>
    $dispatcher-&gt;dispatch($this-&gt;_request, $this-&gt;_response);
</code></pre>

<p>from being called.  Even though setDispatched() includes the word "dispatched", it does not affect whether the "dispatch()" method itself is called.  I suggest that the documentation be changed to:</p>

<p>"This callback allows for proxy or filter behavior. By altering the request and resetting its dispatched flag (via Zend_Controller_Request_Abstract::setDispatched(false)), the loaded plugins are re-invoked.  (Note that it is not possible for plugins to prevent controller actions from being executed.)"</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Michael Stillwell (mjs) on 2010-04-13T10:46:18.000+0000</p> 
        <div class="body">
            <p>Fixed formatting.</p>

        </div>
    </div>
    </div>

