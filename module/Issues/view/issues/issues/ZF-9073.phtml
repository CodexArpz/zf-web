<h2>ZF-9073: Usage of track_errors should be replaced by libxml_use_internal_errors()</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2010-02-03T10:41:05.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-11-20T21:37:40.000+0000</dd>

    <dt>Status:</dt>
    <dd>Open</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Diego Sainz (disago)
            </dd>

    <dt>Assignee:</dt>
    <dd>
        None
                    </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Gdata</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Class: Zend_Gdata_Gapps_ServiceException
Method: importFromString
Line: 154</p>

<p>This is the same issue of using track_errors that is described in <a href="http://framework.zend.com/issues/browse/ZF-7305">ZF-7305</a> (in fact the code seems identical - maybe a copy-paste from Zend_Feed?):</p>

<p>{quote}
I have noticed that when loading XML files the silencing ('@') operator + the track_errors directive + the $php_errormsg variable are used to suppress and detect XML parsing errors. This is probably a pretty bad practice for several reasons (performance, usage of a global variable which apparently sometimes xDebug suppresses, changing INI directives at runtime etc.).</p>

<p>For this specific reason, PHP supports a much more straightforward method to gracefully handle XML parsing errors - using the libxml_use_internal_errors(), libxml_use_internal_errors(), etc. functions. Those apply on both DOM and SimpleXML (and anything else using libxml) and are (at least IMHO) "cleaner" than using the track_errors INI directive.
{quote}</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>
    <p class="comments">No comments to display</p>
    
</div>

