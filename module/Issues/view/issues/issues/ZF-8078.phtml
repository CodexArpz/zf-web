<h2>ZF-8078: Zend_Form::getValues() does not return all the subforms</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2009-10-16T08:11:00.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2010-04-16T09:48:51.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Christian Albrecht (alab)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Form</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-5222">ZF-5222</a></li>
            <li><a href="/issues/browse/ZF-9586">ZF-9586</a></li>
            <li><a href="/issues/browse/ZF-4370">ZF-4370</a></li>
            <li><a href="/issues/browse/ZF-8097">ZF-8097</a></li>
            <li><a href="/issues/browse/ZF-9456">ZF-9456</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>My goal is to get my data back to me in a form like this:</p>

<pre class="highlight"><code>
raffle[id]
raffle[tickets][1][cost]
raffle[tickets][2][cost]
</code></pre>

<p>To that end, I have a form with two subforms created as such:</p>

<pre class="highlight"><code> 
$form = new Zend_Form;
$form-&gt;addElement('hidden', 'id');
$form-&gt;setElementsBelongTo('raffle');
$form-&gt;addElement($element);
     
$form-&gt;addElement('submit', 'Submit');

$sf = new Zend_Form_SubForm();
$sf-&gt;addElement('text', 'cost');
$sf-&gt;setElementsBelongTo('tickets[1]');
$form-&gt;addSubForm($sf,'tickets[1]');
$sf2 = new Zend_Form_SubForm();
$sf2-&gt;addElement('text', 'cost');
$sf2-&gt;setElementsBelongTo('tickets[2]');
$form-&gt;addSubForm($sf2,'tickets[2]');
</code></pre>

<p>This appears to give me what I want, but in the output of $form-&gt;getValues, only the data from the second subform appears.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Avi Block (blocka) on 2009-10-16T08:19:06.000+0000</p> 
        <div class="body">
            <p>Might I suggest changing</p>

<pre class="highlight"><code>
foreach ($this-&gt;getSubForms() as $key =&gt; $subForm) {
            $fValues = $this-&gt;_attachToArray($subForm-&gt;getValues(true), $subForm-&gt;getElementsBelongTo());
            $values = array_merge($values, $fValues);
        }
</code></pre>

<p>to</p>

<pre class="highlight"><code>
foreach ($this-&gt;getSubForms() as $key =&gt; $subForm) {
            $fValues = $this-&gt;_attachToArray($subForm-&gt;getValues(true), $subForm-&gt;getElementsBelongTo());
            $values = array_merge_recursive($values, $fValues);
        }
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Avi Block (blocka) on 2009-10-25T16:28:14.000+0000</p> 
        <div class="body">
            <p>This seems like the same issue. Please fix this.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Tom Graham (noginn) on 2009-10-27T06:06:59.000+0000</p> 
        <div class="body">
            <p>I searched but found no other open issues for this, must not have searched enough :)</p>

<p>Same issue I was having, and also the same fix.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Avi Block (blocka) on 2009-12-16T10:52:49.000+0000</p> 
        <div class="body">
            <p>Can we at least have a comment on this? We've gone through two bug hunts and three minor releases since I reported this bug!</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Csisz√°r Attila (csiszarattila) on 2009-12-21T12:00:27.000+0000</p> 
        <div class="body">
            <p>I now that my comment is not related to the issue, but you can archive the desired result with nested subforms. Like this:</p>

<p>//Create tickets as individual subforms:
$first_ticket  = new Zend_Form_SubForm();
$first_ticket-&gt;addElement("text", "cost", ...);
$first_ticket-&gt;addElement("text", "type", ...);</p>

<p>//then bind those indivudual Subforms into an another subform, using numbers as names</p>

<p>$Tickets = new Zend_Form_SubForm();
$Tickets-&gt;addSubForm($first_ticket, "1"); // that makes [1][cost] [1][type] in html
$Tickets-&gt;addSubForm($second_ticket, "2"); // that makes [2][cost] [2][type] in html</p>

<p>// Then add this Subform - which holds ticket as an array of individual subforms -
// to your basic form with name "tickets"</p>

<p>$form = new Zend_Form();</p>

<p>$form-&gt;addSubForm($Tickets, "tickets");</p>

<p>// so you have elements with ticket[1][cost] name attrib on form fields.</p>

<p>It might require a lot more programming than your solution, but it works, and Subforms also makes possible to validate and handle your elements more easily.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Michael Rehbein (tech13) on 2010-02-17T14:31:31.000+0000</p> 
        <div class="body">
            <p>Since raffle[tickets] is an array, it should be a subform, such as this:</p>

<pre class="highlight"><code>
$form = new Zend_Form;
$form-&gt;addElement('hidden', 'id');
$form-&gt;setElementsBelongTo('raffle');

$form-&gt;addElement('submit', 'Submit');

$sfTickets = new Zend_Form_SubForm();

$sfCost = new Zend_Form_SubForm();
$sfCost-&gt;addElement('text', 'cost');

$sfTickets-&gt;addSubForm($sfCost, '1');

$sfCost = new Zend_Form_SubForm();
$sfCost-&gt;addElement('text', 'cost');

$sfTickets-&gt;addSubForm($sfCost, '2');

$form-&gt;addSubForm($sfTickets,'tickets');

print_r($form-&gt;getValues());
</code></pre>

<p>outputs</p>

<pre class="highlight"><code>
Array
(
    [raffle] =&gt; Array
        (
            [id] =&gt; 
            [tickets] =&gt; Array
                (
                    [0] =&gt; Array
                        (
                            [cost] =&gt; 
                        )

                    [1] =&gt; Array
                        (
                            [cost] =&gt; 
                        )

                )

        )

)
</code></pre>

<p>Which is a bit closer to your desired structure, however is a zero-based array, rather then one-based.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Christian Albrecht (alab) on 2010-03-08T14:21:42.000+0000</p> 
        <div class="body">
            <p>@Avi this is not a correct solution as $fValues = $this-&gt;_attachToArray($subForm-&gt;getValues(true)
is recursive anyway and merge_recursive does not add anything.</p>

<p>You might check if ZF-9350 resolves your issue.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Avi Block (blocka) on 2010-03-08T17:56:14.000+0000</p> 
        <div class="body">
            <p>@Christian
I haven't tried your patches, but it looks like I may have been tackling the symptom of a greater problem. Good work!
My patch <em>does</em>, however, work for the specific situation that I had.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Christian Albrecht (alab) on 2010-03-25T13:24:00.000+0000</p> 
        <div class="body">
            <p>Reopened because suggested fix is not reviewed and committed yet.</p>

<p>Hey Avi, i was a little fast with my Statement, indeed array_merge_recursive
solves this issue. The rest is done with ZF-9586.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Christian Albrecht (alab) on 2010-04-16T09:48:51.000+0000</p> 
        <div class="body">
            <p>Resolving as duplicate of ZF-9586</p>

        </div>
    </div>
    </div>

