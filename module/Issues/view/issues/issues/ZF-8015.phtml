<h2>ZF-8015: AMF0 Deserializer Reference Handling Improper</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2009-10-04T20:58:42.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-05-17T19:10:15.000+0000</dd>

    <dt>Status:</dt>
    <dd>Open</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Wade Arnold (wadearnold)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Amf</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>The AMF0 deserializer adds objects to the reference array after they've been completely deserialized, which means that ALL nested objects fail to deserialize in AMF0 mode.</p>

<p>For example:
var a:Object = {test: 'asdf'}
var b:Array = [a, a];</p>

<p>When serialized, the ref index should be 1, for "a", however, when Zend AMF deserializes this, the reference array will only have one item in it when it reaches the reference to a, so it will crash.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Adam Lundrigan (adamlundrigan) on 2012-05-17T18:49:56.000+0000</p> 
        <div class="body">
            <p>Is this still an issue?  Should it be fixed for v1.12?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Stephen Augenstein (warhammerkid) on 2012-05-17T19:10:15.000+0000</p> 
        <div class="body">
            <p>Looks like it still is an issue in 1.11.11. By adding the object to the reference cache after the contents have been read, any reference's offsets are incorrect, and it makes it impossible to deserialize circular references.</p>

<pre class="highlight"><code>
    public function readObject($object = null)
    {
        if ($object === null) {
            $object = array();
        }

        while (true) {
            $key        = $this-&gt;_stream-&gt;readUTF();
            $typeMarker = $this-&gt;_stream-&gt;readByte();
            if ($typeMarker != Zend_Amf_Constants::AMF0_OBJECTTERM ){
                //Recursivly call readTypeMarker to get the types of properties in the object
                $object[$key] = $this-&gt;readTypeMarker($typeMarker);
            } else {
                //encountered AMF object terminator
                break;
            }
        }
        $this-&gt;_reference[] = $object; // ***** THIS LINE SHOULD COME BEFORE ANY READING *****
        return (object) $object;
    }
</code></pre>

<p>The AMF0 deserializer has several other issues with how it handles references for data structures, so it may not be worth fixing if no one has cared enough to fix it before.</p>

        </div>
    </div>
    </div>

