<h2>ZF-9831: Apparent difference b/w documentation for add() and sub() and actual behavior</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2010-05-12T12:39:45.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2010-05-13T12:15:30.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.10.5 (26/May/10)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Thomas Weidner (thomas)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Measure</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>The 1.10 documentation reads:
<a href="http://zendframework.com/manual/en/zend.measure.edit.html#zend.measure.edit.add">http://zendframework.com/manual/en/â€¦</a></p>

<p>bq. ... Each addition will create a new object for the result. The actual object will never be changed by the class.</p>

<p>Considering a simple example, slightly modified from the documentation:</p>

<pre class="highlight"><code>
require_once('Zend/Measure/Length.php');

$unit = new Zend_Measure_Length(200, Zend_Measure_Length::CENTIMETER);
$unit2 = new Zend_Measure_Length(1, Zend_Measure_Length::METER);

echo "$unit + $unit2 = ?\n";
$sum = $unit-&gt;add($unit2);
echo "$unit + $unit2 = $sum\n";
</code></pre>

<p>Has an actual result of:</p>

<pre class="literal">
200 cm + 1 m = ?
300 cm + 100 cm = 300 cm
</pre>

<p>By my reading of the documentation, I expect that the $unit variable will not be modified.  Note that, however, $unit IS modified.</p>

<p>I do not know if this is a change from previous versions, a documentation issue, an issue in my version/build (5.2.12-pl0-gentoo) or a misunderstanding on my part.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2010-05-13T11:43:27.000+0000</p> 
        <div class="body">
            <p>The API shows that the fluid interface is used.
So behaviour of code is correct.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bishop Bettini (bishop) on 2010-05-13T12:04:13.000+0000</p> 
        <div class="body">
            <p>Thanks Thomas for the quick response!</p>

<p>My concern here is not the accuracy of the code, but the precision of the documentation.  I fail to see where the documentation mentions or alludes to the fact that the left-hand side of -&gt; will be modified.</p>

<p>By my notion of "fluent interface", this would be allowed (and good):</p>

<pre class="highlight"><code>
$unit1 = new Zend_Measure_Length(1);
$unit2 = new Zend_Measure_Length(2);
$unit3 = new Zend_Measure_Length(3);

$unit6 = $unit1-&gt;add($unit2)-&gt;add($unit3);
</code></pre>

<p>And there would be no side effects -- the only variable that would change in that equation is $unit6.  The documentation as it exists seems to support that intention.</p>

<p>At a minimum, if the LHS of the operation is modified, I think the docs should note that.  Thoughts?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2010-05-13T12:12:20.000+0000</p> 
        <div class="body">
            <p>Docu clearified with r22160</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2010-05-13T12:15:30.000+0000</p> 
        <div class="body">
            <p>The manual stated already
{quote}
Dynamic objects support a fluid style of programming, where complex
            sequences of operations can be nested without risk of side-effects altering the input
            objects
{quote}</p>

<p>Only the beginning was changed as it irritated.</p>

        </div>
    </div>
    </div>

