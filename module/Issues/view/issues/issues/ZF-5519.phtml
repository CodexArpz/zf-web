<h2>ZF-5519: Allow a plugin to process the results from the adapter</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>New Feature</dd>

    <dt>Created:</dt>
    <dd>2009-01-11T12:21:04.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-01-13T00:55:45.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Jurrien Stutterheim (norm2782)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Jurrien Stutterheim (norm2782)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Paginator</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>It should be possible to provide a plugin that processes the data retrieved from the adapter. This can be used to create your custom models from the paginated data, without subclassing any Paginator classes.</p>

<p>The patched getItemsByPage method would look something like this:</p>

<pre class="highlight"><code>
public function getItemsByPage($pageNumber)
{
    $pageNumber = $this-&gt;normalizePageNumber($pageNumber);

    if ($this-&gt;_cacheEnabled()) {
        $data = self::$_cache-&gt;load($this-&gt;_getCacheId($pageNumber));
        if ($data !== false) {
            return $data;
        }
    }

    $offset = ($pageNumber - 1) * $this-&gt;_itemCountPerPage;

    $items = $this-&gt;_adapter-&gt;getItems($offset, $this-&gt;_itemCountPerPage);

    if (!$items instanceof Traversable) {
        $items = new ArrayIterator($items);
    }
    
    if ($this-&gt;_resultHandler !== null) {
        $items = $this-&gt;_resultHandler-&gt;handle($items);
    }

    if ($this-&gt;_cacheEnabled()) {
        self::$_cache-&gt;save($items, $this-&gt;_getCacheId($pageNumber));
    }

    return $items;
}
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Matthew Ratzloff (mratzloff) on 2009-01-11T12:53:04.000+0000</p> 
        <div class="body">
            <p>I've already said this over IM, but I thought I would write it here in the ticket.</p>

<p>I think the best solution here would be to add an {{addFilter(Zend_Filter_Interface $filter)}} method and write Zend_Filter_Callback.  That way you could filter data based on a custom filter or if you simply needed to call back to User::factory() to get User objects instead of an array of data you could just say:</p>

<pre class="highlight"><code>
$paginator-&gt;addFilter(new Zend_Filter_Callback('User', 'factory'));
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Jurrien Stutterheim (norm2782) on 2009-01-13T00:55:41.000+0000</p> 
        <div class="body">
            <p>Resolved in r 13608. Added a setFilter() method which accepts a Zend_Filter_Interface object. This can be one filter or a filter chain.</p>

        </div>
    </div>
    </div>

