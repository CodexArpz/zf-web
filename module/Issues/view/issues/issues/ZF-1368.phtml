<h2>ZF-1368: General table names processing: applying prefix</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2007-05-09T19:16:07.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2007-07-05T14:44:09.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.0.0 RC1 (28/May/07)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Bill Karwin (bkarwin)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Db_Table</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-827">ZF-827</a></li>
            <li><a href="/issues/browse/ZF-1017">ZF-1017</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>The situation is: we have some code implemented for one project and we need to put another project in the same database with same table names. Good idea is to use prefixes for table names (say, if the new project is called <code>tracker</code>, the prefix should look like <code>tra_</code> and all tables will have names like <code>tra_cms_pages</code> and so on). Possibly this can be done by applying schema rules, but not for Mysqli imlementation (in current 0.9.3 version).</p>

<p>We can simply change all table name values for each Table_Abstract successor, OR we can just add a new value <code>prefix</code> in Adapter config:</p>

<pre class="highlight"><code>
$config = array (
    'host'     =&gt; "hostname",
    'username' =&gt; "user",
    'password' =&gt; "pass",
    'dbname'   =&gt; "database",
    'prefix' =&gt; "prefix_"
);

$dbAdapter = Zend_Db::factory('Mysqli', $config); 
</code></pre>

<p>Then, we need to take stock of this new value in Table_Abstract.php:</p>

<pre class="highlight"><code>
Index: Abstract.php
===================================================================
--- Abstract.php    (revision 4776)
+++ Abstract.php    (working copy)
@@ -45,6 +45,7 @@
 
     const SCHEMA           = 'schema';
     const NAME             = 'name';
+    const PREFIX           = 'prefix';
     const PRIMARY          = 'primary';
     const COLS             = 'cols';
     const METADATA         = 'metadata';
@@ -101,6 +102,13 @@
     protected $_name;
 
     /**
+     * The prefix to use for full table name (default null means no prefix).
+     *
+     * @var string
+     */
+    protected $_prefix = null;
+
+    /**
      * The table column names derived from Zend_Db_Adapter_Abstract::describeTable().
      *
      * @var array
@@ -223,6 +231,11 @@
             $this-&gt;_name = $config[self::NAME];
         }
 
+        // set default prefix if supplied
+        if (isset($config[self::PREFIX])) {
+            $this-&gt;_prefix = $config[self::PREFIX];
+        }
+
         // set primary key name if supplied
         if (isset($config[self::PRIMARY])) {
             $this-&gt;_primary = (array) $config[self::PRIMARY];
@@ -519,9 +532,15 @@
     {
         if (strpos($this-&gt;_name, '.')) {
             list($schemaName, $tableName) = explode('.', $this-&gt;_name);
+            // apply the prefix if defined
+            if (!is_null($this-&gt;_prefix)) {
+                $tableName = $this-&gt;_prefix.$tableName;
+            }
             $this-&gt;_schema = $schemaName;
             $this-&gt;_name = $tableName;
         } else {
+            // apply the prefix if defined
+            if (!is_null($this-&gt;_prefix)) $this-&gt;_name = $this-&gt;_prefix.$this-&gt;_name;
             $schemaName = $this-&gt;_schema;
             $tableName = $this-&gt;_name;
         }
@@ -1027,3 +1046,4 @@
     }
 
 }
+
</code></pre>

<p>That's all. So now if we have a lot of Table_Abstracts in models/ with names, no need to change them all, we can just apply a prefix to all of them:</p>

<pre class="highlight"><code>
class Table extends Zend_Db_Table_Abstract {
    
    protected $_name = "table"; 
</code></pre>

<p>And the table name after applying the prefix will look like 
<code>prefix_table</code>.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-05-09T19:26:02.000+0000</p> 
        <div class="body">
            <p>I really don't think it's appropriate to solve this use case in Zend_Db.<br />
But this is the third time someone has submitted the request.  I'll consider it.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-05-09T19:27:23.000+0000</p> 
        <div class="body">
            <p>See also ZF-1017.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-05-09T19:27:39.000+0000</p> 
        <div class="body">
            <p>See also ZF-827</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-05-09T19:39:05.000+0000</p> 
        <div class="body">
            <p>Change component to Zend_Db_Table.</p>

<p>Change very long code sample to minimal patch.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Eugene Panaitov (eugenep) on 2007-05-09T19:46:47.000+0000</p> 
        <div class="body">
            <p>You are right, Bill, it's not a goal of Framework, but as you see this is very minor fix, only a few lines to change..</p>

<p>Userland here is changing all Table_Abstract's $_name variables, that is not so quick as adding new variable to adapter config.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-05-09T20:20:36.000+0000</p> 
        <div class="body">
            <p>The argument that it belongs in userland code:</p>

<p>If your application supports variable table names, you should list the tables in some central place in your application, and apply prefixes there.  Then you can utilize these variable table names in all queries throughout your application.</p>

<pre class="highlight"><code>
$tableName = array(
  'bugs'        =&gt; 'bugs',
  'accounts' =&gt; 'accounts'
  ...other tables for your application...
);

// read config file into $config object,
// and update the table name map:
if ($config-&gt;db-&gt;prefix) {
  foreach ($tableName as &amp;$name) {
    $name = $config-&gt;db-&gt;prefix . $name;
  }
}


// this works for Zend_Db_Table:
$bugsTable = new Bugs(array('name' =&gt; $tableName['bugs']));

// this works for Zend_Db_Select:
$select = $db-&gt;select()-&gt;from($tableName['bugs']);

// this works for adapter methods too:
$result = $db-&gt;fetchAll("SELECT * FROM {$tableName['bugs']}");
$db-&gt;insert($tableName['bugs'], $data);
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Eugene Panaitov (eugenep) on 2007-05-10T06:31:11.000+0000</p> 
        <div class="body">
            <p>Good idea, Bill, thanks.</p>

<p>Another solutions looks like:</p>

<pre class="highlight"><code>
&lt;?php

Zend_Loader::loadClass("Zend_Db_Table_Abstract");

class Table extends Zend_Db_Table_Abstract {
    
    function __construct() {
        
        $table = get_class($this);
        
        $tableName = Config::$tableNames[$table];
        
        if (isset(Config::$database['prefix'])) $tableName = Config::$database['prefix'].$tableName;
        
        parent::__construct(array(Zend_Db_Table_Abstract::NAME =&gt; $tableName));
        
    }
    
    
}

?&gt;
</code></pre>

<p>Then, just extend class Table and use it like $table = new MyTable(); MyTable class will get its name automatically.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-05-10T11:18:18.000+0000</p> 
        <div class="body">
            <p>You should do something with array_merge() in that constructor, otherwise you can't pass options to your tables.</p>

<p>Ok, good -- you have a couple of ways of employing this behavior in your application.</p>

<p>But it's not a feature we will add to Zend_Db.</p>

        </div>
    </div>
    </div>

