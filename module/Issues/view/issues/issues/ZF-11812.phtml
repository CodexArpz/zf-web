<h2>ZF-11812: Potential bug with Zend_View_Helper_FormSelect</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2011-10-11T10:16:16.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-07-20T19:16:55.000+0000</dd>

    <dt>Status:</dt>
    <dd>Open</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                PÃ¡draic Brady (padraic)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_View</li>
            <li>After1.12.0</li>
            <li>state:patch-ready-for-review</li>
            <li>zf-caretaker-adamlundrigan</li>
            <li>zf-crteam-review</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-12094">ZF-12094</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
        <li><a href="/issues/secure/attachment/14705/ZF-11812.patch">ZF-11812.patch</a></li>
        </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Hey ZF Team,</p>

<p>Think I have found a bug in Zend_View_Helper_FormSelect.</p>

<p>Example of this would be passing an array say a list of 0 to 5 as the value on the select element.</p>

<p>$multiItems = array(
    'def' =&gt; 'Please select..',
    '0' =&gt; '0',
    '1' =&gt; '1',
    '2' =&gt; '2',
    '3' =&gt; '3',
    '4' =&gt; '4',
    '5' =&gt; '5'
    );</p>

<p>If I then created an element like this:</p>

<pre><code>    $this-&gt;addElement('select', 'selectElement', array(
        'label' =&gt; 'Number list',
        'multiOptions' =&gt; $multiItems,
        'disable' =&gt; array('-'),
    ));
</code></pre>

<p>Then the first item (with the value of hyphen '-') will be disabled but so will the item with the value of 0.</p>

<p>After a little investigation this seems to be with the Zend_View_Helper_FormSelect in the _build method on line 172 of my version of the view helper you have:</p>

<p>if (in_array($value, $disable)) {
            $opt .= ' disabled="disabled"';
        }</p>

<p>If I change this to:</p>

<pre><code>    if (in_array($value, $disable, true)) {
        $opt .= ' disabled="disabled"';
    }
</code></pre>

<p>So that the strict option is enabled then it fixes the problem.</p>

<p>Not sure if this is a bug or a feature that I haven't seen docs for.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Adam Lundrigan (adamlundrigan) on 2011-10-28T17:47:41.000+0000</p> 
        <div class="body">
            <p>Confirmed.  This happens due to "oddities" in how {{in_array}} handles zero values (<a href="http://stackoverflow.com/questions/2476878/a-problem-about-in-array">Details here</a>).  By default, {{in_array}} uses a loose comparison (==), so if the array contains an integer zero value it will cause {{in_array}} to convert the needle to integer before comparing.  Converting a character to an integer makes it zero, so any string will match that zero:</p>

<pre class="highlight"><code>
php&gt; var_dump(0 == 'adam');
bool(true)
</code></pre>

<p>Additional to what you have suggested, it's also necessary to use {{strval}} to convert both the needle and haystack values to string representations to get consistent matching.  I've attached a fix, complete with unit test, to this issue.  Could you please try it out and see if it meets your needs?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Rob Allen (rob) on 2012-06-13T20:41:16.000+0000</p> 
        <div class="body">
            <p>After 1.12 as not sure what the implications of this change are.</p>

        </div>
    </div>
    </div>

