<h2>ZF-1045: debug mode</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2007-03-13T02:30:15.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2007-07-05T14:43:55.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Till Klampaeckel (till)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Matthew Weier O'Phinney (matthew)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_XmlRpc_Client</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>To track down bugs in remote XML-RPC methods, I frequently run into the need to debug the request and response with the client and I found the current method (using lastResponse) rather not good.</p>

<p>I pretty much took PEAR's approach here - while it may be a bit radical for some, but echo'ing values straight really does the debug trick. The patch is for Zend/XmlRpc/Client.php. And this is more or less a proposal. ;-) If you give me feedback and ideas, I'll refine it.</p>

<p><a href="http://www.lagged.de/oss/zend/Client.patch.gz">http://www.lagged.de/oss/zend/Client.patch.gz</a></p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-03-15T13:53:26.000+0000</p> 
        <div class="body">
            <p>Assigning to Matthew to review the patch.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Till Klampaeckel (till) on 2007-03-16T10:07:40.000+0000</p> 
        <div class="body">
            <p>I didn't include it in this patch, but I'd also propose a public method, "setDebug" in order to enable/disable debugging on the fly without passing it to the constructor.</p>

<pre class="highlight"><code>
public function setDebug($debug)
{
  if (is_boolean($debug) === false)
  {
    return false;
  }
  $this-&gt;_debug = $debug;
  return $debug;
}
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Till Klampaeckel (till) on 2007-05-07T12:04:31.000+0000</p> 
        <div class="body">
            <p>@Matthew:</p>

<p>On the mailing list I saw you recommended turning on extensive error logging on the remote system to debug calls and response, however there's circumstances where you a) have no access to the server-part or b) it maybe not written in PHP (and beyond the scope).</p>

<p>So I'd really like to get this patch/feature included, since it aids development.</p>

<p>Let me know your thoughts.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2007-05-17T14:08:37.000+0000</p> 
        <div class="body">
            <p>You can accomplish this debugging yourself using the client as is, with a couple of different methods.</p>

<p>In the first method, you do all logging after the request has been made:</p>

<pre class="highlight"><code>
$proxy = $client-&gt;setProxy();
$proxy-&gt;user-&gt;add($data);

$httpClient = $client-&gt;getHttpClient();
echo $httpClient-&gt;getLastRequest();
echo $httpClient-&gt;getLastResponse()-&gt;asString();
</code></pre>

<p>The above will print the entire HTTP request and response strings from the XML-RPC request you last made.</p>

<p>In the second method, you would override the HTTP client adapter you use, overriding the write() method such that you capture and echo the request to the screen, and the read() method such that you echo the response to the screen prior to returning it:</p>

<pre class="highlight"><code>
class My_Http_Client_Adapter extends Zend_Http_Client_Adapter_Socket
{
    public function write($method, $uri, $http_ver = '1.1', $headers = array(), $body = '')
    {
        $request = parent::write($method, $uri, $http_ver, $headers);
        echo '</code></pre><pre><code>', $request, '</code></pre><code>';
        return $request;
    }

    public function read()
    {
        $response = parent::read();
        echo '</code><pre><code>', $response, '</code></pre><code>';
        return $response;
    }
}
</code>

<p>You would register this with the xml-rpc client's HTTP client via:</p>

<pre class="highlight"><code>
$client-&gt;getHttpClient()-&gt;setAdapter(new My_Http_Client_Adapter());
</code></pre>

<p>prior to making any actual xml-rpc requests.</p>

<p>I personally don't like echoing the debug calls straight to the screen; when I've used PEAR's client, this sort of debugging is very intrusive, and tends to wreak havoc with your output. Zend_XmlRpc_Client and Zend_Http_Client provide plenty of mechanisms to enable it, however  -- as well as more robust mechanisms via Zend_Log -- so I see no need to add it by default to the class.</p>

        </div>
    </div>
    </div>

