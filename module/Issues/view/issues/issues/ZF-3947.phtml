<h2>ZF-3947: Zend_XmlRpc_Value ignores empty strings as struct values</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2008-08-13T19:59:44.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2008-12-21T05:59:34.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.7.1 (01/Dec/08)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Matthew Weier O'Phinney (matthew)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_XmlRpc_Client</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-3862">ZF-3862</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>I have a Java based XMLRPC server which sends back a struct from a method call. In this struct there can be many key/value pairs where the value is a blank string.</p>

<p>These blank strings don't get added to the returned struct (array). The check 'empty($member-&gt;value)' is catching this case and preventing the value from being added to the struct. From reading the spec this is perfectly valid. An example XML (part) output is</p>

<pre class="highlight"><code>
address</code></pre>

<p>which should be valid because if no type is defined in between  then string is assumed. (Similar discussion <a href="http://framework.zend.com/issues/browse/ZF-1364">http://framework.zend.com/issues/browse/ZF-1364</a>)</p>

<p>The relavent code is Zend/XmlRpc/Value.php:371</p>

<pre class="highlight"><code>
               // Parse all the memebers of the struct from the XML string
               // (simple xml element) to Zend_XmlRpc_Value objects
               foreach ($value-&gt;member as $member) {
                   // @todo? If a member doesn't have a  tag, we don't add it to the struct
                   // Maybe we want to throw an exception here ?
                   if ((!$member-&gt;value instanceof SimpleXMLElement) || empty($member-&gt;value)) {
                       continue;
                       //throw new Zend_XmlRpc_Value_Exception('Member of the '. self::XMLRPC_TYPE_STRUCT .' XML-RPC native type must contain a VALUE tag');
                   }
                   $values[(string)$member-&gt;name] = self::_xmlStringToNativeXmlRpc($member-&gt;value);
               } 
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Benjamin Eberlei (beberlei) on 2008-11-07T04:00:11.000+0000</p> 
        <div class="body">
            <p>It seems these two issues are somehow related.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by James Lucas (mjlucas) on 2008-11-17T17:35:15.000+0000</p> 
        <div class="body">
            <p>After upgrading to 1.7 I would like to revisit this bug report. This bug still exist and really should be fixed as it causes the silent removal of data returned in a xmlrpc query. The use of "empty" not only discards a empty string (which is valid) but also discards a string with the value "0" (that's a zero)</p>

<p>The @todo needs to be removed because it is incorrect and the "|| empty($member-&gt;value)" needs to be removed. This ensures that we still have valid XML (value tag inside a member tag) but correct values are still added to the struct.</p>

<p>I also don't know why this issue has been listed as dependant on issue ZF-3862 as it is not related.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by James Lucas (mjlucas) on 2008-11-17T17:36:53.000+0000</p> 
        <div class="body">
            <p>I have raised this to critical because the bug is silently dropping data from a return result which is valid.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2008-11-20T10:22:53.000+0000</p> 
        <div class="body">
            <p>Fixed in trunk with r12720 and in 1.7 release branch with r12721.</p>

        </div>
    </div>
    </div>

