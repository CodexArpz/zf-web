<h2>ZF-7461: Zend_Application_Resource_Navigation stores container into Registry with numeric key</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2009-08-04T01:17:49.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2010-04-08T11:43:22.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Dmitry Babenko (st.general)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Dolf Schimmel (Freeaqingme) (freak)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Application</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>application.ini:
{{resources.navigation.storage.registry = 1}}</p>

<p>but</p>

<pre class="highlight"><code>
    protected function _storeRegistry()
    {
        $options = $this-&gt;getOptions();
        if(isset($options['storage']) &amp;&amp;
           isset($options['storage']['registry']) &amp;&amp;
           isset($options['storage']['registry']['key'])) // strange, but it is === true
        {
...
</code></pre>

<p>PHP Version 5.2.6</p>

<p>Simple solution is to append one more condition (as it was in 1.8.4):
{{&amp;&amp; !is_numeric($options['storage']['registry']['key'])}}</p>

<p>Also, conditions
{{isset($options['storage']) &amp;&amp; isset($options['storage']['registry'])}}
seems to be redundant</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Dolf Schimmel (Freeaqingme) (freak) on 2009-08-04T22:40:52.000+0000</p> 
        <div class="body">
            <p>Oops, guess that's my bad here. I couldn't think what the is_numeric call was meant for, guess I know again now :)</p>

<p>And you're right about the isset issue. I thought not doing it like this would trigger an error if $options['storage'] was not set, but I turn out to be wrong there.</p>

<p>Will fix asap.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by David Abdemoulaie (hobodave) on 2009-08-22T12:36:19.000+0000</p> 
        <div class="body">
            <p>I cannot duplicate this on PHP 5.2.5, 5.2.6, 5.2.10, or 5.3.</p>

<p>Are you sure you have the right line in your application.ini ?</p>

<p>With the following line in application.ini:</p>

<pre class="literal">
resources.navigation.storage.registry = 1
</pre>

<p>The resulting $options array looks like:</p>

<pre class="literal">
array(1) {
  ["storage"]=&gt;
  array(1) {
    ["registry"]=&gt;
    int(1)
  }
}
</pre>

<p>The following test confirms this:</p>

<pre class="literal">
&lt;?php
error_reporting(E_ALL);
 
$options['storage']['registry'] = 1;
 
if (isset($options['storage']) &amp;&amp;
    isset($options['storage']['registry']) &amp;&amp;
    isset($options['storage']['registry']['key']))
{
    echo "WTF";
}
</pre>

<p>However, the multiple isset()'s are redundant and can be simplified to:</p>

<pre class="literal">
if (isset($options['storage']['registry']['key']) 
</pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Dmitry Babenko (st.general) on 2009-08-25T03:43:12.000+0000</p> 
        <div class="body">
            <p>Indeed, test is passed but only if value is not string.
Run the test when</p>

<pre class="highlight"><code>
</code></pre>

<p>array
  'storage' =&gt; 
    array
      'registry' =&gt; string '1' (length=1)```</p>

<p>And it is string when it comes from the application.ini</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by David Abdemoulaie (hobodave) on 2009-08-25T09:44:09.000+0000</p> 
        <div class="body">
            <p>Well, this is bizarre. Reproduced using the string '1'.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Dmitry Babenko (st.general) on 2009-08-26T02:47:14.000+0000</p> 
        <div class="body">
            <p>Yes, but it has an explanation. It happens because of string access by character. And when you try to get symbol by string index that index is converted to integer.</p>

<pre class="highlight"><code>
$options['storage']['registry'] = '1';
$options['storage']['registry']['key']; // is equal to $options['storage']['registry'][(int)'key'] and $options['storage']['registry'][0]
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Joe Gornick (jgornick) on 2009-09-21T15:34:40.000+0000</p> 
        <div class="body">
            <p>I've also run into this issue where if your specify the {{resources.navigation.storage.registry = true}} option, the code currently set's the key to the {{true}} (1) value.</p>

<p>However, there seems to be a semantic problem with the configuration and the code which reads the options.</p>

<p>Take the existing configuration options right now:</p>

<pre class="highlight"><code>
resources.navigation.storage.registry = true
resources.navigation.storage.registry.key = "My_New_Key"
</code></pre>

<p>You can not add the {{key}} property to {{registry}} because the {{registry}} property was already set to the value {{true}}.</p>

<p>When you do set the {{key}} property to {{registry}}, you get this exception:
{{Zend_Config_Exception: Cannot create sub-key for 'registry' as key already exists...}}</p>

<p>I propose:</p>

<pre class="highlight"><code>
resources.navigation.storage.registry.enabled = true
resources.navigation.storage.registry.key = "My_New_Key"
</code></pre>

<p>Keep in mind, that if the user does not specify either option, then it the navigation resource automatically defaults to the storing the view helper.  Also, if the user does specify the {{registry.enabled}} option but not the {{registry.key}} option, then the default registry key is used (Zend_Navigation).</p>

<p>Then, in the source you would have something like:</p>

<pre class="highlight"><code>
&lt;?php
  ...
    public function store()
    {
        $options = $this-&gt;getOptions();
        if (isset($options['storage']['registry']['enabled']) &amp;&amp;
            $options['storage']['registry']['enabled'] == true) {
            $this-&gt;_storeRegistry();
        } else {
            $this-&gt;_storeHelper();
        }
    }
    
    protected function _storeRegistry()
    {
        $options = $this-&gt;getOptions();
        if(isset($options['storage']['registry']['key']) &amp;&amp;
           is_string($options['storage']['registry']['key']))
        {
            $key = $options['storage']['registry']['key'];
        } else {
            $key = self::DEFAULT_REGISTRY_KEY;
        }
    
        Zend_Registry::set($key, $this-&gt;getContainer());
    }
  ...
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Dolf Schimmel (Freeaqingme) (freak) on 2009-09-21T15:46:26.000+0000</p> 
        <div class="body">
            <p>First, with your patch BC would be broken, so that's not the most preferable solution.</p>

<p>Secondly, it all kinda works already. When specifying a registry key the storing of the container will automatically be done inside the registry. The reasoning behind this is that it makes no sense to set a registry key while storing it in the view helper ;)</p>

<p>Please note that ``` will output: 
bool(true)</p>

<p>(if no response is given within 24 hours this issue will be closed)</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Joe Gornick (jgornick) on 2009-09-21T15:57:26.000+0000</p> 
        <div class="body">
            <p>Dolf, thanks for the quick response.</p>

<p>Good point about the backwards-compatibility issue.</p>

<p>Personally, I think the default behavior of the navigation resource should store it to the registry since the navigation view helper already checks the registry for Zend_Navigation if the container has not been set.</p>

<p>Another reason why I think it should be stored in the registry by default is so I can gain access to the navigation container in a plugin or action helper.  I do realize I could get it through the view helper, but I feel accessing it in the registry would be the most efficient.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Dolf Schimmel (Freeaqingme) (freak) on 2009-09-21T17:08:26.000+0000</p> 
        <div class="body">
            <p>Somehow I was managed to get persuaded that this was actually a bug on irc (the reason me not fixing it before was that s/o forgot to assign it :wink:).  Should be fixed now, will get shipped with 1.9.4 (if I dont forget to merge it).</p>

<p>The test - see commit message - failed :'(</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Kirk Madera (aredamkrik) on 2010-04-08T11:43:18.000+0000</p> 
        <div class="body">
            <p>This line caused me a lot of confusion:</p>

<pre class="highlight"><code>
$options['storage']['registry'] == true
</code></pre>

<p>I thought registry was intended to be boolean. I agree with the fix to:</p>

<pre class="highlight"><code>
$options['storage']['registry']['enabled'] == true
</code></pre>

        </div>
    </div>
    </div>

