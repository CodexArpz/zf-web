<h2>ZF-4660: Add methods to modify include_path</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>New Feature</dd>

    <dt>Created:</dt>
    <dd>2008-10-21T00:18:38.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-11-20T20:52:33.000+0000</dd>

    <dt>Status:</dt>
    <dd>Closed</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Stefan Gehrig (sgehrig)
            </dd>

    <dt>Assignee:</dt>
    <dd>
        None
                    </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Loader</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>It would be of additional value if Zend_Loader provided some methods to modify the include_path. The following methods have been part of my Zend_Path proposal which has been rejected with the additional comment that the Zend-Dev team would like to add include_path-modification methods to Zend_Loader.</p>

<pre class="highlight"><code>
 /**
 * Sets the PHP include path to the given path(s).
 * The method returns the old include path.
 * 
 * Several arguments can be specified and will be assembled
 * to the new include path in the order specified.
 * Arguments can be strings or arrays of strings whereas
 * arrays will be handled like multiple arguments.
 *
 * @param  string|array $path,...
 * @return string
 */
public static function setIncludePath($path)
{
    if (func_num_args()==1) {
        if (is_array($path)) $paths=$path;
        else $paths=array($path);
    }
    else {
        $paths=array();
        foreach (func_get_args() as $arg) {
            if (is_array($arg)) $paths=array_merge($paths, $arg);
            else $paths[]=$arg;
        }
    }
    $includePath=implode(PATH_SEPARATOR $paths);   
    return set_include_path($includePath);
}

/**
 * Prepends the given path(s) to the current PHP include path.
 * The method returns the old include path.
 * 
 * Several arguments can be specified and will be assembled
 * to the new include path in the order specified.
 * Arguments can be strings or arrays of strings whereas
 * arrays will be handled like multiple arguments.
 *
 * @param  string|array $path,...
 * @return string
 */
public static function prependIncludePath($path)
{
    $paths=array();
    foreach (func_get_args() as $arg) {
        if (is_array($arg)) $paths=array_merge($paths, $arg);
        else $paths[]=$arg;
    }
    $paths[]=get_include_path();
    return self::setIncludePath($paths);
}

/**
 * Appends the given path(s) to the current PHP include path.
 * The method returns the old include path.
 * 
 * Several arguments can be specified and will be assembled
 * to the new include path in the order specified.
 * Arguments can be strings or arrays of strings whereas
 * arrays will be handled like multiple arguments.
 *
 * @param  string|array $path,...
 * @return string
 */
public static function appendIncludePath($path)
{
    $paths=array(get_include_path());
    foreach (func_get_args() as $arg) {
        if (is_array($arg)) $paths=array_merge($paths, $arg);
        else $paths[]=$arg;
    }
    return self::setIncludePath($paths);
}
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2009-01-20T17:06:55.000+0000</p> 
        <div class="body">
            <p>I can see the value of these functions, and Zend_Loader seems like the right place to put them. Ralph, if you agree, can you work with Stefan to get the code in to trunk and close this issue?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Rob Allen (rob) on 2012-11-20T20:52:33.000+0000</p> 
        <div class="body">
            <p>Bulk change of all issues last updated before 1st January 2010 as "Won't Fix".</p>

<p>Feel free to re-open and provide a patch if you want to fix this issue.</p>

        </div>
    </div>
    </div>

