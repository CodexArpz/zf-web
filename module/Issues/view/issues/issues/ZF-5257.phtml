<h2>ZF-5257: Ability to add SQL_NO_CACHE to SQL commands.</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>New Feature</dd>

    <dt>Created:</dt>
    <dd>2008-12-14T12:13:30.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-11-20T21:37:53.000+0000</dd>

    <dt>Status:</dt>
    <dd>Open</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
        None
                    </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Db_Select</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>I would like a method that can be called very similar to distinct() that would add SQL_NO_CACHE to the select command to prevent the query from being cached.</p>

<p>I have a version of select.php that includes the appropriate updates but I do not have unit tests other than just using it on my site.  If you would like the file, I would be happy to pass it on.  Its a fairly simple modification, only about 10 lines.</p>

<p>In response to your comment:  Yes I do believe this is a MySQL only flag, but I still feel the Select class is the appropriate place to add the modification since it will apply to Select SQL queries.  I'm not sure if it is possible to check the current adapter through the select class, although since it is initiated through a call to the adapter, I would assume it is. So the method could have a check to make sure it is connected to MySQL or it could be left up to the developer to ensure they the flag is not called unless they are using MySQL.  Obviously I feel the first would be preferred for compatibility and reliability but it may not be possible.  I realize that catering to MySQL is not the goal of Zend Select but I don't think this would be the first database specific method in Zend_Db (although a specific example is escaping me), and the power of this flag, if used correctly, can greatly improve the efficiency of MySQL caching.  Since MySQL seems to have a large percentage of the PHP market, it seems like something that could be widely used.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Ralph Schindler (ralph) on 2008-12-15T07:40:50.000+0000</p> 
        <div class="body">
            <p>SQL_NO_CACHE is a mysql specific feature is it not?</p>

<p>I am fairly certain it is, and with that, I dont think that putting it inside Zend_Db_Select is the best place.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ralph Schindler (ralph) on 2008-12-15T11:40:26.000+0000</p> 
        <div class="body">
            <p>I am tending to agree with Bill on this one, as per:</p>

<p><a href="http://www.nabble.com/Adding-SELECT-options-to-Zend_Db_Select-td17654288.html">http://nabble.com/Adding-SELECT-options-to-Zend_Dbâ€¦</a></p>

<p>In general, i see value in perhaps extending the select object as Zend_Db_Select_Mysql, and then finding ways to perhaps be able to use this specific adapter throughout Zend_Db, and Zend_Db_Table when requesting a select object.  But adding Mysql specific functionality to Zend-Db-Select is gonna be a no-go b/c it would break other adapters.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Radek Antoniuk (warden) on 2009-09-17T09:35:22.000+0000</p> 
        <div class="body">
            <p>This would be really nice to have.
I need HIGH_PRIORITY, SQL_CACHE and others (like the famous SQL_CALC_FOUND_ROWS issue) and this is still not solved.</p>

<p>Now ZF issues twice one query that takes 10s, firstly to get row count, and second to get the results, argh...</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Marcus Don (marcusjhdon) on 2010-02-04T07:06:26.000+0000</p> 
        <div class="body">
            <p>I don't think this issue is being given enough priority. Without the ability to added custom (ie vendor-specific) options to an SQL statement, we are effectively being asked to live without every non-ANSI compliant enhancement provided by every single database vendor. This means never being able to write SQL that is optimised to the platform you are using.</p>

<p>The absence of SQL_CALC_FOUND_ROWS in MySQL is particularly troubling: without it, every paginated query has either to be run twice (which takes up to twice as long), or allowed to use (potentially) massive amounts of memory or temporary disk space. This is a compromise too far in my opinion.</p>

<p>I agree with Bill Karwin's argument that Zend_Db_Select shouldn't be vendor-specific, but it doesn't need to be: all we need is the ability to inject additional parameters into an element of an SQL query. This would be entirely at the user's discretion, and they would have to accept any resulting compromises in portability. It would even be possible to allow the user to specify the platform(s) for which the statement was valid, so Zend_Db could ignore it (or throw an exception) if it isn't supported by the current platform (as specified by the user).</p>

<p>In the longer term, a better solution would be to provide separate, vendor-specific classes that are aware of the available options, and which are instantiated by Zend_Db_Select as required. This would avoid bloating Zend_Db_Select(), while removing the current limitations.</p>

<p>I'm currently creating a prototype application using ZF, as a proposal to replace our current, bespoke framework. Although I've been generally very impressed by ZF, if I can't find a solution to this I'm going to have to abandon it. I'd like to take advantage of Zend_Db_Select for building large, very dynamic queries (of which we have many), while still allowing custom queries where necessary and allowing us to use Zend_Paginator in all cases - and without compromising database performance, which is critical. Admittedly, I've only been working on this issue for a few hours, but so far it's not looking very hopeful.</p>

<p>Please take another look at this issue.</p>

        </div>
    </div>
    </div>

