<h2>ZF-635: Zend_Db_Select getter methods to return individual parts</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2006-12-10T13:50:24.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2007-07-05T14:43:33.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>0.8.0 (21/Feb/07)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Bill Karwin (bkarwin)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Db_Select</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Currently, the select component only accepts arguments to store for statement composition later:</p>

<p>$select-&gt;from( ... )
$select-&gt;where( ... )
$select-&gt;join( ... )
$sql = $select-&gt;__toString()</p>

<p>It would be very useful for the select component to return the invidual parts as return values if invoked with NO arguments. In other words, the following behavior - after the above function calls:</p>

<p>$from = $select-&gt;from();
eg: SELECT id, name FROM user ...</p>

<p>$where = $select-&gt;where();
eg: WHERE id = 1 AND ...</p>

<p>$join = $select-&gt;join();
eg: JOIN admin a ON u.id = a.id ...</p>

<p>Here are some other methods:</p>

<p>$select-&gt;orWhere();
$select-&gt;group();
$select-&gt;having();
$select-&gt;limit();
$select-&gt;limitPage();
$select-&gt;order();</p>

<p>Thoughts...?</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Shekar Reddy (zendfw) on 2006-12-13T00:51:30.000+0000</p> 
        <div class="body">
            <p>We merge/consolidate from, join and where clauses dynamically based on some conditions. Even if these methods return the previously set values as-is (eg: arrays), that would reduce a large chunk of code in our application. As it is, these methods in the select component function as set-methods while the get methods are missing and I thought we could toggle their functionality to return the originally set values if the arguments passed while invoking them were empty.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Shekar Reddy (zendfw) on 2006-12-13T09:04:19.000+0000</p> 
        <div class="body">
            <p>I see these methods return $this for fluent interfaces. I guess providing get*() methods to return arrays (by reference) would leave their functionality intact. We particularly need access to where, from and join clauses so a single/universal method - getPart( $part ) should do the trick. Eg:</p>

<p>$where =&amp; $select-&gt;getPart( 'where' )</p>

<p>TIA</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2006-12-19T12:37:55.000+0000</p> 
        <div class="body">
            <p>Assigning to Bill Karwin.  Scheduling for 0.8.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2006-12-19T12:38:47.000+0000</p> 
        <div class="body">
            <p>Assigning to Bill Karwin.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-01-04T00:11:43.000+0000</p> 
        <div class="body">
            <p>I would choose to implement get* methods so that the fluent interface is not spoiled.  I would make a separate method for each part, instead of the getPart() method.  This would be friendlier to code-completion tools.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-01-05T17:02:22.000+0000</p> 
        <div class="body">
            <p>Recategorize in Zend_Db_Select component.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-02-08T20:50:05.000+0000</p> 
        <div class="body">
            <p>Implemented in revision 3320.</p>

<p>The method is called {{getPart()}}.  You pass a string to name the part you want to get.</p>

<pre class="highlight"><code>
$select-&gt;getPart( 'where' );
</code></pre>

<p>You can also use constants that are defined for this purpose in Zend_Db_Select:</p>

<pre class="highlight"><code>
$select-&gt;getPart( Zend_Db_Select::WHERE );
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Shekar Reddy (zendfw) on 2007-02-09T00:37:59.000+0000</p> 
        <div class="body">
            <p>Very neat implementation, indeed!</p>

<p>Thanks, much!</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Shekar Reddy (zendfw) on 2007-02-09T01:20:40.000+0000</p> 
        <div class="body">
            <p>Just a couple of things:</p>

<pre class="highlight"><code>
- public function getPart($part)
+ public function &amp;getPart($part)         // Returns part by reference instead of as a copy to conserve memory


   public function reset($part = null)
    {
        if ($part == null) {
-            $this-&gt;_parts = $this-&gt;_partsInit;
+            $this-&gt;_parts = self::$_partsInit;
        } else if (array_key_exists($part, $this-&gt;_partsInit)) {
-            $this-&gt;_parts[$part] = $this-&gt;_partsInit[$part];
+           $this-&gt;_parts[$part] = self::$_partsInit[$part];
        }
    } 
</code></pre>

<p>I noticed the new code is adding aliases to the column names which is bombing in certain cases:</p>

<pre class="highlight"><code>
$select-&gt;from( 'user', 'Count(*)' );
$select-&gt;where( 'ID = ?', $id );
echo $select-&gt;__toString();

Output:

SELECT  user_1.Count(*)
FROM user user_1
WHERE
    ID = 1
</code></pre>

<p>The above statement is not a valid SQL statement. I guess we need to either remove the aliasing logic or provide an additional argument (default true) to prefix aliases or not.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-02-09T12:09:27.000+0000</p> 
        <div class="body">
            <p>Thanks, I have fixed it in revision 3323.</p>

<p>See ZF-204 for the table aliases issue. If you pass '' as the table name you can add expressions that will not be prepended with table names.</p>

<pre class="highlight"><code>
$select-&gt;from( '', 'count(*)' );
</code></pre>

<p>This isn't the final solution that I would propose. But it does work for now.</p>

<p>I'll write a new proposal soon, but to give a preview of the use case I have in mind:</p>

<pre class="highlight"><code>
$select-&gt;from( array('*', new Zend_Db_Expr('count(*)' )) );
</code></pre>

<p>Thus the 'count( * )' is an object of a particular class, not a plain string. Zend_Db_Select can use 'instanceof' and thus will know not to treat it as it would do for column names. This can also help for insert(), update(), delete(), {{quoteInto()}}, etc.</p>

        </div>
    </div>
    </div>

