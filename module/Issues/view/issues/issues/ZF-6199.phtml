<h2>ZF-6199: Incorrect disambiguation of format in Zend_Date</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2009-04-02T16:09:04.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-04-03T14:38:16.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.8.0 (30/Apr/09)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Thomas Weidner (thomas)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Date</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>There appears to be a problem with date disambiguation on formats which should not be ambiguous. Dates in the form YYYY-MM-DD should, I believe, never be misinterpreted as YYYY-DD-MM. (This is only a problem in DD/MM/YYYY vs MM/DD/YYYY). Amazon returns their dates in this format, as does eBay - and likely many other web services.</p>

<p>Example, using a date as might be returned from eBay in ISO 8601 format:</p>

<p>$date = new Zend_Date('2009-04-03T0:00:00.000Z');
echo $date;</p>

<p>Expected (anywhere in the world):
Apr 3, 2009 12:00:00 AM</p>

<p>Actual:
Mar 4, 2009 12:00:00 AM</p>

<p>I can work around this by calling it as</p>

<p>new Zend_Date('2009-04-03T0:00:00.000Z', 'en_AU')</p>

<p>However, I shouldn't have to, and this is still going to cause problems for people in locales which use the US format.</p>

<p>Slightly related to this issue is the fact that the Z on the end of the date is a timezone indicator for GMT. Perhaps this should override the currently set timezone for the date object, or at least be documented that it is ignored and the timezone needs to be set to GMT manually (I didn't check if differential offsets are handled or not).</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2009-04-02T22:20:07.000+0000</p> 
        <div class="body">
            <p>The fact is that you are not giving ANY constant when you create Zend_Date.
This means that Zend_Date expects that you use localized input.</p>

<p>The date format is in that case used from your locale which is eighter defined by your browser or your server.
When you give a FIXED input, then you have also to set the proper date constant, otherwise the date will not be recognised correctly.</p>

<p>This is not a problem of Zend_Date, as it can not know if you want to use RFC2822 or RFC850.</p>

<p>As you have not given the complete output of your instance of Zend_Date we can not reproduce the timezone behaviour. Z is supported and also recognised. But as before this depends on the used constant.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Duncan Anker (danker) on 2009-04-02T23:11:39.000+0000</p> 
        <div class="body">
            <p>Thank you. That makes sense.</p>

<p>I'm not sure what the server's default locale is, although if anything I would expect the Australian format to cause a problem. Given that providing a constant is pretty much mandatory, I wonder if throwing an exception might be a better option? I spent ages reading and trying to understand the manual and still didn't realize I needed the constant. It might save a lot of USER=ID10T errors.</p>

<p>I fixed the test code with a Zend_Date::ISO_8601 though it still seems to ignore Z. This is the pertinent code:</p>

<p>date_default_timezone_set('Australia/Brisbane');
$test = new Zend_Date('2009-04-15T09:22:17.000Z', Zend_Date::ISO_8601);
echo $test-&gt;getTimezone() . ' ' . $test . "\n";</p>

<p>I get:</p>

<p>Australia/Brisbane Apr 15, 2009 9:22:17 AM</p>

<p>expected:</p>

<p>Australia/Brisbane Apr 15, 2009 7:22:17 PM</p>

<p>The dump of the Zend_date instance looks like this:</p>

<p>object(Zend_Date)#2 (8) {
  ["_locale:private"]=&gt;
  string(2) "en"
  ["_fractional:private"]=&gt;
  int(0)
  ["_precision:private"]=&gt;
  int(3)
  ["_unixTimestamp:private"]=&gt;
  string(10) "1239751337"
  ["_timezone:private"]=&gt;
  string(18) "Australia/Brisbane"
  ["_offset:private"]=&gt;
  int(-36000)
  ["_syncronised:private"]=&gt;
  int(0)
  ["_dst:protected"]=&gt;
  bool(true)
}</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2009-04-03T14:38:15.000+0000</p> 
        <div class="body">
            <p>Fixed</p>

        </div>
    </div>
    </div>

