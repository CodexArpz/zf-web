<h2>ZF-1144: Support default table in constructor of custom Row</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>New Feature</dd>

    <dt>Created:</dt>
    <dd>2007-03-27T13:52:52.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-01-08T06:53:31.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.8.0 (30/Apr/09)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Bill Karwin (bkarwin)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Jurrien Stutterheim (norm2782)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Db_Table</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-191">ZF-191</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Jeff Bailey writes:</p>

<p>I have a Class that I'm inheriting from Zend_Table_Db_Row_Abstract to use as a customClass in a table, let's call it User.  This works fine for retrieving rows and giving me all of my attached logic, update checks and whatnot.</p>

<p>What I'd like to be able to do is use it naturally for creating empty objects, so</p>

<pre class="highlight"><code>
$aUser = new User();
</code></pre>

<p>In order to do this, I've cooked up a constructor that will work:</p>

<pre class="highlight"><code>
class User extends Zend_Db_Table_Row_Abstract
{
    private $_tableName = "UserTable";

    public function __construct(array $config = array())
    {
        if (empty($config["table"])) {
            $config["table"] = new $this-&gt;_tableName();
            $info = $config["table"]-&gt;info();
            $keys = array_values($info[Zend_Db_Table_Abstract::COLS]);
            $vals = array_fill(0, count($keys), NULL);
            $config["data"] = array_combine($keys, $vals);
        }

        parent::__construct($config);
    }
}
</code></pre>

<p>I think that this type of logic would be nice to have as the default constructor for Zend_Db_Table_Row_Abstract.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-03-27T13:53:19.000+0000</p> 
        <div class="body">
            <p>I've used the fetchNew method, but then it means that the business logic needs to know about the table subclasses.</p>

<pre class="highlight"><code>
$userTable = new UserTable();
$aUser = UserTable-&gt;fetchNew();
</code></pre>

<p>feels less natural than:</p>

<pre class="highlight"><code>
$aUser = new User();
</code></pre>

<p>and also makes for code that is slightly easier to test with null objects.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-04-17T17:55:45.000+0000</p> 
        <div class="body">
            <p>We should allow primary key fields to be set.  This issue would be much easier to solve if that were true.  So I'm marking it as a dependency.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-03-25T20:43:58.000+0000</p> 
        <div class="body">
            <p>Please categorize/fix as needed.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-04-18T13:12:06.000+0000</p> 
        <div class="body">
            <p>This doesn't appear to have been fixed in 1.5.0. Please update if this is not correct.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Jurrien Stutterheim (norm2782) on 2009-01-08T06:53:31.000+0000</p> 
        <div class="body">
            <p>Resolved in r.13552</p>

        </div>
    </div>
    </div>

