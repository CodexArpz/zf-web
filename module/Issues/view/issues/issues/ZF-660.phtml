<h2>ZF-660: MVC modules fail need default module setting</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2006-12-18T13:54:06.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2007-07-05T14:43:34.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>0.7.0 (18/Jan/07)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Matthew Weier O'Phinney (matthew)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Controller</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>There is no default module setting available currently when using modules with the controller classes. Additionally, if a controller is not found in the module specified, currently the code looks through all controller directories until it finds a match; this is not optimal, and could lead to some controllers being invoked when they shouldn't.</p>

<p>As an example:</p>

<pre class="highlight"><code>
ZF_bugs
|-- core
|   `-- controllers
|       |-- indexController.php
|       `-- reportsController.php
|-- index.php
`-- user
    `-- controllers
        `-- newsController.php

index.php

&lt;?
    require 'Zend.php';

    function __autoload($className) {
        Zend::loadClass($className);
    }

    $path = array (
        'default' =&gt; 'E:\Work\htdocs\work\ZF_Bugs\core\controllers',
        'user'       =&gt; 'E:\Work\htdocs\work\ZF_Bugs\user\controllers'
     );


    $front = Zend_Controller_Front::getInstance();
    $front-&gt;throwExceptions(true);
    $front-&gt;setControllerDirectory($path);
    $front-&gt;setParam('useModules', true);

    $router = new Zend_Controller_Router();

    try {
        $front-&gt;setRouter($router);
        $front-&gt;dispatch();
    } catch (Zend_Exception $e) {
        echo $e-&gt;getMessage();
        echo "</code></pre><pre><code>";
        echo $e-&gt;getTraceAsString();
    }
?&gt;

reportsController.php
&lt;?
class ReportsController extends Zend_Controller_Action
{
    public function indexAction()
    {
        echo __METHOD__;
    }

    public function noRouteAction()
    {
        echo __METHOD__;
    }
}
?&gt;

newsController.php

&lt;?
class User_NewsController extends Zend_Controller_Action
{

    public function indexAction()
    {
        echo __METHOD__;
    }

    public function noRouteAction()
    {
        echo __METHOD__;
    }
}

?&gt;


Request: <a href="http://zfbugs.home.net/user/news/">http://zfbugs.home.net/user/news/</a>
Response : User_NewsController::indexAction


Request: <a href="http://zfbugs.home.net/reports/">http://zfbugs.home.net/reports/</a>
Response:

File "Reports\IndexController.php" was not found.

#0 E:\Work\library\Zend.php(81): Zend::loadFile('IndexController...',
'Reports', true)
</code></pre><code></code>

<p>There are two ways to deal with this:
1. Check for the key 'default', and look in that set of directories when no module is specified
2. Have two separate controller directory arrays, one for directories with no associated module, and one for those with modules.</p>

<p>As a possible implementation:</p>

<pre class="highlight"><code>
// in Zend_Controller_Front
public function addControllerDirectory($path, $module = 'default')
{
    // check for readable path...

    if ('default' == $module) {
        $this-&gt;_controllerDirDefault[] = $path;
    } else {
        $this-&gt;_controllerDir[(string) $module] = $path;
    }
}

public function getControllerDirectory()
{
    return array_merge($this-&gt;_controllerDIr, array('default' =&gt; $this-&gt;_controllerDirDefault));
}


// in Zend_Controller_Dispatcher()
if ($module &amp;&amp; isset($directories[$module])) {
    // normal checking
} elseif ($module) {
    // look in $directories['default']
} else {
    // normal looping through $directories
}
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Andrey K. Korolyov (begemot) on 2006-12-18T17:08:46.000+0000</p> 
        <div class="body">
            <p>And in this case do not work method noRouteAction();</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2007-01-16T21:34:03.000+0000</p> 
        <div class="body">
            <p>Resolved in revision 2840</p>

        </div>
    </div>
    </div>

