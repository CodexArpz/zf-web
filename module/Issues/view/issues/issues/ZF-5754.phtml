<h2>ZF-5754: ArrayOfTypeComplex does not allow recursive types</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2009-02-11T17:11:33.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-02-12T15:45:57.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.7.5 (16/Feb/09)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Quentin Zervaas (qzervaas)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Benjamin Eberlei (beberlei)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Soap_Wsdl</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-5604">ZF-5604</a></li>
            <li><a href="/issues/browse/ZF-5766">ZF-5766</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
        <li><a href="/issues/secure/attachment/11745/DefaultComplexType2.php">DefaultComplexType2.php</a></li>
        </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Since the fix of job #5604, it's not possible to have recursive types.</p>

<p>The following code fails in ZF 1.7.4 (Fatal error: Maximum function nesting level of '100' reached, aborting!)</p>

<pre class="highlight"><code>
&lt;?php
    ini_set('include_path', dirname(__FILE__) . '/1.7.4');

    require_once('Zend/Soap/AutoDiscover.php');
    require_once('Zend/Soap/Wsdl/Strategy/ArrayOfTypeComplex.php');

    class WebservicesTestClass
    {
        /**
         * @var WebservicesTestClass[]
         */
        public $children = array();
    }

    class WebservicesTest
    {
        /**
         * @return WebservicesTestClass[]
         */
        public function test()
        {
            return array();
        }
    }

    $auto = new Zend_Soap_AutoDiscover('Zend_Soap_Wsdl_Strategy_ArrayOfTypeComplex');
    $auto-&gt;setClass('WebservicesTest');
    $auto-&gt;handle();
?&gt;
</code></pre>

<p>Note however when working in &lt;= 1.7.3pl1, the type is incorrectly returned in the WSDL as WebservicesTestClass[] rather than ArrayOfWebservicesTestClass</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Quentin Zervaas (qzervaas) on 2009-02-11T17:21:31.000+0000</p> 
        <div class="body">
            <p>Further testing indicates that if not specifying the types as arrays, it also fails in older versions</p>

<p>Sample code:</p>

<pre class="highlight"><code>
&lt;?php
    ini_set('include_path', dirname(__FILE__) . '/1.7.3');

    require_once('Zend/Soap/AutoDiscover.php');
    require_once('Zend/Soap/Wsdl/Strategy/ArrayOfTypeComplex.php');

    class WebservicesTestClass
    {
        /**
         * @var WebservicesTestClass
         */
        public $child;
    }

    class WebservicesTest
    {
        /**
         * @return WebservicesTestClass
         */
        public function test()
        {
            return array();
        }
    }

    $auto = new Zend_Soap_AutoDiscover('Zend_Soap_Wsdl_Strategy_ArrayOfTypeComplex');
    $auto-&gt;setClass('WebservicesTest');
    $auto-&gt;handle();
?&gt;
</code></pre>

<p>The Zend_Soap_Wsdl_Strategy_DefaultComplexType-&gt;addComplexType() method needs to check what types are currently being added since it won't yet be available in $this-&gt;getContext()-&gt;getTypes()</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Quentin Zervaas (qzervaas) on 2009-02-11T17:29:41.000+0000</p> 
        <div class="body">
            <p>The following patch solves the issue:</p>

<pre class="highlight"><code>
24a25,26
&gt;     protected static $_processing = array();
&gt; 
32a35,40
&gt;         if (in_array($type, self::$_processing)) {
&gt;             return;
&gt;         }
&gt; 
&gt;         self::$_processing[$type] = $type;
&gt; 
65a74
&gt;         unset(self::$_processing[$type]);
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Quentin Zervaas (qzervaas) on 2009-02-11T17:31:42.000+0000</p> 
        <div class="body">
            <p>This file contains my changes to Zend/Soap/Wsdl/Strategy/DefaultComplexType.php</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Benjamin Eberlei (beberlei) on 2009-02-12T11:10:49.000+0000</p> 
        <div class="body">
            <p>confirmed! i'll look into it for the next mini release.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Benjamin Eberlei (beberlei) on 2009-02-12T14:45:14.000+0000</p> 
        <div class="body">
            <p>your patch prevents recursion from happening, but it doesnt fix the bug. Your nested value is empty because you return nothing from the function.</p>

<p>Actually in the current implementation recursion objects is not even possible i think. I am changing this to throw an exception.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Benjamin Eberlei (beberlei) on 2009-02-12T14:56:24.000+0000</p> 
        <div class="body">
            <p>Fix in trunk and merged back into 1.7 release branch.</p>

<p>Throw an Exception on possible infinite recursion now.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Quentin Zervaas (qzervaas) on 2009-02-12T15:00:21.000+0000</p> 
        <div class="body">
            <p>This doesn't really solve my issue... why should it not be possible to recurse into itself?</p>

<p>Can you not just change my implementation slightly to return "tns:$type" rather than just return?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Benjamin Eberlei (beberlei) on 2009-02-12T15:28:53.000+0000</p> 
        <div class="body">
            <p>well if you require recursion, then you might need to stop somewhere. but wsdl types are rather strict, so how would you do that? The current ArrayOfTypeComplex does not support minOccurs which is the only way to handle this situation according to <a href="http://stackoverflow.com/questions/148988/recursion-in-xsd-schemas">http://stackoverflow.com/questions/148988/â€¦</a> (i couldnt find it in the XSD doc, its dull to read).</p>

<p>I will have to look into it for the future, but i can't support this right now because if have to test it further.</p>

<p>So long the infinite recursion protection will be added.</p>

<p>Would that be ok?</p>

<p>The problem with returning tns:$type is, it might be the wrong name.</p>

<p>Back to your recursive example, how does it "stop" when you return "tns:$type" anyways? Doesnt SOAP then require an infinite stream of objects in your definition?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Benjamin Eberlei (beberlei) on 2009-02-12T15:42:59.000+0000</p> 
        <div class="body">
            <p>closed the issue by fault, now resolved.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Quentin Zervaas (qzervaas) on 2009-02-12T15:45:56.000+0000</p> 
        <div class="body">
            <p>Fair enough. I thought you could effectively "end the recursion" by returning a null object.</p>

<p>Is it worth creating a new feature request in this tracker to support such functionality?</p>

        </div>
    </div>
    </div>

