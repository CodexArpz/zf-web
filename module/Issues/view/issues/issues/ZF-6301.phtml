<h2>ZF-6301: Allow user-provided adapters</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2009-04-15T04:19:59.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-04-15T10:14:15.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Thomas Weidner (thomas)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Translate</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Zend_Translate actually loads adapters only from Zend/Translate/Adapter/* location, but it would be nice if a developer could add a path to his own adapters, which would be located in My/Translate/Adapter/*.</p>

<p>With user-provided adapters, developer could add an own database-translation adapter and use it with Zend_Translate. I have made a small expirement where my adapter (located in Zend/Translate/Adapter/) uses my database model and Zend_Translate automatically caches the result with Zend_Cache.</p>

<p>The "problem" is located in Zend/Translate.php at the setAdapter() method:</p>

<pre class="highlight"><code>
public function setAdapter($adapter, $data, $locale = null, array $options = array())
{
    if (Zend_Loader::isReadable('Zend/Translate/Adapter/' . ucfirst($adapter). '.php')) {
        $adapter = 'Zend_Translate_Adapter_' . ucfirst($adapter);
    }
    ...
}
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Jan Pieper (jpieper) on 2009-04-15T04:33:27.000+0000</p> 
        <div class="body">
            <p>Zend_Translate is only a "factory" like class to instantiate translate adapters. Why aren't you instantiating your class directly?</p>

<p>```</p>

<p>It isn't the finest way but it should help.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Dennis Becker (radhad) on 2009-04-15T04:54:03.000+0000</p> 
        <div class="body">
            <p>This is a possible way, I haven't checked this solution and I just thought about a more flexible factory pattern implementation, maybe similar to the new Zend_Application component where you can add more plugin paths.</p>

<p>This is just a small idea from my side :)</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2009-04-15T05:04:15.000+0000</p> 
        <div class="body">
            <p>Sorry, but I don't see a problem with this code...
You can use ANY properitary adapter by simply giving it:</p>

<pre class="highlight"><code>
$translate = new Zend_Translate('My_Own_Properitary_Translation_Adapter', $file, $locale, $options);
</code></pre>

<p>It is even written within the manual within a own chapter how to do this:
<a href="http://framework.zend.com/manual/en/zend.translate.adapter.html#zend.translate.adapter.selfwritten">http://framework.zend.com/manual/en/â€¦</a></p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Dennis Becker (radhad) on 2009-04-15T05:18:12.000+0000</p> 
        <div class="body">
            <p>Sorry, seems to be my fault. When I did the tests, I had not seen this chapter in the manual!</p>

<p>I will try this and will report, if it worked for me or not. Thanks for the hint to the manual, it seems I'll have to re-read some hcapters ;)</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2009-04-15T10:14:14.000+0000</p> 
        <div class="body">
            <p>Closing as non-issue</p>

        </div>
    </div>
    </div>

