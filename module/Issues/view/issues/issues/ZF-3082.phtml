<h2>ZF-3082: Allow validation of a complete Zend_Form (which is different from the single fields validations).</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2008-04-09T10:55:22.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2013-02-13T16:49:36.000+0000</dd>

    <dt>Status:</dt>
    <dd>Closed</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
        None
                    </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Form</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Beside the single Zend_Form_Element validation, a Form could need a global validation.
Suppose for example a form with two password element called Password and Confirm Password: the single element validity doesn't mean the form is valid (since they have to match).</p>

<p>I suggest a new Zend_Form::addValidator() method working on the filled data's array.
After validating the single fields, Zend_Form::isValid() and Zend_Form::getMessages() should call the forms validators for retriving the global errors.</p>

<p>The Form Validators should also be able to change the style of different form elements for make it easier for the filler to locate the wrong elements (in the example Password and Confirm Password could be 2 of 40 fields...), since the message could not be enougth. &lt;- this seem to me the the most complex challenge, while I could write patch for the others I don't yet imagine how to do this.</p>

<p>Finally when the use of the data provided by a Zend_Form raise an error (suppose you got an error when saving a row on the db) such an error should be presented as a Zend_Form "global" error for interface consistency.
For this last point I could suppose two way:
- a new Zend_Form::addGlobalError(string $error)  method, which would be simple to understand
- a Zend_Form_Error which extend Zend_Validate_Abstract to be added with the Zend_Form::addValidator() I talked in the first point.</p>

<p>This a stub of such a class
class Zend_Form_Error extends Zend_Validate_Abstract
{
    protected $_message = array();</p>

<pre><code>public function __construct($error, $message)
{
    $this-&gt;_message[$error] = $message;
}

public function isValid($value)
{
    return false;
}
</code></pre>

<p>}</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2008-04-09T11:07:41.000+0000</p> 
        <div class="body">
            <p>This sort of validation is actually already addressed in the component with the concept of validation context. Please see the <a href="http://framework.zend.com/manual/en/zend.form.elements.html#zend.form.elements.validators">Zend_Form_Element validation documentation</a> page for more details; look for the note entitled "Validation Context".</p>

<p>The basic idea of Validation Context is that the full dataset provided to the form is passed as a second parameter to isValid(); your custom validator can then use this information as part of its validation process. If the form as a whole needs to be validated, you could also provide a hidden element with no decorators and a single validator that uses the context to look for overall validity of the form. This is the recommended way to achieve what you propose.</p>

<p>Please re-open the issue if the above does not work for you; however, please be prepared to show the workflow you desire, and how Validation Context does <em>not</em> fulfill it.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Claude Duvergier (cduv) on 2009-12-10T09:10:55.000+0000</p> 
        <div class="body">
            <p>I recently ran into such issue with a form (a SubForm actually) that could have a variable number of text-fields.
My validation rule was to mark as that Subform as invalid (i.d. "having error") if there were more than 5 filled text-field.</p>

<p>In that scenario I think a Zend_Form-based validator is usefull because such error is not the fault of any text-field, it is a form-level rule.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Georgy Turevich (georgy) on 2010-07-08T04:17:36.000+0000</p> 
        <div class="body">
            <p>I agree with Claude, and have similar validation rule (...were more than 5 filled text-field) in some my forms.</p>

<p>Solution with hidden element looks like a dirty workaround.</p>

<p>May be it should be in ZF 2.0?</p>

<p>PS:
Symfony has similar validators - Global Validators
<a href="http://www.symfony-project.org/forms/1_4/en/02-Form-Validation#chapter_02_global_validators">http://symfony-project.org/forms/1_4/â€¦</a></p>

        </div>
    </div>
    </div>

