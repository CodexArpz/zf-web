<h2>ZF-4000: Zend_Validate_Float always fails in localized environments</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2008-08-19T10:28:51.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2008-12-19T04:03:19.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.8.0 (30/Apr/09)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Nikolaus Hammler (nobaq)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Thomas Weidner (thomas)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Validate</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-3423">ZF-3423</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>First: Zend_Framework provides a powerful Zend_Locale. In my optionion Zend_Locale should be used with Zend_Validate_Float instead of localeconv().</p>

<p>Second: Zend_Validate_Float always failes when PHP is localized.</p>

<p>In method isValid(), the float value is first converted to an english value:</p>

<p>$valueFiltered = str_replace($locale['thousands_sep'], '', $valueString);
$valueFiltered = str_replace($locale['decimal_point'], '.', $valueFiltered);</p>

<p>So $valueFiltered always ends up with a value like "0.3" (also in localized environments).</p>

<p>But now the problem is that floatval is localized itself; floatval(0.3) will give 0,3 in a german environment. Finally, stringval(floatval(0.3)) gives 0,3. And exactly this string is compared to the original $valueFiltered:</p>

<p>if (strval(floatval($valueFiltered)) != $valueFiltered) {</p>

<p>So this if-statement will always fail.</p>

<p>I would recommend to use a class like this:</p>

<p>class Zend_Validate_Float extends Zend_Validate_Abstract
{</p>

<pre><code>const NOT_FLOAT = 'notFloat';

protected $_messageTemplates = array(
    self::NOT_FLOAT =&gt; "'%value%' does not appear to be a float"
);

public function isValid($value)
{
    $valueString = (string) $value;

    $this-&gt;_setValue($valueString);

    $locale = Zend_Registry::get('Zend_Locale');

    if(!$locale) {
        $locale = new Zend_Locale();
    }

    if(!Zend_Locale_Format::isFloat($value, array('locale' =&gt; $locale))) {
        $this-&gt;_error();
        return false;
    }

    return true;
}
</code></pre>

<p>}</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2008-08-19T11:18:14.000+0000</p> 
        <div class="body">
            <p>Duplicates ZF-3423</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2008-11-29T11:58:28.000+0000</p> 
        <div class="body">
            <p>This solution:</p>

<ul><li>does not work when no application locale is given</li>
<li>does not work when the given locale is no locale</li>
<li>does not allow to override the application locale with a manual locale</li>
</ul>
        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Sven Franke (snef) on 2008-11-29T12:24:00.000+0000</p> 
        <div class="body">
            <p>Zend_Validator_Date is implementing an optional Zend_Locale, maybe to create something like that (to keep it in line).</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2008-12-19T04:03:19.000+0000</p> 
        <div class="body">
            <p>New feature added with r13372</p>

        </div>
    </div>
    </div>

