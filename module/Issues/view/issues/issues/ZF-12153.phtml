<h2>ZF-12153: Zend_Controller_Request_Http::getClientIp(), dangerous default</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2012-04-14T23:14:27.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-04-15T12:31:06.000+0000</dd>

    <dt>Status:</dt>
    <dd>Open</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Alexander Makarov (samdark)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Matthew Weier O'Phinney (matthew)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Controller</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>By default Zend_Controller_Request_Http::getClientIp() checks for X-Forwarded-For that leads to easy IP spoofing. This is a very dangerous default since method can be used for IP-based authorization:</p>

<pre class="highlight"><code>
if(in_array(getClientIp(), $allowedAddresses))
{
  echo 'I am admin! Yay!';
}
</code></pre>

<p>If you're not sure if it's good to break backwards compatibility in order to prevent it and if it's better just to mention it somewhere in the documentation, check these:</p>

<p><a href="https://github.com/blog/1068-public-key-security-vulnerability-and-mitigation">https://github.com/blog/…</a>
<a href="https://github.com/blog/1069-responsible-disclosure-policy">https://github.com/blog/…</a></p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Daniel Petrovic (stpiere) on 2012-04-15T12:31:06.000+0000</p> 
        <div class="body">
            <p>My opinion is, that it would be enough to mention in the doc's that default call to getClientIp() should be used only in secured manner, for ex. logging purposes, etc... and any usage for getting authoritativ privileges should be used with caution and eventually setting $checkProxy = false</p>

        </div>
    </div>
    </div>

