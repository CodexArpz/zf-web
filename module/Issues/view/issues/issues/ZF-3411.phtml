<h2>ZF-3411: Add option not to forward to default module when module name isn't recognised (Zend_Controller_Dispatcher)</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2008-06-08T06:13:07.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-11-20T20:52:39.000+0000</dd>

    <dt>Status:</dt>
    <dd>Closed</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
        None
                    </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Controller</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Currently the Zend_Controller_Dispatcher_Standard-&gt;getControllerClass() method will send the request to the default module if the module name returned by the router is not a valid module. However, in some situations (eg. if someone has set a custom default module) this behaviour may not be desired, and people may prefer a request for an invalid module to end up at the error controller (as with invalid controllers and actions).</p>

<p>An option should be introduced into Zend_Controller_Dispatcher_Standard to disable this default behaviour, and the ErrorHandler plugin should be modified to include EXCEPTION_NO_MODULE errors.</p>

<p>I'm currently using this modified version of getControllerClass to enforce this behaviour, however this obviously lacks the ability to still use the default behaviour if required:</p>

<pre class="highlight"><code>
   public function getControllerClass(Zend_Controller_Request_Abstract $request)
   {
       $controllerName = $request-&gt;getControllerName();
       if (empty($controllerName)) {
           if (!$this-&gt;getParam('useDefaultControllerAlways')) {
               return false;
           }
           $controllerName = $this-&gt;getDefaultControllerName();
           $request-&gt;setControllerName($controllerName);
       }

       $className = $this-&gt;formatControllerName($controllerName);

       $controllerDirs      = $this-&gt;getControllerDirectory();
       $module = $request-&gt;getModuleName();
       if ($this-&gt;isValidModule($module)) {
           $this-&gt;_curModule    = $module;
           $this-&gt;_curDirectory = $controllerDirs[$module];
       } else {
           require_once 'Zend/Controller/Exception.php';
           throw new Zend_Controller_Dispatcher_Exception('Invalid module specified (' . $request-&gt;getModuleName() . ')');
       }

       return $className;
   } 
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Marco Frank (melchior) on 2009-06-20T23:57:47.000+0000</p> 
        <div class="body">
            <p>hi,</p>

<p>I ran into the same problem that after deleting the default routes all wrong url's were routed to index module/controller/action without throwing an exception.</p>

<p>here's my solution to get wrong urls caught as excpected:</p>

<p>Its for ZF &gt;1.8 using Zend_Application</p>

<p>step1: write this into index.php before Zend_Application gets created:</p>

<p>require_once PATH_ZF.'Zend/Controller/Front.php';
require_once PATH_ZF.'Zend/Controller/Dispatcher/Standard.php';
require_once PATH_MY.'My/Controller/Dispatcher/Standard.php';
$front = Zend_Controller_Front::getInstance();
$dispatcher = new My_Controller_Dispatcher_Standard();
$front-&gt;setDispatcher($dispatcher);</p>

<p>this is the simplest way I found to get your own custom dispatcher injected before the configuration plugin is loaded and needs this object called by
resources.frontController.moduleDirectory = APPLICATION_PATH"/modules"</p>

<p>step2: create own dispatcher class</p>

<p>class My_Controller_Dispatcher_Standard extends Zend_Controller_Dispatcher_Standard{
    public function getDefaultControllerClass(Zend_Controller_Request_Abstract $request){
        throw new Zend_Exception("CUSTOM EXCEPTION: Invalid url specified ("%INSERT HERE THE CURRENT PATH!%") ");
    }
}</p>

<p>With this solution invalid urls get thrown as exception.</p>

<p>hope it helps somebody,</p>

<p>greetz,
Marco</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Rob Allen (rob) on 2012-11-20T20:52:39.000+0000</p> 
        <div class="body">
            <p>Bulk change of all issues last updated before 1st January 2010 as "Won't Fix".</p>

<p>Feel free to re-open and provide a patch if you want to fix this issue.</p>

        </div>
    </div>
    </div>

