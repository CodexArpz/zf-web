<h2>ZF-11976: Zend_Cache_Core::setBackend should accept Zend_Cache_Backend_Interface</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2012-01-06T10:41:40.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-02-23T23:33:05.000+0000</dd>

    <dt>Status:</dt>
    <dd>Open</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Alexander Veremyev (alexander)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Cache</li>
            <li>cache</li>
            <li>zf-crteam-review</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Hello ZF team. First of all thank you for your work.
There is strange behavior with one of the cache function (Zend_Cache_Core::setBackend). It uses Zend_Cache_Backend as parameter, but more logical if it use Zend_Cache_Backend_Interface instead.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Adam Lundrigan (adamlundrigan) on 2012-02-23T23:33:05.000+0000</p> 
        <div class="body">
            <p>Downgrading to Minor, as all backends extend Zend_Cache_Backend at this point.  There really isn't any gain that I can see in changing this now, and there is the possibility that people out there may have created custom backends that extend Zend_Cache_Backend but don't implement the interface and so those would no longer be accepted by Zend_Cache_Core.  It may be worth making a note in the manual about needing to extend Zend_Cache_Backend if you're creating a new custom backend, though</p>

        </div>
    </div>
    </div>

