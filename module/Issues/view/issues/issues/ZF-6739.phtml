<h2>ZF-6739: Connect to a database with trusted connection</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2009-05-20T04:08:00.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-11-20T21:37:56.000+0000</dd>

    <dt>Status:</dt>
    <dd>Open</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
        None
                    </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Db</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-3493">ZF-3493</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>I am running with "{{mssql.secure_connections = On}}" in my "{{php.ini}}" file, so I don't have to assign a username and password whenever I make query.</p>

<p>This works fine with PHP native {{mssql_*}} functions and the ADOdb Framework, but sadly not with the Zend Framework. At least I haven't found out how to connect to a database without assigning a username and a password.</p>

<p>I have found a solution to make it possible, however it is dependant on another "patch" (<a href="http://framework.zend.com/issues/browse/ZF-3493">http://framework.zend.com/issues/browse/ZF-3493</a>) by Bart McLeod.</p>

<p>The changes are made to the function {{_dsn()}} which should be changed to:</p>

<pre class="highlight"><code>
    protected function _dsn()
    {
        // baseline of DSN parts
        $dsn = $this-&gt;_config;


        if (isset($dsn['port'])) {
            $seperator = ':';
            if (strtoupper(substr(PHP_OS, 0, 3)) === 'WIN') {
                $seperator = ',';
            }
            $dsn['host'] .= $seperator . $dsn['port'];
            unset($dsn['port']);
        }

        // this driver supports multiple DSN prefixes
        // @see <a href="http://www.php.net/manual/en/ref.pdo-dblib.connection.php">http://php.net/manual/en/â€¦</a>
        if (isset($dsn['pdoType'])) {
            switch (strtolower($dsn['pdoType'])) {
                case 'freetds':
                case 'sybase':
                    $this-&gt;_pdoType = 'sybase';
                    break;
                case 'mssql':
                    $this-&gt;_pdoType = 'mssql';
                    break;
                case 'odbc':
                    $this-&gt;_pdoType = 'odbc';
                    $dsn['DATABASE']    = $dsn['dbname'];
                    unset($dsn['dbname']);
                    $dsn['DRIVER']    = '{SQL Server}';
                    $dsn['SERVER']    = $dsn['host'];
                    if (!$dsn['username'] &amp;&amp; !$dsn['password']) {
                        $dsn['Trusted_Connection'] = "yes";
                    }
                    unset($dsn['host']);
                    break;
                case 'dblib':
                default:
                    $this-&gt;_pdoType = 'dblib';
                    break;
            }
            unset($dsn['pdoType']);
        }

        // don't pass the username and password in the DSN
        unset($dsn['username']);
        unset($dsn['password']);
        unset($dsn['driver_options']);

        // use all remaining parts in the DSN
        foreach ($dsn as $key =&gt; $val) {
            $dsn[$key] = "$key=$val";
        }

        $dsn = $this-&gt;_pdoType . ':' . implode(';', $dsn);
        return $dsn;
    }
</code></pre>

<p>I would've loved to not being forced to use ODBC, but couldn't couldn't figure out how to make a trusted connection with PDO_MSSQL :(.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Jan Olsen (janpolsen) on 2010-02-11T04:49:42.000+0000</p> 
        <div class="body">
            <p>Crossposted from ZF-3493 since that issue apparently got closed prematurely IMHO.</p>

<p>Please someone look into this and let me know if I can help in any way.</p>

<hr /><p>I just went through updating ZendFramework from 0.9.3 to 1.10.0 and while it should've been a simple overwrite of all the files then it took a bit longer than that.</p>

<p>The reason... I had to manually add the attached mssql-odbc-patch as well as the changes from ZF-6739.</p>

<p>I can understand that there is the right way of implementing stuff as well as the wrong way, but reading that this issue might get changed to "wont-fix" (as well as ZF-905) and the lack of response in issue ZF-6739 (which is depending on this fix) then I fear that I have to manually make changes in all future releases of Zend Framework.</p>

<p>This fix doesn't break any functionality and just adds an extra option/setting, so why is it, that it can't be implemented?</p>

<p>Do we really have to install Microsofts SQLserver driver and if so, does that then solve the problems in this issue and the related issues (text fields above 4096 bytes, trusted connection and multiple queries).</p>

        </div>
    </div>
    </div>

