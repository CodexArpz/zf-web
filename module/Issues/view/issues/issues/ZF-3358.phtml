<h2>ZF-3358: Support out of the box validation with belongsTo/elementsBelongTo</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2008-05-30T07:31:20.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2010-03-18T08:13:54.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.5.3 (28/Jul/08)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Amr Mostafa (alienbrain)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Matthew Weier O'Phinney (matthew)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Form</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-9456">ZF-9456</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
        <li><a href="/issues/secure/attachment/11338/Zend_Form-Improved_ElementsBelongTo.patch">Zend_Form-Improved_ElementsBelongTo.patch</a></li>
            <li><a href="/issues/secure/attachment/11314/Zend_Form_belongsTo.patch">Zend_Form_belongsTo.patch</a></li>
            <li><a href="/issues/secure/attachment/11312/Zend_Form_belongsTo.php">Zend_Form_belongsTo.php</a></li>
            <li><a href="/issues/secure/attachment/11313/Zend_Form_elementsBelongTo.php">Zend_Form_elementsBelongTo.php</a></li>
        </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>h4. Introduction:
Zend_Form supports belongsTo (on element level) and elementsBelongTo (on form level) as more explicit and free ways of grouping fields using array notation. The other default way is using SubForms. A key difference between the two approaches is that with SubForms, Zend_Form <em>knows</em> what data structure to expect when validating and populating. So you can pass it the whole $_POST array for example, and it will loop and assign values.</p>

<p>With the belongsTo/elementsBelongTo approach however, the data structure inside a Zend_Form could be 1 level (flat). While in reality, it's going to result in a nested arrays of arrays inside $_POST once submitted. So the developer can no longer pass $_POST and expect Zend_Form to validate against or populate with.</p>

<p>This limitation is noted in the <a href="http://framework.zend.com/manual/en/zend.form.advanced.html#zend.form.advanced.arrayNotation">Advanced Zend_Form Usage</a> section in the manual (the last paragraph):
bq. Additionally, on the element level, you can specify individual elements may belong to particular arrays using Zend_Form_Element::setBelongsTo() method. However, doing this may cause issues when validating your element, and is not recommended in most cases.</p>

<p>This issue aims at improving the situation and hopefully removing this warning from the manual :)</p>

<p>h4. To reproduce:
A full example is attached for convenience, however minimal important parts follow:
h5. Zend_Form_Element's belongsTo:</p>

<pre class="highlight"><code>
$form-&gt;addElement('text', 'recipient', array(
    'label' =&gt; 'Ship to',
    'required' =&gt; true,
    'belongsTo' =&gt; 'shipping',
));

$form-&gt;addElement('submit', 'submit', array(
    'label' =&gt; 'Submit'.
));

if ($request-&gt;isPost()) {
    if ($form-&gt;isValid($request-&gt;getPost())) {
        // Execution never reach here. Form is never valid.
        echo 'Order Placed!';
    }
}

echo $form-&gt;render();
</code></pre>

<p>h5. Zend_Form's elementsBelongTo:</p>

<pre class="highlight"><code>
$form-&gt;setElementsBelongTo('shipping');

$form-&gt;addElement('text', 'recipient', array(
    'label' =&gt; 'Ship to',
    'required' =&gt; true,
));

$form-&gt;addElement('submit', 'submit', array(
    'label' =&gt; 'Submit'.
));

if ($request-&gt;isPost()) {
    if ($form-&gt;isValid($request-&gt;getPost())) {
        // Execution never reach here. Form is never valid.
        echo 'Order Placed!';
    }
}

echo $form-&gt;render();
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Amr Mostafa (alienbrain) on 2008-05-30T07:43:07.000+0000</p> 
        <div class="body">
            <p>A ready to use example demonstrating the problem when using <em>belongsTo</em> (on the element's level). You just need to correct the path to zf.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Amr Mostafa (alienbrain) on 2008-05-30T07:43:31.000+0000</p> 
        <div class="body">
            <p>A ready to use example demonstrating the problem when using <em>setElementsBelongTo</em> (on the form's level). You just need to correct the path to zf.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Amr Mostafa (alienbrain) on 2008-05-30T07:50:57.000+0000</p> 
        <div class="body">
            <p>Attaching a patch which fixes this issue. It does that by parsing the belongsTo/setElementsBelongsTo and dissolving the value from given data (e.g. POST) based on that.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2008-05-30T08:56:55.000+0000</p> 
        <div class="body">
            <p>This was an excellently reported issue -- my thanks to you!</p>

<p>If you could provide unit tests for this functionality, that will make my job even easier. Regardless, I'm scheduling for the next mini release.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Amr Mostafa (alienbrain) on 2008-06-12T01:18:50.000+0000</p> 
        <div class="body">
            <p>Thanks Matthew, it's my pleasure! :)</p>

<p>I started writing the tests few days ago, but more importantly, when I ran the test suite of Zend_Form with the patch applied, I've noticed that 2 tests failed. So I decided to examine the situation again, and I'm working on an enhanced patch. But I need help :)</p>

<p>Why does FormElements decorator override the subForm's elementsBelongTo? For example:</p>

<pre class="highlight"><code>
$form-&gt;setElementsBelongTo('foo');
$subForm-&gt;setElementsBelongT('bar');
$subForm-&gt;addElement('text', 'name')-&gt;name-&gt;setLabel('Name');
$form-&gt;addSubForm($subForm, 'sub');
</code></pre>

<p>Produces:</p>

<pre class="highlight"><code>
</code></pre>

<p>While I'd expect it to produce:</p>

<pre class="highlight"><code>
</code></pre>

<p>or</p>

<pre class="highlight"><code>
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Amr Mostafa (alienbrain) on 2008-06-20T12:26:01.000+0000</p> 
        <div class="body">
            <p>Attaching an updated patch for Zend_Form's elementsBelongTo.</p>

<p>This patch (Zend_Form-Improved_ElementsBelongTo.patch) includes <em>unit tests</em>, and integrates with <em>isValid, isValidPartial, getMessages, getErrors</em> and <em>getValues</em>. It also modifies <em>FormElements</em> decorator to produce the markup honoring elementsBelongTo, a unit test was added for that as well.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2008-07-22T08:24:29.000+0000</p> 
        <div class="body">
            <p>Patch reviewed and applied to trunk and 1.5/1.6 release branches.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Christian Albrecht (alab) on 2010-03-07T19:51:04.000+0000</p> 
        <div class="body">
            <p>Today i wondered who the smart guy was who wrote this _dissolveArrayValue() function.
And it's really interesting to read your patch because just now these clean methods you wrote
are corrupted again somehow.
Living Code :)
Maybe it's because the _dissolve function is so dreaded that it's hard to follow.</p>

        </div>
    </div>
    </div>

