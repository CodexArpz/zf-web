<h2>ZF-10987: Standard route should accept instance of Zend_Validate as a requirement</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2011-01-23T06:50:29.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2011-01-23T10:02:26.000+0000</dd>

    <dt>Status:</dt>
    <dd>Open</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Kim Blomqvist (kblomqvist)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Ben Scholzen (dasprid)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Controller_Router</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>It would be beneficial if <em>Zend_Controller_Router_Route</em> accepted <em>Zend_Validate</em> as a requirement.</p>

<pre class="highlight"><code>
$validate = new Zend_Validate_Db_RecordExists(
    array(
        'table' =&gt; 'account',
        'field' =&gt; 'name'
    )
);

$route = new Zend_Controller_Router_Route_Validate(
    ':accountname/:action/*',
    array(
        'module' =&gt; 'default',
        'controller' =&gt; 'account',
        'action' =&gt; 'index'
    ),
    array(
        'accountname' =&gt; $validate // string (for regex) or Zend_Validate
    )
);
</code></pre>

<p>In case of someone else would also be interested in to pass Zend_Validate as a requirement for their routes, I will contribute my extended Zend_Controller_Router_Route to support this.</p>

<pre class="highlight"><code>
&lt;?php
class Kblom_Controller_Router_Route_Validate
    extends Zend_Controller_Router_Route
{
    public function match($path, $partial = false)
    {
        $ppath = $path;

        if (!$partial) {
            $path = trim($path, $this-&gt;_urlDelimiter);
        }
        $path = explode($this-&gt;_urlDelimiter, $path);

        foreach ($this-&gt;_parts as $pos =&gt; $part) {
            if ($part instanceof Zend_Validate_Abstract) {
                if (!$part-&gt;isValid($path[$pos])) {
                    return false;
                }
                $this-&gt;_parts[$pos] = null;
            }
        }

        return parent::match($ppath, $partial);
    }
}
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Beno√Æt Durand (intiilapa) on 2011-01-23T09:34:46.000+0000</p> 
        <div class="body">
            <p>As Freeaqingme said, it will slow down application performance in general. And, I think that you can write a plugin controller to validate the route in the method preDispatch().</p>

<p>For your use case, I think that a bad design. You should validate your parameters in a service layout, in a mapper, or in your model.
Throw an exception for username not found. After, you can catch this exception in your action in order to switch in a Zend_Controller_Action_Exception with 404 code. You can inject your exception as previous exception in the constructor, because Zend_Exception emulate this feature for PHP 5.2 if you don't use PHP 5.3. And, you have a HTTP error 404.</p>

<p>With your design, you have an exception 'No route matched the request'. I think that your use case is really an invalid argument ...</p>

<p>So, I suggest to resolve the issue with status "Won't fix".</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Kim Blomqvist (kblomqvist) on 2011-01-23T10:02:24.000+0000</p> 
        <div class="body">
            <p>Well I agree that the example use case I made up is bad in general. Actually I came up with this validator idea when I need a reverse match regex requirement (which regex does not support).</p>

<p>In my opinion it would be logical that routes support validators, but however, if it does not fit in ZF I do not complain.</p>

        </div>
    </div>
    </div>

