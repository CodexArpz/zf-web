<h2>ZF-5881: Array notation &amp; view script decorator interoperation</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2009-02-25T03:30:36.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-02-25T05:43:14.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Josh Ribakoff (jshpro2)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Matthew Weier O'Phinney (matthew)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Form</li>
            <li>Zend_View</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>It would be nice if I did not have to explicitly call setElementsBelongTo() on subforms when using a viewscript decorator for rendering the parent form. Once I had my forms working I decided to make one of my forms use a viewscript decorator which broke it, since using the viewscript decorator entails disabling the formElements decorator and since the "default" array notation is handled in the formElements decorator, this seemed awkward to me.</p>

<p>In other words applying the viewScript decorator to a form should not disable array notation on it's children, I would think</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2009-02-25T05:42:58.000+0000</p> 
        <div class="body">
            <p>Currently, setElementsBelongTo() is automatically called as part of the FormElements decorator. It is not called before this as we then have a chicken/egg problem: if the sub forms are nested, the parent sub form needs to inform the child, and so on.</p>

<p>While it may be awkward, it's also the trade off you have for the flexibility of using ViewScript or your own custom decorators.</p>

        </div>
    </div>
    </div>

