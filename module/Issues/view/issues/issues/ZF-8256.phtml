<h2>ZF-8256: New way to fill in options</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2009-11-09T04:45:29.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2013-01-18T13:46:59.000+0000</dd>

    <dt>Status:</dt>
    <dd>Closed</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Rodrigo Novelo Primolan (primolan)
            </dd>

    <dt>Assignee:</dt>
    <dd>
        None
                    </dd>

    <dt>Tags:</dt>
    <dd><ul>    </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>I think that every parameters should be filled in as an array, considering that there are two or more parameters that are not required.</p>

<p>Most of time, the situation requires only one different parameter, and ends up being a problem filling everything (including default parameters) just to reach that specifically one.</p>

<pre class="highlight"><code>
Zend_Db_Table_Abstract-&gt;fetchAll($where = null, $order = null, $count = null, $offset = null) { ... }
</code></pre>

<p>I just want to change the ORDER parameter:</p>

<pre class="highlight"><code>
Zend_Db_Table_Abstract-&gt;fetchAll(null, $order) { ... }
</code></pre>

<p>By the new method:</p>

<pre class="highlight"><code>
Zend_Db_Table_Abstract-&gt;fetchAll(array('order' =&gt; 'id DESC')) { ... }
</code></pre>

<p>I hope see this improvement implemented in the future.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Rodrigo Novelo Primolan (primolan) on 2009-11-09T04:48:55.000+0000</p> 
        <div class="body">
            <p>Final example of hole function:</p>

<pre class="highlight"><code>
function Example(array $options = null) {
    $permittedOptions = array(
        'where' =&gt; null,
        'order' =&gt; null,
        'count' =&gt; null,
        'offset' =&gt; null
    );
    foreach ($options as $key =&gt; $val) {
        if (array_key_exists($key, $permittedOptions)) {
            $permittedOptions[$key] = $val;
        } else {
            throw new Exception('Invalid "' . $key . '" option.');
        }
    }
    return Zend_Db_Table_Abstract-&gt;fetchAll($permittedOptions['where'], $permittedOptions['order'], $permittedOptions['count'], $permittedOptions['offset']);
}
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Robin Skoglund (robinsk) on 2009-11-09T04:54:01.000+0000</p> 
        <div class="body">
            <p>I assume you mean this is something that should be implemented throughout the framework, so I set components to 'Unknown' to prevent unnecessary spam notifications to all contributors.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Nico Edtinger (nico) on 2009-11-09T04:54:47.000+0000</p> 
        <div class="body">
            <p>That's something, that should be solved in PHP and not ZF.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Nico Edtinger (nico) on 2009-11-09T04:57:06.000+0000</p> 
        <div class="body">
            <p>As you've given an example ... how do I know which parameters are allowed, if they are know hidden in the function body?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Rodrigo Novelo Primolan (primolan) on 2009-11-09T04:58:45.000+0000</p> 
        <div class="body">
            <p>You can specify them in function's description, as a lot of functions does.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Rodrigo Novelo Primolan (primolan) on 2009-11-09T05:08:31.000+0000</p> 
        <div class="body">
            <p>Yes Robin, you assumed it right. This should be implemented throughout the whole framework.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2009-11-09T08:21:29.000+0000</p> 
        <div class="body">
            <p>This would negotate actual behaviour.</p>

<p>Example:
You can give an array or an instance of Zend_Config (which behaves like an array) to Zend_Filter and Zend_Validate classes. A configuration can hold also other keys than the accepted.</p>

<p>By throwing an exception you force the user to have multiple configurations, one for each module, instead of one for the application. This is not userfriendly.</p>

<p>In my understanding a component should not throw an exception on unknown options, but simply ignore them.
But it has to throw an exception on missing options when there are no default values.</p>

<p>Also to note:
Several other components already support to give options as array.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Rodrigo Novelo Primolan (primolan) on 2009-11-09T08:40:30.000+0000</p> 
        <div class="body">
            <p>I didn't understand why you mentioned multiple configurations, one for each module.</p>

<p>All I'm saying is about how to input parameters, not how function works. It's not functional filling in a lot of parameters (that in most of time are default) just to change the last parameter.</p>

<p>That function above was just an example. And by the way, the permittedOptions' block I got from a ZF's function (don't remember now wich one). This block is supposed to filter parameters filled in. The excess could be threw in a catch or ignored.</p>

<p>The focus here is to reduce the work, allowing less configuration (in this case, data inputing), filling in what's really necessary.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Rodrigo Novelo Primolan (primolan) on 2009-11-11T08:46:18.000+0000</p> 
        <div class="body">
            <p>Hello ?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2009-11-11T12:23:40.000+0000</p> 
        <div class="body">
            <p>I mentioned multiple configurations because your change would force to have one configuration for each filter or validator.
They already support giving an array and have the by me described behaviour.</p>

<p>Normally you would have one configuration like this (only example):</p>

<pre class="highlight"><code>
$options = array(
    'AllowDNS' =&gt; true,
    'ValidateIDN' =&gt; true,
    'Length' =&gt; 10,
    'AllowUTF8' =&gt; false
}
</code></pre>

<p>Each validator would use the options which he understands and ignore all others.
This could also be true for other components.</p>

<p>@Robin:
When you want to have reply from all maintainers like me, then you should not erase the components.
Maintainers which are not affected because their components already support this, will probably erase their components to keep away unwanted replies. ;-)
What you described and gave as example would mean that you have to seperate these options for each component(filter in this case). This is what I called not a good behaviour.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Rodrigo Novelo Primolan (primolan) on 2009-11-11T15:15:56.000+0000</p> 
        <div class="body">
            <p>Thomas,</p>

<p>I understood and accepted your point of view. You are totally right about throwing an exception when function don't recognize a inserted option. That must not happen.</p>

<p>But not all functions accept array as parameter's input. Like I said, I think ZF should be revised to accept array's parameters when parameters expected are greater than 2 and are not required.</p>

<p>With Zend_Ldap for example, it's already fixed. Now we got Zend_Db_Table_Abstract-&gt;fetchAll's function.</p>

<p>We could make a list of functions that forces user to input data one-by-one.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2009-11-12T00:11:01.000+0000</p> 
        <div class="body">
            <p>To clearify this more closely...</p>

<p>Functions overall the framework should accept the following notations:</p>

<ul><li><p>afunction(parametera, parameterb, parameterc)</p>

<ul><li>this is needed for IDE's as they are actually not able to give array keys as options</li>
<li>when possible default parameters should be used</li>
</ul></li>
<li><p>bfunction(array(parametera =&gt; valuea, parameterb =&gt; valueb, parameterc =&gt; valuec))</p>

<ul><li>this allows to strip unneeded parameters from being given (default values)</li>
<li>and this allows to define the options very simple elsewhere</li>
</ul></li>
<li><p>cfunction(Zend_Config)</p>

<ul><li>Zend_Config is the frameworks way to provide/collect/give options</li>
<li>every function should also accept a instance of Zend_Config</li>
</ul></li>
</ul><p>Internally a Zend_Config instance would be downgraded into an array (by a single line within cfunction like Zend_Config-&gt;toArray()). Then cfunction has the same behaviour as bfunction when unknown options are ignored.</p>

<p>That are my 2 cents.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Rodrigo Novelo Primolan (primolan) on 2009-11-12T01:18:00.000+0000</p> 
        <div class="body">
            <p>Almost there!</p>

<p>I believe that not every function should accept a instance of Zend_Config.</p>

<p>In case of "afunction", parameters should be required and should be given ony-by-one. In another case, user can give options as an array or an instance of Zend_Config.</p>

<p>Resuming, there are 2 ways to input parameters:</p>

<p>a) required parameters -&gt; explicit -&gt; one-by-one -&gt; function(param1, param2, param3)
b) optional parameters -&gt; implicit -&gt; array or Zend_Config -&gt; function(array('param2'=&gt;'value2'))</p>

<p>By the way, i checked the meaning of "That are my 2 cents" .. It's a 1940's slang! :D</p>

<p>Well ... That are my 2 cents too!</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Rodrigo Novelo Primolan (primolan) on 2009-11-24T05:24:06.000+0000</p> 
        <div class="body">
            <p>Is this discussion over?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2010-03-21T10:42:00.000+0000</p> 
        <div class="body">
            <p>The problem is, that you did not attach a related component.</p>

<p>Note that (almost) all components, where I am the component maintainer, ALREADY support the 3 notations which I described above.</p>

<p>When you want to have progress on this issue I would recommend that you attach the components which you want to have changed/discussed about.</p>

<p>Otherwise I would argue that this issue has to be closed as it's not clear what should be changed.</p>

        </div>
    </div>
    </div>

