<h2>ZF-8725: Zend_Json_Server_Error does not allow application-defined error codes</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2010-01-06T08:25:12.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-01-20T11:58:05.000+0000</dd>

    <dt>Status:</dt>
    <dd>Open</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Matthew Weier O'Phinney (matthew)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Json_Server</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>According to the JSON-RPC <a href="http://groups.google.com/group/json-rpc/web/json-rpc-1-2-proposal">http://groups.google.com/group/json-rpc/â€¦</a> , error codes -32768 - -32000 are reserved for JSON-RPC server errors, but all other codes are valid for application-defined use. Currently Zend_Json_Server_Error only allows for server errors to be reported, converting all application errors to -32000.</p>

<p>This is quite obvious in Zend_Server_Json-&gt;fault() where the default code is '404', but is instantly converted to -32000 by Zend_Server_Json_Error.</p>

<p>It seems like the resolution should be to drop the current allowedCodes strategy, and simply check that the error code is an integer.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by John Kleijn (448191) on 2012-01-20T11:58:05.000+0000</p> 
        <div class="body">
            <p>I reported the same issue (<a href="http://framework.zend.com/issues/browse/ZF-11991">http://framework.zend.com/issues/browse/ZF-11991</a>), but finding this issue dated Janurari 2010 does not make me very hopeful this will be fixed.</p>

<p>So I've decided we will program around it and not use fault(). It is however very dissapointing that a component so simple, an implementation of a spec so simple, can be so royally screwed up and then ignored.</p>

        </div>
    </div>
    </div>

