<h2>ZF-623: Query terms for Keyword type fields should not be tokenized</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2006-12-06T09:53:52.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-05-05T03:21:29.000+0000</dd>

    <dt>Status:</dt>
    <dd>Closed</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Adam Lundrigan (adamlundrigan)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Search_Lucene</li>
            <li>zf-caretaker-adamlundrigan</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-2982">ZF-2982</a></li>
            <li><a href="/issues/browse/ZF-2982">ZF-2982</a></li>
            <li><a href="/issues/browse/ZF-1216">ZF-1216</a></li>
            <li><a href="/issues/browse/ZF-6636">ZF-6636</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>When you trying to find documents via their id or path or any other KEYWORD TYPE field that includes other characters than [A-Za-z0-9] you cannot get any results. Example:</p>

<p>document XY with path=/some/file.txt</p>

<p>query:     path:"/some/file.txt"   -&gt; no results</p>

<p>document XY with path=abc</p>

<p>query:     path:"abc"   -&gt; ok
query:     path:abc   -&gt; ok too</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Lukas Zapletal (lzap) on 2006-12-06T10:03:10.000+0000</p> 
        <div class="body">
            <p>From the mailing list:</p>

<p>It seems the query is parsed and tokenized always. It should not parse and 
tokenize those fields that are marked as KEYWORDs. Is it possible to 
implement this? If not there could be method like findRaw -- finds documents 
but doesn`t analyze and tokenize the query.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2006-12-09T16:47:55.000+0000</p> 
        <div class="body">
            <p>Assigning to Alexander.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Alexander Veremyev (alexander) on 2006-12-13T18:36:26.000+0000</p> 
        <div class="body">
            <p>Query parser always uses default analyzer to tokenize or normalize terms and phrases.</p>

<p>Query parser is index independent, so it can't "know", which field should be tokenized.</p>

<p>Moreover, index doesn't store information, which field was tokenized and which wasn't.</p>

<p>Thus keywords containing non-alphanumeric characters can only be added to a query through API:</p>

<pre class="highlight"><code> 
$parsedQuery = Zend_Search_Lucene_Search_QueryParser::parse($query);

$query = new Zend_Search_Lucene_Search_Query_Boolean();
$query-&gt;addSubquery($parsedQuery, true /* required */);

$keywordTerm = new Zend_Search_Lucene_Index_Term('/my/cool/path', 'path');
$keywordQuery = new Zend_Search_Lucene_Search_Query_Term($keywordTerm);

$query-&gt;addSubquery($keywordQuery, true /* required */);
</code></pre>

<p>It's also possible to extend query language to give possibility to signal which field is a keyword field.</p>

<p>Ex. "bla/bla/bla" is tokenized, but 'bla/bla/bla' isn't.
It looks reasonable from PHP point of view :), but I am not sure, that it's a common practice for search engines...</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Adam Lundrigan (adamlundrigan) on 2012-05-05T03:21:29.000+0000</p> 
        <div class="body">
            <p>This issue is very, very old and unlikely to be implemented in ZFv1.</p>

        </div>
    </div>
    </div>

