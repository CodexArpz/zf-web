<h2>ZF-12519: CLONE - Support for OpenId extension: Attribute Exchange</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>New Feature</dd>

    <dt>Created:</dt>
    <dd>2013-02-04T19:11:57.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2013-02-05T08:29:05.000+0000</dd>

    <dt>Status:</dt>
    <dd>Closed</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
        None
                    </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_OpenId</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-7328">ZF-7328</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Due to the increased popularity and the support of many popular providers, many sites are now looking to add OpenId support.  While currently it is possible to authenticate with google (with minor modifications) data can only be exchanged using Attribute Exchange.  This protocol is defined in [<a href="http://openid.net/specs/openid-attribute-exchange-1_0.html">http://openid.net/specs/…</a>].  Google uses this protocol to exchange data such as gmail address, name, country and language.  I have created a <em>very</em> basic implementation that will allow consumers to pull data from google.  I have not implemented the provider side of the protocol and completely left out the capability to store data back on the providers servers.  This may be used as a starting point and will immediately allow consumers to query google.</p>

<pre class="highlight"><code>
&lt;?php
/**
 * Extension class for Zend_OpenId.  Provides attribute exchange protocol.
 * 
 * @author Chris Bisnett cbisnett@gmail.com
 * @date 19July2009
 */
class AttributeExchange extends Zend_OpenId_Extension
{
    /**
     * Namespace URI for attribute exchange version 1.0
     */
    const NS_URL = '<a href="http://openid.net/srv/ax/1.0">http://openid.net/srv/ax/1.0</a>';
    
    /**
     * Defined attributes listed at <a href="http://www.axschema.org/types">http://www.axschema.org/types</a> as of 19July2009.
     */
    private $_definedAttributes = array(
        // Name types
        'userName' =&gt; '<a href="http://axschema.org/namePerson/friendly">http://axschema.org/namePerson/friendly</a>',
        'fullName' =&gt; '<a href="http://axschema.org/namePerson">http://axschema.org/namePerson</a>',
        'namePrefix' =&gt; '<a href="http://axschema.org/namePerson/prefix">http://axschema.org/namePerson/prefix</a>',
        'firstName' =&gt; '<a href="http://axschema.org/namePerson/first">http://axschema.org/namePerson/first</a>',
        'lastName' =&gt; '<a href="http://axschema.org/namePerson/last">http://axschema.org/namePerson/last</a>',
        'middleName' =&gt; '<a href="http://axschema.org/namePerson/middle">http://axschema.org/namePerson/middle</a>',
        'nameSuffix' =&gt; '<a href="http://axschema.org/namePerson/suffix">http://axschema.org/namePerson/suffix</a>',
        
        // Work types
        'company' =&gt; '<a href="http://axschema.org/company/name">http://axschema.org/company/name</a>',
        'jobTitle' =&gt; '<a href="http://axschema.org/company/title">http://axschema.org/company/title</a>',
        
        // Date of birth
        'birthDate' =&gt; '<a href="http://axschema.org/birthDate">http://axschema.org/birthDate</a>',
        'birthYear' =&gt; '<a href="http://axschema.org/birthDate/birthYear">http://axschema.org/birthDate/birthYear</a>',
        'birthMonth' =&gt; '<a href="http://axschema.org/birthDate/birthMonth">http://axschema.org/birthDate/birthMonth</a>',
        'birthDay' =&gt; '<a href="http://axschema.org/birthDate/birthday">http://axschema.org/birthDate/birthday</a>',
        
        // Telephone
        'phoneDefault' =&gt; '<a href="http://axschema.org/contact/phone/default">http://axschema.org/contact/phone/default</a>',
        'phoneHome' =&gt; '<a href="http://axschema.org/contact/phone/home">http://axschema.org/contact/phone/home</a>',
        'phoneBusiness' =&gt; '<a href="http://axschema.org/contact/phone/business">http://axschema.org/contact/phone/business</a>',
        'phoneCell' =&gt; '<a href="http://axschema.org/contact/phone/cell">http://axschema.org/contact/phone/cell</a>',
        'phoneFax' =&gt; '<a href="http://axschema.org/contact/phone/fax">http://axschema.org/contact/phone/fax</a>',
        
        // Address
        'address' =&gt; '<a href="http://axschema.org/contact/postalAddress/home">http://axschema.org/contact/postalAddress/home</a>',
        'address2' =&gt; '<a href="http://axschema.org/contact/postalAddressAdditional/home">http://axschema.org/contact/…</a>',
        'city' =&gt; '<a href="http://axschema.org/contact/city/home">http://axschema.org/contact/city/home</a>',
        'state' =&gt; '<a href="http://axschema.org/contact/state/home">http://axschema.org/contact/state/home</a>',
        'country' =&gt; '<a href="http://axschema.org/contact/country/home">http://axschema.org/contact/country/home</a>',
        'postalCode' =&gt; '<a href="http://axschema.org/contact/postalCode/home">http://axschema.org/contact/postalCode/home</a>',
        
        // Email
        'email' =&gt; '<a href="http://axschema.org/contact/email">http://axschema.org/contact/email</a>',
        
        // Instant messaging
        'aim' =&gt; '<a href="http://axschema.org/contact/IM/AIM">http://axschema.org/contact/IM/AIM</a>',
        'icq' =&gt; '<a href="http://axschema.org/contact/IM/ICQ">http://axschema.org/contact/IM/ICQ</a>',
        'msn' =&gt; '<a href="http://axschema.org/contact/IM/MSN">http://axschema.org/contact/IM/MSN</a>',
        'yahoo' =&gt; '<a href="http://axschema.org/contact/IM/Yahoo">http://axschema.org/contact/IM/Yahoo</a>',
        'jabber' =&gt; '<a href="http://axschema.org/contact/IM/Jabber">http://axschema.org/contact/IM/Jabber</a>',
        'skype' =&gt; '<a href="http://axschema.org/contact/IM/Skype">http://axschema.org/contact/IM/Skype</a>',
        
        // Web sites
        'webPage' =&gt; '<a href="http://axschema.org/contact/web/default">http://axschema.org/contact/web/default</a>',
        'blog' =&gt; '<a href="http://axschema.org/contact/web/blog">http://axschema.org/contact/web/blog</a>',
        'linkedIn' =&gt; '<a href="http://axschema.org/contact/web/Linkedin">http://axschema.org/contact/web/Linkedin</a>',
        'amazon' =&gt; '<a href="http://axschema.org/contact/web/Amazon">http://axschema.org/contact/web/Amazon</a>',
        'flickr' =&gt; '<a href="http://axschema.org/contact/web/Flickr">http://axschema.org/contact/web/Flickr</a>',
        'delicious' =&gt; '<a href="http://axschema.org/contact/web/Delicious">http://axschema.org/contact/web/Delicious</a>',
        
        // Audio/Video greetings
        'spokenName' =&gt; '<a href="http://axschema.org/media/spokenname">http://axschema.org/media/spokenname</a>',
        'audioGreeting' =&gt; '<a href="http://axschema.org/media/greeting/audio">http://axschema.org/media/greeting/audio</a>',
        'videoGreeting' =&gt; '<a href="http://axschema.org/media/greeting/video">http://axschema.org/media/greeting/video</a>',
        
        // Images
        'defaultImage' =&gt; '<a href="http://axschema.org/media/image/default">http://axschema.org/media/image/default</a>',
        'squareImage' =&gt; '<a href="http://axschema.org/media/image/aspect11">http://axschema.org/media/image/aspect11</a>',
        '43Image' =&gt; '<a href="http://axschema.org/media/image/aspect43">http://axschema.org/media/image/aspect43</a>',
        '34Image' =&gt; '<a href="http://axschema.org/media/image/aspect34">http://axschema.org/media/image/aspect34</a>',
        'favIcon' =&gt; '<a href="http://axschema.org/media/image/favicon">http://axschema.org/media/image/favicon</a>',
        
        // Misc details
        'gender' =&gt; '<a href="http://axschema.org/person/gender">http://axschema.org/person/gender</a>',
        'language' =&gt; '<a href="http://axschema.org/pref/language">http://axschema.org/pref/language</a>',
        'timezone' =&gt; '<a href="http://axschema.org/pref/timezone">http://axschema.org/pref/timezone</a>',
        'biography' =&gt; '<a href="http://axschema.org/media/biography">http://axschema.org/media/biography</a>'
    );
    
    /**
     * Name/Value pairs of requested attributes and a boolean specifying if the attribute is required.
     */
    private $_attributes = array();
    
    /**
     * Holds the attribute and the returned value.
     */
    private $_properties = array();
    
    public function __construct(array $attribs)
    {
        $this-&gt;_attributes = $attribs;
    }
    
    /**
     * Gets the property values returned by the provider.
     * 
     * @return array
     */
    public function getProperties()
    {
        return $this-&gt;_properties;
    }
    
    private function splitParams($params)
    {
        $final = array();
        
        // Loop the parameters
        foreach ($params as $identifier =&gt; $value)
        {
            // Split the identifier at the boundries
            $levels = explode('_', $identifier);
            
            // Get the last value as the key
            $key = array_pop($levels);
            
            // Loop the levels, creating any that don't exist
            $currentlevel = &amp;$final;
            foreach ($levels as $level)
            {
                // Check if the level is defined
                if (!isset($currentlevel[$level]))
                    // Create the level
                    $currentlevel[$level] = array();
                else
                {
                    // Change any found value to the first key of an array
                    if (!is_array($currentlevel[$level]))
                        $currentlevel[$level] = array($currentlevel[$level]);
                }
                
                // Move down to the next level
                $currentlevel = &amp;$currentlevel[$level];
            }
            
            // Set the value
            $currentlevel[$key] = $value;
        }
        
        return $final;
    }
    
    /**
     * Adds an attribute type and URI to the list of defined attributes.  This
     * can be used to add expiremental types for testing.
     * 
     * @param array &amp;$attribs New attribute/URI pairs
     * @return bool
     */
    public function addType($attribs)
    {
        // Verify the attributes is an array
        if (!is_array($attribs))
            return false;
        
        // Merge the new types into the defined attributes
        $this-&gt;_definedAttributes = array_merge($this-&gt;_definedAttributes, $attribs);
        
        return true;
    }
    
    /**
     * Generates a request to be sent to the provider requesting the
     * specified attributes.
     *
     * @param array &amp;$params request's var/val pairs
     * @return bool
     */
    public function prepareRequest(&amp;$params)
    {
        // Don't add attributes if there are none
        if (!is_array($this-&gt;_attributes) || count($this-&gt;_attributes) &lt; 1)
            return;
        
        // Setup the lists
        $requiredAttributes = '';
        $availableAttributes = '';
                
        // Set the name space
        $params['openid.ns.ax'] = AttributeExchange::NS_URL;
        
        // Set the mode
        $params['openid.ax.mode'] = 'fetch_request';
        
        // Loop the attributes only adding those that are valid
        foreach ($this-&gt;_attributes as $attr =&gt; $isRequired)
        {
            // Check if the attribute is defined
            if (!isset($this-&gt;_definedAttributes[$attr]))
                continue;
            
            // Add the attribute to a list
            if ($isRequired)
                $requiredAttributes .= (empty($requiredAttributes)) ? $attr : ',' . $attr;
            else
                $availableAttributes .= (empty($availableAttributes)) ? $attr : ',' . $attr;
            
            // Add the type
            $params['openid.ax.type.' . $attr] = $this-&gt;_definedAttributes[$attr];
        }
        
        // Add the required
        if (!empty($requiredAttributes))
            $params['openid.ax.required'] = $requiredAttributes;
        
        // Add the requested
        if (!empty($availableAttributes))
            $params['openid.ax.if_available'] = $availableAttributes;
        
        return true;
    }

    /**
     * Parses the request from the consumer to determine what attribute values
     * to return to the consumer.
     *
     * @param array $params request's var/val pairs
     * @return bool
     */
    public function parseRequest($params)
    {
        return true;
    }

    /**
     * Generates a response to the consumer's request that contains the
     * requested attributes.
     *
     * @param array &amp;$params response's var/val pairs
     * @return bool
     */
    public function prepareResponse(&amp;$params)
    {
        return true;
    }

    /**
     * Gets property values from the response returned by the provider
     *
     * @param array $params response's var/val pairs
     * @return bool
     */
    public function parseResponse($params)
    {
        $params = $this-&gt;splitParams($params);
        $ax = null;
        
        // Get the data name space
        if (isset($params['openid']['ns']['ax']) &amp;&amp; $params['openid']['ns']['ax'] == AttributeExchange::NS_URL)
            $ax = $params['openid']['ax'];
        else
        {
            // Loop the extensions looking for the namespace url
            foreach ($params['openid']['ns'] as $namespace =&gt; $uri)
            {
                // Check if the uri is attribute exchange
                if ($uri == AttributeExchange::NS_URL)
                {
                    $ax = $params['openid'][$namespace];
                    break;
                }
            }
        }
        
        // Check if the data was found
        if ($ax == null)
            return false;
        
        // Verify the mode is fetch_response
        if (isset($ax['mode']) &amp;&amp; $ax['mode'] != 'fetch_response')
            return false;
        
        // Get the attributes
        foreach ($ax['value'] as $attr =&gt; $value)
        {
            $this-&gt;_properties[$attr] = $value;
        }
        
        return true;
    }
}
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>
    <p class="comments">No comments to display</p>
    
</div>

