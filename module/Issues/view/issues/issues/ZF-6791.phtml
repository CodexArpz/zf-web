<h2>ZF-6791: big logical mistake, resource path gets replaced even if they are already existent</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2009-05-24T21:26:33.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-09-17T10:39:16.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Alex. Hannel (cbq)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Matthew Weier O'Phinney (matthew)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Loader</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <pre class="highlight"><code>
    public function addResourceType($type, $path, $namespace = null)
    {
        $type = strtolower($type);
        if (!isset($this-&gt;_resourceTypes[$type])) {
            if (null === $namespace) {
                require_once 'Zend/Loader/Exception.php';
                throw new Zend_Loader_Exception('Initial definition of a resource type must include a namespace');
            }
            $namespaceTopLevel = $this-&gt;getNamespace();
            $namespace = ucfirst(trim($namespace, '_'));
            $this-&gt;_resourceTypes[$type] = array(
                'namespace' =&gt; empty($namespaceTopLevel) ? $namespace : $namespaceTopLevel . '_' . $namespace,
            );            
        }

            if (!is_string($path)) {
                require_once 'Zend/Loader/Exception.php';
                throw new Zend_Loader_Exception('Invalid path specification provided; must be string');
            }
            $this-&gt;_resourceTypes[$type]['path'] = $this-&gt;getBasePath() . '/' . $path;            

        $component = $this-&gt;_resourceTypes[$type]['namespace'];
        $this-&gt;_components[$component] = $this-&gt;_resourceTypes[$type]['path'];
        return $this;
    }
</code></pre>

<p>should be changed to</p>

<pre class="highlight"><code>
    public function addResourceType($type, $path, $namespace = null)
    {
        $type = strtolower($type);
        if (!isset($this-&gt;_resourceTypes[$type])) {
            if (null === $namespace) {
                require_once 'Zend/Loader/Exception.php';
                throw new Zend_Loader_Exception('Initial definition of a resource type must include a namespace');
            }

            if (!is_string($path)) {
                require_once 'Zend/Loader/Exception.php';
                throw new Zend_Loader_Exception('Invalid path specification provided; must be string');
            }
            
            $namespaceTopLevel = $this-&gt;getNamespace();
            $namespace = ucfirst(trim($namespace, '_'));
            $this-&gt;_resourceTypes[$type] = array(
                'namespace' =&gt; empty($namespaceTopLevel) ? $namespace : $namespaceTopLevel . '_' . $namespace,
            );
            
            $this-&gt;_resourceTypes[$type]['path'] = $this-&gt;getBasePath() . '/' . $path;            
        }

        $component = $this-&gt;_resourceTypes[$type]['namespace'];
        $this-&gt;_components[$component] = $this-&gt;_resourceTypes[$type]['path'];
        return $this;
    }
</code></pre>

<p>because this function is supposed to add a resource if it isn't existent.</p>

<p>the problem with it is, it checks the param. path later as it should and even more critical it overwrites the resource PATH even if the resource is already is existent!</p>

<p>best regards</p>

<p>enalog
Alex. Hannel</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Brenton Alker (brenton) on 2009-09-17T09:04:24.000+0000</p> 
        <div class="body">
            <p>The requested behaviour seems to be in direct opposition to expected (and current) behaviour as documented in the test case testAutoloaderShouldAllowAddingResettingResourcePaths(Zend_Loader_Autoloader_ResourceTest).</p>

<p>The test case asserts that "re-adding" a resource type with a different path should overwrite the existing path set in the autoloader, the requested behaviour would prevent that use-case.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2009-09-17T09:15:06.000+0000</p> 
        <div class="body">
            <p>I need the following before I can move forward on this:
* Reproduce case that displays the issue
* Expected result (I'm assuming "lack of an error condition")
* Actual result (the error condition that occurs)</p>

<p>As I'm not sure what error occurs, nor what conditions trigger it, I can't write a unit test for it at this point. Please update with the above information, and I'll start work on it.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2009-09-17T09:21:38.000+0000</p> 
        <div class="body">
            <p>Brenton -- You evidently posted sometime after I'd loaded the page originally, so I missed your bit about the test case in question.</p>

<p>Can you detail <em>why</em> you want to change the behavior? What benefit does this have?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Brenton Alker (brenton) on 2009-09-17T09:26:00.000+0000</p> 
        <div class="body">
            <p>Matthew,</p>

<p>I was saying that I don't believe this is an issue.</p>

<p>Using the code suggested in the initial report causes a failure in the current test suite (testAutoloaderShouldAllowAddingResettingResourcePaths). Which indicates the behaviour that the initial report is trying to "fix" is expected, and thus this is not a bug.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2009-09-17T10:39:01.000+0000</p> 
        <div class="body">
            <p>Aha! Excellent -- I'll close as "not an issue" then. Thanks for the clarifications!</p>

        </div>
    </div>
    </div>

