<h2>ZF-410: Zend::loadClass, Zend::loadInterface - Multiple loads with one call</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2006-10-01T23:36:36.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2008-12-19T13:24:56.000+0000</dd>

    <dt>Status:</dt>
    <dd>Closed</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Gavin (gavin)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Loader</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-329">ZF-329</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>In most cases we have to load more then one class at a time.
For example when we want to use Zend_Config_Array, we have to call:</p>

<pre class="highlight"><code>
Zend::loadClass('Zend_Config');
Zend::loadClass('Zend_Config_Array');
$config = Zend_Config(Zend_Config_Array::load('config.php', 'production'));
</code></pre>

<p>The first idea is to make all main clases guess by themselfs what children
classes they have to call, but this is not right in some cases, so my idea is
to use recursion in Zend::loadClass and Zend::loadInterface</p>

<p>Here's my improvement for loadClass:</p>

<pre class="highlight"><code>
static public function loadClass($class, $dirs = null)
{
    if (is_array($class)) {
        foreach ($class as $class) {
        call_user_func(array(__CLASS__, __METHOD__), $class, $dirs);
        }
       return;
    }

    if (false !== strpos($class, ',')) {
        $class = explode(',', $class);
        call_user_func(array(__CLASS__, __METHOD__), $class, $dirs);
    }
</code></pre>

<p>And the same for loadInterface</p>

<pre class="highlight"><code>
static public function loadInterface($interface, $dirs = null)
{
    if (is_array($interface)) {
        foreach ($interface as $interface) {
        call_user_func(array(__CLASS__, __METHOD__), $interface, $dirs);
        }
       return;
    }

    if (false !== strpos($interface, ',')) {
        $interface = explode(',', $interface);
        call_user_func(array(__CLASS__, __METHOD__), $interface, $dirs);
    }
</code></pre>

<p>So now in project we can call loadClass like this:</p>

<pre class="highlight"><code>
Zend::loadClass('Zend_Config,Zend_Config_Array');
// Or like this:
// Zend::loadClass(array('Zend_Config','Zend_Config_Array'));
$config = Zend_Config(Zend_Config_Array::load('config.php', 'production'));
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Gavin (gavin) on 2006-10-02T01:09:59.000+0000</p> 
        <div class="body">
            <p>If the last section in the draft version of the ZF Coding Standard is followed, then a simple require_once for Zend_Config_Ini would suffice, with the current version of loadClass().  See <a href="http://framework.zend.com/wiki/x/PQ">http://framework.zend.com/wiki/x/PQ</a></p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Gavin (gavin) on 2006-10-02T01:13:54.000+0000</p> 
        <div class="body">
            <p>Lets keep alternative solutions all grouped under the same issue -i.e. addressing loadClass().</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Aleksey V. Zapparov (ixti) on 2006-10-02T01:56:11.000+0000</p> 
        <div class="body">
            <p>Ok. I've read <a href="http://framework.zend.com/wiki/x/PQ">http://framework.zend.com/wiki/x/PQ</a>
But don't clearly understood how this connects with my topic.
As I've read in ZF-329 loadClass will not be deprecated, so my
version of "multi-call" imho is still actual :)
Anyway, i'll join ZF-329 discussion.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Gavin (gavin) on 2006-10-02T02:31:31.000+0000</p> 
        <div class="body">
            <p>If Zend_Config_Array conforms to the draft, proposed Coding Standards, then:</p>

<p>"If a component uses another component, then the using component is responsible for loading the other component. If the use is conditional, then the loading should also be conditional."</p>

<p>Thus, if you want to use Zend_Config_Array, simply use:
{{require 'Zend/Config/Array.php';}}</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Aleksey V. Zapparov (ixti) on 2006-10-02T03:01:55.000+0000</p> 
        <div class="body">
            <p>Maybe you are right, but for me</p>

<pre class="highlight"><code>
Zend::LoadClass{'Zend_Config,Zend_Config_Array');
</code></pre>

<p>seems much naturally then:</p>

<pre class="highlight"><code>
Zend::loadClass('Zend_Config');
require_once 'Zend/Config/Array.php';
</code></pre>

<p>In this case even</p>

<pre class="highlight"><code>
require_once 'Zend.php';
require_once 'Zend/Config.php';
require_once 'Zend/Config/Array.php';
</code></pre>

<p>will be more naturally ,then mixing Zend::loadClass() and require_once. And reason I explained in ZF-329</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Gavin (gavin) on 2006-10-02T11:01:28.000+0000</p> 
        <div class="body">
            <p>{{Zend/Config/Array.php}} already {{require_once}}'s {{Zend/Config.php}}, so you don't need {{Zend::loadClass('Zend_Config');}}.</p>

<p>The entire ZF library does not use loadInterface(), and loadClass() is only used twice in two factory methods.</p>

<p>I think the ZF code provides a good example of when and how to use {{require_once}} and loadClass().</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Aleksey V. Zapparov (ixti) on 2006-10-03T03:37:06.000+0000</p> 
        <div class="body">
            <p>{quote}Zend/Config/Array.php already require_once's Zend/Config.php, so you don't need Zend::loadClass('Zend_Config');.{quote}</p>

<p>Neither <em>Zend_Config_Array doesn't require_once's in Zend_Config</em>
nor <em>Zend_Config doesn't require_once's Zend_Config_Array</em> (at least in 0.1.5 version)
So here an example: <a href="http://framework.zend.com/manual/en/zend.config.html">http://framework.zend.com/manual/en/â€¦</a></p>

<p>And that was what I'm talking about. Zend::loadClass has not to be used inside of ZF library,
but it has to be available for developers to use it outside... IMHO :)</p>

<p>Anyway, I guess, accroding to rules, my opinion means nothing :)
I just wanted to improve loadClass, but if core team thinks that it has to be deprecated,
then let it be.</p>

<p>PS Anyway I can copy-paste it from version to version for my purposes...</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Gavin (gavin) on 2006-10-03T10:50:59.000+0000</p> 
        <div class="body">
            <p>Development discussions in JIRA issues and the mail lists normally refer only to the SVN head version of ZF, not past releases.</p>

<p>$ svn update</p>

<p>$ grep -n require Config/Array.php
26:require_once 'Zend/Config.php';</p>

<p>$ grep -n require Config/Ini.php
26:require_once 'Zend/Config.php';</p>

<p>The example in the manual is wrong.  The first require of Config.php is not needed.</p>

<p>Also loadClass() is used in the ZF, in a couple of factory methods, as I mentioned earlier.</p>

<p>{quote}I just wanted to improve {{loadClass()}}, but if core team thinks that it has to be deprecated,
then let it be.{quote}</p>

<p>I'm confused.  Nobody has said anything about deprecating loadClass().  In fact, I have been presenting reasons why it must be kept.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Aleksey V. Zapparov (ixti) on 2006-10-04T00:03:34.000+0000</p> 
        <div class="body">
            <p>Sorry. Maybe I was inattentive.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-12-19T13:24:56.000+0000</p> 
        <div class="body">
            <p>Bookkeeping. Closing old issues and assigning them to the person who ultimately resolved the issue.</p>

        </div>
    </div>
    </div>

