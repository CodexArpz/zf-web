<h2>ZF-11467: Zend_Tool_Project_Provider_Action</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>New Feature</dd>

    <dt>Created:</dt>
    <dd>2011-06-10T09:22:03.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2011-06-13T16:53:06.000+0000</dd>

    <dt>Status:</dt>
    <dd>Open</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Ralph Schindler (ralph)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Tool</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Currently {{Zend_Tool_Project_Provider_Action}} class can be used only to create empty action methods.</p>

<p>I think it would be a good idea to add {{$body}} parameter co {{createResource()}}:</p>

<pre class="highlight"><code>
public static function createResource(
    Zend_Tool_Project_Profile $profile,
    $actionName,
    $controllerName,
    $moduleName = null,
    body = '//action body'
)
{
    if (!is_string($actionName)) {
        throw new Zend_Tool_Project_Provider_Exception('Zend_Tool_Project_Provider_Action::createResource() expects \"actionName\" is the name of a action resource to create.');
    }

    if (!is_string($controllerName)) {
        throw new Zend_Tool_Project_Provider_Exception('Zend_Tool_Project_Provider_Action::createResource() expects \"controllerName\" is the name of a controller resource to create.');
    }

    $controllerFile = self::_getControllerFileResource($profile, $controllerName, $moduleName);

    $actionMethod = $controllerFile-&gt;createResource('ActionMethod', array('actionName' =&gt; $actionName, 'actionBody' =&gt; $body));

    return $actionMethod;
}
</code></pre>

<p>Thus we could use {{createResource()}} to generate 
arbitrary actions (e.g. CRUD: {{updateAction(), createAction(), newAction()}}, etc.)</p>

<p>We have to process the parameter {{$body}}:</p>

<pre class="highlight"><code>
$actionMethod = $controllerFile-&gt;createResource('ActionMethod', array('actionName' =&gt; $actionName, 'actionBody' =&gt; $body));
</code></pre>

<p>inside {{Zend_Tool_Project_Context_Zf_ActionMethod}} class (maybe in the {{init()}} method?)</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by WÅ‚odzimierz Gajda (gajdaw) on 2011-06-10T10:02:21.000+0000</p> 
        <div class="body">
            <p>The goal is to call static creators like this:</p>

<h1>line 146 of Zend_Tool_Project_Provider_Controller</h1>

<p>$indexActionResource = Zend_Tool_Project_Provider_Action::createResource($this-&gt;_loadedProfile, 'index', $name, $module, '//That\'s it!');
$indexActionViewResource = Zend_Tool_Project_Provider_View::createResource($this-&gt;_loadedProfile, 'index', $name, $module, '//Yeah!');</p>

<p>It will make crud generators and admin generators much easier.</p>

<p>The parameters '//That\'s it!' '//Yeah!' are the action body and the view content.</p>

<p>Changes:</p>

<p>1) Zend_Tool_Project_Provider_Action
public static function createResource(Zend_Tool_Project_Profile $profile, $actionName, $controllerName, $moduleName = null, $actionBody = '        // a new body')
$actionMethod = $controllerFile-&gt;createResource('ActionMethod', array('actionName' =&gt; $actionName, 'actionBody' =&gt; $actionBody));</p>

<p>2) Zend_Tool_Project_Provider_View
public static function createResource(Zend_Tool_Project_Profile $profile, $actionName, $controllerName, $moduleName = null, $contents = 'This is a view file...')
$newViewScriptFile = $viewControllerScriptsDirectory-&gt;createResource('ViewScriptFile', array('forActionName' =&gt; $actionName, 'contents' =&gt; $contents));</p>

<p>3) Zend_Tool_Project_Context_Zf_ActionMethod</p>

<p>protected $_actionBody = '        // action body';</p>

<p>public function init()
$this-&gt;_actionBody = $this-&gt;_resource-&gt;getAttribute('actionBody');</p>

<p>public function create()
if (self::createActionMethod($this-&gt;_controllerPath, $this-&gt;_actionName, $this-&gt;_actionBody) === false) {</p>

<p>public static function createActionMethod($controllerPath, $actionName, $actionBody)
{
    $controllerCodeGenFile-&gt;getClass()-&gt;setMethod(array(
        'name' =&gt; $actionName . 'Action',
        'body' =&gt; $actionBody
        ));</p>

<p>4) Zend_Tool_Project_Context_Zf_ViewScriptFile</p>

<p>protected $_contents = null;</p>

<p>public function init()
{
    if ($this-&gt;_resource-&gt;getAttribute('contents')) {
        $this-&gt;_contents = $this-&gt;_resource-&gt;getAttribute('contents');
    }</p>

<p>public function getContents()
{</p>

<pre><code>if ($this-&gt;_contents) {
    return $this-&gt;_contents;
}
</code></pre>

        </div>
    </div>
    </div>

