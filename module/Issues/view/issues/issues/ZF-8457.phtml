<h2>ZF-8457: Improving scalability of Zend_XmlRpc by replacing DOMDocument with plain text templates</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2009-12-03T09:50:50.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-11-20T21:37:52.000+0000</dd>

    <dt>Status:</dt>
    <dd>Reopened</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Andreas Baumgart (polycaster)
            </dd>

    <dt>Assignee:</dt>
    <dd>
        None
                    </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_XmlRpc_Client</li>
            <li>Zend_XmlRpc_Server</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-9504">ZF-9504</a></li>
            <li><a href="/issues/browse/ZF-8869">ZF-8869</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
        <li><a href="/issues/secure/attachment/12450/domdoc-vs-writer-profiles.png">domdoc-vs-writer-profiles.png</a></li>
            <li><a href="/issues/secure/attachment/12447/XmlRpc-NoDomDocument.patch">XmlRpc-NoDomDocument.patch</a></li>
            <li><a href="/issues/secure/attachment/12451/XmlRpc-XmlWriter.patch">XmlRpc-XmlWriter.patch</a></li>
            <li><a href="/issues/secure/attachment/12449/XmlRpc-XmlWriter.patch">XmlRpc-XmlWriter.patch</a></li>
            <li><a href="/issues/secure/attachment/12526/Zend_XmlRpc-Generators-19822.patch">Zend_XmlRpc-Generators-19822.patch</a></li>
        </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Hey guys! I'm currently working on a WebService using Zend_XmlRpc. The service has to handle rather large responses. However, as I had to find out, the (imho excessive) use of DOMDocument instances for building XML requests/responses becomes a tremendous parameter as the number of processed values grows.</p>

<p>Replacing DOMDocument with plain text templates in Zend_XmlRpc_Value_*::saveXML() improved performance a lot. The cummulativ execution time of Zend_XmlRpc_Response::__toString() became about 3 times faster.</p>

<p>Attached to this report you can find a patch against ZF-1.9.3PL1 which solves this issue.
A fork of Zend_XmlRpc which can be used as a standalone replacement (i.e. no need to touch ZF code) can be found here:
<a href="http://github.com/polycaster/Polycast_XmlRpc/">http://github.com/polycaster/Polycast_XmlRpc/</a></p>

<p>Cheers!
Andreas</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2009-12-03T10:04:09.000+0000</p> 
        <div class="body">
            <p>Using plain text templates is a no-go due to character encoding issues. DOMDocument largely masks these for us and ensures they do not become a problem; this was one reason for choosing it.</p>

<p>One alternative implementation would be to use XMLWriter, which would be quite possible. XMLWriter is very fast, and also would mask the encoding issues. Would you be willing to try an implementation using it and benchmarking it?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Andreas Baumgart (polycaster) on 2009-12-03T10:56:13.000+0000</p> 
        <div class="body">
            <p>Sure, encoding is a good point. I'll give the XMLWriter solution a try and keep you posted.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Andreas Baumgart (polycaster) on 2009-12-03T13:29:45.000+0000</p> 
        <div class="body">
            <p>XDebug profiles of two similar request. The only difference is the XmlRpc implementation.</p>

<p>On the left handside is the current ZF implementation. On the right the patched version using XMLWriter.</p>

<p>Looks like XMLWriter is performing way better.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Andreas Baumgart (polycaster) on 2009-12-03T13:37:59.000+0000</p> 
        <div class="body">
            <p>Argh, sorry, the last patch was broken. Here's a proper one :)</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Lars Strojny (lars) on 2009-12-03T16:50:15.000+0000</p> 
        <div class="body">
            <p>As I'm on vacation for the next week, I would like to work on this issue. @Matthew: could we just bring that in without a proposal? @Everybody: I would prefer an adapter based version, as XMLWriter is the more exotic extension and I would imagine it might not be available everywhere. @Andreas: are you available in the next week to work on this issue?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Lars Strojny (lars) on 2009-12-09T19:28:48.000+0000</p> 
        <div class="body">
            <p>I've committed a refactored version of the client which introduces a new subpackage (Zend_XmlRpc_Generator_*). This generators are used to build the XML of request/response/values. It would be very kind if you could redo your performance measurements with the version in standard trunk and see if it is still as fast as you expected it to be.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Andreas Baumgart (polycaster) on 2009-12-13T14:05:14.000+0000</p> 
        <div class="body">
            <p>I'll perform another benchmark in the next days. Have been offline the last week. I'll keep you posted.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Andreas Baumgart (polycaster) on 2009-12-20T16:57:10.000+0000</p> 
        <div class="body">
            <p>Sorry for the dely.</p>

<p>I tested the new version of Zend_XmlRpc with the same benchmark as before, but now, using XMLWriter the memory goes through the roof with just a fracture of the number of Zend_XmlRpc Values involved.</p>

<p>For comparison: Before, I was able to handle about 900 (more or less equal) response objects within approx. 3.2 seconds with the benchmark application. Now it works with 100 of them in ~3ms, but runs out of memory with larger responses - whereas the memory limit is quite fair.</p>

<p>So, the CPU load looks constantly fine. I can't see a drastic overhead compared to the version without the adapters. But, I can't really compare the results as I was not able to test on the large scale.</p>

<p>However, the memory thing is a no-go in my opinion.</p>

<p>I traced the benchmark with xdebug and found after all, that the problem can be solved if XMLWriter is flush()ed more frequently.</p>

<p>Find a my proposal for a solution attached.</p>

<p>@Lars, regarding the patch: Before I read your latest patch I had already worked on an adapter-based solution, but didn't finish it, before you released yours. After I did the benchmark it was easier for me to modify my own code, because it was coincidentally closer to the flush-more-often-solution. Adapt the patch as you like, but I'm sorry I reverted some of your changes.</p>

<p>Besides (and totally not related to the actual issue anymore): I moved the ?etEncoding() methods to Zend_XmlRpc_Generator_AbstractGenerator. I think it is better to solve this with dependency injection as it gets you out of the troubles you get in, when setting the generator <em>after</em> you set the encoding.</p>

<p>Cheers!
Andreas</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Andreas Baumgart (polycaster) on 2010-01-05T09:27:28.000+0000</p> 
        <div class="body">
            <p>No comment at all?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Lars Strojny (lars) on 2010-01-07T15:47:30.000+0000</p> 
        <div class="body">
            <p>I'm sorry for the long time I took to respond, was on vacation. Will try to fix the issue next weekend and let you know, when I reached anything good.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Andreas Baumgart (polycaster) on 2010-02-25T12:24:38.000+0000</p> 
        <div class="body">
            <p>Any news about this issue yet?</p>

<p>Maybe it'd help to set the ticket status to "open" :)</p>

<p>With the memory problem still unsolved the situation became actually worse and the component moved from slow to not usable at all. Well, that is in my scenario, but I suppose others may be affected as well.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Patrick Schwisow (patrick.schwisow) on 2010-02-25T12:40:16.000+0000</p> 
        <div class="body">
            <p>I second the suggestion to re-open the ticket. I am curious why the XMLWriter generator is now the default (if XMLWriter is enabled). Given the "new-ness" of this feature and the concerns about its memory usage, I think the DOMDocument generator should be used unless there is a call to {{Zend_XmlRpc_Value::setGenerator(new Zend_XmlRpc_Generator_XMLWriter());}}</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Andreas Baumgart (polycaster) on 2010-03-30T06:27:45.000+0000</p> 
        <div class="body">
            <p>This is just my monthly reminder to have a look at this ticket or at least give a comment if you're going to work on this.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Till Klampaeckel (till) on 2010-04-06T08:39:05.000+0000</p> 
        <div class="body">
            <p>We experience similar issues with 1.10.2. XmlRpc is pretty unstable, next to unusable for us.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Till Klampaeckel (till) on 2010-04-08T04:52:48.000+0000</p> 
        <div class="body">
            <p>I've been trying all thoughts of things - from caching the definitions (two ways) to {{XmlWriter}} etc.. None of them seem to have a greater impact in my setup.</p>

<p>My issue is as follows:</p>

<p>We have an service layer in our application which we use to authenticate people on the backend and also grab useful information from the backend for customer support and so on. One of the biggest things is a search by name across our user data. The relevant SQL query takes 0.08 seconds to run which is acceptable for customer support, but it returns 150 records.</p>

<p>Each record is an array of username, first, last, email, account type and when the account was created and last modified. Now whenever I have a large result set, I keep getting socket timeouts (10 seconds). I've tried using a custom {{Zend_Http_Client}} on {{Zend_XmlRpc_Client}} with a higher timeout to no avail.</p>

<p>We recently upgraded from 1.8.1 to 1.10.2 and this is when those issues started. I've been profiling a lot over the last two days and it seems that the XML generating is taking an awful long time on the server, but exceeding 10 seconds is still insane.</p>

<p>I've also tried to {{setSkipSystemLookup(true)}} - which didn't help either.</p>

<p>It seems to work stable and consistent with result sets smaller than 30-40 records. The funky thing is that this used to work fine. We've been using the {{Zend_XmlRpc}} components for over two years in production.</p>

<p>I've ruled out network connectivity and DNS etc. too.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by David Abdemoulaie (hobodave) on 2010-04-27T09:30:01.000+0000</p> 
        <div class="body">
            <p>This is related to ZF-9504. The new "Generator" method of doing things in 1.10 is causing an exponential growth in memory usage when using DOMDocument based generation. This too increases script execution time.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by David Abdemoulaie (hobodave) on 2010-04-27T12:37:05.000+0000</p> 
        <div class="body">
            <p>With the fix to ZF-9504 I think this should be considered resolved as well. After this patch I'm able to return XMLResponses with a 1500+ item resultset in &lt; 4 seconds on my laptop.</p>

<p>My resultset looks like:</p>

<pre class="literal">
array(
    'values' =&gt; array(
        0 =&gt; array(
            'id' =&gt; 1,
            'name' =&gt; 'Foobar',
            'group_id' =&gt; 7,
            'priority' =&gt; 0,
        ),
       // ...
       1550 =&gt; array(/* ... */),
    ),
    'last_modified' =&gt; '2010-01-01 00:00:00',
)
</pre>

<p>Performance is nearly identical for both DOMDocument and XMLWriter, ~19M total mem usage and ~3.7s wall-time.</p>

        </div>
    </div>
    </div>

