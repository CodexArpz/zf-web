<h2>ZF-12276: OpenID Sreg extension:: parseRequest overwrites provided credentials when used in the provider context</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2012-06-11T18:25:36.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-06-11T18:25:36.000+0000</dd>

    <dt>Status:</dt>
    <dd>Open</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Alan B. Dee (alanbdee)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Dmitry Stogov (dmitry)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_OpenId</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>It appears that when providing the requested credentials to sreg extension in the provider context it overrides those credentials with booleans. 
Provider example: 
//... pull user info
$user_params = array(
        'nickname' =&gt; $user-&gt;getNickName(),
        'fullname' =&gt; $user-&gt;getFullName(),
        'email' =&gt; $user-&gt;getEmail()
);
$sreg = new iChain_OpenId_Sreg($user_params);
$ret = $provider-&gt;handle(null, $sreg);
Consumer example: 
$props =    array(
        "nickname"=&gt;false,
        "email"=&gt;true,
        "fullname"=&gt;true,
);<br />
$sreg = new iChain_OpenId_Sreg($props, null, 2.0);
$consumer = new Zend_OpenId_Consumer();
if($consumer-&gt;verify($_GET, $id, $sreg)){
     // $_GET[openid_sreg_email] =&gt; 1
     // $_GET[openid_sreg_fullname] =&gt; 1
}</p>

<p>The problem appears to be in Zend_OpenId_Extensions_Sreg::parseRequest. The unit tests only test the provided version number and policy url. When used in the consumer context it populates the $_props with a key/value array of attributes and booleans (if those are required). When using it in the provider context that same property is used to hold the actual values the provider should be sending. Instead it sends those booleans back.</p>

<p>A simple solution is to remove the following line from Zend_OpenId_Extensions_Sreg::parseRequest:
$this-&gt;_props = (count($props2) &gt; 0) ? $props2 : null; 
However it was put there for a reason and I am unsure why. I'm guessing to provide backwards compatibility with sreg 1.0 when used in the consumer context.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>
    <p class="comments">No comments to display</p>
    
</div>

