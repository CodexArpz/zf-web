<h2>ZF-2270: Zend_Filter_Boolean</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>New Feature</dd>

    <dt>Created:</dt>
    <dd>2007-12-05T14:07:57.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-09-30T11:59:07.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.10.0 (27/Jan/10)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Jordan Ryan Moore (jordanryanmoore)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Thomas Weidner (thomas)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Filter</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
        <li><a href="/issues/secure/attachment/11010/Boolean.php">Boolean.php</a></li>
        </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>A new filter that converts values to booleans.</p>

<pre class="highlight"><code>
class Zend_Filter_Boolean implements Zend_Filter_Interface {
    /**
     * Values that are equivilent to true.
     *
     * @var array
     */
    protected $_true = array('t', 'true', 'y', 'yes', '1');

    /**
     * Values that are equivilent to false.
     *
     * @var array
     */
    protected $_false = array('f', 'false', 'n', 'no', '0');

    /**
     * The default value if the provided value does not match any of the
     * expected values.
     *
     * @var bool
     */
    protected $_default = false;

    /**
     * Constructs a boolean filter.
     *
     * @param   bool    $default    The default value if the provided value
     *                              does not match any of the expected values.
     */
    public function __construct($default = false) {
        $this-&gt;_default = (bool) $default;
    }

    /**
     * Casts value to a boolean.
     *
     * @param   mixed   $value
     *
     * @return  bool
     */
    public function filter($value) {
        if (is_bool($value) || is_null($value)) {
            return (bool) $value;
        }

        $value = strtolower(trim($value));

        if (in_array($value, $this-&gt;_true)) {
            return true;
        }

        if (in_array($value, $this-&gt;_false)) {
            return false;
        }

        return $this-&gt;_default;
    }
}
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Simone Carletti (weppos) on 2007-12-26T17:48:17.000+0000</p> 
        <div class="body">
            <p>Hi Jordan,
I agree with this filter, but I think the class deserves a little more discussion.</p>

<p>I gave a look at your suggestion but, for example, it seems unable to handle an array.
I would expect an empty array to be evaluated as false and a not empty array as true, as (bool) already does.
It doesn't handle objects as well.</p>

<p>I suggest to check whether the variable is a scalar type (<a href="http://php.net/manual/en/function.is-scalar.php">http://php.net/manual/en/function.is-scalar.php</a>).
If no, the default (bool) cast statement might be used, otherwise we could rely to in_array() comparison.</p>

<p>Additionally, it would be great to provide an  #addValue method (or perhaps #addTrue() and #addFalse() methods) to let developers add more values to default array.</p>

<p>What do you think?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Jordan Ryan Moore (jordanryanmoore) on 2007-12-27T11:18:36.000+0000</p> 
        <div class="body">
            <p>Added an addValue() method and support for Zend_Locale. I'm not sure if a non-scalar should return its default PHP boolean cast, or if it should return the default value set in the filter. This version returns its default PHP boolean cast.</p>

<pre class="highlight"><code>
class Zend_Filter_Boolean implements Zend_Filter_Interface
{
    /**
     * Default values and their boolean counterparts.
     *
     * @var array
     */
    protected $_defaultValues = array(
        't'     =&gt; true,
        'true'  =&gt; true,
        'y'     =&gt; true,
        'yes'   =&gt; true,
        '1'     =&gt; true,
        'f'     =&gt; false,
        'false' =&gt; false,
        'n'     =&gt; false,
        'no'    =&gt; false,
        '0'     =&gt; false,
    );

    /**
     * Values and their boolean counterparts.
     *
     * @var array
     */
    protected $_values = array();

    /**
     * The default value if the provided value does not match any of the expected values.
     *
     * @var bool
     */
    protected $_default = false;

    /**
     * Constructs a boolean filter.
     *
     * @param   bool                $default    The default value if the provided value does not match any of the
     *                                          expected values.
     * @param   Zend_Locale|string  $locale     An optional locale to retreive true/false values from.
     */
    public function __construct($default = null, $locale = null)
    {
        if (!is_null($default)) {
            $this-&gt;_default = (bool) $default;
        }

        $this-&gt;setLocale($locale);
    }

    /**
     * Sets the locale.
     *
     * @param   Zend_Locale|null    $locale
     *
     * @return  Zend_Filter_Boolean
     */
    public function setLocale($locale)
    {
        $this-&gt;_values = $this-&gt;_defaultValues;

        if (!is_null($locale)) {
            if (!class_exists('Zend_Locale')) {
                require_once 'Zend/Locale.php';
            }

            if (!$local instanceof Zend_Locale) {
                $locale = new Zend_Locale($locale);
            }

            $q = $locale-&gt;getQuestion();

            $this-&gt;_values[$q['yes']]       = true;
            $this-&gt;_values[$q['yesabbr']]   = true;
            $this-&gt;_values[$q['no']]        = false;
            $this-&gt;_values[$q['noabbr']]    = false;
        }

        return $this;
    }

    /**
     * Adds a value to the list.
     *
     * @param   mixed   $value
     * @param   bool    $bool
     *
     * @return  Zend_Filter_Boolean
     */
    public function addValue($value, $bool)
    {
        if (!is_scalar($value)) {
            require_once 'Zend/Filter/Exception.php';
            throw new Zend_Filter_Exception('$value must be a scalar');
        }

        $this-&gt;_defaultValues[trim($value)] = (bool) $bool;

        return $this;
    }

    /**
     * Casts value to a boolean.
     *
     * @param   mixed   $value
     *
     * @return  bool
     */
    public function filter($value) {
        if (!is_scalar($value) || is_bool($value) || is_null($value)) {
            return (bool) $value;
        }

        $value = trim($value);

        if (function_exists('mb_strtolower')) {
            $value = mb_strtolower($value);
        } else {
            $value = strtolower($value);
        }

        if (array_key_exists($value, $this-&gt;_values)) {
            return $this-&gt;_values[$value];
        }

        return $this-&gt;_default;
    }
}
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Jordan Ryan Moore (jordanryanmoore) on 2007-12-28T13:15:09.000+0000</p> 
        <div class="body">
            <p>Attached new Zend_Filter_Boolean that fixes a couple bugs, returns the default value for non-scalars, uses the mb extension (if available), and ever-so-slightly improves memory usage.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Darby Felton (darby) on 2008-01-29T09:59:20.000+0000</p> 
        <div class="body">
            <p>(reposting comment with formatting :))</p>

<p>Maybe someone can educate me on why the following wouldn't be the best and most understandable solution?</p>

<pre class="highlight"><code>
public function filter($value)
{
    return (boolean) $value;
}
</code></pre>

<p>Of course, for custom needs this filter could be extended.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Jordan Ryan Moore (jordanryanmoore) on 2008-01-29T10:22:04.000+0000</p> 
        <div class="body">
            <p>Sure, the simple version would work fine for most scenarios, but this filter takes "yes/no" and "true/false" string values and returns the corresponding boolean. I've found it handy quite a few times. I've used the filter for user-input, GET/POST variable parsing, and returning data from a database.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Darby Felton (darby) on 2008-01-29T10:29:55.000+0000</p> 
        <div class="body">
            <p>Aha, I see now. Thanks, Jordan, for clarifying this for me. :)</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-04-18T13:12:00.000+0000</p> 
        <div class="body">
            <p>This doesn't appear to have been fixed in 1.5.0. Please update if this is not correct.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-04-18T17:11:46.000+0000</p> 
        <div class="body">
            <p>Please evaluate and categorize/assign as necessary.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2009-04-16T23:59:14.000+0000</p> 
        <div class="body">
            <p>Proposal has been added to Wiki.
Waiting for Recommendation and Response from Zend since 15.April.2009</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2009-09-30T11:59:07.000+0000</p> 
        <div class="body">
            <p>Closing as "needs proposal".
The related proposal has been accepted for incubator.</p>

        </div>
    </div>
    </div>

