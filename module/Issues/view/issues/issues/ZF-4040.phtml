<h2>ZF-4040: Zend_Wildfire_Protocol_JsonStream-&gt;_encode using bad internal Zend_Json encoder</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2008-08-22T17:55:27.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2008-08-24T17:32:14.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Repeterr (peterr)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Christoph Dorn (cadorn)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Wildfire</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>h3.The problem</p>

<pre class="highlight"><code>
/**
 * Encodes messages into the Wildfire JSON Stream Communication Protocol.
 */
class Zend_Wildfire_Protocol_JsonStream
{   ...
    // Use the JSON encoding scheme for the value specified
    protected function _encode($value)
    {
        return Zend_Json_Encoder::encode($value);
    }
    ...
}
</code></pre>

<p>Why there's <em>Zend_Json{color:red}_Encoder{color}</em> here in place of <em>Zend_Json</em>?!
So I've got my UTF-8 debug output corrupted in FirePHP because of that.</p>

<p>Removing <em>_Encoder</em> lets Zend_Json::encode method to choose appropriate JSON encoding method according to PHP's <em>json_encode</em> function availability.
After that my UTF-8 text displays correctly.</p>

<p>h3.Test code with string in russian:</p>

<pre class="highlight"><code>
// in bootstrap
$logger = new Zend_Log(new Zend_Log_Writer_Firebug());
Zend_Registry::set('log', $logger);
// in controller
Zend_Registry::get('log')-&gt;debug('Some debug text in english is OK'); // that's OK
Zend_Registry::get('log')-&gt;debug('Отладочный русский текст искажается!'); // that's corrupted
</code></pre>

<p>May be there's a reason to file another bug on Zend_Json_Encoder's _encodeString method?
By the way, give a glance at FirePHP's main standalone class "FirePHP.class.php" and its "json_encode" method. It actually does the job right! May be ZJE-&gt;_encodeString should follow this example?</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Christoph Dorn (cadorn) on 2008-08-22T18:01:48.000+0000</p> 
        <div class="body">
            <p>That was an oversight. Thanks for pointing it out.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Christoph Dorn (cadorn) on 2008-08-22T23:22:02.000+0000</p> 
        <div class="body">
            <p>Can you add some test code that logs a message where the UTF-8 test does not display properly?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Christoph Dorn (cadorn) on 2008-08-24T12:12:35.000+0000</p> 
        <div class="body">
            <p>I have looked into json_encode and Zend_Json_Encoder in more detail.</p>

<p>While json_encode detects recursion, it does not silently truncate the resulting JSON string but instead throws an exception. Zend_Json_Encoder on the other hand truncates it and still returns a valid JSON string.</p>

<p>It is very common to have cyclical relationships in your object graph which should get JSON encoded and sent to the client in a truncated fashion.</p>

<p>The best solution for the encoding would be to try json_encode first and if it fails fall back to Zend_Json_Encoder. This would mean that UTF8 encoded messages cannot contain cyclical object relationships.</p>

<p>The alternative would be to add UTF8 encoding support to Zend_Json_Encoder which would be great, but not practical as an immediate fix for this issue.</p>

<p>So would the fallback approach work for now until Zend_Json_Encoder supports UTF8 characters?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Christoph Dorn (cadorn) on 2008-08-24T14:40:13.000+0000</p> 
        <div class="body">
            <p>Looks like my tests were not correct.</p>

<p>json_encode() nor Zend_Json_Encoder silently truncate cyclical relationships.</p>

<p>I'll have to submit a patch for Zend_Json_Encoder to silence the cyclical exception.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Christoph Dorn (cadorn) on 2008-08-24T14:49:24.000+0000</p> 
        <div class="body">
            <p>Waiting for resolution of ZF-4053.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Christoph Dorn (cadorn) on 2008-08-24T17:30:40.000+0000</p> 
        <div class="body">
            <p>I have decided to stick with Zend_Json_Encoder and not try json_encode() first for the following reasons:</p>

<p>1) Zend_Json_Encoder adds more detailed information (i.e. the class name) when it trims cyclical relationships</p>

<pre class="highlight"><code>
"* RECURSION ([Class Name]) *"
</code></pre>

<p>2) Zend_Json_Encoder adds class hint information to the JSON string</p>

<pre class="highlight"><code>
{"__className":"[Class Name]", ... }
</code></pre>

<p>Zend_Wildfire_Protocol_JsonStream will support UTF-8 characters as soon as Zend_Json_Encoder supports them. See issue ZF-4054.</p>

<p>To speed up general support for UTF-8 characters, please lobby for ZF-4054.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Christoph Dorn (cadorn) on 2008-08-24T17:32:14.000+0000</p> 
        <div class="body">
            <p>The request is for UTF-8 character support. To accomplish this issue ZF-4054 must be resolved.</p>

        </div>
    </div>
    </div>

