<h2>ZF-8423: Improved conditions for &quot;exclude&quot; clause in Zend_Validate_Db_(No)RecordExists</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2009-11-30T00:29:16.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2010-10-10T07:05:13.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Webdevilopers (tridem)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Ryan Mauger (bittarman)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Validate</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-9060">ZF-9060</a></li>
            <li><a href="/issues/browse/ZF-10541">ZF-10541</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <pre class="highlight"><code>
$exclude = array('field' =&gt; 'deleted', 'value' =&gt; new Zend_Db_Expr('IS NULL'));
$validator = new Zend_Validate_Db_NoRecordExists('my_table', 'id', $exclude);
</code></pre>

<p>At the moment the $exclude parameter only excepts a condition for the <code>!=</code> operator which works fine for examples like:</p>

<pre class="highlight"><code>
array('field' =&gt; 'id', 'value' =&gt; 1)
</code></pre>

<p>Sometimes different operators are needed, f.e.:</p>

<pre class="highlight"><code>
array('field' =&gt; 'deleted', 'value' =&gt; new Zend_Db_Expr('IS NULL'))
</code></pre>

<p>Maybe it makes most sense to accept a $where object the $exclude parameter like the <code>update</code> method in Zend_Db_Table_Abstract?
This would make the validator very versatile!</p>

<p>Another increase to this would be binding the params to a models method again like the <code>select</code> method in Zend_Db_Table_Abstract in order to keep the model-related code (like db table field names) away from the validator.</p>

<pre class="highlight"><code>
class My_model extends Zend_Db_Table_Abstract
{
    protected $_primary = 'id';
    protected $_name = 'my_table';

    public function exists()
    {
        // formerly defined by `field` and `value` in  definition of
        $select = $this-&gt;select()-&gt;where('deleted ?', new Zend_Db_Expr('IS NULL'));

        return ...
    }
}
</code></pre>

<p>With this custom validators would no longer be neccassary.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Felix Fr√∂schlin (xhochn) on 2010-01-20T05:21:32.000+0000</p> 
        <div class="body">
            <p>Same problem ;)
<a href="http://framework.zend.com/issues/browse/ZF-8442">http://framework.zend.com/issues/browse/ZF-8442</a></p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Kim Blomqvist (kblomqvist) on 2010-08-08T09:32:37.000+0000</p> 
        <div class="body">
            <p>bq. Maybe it makes most sense to accept a $where object the $exclude parameter like the <code>update</code> method in Zend_Db_Table_Abstract? This would make the validator very versatile!</p>

<p>I totally agree! Atm. I'm passing string for $exclude to mimic custom where clause.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ryan Mauger (bittarman) on 2010-09-17T13:42:41.000+0000</p> 
        <div class="body">
            <p>Resolved in r22958. Validator now accepts a select object as an optional parameter.</p>

        </div>
    </div>
    </div>

