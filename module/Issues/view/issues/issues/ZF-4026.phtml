<h2>ZF-4026: requests object does not clear previous user params</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2008-08-21T08:39:16.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-09-17T10:05:55.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.9.3 (22/Sep/09)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Stijn Huyberechts (huyby)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Mark (lightflowmark)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Controller</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
        <li><a href="/issues/secure/attachment/12109/ZF-4026_fix.patch">ZF-4026_fix.patch</a></li>
            <li><a href="/issues/secure/attachment/12110/ZF-4026_test.patch">ZF-4026_test.patch</a></li>
        </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Hi,</p>

<p>I'm building a CMS system upon the Zend Framework. But I'm having troubles with the Request object, which seems not to "clear" the user params. Each page exists of several page elements; each element is a new request that is added to the actionstack. If the request's user params are printed in the IndexController everything is fine, but when I print the same request in the controller for that specific action than I see also user params of the previous actions.</p>

<pre class="highlight"><code>
// this code is in the IndexController in the "default" module
foreach($elements as $arr) {
    // clone request object for each action
    $req = clone $request;
    
    // set controller, action and module name
    $req-&gt;setActionName($arr["action"]);
    $req-&gt;setControllerName($arr["controller"]);
    $req-&gt;setModuleName($arr["path"]);

    $req-&gt;setParam("_pageElementID", $arr["elementID"]);
    
    // add custom parameters
    if($arr["params"]) {
        $params = explode("/", $arr["params"]);
        foreach($params as $param) {
            list($key, $val) = explode("=", $param);
            $req-&gt;setParam("_".$key, $val);
        }
    }
    $this-&gt;_helper-&gt;actionStack($req); // add element request to action stack
}
</code></pre>

<p>Printout of two request params:</p>

<pre class="highlight"><code>
Array
(
    [_moduleContentKey] =&gt; leftmenu
    [_pageElementID] =&gt; 14
    [_startLevel] =&gt; 1
    [_test] =&gt; 1
)

Array
(
    [_moduleContentKey] =&gt; default
    [_pageElementID] =&gt; 3
    [_startLevel] =&gt; 1   // parameter is a "leftover" from the previous action
    [_test] =&gt; 1              // parameter is a "leftover" from the previous action
    [_showRoot] =&gt; 1  
)
</code></pre>

<p>Possible solution:</p>

<p>Add a clearParams method to Zend_Controller_Request_Http:</p>

<pre class="highlight"><code>
    public function clearParams()
    {
       $this-&gt;_params = array()
    }
</code></pre>

<p>Then this method should be called from the ActionStack plugin when the _forward method is triggered for the next action.</p>

<p>Is this the right way to handle this problem? Honestly I don't like to change the code from the Zend Framework...</p>

<p>Thx in advance for your comments and advice,</p>

<p>Cheers,</p>

<p>Stijn</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Mark (lightflowmark) on 2009-05-03T03:10:00.000+0000</p> 
        <div class="body">
            <p>This is a more serious bug than perhaps it has appeared, as it prohibits the use of ActionStack in many cases.  It's a trivial fix (it seems) and would be good to solve.</p>

<p>Another (possibly simpler) solution would be to replace the ActionStack::forward($next) method with
public function forward(Zend_Controller_Request_Abstract $next)
{
        $this-&gt;setRequest($next);
}</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Andrei Iarus (poni1111) on 2009-05-18T10:52:52.000+0000</p> 
        <div class="body">
            <p>Follow the comments of the issue <a href="http://www.nabble.com/Menu-in-ZF%3A-Controller-Plugin-with-postDispatch-method-td23306086.html#a23315051">http://nabble.com/Menu-in-ZF%3A-Controller-Plugin-â€¦</a> 
The problem described there seems to be related.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Till Klampaeckel (till) on 2009-05-18T14:03:46.000+0000</p> 
        <div class="body">
            <p>Added code tags.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Dennis Becker (radhad) on 2009-05-19T01:54:17.000+0000</p> 
        <div class="body">
            <p>Please don't change the behaviour of _forward() ! There are some use cases where it is explicitly needed that you have the parameters still available!</p>

<p>But I would like to see something like this:</p>

<pre class="highlight"><code>
/**
 * @param string $url
 * @param bool $reset      | reset the params in Front Controller
 */
protected function _forward($url, $reset = false)
</code></pre>

<p>This would not break BC!</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Mark (lightflowmark) on 2009-07-27T06:35:52.000+0000</p> 
        <div class="body">
            <p>I would like to submit a patch for this issue; not sure the best place to discuss it, please let me know if these comments are not the appropriate place.</p>

<p>I think that BC should be broken here.  The ActionStack::forward method should use the exact request object passed to it when it was created, not some frankenstein object of all the user params set in previous actionstack actions.  If an actionstack action2 relies on parameters set in a previous actionstack action1, then action1 should add action2 to the actionstack.</p>

<p>Current behaviour is:</p>

<pre class="highlight"><code>
   public function indexAction()
    {
        $request = clone $this-&gt;getRequest();
                $request-&gt;setActionName('test2');
                $this-&gt;_helper-&gt;actionStack($request);

        $request = clone $this-&gt;getRequest();
                $request-&gt;setActionName('test1')
                        -&gt;setParams(array('bar' =&gt; 'baz'));
                $this-&gt;_helper-&gt;actionStack($request);
    }

    public function test1Action()
    {
        $this-&gt;getRequest()-&gt;setParam('fromTest1','shouldNotBeInTest2');
        Zend_Debug::dump($this-&gt;getRequest()-&gt;getParams());
//outputs  ["bar"] =&gt; string(3) "baz", ["fromTest1"] =&gt; string(3) "shouldNotBeInTest2"
    }

    public function test2Action()
    {
        Zend_Debug::dump($this-&gt;getRequest()-&gt;getParams());
//outputs  ["bar"] =&gt; string(3) "baz", ["fromTest1"] =&gt; string(3) "shouldNotBeInTest2"
    }
</code></pre>

<p>I believe the rational &amp; desired behaviour is for test2 to not have any parameters set when it is called like this.  If the above is the desired behaviour, then it should be coded like:</p>

<pre class="highlight"><code>
   public function indexAction()
    {
        $request = clone $this-&gt;getRequest();
                $request-&gt;setActionName('test1')
                        -&gt;setParams(array('bar' =&gt; 'baz'));
                $this-&gt;_helper-&gt;actionStack($request);
    }

    public function test1Action()
    {
        $this-&gt;getRequest()-&gt;setParam('fromTest1','shouldNotBeInTest2');
        Zend_Debug::dump($this-&gt;getRequest()-&gt;getParams());
//outputs  ["bar"] =&gt; string(3) "baz", ["fromTest1"] =&gt; string(3) "shouldNotBeInTest2"


          $request = clone $this-&gt;getRequest();
          $request-&gt;setActionName('test2');
          $this-&gt;_helper-&gt;actionStack($request);
    }

    public function test2Action()
    {
        Zend_Debug::dump($this-&gt;getRequest()-&gt;getParams());
//outputs  ["bar"] =&gt; string(3) "baz", ["fromTest1"] =&gt; string(3) "shouldNotBeInTest2"
    }
</code></pre>

<p>What are your thoughts on breaking BC here?  I have a patch for this ready if it's acceptable.  I don't believe that this optional reset parameter suggested by Dennis is viable, as _forward is not a user-callable method.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Dennis Becker (radhad) on 2009-07-27T06:44:50.000+0000</p> 
        <div class="body">
            <p>A long time has passed since I add a comment to this issue.</p>

<p>After re-reading everything, it seems like I have not seen the "clone" statement in the description. I'm not sure if there exists a reset() method for the request-object, but I still would prefer another way.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Mark (lightflowmark) on 2009-07-27T06:54:54.000+0000</p> 
        <div class="body">
            <p>There isn't a reset() method for the request object, but this isn't the main problem.  The problem is that ActionStack::forward does not call any putative reset() method; it adds parameters to the request object using setParams() (which doesn't actually set the parameters - it adds them to existing parameters).  Changing this breaks BC, but as far as I can see, it's the only way to prevent unwanted parameters being set in later ActionStack actions.</p>

<p>What is your use-case for building up parameters through successive ActionStack actions?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Dennis Becker (radhad) on 2009-07-27T07:10:32.000+0000</p> 
        <div class="body">
            <p>It is possible, that you set a value per setParam() which will be used by more than one Action in the later use.</p>

<p>My main missunderstanding is the context, where you want to change that. I thought about the Action-Controller available _forward() method and as I can see, I was wrong here. The main reason why I'm still against a reset of the values is, that no one would expect that by cloning an object! For me a clone must be an exact copy, not a half copy. You never know who uses this behaviour at the moment. So I think a reset() or resetParams() method seems to be a better way instead of implementing a functionality no one would expect when using it.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Stijn Huyberechts (huyby) on 2009-07-27T07:11:01.000+0000</p> 
        <div class="body">
            <p>I'm glad to see this issue is still alive. I'm still 'patching' the ZF with my 'solution' in the original post of this issue. As I see it now, it is clear that the request object needs to have 2 separate methods to modify or add parameters:</p>

<p>modify (reset) parameter(s):
Zend_Controller_Request_Abstract::setParam()
Zend_Controller_Request_Abstract::setParams()</p>

<p>add parameter(s):
Zend_Controller_Request_Abstract::addParam()
Zend_Controller_Request_Abstract::addParams()</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Mark (lightflowmark) on 2009-07-27T07:56:29.000+0000</p> 
        <div class="body">
            <p>Dennis: absolutely.  No-one's suggesting that the clone does anything other than clone the request object; only that, given 2 actions in the actionstack, each with their own request object, action1 should not magically change the parameters for action2's request.</p>

<p>Stijn: I agree this is by far the best solution.  However, this seems like a big BC break; any input from the ZF team on this?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2009-07-27T08:53:38.000+0000</p> 
        <div class="body">
            <p>This <em>is</em> a big BC break, as the parameter munging is a specific use case for which ActionStack was designed.</p>

<p>I think we could introduce a flag to ActionStack to indicate that the request object user parameters should be cleared, but this is really the only concession I'd like to make at this time.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Mark (lightflowmark) on 2009-07-27T09:33:31.000+0000</p> 
        <div class="body">
            <p>Fair enough.</p>

<p>Out of interest, what is the use case for using ActionStack to build up parameters which isn't better served by the code I outline above, where test1Action adds test2Action to the ActionStack?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Mark (lightflowmark) on 2009-07-28T02:05:35.000+0000</p> 
        <div class="body">
            <p>Patch &amp; test done.</p>

<p>I've added a clearParams() method to the request class, and a setClearRequestParams() method to the ActionStack class, which controls this behaviour.  It defaults to false, so bc is not broken - I think this is confusing, and that bc should be broken here.</p>

<p>I'd still really like to see a robust defence of the current behaviour, this solution seems sub-optimal to me.</p>

<p>I'd also be interested to know why the request setParams() actually adds parameters rather than setting the parameters, and why it's not implemented as Stijn suggested, which is the root cause of this confusion.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2009-09-17T09:36:44.000+0000</p> 
        <div class="body">
            <p>One reason that the user params are not cleared on _forward/ActionStack calls is due to how other components, such as ContextSwitch, do their work. Imagine a scenario where ContextSwitch is in play, and a JSON context is detected because of the "format" parameter found in the user params (i.e., set by the router); if you were to clear out the params, then additional actions invoked would no longer know the current context, and would be appending HTML to what should be a JSON response.</p>

<p>I am reviewing the patch for inclusion; as long as the behavior is controlled by a flag and that the default state of the flag is the current behavior, we should be able to include it.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2009-09-17T10:05:52.000+0000</p> 
        <div class="body">
            <p>Patch applied in trunk and 1.9 release branch</p>

        </div>
    </div>
    </div>

