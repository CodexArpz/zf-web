<h2>ZF-3524: Updating from a row returned by Zend_Db_Table_Abstract::createRow()</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2008-06-26T14:13:08.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2010-02-24T09:06:21.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.10.3 (01/Apr/10)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Matthew Turland (elazar)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Ralph Schindler (ralph)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Db_Table</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Row instances created using Zend_Db_Table_Abstract::createRow() currently cannot be updated using Zend_Db_Table_Row_Abstract::save() because createRow() automatically sets the 'stored' flag passed to Zend_Db_Table_Row_Abstract::__construct() to false.</p>

<p>createRow() and the row constructor appear to be the only two entry points for introducing data into a row instance such that it will issue an update query when save() is called. This means there are only two available approaches to issue an update:</p>

<p>1) Call update() on the associated table object with a manually constructed WHERE clause specifying the primary key for the record to be updated.</p>

<p>2) Manually instantiate the row class and passing the 'stored' flag to its constructor so as to avoid the current limitation of createRow.</p>

<p>Both approaches work, but are more tedious than the alternative of allowing the developer to set the 'stored' flag in the createRow call. I propose adding an additional parameter to createRow() that defaults to false (for backward compatibility). Passing in true would cause createRow() to determine the value it passes in for the 'stored' flag based on the presence of primary key column values in its $data parameter.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Ralph Schindler (ralph) on 2009-01-11T21:11:17.000+0000</p> 
        <div class="body">
            <p>Please help me to understand a bit better.  When you call createRow(), the row is not stored in the database yet.  When you call save() on the newly created row, it should do the insert, not the update as the row does not yet exist in the database.</p>

<p>So currently, im just a little confused what the improvement should be.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Turland (elazar) on 2009-01-11T21:22:33.000+0000</p> 
        <div class="body">
            <p>The point is, there's no way to update a row without calling underlying code that issues a SELECT query to retrieve that data. The described change would alleviate the need for this SELECT query in cases where data for the UPDATE query to be issued, including a primary key value to be used in the WHERE clause to identify the row, is already available in the script without having to issue the SELECT first (ex: form submission used to update the existing record).</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Menno Luiten (mluiten) on 2009-12-20T04:28:56.000+0000</p> 
        <div class="body">
            <p>I think the proposal is to let createRow(), which currently represents a non-saved, new row, too optionally also represent an existing row. So you can get a workflow like</p>

<pre class="highlight"><code>
$updateRow = $table-&gt;createRow(array(), null, true); // third param represents _stored = true
$updateRow-&gt;bug_id = 62;
$updateRow-&gt;bug_description = 'Foobar';
$updateRow-&gt;save(); // executes UPDATE on bug_id = 62 to set bug_description to "Foobar".
</code></pre>

<p>Am I correct in this assumption? If so, don't think it fits in the design of Row, since it handles updates etc from 'known values'. Instead a workflow like</p>

<pre class="highlight"><code>
$updateData = $updateWhere = array();
$updateData['bug_description'] = 'Foobar'; 
$updateWhere['bug_id = ?'] = 62

$table-&gt;update($updateData, $updateWhere);
</code></pre>

<p>Should work fine as a 'workaround'.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Turland (elazar) on 2010-02-24T09:06:21.000+0000</p> 
        <div class="body">
            <p>Ralph and I have discussed this and decided it's not a needed changing. Resolving this issue as a result.</p>

        </div>
    </div>
    </div>

