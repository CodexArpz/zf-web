<h2>ZF-475: Umlauts, Zend_XmlRpc_Value_Scalar/String and UTF-8</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2006-11-03T07:59:53.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2007-07-05T14:43:24.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>0.6.0 (16/Dec/06)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Lars Strojny (lars)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Matthew Weier O'Phinney (matthew)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_XmlRpc_Client</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
        <li><a href="/issues/secure/attachment/10130/xmlrpc-utf-8-escape.diff">xmlrpc-utf-8-escape.diff</a></li>
        </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>So, another bug in Zend_XmlRpc_Client which costs me some hours :-) Zend_XmlRpc_Value_Scalar creates the value-payload from itself by using $this-&gt;_value. But $this-&gt;_value is an escape XML-String and so it comes to the issue, that string becomes encoded twice. Also it creates a XML-payload from iso-8859-1 which is definitely wrong. The patch in the attachment fixes this problem.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Lars Strojny (lars) on 2006-11-03T08:00:28.000+0000</p> 
        <div class="body">
            <p>Fix for the problem above.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2006-11-03T11:09:54.000+0000</p> 
        <div class="body">
            <p>Resolved in revision 1446 in SVN</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Lars Strojny (lars) on 2006-11-03T20:55:41.000+0000</p> 
        <div class="body">
            <p>The fix here is incorrect. It will  continue to double escape the strings. The thing is, if a Zend_XmlRpc_Value_String object is created, it just encodes the submitted string to make it XML-safe. But: DomElement also encodes the string so getValue() should be used and not $this-&gt;_value.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2006-11-05T22:06:49.000+0000</p> 
        <div class="body">
            <p>Took me a bit to figure out where the getValue() should be done, but found it -- it's in Zend_XmlRpc_Value_Scalar, and the change is committed in 1474. Please test.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Lars Strojny (lars) on 2006-11-06T05:47:41.000+0000</p> 
        <div class="body">
            <p>Sorry, I would have explained that better. But it works now.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Lars Strojny (lars) on 2006-11-06T10:27:10.000+0000</p> 
        <div class="body">
            <p>I do not want to fell on your nerves but I found another related thing. The Zend_XmlRpc_Value_Base64 has a similiar problem. As we are using $this-&gt;getValue() now it will return an unencoded binary which is incorrect. As I'm currently using Base64-stuff just for sending, not for receiving I hotfixed that by returning the base64-encoded string, which is incorrect if you receive a string from the server because it will still be base64-encoded. So I guess we ran into a design problem. String values will be encoded twice, as long as we do not $this-&gt;getValue() but base64-values will not be encoded, if we use $this-&gt;getValue(). I'm not sure currently how to fix this.</p>

        </div>
    </div>
    </div>

