<h2>ZF-6932: Zend Loader trying to instantiate wrong class</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2009-06-05T05:32:17.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2011-02-18T07:52:22.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Ashley Kitson (akzincdig)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Ralph Schindler (ralph)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Loader</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Since upgrading from ZF 1.7.5 -&gt; 1.8.2 and implementing the new Zend_Loader I'm getting strange compile errors
e.g. Compile Error: /usr/local/ZWare/lib/Zend/Log.php line 223 - Cannot redeclare class ZWare_Service_Log</p>

<p>I see these through Zend Studio debugger.</p>

<p>This is happening with a lot of my classes that have similar names to existing Zend classes.  The failure line is always the last line in the file.</p>

<p>It seems that Zend_Loader is confusing names.</p>

<p>My loader initialisation lines in bootstrap are:
require_once 'Zend/Loader/Autoloader.php';
$autoloader = Zend_Loader_Autoloader::getInstance();
$autoloader-&gt;setFallbackAutoloader(true);</p>

<p>where previously (in 1.7.5) I used to simply have
require_once 'Zend/Loader.php';
Zend_Loader::registerAutoload();</p>

<p>This is really messing up my ability to debug code as I rarely get to the target page before one of these errors gets thrown.  I don't really want to have to go writing my own autoloaders 'cus the old style one worked just fine.</p>

<p>Can you suggest some testing I can do to try and narrow down the problem?</p>

<p>BTW, If I run the app without going through the debugger, all appears fine (assuming of course I have no other issues stopping execution.)</p>

<p>TIA</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2009-06-05T05:55:11.000+0000</p> 
        <div class="body">
            <p>The error you're getting, "Cannot redeclare class ZWare_Service_Log", is indicative of one of two issues.  First, as the error suggest, PHP may be trying to include the same class file twice. This causes PHP to error as it's attempting to redefine an existing class. This could be happening if you have a call to "include 'ZWare/Service/Log.php';" That said, Zend_Loader::loadClass() (which is still used internally in Zend_Loader_Autoloader) does a class_exists() check prior to calling include() -- which could mean there's a circular dependency happening in the included class file.</p>

<p>The second possibility is that you're using an opcode cache, and the realpath cache is stale. This would also result in the same error. The easy way to test this theory is to flush your opcode cache or disable it to see if the issue goes away.</p>

<p>Finally, instead of using setFallbackAutoloader(), register your namespace with
it instead:</p>

<pre class="highlight"><code>
$autoloader-&gt;registerNamespace('Zware_');
</code></pre>

<p>This is the more appropriate and intended way of using the autoloader, as it will then ignore namespaces it does not know about.</p>

<p>(BTW, as of 1.8.2, Zend_Loader::registerAutoload() now uses Zend_Loader_Autoloader and sets it as a fallback autoloader -- but also emits a deprecation warning.)</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ashley Kitson (akzincdig) on 2009-06-05T07:52:10.000+0000</p> 
        <div class="body">
            <p>Matthew - thanks.</p>

<p>re: trying to include same class file twice.  I thought that, but it is the underlying Zend Framework code that is throwing the error - it knows nothing about my stuff above it. I don't use 'include/require' statements anywhere in my code apart from the one line that includes the loader in the bootstrap.</p>

<p>re: circular references.  Nope, ZWare_Service_Log extends a simpleton factory class.  It does instantiate Zend_Log and stores it to do the actual work.  Zend_Log of course knows nothing about ZWare_Service_Log</p>

<p>re: opcode cache.  Not knowingly using one of them unless Zend Core implements one that I don't know about.</p>

<p>re: using $autoloader-&gt;registerNamespace('Zware_');  Tried that as suggested.  Now I get errors along lines of Class 'ZWare_...' not found (doesn't even get out of the bootstrap.)  I guess 'cus the autoloader now doesn't know what to do with it.</p>

<p>re: Zend_Loader::registerAutoload(). It was the deprecation notices that prompted me to use the new form.  Going back to use Zend_Loader::registerAutoload() form is not a starter 'cus as you say, it is really a wrapper for the new functionality (and yes, I get the original error as reported if I do.)</p>

<p>Thanks for suggestions, I'll take another look.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Anthon Pang, VIP Software Technologies Inc. (vipsoft) on 2009-11-07T10:24:53.000+0000</p> 
        <div class="body">
            <p>APC and eAccelerator would be examples of opcode caches.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ralph Schindler (ralph) on 2011-02-18T07:52:22.000+0000</p> 
        <div class="body">
            <p>If this is still an issue, please reopen with new information and/or reproduction case.</p>

        </div>
    </div>
    </div>

