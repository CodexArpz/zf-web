<h2>ZF-673: Setting $_POST or $_GET to NULL creates problem for Zend_Controller_Request_Http</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2006-12-20T15:34:39.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2007-07-05T14:43:35.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>0.8.0 (21/Feb/07)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Darby Felton (darby)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Filter</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Zend_Controller_Request_Http may cause an error after using Zend_Filter_Input where $_POST (or $_GET) is set to NULL when using strict filtering, e.g.:</p>

<p>{{$filterPost = new Zend_Filter_Input($_POST);}}</p>

<p>The problem occurs in this method of Zend_Controller_Request_Http:</p>

<pre class="highlight"><code>
public function getParams()
{
    return $this-&gt;_params + $_GET + $_POST;
}
</code></pre>

<p>causing a "<em>Fatal error:</em> Unsupported operand types in .../Zend/Controller/Request/Http.php on line 601" because $_POST is NULL. I guess this is a problem with Zend_Filter_Input which could be fixed by setting $_POST to an empty array instead of NULL when using strict filtering.</p>

<p>A simple workaround for now is to turn off strict filtering:</p>

<p>{{$filterPost = new Zend_Filter_Input($_POST, false);}}</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2006-12-28T18:47:05.000+0000</p> 
        <div class="body">
            <p>Assigning to Darby.  Scheduling for 0.8 release.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Darby Felton (darby) on 2007-02-08T14:01:30.000+0000</p> 
        <div class="body">
            <p>One cannot expect to "reset" the $_POST variable to null, an array, or any other value for that matter, without consequences when working with other code that depends on $_POST. In general, I think it cannot be best practices to empty the superglobals or to destroy the reference to the source data provided to a method. In any case, the component does not prevent another reference to the source data from existing:</p>

<pre class="highlight"><code>
$mypost = $_POST;
$zfi = new Zend_Filter_Input($_POST);
// $mypost is unaffected
</code></pre>

        </div>
    </div>
    </div>

