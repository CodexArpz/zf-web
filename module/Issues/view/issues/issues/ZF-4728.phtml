<h2>ZF-4728: setReadOnly not recursive</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2008-10-28T06:24:29.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-03-21T08:38:43.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.8.0 (30/Apr/09)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Rob Allen (rob)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Config</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>I have to say, that i dont know, if this behaviour is mentioned as issue before. ;)</p>

<p>I thought, that the method <em>setReadOnly()</em> acts like the constructor-parameter <em>allowModifications</em>, so Im able to build up a configuration from different sources and merge it into one, but the method only locks the object itself, not the containing objects, as it will be done when setting the constructor-parameter to <em>false</em>.</p>

<pre class="highlight"><code>$array = array ('key1'=&gt;1,'key2'=&gt;array('a'=&gt;1,'b'=&gt;2));
$c = new Zend_Config($array,false);
$c-&gt;key2-&gt;a = 3;</code></pre>

<p>Will throw an Exception as expected.</p>

<pre class="highlight"><code>$array = array ('key1'=&gt;1,'key2'=&gt;array('a'=&gt;1,'b'=&gt;2));
$c = new Zend_Config($array,true);
$c-&gt;setReadOnly();
$c-&gt;key2-&gt;a = 3;</code></pre>

<p>Will not throw an Exception (as not expected).</p>

<p>Changing <em>setReadOnly()</em></p>

<pre class="highlight"><code>    public function setReadOnly()
    {
        $this-&gt;_allowModifications = false;
    }</code></pre>

<p>to</p>

<pre class="highlight"><code>    public function setReadOnly()
    {
        $this-&gt;_allowModifications = false;
        foreach (this-&gt;_data as $value) {
          if ($value instanceof Zend_Config) {
            $value-&gt;setReadOnly();
          }
        }
    }</code></pre>

<p>will also lock nested objects and will make the behaviour equal to that of the constructor-parameter.
And makes the method more useful ;) I dont see, why i should be able to lock a config, but are able to change deeper config settings.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Tomoaki Kosugi (noopable) on 2009-03-13T04:43:21.000+0000</p> 
        <div class="body">
            <p>I usually use this method to apply readOnly to the current iteration's elements.Because i separate readonly segment and allowModificatable segment . 
I prefer to add a method setReadOnlyRecursively() as follows for more flexibilty and backward compatibility.</p>

<pre class="highlight"><code>
    public function setReadOnlyRecursively()
    {
        $this-&gt;setReadOnly();
        foreach ($this as $value) {
            if ($value instanceof Zend_Config) {
                $value-&gt;setReadOnlyRecursively();
            }
        }
    }
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Sebastian Krebs (kingcrunch) on 2009-03-16T15:34:45.000+0000</p> 
        <div class="body">
            <p>BC is an argument, i see. But as segment i understand that as the current element including its childs. In my eyes its seems confusing, that I can set an element as read only, but its childs are not.
I dont mind to use another method instead, but it should be possible to do so. An optional parameter will also not break BC.</p>

<pre class="highlight"><code>public function setReadOnly($recursive = false)
    {
        $this-&gt;_allowModifications = false;
        if ($recursive) {
          foreach (this-&gt;_data as $value) {
            if ($value instanceof Zend_Config) {
              $value-&gt;setReadOnly();
            }
          }
        }
    }</code></pre>

<p>But keep the BC will not solve the different behaviours beetween constructor-parameter and method.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Tomoaki Kosugi (noopable) on 2009-03-16T18:07:45.000+0000</p> 
        <div class="body">
            <p>Yes , I think that it would be advisable to accord the natual code priority over BC.So, I'm fine with that an optional parameter set to true.
So,like this. I corrected some point.</p>

<pre class="highlight"><code>
public function setReadOnly($recursive = true)
    {
        $this-&gt;_allowModifications = false;
        if ($recursive) {
          foreach ($this-&gt;_data as $value) {
            if ($value instanceof Zend_Config) {
              $value-&gt;setReadOnly($recursive);
            }
          }
        }
    }
</code></pre>

<p>By the way ,actually setting readonly partially seems confusing .By ordinary a segment is mentioned as the element including its children.</p>

<p>But we don't have any options to separately set readonly to the value element in the config.Therefore, in this case,  this-&gt;setReadOnly's targets are that this-&gt;_data excluding objects instanceof Zend_Config. There is a difference between iterator and recursive iterator.</p>

<p>For instance;</p>

<pre class="highlight"><code>
admin = foo
controllers.front = index
controllers.some = bar
</code></pre>

<pre class="highlight"><code>
controllers.some = special
</code></pre>

<p>In this case,"$config-&gt;setReadOnly(false);" allows me to set readOnly to admin, and  allowModification to controllers.</p>

<pre class="highlight"><code>
$config = Zend_Config_Ini("base.ini", null, true);
$extraConf = Zend_Config_Ini("extra.ini", null, false);
$config-&gt;setReadOnly(false);
$config-&gt;controllers-&gt;merge($extraConf-&gt;controllers);
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Rob Allen (rob) on 2009-03-17T02:02:50.000+0000</p> 
        <div class="body">
            <p>I see this as a bug that should be fixed rather than B/C behaviour that should be maintained. Clearly if you call setReadOnly() you expect that the entire config object is now read only and cannot be modified.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Tomoaki Kosugi (noopable) on 2009-03-17T02:55:00.000+0000</p> 
        <div class="body">
            <p>Fair enough. I'll leave it up to you. 
Thanks</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Rob Allen (rob) on 2009-03-21T08:38:43.000+0000</p> 
        <div class="body">
            <p>Fixed in svn <a href="http://framework.zend.com/code/changelog/Standard_Library/?cs=14408">r14408</a>.</p>

        </div>
    </div>
    </div>

