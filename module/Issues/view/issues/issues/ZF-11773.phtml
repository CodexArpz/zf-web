<h2>ZF-11773: Zend_Db_Statement_Oracle: Unable to set bind data type</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2011-09-27T19:15:10.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2011-09-27T19:18:18.000+0000</dd>

    <dt>Status:</dt>
    <dd>Open</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Tuan Doan (leetcoder)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Ralph Schindler (ralph)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Db_Adapter_Oracle</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Unable to set bind data type.  By default, all binding are set as SQLT_CHR, therefore integer variables and other data type are being bind as char instead of the appropriate data type.</p>

<p>Workaround:</p>

<p>check for $params[$name] data type and setting the fourth 5th parameter to the correct type</p>

<p>if (!@oci_bind_by_name($this-&gt;_stmt, $name, $params[$name], -1,{color:red}$type{color})) {
    $error = true;
    break;
}</p>

<pre class="highlight"><code>
    SQLT_BFILEE or OCI_B_BFILE - for BFILEs;
    SQLT_CFILEE or OCI_B_CFILEE - for CFILEs;
    SQLT_CLOB or OCI_B_CLOB - for CLOBs;
    SQLT_BLOB or OCI_B_BLOB - for BLOBs;
    SQLT_RDD or OCI_B_ROWID - for ROWIDs;
    SQLT_NTY or OCI_B_NTY - for named datatypes;
    SQLT_INT or OCI_B_INT - for integers;
    SQLT_CHR - for VARCHARs;
    SQLT_BIN or OCI_B_BIN - for RAW columns;
    SQLT_LNG - for LONG columns;
    SQLT_LBI - for LONG RAW columns;
    SQLT_RSET - for cursors created with oci_new_cursor().

</code></pre>

<p>Zend/Db/Statement/Oracle.php</p>

<pre class="highlight"><code> 
    public function _execute(array $params = null)
    {
        $connection = $this-&gt;_adapter-&gt;getConnection();

        if (!$this-&gt;_stmt) {
            return false;
        }

        if ($params !== null) {
            if (!is_array($params)) {
                $params = array($params);
            }
            $error = false;

            foreach (array_keys($params) as $name) {
                if (!@oci_bind_by_name($this-&gt;_stmt, $name, $params[$name], -1)) {
                    $error = true;
                    break;
                }
            }

            if ($error) {
                /**
                 * @see Zend_Db_Adapter_Oracle_Exception
                 */
                require_once 'Zend/Db/Statement/Oracle/Exception.php';
                throw new Zend_Db_Statement_Oracle_Exception(oci_error($this-&gt;_stmt));
            }
        }

        $retval = @oci_execute($this-&gt;_stmt, $this-&gt;_adapter-&gt;_getExecuteMode());
        if ($retval === false) {
            /**
             * @see Zend_Db_Adapter_Oracle_Exception
             */
            require_once 'Zend/Db/Statement/Oracle/Exception.php';
            throw new Zend_Db_Statement_Oracle_Exception(oci_error($this-&gt;_stmt));
        }

        $this-&gt;_keys = Array();
        if ($field_num = oci_num_fields($this-&gt;_stmt)) {
            for ($i = 1; $i &lt;= $field_num; $i++) {
                $name = oci_field_name($this-&gt;_stmt, $i);
                $this-&gt;_keys[] = $name;
            }
        }

        $this-&gt;_values = Array();
        if ($this-&gt;_keys) {
            $this-&gt;_values = array_fill(0, count($this-&gt;_keys), null);
        }

        return $retval;
    }
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>
    <p class="comments">No comments to display</p>
    
</div>

