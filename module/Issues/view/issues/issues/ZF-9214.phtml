<h2>ZF-9214: Allowing non complex types (WSDL XSD) in WSDL output.</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Patch</dd>

    <dt>Created:</dt>
    <dd>2010-02-19T07:38:51.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-11-20T21:37:48.000+0000</dd>

    <dt>Status:</dt>
    <dd>Open</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
        None
                    </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Soap_Wsdl</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
        <li><a href="/issues/secure/attachment/12768/w3c.php">w3c.php</a></li>
            <li><a href="/issues/secure/attachment/12769/w3cUsage.php">w3cUsage.php</a></li>
            <li><a href="/issues/secure/attachment/12767/ZendSoapAutoDiscovery_AllowMyWSDL.patch">ZendSoapAutoDiscovery_AllowMyWSDL.patch</a></li>
        </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Currently, the types that are catered for within the PHP-&gt;Zend-&gt;WSDL process are limited to PHP types and complex types comprised on PHP types.</p>

<p>Considering that the WSDL file can act as a contract between the client and the server, allowing for the standard types as defined in <a href="http://www.w3.org/TR/xmlschema11-2/datatypes.html#built-in-datatypes">http://w3.org/TR/xmlschema11-2/â€¦</a> would seem to be a worthwhile step.</p>

<p>The patch I've attached allows the server to supply a class name to Zend_Soap_AutoDiscover. The default is Zend_Soap_Wsdl, so backwards compatability is maintained.</p>

<p>The class must be a subclass of Zend_Soap_Wsdl. By overriding Zend_Soap_Wsdl::getType() in the subclass, you can allow for additional types.</p>

<p>In my case, a subset of the W3C XSD data types.</p>

<p>This allows the WSDL file to be generated with the W3C XSD types being used in the DocBlocks for the SOAP service.</p>

<p>It does NOT deal with the content of the properties purporting to be these types. It is just to make a WSDL file.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Richard Quadling (rquadling) on 2010-02-19T08:00:03.000+0000</p> 
        <div class="body">
            <p>This patch will allow you to subclass Zend_Soap_Wsdl and supply the name of the subclass to Zend_Soap_AutoDiscover to allow you to define additional non-complex types by overriding Zend_Soap_Wsdl::getType() and calling the parent::getType() if the requested type is not known.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Richard Quadling (rquadling) on 2010-02-19T08:03:27.000+0000</p> 
        <div class="body">
            <p>Typo</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Richard Quadling (rquadling) on 2010-02-19T08:04:25.000+0000</p> 
        <div class="body">
            <p>Example of a Zend_Soap_Wsdl subclass.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Richard Quadling (rquadling) on 2010-02-19T08:06:35.000+0000</p> 
        <div class="body">
            <p>Example usage (just a snippet) of the use of the $wsdlClass parameter in the constructor of Zend_Soap_AutoDiscover.</p>

        </div>
    </div>
    </div>

