<h2>ZF-1398: Solution for running non-prepared SQL statements</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2007-05-16T14:42:14.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-05-06T13:02:40.000+0000</dd>

    <dt>Status:</dt>
    <dd>Closed</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Bill Karwin (bkarwin)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Adam Lundrigan (adamlundrigan)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Db</li>
            <li>state:need-feedback</li>
            <li>zf-caretaker-adamlundrigan</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-1590">ZF-1590</a></li>
            <li><a href="/issues/browse/ZF-4767">ZF-4767</a></li>
            <li><a href="/issues/browse/ZF-5793">ZF-5793</a></li>
            <li><a href="/issues/browse/ZF-2119">ZF-2119</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
        <li><a href="/issues/secure/attachment/12761/db.patch">db.patch</a></li>
        </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>The default implementation of the query() method in Zend_Db_Adapter_Abstract performs a prepare() on every SQL statement.</p>

<p>Some SQL statements are incompatible with prepare().  This varies by RDBMS brand and client API design, but there are usually some such statements.</p>

<p>For example, MySQL does not support preparing DDL or SHOW statements.</p>

<p>This is a feature request to add some method to Zend_Db_Adapter_Abstract to execute a SQL statement without performing a prepare().  In the case of PDO adapters, this is the exec() method of the underlying PDO object.  But other database extensions have different methods to achieve this goal.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-05-18T15:26:59.000+0000</p> 
        <div class="body">
            <p>Non-prepared statements are also important for MySQL because the MySQL Query Cache feature cannot cache prepared statements.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by julien PAULI (doctorrock83) on 2007-05-30T06:13:14.000+0000</p> 
        <div class="body">
            <p>Yeah, just read that please : <a href="http://netevil.org/node.php?uuid=444a6017-0548-2459-2943-44a601714d58">http://netevil.org/node.php/…</a></p>

<p>I don't know if that bug has already been reported, but i met it on RC1.0 under a linux server.
The query was</p>

<pre class="highlight"><code>

using PDO under Mysql(4.1) and Linux throws an exception 'SQLSTATE[HY000]: General error: 2030 This command is not supported in
the prepared statement protocol yet' in {file}

The only way to fix it was to modify the Zend/Db/Adapter/PdoAbstract.php by adding </code></pre>

<p>There is no way to change that behavior other than modify it manually in the framework source. And as said here : there is no was to prevent adapter from using prepared statements...</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Darby Felton (darby) on 2007-12-10T10:24:26.000+0000</p> 
        <div class="body">
            <p>Related to Bill's comment: <a href="http://fr3.php.net/manual/en/function.PDO-prepare.php#79178">http://fr3.php.net/manual/en/…</a></p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-03-25T20:44:00.000+0000</p> 
        <div class="body">
            <p>Please categorize/fix as needed.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Till Klampaeckel (till) on 2008-11-01T07:12:08.000+0000</p> 
        <div class="body">
            <p>Of course I only found this issue after opening another one. Can someone mark ZF-4767 as duplicate. Apologies for the extra work.</p>

<p>Also, what's the status of this issue? I'd like to see it fixed soon. :-)</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Till Klampaeckel (till) on 2008-11-01T10:28:16.000+0000</p> 
        <div class="body">
            <p>Adding the link, to stress the importance of the issue:
<a href="http://www.nabble.com/Zend_DB-performance-issue-td14233508.html">http://nabble.com/Zend_DB-performance-issue-td1423…</a></p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ralph Schindler (ralph) on 2009-01-09T13:47:53.000+0000</p> 
        <div class="body">
            <p>I will evaluate this with the next 2 weeks.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Till Klampaeckel (till) on 2009-02-26T11:19:40.000+0000</p> 
        <div class="body">
            <p>This is still a blocker for me.</p>

<p>Below is some code which I started using in some of my projects to use unprepared queries and to utilize the query cache to a certain extend. The {{__call()}} is a way to debug this and to find methods I didn't cover yet.</p>

<p>This is not final but a work in progress and an idea. I could extend it, etc. if I get some feedback here.</p>

<pre class="highlight"><code>
&lt;?php
/**
 * @see Zend_Db_Statement
 */
require_once 'Zend/Db/Statement.php';

class Zend_Db_Statement_Mysqli_Unprepared extends Zend_Db_Statement
{
    protected $_fetchMode, $_result;

    public function __construct($result, $fetchMode)
    {
        $this-&gt;_result    = $result;
        $this-&gt;_fetchMode = $fetchMode;
    }

    public function fetchAll($fetchMode = null)
    {
        $data = array();
        while ($row = $this-&gt;fetch($fetchMode)) {
            array_push($data, $row);
        }
        return $data;
    }

    public function fetchColumn($col = 0)
    {
        $row = $this-&gt;fetch(Zend_Db::FETCH_NUM);
        if (isset($row[$col])) {
            return $row[$col];
        }
        return false; // FIXME
    }

    public function fetch($fetchMode = null)
    {
        if ($fetchMode === null) {
            $fetchMode = $this-&gt;_fetchMode;
        }

        switch ($fetchMode) {
            default:
            case Zend_Db::FETCH_BOTH:
                $fetchMode = MYSQLI_BOTH;
                break;

            case Zend_Db::FETCH_ASSOC:
                $fetchMode = MYSQLI_ASSOC;
                break;

            case Zend_Db::FETCH_NUM:
                $fetchMode = MYSQLI_NUM;
                break;
        }

        return $this-&gt;_result-&gt;fetch_array($fetchMode);
    }

    public function __call($method, $args)
    {
        die("$method");
    }
}
</code></pre>

<p>Here is a patch to Zend_Db_Adapter_Abstract:</p>

<pre class="highlight"><code>
Index: library/Zend/Db/Adapter/Abstract.php
===================================================================
--- library/Zend/Db/Adapter/Abstract.php    (revision 12330)
+++ library/Zend/Db/Adapter/Abstract.php    (working copy)
@@ -132,6 +132,12 @@
     );
 
     /**
+     * @var boolean Defines whether the adapter uses prepared statemtents.
+     *              The default is 'true' to avoid a BC-break.
+     */
+    protected $_usePreparedStatements = true;
+
+    /**
      * Constructor.
      *
      * $config is an array of key/value pairs or an instance of Zend_Config
@@ -406,7 +412,7 @@
      * @param  mixed  $sql  The SQL statement with placeholders.
      *                      May be a string or Zend_Db_Select.
      * @param  mixed  $bind An array of data to bind to the placeholders.
-     * @return Zend_Db_Statement_Interface
+     * @return mixed  Zend_Db_Statement_Interface or query result.
      */
     public function query($sql, $bind = array())
     {
@@ -425,13 +431,26 @@
             $bind = array($bind);
         }
 
-        // prepare and execute the statement with profiling
-        $stmt = $this-&gt;prepare($sql);
-        $stmt-&gt;execute($bind);
+        if ($this-&gt;_usePreparedStatements === true) {
+            // prepare and execute the statement with profiling
+            $stmt = $this-&gt;prepare($sql);
+            $stmt-&gt;execute($bind);
 
-        // return the results embedded in the prepared statement object
-        $stmt-&gt;setFetchMode($this-&gt;_fetchMode);
-        return $stmt;
+            // return the results embedded in the prepared statement object
+            $stmt-&gt;setFetchMode($this-&gt;_fetchMode);
+            return $stmt;
+        }
+
+        if (!empty($bind)) {
+            throw new Zend_Db_Exception('You can\'t disable prepared statements, yet supply parameters to bind.');
+        }
+
+        $fetchClass = get_class($this) . '_Fetch';
+        Zend_Loader::loadClass($fetchClass);
+        return new $fetchClass(
+            $this-&gt;getConnection()-&gt;query($sql),
+            $this-&gt;_fetchMode
+        );
     }
 
     /**
@@ -1022,6 +1041,24 @@
     }
 
     /**
+     * Enable or disable prepared statements here.
+     *
+     * @param bool $use 'true' or 'false'.
+     *
+     * @return self
+     * @uses   self::$_usePreparedStatements
+     */
+    public function usePrepared($use)
+    {
+        if ($use === true) {
+            $this-&gt;_usePreparedStatements = $use;
+            return $this;
+        }
+        $this-&gt;_usePreparedStatements = false;
+        return $this;
+    }
+
+    /**
      * Abstract Methods
      */
</code></pre>

<p>And here is some code demonstrating usage:</p>

<pre class="highlight"><code>
&lt;?php
set_include_path('.:' . dirname(__FILE__) . '/trunk/library');

require_once 'Zend/Loader.php';
require_once 'Zend/Db.php';
require_once 'Zend/Db/Select.php';

try {
    $db = Zend_Db::factory(
        'Mysqli',
        array(
            'username' =&gt; 'root',
            'password' =&gt; '',
            'host'     =&gt; 'localhost',
            'dbname'   =&gt; 'mysql'
        )
    );
    $db-&gt;usePrepared(true);

    $select = $db-&gt;select();
    $select-&gt;from('user', array('Host', 'User'));

    var_dump($db-&gt;fetchAssoc($select));


    $db-&gt;usePrepared(false);

    $select-&gt;reset();
    $select = $db-&gt;select();
    $select-&gt;from('user', array('Host', 'User'));

    var_dump($db-&gt;fetchAssoc($select));

} catch (Exception $e) {
    die($e-&gt;getMessage());
}
</code></pre>

<p>I briefly ran tests and it didn't break anything, but no guarantees. ;-) I also cloned the tests for the Mysqli driver and ran them with {{usePrepared()}} and it worked. This is just an idea.</p>

<p>The {{usePrepared()}} call is more or less an idea to change the behaviour on run time. I also envision a config option which you can pass in with a {{Zend_Config}} object or an array.</p>

<p>I think by default this should be disabled but that would break BC so I guess I could live with it the other way around too. Haven't made up my mind up though, I just needed to get rid off prepared queries.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Benjamin Eberlei (beberlei) on 2009-02-26T14:26:08.000+0000</p> 
        <div class="body">
            <p>The fix looks good, by default i would enable the preparing of statements and allow to pass a config value to disable it.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ralph Schindler (ralph) on 2009-07-17T08:48:06.000+0000</p> 
        <div class="body">
            <p>Why is there the requirement that non-preparable queries must go through query?</p>

<p>Why not add a method called execute() ?
OR- why not simply use the Statement? or the getConnection()?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Josh Butts (jimbojsb) on 2009-08-17T11:16:20.000+0000</p> 
        <div class="body">
            <p>I agree that this should be possible to do, but don't necessary agree with the API implementation outlined in the patch above</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Pieter Kokx (kokx) on 2010-02-18T11:21:39.000+0000</p> 
        <div class="body">
            <p>I attached a patch for this issue. It does only contain a fix for PDO adapters yet, other adapters will fail because there is an abstract function missing.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Adam Lundrigan (adamlundrigan) on 2011-11-17T02:08:06.000+0000</p> 
        <div class="body">
            <p>This issue is specifically mentioned in the Zend\Db RFC for ZFv2.  However, is this something which should be fixed in ZFv1 as well?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Adam Lundrigan (adamlundrigan) on 2012-05-06T13:02:40.000+0000</p> 
        <div class="body">
            <p>This won't be fixed in ZFv1</p>

        </div>
    </div>
    </div>

