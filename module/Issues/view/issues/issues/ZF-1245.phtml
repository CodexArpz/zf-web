<h2>ZF-1245: Implement ArrayAccess</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>New Feature</dd>

    <dt>Created:</dt>
    <dd>2007-04-11T05:40:53.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2007-07-05T14:44:04.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Rob Allen (rob)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Config</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>It would be cool if the SPL ArrayAccess feature will also be added to this nice Class.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-04-12T16:04:26.000+0000</p> 
        <div class="body">
            <p>Assign to Darby.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Darby Felton (darby) on 2007-04-12T16:29:23.000+0000</p> 
        <div class="body">
            <p>Minor update to summary and affects version 0.9.2.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Rob Allen (rob) on 2007-05-30T16:13:05.000+0000</p> 
        <div class="body">
            <p>As ArrayAccess implementation doesn't allow the object to be used with the array_XXX() functions, I think that there is very little benefit in adding this functionality to Zend_Config.</p>

<p>If you need an array, then Zend_Config::toArray() will generate one for you.</p>

<p>Have I missed a use-case where ArrayAccess makes something possible or much easier than the current access functionality?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Marco Kaiser (bate) on 2007-05-31T03:12:58.000+0000</p> 
        <div class="body">
            <p>The reason is very easy, because if you use other templating system (ie. smarty) its not possible to make things like
$config-&gt;value-&gt;subvalue</p>

<p>$config.value.subvalue is possible this the one reason the other reason is, you can extend the class with more features and logic.
Otherwise change the constructor from Zend_Config calls to self:: calls because it makesit very hard to build around this class with such an nested forced type.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Rob Allen (rob) on 2007-05-31T03:46:35.000+0000</p> 
        <div class="body">
            <p>We use {$obj-&gt;property} with no problems within Smarty with our ZF application. What error message are you getting?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Marco Kaiser (bate) on 2007-05-31T04:28:17.000+0000</p> 
        <div class="body">
            <p>[system]
application.name = "TestApplication"
application.version.major = 1
application.version.minor = 0
application.version.revision = 156</p>

<p>this is a config application example</p>

<p>this results in an object
that looks like this:</p>

<p>Zend_Config Object
(
    [_data:protected] =&gt; Array
    (
        [application] =&gt; Zend_Config Object
        (
            [_data:protected] =&gt; Array
            (
                [name] =&gt; TestApplication
                [version] =&gt; Zend_Config Object
                (
                    [_data:protected] =&gt; Array
                    (
                        [major] =&gt; 1
                        [minor] =&gt; 0
                        [revision] =&gt; 156
                    )
                )
            )
        )
    )
)</p>

<p>to access this in a smarty template you can just use
$config.version.major and not
$config-&gt;version-&gt;major</p>

<p>the way to build a own abstraction is easy like
class my_config extends Zend_Config implements ArrayAccess
{
  public function offsetExists($offset)
  public function offsetGet($offset)
  public function offsetSet($offset, $value)
  public function offsetUnset($offset)
}</p>

<p>but the parent constructor from Zend_Config does stuff like
$this-&gt;_data[$key] = new Zend_Config($value, $this-&gt;_allowModifications);</p>

<p>this makes it impossible to get a deep recursion with my own abstraction. The way to overload the constructor are
possible but is not the clean way. It would be better to change the constructor and implement the arrayaccess feature to
add own functionality like a config object with methods and array access.</p>

<p>{if $config-&gt;hasVersion()}
{$config-&gt;version-&gt;id}
{/if}</p>

<p>just one example ... :)</p>

        </div>
    </div>
    </div>

