<h2>ZF-2523: Zend_Filter_Inflector default null 'filter' method param</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2008-01-29T19:18:52.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-06-25T12:28:17.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.9.0 (31/Jul/09)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Aldo Armiento (aldo)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Thomas Weidner (thomas)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Filter</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>@version    $Id: Inflector.php 7078 2007-12-11 14:29:33Z matthew $</p>

<p>Zend_Filter_Inflector method 'filter' needs at least one param ($source).
If you define <em>only</em> 'static' rules (without, for example, default ':' prefix) and set value to each one and you don't need to replace it with a $source array you should call 'filter' method without param.</p>

<p>Sure, as workaround you can call filter(null), filter(array()), ...</p>

<p>Actual code:</p>

<pre class="highlight"><code>
public function filter($source)
{
    [...]
}
</code></pre>

<p>Proposed code:</p>

<pre class="highlight"><code>
public function filter($source = null)
{
    [...]
}
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-04-18T17:11:46.000+0000</p> 
        <div class="body">
            <p>Please evaluate and categorize/assign as necessary.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ralph Schindler (ralph) on 2009-01-10T11:07:25.000+0000</p> 
        <div class="body">
            <p>Can you supply a valid use case?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Aldo Armiento (aldo) on 2009-02-17T13:45:03.000+0000</p> 
        <div class="body">
            <pre class="highlight"><code>
$sFilenameFormat = 'log%t.txt';
$aFilenameFormatRules = array('t' =&gt; time());
$zendInflector = new Zend_Filter_Inflector($sFilenameFormat, $aFilenameFormatRules);
$zendInflector-&gt;setTargetReplacementIdentifier('%');
echo $zendInflector-&gt;filter(null);
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2009-06-20T05:31:23.000+0000</p> 
        <div class="body">
            <p>There is one problem with this suggestion.</p>

<p>It breaks the filter interface.</p>

<p>The filter interface defines one parameter to be in the filter method without a default value.
So the proposed change can not be applied.</p>

<p>Erasing the interface would mean that you can't use this filter within other components... can't be done.</p>

<p>Changing the interface to allow optional parameters is also a problem as this would mean to change all existing and also all user-land filters.</p>

<p>Actually I see no way to allow</p>

<p>$inflector-&gt;filter();</p>

<p>@ralph:
Your opinion ?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2009-06-25T12:28:17.000+0000</p> 
        <div class="body">
            <p>Closing as "won't fix".</p>

<p>Filters are converting/filtering input and create output.
Therefor a filter needs to have a input.</p>

<p>Changing the interface would lead to inconsistency with other existing filters even userland filters.
As there is no way to allow both, this issue is closed.</p>

        </div>
    </div>
    </div>

