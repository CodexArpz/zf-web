<h2>ZF-4684: Custom cache test function</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>New Feature</dd>

    <dt>Created:</dt>
    <dd>2008-10-23T00:55:12.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2010-03-01T10:51:18.000+0000</dd>

    <dt>Status:</dt>
    <dd>Postponed</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>Next Major Release ()</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Marc Bennewitz (private) (mabe)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Cache</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>For large project those have huge cache it takes very long time to clean cached data. 
I want to implement the idea of Zend_Cache_Frontend_File in Zend_Cache_Core, the cache validity will depend on the user defined function. 
The idea is not to clean all cache data after each modification, but let user defined function choose to cache or not</p>

<p>Example:
Lets assume we save data in the following format:</p>

<pre class="highlight"><code>
$cacheObject-&gt;save($someData, 'news_' . $newsid, array('news', 'english', 'sport'));
</code></pre>

<pre class="highlight"><code>
function expire_check_function ($expireTime, $cacheId, $tags) {

    // here we get last news modification time that taged as sport and check if cache is expired or not
    return  $newsObject-&gt;getLastModification() &gt; $expireTime;

}
</code></pre>

<p>Then user defined function will check if cache data is expired or not depeding on cache id and tags</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Fabien MARTY (fab) on 2008-10-27T11:46:37.000+0000</p> 
        <div class="body">
            <p>if you have huge cache, set "automaticCleaningFactor=0" ans do the garbage collection in a separate process (unix shell...)</p>

<p>try also the sqlite backend if you do some cleaning on tags</p>

<p>your idea is good but I won't implement a such thing until 2.0 release (I need big changes and API break to do this in proper way)</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Fabien MARTY (fab) on 2009-07-17T11:03:33.000+0000</p> 
        <div class="body">
            <p>change Assignee because I'm inactive now</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Marc Bennewitz (private) (mabe) on 2010-03-01T10:50:51.000+0000</p> 
        <div class="body">
            <p>This only works on backends which can read expired data like file and sqlite.</p>

<p>For ZF 2.0 I'm planning the following:
Storing the mtime on save instead of mtime + expire time and check the lifetime on load on these backends than you could calculate your expire time by self.</p>

<p>Example:
save some data
  - the frontend calls save on backend with the default lifetime
  - on  backends like file and sqlite the given lifetime will be ignored
  - on other backends the given lifetime (default) will be used</p>

<p>read some data by set another lifetime as the default
  - the frontend calls load on backend with the changed lifetime
  - on backends like file and sqlite the given lifetime will be used to check if expired (mtime+lifetime &lt; now)
  - on other backends the given lifetime (own) will be ignored</p>

<p>Would this close your problem ?</p>

        </div>
    </div>
    </div>

