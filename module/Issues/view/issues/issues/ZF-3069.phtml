<h2>ZF-3069: Cannot remove a decorator based on another decorator (with solution)</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2008-04-08T08:27:45.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2008-05-05T11:44:41.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li> 1.5.2 (15/May/08)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Matthew Weier O'Phinney (matthew)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Form</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>This example shows the problem.</p>

<pre class="highlight"><code>

$form=new Zend_Form;
        
$form-&gt;addElement(
    'text',
    'mytextfield',
    array(
        'label' =&gt; 'My Textfield',
    )
);

$element=$form-&gt;getElement('mytextfield');

$element-&gt;addDecorator(array('MyDecorator'=&gt;'HtmlTag'), array( 'tag' =&gt; 'dl', 'separator'=&gt;PHP_EOL));

print_r(array_keys($element-&gt;getDecorators()); // Display element decorators

$element-&gt;removeDecorator('MyDecorator'); // Remove MyDecorator

print_r(array_keys($element-&gt;getDecorators()); // MyDecorator hasn't been removed, HtmlTag decorator has been removed instead.

</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Rubén Moraleda (xplorastudios) on 2008-04-08T08:39:19.000+0000</p> 
        <div class="body">
            <p>My proposed solution:</p>

<p>Swap this:</p>

<pre class="highlight"><code>
/**
 * Remove a single decorator
 *
 * @param  string $name
 * @return bool
 */
public function removeDecorator($name)
{
    $decorator = $this-&gt;getDecorator($name);
    if ($decorator) {
        $name = get_class($decorator);
        unset($this-&gt;_decorators[$name]);
        return true;
    }

    return false;
}
</code></pre>

<p>For this:</p>

<pre class="highlight"><code>
/**
 * Remove a single decorator
 *
 * @param  string $name
 * @return bool
 */
public function removeDecorator($name)
{
    $decorator = $this-&gt;getDecorator($name);
    if ($decorator) {
        unset($this-&gt;_decorators[$name]);
        return true;
    }

    return false;
}
</code></pre>

<p>At Zend/Form/Element.php</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Rubén Moraleda (xplorastudios) on 2008-04-08T09:40:14.000+0000</p> 
        <div class="body">
            <p>There was an error in my previous proposed solution. Here is the correct solution:</p>

<p>Swap this:</p>

<p>/**
 * Remove a single decorator
 *
 * @param  string $name
 * @return bool
 */
public function removeDecorator($name)
{
    $decorator = $this-&gt;getDecorator($name);
    if ($decorator) {
        $name = get_class($decorator);
        unset($this-&gt;_decorators[$name]);
        return true;
    }</p>

<pre><code>return false;
</code></pre>

<p>}</p>

<p>For this:</p>

<p>/**
 * Remove a single decorator
 *
 * @param  string $name
 * @return bool
 */
public function removeDecorator($name)
{
    $decorator = $this-&gt;getDecorator($name);
    if ($decorator) {
        if ( !isset( $this-&gt;_decorators[$name] ) ) $name = get_class($decorator);
        unset($this-&gt;_decorators[$name]);
        return true;
    }</p>

<pre><code>return false;
</code></pre>

<p>}</p>

<p>At Zend/Form/Element.php</p>

<p>The decorator will be deleted using his class name only if is not found by key name.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Rubén Moraleda (xplorastudios) on 2008-04-08T09:44:17.000+0000</p> 
        <div class="body">
            <p>2nd try.</p>

<p>Replace this:</p>

<pre class="highlight"><code>
/**
 * Remove a single decorator
 *
 * @param  string $name
 * @return bool
 */
public function removeDecorator($name)
{
    $decorator = $this-&gt;getDecorator($name);
    if ($decorator) {
        $name = get_class($decorator);
        unset($this-&gt;_decorators[$name]);
        return true;
    }

    return false;
}
</code></pre>

<p>For this:</p>

<pre class="highlight"><code>
/**
 * Remove a single decorator
 *
 * @param  string $name
 * @return bool
 */
public function removeDecorator($name)
{
    $decorator = $this-&gt;getDecorator($name);
    if ($decorator) {
        if ( !isset( $this-&gt;_decorators[$name] ) ) $name = get_class($decorator);
        unset($this-&gt;_decorators[$name]);
        return true;
    }

    return false;
}
</code></pre>

<p>At Zend/Form/Element.php</p>

<p>The decorator will be deleted using his class name only if is not found by the key name.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-04-18T13:16:14.000+0000</p> 
        <div class="body">
            <p>Please evaluate and categorize as necessary.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2008-04-22T12:13:34.000+0000</p> 
        <div class="body">
            <p>Scheduling for next mini release.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2008-05-05T08:42:43.000+0000</p> 
        <div class="body">
            <p>Fixed in trunk and 1.5 release branch as of r9365; applied fixes to form, element, and display group classes, as the issue was present in each.</p>

        </div>
    </div>
    </div>

