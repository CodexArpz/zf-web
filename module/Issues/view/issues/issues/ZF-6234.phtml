<h2>ZF-6234: The WSDL setComplexTypeStrategy function dont load the Strategy include</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2009-04-07T12:21:30.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-04-15T01:14:53.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Gabriel Vegas (gvegas)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Benjamin Eberlei (beberlei)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Soap_Wsdl</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>The param $strategy recive the values of:</p>

<p>Zend_Soap_Wsdl_Strategy_ArrayOfTypeSequence
Zend_Soap_Wsdl_Strategy_ArrayOfTypeComplex
...</p>

<p>but when you set the value for example "Zend_Soap_Wsdl_Strategy_ArrayOfTypeComplex"
the function try to create the class "Zend_Soap_Wsdl_Strategy_ArrayOfTypeComplex"
but without the include of the strategy files.</p>

<p>I just did a patch for my projects, but require a general solution.</p>

<pre class="highlight"><code>
    /**
     * Set a strategy for complex type detection and handling
     *
     * @todo Boolean is for backwards compability with extractComplexType object var. Remove it in later versions.
     * @param boolean|string|Zend_Soap_Wsdl_Strategy_Interface $strategy
     * @return Zend_Soap_Wsdl
     */
    public function setComplexTypeStrategy($strategy)
    {
        if($strategy === true) {
            require_once "Zend/Soap/Wsdl/Strategy/DefaultComplexType.php";
            $strategy = new Zend_Soap_Wsdl_Strategy_DefaultComplexType();
        } else if($strategy === false) {
            require_once "Zend/Soap/Wsdl/Strategy/AnyType.php";
            $strategy = new Zend_Soap_Wsdl_Strategy_AnyType();
        } else if(is_string($strategy)) {
//----------- Here --------------
            require_once "Zend/Soap/Wsdl/Strategy/ArrayOfTypeComplex.php";
//----------- End Here --------------

            if(class_exists($strategy)) {
                $strategy = new $strategy();
            } else {
                require_once "Zend/Soap/Wsdl/Exception.php";
                throw new Zend_Soap_Wsdl_Exception(
                    sprintf("Strategy with name '%s does not exist.", $strategy
                ));
            }
        }

        if(!($strategy instanceof Zend_Soap_Wsdl_Strategy_Interface)) {
            require_once "Zend/Soap/Wsdl/Exception.php";
            throw new Zend_Soap_Wsdl_Exception("Set a strategy that is not of type 'Zend_Soap_Wsdl_Strategy_Interface'");
        }
        $this-&gt;_strategy = $strategy;
        return $this;
    }
</code></pre>

<p>Regards</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Benjamin Eberlei (beberlei) on 2009-04-15T01:14:52.000+0000</p> 
        <div class="body">
            <p>There are several sides to this issue:</p>

<ol><li>class_exists triggers an autoload, if a handler is registered.</li>
<li>i don't want to add an dependency to Zend_Loader which i would have to do to call:</li>
</ol><pre class="highlight"><code>
Zend_Loader::loadClass($strategy);
</code></pre>

<p>at that point.</p>

<ol><li>require_once alone does not work, since you have to load a file and not a class.</li>
</ol><p>The dependency between the strategy and the wsdl class has to be wired in userland code, since there it is made explicit:</p>

<pre class="highlight"><code>
require_once 'MyWsdlStrategy.php';
$wsdl  = new Zend_Soap_Wsdl();
$wsdl-&gt;setComplexTypeStrategy(new MyStrategy());
</code></pre>

        </div>
    </div>
    </div>

