<h2>ZF-7766: Zend_Form and Zend_Filter_Input integration</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>New Feature</dd>

    <dt>Created:</dt>
    <dd>2009-09-03T04:58:30.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-09-04T05:50:45.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Matthew Weier O'Phinney (matthew)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Filter_Input</li>
            <li>Zend_Form</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>It would be really nice to be able to pass a Zend_Filter_Input instance to a form rather than set the validation and filtering on each element. That way the same form can be used with different filter/validation rules depending on context.</p>

<p>Jim Plush has a good write up with a similar concept at:
<a href="http://www.litfuel.net/plush/?postid=189">http://www.litfuel.net/plush/?postid=189</a></p>

<p>Likewise, it would be good to be able to pass in arrays of validator or filter chains to the form to be applied to the form elements.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2009-09-03T05:32:31.000+0000</p> 
        <div class="body">
            <p>Passing a Zend_Filter_Input object to Zend_Form will not work; the designs are distinctly different. Zend_FIlter_Input operates on sets of data, whereas with Zend_Form, the validators and filters are applied to individual elements.</p>

<p>I do have plans, however, to refactor Zend_Form_Element to allow attaching validation, filter, and decorator chains. However, this will need to wait until 2.0, as the design change would introduce BC breaks.</p>

<p>I'm marking this as "won't fix", but primarily as an indicator that this issue is too big for the issue tracker.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by David Muir (dmuir) on 2009-09-03T21:00:44.000+0000</p> 
        <div class="body">
            <p>Fair enough that the two are different.</p>

<p>I guess what I'm after is exposing an element's setOptions(), and add/set filters/validators methods to the form. That way you can easily pass in validators, filters etc and there's no need for any BC breakage.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2009-09-04T05:50:38.000+0000</p> 
        <div class="body">
            <p>I can see what you're getting at, but we actually chose <em>not</em> to do that design fairly early on. The idea was that the form itself shouldn't need to know anything about validators or filters. While we could add proxies that would pass the filter/validator chains on to the individual elements, I'll note that while we've done that with Decorators, it's been a nightmare to maintain and document (just having the capabilities raises many, many different expectations for different developers).</p>

<p>However, one thing you note, "exposing an element's setOptions()" raises an idea for me: we could potentially make a rule in addElement() that if the element already exists in the form, the options are passed to the element's setOptions() method. I'll make a note of this in my refactoring ideas.</p>

        </div>
    </div>
    </div>

