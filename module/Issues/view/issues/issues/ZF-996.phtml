<h2>ZF-996: Hooks for commit and rollback</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>New Feature</dd>

    <dt>Created:</dt>
    <dd>2007-03-01T12:15:46.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2007-07-05T14:43:53.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>0.9.3 (05/May/07)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Mark Gibson (jollytoad)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Bill Karwin (bkarwin)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Db</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>I'm developing an application that uses a transactional RDBMS (PostgreSQL)
and also stores data in the filesystem (for efficiency), and may also need to
duplicate data to a legacy non-transactional database.</p>

<p>Anyway, this raises the need for function calls after a commit or rollback.</p>

<p>I've developed a callback registration system for this in a helper class,
but it means I have to make transaction related calls to this helper class
rather than the db adapter.</p>

<p>I was wonder if this kind of functionality could be incorporated into the
Zend_Db_Adapter_Abstract class directly.</p>

<p>$adapter-&gt;registerCommit(array($obj, 'committed'), args...);</p>

<p>I can merge my implementation into the framework and provide the patches,
if you'd be interested.</p>

<p>Alternatively, allow more advanced transaction management by refactoring 
into its own class: Zend_Db_TransactionManager.</p>

<p>Set a custom transaction manager:
  $adapter-&gt;setTransactionManager(classname);</p>

<p>Transaction methods:
  $adapter-&gt;transaction-&gt;begin();
  $adapter-&gt;transaction-&gt;registerCommit(array($obj, 'committed'), args...);
  $adapter-&gt;transaction-&gt;registerCommit(array($obj, 'committed'), args...);
  $adapter-&gt;transaction-&gt;commit();</p>

<p>This could allow much more advanced management for the DBMS that
support it, without cluttering the API's of simpler systems.
eg. support for savepoints, prepared transactions (two-phase commit), etc.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-03-15T13:34:23.000+0000</p> 
        <div class="body">
            <p>Assigning Zend_Db issues to Bill Karwin.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-04-17T18:14:08.000+0000</p> 
        <div class="body">
            <p>We are choosing not to add this feature to Zend_Db.</p>

<p>If you have an application with complex requirements for transaction handling, you are encouraged to subclass the Zend_Db_Adapter and provide alternative logic for the commit() and rollback() methods.</p>

        </div>
    </div>
    </div>

