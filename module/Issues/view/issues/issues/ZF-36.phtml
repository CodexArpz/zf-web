<h2>ZF-36: Specify fetch mode for internal Zend_Db queries</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2006-06-19T23:03:24.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2007-07-05T14:43:07.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>0.8.0 (21/Feb/07)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Zend Framework (zend_framework)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Bill Karwin (bkarwin)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Db</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-618">ZF-618</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p><a href="http://framework.zend.com/developer/ticket/23">http://framework.zend.com/developer/ticket/23</a></p>

<p>Zend_Db_Adapter_Pdo_Mysql::describeTable() assumes that an array is return from the query but this might not be the case if Zend_Db_Adapter::setFetchMode() has been called.</p>

<p>Example: Zend_Db_Adapter::setFetchMode(Zend_Db::FETCH_OBJ)</p>

<p>This is a major problem when using the the Zend_Db_Table since Zend_Db_Adapter_Pdo_Mysql::describeTable() is called in the Zend_Db_Table::_setup().</p>

<p>Suggestion: I would suggest implementing Zend_Db_Adapter::restoreFetchMode() so that components can use their preferred fetch mode without affecting each other.</p>

<p>If needed Zend_Db_Adapter::setFetchMode() could store an stack of previous fetch modes so that the users program won't be affected by components calling each other.</p>

<p>Note: This problem probably exists in all the Zend_Db_Addapter_* classes but has not been verified.</p>

<p>See "Problem Area" below in code from Zend_Db_Adapter_Pdo_Mysql:</p>

<pre class="highlight"><code>
        public function describeTable($table) { debug_print_backtrace(); die;

                $sql = "DESCRIBE $table"; 
                $result = $this-&gt;fetchAll($sql); 
                $descr = array(); 
                foreach ($result as $key =&gt; $val) {

                        $descr[$val['field']] = array( // &lt;--Problem Area: Array Assumed

                                'name' =&gt; $val['field'], 
                                'type' =&gt; $val['type'],
                                'notnull' =&gt; (bool) ($val['null'] === ), // not null is empty, null is yes 
                                'default' =&gt; $val['default'],
                                'primary' =&gt; (strtolower($val['key']) == 'pri'),
                        );

                } 
                return $descr;
        }
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Zend Framework (zend_framework) on 2006-06-19T23:03:42.000+0000</p> 
        <div class="body">
            <pre class="highlight"><code>

Possible solution:-

Existing code:-

    public function describeTable($table)
    {
        $sql = "DESCRIBE $table";
        $result = $this-&gt;fetchAll($sql);
        $descr = array();
        foreach ($result as $key =&gt; $val) {
            $descr[$val['field']] = array(
                'name'    =&gt; $val['field'],
                'type'    =&gt; $val['type'],
                'notnull' =&gt; (bool) ($val['null'] != 'YES'), // not null is NO or empty, null is YES

                'default' =&gt; $val['default'],
                'primary' =&gt; (strtolower($val['key']) == 'pri'),
            );
        }
        return $descr;
    }

Replace with:-

    public function describeTable($table)
    {
        $sql = "DESCRIBE $table";
        $result = $this-&gt;query($sql);
        $result = $result-&gt;fetchAll(PDO::FETCH_ASSOC);
        $descr = array();
        foreach ($result as $key =&gt; $val) {
            $descr[$val['field']] = array(
                'name'    =&gt; $val['field'],
                'type'    =&gt; $val['type'],
                'notnull' =&gt; (bool) ($val['null'] != 'YES'), // not null is NO or empty, null is YES

                'default' =&gt; $val['default'],
                'primary' =&gt; (strtolower($val['key']) == 'pri'),
            );
        }
        return $descr;
    }

</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2006-11-13T15:14:34.000+0000</p> 
        <div class="body">
            <p>Changing fix version to 0.8.0.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2006-12-29T14:42:29.000+0000</p> 
        <div class="body">
            <p>Changed summary.</p>

<p>The latter solution is best, to specify the fetch mode on a case-by-case basis.  It should be applied throughout the Zend_Db classes, everywhere where internal queries depend on a certain fetch mode.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-01-24T21:09:32.000+0000</p> 
        <div class="body">
            <p>reformat to remove long line</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-02-07T21:05:24.000+0000</p> 
        <div class="body">
            <p>Fixed in revision 3284.</p>

        </div>
    </div>
    </div>

