<h2>ZF-5200: Cannot bind Zend_Db_Expr objects when using Zend_Db_Adapter_Pdo::query()</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2008-12-10T07:56:04.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-05-19T06:57:47.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Colin Guthrie (coling)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Ralph Schindler (ralph)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Db</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Trying to execute the following query will fail to produce expected results:</p>

<pre class="highlight"><code>
$ttl = 86400;
$expiry = new Zend_Db_Expr('DATE_ADD(NOW(), INTERVAL '.$db-&gt;quote($ttl).' SECOND)');
$db-&gt;query(
  'INSERT INTO entry_cache (entry_id,cachekey, expiry, data) VALUES (?, ?, ?, ?)
   ON DUPLICATE KEY UPDATE expiry = ?, data = ?',
  array($this-&gt;_entryId, $this-&gt;_identifier, $expiry, $data, $expiry, $data)
);
</code></pre>

<p>Where $db is a Zend_Db_Pdo_Adapter class (Mysql in this case);.</p>

<p>This code should work but it seems that the bind array is passed straight through to: Zend_Db_Statement_Pdo::_execute() method which in turn just passes it on to PDOStatement::execute();</p>

<p>Looking into the insert() and update() methods, it seems they handle Zend_Db_Expr objects prior to calling query().</p>

<p>While query is much more generic, and does not construct SQL statements for you it should still support Zend_Db_Expr bound columns.
At very least a big warning should be put in the API docs:
<a href="http://www.framework.zend.com/apidoc/core/Zend_Db/Adapter/Zend_Db_Adapter_Abstract.html#query">http://framework.zend.com/apidoc/core/â€¦</a></p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Colin Guthrie (coling) on 2009-01-28T04:50:08.000+0000</p> 
        <div class="body">
            <p>Still affects version 1.7.3.</p>

<p>I actually just got tripped up again by this :(</p>

<p>In most cases it can be worked around, but I still think this is a pretty major problem that should at least be documents... many times the query will not generate an error or throw and exception etc. especially when used with a fetchAll() or similar command which will just return an empty array as the expressions seem to be silently converted to strings and thus will simply not match if used in a WHERE condition. This can lead to pretty subtle programming bugs.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ralph Schindler (ralph) on 2009-05-18T11:34:23.000+0000</p> 
        <div class="body">
            <p>I am thinking that presence of a Zend_Db_Expr object in the bound parameters in query() should probably throw an exception (or some kind of use E_NOTICE) since the underlying Statement objects dont know what Zend_Db_Expr is and simply attempt to cast to a string, and use that string as a value as opposed to using it as unquoted SQL.</p>

<p>Ultimately, we do not want to support usage of Zend_Db_Expr here since it would require introspecting the actual SQL provided to query, thus reducing performance greatly (since it would require multiple types of preg_* and some logic to decide what a placeholder actually is and how to replace it then reconstruct the proper SQL string).</p>

<p>I am inclined to either provide the changes described above (exception and/or notice) or close as not an issue.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ralph Schindler (ralph) on 2009-05-18T11:55:29.000+0000</p> 
        <div class="body">
            <p>On further reflection, i think this is not an issue, and probably should simply be noted in the manual.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Colin Guthrie (coling) on 2009-05-19T03:31:05.000+0000</p> 
        <div class="body">
            <p>That's fair enough that it is not supported, but I would probably be more happy with an exception being thrown here to indicate the fact that this is invalid. Casting to a string prior to call is easy enough to do at the caller side if it's really what you want (highly unlikely) and as I said originally this can lead to some very subtle programming errors.</p>

<p>If I provide a patch for this, would you apply it? Also how would you prefer the check to work? Check for all bound colums and check to see if any is of type Zend_Db_Expr or check to see if any are not a string (!is_string())? I think the former is safer from an API perspective and does solve the main potential problem here.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ralph Schindler (ralph) on 2009-05-19T06:31:11.000+0000</p> 
        <div class="body">
            <p>that is tricky.  I've asked one person on zftalk.dev and they opted for not throwing an exception or error.</p>

<p>My reasoning is that there might be a use case where the developer might have been extending Zend_Db_Expr where the explicit casting might be generating a valid value (small edge case).  I would actually ask the mailing list before we what they ideal solution would be before we move forward with more restrictive functionality.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Colin Guthrie (coling) on 2009-05-19T06:57:46.000+0000</p> 
        <div class="body">
            <p>Hmm, true. I guess tho in that edge case it would be fairly easy to redefine the __toString() magic method too in order to avoid the exception. This would be especially true if the __toString() method inside Zend_Db_Expr() is refactored to allow for an argument to be passed to indicate whether or not to throw an exception, so the reimplementation would be pretty trivial/minimal (e.g. return $this-&gt;_toSqlString(false); or something similar).</p>

<p>But I think you are right in that asking the ML is probably the best way to canvas opinion :)</p>

        </div>
    </div>
    </div>

