<h2>ZF-882: isDate() accepts invalid dates</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2007-02-08T14:37:28.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2007-07-05T14:43:48.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>0.8.0 (21/Feb/07)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Gavin (gavin)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Locale</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>isDate() calls getDate()
getDate() calls _parseDate()
_parseDate() automatically fixes various problems with dates specified in the input string</p>

<p>However, isDate() probably should default to rejecting dates with the problems that are fixed by _parseDate().</p>

<p>Perhaps we need a new flag to toggle this behavior in _parseDate()?</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Gavin (gavin) on 2007-02-08T20:31:14.000+0000</p> 
        <div class="body">
            <p>See FishEye link / SVN commit message for list of changes.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2007-02-09T01:59:14.000+0000</p> 
        <div class="body">
            <p>When isDate uses the standard format it should also accept dates which are automatically corrected.</p>

<p>When it uses a given / fix format it should only accept this format.</p>

<p>Your Feedback ?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Gavin (gavin) on 2007-02-09T10:59:41.000+0000</p> 
        <div class="body">
            <p>Will developers expect isDate('13-2006-02') to return true?</p>

<p>I do not think isDate() should return true for dates that required "fixing".</p>

<p>If they really want this behavior, then they can use getFixedDate().</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2007-02-09T12:17:15.000+0000</p> 
        <div class="body">
            <p>I would say to have eighter a parameter for using fixed or not fixed dates...</p>

<p>for example:</p>

<p>isDate($date, TRUE); 
would return a FIXED date</p>

<p>isDate($date);
would return a NOT FIXED date</p>

<p>isdate($date, $format);
would return a FIXED date</p>

<p>A user could be wanting parsing a string and know if a date is within there.
But he does not know the format.
In my opinon the standard format should always not be fixed because the standard format is not always what the user wants and most users dont even know what the standard format for their locale is. A more loose coupling for the standard format is in my eyes better than throwing an exception for the standard format.</p>

<p>Second approach would be to have a own function
isFixedDate($date);</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Gavin (gavin) on 2007-02-09T12:38:11.000+0000</p> 
        <div class="body">
            <p>After more consideration, I think we should replace:</p>

<p>isDate($date, $format = null, $locale = null)</p>

<p>with:</p>

<p>isDateFormat($date, $format)</p>

<p>and</p>

<p>isDateLocale($date, $locale)</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2007-02-09T13:08:05.000+0000</p> 
        <div class="body">
            <p>Wouldn't it be better to have 
isDate() instead of isDateLocale() for not fixed format 
and 
isDateFormat() if someone want to have a fixed format ????</p>

<p>One other thing...
$locale is needed for parsing monthnames, daynames am/pm seperation and so on...
even if we have  isDateFormat() the locale parameter is needed otherwise we would have problem parsing dates witch are not written in the actual systemlocale.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Darby Felton (darby) on 2007-02-09T15:54:40.000+0000</p> 
        <div class="body">
            <p>From the perspective of a developer wishing to validate input dates, there are two main approaches that I see:</p>

<ul><li>against a formatted date value, such as YYYY-MM-DD (please ignore the chosen symbols)</li>
<li>if the input can be unambiguously interpreted to correspond to a particular date, then "magic" validation would prove useful, but using this in the default case will likely result in unexpected behavior, as evidenced by recent discussions on this topic</li>
</ul><p>As an aside, I could also envision having a date filter that would accept arbitrary input and return a normalized date value if possible to unambiguously determine with the given input. The {{getFixedDate()}} method seems to implement this.</p>

<p>With respect to the previous date validator, which only allowed the YYYY-MM-DD format, I would expect that the validator would be improved by allowing specification of a format and the input value. This is a basic validator that would check numeric date values.</p>

<p>Locale-specific validation, such as upon "Jan 1, 1970", is a step further and I would expect successful validation only for unambiguous input values. I would be very careful about implementing "magic" interpretations of possibly valid date values.</p>

<p>For example, I would not consider "Feb 31, 2007" to be a valid date, though it <em>could</em> be interpreted as being equivalent to March 3, 2007.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2007-02-09T16:17:28.000+0000</p> 
        <div class="body">
            <p>{quote}
With respect to the previous date validator, which only allowed the YYYY-MM-DD format, I would expect that the validator would be improved by allowing specification of a format and the input value. This is a basic validator that would check numeric date values.
{quote}</p>

<p>This is why we want to seperate the checking into two functions...
one for fixed formats and one for "magic" interpretation.</p>

<p>The question is only how to name them</p>

<p>isDate / isDateFixed / isDateLocale / isDateFormat.....</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2007-02-10T06:24:58.000+0000</p> 
        <div class="body">
            <p>Probably fixed with SVN 3335.</p>

<p>We now have</p>

<p>isDate() 
for checking dates by not fixing them and we have
isFixedDate() 
which checks if the input is a date and tries to fix it if there are problems with the input.</p>

<p>So isFixedDate() works like isDate before and isDate() does not try to correct false inputs giving false if for example the year is in a false position.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Gavin (gavin) on 2007-02-11T18:29:44.000+0000</p> 
        <div class="body">
            <p>Maybe we are making this too hard ..</p>

<p>If a developer can construct a Zend_Date object with the date string, then the date string is valid.
This is DRY.</p>

<pre class="highlight"><code>
try {
    $date = new Zend_Date('Feb 31, 2007', Zend_Date::DATES); // arbitrary input, magic auto-fixing when possible
    $date = new Zend_Date('Feb 31, 2007', 'dd.MM.yy'); // no magic auto-fixing
} catch (Zend_Date_Exception $e) {
    // date invalid;
}
</code></pre>

<p>How about isDate() and isLooseDate()?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2007-02-12T01:39:38.000+0000</p> 
        <div class="body">
            <p>If you want isLooseDate you also would have to name the get function</p>

<p>getLooseDate...</p>

<p>It would not make sense to have 
isDate(), isLooseDate()
and on the other side
getDate(), getFixedDate()</p>

<p>To be consistent both functions would have to be named the same way.
I would prefer fixed as non english native :-)</p>

<p>Related to date construction...
This would mean that always the date class has to be avaiable if Zend_Locale is needed.
I would not want to couple them because Zend_Locale should be stand alone. And the Date Object also uses getDate which makes the inclusion useless...</p>

<p>isDate was included to check if within an string a date is avaiable.
isDate is not related to Zend_Date... it is only a helpfull static standalone function like isInteger, isNumber and so on... parsing locale aware strings/formats.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Gavin (gavin) on 2007-02-12T19:05:28.000+0000</p> 
        <div class="body">
            <p>Unfortunately, "isFixedDate()" has connotations in English that imply the wrong semantics.</p>

<p>The words "loose" and "fuzzy" are often used when working with normalization involving interpretations that use heuristic algorithms.
Also, getFuzzyDate() and getLooseDate() don't match the behavior (getting a date that has been fixed of detectable and correctable errors).  I will ask other devteam members to voice their opinions, and see if there is a preference.</p>

<p>I understand the desire for performance.  However, input validation of dates benefits from the numerous formats supported by Zend_Date that are not found in Zend_Locale_Format.  I will compare notes with Darby to make sure we support what he needs.  Perhaps a simpler, basic check is sufficient for Zend_Validate_Date.  The code for a robust "is date" check required only 5 lines in my example above :)</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2007-02-13T01:31:38.000+0000</p> 
        <div class="body">
            <p>API:</p>

<p>The names for isxxx and getxxx should be identical to be API conform.</p>

<p>Related to example and robustness:</p>

<p>Zend_Locale was annouced as standalone class without references or needs for other classes of the Framework.
I would not want to have this broken.</p>

<p>Also Zend_Locale_Format was annouced to give support on normalizing of localized inputs.
Zend_Locale_Format has not to know about all 200 supported formats from Zend_Date...</p>

<p>I would not want ot load 3000 codelines and parse through 300 just for one isDate function.
Also isDate calls getDate... and new Zend_Date does also call getDate but after going through several other codelines.</p>

<p>Zend_Locale_Format is only a helperclass for the locale framework and is not directly related 
to the date class. It only has to know about localized inputs and normalize them.</p>

<p>I am strict against coupling this two classes.</p>

<p>Btw:
Your code can also be written as</p>

<pre class="highlight"><code>
$date = Zend_Locale_Format::isFixedDate('Feb 31, 2007'); // arbitrary input, magic auto-fixing when possible
if (!$date) {
    $date = Zend_Locale_Format::isDate('Feb 31, 2007', 'dd.MM.yy'); // no magic auto-fixing
}
</code></pre>

<p>which is one codeline less than your example. ;-)
And it would be faster with the same result.</p>

<p>A "complete" check could be done by looping through all Zend_Date constants and try to generate a Zend_Date object...
if no exception is thrown you would probably have found the correct input format ;-)</p>

<p>Ok.. dont ask me if this is performant... I dont think so... but it's "complete" ;-)</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Gavin (gavin) on 2007-02-13T14:50:15.000+0000</p> 
        <div class="body">
            <p>I think your idea for using "corrected" is the best so far.</p>

<p>Using the suffix "-able" seems to imply the correct meanings:</p>

<ul><li>isCorrectableDate()</li>
<li>getCorrectableDate()</li>
</ul>
        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Gavin (gavin) on 2007-02-16T08:30:05.000+0000</p> 
        <div class="body">
            <p>See FishEye link for details.</p>

        </div>
    </div>
    </div>

