<h2>ZF-37: Support multi-column primary keys in Zend_Db_Table</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2006-06-19T23:05:05.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2007-07-05T14:43:07.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>0.9.3 (05/May/07)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Zend Framework (zend_framework)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Bill Karwin (bkarwin)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Db_Table</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-1064">ZF-1064</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p><a href="http://framework.zend.com/developer/ticket/24">http://framework.zend.com/developer/ticket/24</a></p>

<p>Zend should support multiple primary keys in the Zend_Db_Table class. An array could be used to store this information instead of the current scalar.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Gavin (gavin) on 2006-07-06T17:07:29.000+0000</p> 
        <div class="body">
            <p>Use cases?    Does anyone else need / want this feature?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Shannon Wynter (freman) on 2006-09-06T05:14:24.000+0000</p> 
        <div class="body">
            <p>If by Multiple Primary Keys you mean the following example</p>

<p>CREATE TABLE <code>tbl</code> (
    <code>ParentID</code> INT NOT NULL,
    <code>ID</code> INT NOT NULL AUTO_INCREMENT,
    PRIMARY KEY(<code>ParentID</code>,<code>ID</code>)
);</p>

<p>Then yes, I could greatly use/want/need this feature.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by cykit luo (cykit) on 2006-11-02T06:25:38.000+0000</p> 
        <div class="body">
            <p>I think it's necessary.
for example:
I have 3 tables
table users with columns id, name
table roles with columns id, name
table users_roles with columns user_id, role_id</p>

<p>I use users_roles to relate users with roles, and I don't want to create a primary key id 
Instead, I would like to use multiple primary keys PRIMARY KEY(<code>user_id</code>,<code>role_id</code>)</p>

<p>now, I just cann't do it like this.
If I set user_id or role_id as primary key,  because of  primary key can not be modified, 
table users_roles lose its  function.</p>

<p>e.g.
I want to add a role to an user
First, I fetchNew a row</p>

<p>class RolesUsers extends Zend_Db_Table 
{
     protected $_primary = 'user_id';
}
$ru = new RolesUsers();
$lineitem = $ru-&gt;fetchNew();
$lineitem-&gt;roleId = 1; // it's ok
$lineitem-&gt;userId = 1;// throw an exception
$lineitem-&gt;save();</p>

<p>Sorry for my poor English, is my  description clear?
If not, send to a mail, cykit@126.com</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Stefan Pettersson (stefpet) on 2006-11-06T15:09:26.000+0000</p> 
        <div class="body">
            <p>I've need for this too.</p>

<p>I've got a relation called 'participant' between the objects 'meetup' and 'user'. It looks like this:</p>

<p>CREATE TABLE <code>participants</code> (
  <code>meetup_id</code> int(10) unsigned NOT NULL default '0',
  <code>user_id</code> int(10) unsigned NOT NULL default '0',
  <code>status</code> enum('yes','maybe','no') NOT NULL default 'yes',
  PRIMARY KEY  (<code>meetup_id</code>,<code>user_id</code>)
);</p>

<p>There is nothing preventing multiple primary key after normalization according to 3NF, so I believe this should be supported.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2006-11-13T15:22:36.000+0000</p> 
        <div class="body">
            <p>Changing fix version to 0.8.0.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2006-12-26T18:43:58.000+0000</p> 
        <div class="body">
            <p>Rephrase summary.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2006-12-29T15:11:26.000+0000</p> 
        <div class="body">
            <p>Current Zend_Db_Table assumes that the primary key is called <code>id</code> and is a single column.</p>

<p>There are many use cases that break this:</p>

<ul><li><p>Primary key is not called <code>id</code>.  It is a best practice to name primary keys something unique across the database, so that foreign keys can be named the same.</p></li>
<li><p>Primary key is compound, consisting of more than one column.</p></li>
<li><p>Primary key is natural, instead of being an autogenerated key.  Many people believe that every table must have a pseudokey that is autogenerated, but this is in fact the exception, not the rule.  It is common and recommended to use natural keys; that is, a column or columns from the set of attributes that comprises a unique identifier for rows.</p></li>
</ul><p>To support this, we need to store _primary as an array.  All usage of it needs to be converted to array operations. This is likely to break backward compatibility.</p>

<p>insert() cannot return an auto-generated id if the table does not use such.  It can return the primary key value(s) instead.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-01-05T17:06:26.000+0000</p> 
        <div class="body">
            <p>Recategorize as Zend_Db_Table component.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-03-15T22:14:06.000+0000</p> 
        <div class="body">
            <p>As of revision 3995, some part of the work to support compound primary keys is done.  The Zend_Db_Table_Abstract class stores primary keys as an array and many operations $_primary as an array.</p>

<p>However, currently the insert() method of Zend_Db_Table_Abstract still assumes that the insert operation will generate a primary key value, and this value can be retrieved by using lastInsertId().  This is true only for server-side auto-generated id columns, such as AUTO_INCREMENT in MySQL.  This does not work for Oracle, PostgreSQL, or DB2.  It also doesn't work for MySQL or any RDBMS for tables that have compound or natural keys.</p>

<p>Also, the __set() method of Zend_Db_Table_Row_Abstract assumes that it is illegal to set the primary key value of a row explicity, and the save() method assumes that the only time that it should insert a row instead of update it is when the primary key column(s) are empty.</p>

<p>So some more work needs to be done.  Leaving this issue open for now.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-05-01T13:32:02.000+0000</p> 
        <div class="body">
            <p>In revision 4643, the Zend_Db_Table_Abstract::insert() method should return an array when the table's primary key has multiple columns.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-05-03T17:24:30.000+0000</p> 
        <div class="body">
            <p>As far as I know, all use cases have been implemented as of revision 4697.</p>

        </div>
    </div>
    </div>

