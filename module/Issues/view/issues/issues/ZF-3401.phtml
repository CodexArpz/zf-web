<h2>ZF-3401: Zend_Cache_Backend_File cannot store arrays efficiently, should create a new backend</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>New Feature</dd>

    <dt>Created:</dt>
    <dd>2008-06-05T16:45:03.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2008-06-06T12:15:38.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Grady Kuhnline (heygrady2)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Fabien MARTY (fab)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Cache</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p><a href="http://ezcomponents.org/docs/api/latest/Cache/ezcCacheStorageFileArray.html">http://ezcomponents.org/docs/api/…</a>
<a href="http://svn.ez.no/svn/ezcomponents/trunk/Cache/src/storage/file/array.php">http://svn.ez.no/svn/ezcomponents/…</a></p>

<p>ezComponents offers a caching mechanism similar to the one offered by Zend Framework. While many parys of the design philosophy are very different, there are some useful features that would be very useful in Zend Framework.</p>

<p>A new class called Zend_Cache_Backend_FileExport could be easily created. The only major difference is that instead of storing the value in the file as a string, it would take advantage of the <a href="http://us.php.net/manual/en/function.var-export.php">var_export()</a> function in PHP. Essentially, this backend could store anything that can be correctly exported with var_export. In addition, much less time is spend retrieving the data because it is already ready to be executed as PHP code so there is no unserialization process required.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Martin Mayer (martin.mayer) on 2008-06-06T00:04:58.000+0000</p> 
        <div class="body">
            <p>Hi, have you done any benchmarks about speed of include() and unserialize()? 'Cause I experienced unserialization to be generally faster than inclusion, so there woudln't be any advantage of FileExport backend.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Grady Kuhnline (heygrady2) on 2008-06-06T11:44:52.000+0000</p> 
        <div class="body">
            <p>I ran some tests. Inexplicably you are correct. It looks like unserialize is about 3 times faster. I stand corrected. Are there any other benefits from using var_export over serialize? or vice versa?</p>

<pre class="highlight"><code>
/**
 * Generate Deep Array
 * @param int $nodes
 * @param int $levels
 * @return array
 */
function generatDeepArray($nodes = 9, $levels = 3) {
    $array = array();
    for ($i = 0; $i &lt; $nodes; $i++) {
        if ($levels == 1)
            $array['node-'.$i] = 'terminal';
        else
            $array['node-'.$i] = generatDeepArray($nodes, $levels - 1);
    }
    return $array;
}

// get a deep array
$array = generatDeepArray();

// save it as a serialized cache
file_put_contents('cache-serialize.txt', serialize($array));

// save it as an export cache
file_put_contents('cache-export.php', '&lt;?'."php \nreturn ".var_export($array, true).";\n?&gt;");

// save it as an export-eval cache
file_put_contents('cache-export-eval.php', 'return '.var_export($array, true).";\n?&gt;");

$count = '100';

// Unserialize
$time = microtime(true) * 1000;
for ($i = 0; $i &lt; $count; $i++) {
    $var = unserialize(file_get_contents('cache-serialize.txt'));
    if ($i == 0)
        var_dump($var);
}
$unserialize = (microtime(true) * 1000) - $time.'<br />';

// Include
$time = microtime(true) * 1000;
for ($i = 0; $i &lt; $count; $i++) {
    $var = include 'cache-export.php';
    if ($i == 0)
        var_dump($var);
}
$include = (microtime(true) * 1000) - $time.'<br />';

// eval
$time = microtime(true) * 1000;
for ($i = 0; $i &lt; $count; $i++) {
    $var = eval(file_get_contents('cache-export-eval.php'));
    if ($i == 0)
        var_dump($var);
}
$eval = (microtime(true) * 1000) - $time.'<br />';
echo 'unserialize: '.$unserialize.'ms';
echo 'include: '.$include.'ms';
echo 'eval: '.$eval.'ms';
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Fabien MARTY (fab) on 2008-06-06T12:15:20.000+0000</p> 
        <div class="body">
            <p>same (bad) test for me</p>

<p>it seems to be a false good idea</p>

<p>thanks anyway</p>

        </div>
    </div>
    </div>

