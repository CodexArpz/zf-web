<h2>ZF-5791: Create an abstract class for use with the Amazon Web Servies.</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2009-02-15T08:12:25.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-12-13T08:55:36.000+0000</dd>

    <dt>Status:</dt>
    <dd>Closed</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.8.0 (30/Apr/09)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Jon Whitcraft (sidhighwind)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Jon Whitcraft (sidhighwind)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Service_Amazon</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-8536">ZF-8536</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
        <li><a href="/issues/secure/attachment/11757/AmazonAbstractClass.zip">AmazonAbstractClass.zip</a></li>
        </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Create an abstract class to set a standard way for to handle the access and secret keys with all the AWS components.</p>

<pre class="highlight"><code>
&lt;?php

require_once 'Zend/Service/Abstract.php';

abstract class Zend_Service_Amazon_Abstract extends Zend_Service_Abstract
{
    /**
     * @var string Amazon Access Key
     */
    protected static $defaultAccessKey = null;

    /**
     * @var string Amazon Secret Key
     */
    protected static $defaultSecretKey = null;

    /**
     * @var string Amazon Secret Key
     */
    protected $secretKey;

    /**
     * @var string Amazon Access Key
     */
    protected $accessKey;

    /**
     * Set the keys to use when accessing SQS.
     *
     * @param  string $access_key
     * @param  string $secret_key
     * @return void
     */
    public static function setKeys($accessKey, $secretKey)
    {
        self::$defaultAccessKey = $accessKey;
        self::$defaultSecretKey = $secretKey;
    }

    /**
     * Create Amazon Sqs client.
     *
     * @param  string $access_key
     * @param  string $secret_key
     * @return void
     */
    public function __construct($accessKey=null, $secretKey=null)
    {
        if(!$accessKey) {
            $accessKey = self::$defaultAccessKey;
        }
        if(!$secretKey) {
            $secretKey = self::$defaultSecretKey;
        }
        if(!$accessKey || !$secretKey) {
            require_once 'Zend/Service/Amazon/Exception.php';
            throw new Zend_Service_Amazon_Exception("AWS keys were not supplied");
        }
        $this-&gt;accessKey = $accessKey;
        $this-&gt;secretKey = $secretKey;
    }

    /**
     * Method to fetch the Access Key
     *
     * @return string
     */
    protected function getAccessKey()
    {
        return $this-&gt;accessKey;
    }

    /**
     * Method to fetch the Secret AWS Key
     *
     * @return string
     */
    protected function getSecretKey()
    {
        return $this-&gt;secretKey;
    }
}
</code></pre>

<pre class="highlight"><code>
&lt;?php

require_once 'Zend/Service/Amazon/Abstract.php';

require_once 'PHPUnit/Framework/TestCase.php';

/**
 * Zend_Service_Amazon_Sqs_Queue test case.
 */
class AmamzonAbstract extends PHPUnit_Framework_TestCase
{
    /**
     * Prepares the environment before running a test.
     */
    protected function setUp()
    {
        parent::setUp();
    }

    /**
     * Cleans up the environment after running a test.
     */
    protected function tearDown()
    {
        parent::tearDown();
    }

    public function testNoKeysThrowException()
    {
        try {
            $class = new TestAmamzonAbstract();
            $this-&gt;fail('Exception should be thrown when no keys are passed in.');
        } catch(Zend_Service_Amazon_Exception $zsae) {}
    }

    public function testConstructorWithKeysDoesNotThrowException()
    {
        try {
            $class = new TestAmamzonAbstract('TestAccessKey', 'TestSecretKey');
        } catch(Zend_Service_Amazon_Exception $zsae) {
            $this-&gt;fail('Exception should be thrown when no keys are passed in.');
        }
    }

    public function testSetStaticKeys()
    {
        TestAmamzonAbstract::setKeys('TestAccessKey', 'TestSecretKey');
        $class = new TestAmamzonAbstract();

        $this-&gt;assertEquals('TestAccessKey', $class-&gt;returnAccessKey());
        $this-&gt;assertEquals('TestSecretKey', $class-&gt;returnSecretKey());
    }

    public function testPassKeysIntoConstructor()
    {
        $class = new TestAmamzonAbstract('TestAccessKey', 'TestSecretKey');

        $this-&gt;assertEquals('TestAccessKey', $class-&gt;returnAccessKey());
        $this-&gt;assertEquals('TestSecretKey', $class-&gt;returnSecretKey());
    }

    public function testPassedInKeysOverrideStaticSetKeys()
    {
        TestAmamzonAbstract::setKeys('TestStaticAccessKey', 'TestStaticSecretKey');
        $class = new TestAmamzonAbstract('TestAccessKey', 'TestSecretKey');

        $this-&gt;assertEquals('TestAccessKey', $class-&gt;returnAccessKey());
        $this-&gt;assertEquals('TestSecretKey', $class-&gt;returnSecretKey());
    }
}

class TestAmamzonAbstract extends Zend_Service_Amazon_Abstract
{
    public function returnAccessKey()
    {
        return $this-&gt;accessKey;
    }

    public function returnSecretKey()
    {
        return $this-&gt;secretKey;
    }
}
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Jon Whitcraft (sidhighwind) on 2009-02-15T08:13:46.000+0000</p> 
        <div class="body">
            <p>Abstract Class for use with Amazon Aws Services.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Jon Whitcraft (sidhighwind) on 2009-02-15T08:14:35.000+0000</p> 
        <div class="body">
            <p>Test case for the attached class.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Jon Whitcraft (sidhighwind) on 2009-02-15T09:21:23.000+0000</p> 
        <div class="body">
            <p>Removed the files and made the code inline.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Jon Whitcraft (sidhighwind) on 2009-02-15T09:23:22.000+0000</p> 
        <div class="body">
            <p>Zip file for easy download.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ralph Schindler (ralph) on 2009-02-23T14:04:46.000+0000</p> 
        <div class="body">
            <p>The use of statics for the access and secret key imply that you cannot use more than one amazon account per request, is that by design?</p>

<p>-ralph</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Jon Whitcraft (sidhighwind) on 2009-02-23T16:51:27.000+0000</p> 
        <div class="body">
            <p>Ralph - Yes that is correct.  This can easily be changed..</p>

<p>Jon</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Jon Whitcraft (sidhighwind) on 2009-03-11T13:30:21.000+0000</p> 
        <div class="body">
            <p>Ralph</p>

<p>If you look at the _construct method you will notice that if you don't specify a key or secret key it will use the static keys.  The static properties are a way to have default keys set so you don't need to provide the keys everytime you create a new instance but you can if you need to specify new keys.</p>

<p>Jon</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Jon Whitcraft (sidhighwind) on 2009-04-07T17:59:00.000+0000</p> 
        <div class="body">
            <p>This got checked in with the Ec2 Component.</p>

        </div>
    </div>
    </div>

