<h2>ZF-6972: Writer_Firebug calculates wrong occurence of &quot;log&quot; in stack trace</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2009-06-10T00:16:04.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-11-20T21:37:49.000+0000</dd>

    <dt>Status:</dt>
    <dd>Open</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
        None
                    </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Log</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
        <li><a href="/issues/secure/attachment/12640/ZF-6972.patch">ZF-6972.patch</a></li>
        </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>In Writer_Firebug::_write() the traceOffset is hardcoded at line 185. The leads to the problem, that in some cases it calculated the wrong file and line, in which the log should occur.</p>

<p>Somewhere in a function or class-method</p>

<pre class="highlight"><code>// Simple file
$log = new Zend_Log(new Zend_Log_Writer_Firebug();
function test($log) {
  $log-&gt;info('test');
  $log-&gt;log('test', 6);
}
test ($log);</code></pre>

<p>The first one works correctly, it gives the correct file and line. The second one (in this case) sends no file and line, in this and all other cases it goes one step "too far".</p>

<p>The hardcoded value expects, that the log is called via __call() in every case, but if I call log() directly there is one stack-entry to less, or if I  overwrite Zend_Log::log() or Zend_Log::__call() (or both), the stack trace is "too big" and will return some file/line from some of the log-classes.</p>

<p>I hope, you understand ...</p>

<p>Version is 15892</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Christopher Thomas (cwt137) on 2010-01-18T08:30:04.000+0000</p> 
        <div class="body">
            <p>Attached is a patch</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Francois (frankyz) on 2010-06-26T01:10:44.000+0000</p> 
        <div class="body">
            <p>The Problem ist the hardcoded traceOffset in Zend_Log_Writer_Firebug.
But this Patch is not the right solution.</p>

<p>My function:</p>

<pre class="highlight"><code>
function debug()
{
    if (func_num_args() == 1)
       Zend_Registry::get('log')-&gt;debug(func_get_arg(0));
    else if (func_num_args() &gt; 1)
       Zend_Registry::get('log')-&gt;debug(func_get_args());
}
</code></pre>

<p>In this case, the traceOffset is 7, not the hardcoded 6 or the 
count of debug_backtrace() - in my special example 18).</p>

<p>The best solution, is to set the TraceOffset by defult of 6:</p>

<pre class="highlight"><code>
Zend_Wildfire_Plugin_FirePhp::getInstance()-&gt;setOption('traceOffset' , 6);
</code></pre>

<p>Don't set hardcoded the traceOffset:</p>

<pre class="highlight"><code>
Zend_Wildfire_Plugin_FirePhp::getInstance()-&gt;send($message,
                                                          $label,
                                                          $type);
</code></pre>

<p>Now, i can change the Offset outside from the Writer, with
```</p>

<p>Note: this solution is not the right one,
if concurrent usage on Zend_Wildfire_Plugin_FirePhp.
If this a risk, so the Writer must implemend set/get FirebugOption Methods...</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Francois (frankyz) on 2010-06-26T01:22:59.000+0000</p> 
        <div class="body">
            <p>;) The better solution is to use the $event array.</p>

<pre class="highlight"><code>
$traceOffset = isset($event['traceOffset'])?$event['traceOffset']:6;
        
Zend_Wildfire_Plugin_FirePhp::getInstance()-&gt;send($message,
                                                          $label,
                                                          $type,
                                                          array('traceOffset'=&gt;$traceOffset));
</code></pre>

<p>Example on my function:</p>

<pre class="highlight"><code>
function debug()
{
    if (func_num_args() == 1)
       Zend_Registry::get('log')-&gt;debug(func_get_arg(0), array('traceOffset' =&gt; 7));
    else
       Zend_Registry::get('log')-&gt;debug(func_get_args(), array('traceOffset' =&gt; 7));
}
</code></pre>

<p>So everyone can set the right traceOffset...</p>

        </div>
    </div>
    </div>

