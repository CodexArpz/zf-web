<h2>ZF-11536: Zend_Cache extension points or more permissive cache ID's</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2011-07-07T13:05:04.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2011-07-07T13:05:04.000+0000</dd>

    <dt>Status:</dt>
    <dd>Open</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Alexander Veremyev (alexander)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Cache</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>The Zend_Cache frontend for Core has two static routines that get in the way of extending the functionality without having to copy verbatium. they are:</p>

<p>protected static function _validateIdOrTag($string)
protected static function _validateTagsArray($tags)</p>

<p>The problematic portion for me comes from the restriction of the implementation has the following restrictions on ID's:
must use only [a-zA-Z0-9_]</p>

<p>In my case, I wanted to extend the functionality to use the Zend_Cache to serve up files of a particular extension/type and hash the name of the file so predicting the cache file name for an outsider not requesting the file becomes unpredictable and short lived. Using Core as the frontend and File as the backend seemed to work pretty well.</p>

<p>Achieving this was a bit of a hack though by inheriting the Core class and re-implementing the above static functions and copying pasting the exact code that used these functions verbatim so the statics are resolved correctly.</p>

<p>I thought the framework could make it easier in one of two ways:
1.) Allow periods in the ID's so you can give filenames
2.) Replace the statics with class functions that either call the statics, or allow them to be re-implemented.</p>

<p>Likewise on the backend, using the File Backend, adding a method like the following would be of value, but extending it to do this isn't a big deal as long as you configure your CacheManager to use autoloading when it creates the cache using the factory:
public function getFileLocation($id) {
   return $this -&gt; _file($id);<br />
}</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>
    <p class="comments">No comments to display</p>
    
</div>

