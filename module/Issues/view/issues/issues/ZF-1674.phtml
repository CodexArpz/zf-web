<h2>ZF-1674: Allow row relationship methods to specify WHERE, ORDER and LIMIT clauses</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2007-07-02T20:43:29.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2008-01-18T21:34:12.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Simon Mundy (peptolab)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Simon Mundy (peptolab)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Db_Table</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-1182">ZF-1182</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Rowsets currently allow for the following:-</p>

<pre class="highlight"><code>
findDependentRowset($dependentTable, $ruleKey = null)
findParentRow($parentTable, $ruleKey = null)
findManyToManyRowset($matchTable, $intersectionTable, $callerRefRule = null, $matchRefRule = null)
</code></pre>

<p>It would be great to extend these method signatures to include custom WHERE, ORDER and LIMIT clauses in much the same way as the parent table fetchAll method so the results can be fine-tuned:-</p>

<pre class="highlight"><code>
findDependentRowset($dependentTable, $ruleKey = null, Array $where = array(), $order = null, $limit = null, $offset = null)
findParentRow($parentTable, $ruleKey = null, Array $where = array(), $order = null, $limit = null, $offset = null)
findManyToManyRowset($matchTable, $intersectionTable, $callerRefRule = null, $matchRefRule = null, Array $matchParams = array())
</code></pre>

<p>This would then be applied to each applicable method as follows:</p>

<pre class="highlight"><code>
public function findDependentRowset($dependentTable, $ruleKey = null, Array $where = array(), $order = null, $limit = null, $offset = null)
{
    ...
    return $dependentTable-&gt;fetchAll($where, $order, $limit, $offset);
}

public function findParentRow($parentTable, $ruleKey = null, Array $where = array(), $order = null)
{
    ...
    return $parentTable-&gt;fetchRow($where, $order);
}
</code></pre>

<p>The many-to-many method is obviously a little more complex as multiple tables are involved, but perhaps an associative array called $matchParams could handle this with a per-table array of where, order, limit and offset:-</p>

<pre class="highlight"><code>
$matchParams = array(
    'table1' =&gt; array(
        'where' =&gt; array('foo in (1,2,3)', 'bar in (3,4,5)'),
        'order' =&gt; 'name ASC',
        'limit' =&gt; 5
    ),
    'table2' =&gt; array(
        'where' =&gt; array('foo in (1,2,3)', 'bar in (3,4,5)'),
        'order' =&gt; 'name ASC',
        'limit' =&gt; 5
    )
);
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Alan Gabriel Bem (alan.bem) on 2007-07-02T21:18:19.000+0000</p> 
        <div class="body">
            <p>I have reported that long time ago. The answer was simple - no.</p>

<p><a href="http://framework.zend.com/issues/browse/ZF-1182">http://framework.zend.com/issues/browse/ZF-1182</a></p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-07-20T21:03:44.000+0000</p> 
        <div class="body">
            <p>I think we can consider this use case now.</p>

<p>I'd suggest we use the proposal process to design a comprehensive solution to this.
I would suggest we use Zend_Db_Select objects as optional arguments to Zend_Db_Table and Zend_Db_Table_Row methods.
That way we can specify many SQL clauses without having to add a long list of optional arguments.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Craig Slusher (sleek) on 2007-09-12T18:39:21.000+0000</p> 
        <div class="body">
            <p>I would argue that $order, $count, and $offset are the only additional parameters that would be beneficial to add to the relationship methods.</p>

<p>If you think about it, the final result is to call either fetchAll() or fetchRow(). Since the where clause is being determined within the relationship logic, there's no reason to allow the user to have any say in it. However, if you allow the user to specify $order, $count, and $offset, then it becomes extremely useful. $order would be defined in terms of the related table columns, and <em>not</em> from the table that your current row came from.</p>

<p>I find myself not using the relationship methods and ducking directly into my own queries just to get the ability to order and limit. Seems so unnecessary to me.</p>

<p>The change is very simple and I think it would be hugely beneficial.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-09-12T18:55:18.000+0000</p> 
        <div class="body">
            <p>You might like to look at the following proposal:</p>

<p><a href="http://framework.zend.com/wiki/display/ZFPROP/Zend_Db_Table+Query+Enhancements+-+Simon+Mundy">http://framework.zend.com/wiki/display/â€¦</a></p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Darby Felton (darby) on 2007-10-31T11:56:17.000+0000</p> 
        <div class="body">
            <p>Assigning to [~peptolab] to be resolved with the approved Zend_Db_Table enhancements proposal.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Simon Mundy (peptolab) on 2008-01-18T21:34:12.000+0000</p> 
        <div class="body">
            <p>Resolved in r7508</p>

        </div>
    </div>
    </div>

