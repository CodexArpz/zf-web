<h2>ZF-2052: base url not detected when it has urlencoded characters</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2007-10-08T08:11:40.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2011-01-26T06:48:00.000+0000</dd>

    <dt>Status:</dt>
    <dd>Closed</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.0.4 (26/Feb/08)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Geoffrey (gbachelet)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Matthew Weier O'Phinney (matthew)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Controller</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-2782">ZF-2782</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>When the base url has a space in it (or whatever urlencoded character I guess) the Zend_Controller_Request_Http object does not detect it properly.</p>

<p>A simple urldecode() inside Zend_Controller_Request_Http::setRequestUri() will fix that</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2007-11-16T14:37:11.000+0000</p> 
        <div class="body">
            <p>Scheduling for 1.0.3</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2008-02-19T09:33:43.000+0000</p> 
        <div class="body">
            <p>Patched in trunk and release-1.0 branch.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2008-03-06T10:57:05.000+0000</p> 
        <div class="body">
            <p>Changing this behaviour actually breaks many applications, particularly those that pull from getPathInfo(). I am reverting this change.</p>

<p>If you need this functionality, subclass the request object as follows:</p>

<pre class="highlight"><code>
class My_Request_Http extends Zend_Controller_Request_Http
{
    public function setRequestUri($requestUri = null)
    {
        parent::setRequestUri($requestUri);
        $this-&gt;_requestUri = urldecode($this-&gt;_requestUri);
        return $this;
    }
}
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2008-03-06T10:57:27.000+0000</p> 
        <div class="body">
            <p>Will not fix, as it breaks other behaviours.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Claude Duvergier (cduv) on 2011-01-26T03:33:46.000+0000</p> 
        <div class="body">
            <p>I'm suggesting another fix that won't change {{Zend_Controller_Request_Http::$_requestUri}}.</p>

<p><em>Context:</em>
I access my development Apache server via the following URL (a VirtualHost): <a href="http://devprojects.myself.local">http://devprojects.myself.local</a>
My multiple Zend-powered application are accessible from there. For example: <a href="http://devprojects.myself.local/myGreatZfApp/public/">http://devprojects.myself.local/myGreatZfApp/…</a>
But, for some, there are spaces in the name of the folder that contains the application. Hence they appears the URL as "%20" (eg. [<a href="http://devprojects.myself.local/another%20Zf">http://devprojects.myself.local/another%20Zf</a> App/public/]).</p>

<p><em>Problem:</em>
My problem is that, on theses projects, baseUrl is not correctly set: it stays empty (an empty string).
By analysing the code of {{Zend_Controller_Request_Http::setBaseUrl()}} I found out that base URL is somehow firstly correctly detected (either via {{$_SERVER['SCRIPT_NAME']}} or {{$_SERVER['PHP_SELF']}}), stored in local variable {{$baseUrl}} but gets compared to {{Zend_Controller_Request_Http::_requestUri}}:</p>

<pre class="highlight"><code>
// Does the baseUrl have anything in common with the request_uri?
$requestUri = $this-&gt;getRequestUri();

if (0 === strpos($requestUri, $baseUrl)) {
    // full $baseUrl matches
    $this-&gt;_baseUrl = $baseUrl;
    return $this;
}

if (0 === strpos($requestUri, dirname($baseUrl))) {
    // directory portion of $baseUrl matches
    $this-&gt;_baseUrl = rtrim(dirname($baseUrl), '/');
    return $this;
}

$truncatedRequestUri = $requestUri;
if (($pos = strpos($requestUri, '?')) !== false) {
    $truncatedRequestUri = substr($requestUri, 0, $pos);
}

$basename = basename($baseUrl);
if (empty($basename) || !strpos($truncatedRequestUri, $basename)) {
    // no match whatsoever; set it blank
    $this-&gt;_baseUrl = '';
    return $this;
}

// If using mod_rewrite or ISAPI_Rewrite strip the script filename
// out of baseUrl. $pos !== 0 makes sure it is not matching a value
// from PATH_INFO or QUERY_STRING
if ((strlen($requestUri) &gt;= strlen($baseUrl))
    &amp;&amp; ((false !== ($pos = strpos($requestUri, $baseUrl))) &amp;&amp; ($pos !== 0)))
{
    $baseUrl = substr($requestUri, 0, $pos + strlen($baseUrl));
}
</code></pre>

<p>My opinion is the code doesn't make the difference between a file path on the server and an URL (that have it's own set of constraints): the two may be similar then have some small differences.</p>

<p><em>Steps to reproduce:</em>
- Create a blank new Zend application
- Make it accessible via an URL that contains one or more spaces (eg. [<a href="http://127.0.0.1/my">http://127.0.0.1/my</a> projects rep/The Application/])
- Print the base URL via {{Zend_Controller_Front::getInstance()-&gt;getBaseUrl()}} or {{Zend_View_Helper_BaseUrl::getBaseUrl()}}
- Notice it's empty (should be "/my projects rep/The Application/")</p>

<p><em>Fix proposal:</em>
The simple following fix seems to do the trick (making the {{Zend_Controller_Request_Http::_requestUri}} going through {{urldecode()}}):</p>

<pre class="highlight"><code>
// Does the baseUrl have anything in common with the request_uri?
$requestUri = urldecode($this-&gt;getRequestUri());
</code></pre>

<p>But, as I said, file paths and URLs shouldn't be considered as equals: thus I suggest to make {{$baseUrl}} (which is actually constructed from file paths) go through {{urlencode()}} instead:</p>

<pre class="highlight"><code>
// Convert the paths found into an URL (handling specials characters such as spaces)
$baseUrl = urlencode($baseUrl);

// Does the baseUrl have anything in common with the request_uri?
$requestUri = $this-&gt;getRequestUri();

[...]
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Claude Duvergier (cduv) on 2011-01-26T06:47:56.000+0000</p> 
        <div class="body">
            <p>Please ignore my second proposal (applying {{urlencode()}} on {{$baseUrl}}) as ({{urlencode()}} hasn't the proper effect on base URL (spaces are changed to "+").</p>

<p>Additionally, I've noticed that with my first fix proposal (applying {{urldecode()}} to the request URI) when accessing to [<a href="http://127.0.0.1/my%20projects%20rep/The%20Application/public/index.php">http://127.0.0.1/my%20projects%20rep/…</a>] (note the tailing "<em>index.php</em>"), base URL takes the <em>wrong</em> value "/my%20projects%20rep/The%20Application/public/index.php" (because, in that case, {{$baseUrl}} directly fully matches the request URI).</p>

        </div>
    </div>
    </div>

