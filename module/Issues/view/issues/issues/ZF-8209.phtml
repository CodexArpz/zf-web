<h2>ZF-8209: database requests return corrupt data when executed as a phpunit test</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2009-11-03T01:34:58.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2010-08-25T06:36:56.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Michelangelo van Dam (dragonbe)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Db</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
        <li><a href="/issues/secure/attachment/12404/error.png">error.png</a></li>
        </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Hi,</p>

<p>I've been trying to create unit tests for my application that includes tests that access a database I've set up. In production code everything works as expected (i.e I can fetch a row, perform Inserts etc) but when running the same code with the same database I get corrupt results on any type of SELECT statement (be it a find(), fetchRow(), fetchAll() etc).  The columns returned end up being either missed completely or named incorrectly (usually with the database/table name replacing the column name). If I have more than 5 columns in my table fastcgi.exe crashes completely.</p>

<p>I've created a small test:</p>

<p>public function testdbAccess()
    {
        $db = Zend_Db::factory('Pdo_Mysql', array(
              'host'     =&gt; 'localhost',
              'username' =&gt; 'root',
              'password' =&gt; 'xxxxx',
              'dbname'   =&gt; 'testdb'
            ));</p>

<pre><code> $sql = "select * from payment where id = ?";
 $data = 1; 

 $set = $db-&gt;fetchAll($sql,$data);
</code></pre>

<p>}</p>

<p>which still gives me problems.</p>

<p>In the debugger, the variable window shows:</p>

<p>$set
   |
   0_            Array[4]
      id         1
      merchant   OUR_REF
      payment    1
      testdb     3</p>

<p>And my Table is actually</p>

<p>db:  testdb
table: payment</p>

<p>id | merchant | payment_type_id | order_id | track_id
1     OUR_REF       1                3          1
2   ...
...</p>

<p>so I'm getting the table name replacing column 3's name, db name replacing column 4's name and column 5 is missing. If I have another column in the table I get the fastcgi.exe crash.</p>

<p>Do you have any ideas about this? I found a similar issue reported (search ' too many columns crashes') but it was closed without an answer.</p>

<p>Many thanks,</p>

<p>Bryn</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Michelangelo van Dam (dragonbe) on 2009-11-19T07:24:20.000+0000</p> 
        <div class="body">
            <p>A simple unit test shows that Zend_Db behaves properly, independent from platform.</p>

<pre class="literal">
  1 &lt;?php
  2 
  3 require_once 'PHPUnit/Framework.php';
  4 require_once 'Zend/Db.php';
  5 class MyDbTest extends PHPUnit_Framework_TestCase
  6 {
  7         /**
  8          * populated db table 'payment' with 3 rows
  9          *
 10          * id | merchant | payment_type_id | order_id | track_id
 11          * 1|test 1|1|3|1
 12          * 2|test 2|1|3|2
 13          * 3|test 3|1|3|2
 14          */
 15         public function testDbAccess()
 16         {
 17                 $db = Zend_Db::factory(
 18                         'Pdo_SQLite',
 19                         array ('dbname' =&gt; './testdb.db')
 20                 );
 21 
 22                 $sql = 'SELECT * FROM payment WHERE id = ?';
 23                 $data = 1;
 24                 $set = $db-&gt;fetchAll($sql, $data);
 25                 $this-&gt;assertType('array', $set);
 26                 $this-&gt;assertSame(1, count($set));
 27                 $this-&gt;assertArrayHasKey('id', $set[0]);
 28                 $this-&gt;assertArrayHasKey('merchant', $set[0]);
 29                 $this-&gt;assertArrayHasKey('payment_type_id', $set[0]);
 30                 $this-&gt;assertArrayHasKey('order_id', $set[0]);
 31                 $this-&gt;assertArrayHasKey('track_id', $set[0]);
 32         }
 33 }
</pre>

<p>Output of PHPUnit is a success:</p>

<pre class="literal">
phpunit MyDbTest ./zf-8209.php 
PHPUnit 3.4.2 by Sebastian Bergmann.

.

Time: 0 seconds

OK (1 test, 7 assertions)
</pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bryn Davies (eastzenders) on 2009-11-19T08:00:45.000+0000</p> 
        <div class="body">
            <p>The problems I describe occur only with pdo_mySql and not SQLite - in fact we are using sqlite in  order to get around this issue. More than 4 columns in a table and you get a crash, less than 4 and you get corrupt record names.</p>

<p>Cheers,
Bryn</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Michelangelo van Dam (dragonbe) on 2009-11-20T05:21:48.000+0000</p> 
        <div class="body">
            <p>Ok, let me rework my unit test using a MySQL database then. Which flavor of MySQL are you having this experience with ?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Michelangelo van Dam (dragonbe) on 2009-11-20T05:39:50.000+0000</p> 
        <div class="body">
            <p>Cannot reproduce the error, had following unit test run against both MySQL 5.0 and 5.1 databases.</p>

<p>Please use following unit test to reproduce your error.</p>

<pre class="literal">
&lt;?php

require_once 'PHPUnit/Framework.php';
require_once 'Zend/Db.php';
class MyDbTest extends PHPUnit_Framework_TestCase
{
        /**
         * populated db table 'payment' with 3 rows
         *
         * id | merchant | payment_type_id | order_id | track_id
         * 1|test 1|1|3|1
         * 2|test 2|1|3|2
         * 3|test 3|1|3|2
         */
        public function testDbAccess()
        {
                $db = Zend_Db::factory(
                        'Pdo_MySQL',
                        array (
                                'host'          =&gt; 'localhost',
                                'username'      =&gt; 'zfbhd',
                                'password'      =&gt; 'secret',
                                'dbname'        =&gt; 'test'
                        )
                );

                $sql = 'SELECT * FROM payment WHERE id = ?';
                $data = 1;
                $set = $db-&gt;fetchAll($sql, $data);
                $this-&gt;assertType('array', $set);
                $this-&gt;assertSame(1, count($set));
                $this-&gt;assertArrayHasKey('id', $set[0]);
                $this-&gt;assertArrayHasKey('merchant', $set[0]);
                $this-&gt;assertArrayHasKey('payment_type_id', $set[0]);
                $this-&gt;assertArrayHasKey('order_id', $set[0]);
                $this-&gt;assertArrayHasKey('track_id', $set[0]);
        }
}
</pre>

<p>Until further notice, I set the status of this issue again to resolved...</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bryn Davies (eastzenders) on 2009-11-20T07:05:19.000+0000</p> 
        <div class="body">
            <p>Problem summary</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bryn Davies (eastzenders) on 2009-11-20T07:09:19.000+0000</p> 
        <div class="body">
            <p>Hi,</p>

<p>I've attached a screenshot that highlights the issues I have when I run your test code.</p>

<p>Running MySQL 5.1.36-community via TCP/IP</p>

<p>Zend Studio Version 7.1.0.20091014 (Though this issue has appeared in previous versions).</p>

<p>As I say, if this test code is chucked into say, a controller, it executes fine. But as a test it becomes corrupt.</p>

<p>Cheers,</p>

<p>Bryn</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Margus Koiduste (marguskoiduste) on 2010-08-25T06:36:56.000+0000</p> 
        <div class="body">
            <p>Hi,</p>

<p>Check out my comment on following issue for possible fix: <a href="http://zendframework.com/issues/browse/ZF-7734">http://zendframework.com/issues/browse/ZF-7734</a></p>

<p>Margus</p>

        </div>
    </div>
    </div>

