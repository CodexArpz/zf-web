<h2>ZF-5028: Remove &quot;MVC&quot; references from Layout class</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2008-11-22T11:11:53.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2008-11-22T12:33:37.000+0000</dd>

    <dt>Status:</dt>
    <dd>Postponed</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Matthew Weier O'Phinney (matthew)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Layout</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>For some reason, Zend_Layout breaks from well-established singleton conventions, and uses a static ::getMvcInstance() method instead of a ::getInstance() method for instantiating and accessing the singleton instance.</p>

<p>While Zend_Layout is clearly used inside the "MVC" stack (including Zend_Controller), it's a useful class outside that stack. It's broken out on its own for that reason, I imagine, and is almost loosely-coupled (which is ideal). By mixing in the "MVC" variable names and method names you pollute the concept of the layout class with concepts that belong elsewhere.</p>

<p>Improvements:</p>

<ul><li>rename getMvcInstance to getInstance.</li>
<li>factor out the strongly coupled calls to Zend_Controller</li>
<li>remove "Mvc" references from names</li>
</ul><p>Alternately, move Zend_Layout into a properly nested package, such as Zend_Controller_Layout or something...</p>

<p>Or perhaps create a Zend_Stack package explicitly and call it Zend_Stack_Layout?</p>

<p>A truly portable, decoupled layout class/interface would be very useful, and Zend_Layout is a good foundation for it, but is currently too focused on a sub-project within ZFW - the "MVC" stack.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2008-11-22T12:29:41.000+0000</p> 
        <div class="body">
            <p>The biggest strengths of Zend_Layout lay in the front controller plugin and action helper -- these are what make it possible to accomplish Two Step and Composite views within Zend Framework; otherwise, basically all of the functionality encapsulated in Zend_Layout can actually be achieved with multiple Zend_View instances.</p>

<p>If you look at how startMvc() and getMvcInstance() actually work, you'll note that Zend_Layout does not implement a true singleton pattern at all; it simply stores a static instance that can be canonically referenced by the front controller plugin and action helper.</p>

<p>There are undoubtedly better ways to do this, but most would involve substantially refactoring Zend_Controller, and as such will have to wait until we are able to break backwards compatibility -- in the 2.0 time frame.</p>

        </div>
    </div>
    </div>

