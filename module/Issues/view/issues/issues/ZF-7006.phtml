<h2>ZF-7006: setValue on Select fields does not correctly handle UUIDs which are ~16 digits long </h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2009-06-13T07:10:14.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-07-30T12:55:52.000+0000</dd>

    <dt>Status:</dt>
    <dd>Open</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Ralph Schindler (ralph)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_View</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Because we need to synchronise offline with online DB´s, we are using a sort of UUIDs for our primary keys. The UUIDs are generated with MySQL´s UUID_SHORT() function. This function returns UUIDs which consist only of digits and have a length around 16 digits. Because these UUIDs are longer than the maximum allowed Integer length in PHP (11 digits), these UUID´s must be handled as strings. When handled as Integers all digits after digit 11 are cut off.</p>

<p>The problem is when using these UUID´s with Select form fields. When setting the default value with setValue a lot of options are marked selected=selected and not only the one which should. Therefore if existing data is loaded in the form for editing, the last option with selected=selected is selected and not the one which should be. When saving the form even if the user has not modified the data, the wrong option is saved. This is very very bad.</p>

<p>I guess this results because somewhere in the Zend Framework, values with digits are handled as Integer and not as string. Probably values with more than 11 digits should always be handled as string.</p>

<p>This is a very ugly bug because existing data is randomly modified when loaded for editing. The User does not even recognize this.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Raul (arsa) on 2010-02-26T04:03:09.000+0000</p> 
        <div class="body">
            <p>For everyone affected by this bug:</p>

<p>PHP's function in_array has a third parameter called 'strict' used to force the type checking of the needle and the haystack.</p>

<p>Just taking a look at the FormSelect class file you will see that it uses this function to check which option should be selected.
Change the original function:
protected function _build($value, $label, $selected, $disable)
    {
        if (is_bool($disable)) {
            $disable = array();
        }</p>

<pre><code>    $opt = '&lt;option'
         . ' value="' . $this-&gt;view-&gt;escape($value) . '"'
         . ' label="' . $this-&gt;view-&gt;escape($label) . '"';

    // selected?
    if (in_array((string) $value, $selected)) {
        $opt .= ' selected="selected"';
    }

    // disabled?
    if (in_array($value, $disable)) {
        $opt .= ' disabled="disabled"';
    }

    $opt .= '&gt;' . $this-&gt;view-&gt;escape($label) . "&lt;/option&gt;";

    return $opt;
}
</code></pre>

<p>for this other:</p>

<p>protected function _build($value, $label, $selected, $disable)
    {
        if (is_bool($disable)) {
            $disable = array();
        }</p>

<pre><code>    $opt = '&lt;option'
         . ' value="' . $this-&gt;view-&gt;escape($value) . '"'
         . ' label="' . $this-&gt;view-&gt;escape($label) . '"';

    // selected?
    if (in_array((string) $value, $selected, true)) {
        $opt .= ' selected="selected"';
    }

    // disabled?
    if (in_array($value, $disable)) {
        $opt .= ' disabled="disabled"';
    }

    $opt .= '&gt;' . $this-&gt;view-&gt;escape($label) . "&lt;/option&gt;";

    return $opt;
}
</code></pre>

<p>And all will go fine :)</p>

        </div>
    </div>
    </div>

