<h2>ZF-1013: Proposal for column aliases in Zend_Db_Select</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2007-03-05T09:04:08.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2007-07-05T14:43:53.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>0.9.0 (17/Mar/07)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Mark Gibson (jollytoad)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Db_Select</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>The ability to specify column aliases in a similar manner to table names.</p>

<p><em>(This summarises the discussion from the mailing list with Bill Karwin)</em></p>

<p>Example:</p>

<pre class="highlight"><code>
$adapter-&gt;select()-&gt;from('mytable', array(
    'alias1' =&gt; 'colA',
    'alias2' =&gt; new Zend_Db_Expr('fn(colB)'),
    'colC',
    'colD AS alias3',
    'alias4' =&gt; 'fncall2()',
    'fncall3() AS alias5'
));
</code></pre>

<p>It will work by checking the keys of the columns array,
any key that {{is_string()}} will be taken to be a column alias.</p>

<p>If a string matches the regular expression:</p>

<pre class="literal">
Then the string should be converted into the alias =&gt; column form.  It
should be very rare that a column name matches that pattern.  This will
make it easier for people to use {{"column AS alias"}} syntax in a simple
string.

Also if a column string matches the regular expression: </pre>

<p>Then the string should be converted into a Zend_Db_Expr.  It should be
very rare that a column name matches that pattern.  This will make it
easier for people to use common cases like {{"COUNT(*)"}}.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Mark Gibson (jollytoad) on 2007-03-05T09:07:41.000+0000</p> 
        <div class="body">
            <p>That last line should read:</p>

<pre class="literal">
COUNT(*)
</pre>

<p>(just discovered the preview button!)</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Mark Gibson (jollytoad) on 2007-03-05T11:04:01.000+0000</p> 
        <div class="body">
            <p>Fixed markup.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-03-13T15:36:08.000+0000</p> 
        <div class="body">
            <p>We discussed and implemented a small change to the regular expression for matching function calls in column strings.</p>

<p>Now the regular expression is:</p>

<pre class="highlight"><code>
/\(.*\)/
</code></pre>

<p>This supports expressions such as:</p>

<pre class="highlight"><code>
SQR(x)+1
</code></pre>

<p>It also means that any expression can be implicitly designated as a Zend_Db_Expr, simply by enclosing it in quotes.  So a string like the following:</p>

<pre class="highlight"><code>
'x+10'
</code></pre>

<p>can be made into a Zend_Db_Expr in either of the following two ways:</p>

<pre class="highlight"><code>
new Zend_Db_Expr( 'x+10' )
'(x+10)'
</code></pre>

<p>This change was made in revision 3881.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-03-15T19:30:21.000+0000</p> 
        <div class="body">
            <p>All the changes planned for this enhancement have been implemented as of revision 3881.
Documentation has been updated.</p>

        </div>
    </div>
    </div>

