<h2>ZF-6313: Zend Framework Quick Start : Registry - Use of Static or Object Instantiation</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Docs:  Improvement</dd>

    <dt>Created:</dt>
    <dd>2009-04-16T00:08:13.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2013-03-09T03:52:10.000+0000</dd>

    <dt>Status:</dt>
    <dd>Closed</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Frank Brückner (frosch)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Registry</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>The Quick Start uses the object instantiation method, which the Programmer's Reference Guide refers to as atypical and possibly buggy - <a href="http://framework.zend.com/manual/en/zend.registry.html">http://framework.zend.com/manual/en/…</a>. Furthermore, the example doesn't use the $registry = new Zend_Registry(array(), ArrayObject::ARRAY_AS_PROPS) but instead sets the Registry property directly with $registry-&gt;configuration = $configuration; For me this only added confusion as to which method was the "best practice" for setting the Registry Object properties. I suggest the Quick Start use the static methods mentioned as typical in the Programmer's Reference Guide and possibly refer to the Object Instantiation method as an option.</p>

<p>so instead of:
$registry = Zend_Registry::getInstance();
$registry-&gt;configuration = $configuration;
$registry-&gt;dbAdapter     = $dbAdapter;</p>

<p>it would be something like:
Zend_Registry::set('configuration', $configuration);
Zend_Registry::set('dbAdapter', $dbAdapter);</p>

<p>Also, the Registry entries are not being used in the bootstrap example, they are only being set. Would it make more sense to apply them as well?</p>

<p>so, instead of:
$dbAdapter = Zend_Db::factory($configuration-&gt;database);
Zend_Db_Table_Abstract::setDefaultAdapter($dbAdapter);</p>

<p>it would be something like:
Zend_Registry::set('dbAdapter', Zend_Db::factory(Zend_Registry::get('config')-&gt;database));
Zend_Db_Table_Abstract::setDefaultAdapter(Zend_Registry::get('dbAdapter'));</p>

<p>or:
$dbAdapter = Zend_Db::factory(Zend_Registry::get('config')-&gt;database);
Zend_Registry::set('dbAdapter', $dbAdapter);
Zend_Db_Table_Abstract::setDefaultAdapter(Zend_Registry::get('dbAdapter'));</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Frank Brückner (frosch) on 2013-03-09T03:51:35.000+0000</p> 
        <div class="body">
            <p>{quote}
so instead of:</p>

<pre class="highlight"><code>
$registry = Zend_Registry::getInstance();
$registry-&gt;configuration = $configuration;
$registry-&gt;dbAdapter = $dbAdapter;
</code></pre>

<p>it would be something like:</p>

<pre class="highlight"><code>
Zend_Registry::set('configuration', $configuration);
Zend_Registry::set('dbAdapter', $dbAdapter);
</code></pre>

<p>{quote}
The problem refers to an old version of the documentation.</p>

<p>{quote}
so, instead of:</p>

<pre class="highlight"><code>
$dbAdapter = Zend_Db::factory($configuration-&gt;database);
Zend_Db_Table_Abstract::setDefaultAdapter($dbAdapter);
</code></pre>

<p>it would be something like:</p>

<pre class="highlight"><code>
Zend_Registry::set('dbAdapter', Zend_Db::factory(Zend_Registry::get('config')-&gt;database));
Zend_Db_Table_Abstract::setDefaultAdapter(Zend_Registry::get('dbAdapter'));
</code></pre>

<p>or:</p>

<pre class="highlight"><code>
$dbAdapter = Zend_Db::factory(Zend_Registry::get('config')-&gt;database);
Zend_Registry::set('dbAdapter', $dbAdapter);
Zend_Db_Table_Abstract::setDefaultAdapter(Zend_Registry::get('dbAdapter'));
</code></pre>

<p>{quote}
Store the Db adapter in the registry is a very bad idea, because you do not need it.</p>

        </div>
    </div>
    </div>

