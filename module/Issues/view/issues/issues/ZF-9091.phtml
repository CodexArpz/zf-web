<h2>ZF-9091: Zend_Controller_Request_Http::setPathInfo setting path info to wrong string if base url doesnt exist in request uri</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2010-02-05T03:10:06.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2010-02-08T08:53:35.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.10.1 (10/Feb/10)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Matthew Weier O'Phinney (matthew)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Controller</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>The code is doing a substr on the request uri with the length of the base url without actually checking if the base url is in the request uri.  This can cause issues with it not finding either the module or the controller.</p>

<p>e.g. If the request uri is set to /auth/login and the index.php is located at /app/index.php then the base url is set to '/app'. In this case the path info is set to 'h/login' rather than '/auth/login' which is quite clearly wrong as we're not looking for a controller/module 'h', we're looking for auth.</p>

<p>The following code (line 626 in file Zend/Controller/Request/Http.php):</p>

<p>if ((null !== $baseUrl)
    &amp;&amp; (false === ($pathInfo = substr($requestUri, strlen($baseUrl)))))
{
    // If substr() returns false then PATH_INFO is set to an empty string
    $pathInfo = '';
} elseif (null === $baseUrl) {
    $pathInfo = $requestUri;
}</p>

<p>Needs changing to:</p>

<p>if (null !== $baseUrl
    &amp;&amp; ((!empty($baseUrl) &amp;&amp; 0 === strpos($requestUri, $baseUrl)) || empty($baseUrl))
    &amp;&amp; false === ($pathInfo = substr($requestUri, strlen($baseUrl))))
{
    // If substr() returns false then PATH_INFO is set to an empty string
    $pathInfo = '';
} elseif (null === $baseUrl || (!empty($baseUrl) &amp;&amp; false === strpos($requestUri, $baseUrl))) {
    $pathInfo = $requestUri;
}</p>

<p>or something similar to deal with this kind of situation.  This case is encountered when doing some rewrites of the url via apache (or other webserver software) before using the framework application.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2010-02-05T08:52:29.000+0000</p> 
        <div class="body">
            <p>Can you provide a reproducible test case, please?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Symphony IT (symphony) on 2010-02-08T02:09:31.000+0000</p> 
        <div class="body">
            <p>in the .htaccess file in the webroot of the current folder we have the following:</p>

<p>RewriteEngine on
RewriteCond %{REQUEST_FILENAME} -s [OR]
RewriteCond %{REQUEST_FILENAME} -l [OR]
RewriteCond %{REQUEST_FILENAME} -d
RewriteRule ^.<em>$ - [NC,L]
RewriteRule ^.</em>$ /app/index.php [NC,L]</p>

<p>redirecting any requests for files that don't exist through the new Zend Framework application's webroot (the Apache alias "/app").</p>

<p>So in the case of someone requesting via a url:</p>

<p><a href="http://testdomain.com/index/index">http://testdomain.com/index/index</a></p>

<p>this is obviously re-written via apache to:</p>

<p><a href="http://testdomain.com/app/index/index">http://testdomain.com/app/index/index</a></p>

<p>however, php is seeing the request uri as "/index/index" not "/app/index/index" because it is coming directly from the browser's request.</p>

<p>This means when it gets to the above mentioned code it is removing a sub-string of the length of "/app" from "/index/index" producing "ex/index" as the path info, obviously removing "/ind" even though this isn't the same as the base url "/app"</p>

<p>The same occurs, as mentioned above, with request uri "/auth/login" with it removing "/aut" therefore producing "h/login" as the path info</p>

<p>I've tested the new code provided above with our separate web-sites that run from from other base URLs and it seems to run correctly from those.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2010-02-08T08:25:30.000+0000</p> 
        <div class="body">
            <p>Fixed in trunk and 1.10 release branch. Thanks for providing the extra information -- I was able to create a reproduce case from that.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Symphony IT (symphony) on 2010-02-08T08:53:35.000+0000</p> 
        <div class="body">
            <p>Many Thanks, glad to help</p>

        </div>
    </div>
    </div>

