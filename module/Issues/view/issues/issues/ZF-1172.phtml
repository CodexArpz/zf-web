<h2>ZF-1172: option names do not follow coding standard</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Coding Standards Violation</dd>

    <dt>Created:</dt>
    <dd>2007-03-29T19:44:22.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2007-07-05T14:44:01.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Fabien MARTY (fab)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Cache</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <pre class="highlight"><code>
automaticSerialization
cacheDir
writeControl
automaticCleaningFactor
etc.
</code></pre>

<p>See: <a href="http://framework.zend.com/wiki/x/PQ#PHPCodingStandard%28draft%29-NamingConventions">Naming Conventions</a></p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Fabien MARTY (fab) on 2007-03-30T11:52:54.000+0000</p> 
        <div class="body">
            <p>sorry but I didn't found anything about option option names in your link.</p>

<p>can you provide an example ?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Gavin (gavin) on 2007-03-30T12:12:10.000+0000</p> 
        <div class="body">
            <p>{quote}
h2. Naming Conventions</p>

<p>h3. Abstractions Used in API (Class Interfaces)</p>

<p>When creating an API for use by application developers (as opposed to Zend Framework internal developers), if application developers must identify abstractions using a compound name, separate the names using underscores, not camelCase. For example, the name used for the MySQL PDO driver is 'pdo_mysql', not 'pdoMysql'. When the developer uses a string, normalize it to lowercase. Where reasonable, add constants to support this (e.g. PDO_MYSQL).
{quote}</p>

<p>I only mention this because Andi asked me to make the same changes to the options of Zend_Db last Summer.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-04-04T12:59:05.000+0000</p> 
        <div class="body">
            <p>I've been making camelCase option names in Zend_Db and other places too.  But I use UPPER_CASE_WITH_UNDERSCORES for constant names.  We should reconsider a policy that strings that form option names must follow a certain capitalization.  I'll talk with Andi about this.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Gavin (gavin) on 2007-04-04T13:08:15.000+0000</p> 
        <div class="body">
            <p>FYI, We had a long discussion last Summer and decided specifically to make option names case-insensitive.  Most of the ZF seems to follow that standard already.</p>

        </div>
    </div>
    </div>

