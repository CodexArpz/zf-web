<h2>ZF-11991: Zend_Json_Server only allows error codes RESERVED for JSON-RPC implementation</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2012-01-12T07:43:22.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-02-26T19:13:52.000+0000</dd>

    <dt>Status:</dt>
    <dd>Open</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Matthew Weier O'Phinney (matthew)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Json_Server</li>
            <li>zf-crteam-needsexpert</li>
            <li>zf-crteam-review</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF2-181">ZF2-181</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Zend_Json_Server only allows errors in range(-32099, -32000).</p>

<p>This range is within the  -32768 to -32000 range the JSON-RPC spec reserves. Zend_Json_Server should NOT allow using these codes, but allow any other.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2012-01-12T14:31:46.000+0000</p> 
        <div class="body">
            <p>Um... Zend_Json_Server <em>is</em> a JSON-RPC implementation; how is this a problem?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by John Kleijn (448191) on 2012-01-12T15:06:05.000+0000</p> 
        <div class="body">
            <p>True, I did not say Zend_Json_Server should not use these codes, I said it should not ALLOW using these codes. The are reserved for the protocol implementation, ie Zend_Json_Server itself.</p>

<p>Yet client code can only invoke errors within the reserved range. This is not in compliance with the spec:</p>

<p>"The error codes from and including -32768 to -32000 are reserved for pre-defined errors. Any code within this range, but not defined explicitly below is reserved for future use. The error codes are nearly the same as those suggested for XML-RPC at the following url: <a href="http://xmlrpc-epi.sourceforge.net/specs/rfc.fault_codes.php">http://xmlrpc-epi.sourceforge.net/specs/â€¦</a>"</p>

<p>The spec then goes on listing the specific protocol error codes, and listing the range -32099 / -32000 as:</p>

<p>-32000 to -32099    Server error    Reserved for implementation-defined server-errors.</p>

<p>The section (5.1) closes with the following statement:</p>

<p>"The remainder of the space is available for application defined errors."</p>

<p>Clearly, the protocol implementation does not mean the whole ZF based application but just Zend_Json_Server. So Zend_Json_Server should limit itself to this range, not the application, as the remainder of the space is "available" for the application. Furthermore, the rest of the application should not even be allowed to set codes in this range, because they are "reserved" for the protocol implementation.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by John Kleijn (448191) on 2012-01-17T10:01:33.000+0000</p> 
        <div class="body">
            <p>Anyone?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Adam Lundrigan (adamlundrigan) on 2012-02-26T05:21:24.000+0000</p> 
        <div class="body">
            <p>Does allowing the userspace application to set protocol error codes cause any direct negative side-effects?  Unless there is a demonstrable problem, we shouldn't change this behaviour for fear of breaking those userspace implementations which are using those error codes.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by John Kleijn (448191) on 2012-02-26T09:52:53.000+0000</p> 
        <div class="body">
            <p>I get that. At the very least, the right error codes should be allowed in the 1.9 cycle, and since 2.0 isn't final yet, disallowing wrong error codes should be added to that branch.</p>

<p>Tbh, I haven't checked the latest beta, but assuming it's not fixed there (which is a reasonable assumption), it should be ASAP. Otherwise this won't be fixed until 3.0 and god knows when that will be.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Adam Lundrigan (adamlundrigan) on 2012-02-26T15:48:49.000+0000</p> 
        <div class="body">
            <p>Apologies, I misread your initial report.  I thought you meant they CAN set protocol error codes, but you meant they <em>CAN ONLY</em> set errors in that reserved range.  If that is the case, it is something which should be fixed.  Could you point to me where these error codes are defined for JSON-RPC? Their <a href="http://json-rpc.org/wiki/specification">v1 specification</a> doesn't mention anything about it.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by John Kleijn (448191) on 2012-02-26T16:28:21.000+0000</p> 
        <div class="body">
            <p>Tbh, I do not understand your confusion. The spec says the range -32768 to -32000 is reserved for protocol implementation. In the context of ZF, this refers to Zend_Json_Server. Yet the implementation does not allow client code to set any error codes outside of this range, while that range should be private to that component. Client code should be allowed to use any code, other than the ones within that range.</p>

<p>I really cannot interpret the spec in any other way.</p>

<p>Please refer to <a href="http://jsonrpc.org/spec.html">http://jsonrpc.org/spec.html</a>, section 5.1.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Adam Lundrigan (adamlundrigan) on 2012-02-26T17:24:59.000+0000</p> 
        <div class="body">
            <p>Just a simple misread - missed the word "only" in your bug description.  I've never used JSON-RPC, and I don't pretend to know anything about it (as evidenced by the fact that I found the wrong spec).</p>

<p>After reading the spec you linked to, you are definitely right.  The only constraints on the error code field are (1) that it must be an integer and (2) -32768 to -32000 are reserved.</p>

<p>Not being familiar with the usage of Zend_Json_Server, I have a (dumb) question: do clients listen for specific error codes?  I ask this because the simple change below to implement your request will cause some response codes to change.  Explanation:</p>

<p>Currently, when {{Zend_Json_Server_Error::setCode}} is given a code outside the reserved range it ignores it and the internal variable {{$_code}} remains set to the last "valid" code specified (-32000 by default).  This is important because when I updated {{Zend_Json_Server_Error::setCode}} to accept any integer code:</p>

<pre class="highlight"><code>
Index: library/Zend/Json/Server/Error.php
===================================================================
--- library/Zend/Json/Server/Error.php  (revision 24665)
+++ library/Zend/Json/Server/Error.php  (working copy)
@@ -92,13 +92,7 @@
             return $this;
         }

-        $code = (int) $code;
-        if (in_array($code, $this-&gt;_allowedCodes)) {
-            $this-&gt;_code = $code;
-        } elseif (in_array($code, range(-32099, -32000))) {
-            $this-&gt;_code = $code;
-        }
-
+        $this-&gt;_code = (int) $code;
         return $this;
     }
</code></pre>

<p>A test fails:</p>

<pre class="highlight"><code>
1) Zend_Json_ServerTest::testHandleRequestWithExceptionShouldReturnErrorResponse
Failed asserting that </code></pre><p></p><p></p>
        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by John Kleijn (448191) on 2012-02-26T18:09:55.000+0000</p> 
        <div class="body">
            <p>Yes, clients MAY listen to error codes, obviously. If they did not, there would be no reason to change the component to comply to spec (a problem without symptoms wouldn't be a problem). I get your point though: any applications built on the faulty implementation that rely on the current faulty error code handling would fail.</p>

<p>Still, can we please fix this upstream? In all honesty I've already worked around this by subclassing some classes (who can wait for a ticket here to be resolved, honestly), but I'm just very disappointed in the quality of this component. Lets just fix it upstream, please.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Adam Lundrigan (adamlundrigan) on 2012-02-26T18:45:06.000+0000</p> 
        <div class="body">
            <p>I've opened a matching issue in the ZF2 space (ZF2-181).</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by John Kleijn (448191) on 2012-02-26T19:05:29.000+0000</p> 
        <div class="body">
            <p>Thank you. Still, I would like someone to asses the scope of the change that fixes this (partly) in the 1.9 cycle. In other words, can someone give some weight to the proposed break of BC by NOT casting application error codes to the reserved range? For many leads like myself ZF 2.0 is very, very far away.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Adam Lundrigan (adamlundrigan) on 2012-02-26T19:09:38.000+0000</p> 
        <div class="body">
            <p>I've flagged this issue for the <a href="http://blog.astrumfutura.com/2010/06/zend-framework-community-review-team/">CR Team</a> to review.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by John Kleijn (448191) on 2012-02-26T19:13:52.000+0000</p> 
        <div class="body">
            <p>Thank you. Glad someone finally took a look at this issue.</p>

        </div>
    </div>
    </div>

