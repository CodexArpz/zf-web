<h2>ZF-10494: MySql columns missing, columns names are mixed</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2010-09-23T23:42:03.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2010-11-13T14:04:02.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Ralph Schindler (ralph)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Db</li>
            <li>Zend_Db_Adapter_Mysqli</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-5677">ZF-5677</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Hi Zend Team,
I am using the following:</p>

<p>Windows 7 Enterprise,
PHP Version     5.2.14,
Zend Framework Version       1.10.8,
Apache/2.2.16 (Win32) mod_ssl/2.2.16 OpenSSL/0.9.8o 
MySql 5.0.1.</p>

<p>I have a mysql db which can be build using the following code:</p>

<pre class="highlight"><code>
-- phpMyAdmin SQL Dump
-- version 3.3.3
-- <a href="http://www.phpmyadmin.net">http://www.phpmyadmin.net</a>
--
-- Host: localhost
-- Generation Time: Sep 24, 2010 at 09:29 AM
-- Server version: 5.1.50
-- PHP Version: 5.2.14

SET SQL_MODE="NO_AUTO_VALUE_ON_ZERO";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;

--
-- Database: `conta`
--

-- --------------------------------------------------------

--
-- Table structure for table `dealer`
--

CREATE TABLE IF NOT EXISTS `dealer` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  `cif` varchar(10) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=2 ;

--
-- Dumping data for table `dealer`
--

INSERT INTO `dealer` (`id`, `name`, `cif`) VALUES
(1, 'metro', '3245');

-- --------------------------------------------------------

--
-- Table structure for table `invoice`
--

CREATE TABLE IF NOT EXISTS `invoice` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `dealer_id` int(11) NOT NULL,
  `invoice_date` datetime NOT NULL,
  `invoice_number` varchar(20) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=2 ;

--
-- Dumping data for table `invoice`
--

INSERT INTO `invoice` (`id`, `dealer_id`, `invoice_date`, `invoice_number`) VALUES
(1, 1, '2010-09-16 00:00:00', '123');

-- --------------------------------------------------------

--
-- Table structure for table `invoice_row`
--

CREATE TABLE IF NOT EXISTS `invoice_row` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `invoice_id` int(11) NOT NULL,
  `product_id` int(11) NOT NULL,
  `quantity` double NOT NULL,
  `buy_price` double NOT NULL,
  `sell_price` double NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=3 ;

--
-- Dumping data for table `invoice_row`
--

INSERT INTO `invoice_row` (`id`, `invoice_id`, `product_id`, `quantity`, `buy_price`, `sell_price`) VALUES
(1, 1, 1, 23, 432, 456),
(2, 1, 2, 34, 5, 45);

-- --------------------------------------------------------

--
-- Table structure for table `product`
--

CREATE TABLE IF NOT EXISTS `product` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  `mu` varchar(50) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=3 ;

--
-- Dumping data for table `product`
--

INSERT INTO `product` (`id`, `name`, `mu`) VALUES
(1, 'salam', 'kg'),
(2, 'smantana', 'litru');
</code></pre>

<p>I ALSO HAVE THE FOLLOWING MODEL:</p>

<pre class="highlight"><code>
&lt;?php

require_once 'application/models/dealer/Dealer.php';
require_once 'application/models/dealer/DealerException.php';
require_once 'application/models/dealer/DealerValidator.php';

/** 
 * This class represents the model which contains all dealers.
 * 
 * @author IZuzu
 * 
 * 
 */
class DealerModel extends Zend_Db_Table {
    
    /** The name of the database table where this model is mapped. */
    private static $_DB_TABLE_NAME = 'dealer';
    
    /**
     * Constructs a default db linked dealer model.
     */
    public function __construct() {
        parent::__construct ();
        $this-&gt;_name = DealerModel::$_DB_TABLE_NAME;
    }
    
    /**
     * Creates a new dealer into this model.
     * 
     * @param Dealer $dealer the dealer to add into this model.
     */
    public function createDealer(Dealer $dealer) {
        $dealerValidator = new DealerValidator ( $dealer );
        if ($dealerValidator-&gt;isValid ()) {
            $dealerData = array ('name' =&gt; $dealer-&gt;getName (), 'cif' =&gt; $dealer-&gt;getCif () );
            $this-&gt;insert ( $dealerData );
        } else {
            throw new DealerException ( 'The entered dealer is not valid' );
        }
    }
    
    /**
     * Updates a dealer from this model.
     * 
     * @param Dealer $dealer the dealer to update its info.
     */
    public function updateDealer(Dealer $dealer) {
        $dealerValidator = new DealerValidator ( $dealer );
        if ($dealerValidator-&gt;isValid ()) {
            $dealerData = array ('name' =&gt; $dealer-&gt;getName (), 'cif' =&gt; $dealer-&gt;getCif () );
            $condition = 'id = "' . $dealer-&gt;getId () . '"';
            $this-&gt;update ( $dealerData, $condition );
        } else {
            throw new DealerException ( 'The entered dealer is not valid' );
        }
    }
    
    /**
     * Drops a dealer from this model.
     * 
     * @param Dealer $dealer the dealer to drop from this model.
     */
    public function dropDealer(Dealer $dealer) {
        $condition = 'id = "' . $dealer-&gt;getId () . '"';
        $this-&gt;delete ( $condition );
    }
    
    /**
     * Gets all dealers from inside this model.
     */
    public function getAllDealers() {
        return $this-&gt;getDealersCollection ( null );
    }
    
    /**
     * Gets all dealers that have a name matching a string.
     * 
     * @param string $likeExpression the name to match.
     */
    public function getNameFilterDealers($likeExpression) {
        $condition = 'name like "%' . $likeExpression . '%"';
        return $this-&gt;getDealersCollection ( $condition );
    }
    
    /**
     * Gets a dealer with a specified id.
     * 
     * @param int    $id the dealer's id.
     */
    public function getDealerById($id) {
        $condition = 'id=' . $id;
        $dealers = $this-&gt;getDealersCollection ( $condition );
        if (count ( $dealers ) &gt; 0) {
            return $dealers [$id];
        } else {
            return null;
        }
    }
    
    /**
     * Gets the dealers collection that passes through a filter.
     * 
     * @param string $filter the filter applied to this collection extraction.
     */
    
    private function getDealersCollection($filter) {
        $dealers = array ();
        $spreadDealers = $this-&gt;fetchAll ( $filter, null );
        while ( $spreadDealers-&gt;valid () ) {
            $dealerRow = $spreadDealers-&gt;current ();
            if (null !== $dealerRow) {
                $id = $dealerRow ['id'];
                $name = $dealerRow ['name'];
                try {
                    $cif = $dealerRow ['cif'];
                } catch ( Exception $e ) {
                    $cif = $dealerRow [DealerModel::$_DB_TABLE_NAME];
                }
                $dealers [$id] = new Dealer ( $id, $name, $cif );
            }
            $spreadDealers-&gt;next ();
        }
        return $dealers;
    }

}

?&gt; 
</code></pre>

<p>AS YOU CAN SEE IN THE FOLLOWING LINES, I'VE MADE A HACK IN ORDER TO MAKE THIS WORK:</p>

<pre class="highlight"><code>
try {
                    $cif = $dealerRow ['cif'];
                } catch ( Exception $e ) {
                    $cif = $dealerRow [DealerModel::$_DB_TABLE_NAME];
                }
</code></pre>

<p>AS THIS REFLECTS THE ACTUAL RESULT RETURNED FROM THE ADAPTER.</p>

<p>What happens is that, for some reason, fetching data from a database may result in the followin strange results:</p>

<ol><li>One or more columns missing from the result.</li>
<li>One column's name is replaced with the name of the TABLE (as shown ABOVE and BELOW).</li>
<li>One column's name is replaced with the name of the DATABASE (as shown BELOW).</li>
<li>One or more columns names are replaced with different strings (like 'def').</li>
</ol><p>ANOTHER EXAMPLE is the following:</p>

<p>given the code</p>

<pre class="highlight"><code>
$this-&gt;configuration = new Db_Configuration ();
$this-&gt;adapter = Zend_Db::factory ( $this-&gt;configuration-&gt;getAdapterType (), $this-&gt;configuration-&gt;getParameters () );
$results = $this-&gt;adapter-&gt;fetchAssoc ( 'select id, invoice_id, product_id, quantity, buy_price, sell_price from invoice_row' );
</code></pre>

<p>WHERE Db_Configuration class is defined as</p>

<pre class="highlight"><code>
&lt;?php

/**
 * This class will contain all database configuration.
 *
 * @author IZuzu
 *
 *
 */
class Db_Configuration {
    
    /** Type of the adapter. */
    private $adapterType = 'Pdo_Mysql';
    
    /** The db host */
    private $host = 'localhost';
    
    /** The db username to use in connection */
    private $username = 'root';
    
    /** The db username password */
    private $password = '';
    
    /** The db name. */
    private $dbName = 'conta';
    
    /**
     * Get adapter type.
     */
    public function getAdapterType() {
        return $this-&gt;adapterType;
    }
    
    /**
     * Get all parameters of this connection.
     */
    public function getParameters() {
        $params = array ('host' =&gt; $this-&gt;host, 'username' =&gt; $this-&gt;username, 'password' =&gt; $this-&gt;password, 'dbname' =&gt; $this-&gt;dbName);
        return $params;
    }

}

?&gt;
</code></pre>

<p>WILL ACTUALLY result in array $results containing data rows with</p>

<p>1.5 columns (instead of 6)
2. columns names are :
 id, invoice_id, invoice_row (which is AGAIN the name of the table), conta (name of the database), def (DON'T KNOW WHERE THIS IS COMING FROM)</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Zuzu Iulian (beuzozel) on 2010-09-23T23:44:33.000+0000</p> 
        <div class="body">
            <p>If any details is needed I am more than happy to help with it. Just drop me an email and i will try to get a response as fast as possible.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ralph Schindler (ralph) on 2010-09-24T11:30:35.000+0000</p> 
        <div class="body">
            <p>Fixed formatting</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ralph Schindler (ralph) on 2010-09-24T11:52:38.000+0000</p> 
        <div class="body">
            <p>Sorry, given what you have provided me, I cannot reproduce this error.</p>

<pre class="highlight"><code>
~/Projects/ScratchZF/scripts/zenddb$ php --version
PHP 5.2.13 (cli) (built: Jul  1 2010 17:01:07) 
Copyright (c) 1997-2010 The PHP Group
Zend Engine v2.2.0, Copyright (c) 1998-2010 Zend Technologies
    with Zend Debugger v5.2, Copyright (c) 1999-2009, by Zend Technologies
</code></pre>

<pre class="highlight"><code>
&lt;?php

/**
    Mysql Server version: 5.1.41
 
 SCHEMA: 

CREATE TABLE IF NOT EXISTS `invoice_row` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `invoice_id` int(11) NOT NULL,
  `product_id` int(11) NOT NULL,
  `quantity` double NOT NULL,
  `buy_price` double NOT NULL,
  `sell_price` double NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=3 ;

--
-- Dumping data for table `invoice_row`
--

INSERT INTO `invoice_row` (`id`, `invoice_id`, `product_id`, `quantity`, `buy_price`, `sell_price`) VALUES
(1, 1, 1, 23, 432, 456),
(2, 1, 2, 34, 5, 45);




 */

set_include_path('/Users/ralphschindler/Projects/ZFStandardTrunk/library');


$username = 'developer';
$password = 'developer';
$dbname   = 'test';

// ZEND_DB
require_once 'Zend/Loader/Autoloader.php';
Zend_Loader_Autoloader::getInstance();
$dbAdapter = Zend_Db::factory(
    'Pdo_Mysql',  
    array('hostname' =&gt; 'localhost', 'username'=&gt;$username,'password'=&gt;$password,'dbname'=&gt;$dbname)
    );

$results = $dbAdapter-&gt;fetchAssoc ( 'select id, invoice_id, product_id, quantity, buy_price, sell_price from invoice_row' );
var_dump($results);
</code></pre>

<p>OUTPUT:</p>

<pre class="highlight"><code>
$ php db-issue-10494.php     
array(2) {
  [1]=&gt;
  array(6) {
    ["id"]=&gt;
    string(1) "1"
    ["invoice_id"]=&gt;
    string(1) "1"
    ["product_id"]=&gt;
    string(1) "1"
    ["quantity"]=&gt;
    string(2) "23"
    ["buy_price"]=&gt;
    string(3) "432"
    ["sell_price"]=&gt;
    string(3) "456"
  }
  [2]=&gt;
  array(6) {
    ["id"]=&gt;
    string(1) "2"
    ["invoice_id"]=&gt;
    string(1) "1"
    ["product_id"]=&gt;
    string(1) "2"
    ["quantity"]=&gt;
    string(2) "34"
    ["buy_price"]=&gt;
    string(1) "5"
    ["sell_price"]=&gt;
    string(2) "45"
  }
}
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Zuzu Iulian (beuzozel) on 2010-09-26T23:14:05.000+0000</p> 
        <div class="body">
            <p>Hi Ralph,
I've done some other testing and I've found out something interesting.</p>

<p>1.Testing this in a direct deployment, works really nice (the results are exactly the same to be expected). (deployed on a Zend Server - works perfectly fine).</p>

<p>2.Testing it under a Zend Studio IDE (run or debug mode) works the way I expressed before. (tested under Zend Studio 8.0 Beta and Zend Studio 7.2.0)</p>

<p>So, it seems to me that this is not an Zend Framework issue, but rather a Zend Studio issue.
Please update and let me know if there is something that can be done in order to have this problem solved (maybe move this issue to some other place).</p>

<p>Thanks very much for your quick response and interest in resolving this issue.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Zuzu Iulian (beuzozel) on 2010-09-26T23:21:53.000+0000</p> 
        <div class="body">
            <p>One more thing to mention:
Both Zend Studio versions are Trial versions (if it makes any difference).</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Rodney Marsh (rodney_marsh) on 2010-10-13T15:33:09.000+0000</p> 
        <div class="body">
            <p>I also had the same problem using:</p>

<p>Zend Studio 8.0 Beta
ZendServer-CE-5.0.2_RC153-Windows_x86
PHP 5.2.13
Apache/2.2.15 (Win32) mod_ssl/2.2.15 OpenSSL/0.9.8n
Zend Framework 1.10.8
Zend Debugger 5.3</p>

<p>The problem occurred when I ran with the Zend studio CGI php executable with Zend Debugger. However when I switched to using the Zend Server CGI php executable with XDebug the issue was resolved.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Scott Moorhouse (smoorhouse) on 2010-11-13T14:03:59.000+0000</p> 
        <div class="body">
            <p>I am having this same issue. I believe that it has nothing to do with ZF, but with Zend Studio 8.</p>

<p>The key component in reproducing this is that you must specifically be querying a table with a column named 'name'.</p>

<p>This is enough to reproduce the problem:</p>

&lt;?php

$db = new PDO('mysql:host=localhost;dbname=magento', 'xxxx', 'xxxx');
foreach ( $db-&gt;query('SELECT website_id,code,name FROM core_website') as $row ) {
    print_r($row);
}
?&gt;

<p>print_r will substitute 'core_website' for the column name 'name'.</p>

        </div>
    </div>
    </div>

