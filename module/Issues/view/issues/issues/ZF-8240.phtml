<h2>ZF-8240: Make Zend_Loader_PluginLoader check for existing classes not Zend_Load' ed</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2009-11-06T01:06:48.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-11-06T06:14:11.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Matthew Weier O'Phinney (matthew)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Loader</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>I ran into a small issue with Zend_Loader_PluginLoader, where I have it lazy load some event listeners. The class of one of the listeners was already loaded, and Zend_Loader_PluginLoader didn't find it. Although it's certainly true that Zend_Loader_PluginLoader isn't needed for classes that are already loaded, and in almost all cases I've encountered this hasn't come up, it seems worth a call to class_exists just in case. I wrote a snippet to deal with this which I included below.</p>

<p>class TheOkPhatzby_Loader_PluginLoader extends Zend_Loader_PluginLoader {</p>

<pre><code>public function load($name, $throwExceptions = true)
{
    if(class_exists($name, false)){
        return $name;
    }
    return parent::load($name, $throwExceptions);
}   
</code></pre>

<p>}</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2009-11-06T06:13:58.000+0000</p> 
        <div class="body">
            <p>I'm curious about your implementation, as it doesn't seem like it would do what you'd expect.</p>

<p>$name in this case is the "short name" of the plugin being loaded, and as such shouldn't resolve to a full class name -- that assembly happens later in the method, when looping through prefix-paths. Additionally, passing a boolean false to the second argument of class_exists() would skip autoloading -- which means that even if the class were resolvable via autoloading (typically a big performance boost), it wouldn't be found.</p>

<p>Finally, during load(), we already do a check against class_exists() per prefix-path, prior to attempting to load any files.</p>

<p>I'm going to mark this as "not an issue", but if you can provide some profiling/benchmarking showing an actual change in performance, feel free to re-open.</p>

        </div>
    </div>
    </div>

