<h2>ZF-1792: add 'setParamByRef()' and 'getParamByRef()' to controller (and wherever else similar functions exist)</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2007-07-31T08:54:24.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2008-02-14T12:13:14.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Matthew Weier O'Phinney (matthew)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Controller</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Kudos to all the fine folks that have made this really nifty framework! :)</p>

<p>I have been working at hacking in a templating system ('smarty'), a layout mechanism, and an alternate rendering system for a project I'm working on. It seems to me that this ought to be a relatively straightforward procedure. Win-win type of thing-- use  the Zend framework to get its plethora of modules and functionality, and extend / bend / whatever it a bit to add in the functionality I want without having to carve up the base framework. But when I try to use the 'setParam()' and 'getParam()' methods of the controller, I find they are not passing references but rather copies (or more accurately, copy-on-write copies) and so are not useful for storing references to external data. Ie. I cannot create an array and store it in the controller using 'setParam()' and be able to modify the original later. This creates problems because if I then (somewhere else down the road) retrieve the variable from the controller using 'getParam()', all I get is a copy (copy-on-write) version of the variable and any changes I make to it are not saved in the original. (Though I suppose it would be possible to get the variable, make the changes and then re-store it). What I propose however are two new functions specifically to provide this functionality: 'setParamByRef()' and 'getParamByRef()' which would offer the developer his/her choice of methods. Which would simplify passing external data references through the framework.</p>

<p>Furthermore I suggest that if any other modules (classes) use this sort of set/get Param interface that they too be modified to include a set/get by reference version.</p>

<p>Sample code:</p>

<pre><code>    public function setParamByRef ($name, &amp;$value) {
            $name = (string) $name;
            $this-&gt;_invokeParams[$name] = $value;
            return $this;
            }

    public function &amp; getParamByRef ($name) {
            if (isset($this-&gt;_invokeParams[$name])) {
                    return $this-&gt;_invokeParams[$name];
                    }
            return null;
            }
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Darby Felton (darby) on 2007-07-31T09:17:49.000+0000</p> 
        <div class="body">
            <p>Assigning to [~matthew] to initiate issue review.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by BW (bratwiz) on 2007-07-31T09:38:16.000+0000</p> 
        <div class="body">
            <p>A typo in the code posted above, this should be right:</p>

<pre><code>    public function setParamByRef ($name, &amp;$value) {
            $name = (string) $name;
            $this-&gt;_invokeParams[$name] =&amp; $value;
            return $this;
            }

    public function &amp; getParamByRef ($name) {
            $ret = null;
            if (isset($this-&gt;_invokeParams[$name])) {
                    return $this-&gt;_invokeParams[$name];
                    }
            return $ret;
            }
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2008-02-14T12:13:14.000+0000</p> 
        <div class="body">
            <p>When working with smarty, you need to write your own wrappers as it is anyways, so you can add methods to your view implementation to do this. Not a ZF issue.</p>

        </div>
    </div>
    </div>

