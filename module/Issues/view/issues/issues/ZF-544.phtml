<h2>ZF-544: Allow the method on the class set in Zend_Rest_Server::setClass() accept variable number of params</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2006-11-11T18:07:46.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2007-07-05T14:43:28.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Pádraic Brady (padraic)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Davey Shafik (davey)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Rest_Server</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Copy of a related email:</p>

<p>Hi all,</p>

<p>I've been trying to setup a simple web service using the REST server. The basic premise is that I have a single table holding a collection of notes. Each note row has id, user, tag and text fields. The idea of the webservice was to allow an API for the client to retrieve notes using a combination of field values (on the server class Zend_Rest_Server handles from the parameters would be used to build a WHERE string).</p>

<p>Because its so simple, and can be easily done with a single class method, I created the following allowed routes (using parameters rather than a query string).</p>

<ol><li><a href="http://www.example.com/service/note/user/XXX">http://www.example.com/service/note/user/XXX</a> (Get notes by user id)</li>
<li><a href="http://www.example.com/service/note/tag/XXX">http://www.example.com/service/note/tag/XXX</a> (Get notes by tag)</li>
<li><a href="http://www.example.com/service/note/user/XXX/tag/XXX">http://example.com/service/note/…</a> (get notes by tag, restricted to user id)</li>
<li><a href="http://www.example.com/service/note/id/XXX">http://www.example.com/service/note/id/XXX</a> (Get a single note by id)</li>
</ol><p>No consideration given to limiting access. Params set when calling Zend_Rest_Server::handle().</p>

<p>I then implemented a simple handler method on the class passed to Zend_Rest_Server::setClass() which would accept a variable number of parameters. This is prevented however by;</p>

<p>[line 113, Zend/Rest/Server.php]
if (sizeof($calling_args) &lt; sizeof($func_args)) {
    throw new Zend_Rest_Server_Exception('Invalid Method Call to ' .$method. '. Requires ' .sizeof($func_args). ', ' .sizeof($calling_args). ' given.', 400);
}</p>

<p>Any plans to allow variable parameter counts in the future? Without that facility, it means adding a chunk of logic in the ServiceController::noteAction() method to determine the correct parameter count and order, and then adding multiple public methods on the handler class. Additionally, parameters on the handler class method <em>must</em> be very specific with the parameter variable name being the key string on any request parameter prefixed with $, i.e. if the array passed to Zend_Rest_Server::handle() contains the param array('tag'=&gt;'ajax'), the handler method must call it's parameter $tag (anything else fails).</p>

<p>All this seems fairly confusing unless you dig into the code to figure out the quirks. Otherwise I really like this component, I look forward to using it regardless :).</p>

<p>Regards,
Pádraic</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2006-11-13T15:04:33.000+0000</p> 
        <div class="body">
            <p>Assigning to Davey.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Davey Shafik (davey) on 2006-11-13T15:18:10.000+0000</p> 
        <div class="body">
            <p>This isn't really feasible. However, I may look into it further just for fun, but for now, I don't think the restriction is too hard.</p>

<p>You can of course, write a simple wrapper class, where each method accepts specific args, or make the function accept the max number of args coming in, and pass in a $request array to the handle() method which defines the empty ones as null or false or some such :)</p>

<ul><li>Davey</li>
</ul>
        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2006-11-17T12:40:06.000+0000</p> 
        <div class="body">
            <p>Another possiblity is to override the rest server to allow variable numbers of arguments.</p>

<p>Also, if there are a finite number of possible arguments, consider declaring and documenting your method differently:</p>

<pre class="highlight"><code>
/**
 * Note handler
 *
 * @param string|int $user
 * @param string|int $tag
 * @param int $id
 * @return array|string
public function note($user = null, $tag = null, $id = null)
{
}
</code></pre>

<p>Notice the use of the | operator in the docblock. By setting default values for each argument, you make them optional, effectively allowing between 0 and 3 arguments; by setting multiple types for each argument in the docblock, you allow different types of arguments. With some creative docblock/optional argument pairing, you can probably achieve what you need to accomplish.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Pádraic Brady (padraic) on 2006-11-17T13:19:39.000+0000</p> 
        <div class="body">
            <p>The way I did it was simply to have a few public methods for each set of args proxy to the same private method which handled the querying. It wasn't difficult to set up, so once I got over the paramater restrictions it was plain sailing from there.</p>

<p>I'll keep the other suggestions on tap for the future. Thanks!</p>

        </div>
    </div>
    </div>

