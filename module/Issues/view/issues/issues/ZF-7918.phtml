<h2>ZF-7918: Zend_Filter::filterStatic() include file not found warnings: namespaces</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2009-09-21T15:03:48.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-09-27T00:45:16.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.10.0 (27/Jan/10)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Thomas Weidner (thomas)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Filter</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Hi</p>

<p>I'm having problems using namespaces. I wrote a few of my own filters and put them in LSS/Filter (which is correctly on the include path).</p>

<pre class="highlight"><code>
$type = 'Alpha'; // a builtin ZF filter
Zend_Filter::filterStatic( $value, $type, $params, array( 'LSS_Filter', 'Zend_Filter' ) );
</code></pre>

<p>results in</p>

<pre class="highlight"><code>
Warning: Zend_Loader::include(LSS/Filter/Alpha.php) [function.Zend-Loader-include]: failed to open stream: No such file or directory in 
/Users/stevep/Documents/lss/projects/library/Zend/Loader.php on line 83
</code></pre>

<p>It seems that whatever namespace goes first will find its filters with no problems, second or subsequent namespaces result in a warning message even though it correctly loads the builtin Zend/Filter/Alpha.php
The desired behaviour is that no warning message would be generated.</p>

<p>The problem can be easily fixed by putting an @ in front of the include statement in line 83 of Zend/Loader.php
because in Zend/Filter.php the class loader blindly tries namespaces in order: (snippet below from that file, line 172ff)</p>

<pre class="highlight"><code>
if (!class_exists($className)) {
  try {
    Zend_Loader::loadClass($className);
  } catch (Zend_Exception $ze) {
    continue;
  }
}
</code></pre>

<p>But the include warning is probably useful in other contexts? 
Maybe using Zend_Loader_Autoloader here would be a more permanent fix?</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Till Klampaeckel (till) on 2009-09-22T13:43:22.000+0000</p> 
        <div class="body">
            <p>Fixed formatting.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2009-09-22T14:22:35.000+0000</p> 
        <div class="body">
            <p>Fixed with r18379</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Benjamin Eberlei (beberlei) on 2009-09-23T10:36:06.000+0000</p> 
        <div class="body">
            <p>Zend_Loader_Autoloader::autoload() creates an instance of the autoloader internally, which appends itself to the spl_autoload_register() stack if not yet done before, for example when people have their own autoloaders this could potentially be a problem.</p>

<p>Is this a desired side-effect?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Benjamin Eberlei (beberlei) on 2009-09-23T23:26:43.000+0000</p> 
        <div class="body">
            <p>thomas, in regard to our discussion i think plugin loader is really the correct way to solve this problem.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2009-09-27T00:45:12.000+0000</p> 
        <div class="body">
            <p>Fixed with r18424</p>

        </div>
    </div>
    </div>

