<h2>ZF-3046: Setting default decorators for Zend_Form_Element</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>New Feature</dd>

    <dt>Created:</dt>
    <dd>2008-04-04T06:09:47.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2008-04-04T06:38:59.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Benjamin (crem0r)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Matthew Weier O'Phinney (matthew)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Form</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-2713">ZF-2713</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>It should be possible to set default decorator for elements.</p>

<p>Add this to Zend_Form_Element:</p>

<pre class="highlight"><code> 
    /**
     * Default Element decorators 
     * @var array
     */
    protected static $_defaultDecorators = array('ViewHelper',
                                                 'Errors',
                                                 'HtmlTag' =&gt; array('tag' =&gt; 'dd'),
                                                 'Label'   =&gt; array('tag' =&gt; 'dt'));

    /**
     * Set default decorators
     *
     * @param array $decorators
     */
    static public function setDefaultDecorators($decorators) {
        self::$_defaultDecorators = $decorators;
    }

    /**
     * Add a default decorator
     *
     * @param string $decorator
     * @param string|null $options
     * @throws Zend_Form_Exception for invalid type
     */
    static public function addDefaultDecorator($decorator, $options = null) {
        if (is_array($decorator)) {
            throw new Zend_Form_Element_Exception('Arrays not allowed');
        }

        if ($options === null) {
            self::$_defaultDecorators[] = $decorator;
            return;
        }
        self::$_defaultDecorators[$decorator] = $options;
    }

    /**
     * Clear all default decorators
     */
    static public function clearDefaultDecorators() {
        self::$_defaultDecorators = null;
    }
</code></pre>

<p>Use Cases:</p>

<pre class="highlight"><code> 
        Zend_Form_Element::setDefaultDecorators(array('ViewHelper',
                                                      'Description' =&gt; array('placement' =&gt; 'append'),
                                                      'Errors',
                                                      'HtmlTag' =&gt; array('tag' =&gt; 'dd'),
                                                      'Label' =&gt; array('tag' =&gt; 'dt')));

        Zend_Form_Element::addDefaultDecorator('HtmlTag', array('tag' =&gt; 'test'));

        Zend_Form_Element::clearDefaultDecorators();
</code></pre>

<p>This would be a not destructive Update. The Class would work exactly like before if you don't use the new methods.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2008-04-04T06:38:21.000+0000</p> 
        <div class="body">
            <p>Not every element inheriting from Zend_Form_Element uses the same default decorators, and for this reason the use of statics is not a viable solution.</p>

<p>Any class that inherits from Zend_Form_Element has the option of overriding the loadDefaultDecorators() method, which is the appropriate place to define default decorators for that element type.</p>

<p>Additionally, the default decorators are never loaded if you provide decorators during instantiation (via the options array or a config object).</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2008-04-04T06:38:59.000+0000</p> 
        <div class="body">
            <p>Proposal does not fit component design.</p>

        </div>
    </div>
    </div>

