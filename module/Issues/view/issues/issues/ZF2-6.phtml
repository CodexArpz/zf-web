<h2>ZF2-6: Zend_Config_Xml: allow extending for lower levels</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>New Feature</dd>

    <dt>Created:</dt>
    <dd>2009-01-30T05:54:32.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-04-29T10:45:44.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Ben Scholzen (dasprid)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend\Config</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
        <li><a href="/issues/secure/attachment/11726/zf-5660.diff">zf-5660.diff</a></li>
        </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>It would be great if it is possible to define extends in lower xml structure levels. Take a look at this xml structure below.</p>

<pre class="highlight"><code>sliding7510</code></pre>

<p>I am not sure what to do with {{staging.second-application.entries-per-page}}. Should it use {{entries-per-page=5}} or {{entries-per-page=10}}?</p>

<p>I think this improvement will need a complete refactoring of Zend_Config(_Xml).</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Jan Pieper (jpieper) on 2009-01-30T09:52:57.000+0000</p> 
        <div class="body">
            <p>corrected xml example.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Jan Pieper (jpieper) on 2009-02-02T16:04:44.000+0000</p> 
        <div class="body">
            <p>This evening I tried to solve this issue and I think IÂ´ve found a good way. I used this modified xml structure:</p>

<pre class="highlight"><code>sliding75jumping10</code></pre>

<p>My Zend_Config_Xml::__construct() is:</p>

<pre class="highlight"><code>public function __construct($filename, $section = null, $allowModifications = false)
{
    if (empty($filename)) {
        require_once 'Zend/Config/Exception.php';
        throw new Zend_Config_Exception('Filename is not set');
    }
    
    set_error_handler(array($this, '_loadFileErrorHandler'));
    $config = simplexml_load_file($filename); // Warnings and errors are suppressed
    restore_error_handler();
    
    // Check if there was a error while loading file
    if ($this-&gt;_loadFileErrorStr !== null) {
        require_once 'Zend/Config/Exception.php';
        throw new Zend_Config_Exception($this-&gt;_loadFileErrorStr);
    }
    
    $sections = array();
    if (is_array($section)) {
        $sections = $section;
    } elseif ($section !== null) {
        if (!isset($config-&gt;$section)) {
            require_once 'Zend/Config/Exception.php';
            throw new Zend_Config_Exception("Section '$section' cannot be found in $filename");
        }
        $sections = array($section);
    }
    
    parent::__construct(
        $this-&gt;_processExtendsRecursive($config, $sections),
        $allowModifications
    );

    $this-&gt;_loadedSection = $section;
}</code></pre>

<p>And I replaced Zend_Config_Xml::_processExtends() with new Zend_Config_Xml::_processExtendsRecursive():</p>

<pre class="highlight"><code>protected function _processExtendsRecursive(SimpleXMLElement $element,
                                            array $sections = array(),
                                            $depth = 0)
{
    $config = array();
    foreach ($element-&gt;children() as $children)
    {
        $childs = $children-&gt;children();
        $config[$elementName = $children-&gt;getName()] = empty($childs)
            ? $this-&gt;_toArray($children)
            : $this-&gt;_processExtendsRecursive($children, array(), $depth+1);
        
        $attributes = $children-&gt;attributes();
        foreach ($attributes as $attribute =&gt; $value)
        {
            if ($attribute !== 'extends') {
                continue;
            }
            
            $extendedSection = (string)$value;
            if (!array_key_exists($extendedSection, $config)) {
                require_once 'Zend/Config/Exception.php';
                throw new Zend_Config_Exception("Section '$extendedSection' cannot be found");
            }
            
            $data = $config[$extendedSection];
            if (is_array($data) &amp;&amp; is_array($config[$elementName])) {
                $config[$elementName] = $this-&gt;_arrayMergeRecursive(
                    $data, $config[$elementName]
                );
            } elseif (is_array($data)) {
                $config[$children-&gt;getName()] = $data;
            }
            
            if ($depth == 0) {
                $this-&gt;_assertValidExtend($elementName, $extendedSection);
            }
        }
    }
    
    if (!empty($sections)) {
        foreach ($config as $key =&gt; $value) {
            if (!in_array($key, $sections)) {
                unset($config[$key]);
            }
        }
    }
    
    if (empty($config)) {
        $config = (string)$element;
    }
    return $config;
}</code></pre>

<p>Following script...</p>

<pre class="highlight"><code>&lt;?php

require_once 'Zend/Config/Xml.php';
$config = new Zend_Config_Xml('zf-5660.xml');

require_once 'Zend/Debug.php';
Zend_Debug::dump($config-&gt;toArray());</code></pre>

<p>...will output this:</p>

<pre class="highlight"><code>array(3) {
  ["production"] =&gt; array(2) {
    ["first-application"] =&gt; array(2) {
      ["paginator-type"] =&gt; string(7) "sliding"
      ["entries-per-page"] =&gt; string(1) "7"
    }
    ["second-application"] =&gt; array(2) {
      ["paginator-type"] =&gt; string(7) "sliding"
      ["entries-per-page"] =&gt; string(1) "5"
    }
  }
  ["staging"] =&gt; array(2) {
    ["first-application"] =&gt; array(2) {
      ["paginator-type"] =&gt; string(7) "jumping"
      ["entries-per-page"] =&gt; string(2) "10"
    }
    ["second-application"] =&gt; array(2) {
      ["paginator-type"] =&gt; string(7) "sliding"
      ["entries-per-page"] =&gt; string(1) "5"
    }
  }
  ["testing"] =&gt; array(2) {
    ["first-application"] =&gt; array(2) {
      ["paginator-type"] =&gt; string(7) "jumping"
      ["entries-per-page"] =&gt; string(2) "10"
    }
    ["second-application"] =&gt; array(2) {
      ["paginator-type"] =&gt; string(7) "sliding"
      ["entries-per-page"] =&gt; string(1) "5"
    }
  }
}</code></pre>

<p>I also attached all these changes to Zend_Config_Xml to this issue: zf-5660.diff</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Rob Allen (rob) on 2009-02-02T23:55:18.000+0000</p> 
        <div class="body">
            <p>Currently there is feature parity between XML and INI formats.  How would this work with the INI file format?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Jan Pieper (jpieper) on 2009-02-03T01:12:53.000+0000</p> 
        <div class="body">
            <p>Yeah I already thought about how to realize this improvement for INI files but I have no really good idea because INI files have only one real dimension. Using "." in INI files to allow multidimensional INI configurations is no standard I think. You can use it for all other applications without any problems but they do not know that you want to define a multidimensional configuration.</p>

<pre class="highlight"><code>[foo]
foo.bar = test</code></pre>

<pre class="highlight"><code>&lt;?php

parse_ini_file('example.ini', true);</code></pre>

<p>will result in:</p>

<pre class="highlight"><code>array(1) {
  ["foo"] =&gt;
  array(1) {
    ["foo.bar"]=&gt;
    string(4) "test"
  }
}</code></pre>

<p>and not:</p>

<pre class="highlight"><code>array(1) {
  ["foo"] =&gt;
  array(1) {
    ["foo"] =&gt;
    array(1) {
      ["bar"]=&gt;
      string(4) "test"
    }
  }
}</code></pre>

<p>Without complete redefinition of our INI format, I think it will be very tricky to allow the same functionality to INI files.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ben Scholzen (dasprid) on 2009-02-04T06:17:44.000+0000</p> 
        <div class="body">
            <p>This feature cannot be implemented until 2.0 for the following reason: At the moment, the "extend" attribute is only reserved for the section-, but no deeper element. Thus, this feature would break BC, as users could still have used the "extend" attribute in they config files (short param syntax).</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ben Scholzen (dasprid) on 2009-02-18T08:48:29.000+0000</p> 
        <div class="body">
            <p>After talking with Matthew about it, we decided that this break (for XML is allowed).</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Rob Allen (rob) on 2009-03-21T13:04:03.000+0000</p> 
        <div class="body">
            <p>Personally, I'm not convinced this is a good idea as it introduces potential confusion and additional complexity when writing config files for relatively little gain.</p>

<p>e.g.</p>

<pre class="highlight"><code>
<var>one</var>
        bar<var>two</var>
    <var>three</var>
    baz</code></pre>

<p>$config-&gt;app2-&gt;var  now equals "three" rather than two as probably expected due to a typo.</p>

<p>However, having said that, if someone develops a patch with unit tests then if Matthew's happy for it to go in, then that's fine.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2010-03-21T10:27:51.000+0000</p> 
        <div class="body">
            <p>Reassigned to component maintainer</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Rob Allen (rob) on 2011-05-27T01:53:39.000+0000</p> 
        <div class="body">
            <p>We'll look at this again when refactoring ZF2. I personally think that being able to load a file into another file will solve this one more cleanly with less user confusion.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Rob Allen (rob) on 2012-04-28T16:14:38.000+0000</p> 
        <div class="body">
            <p>Ben: Any thoughts for ZF2?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ben Scholzen (dasprid) on 2012-04-29T10:45:44.000+0000</p> 
        <div class="body">
            <p>As we are not supporting inheritance in ZF2 anymore, this issue will be closed.</p>

        </div>
    </div>
    </div>

