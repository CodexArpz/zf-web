<h2>ZF-9968: NotEmpty Validator treats objects as empty</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2010-06-09T05:49:55.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2010-07-24T11:15:36.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.10.7 (28/Jul/10)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Thomas Weidner (thomas)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Validate</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>I am referring to issue ZF-7631. There is claimed that Zend_Validate_NotEmpty does not accept anything other than string, boolean etc.</p>

<p>Although I basically agree with Thomas' post, that it does not make sense to check an object for emptiness, I wonder why it treats objects as empty by default rather than as "notEmpty". I came over that issue when trying to validate a Zend_Date object with the input filter. The property's presence is required, which makes Zend_Filter_Input add an NotEmpty-Validator to the chain. As all objects are always treated as empty, my date object does never get the chance to meet Zend_Validate_Date.</p>

<p>So please consider to change the default behaviour to "notEmpty" for objects instead of "empty". If null is passed instead of the object, it then should hit "empty", as expected. This issue impacts the filter chains of zend_filter_input.</p>

<p>Thanks for looking into the matter again.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2010-06-09T12:43:44.000+0000</p> 
        <div class="body">
            <p>Zend_Validate_NotEmpty returns an failure and states:
"Invalid type given, value should be float, string, array, boolean or integer"</p>

<p>The same would apply to resources, connections or other non-scalar inputs.</p>

<p>The thing is:
When you give a false input, you can't rely on a correct functional behaviour of a validator. False means "failure"... which type of failure has to be checked.</p>

<p>When we switch the behaviour of the validator to return "true" for all types which are not recognised it would also be treated as false behaviour.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2010-07-24T11:15:35.000+0000</p> 
        <div class="body">
            <p>New feature implemented with r22663</p>

        </div>
    </div>
    </div>

