<h2>ZF-2577: _dependentTables and _referenceMap should have class parameter</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2008-02-05T12:54:59.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-08-06T10:50:29.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.9.0 (31/Jul/09)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Ralph Schindler (ralph)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Db_Table</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-2724">ZF-2724</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
        <li><a href="/issues/secure/attachment/11195/1.5.1.patch">1.5.1.patch</a></li>
            <li><a href="/issues/secure/attachment/11183/abstract.diff">abstract.diff</a></li>
            <li><a href="/issues/secure/attachment/11182/abstract.diff">abstract.diff</a></li>
        </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>I tried to follow Coding Standard and Naming Conventions with my database models. But it all breaks when I try $paper-&gt;findPaperWriter() or $paperWriter-&gt;findParentPaper().</p>

<p>CREATE TABLE paper ...
CREATE TABLE paper_writer
(
paper_id...
);</p>

<p>So I'd like to have</p>

<p>Database/Paper.php
Database/Paper/Writer.php</p>

<p>class Database_Paper
class Database_Paper_Writer</p>

<p>All of this would work, if I would call $paper-&gt;findDatabasePaperWriter() or $paperWriter-&gt;findParentDatabasePaperWriter(), but as you can see this is not a very good solution. I found two solutions.</p>

<ol><li><p>"class" parameter in _dependentTables and _referenceMap, that would tell ZF to look for certain class instead of trying magically resolve it. Zend/Db/Table/Row/Abstarct.php findDependentRowset() and findParentRow() should check for if there parameter has been set and use that instead of the one received as $dependentTable or $parentTable parameter.</p></li>
<li><p>have addHelperPath() similar to Zend_View View Helper</p></li>
</ol>
    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Teemu Välimäki (cred) on 2008-02-05T13:14:34.000+0000</p> 
        <div class="body">
            <p>Quick test with Zend/Db/Table/Row/Abstract.php findDependentRowset() seems to work just fine!</p>

<pre class="highlight"><code>
        $dependapleTables = $this-&gt;_getTable()-&gt;getDependentTables();
        if (is_array($dependapleTables[$dependentTable])) {
            Zend_Loader::loadClass($dependapleTables[$dependentTable]['class']);

            $dependentTable = new $dependapleTables[$dependentTable]['class'](array('db' =&gt; $db));
        } elseif (is_string($dependentTable)) {
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Teemu Välimäki (cred) on 2008-02-05T13:15:36.000+0000</p> 
        <div class="body">
            <p>Apparently I don't know how to use comment markup on here, sorry about that.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Teemu Välimäki (cred) on 2008-02-06T06:08:46.000+0000</p> 
        <div class="body">
            <p>After using my fix for a while I noticed some problems with Parent magic methods. I noticed, that there's a lot of code that would require if clauses. So instead of option 1. I presented earlier I'm now leaning towards option 2. of using addDatabasePath(). Option 2 would also be backwards compatible and would ease working.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Teemu Välimäki (cred) on 2008-02-06T13:51:47.000+0000</p> 
        <div class="body">
            <p>After some copy paste from Zend_View I have a working Zend_Db_Table_Abstract and Zend_Db_Table_Row_Abstract, that utilizes addDatabasePath() concept and this time it even seems to work without a problem.</p>

<p>I'll generate a patch of it tomorrow after cleanup.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Teemu Välimäki (cred) on 2008-03-17T13:31:04.000+0000</p> 
        <div class="body">
            <p>This patch modifies Db/Table/Abstract.php and Db/Table/Row/Abstract.php adding the possibility to have prefixes for database files. I have database tables on each file so hierarchially so, that it's 1:1 to the datbase.</p>

<p>Example of Customer table:
In bootstrap
Zend_Db_Table_Abstract::addRelationshipPath('../library/Site/Db/Table', 'Site_Db_Table');</p>

<p>../library/Site/Db/Table/Customer.php
class Site_Db_Table_Customer{}</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Teemu Välimäki (cred) on 2008-03-17T15:48:12.000+0000</p> 
        <div class="body">
            <p>This is a proper patch. The previous contained hardcoding from my codebase.</p>

<p>Perhaps the first str_replace('' could be replaced with some ZF core function?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Teemu Välimäki (cred) on 2008-03-20T06:53:29.000+0000</p> 
        <div class="body">
            <p>The _addPath had a minor defunc, when it didn't check if the path already exists.</p>

<p>Fixed function</p>

<pre class="highlight"><code>
    private function _addPath($path, $prefix = null)
    {
        foreach ((array) $path as $dir) {
            // attempt to strip any possible separator and
            // append the system directory separator
            $dir = str_replace(array('/', '\\'), DIRECTORY_SEPARATOR, $dir);
            $dir = rtrim($dir, DIRECTORY_SEPARATOR . DIRECTORY_SEPARATOR)
                 . DIRECTORY_SEPARATOR;
            $params = array('prefix' =&gt; $prefix, 'dir' =&gt; $dir);

            if (!in_array($params, self::$_path)){
                // add as array with prefix and dir keys
                array_unshift(self::$_path, $params);
            }
        }
    }
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Teemu Välimäki (cred) on 2008-03-20T08:20:41.000+0000</p> 
        <div class="body">
            <p>I think this is change is required to maintain compability with those who wont be using RelationshipPath. The main point is the code inside else.</p>

<pre class="highlight"><code>
    protected function _prepareReference(Zend_Db_Table_Abstract $dependentTable, Zend_Db_Table_Abstract $parentTable, $ruleKey)
    {
        if (count($parentTable-&gt;getRelationshipPath() &gt; 0) {
            foreach ($parentTable-&gt;getRelationshipPath() as $relationshipPath) {
                $parentTable = str_replace('_', '', str_replace($relationshipPath, '', get_class($parentTable)));
            }
        } else {
            $parentTable = get_class($parentTable);
        }
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-03-25T20:43:52.000+0000</p> 
        <div class="body">
            <p>Please categorize/fix as needed.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Teemu Välimäki (cred) on 2008-03-27T11:31:55.000+0000</p> 
        <div class="body">
            <p>This latest patch contains all the fixes applied against trunk.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Teemu Välimäki (cred) on 2008-03-27T11:55:28.000+0000</p> 
        <div class="body">
            <p>And of course I managed to screw newest patch up a bit. Table/Row/Abstract.php line 776 is missing closing )</p>

<p>Otherwise it's good to go</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Teemu Välimäki (cred) on 2008-04-01T14:25:16.000+0000</p> 
        <div class="body">
            <p>My patches remove @ in front of Zend_Loader and thus, should to some extent solve the issue.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-12-04T13:17:30.000+0000</p> 
        <div class="body">
            <p>Reassigning to Ralph since he's the new maintainer of Zend_Db</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ralph Schindler (ralph) on 2009-01-10T11:09:06.000+0000</p> 
        <div class="body">
            <p>Will evaluate within 2 weeks</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ralph Schindler (ralph) on 2009-08-06T10:50:28.000+0000</p> 
        <div class="body">
            <p>Marking this as 'wont fix'.  There are a couple of new components in place that would better facilitate what you are asking for.  First is the module autoloader in Zend_Application.  You can read about the Zend_Application_Module_Autoloader here <a href="http://framework.zend.com/docs/quickstart/create-a-model-and-database-table">http://framework.zend.com/docs/quickstart/…</a> and here <a href="http://devzone.zend.com/article/4525">http://devzone.zend.com/article/4525</a></p>

<p>As for the magic finder __call() method, I would tend to stay away from it: findParentClassNameByRule() in favor of the actual calls themselves: findParentRow($class ...) and findDependentRowset($class, ...)</p>

<p>Have a look at the new Zend_Application functionailty, i think it solves what you are looking for.</p>

<p>-ralph</p>

        </div>
    </div>
    </div>

