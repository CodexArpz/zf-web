<h2>ZF-3489: Add an option for locally-scoped variables</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>New Feature</dd>

    <dt>Created:</dt>
    <dd>2008-06-21T12:31:32.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2008-10-28T19:45:04.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Matthew Weier O'Phinney (matthew)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_View</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Please add a method, something like {{Zend_View::setLocallyScopedVariables($flag = true)}}, default false, that will extract view context variables into the local scope.</p>

<p>The code in {{render()}} might look like this:</p>

<pre class="highlight"><code>
public function render($name)
{
    // find the script file name using the parent private method
    $this-&gt;_file = $this-&gt;_script($name);
    unset($name); // remove $name from local scope

    if ($this-&gt;_locallyScopedVariables) {
        export(get_object_vars($this)); // bring variables into local scope
    }

    ob_start();
    $this-&gt;_run($this-&gt;_file);

    return $this-&gt;_filter(ob_get_clean()); // filter output
}
</code></pre>

<p>Thanks!</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Jon Whitcraft (sidhighwind) on 2008-10-28T15:04:41.000+0000</p> 
        <div class="body">
            <p>Can you provide more details as to why this should be in?  What's wrong with using the OO approach of $this-&gt;?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Ratzloff (mratzloff) on 2008-10-28T16:23:15.000+0000</p> 
        <div class="body">
            <p>Hi Jon,</p>

<p>Well, why not?  People have mentioned it as desirable, it's easy to achieve, and it won't have a significant impact on performance when enabled (and no impact when not).  A win for flexibility in usage.</p>

<p>For example, here's a blog post where someone mentions this: <a href="http://www.whitewashing.de/blog/articles/39">http://www.whitewashing.de/blog/articles/39</a></p>

<p>Beyond this, I imagine plenty of organizations have legacy views that they simply included (i.e., with include_once).  So this has the potential to simplify migration to Zend Framework for them with a quick toggle.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2008-10-28T17:27:08.000+0000</p> 
        <div class="body">
            <p>I <em>do</em> have an issue with it:. It requires adding more accessors and option handling to the constructor, potentially breaking compatibility with other view implementations. It's not a completely BC change.</p>

<p>This can be easily achieved already by subclassing Zend_View or Zend_View_Abstract in a custom class; I'll gladly accept in Extras, but not in the standard library.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Ratzloff (mratzloff) on 2008-10-28T18:00:00.000+0000</p> 
        <div class="body">
            <p>Hi Matthew,</p>

<p>Seems like you'd only have to add a simple static setter to Zend_View_Abstract, perhaps a static setter to Zend_View for convenience, and the following code snippet to Zend_View_Abstract::__construct():</p>

<pre class="highlight"><code>
        if (array_key_exists('locallyScopedVariables', $config)) {
            self::setLocallyScopedVariables($config['locallyScopedVariables']);
        }
</code></pre>

<p>Unless I'm mistaken, the only way I see BC breaking is if someone has already extended the class and expects a "locallyScopedVariables" option.  Is this what you were referring to?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2008-10-28T18:34:26.000+0000</p> 
        <div class="body">
            <p>I'm increasintly of the opinion that statics are a bad idea inside the framework; they make testing difficult, and lead to complicated relations between objects. There are a few places where they make sense -- Zend_Loader and Zend_Locale are two exceptions that make sense. But in the case of Zend_View, I think it's an idea that will lead to maintenance nightmares. In this particular case, having it static makes no sense; just do it as a member property.</p>

<p>However,, there's also the case of feature creep; how many specific user features should we allow to creep into the product? If we have a configuration option for one, it sets a precedent later for additional ones, and it becomes harder to argue against their inclusion. We already have users and detractors breathing down our necks about performance and bloat -- why would we want to hand them new arguments?</p>

<p>Finally, there is a very long-standing architectural decision in play with this specific request. We made the decision at the outset that assigned view variables would be in their own scope to ensure they would not conflict with local view script variables. Yes, you <em>can</em> extract() them in your view script, but the recommendation is to keep them in their own scope so you know where each variable originates.</p>

<p>You <em>can</em> create -- trivially, even --  your own Zend_View_Abstract extension that does what you want, but ZF will not ship this functionality in the standard library, as it is contrary to our goals.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Ratzloff (mratzloff) on 2008-10-28T19:45:04.000+0000</p> 
        <div class="body">
            <p>To be fair, the implementation itself (static versus instance property) was largely up to the implementor, but I can see your point on feature creep.  Thanks for your detailed response.</p>

<p>I actually don't particularly care one way or the other about this, but I've seen it brought up and thought it should be addressed officially in some manner.</p>

        </div>
    </div>
    </div>

