<h2>ZF-3882: InArray validator for nested arrays</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2008-08-07T05:29:52.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-09-29T14:28:14.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.10.0 (27/Jan/10)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Thomas Weidner (thomas)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Validate</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>The current InArray implementation does not support nested arrays. Which makes it unusable for selects with optgroups (for example). Have such functionality will enable this functionality.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Brett Patterson (bpat1434) on 2008-08-14T13:20:28.000+0000</p> 
        <div class="body">
            <p>This is a huge downfall.  It's creating a usability issue with my form.  I can extend it; however, this should be a default feature.  Is it too late to be added to 1.6?  Perhaps for 1.6.1?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Brett Patterson (bpat1434) on 2008-08-14T19:43:12.000+0000</p> 
        <div class="body">
            <p>Just like to point out that I found two work-arounds for this.  The first is the easiest and that is if you are retrieving valid items from a database, then whenever you iterate through to create the optgroup items, add the valid values to a new array and pass it in as a parameter to the InArray validator.</p>

<p>The other option is to override the InArray validator and add another method.  I called it calculateValids() and here is it's construct:</p>

<pre class="highlight"><code>
class My_Validators_InArray extends Zend_Validate_Abstract
{
    CONST NOT_IN_ARRAY = 'notInArray';
    
    protected $_messageTemplates = array(
        self::NOT_IN_ARRAY =&gt; '\'%value%\' was not found in the haystack',
    );
    
    protected $_haystack;
    
    protected $_strict;
    
    public function __construct(array $haystack, $strict=false)
    {
        $this-&gt;setHaystack($haystack)
            -&gt;setStrict($strict);
    }
    
    public function calculateValids($array)
    {
        $valids = array();
        foreach($array as $key=&gt;$value)
        {
            if(is_array($value))
                $valids = array_merge($valids, $this-&gt;calculateValids($value));
            else
                $valids[] = $key;
        }
        return $valids;
    }
    
    public function getHaystack()
    {
        return $this-&gt;_haystack;
    }
    
    public function setHaystack(array $haystack)
    {
        $this-&gt;_haystack = $this-&gt;calculateValids($haystack);
        
        return $this;
    }
    
    public function getStrict()
    {
        return $this-&gt;_strict;
    }
    
    public function setStrict($strict)
    {
        $this-&gt;_strict = $strict;
        return $this;
    }
    
    public function isValid($value)
    {
        $this-&gt;_setValue($value);
        if(!in_array($value, $this-&gt;_haystack, $this-&gt;_strict))
        {
            $this-&gt;_error();
            return false;
        }
        return true;
    }
}
</code></pre>

<p>Not the prettiest; however, it works :)  Hopefully this can make it in to the next release or minor release.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bart McLeod (mcleod@spaceweb.nl) on 2009-01-02T08:30:12.000+0000</p> 
        <div class="body">
            <p>I looked into the code of Zend_Form_Element_Multi, because I wanted to implement my own isValid method on a province select element. To my surprise, I found that validation of optgroups is supported. It works very well. The problem in my case was that I add added the multioptions in the render method, which is far to late for the validator to work (the validator will have no options at its disposal at all!).</p>

<p>After I implemented the getMultiOptions method to return a fixed set of provinces, validation worked just fine. So I wonder if this issue should not be marked as resolved?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2009-06-27T09:22:02.000+0000</p> 
        <div class="body">
            <p>Under code review since 27.06.2009 (Incubator r16316)</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2009-09-29T14:28:13.000+0000</p> 
        <div class="body">
            <p>Feature implemented with ZF1.10.
See option 'recursive'.</p>

        </div>
    </div>
    </div>

