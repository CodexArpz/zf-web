<h2>ZF-5761: How to prevent select sequece.next_val from dual ?</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2009-02-12T08:22:27.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-11-20T20:53:28.000+0000</dd>

    <dt>Status:</dt>
    <dd>Closed</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
        None
                    </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Db_Table</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-5758">ZF-5758</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Hi,</p>

<p>Still on optimizations with Oracle, we have seen as many "select sequece.next_val from dual" as "insert into xxx".
Isn't there a workarround so that we could use the 'returning' SQL keyword?</p>

<p>Here is an extract of the dedicated insert we had in our homemade framework:</p>

<pre class="highlight"><code>
protected function _insert() {

    if (!$this-&gt;dbIsParsed(get_class($this) . '::' . __FUNCTION__ . $this-&gt;_setPk)) {

        $cols = $this-&gt;_getColsToInsert();
        $colsInsert = $cols;
        $sqlCplSeq = "";
        $sqlCplRet = "";

        if ($this-&gt;_sqlSequence != '' &amp;&amp; !$this-&gt;_setPk) {
            //--- La pk sera retournée via la séquence
            unset($colsInsert[$this-&gt;_sqlPkIndex]);
            $sqlCplSeq = "{$this-&gt;_sqlSequence}.nextval, ";
            $sqlCplRet = "returning {$this-&gt;_sqlPk} into :{$this-&gt;_sqlPk}";
        }

        $colsInsert = array_map(array($this, '_formatInsertKey'), $colsInsert);

        $sql = "insert into {$this-&gt;_sqlTable}
                cols (" . implode(',', $cols) . ")
                values ($sqlCplSeq" . implode(',', $colsInsert) . ")
                $sqlCplRet";

       $bl = $this-&gt;dbParse($sql);

        if (!$bl) {
            throw new DboException("Objet non inséré (parse HS)");
        }

        foreach ($cols as $col) {
            switch ($this-&gt;_cols[$col]) {
                 case self::SYSDATE :
                     continue 2;
                     break;
            }
            $this-&gt;dbBind($col, $this-&gt;_getColLength($col));
        }
    }

    $this-&gt;dbMultiSet($this-&gt;_infos, false);

    $bl = $this-&gt;dbExecute(OCI_DEFAULT);
    if (!$bl) {
        throw new DboException("Objet non inséré");
    }
    $this-&gt;offsetSet($this-&gt;_sqlPk, $this-&gt;dbGetCol($this-&gt;_sqlPk));
    $this-&gt;_setPk = false;
}
</code></pre>

<p>Thx again,
Wilfried Loche</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Rob Allen (rob) on 2012-11-20T20:53:28.000+0000</p> 
        <div class="body">
            <p>Bulk change of all issues last updated before 1st January 2010 as "Won't Fix".</p>

<p>Feel free to re-open and provide a patch if you want to fix this issue.</p>

        </div>
    </div>
    </div>

