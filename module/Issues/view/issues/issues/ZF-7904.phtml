<h2>ZF-7904: invalid use of reference objects in AMF serializer</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2009-09-21T03:46:17.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-11-20T20:53:09.000+0000</dd>

    <dt>Status:</dt>
    <dd>Closed</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Mario Klaue (marioklaue)
            </dd>

    <dt>Assignee:</dt>
    <dd>
        None
                    </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Amf</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>the object reference mechanism in AMF serialization is broken
the problemn described in ZF-7634 is just a special case of the problem
but the problem exists for all objects and arrays</p>

<p>details:
the current serializer (in Amf/Parse/Amf3/Serializer.php) treats object as the same if they have the same value, this is wrong, 
instead objects should be compared by identity (obj1 === obj2), the builtin function array_search(...) compares objects/arrays 
by value and should therefore not be used here</p>

<p>a correct implementation would allow to transfer object graphs (sibling relation, child/parents relations) and furthermore would
likely much faster (no comparision by value required or even helpful)</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Stefan Klug (stefanklug) on 2009-09-22T13:51:33.000+0000</p> 
        <div class="body">
            <p>Hi Mario,</p>

<p>I'm sorry, but this is not entirely correct. You're right, that the comparison has to be done with ===. But that's exactly what is done by setting the third parameter of array_search to true.
So object referencing should work. But ZF-7634 is still valid. I'll comment on that there...</p>

<p>Cheers Stefan</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Mario Klaue (marioklaue) on 2009-09-22T14:46:17.000+0000</p> 
        <div class="body">
            <p>Hi Stefan,</p>

<p>you are right regarding the === operator. Today I have learned more about the === operator in PHP. It does a comparision based on value and type. I thought it would do a pointer comparision in the sense of C/C++.  But this is not the case and this is exactly the problem. All objects/arrays with the same value are treated as identical during AMF serialization. This leads to arkward situations in a Flex client if by accident unrelated object/arrays have the same value in PHP. 
Regarding ZF-7634, this is really just a special case of a much bigger problem! The problem exists for arbitrary complex arrays and objects. The implemented object referencing mechanism is just to eager. 
I'm working on a solution and i will send a possible bug fix later.</p>

<p>Greetings,
Mario</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Mario Klaue (marioklaue) on 2009-09-28T00:33:45.000+0000</p> 
        <div class="body">
            <p>Hello,</p>

<p>sorry gays. I'm not able to provide a bug fix which solves the problem for all situations. In my project it was good enough to disable the referencing mechanism for arrays.
But I could not find a general solution for the referencing mechanism.</p>

<p>Now I want to believe it is a problem of PHP. If PHP had a function to attach a unique ID to an object  a solution would be easy.
For the time being I'm giving up on this problem.</p>

<p>Greetings,
Mario</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Rob Allen (rob) on 2012-11-20T20:53:09.000+0000</p> 
        <div class="body">
            <p>Bulk change of all issues last updated before 1st January 2010 as "Won't Fix".</p>

<p>Feel free to re-open and provide a patch if you want to fix this issue.</p>

        </div>
    </div>
    </div>

