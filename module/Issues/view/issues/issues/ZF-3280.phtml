<h2>ZF-3280: Zend_Server_XmlRpc_Cache - does not improve performance</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2008-05-16T13:57:07.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2008-11-13T14:10:05.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.7.0 (17/Nov/08)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                David Goodwin (davidgoodwin)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Matthew Weier O'Phinney (matthew)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_XmlRpc_Server</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>[From matthew@zend.com]
-- David Goodwin <a href="mailto:david@palepurple.co.uk">david@palepurple.co.uk</a> wrote
(on Thursday, 15 May 2008, 10:43 PM +0100):</p>

<blockquote>
  <blockquote>
    <p>I've written a (relatively) small Zend_XmlRpc_Server service and I'm<br />
    pleased with the architecture of the code itself; however, I now need to<br />
    see if I can boost performance.</p>
    
    <p>The documentation [1] covers how the server definition can be cached<br />
    using Zend_XmlRpc_Server_Cache; unfortunately when I implemented this,<br />
    calling 1000 method calls goes from taking 1 minute 40s to 2m 40<br />
    seconds. Hardly a performance improvement!</p>
    
    <p>Has anyone else here used the Zend_XmlRpc_Server_Cache functionality,<br />
    and/or have any numbers to report back re "before and after"<br />
    implementing it?</p>
  </blockquote>
</blockquote>

<p>Unfortunately, the server cache does not do what I intended it to when I
originally coded it. The problem with performance is due to the fact
that it must both re-instantiate objects as well as perform reflection
on all of them -- but in reverse order (reflection objects are what are
cached).</p>

<p>I would like to address this in the future; would you be willing to put
an issue in the tracker, so it doesn't get lost, but also so that I can
ping you about testing?</p>

<p>In the meantime, you have a couple of options:</p>

<ul><li>First, don't use the server cache</li>
<li>Make sure you <em>are</em> using an opcode cache</li>
<li>Consider setting up functionality to cache read-only methods, so
that the XML-RPC server can be bypassed entirely for such calls.</li>
</ul>
    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2008-10-30T06:37:41.000+0000</p> 
        <div class="body">
            <p>Resolved in trunk. Usage remains the same. However, the server now stores the internal method mapping definition without requiring the Reflection objects used to generate it. This now nets a gain in performance when using Zend_XmlRpc_Server_Cache.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-11-13T14:10:05.000+0000</p> 
        <div class="body">
            <p>Changing issues in preparation for the 1.7.0 release.</p>

        </div>
    </div>
    </div>

