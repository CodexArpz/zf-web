<h2>ZF-5571: Make Zend_Controller_Plugin_Broker use the PluginLoader or give it it's own includeFileCache. </h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Performance Improvement</dd>

    <dt>Created:</dt>
    <dd>2009-01-17T07:22:22.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-01-17T08:04:27.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Matthew Weier O'Phinney (matthew)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Controller</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>This is in relation to  ZF-4670.</p>

<p>When registering a plugin with Zend_Controller_Plugin_Broker, the include path of the plugin is not added to the Zend_Loader_PluginLoader includeFileCache (if set). Apparently, Zend_Controller_Plugin_Broker has no ties to it whatsoever and only helpers and filters get added to this cache. By writing the controller plugin paths to the incFileCache and making the Plugin Broker aware of that file, bootstrapping might gain a performance boost.</p>

<p>Example (in Bootstrap):
{{Zend_Loader_PluginLoader::setIncludeFileCache('/path/to/incFileCache.php');}}
{{$frontController = Zend_Controller_Front::getInstance();}}
{{$frontController-&gt;registerPlugin(new My_Controller_Plugin()); // e.g. Initializer.php}}</p>

<p>The path to My_Controller_Plugin will not show up in the incFileCache.php file.</p>

<p>I would assume that most controller plugins are instantiated and registered during bootstrap. This will make Zend_Loader search the designated include paths for each plugin without an explicit include or require. Having an include cache would reduce or eliminate the need for that. The include file could then simply be included when the Plugin Broker is instantiated, thus including all plugin classes right before they are registered.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2009-01-17T08:03:30.000+0000</p> 
        <div class="body">
            <p>Well, the PluginBroker requires that you pass concrete instances to it, which means that if your plugin class name follows ZF naming conventions, you're using an opcode cache, and you use Zend_Loader::registerAutoload(), you'll have all the benefits and more of the PluginLoader's include path cache. (The include path cache in the PluginLoader is used because the plugins are loaded using short names that have to be resolved to full class names -- and the PluginLoader may actually need to check multiple class names before it finds a file that matches.)</p>

<p>So, in short, right now, there would be no performance benefit to having the plugin broker use the include path cache, as it does not use a plugin architecture that makes use of the PluginLoader.</p>

<p>A good issue to add to the tracker might be to request PluginLoader support for the plugin broker -- which would allow you to do this:</p>

<pre class="highlight"><code>
$frontController-&gt;registerPlugin('Intializer'); // searches for a plugin class ending in '_Initializer'
</code></pre>

<p>This would be a good enhancement for a future release of ZF.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2009-01-17T08:04:27.000+0000</p> 
        <div class="body">
            <p>Feel free to open a new issue requesting PluginLoader support for the plugin broker; however, I'm closing this issue as, as worded, it's not an issue.</p>

        </div>
    </div>
    </div>

