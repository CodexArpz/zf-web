<h2>ZF-2954: using zend_translate for custom validation message for each validation</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>New Feature</dd>

    <dt>Created:</dt>
    <dd>2008-03-24T11:52:05.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2008-09-02T10:39:07.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.6.0 (02/Sep/08)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Alexander Lanin (alexl)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Matthew Weier O'Phinney (matthew)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Validate</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-3313">ZF-3313</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Don't know whether I got the topic/summary right, what I mean is the often asked question:
"Zend_From offers a translator. However when more then one field uses a certain Validator, there is no way to set up different messages for every field"</p>

<p>One possible solution would be to translate the message and not just the key.
So this will be possible:</p>

<pre class="highlight"><code>
$validator_email_empty-&gt;setMessage("invalid_email_empty");
$validator_name_empty-&gt;setMessage("invalid_name_empty");
</code></pre>

<p>and sql or whatever (remember, this will be for several languages!):
invalid_email_empty =&gt; we do need your email address!
invalid_name_empty =&gt; name field cannot be empty</p>

<pre class="highlight"><code>Index: Validate/Abstract.php
===================================================================
--- Validate/Abstract.php   (revision 9039)
+++ Validate/Abstract.php   (working copy)
@@ -191,7 +195,10 @@
         $message = $this-&gt;_messageTemplates[$messageKey];
 
         if (null !== ($translator = $this-&gt;getTranslator())) {
-            if ($translator-&gt;isTranslated($messageKey)) {
+            if ($translator-&gt;isTranslated($message)) {
+                $message = $translator-&gt;translate($message);
+            }
+            elseif ($translator-&gt;isTranslated($messageKey)) {
                 $message = $translator-&gt;translate($messageKey);
             }
         }
</code></pre>

<p>now, before someone has the idea to do:
```
just think of Zend_Validate_Between with %min% and %max% in the message</p>

<p>Not sure whether I got the right approach to this, but for me it's working just fine!</p>

<p>In my sql I have a generic "notEmpty" =&gt; "this field is required" and "username_invalid_empty" =&gt; "you have to enter a username"
So I get the later message for username and the first one for all the other fields - in all required languages</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2008-03-24T17:30:05.000+0000</p> 
        <div class="body">
            <p>Just two comments on this:</p>

<p>*) actually there is a proposal written which makes it possible to translate exceptions. It would not make sense to double the same implementation in multiple components.</p>

<p>*) %xxx% is not a parameter for translations.... this would not work... the seperator have to be changed to work with translations to $s notation</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Alexander Lanin (alexl) on 2008-03-24T17:49:03.000+0000</p> 
        <div class="body">
            <p>1) what proposal? the only one I could find that is remotly related is <a href="http://framework.zend.com/wiki/display/ZFPROP/Zend_Validate+error+messages+-+Bill+Karwin">http://framework.zend.com/wiki/display/…</a>
But this is the one I want to fix ;-)</p>

<p>2) This is taken from sql of my current project (key, english, german):
password_validators_stringLengthTooLong - longer than %max% characters - länger als %max% Zeichen 
password_validators_stringLengthTooShort - shorter than %min% characters - Mindestens %min% Zeichen</p>

<p>It works fine with the solution I described,</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2008-03-25T10:09:54.000+0000</p> 
        <div class="body">
            <p>There is another proposal about generic exception handling.</p>

<p>And related to paramters:
There is only one handling of parameters when using internationalisation... $s... or %1$s when you have multiple one. All other ways of parameters are not handled by translation.</p>

<p>So the problem is when someone uses the way which only works for Validate he gets problem when he uses the same syntax in other classes.</p>

<p>The only thing I declare is that translation has to be the same in every component, and not that every component integrates his own way use doing this.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Alexander Lanin (alexl) on 2008-03-25T10:44:53.000+0000</p> 
        <div class="body">
            <p>agreed, this is more of a hotfix / tempfix
if the proposal you are talking about is coming out anytime soon this can be closed/removed completly</p>

<p>I'm gonna use this until there is another solution for the problem and direct people who are asking about internationalisation of validation messages here with the notice to read all comments :-)</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2008-03-25T10:56:36.000+0000</p> 
        <div class="body">
            <p>It's no problem to extend the core class as shown above and use the own extended class until a official way has been integrated.</p>

<p>But anyone doing this has to be aware of possible differences between self implemented way and the official one.</p>

<p>As I am the "master of desaster" for all translation and internationalization themes in ZF I am always aware of such themes... if there are any questions don't be shy to ask in the mailing list.</p>

<p>Keep in mind to extend the core class and not to rewrite it... otherwise you will have problems with any new release of ZF ;-)</p>

<p>And as already said, before we will integrate this into the core several other problems and issues have to be thought of to have a complete solution and not only a partitial one.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-03-25T20:45:43.000+0000</p> 
        <div class="body">
            <p>Please categorize/fix as needed.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-07-08T09:18:56.000+0000</p> 
        <div class="body">
            <p>Reassigning to Matthew for evaluation.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2008-08-04T13:59:03.000+0000</p> 
        <div class="body">
            <p>Functionality added in trunk and 1.6 release branch.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-09-02T10:39:07.000+0000</p> 
        <div class="body">
            <p>Updating for the 1.6.0 release.</p>

        </div>
    </div>
    </div>

