<h2>ZF-397: Zend_Log_Adapter_File exception thrown in __destruct</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2006-09-25T07:41:14.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2007-07-05T14:43:21.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Simon R Jones (studio24)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Bill Karwin (bkarwin)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Log</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>When using Zend::log with the simple text logging I ran a test to see what happened if the file is not writeable. I.e.</p>

<p>$data = 'some string';
Zend_Log::registerLogger(new Zend_Log_Adapter_File('/path/to/log.txt'));
Zend_Log::log($data);</p>

<p>This crashes PHP since the __destruct function in Zend_Log_Adapter_File calls $this-&gt;flush() which throws an exception if the file cannot be written to. During my learning of PHP5 I have seen that a __destruct method cannot throw an exception. The error returned is:</p>

<p>Fatal error: Exception thrown without a stack frame in Unknown on line 0</p>

<p>I am not sure the best practise in this case, though I presume testing if the file can be written to should be done elsewhere than the destructor (i.e. as part of the Zend_Log::registerLogger method).</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2006-11-28T17:54:54.000+0000</p> 
        <div class="body">
            <p>Scheduling for release 0.8.0.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-03-19T16:00:18.000+0000</p> 
        <div class="body">
            <p>Assign to Bill Karwin for verification that these issues are resolved by the new Zend_Log redesign.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Mike Naberezny (mike) on 2007-04-11T13:04:01.000+0000</p> 
        <div class="body">
            <p>No longer an issue since this class was replaced by {{Zend_Log_Writer_Stream}} in release 0.9.2.</p>

        </div>
    </div>
    </div>

