<h2>ZF-524: Change all private Zend_View_Abstract properties and methods to protected</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2006-11-09T15:13:18.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2007-07-05T14:43:27.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Matthew Weier O'Phinney (matthew)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_View</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Why are there private methods and properties in an abstract class?  Until Zend_View_Interface is created, it would be best to change all the private things to protected.  In order to extend Zend_View completely I had to do this.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2006-11-09T15:58:48.000+0000</p> 
        <div class="body">
            <p>Assigning to Matthew.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2006-11-10T11:26:57.000+0000</p> 
        <div class="body">
            <p>The reason most methods and properties of Zend_View_Abstract are private has to do with variable and method scope from within the actual view scripts. View scripts are included directly within the render() method, and thus have access to all public and protected methods and properties of the object instance, but not to those marked private. This helps prevent the view scripts from having uncontrolled access to the entire view object.</p>

<p>Zend_View_Interface will correct the issue you present regarding difficulty extending the base view class; it will provide a slimmed-down interface for the developer may implement when desiring to use a different template engine in the framework. Since this class is on the roadmap for the next release, and because changing the visibility of the Zend_View_Abstract methods and properties would have far-ranging effects within the view scripts, it does not make sense to change Zend_View_Abstract at this time.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2006-11-10T11:27:22.000+0000</p> 
        <div class="body">
            <p>Won't fix, as detailed in comment to issue.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Ratzloff (mratzloff) on 2006-11-10T15:01:45.000+0000</p> 
        <div class="body">
            <p>Thanks, Matthew!  I'm changing my PHPTAL implementation over to use Zend_View_Interface right now.</p>

        </div>
    </div>
    </div>

