<h2>ZF-11887: Zend_Validate_Between is not properly checking inclusivity</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2011-11-11T19:56:42.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2011-11-12T22:46:56.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Salim Kapadia (skapadia)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Thomas Weidner (thomas)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Validate</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>In the isValid function of Zend_Validate_Between has the if statements reversed.</p>

<p>This is how it is now:
    public function isValid($value)
    {
        $this-&gt;_setValue($value);</p>

<pre><code>    if ($this-&gt;_inclusive) {
        if ($this-&gt;_min &gt; $value || $value &gt; $this-&gt;_max) {
            $this-&gt;_error(self::NOT_BETWEEN);
            return false;
        }
    } else {
        if ($this-&gt;_min &gt;= $value || $value &gt;= $this-&gt;_max) {
            $this-&gt;_error(self::NOT_BETWEEN_STRICT);
            return false;
        }
    }
    return true;
}
</code></pre>

<p>and this is how it should be:
    public function isValid($value)
    {
        $this-&gt;_setValue($value);</p>

<pre><code>    if ($this-&gt;_inclusive) {
        if ($this-&gt;_min &gt;= $value || $value &gt;= $this-&gt;_max) {
            $this-&gt;_error(self::NOT_BETWEEN);
            return false;
        }
    } else {
        if ($this-&gt;_min &gt; $value || $value &gt; $this-&gt;_max) {
            $this-&gt;_error(self::NOT_BETWEEN_STRICT);
            return false;
        }
    }
    return true;
}
</code></pre>

<p>$this-&gt;_inclusive by default is true. So if true, that means by definition of the word, that it should also check the boundaries (&gt;=). Exclusive means don't check the boundaries just the values in between.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2011-11-11T20:31:13.000+0000</p> 
        <div class="body">
            <p>Why should an error be thrown when the border is 2 and the value is also at 2 when "inclusive border value" has been set?
I don't get the clue why to add false behaviour?</p>

<p>Did you really look at the results?
Example:</p>

<pre class="highlight"><code>
MIN = 2
MAX = 4
VALUE = 2
INC = TRUE

Original:
2(min) &gt; 2(val) =&gt; false, 2(val) &gt;= 4(max) =&gt; false, result true as expected

Your change:
2(min) &gt;= 2(val) =&gt; true, result false... bogus as value equals minimum and you return false even if set that border value is inclusive


MIN = 2
MAX = 4
VALUE = 2
INC = FALSE

Original:
2(min) &gt;= 2(val) =&gt; true, result false as expected

Your change:
2(min) &gt; 2(val) =&gt; false, 2(val) &gt; 4(max) =&gt; false, result true... bogus as 2 touches the border and inc is false
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2011-11-12T22:46:56.000+0000</p> 
        <div class="body">
            <p>Closing as non-issue
See response for details</p>

        </div>
    </div>
    </div>

