<h2>ZF-2974: Add Zend_Validate_DateTime</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>New Feature</dd>

    <dt>Created:</dt>
    <dd>2008-03-26T09:04:18.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2008-03-27T15:29:35.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Thomas Weidner (thomas)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Validate</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>This would be nice for validating DateTime fields. It's beyond my abilities but I've created a simple version, but it only addresses one format. I just altered Zend_Validate_Date</p>

<p><code>
&lt;?php</code></p>

<p>/**
 * @see Zend_Validate_Abstract
 */
require_once 'Zend/Validate/Abstract.php';</p>

<p>class My_Validate_DateTime extends Zend_Validate_Abstract
{
    /**
     * Validation failure message key for when the value does not follow the YYYY-MM-DD HH:MM:SS format
     */
    const NOT_YYYY_MM_DD_HH_MM_SS = 'dateTimeNotYYYY-MM-DD HH:MM:SS';</p>

<pre><code>/**
 * Validation failure message key for when the value does not appear to be a valid date
 */
const INVALID        = 'dateTimeInvalid';

/**
 * Validation failure message key for when the value does not fit the given dateformat or locale
 */
const FALSEFORMAT    = 'dateTimeFalseFormat';

/**
 * Validation failure message template definitions
 *
 * @var array
 */
protected $_messageTemplates = array(
    self::NOT_YYYY_MM_DD_HH_MM_SS =&gt; "'%value%' is not of the format YYYY-MM-DD HH:MM:SS",
    self::INVALID                 =&gt; "'%value%' does not appear to be a valid DateTime",
    self::FALSEFORMAT             =&gt; "'%value%' does not fit given DateTime format"
);

/**
 * Optional format
 *
 * @var string|null
 */
protected $_format;

/**
 * Optional locale
 *
 * @var string|Zend_Locale|null
 */
protected $_locale;

/**
 * Sets validator options
 *
 * @param  string             $format OPTIONAL
 * @param  string|Zend_Locale $locale OPTIONAL
 * @return void
 */
public function __construct($format = null, $locale = null)
{
    $this-&gt;setFormat($format);
    $this-&gt;setLocale($locale);
}

/**
 * Returns the locale option
 *
 * @return string|Zend_Locale|null
 */
public function getLocale()
{
    return $this-&gt;_locale;
}

/**
 * Sets the locale option
 *
 * @param  string|Zend_Locale $locale
 * @return Zend_Validate_Date provides a fluent interface
 */
public function setLocale($locale = null)
{
    if ($locale !== null) {
        require_once 'Zend/Locale.php';
        if (!Zend_Locale::isLocale($locale)) {
            require_once 'Zend/Validate/Exception.php';
            throw new Zend_Validate_Exception("The locale '$locale' is no known locale");
        }
    }
    $this-&gt;_locale = $locale;
    return $this;
}

/**
 * Returns the locale option
 *
 * @return string|null
 */
public function getFormat()
{
    return $this-&gt;_format;
}

/**
 * Sets the format option
 *
 * @param  string $format
 * @return Zend_Validate_Date provides a fluent interface
 */
public function setFormat($format = null)
{
    $this-&gt;_format = $format;
    return $this;
}

/**
 * Defined by Zend_Validate_Interface
 *
 * Returns true if $value is a valid date of the format YYYY-MM-DD
 * If optional $format or $locale is set the date format is checked
 * according to Zend_Date, see Zend_Date::isDate()
 *
 * @param  string $value
 * @return boolean
 */
public function isValid($value)
{
    $valueString = (string) $value;

    $this-&gt;_setValue($valueString);

    if (($this-&gt;_format !== null) or ($this-&gt;_locale !== null)) {
        require_once 'Zend/Date.php';
        if (!Zend_Date::isDate($value, $this-&gt;_format, $this-&gt;_locale)) {
            $this-&gt;_error(self::FALSEFORMAT);
            return false;
        }
    } else {
        if (!preg_match('/^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$/', $valueString)) {
            $this-&gt;_error(self::NOT_YYYY_MM_DD_HH_MM_SS);
            return false;
        }

        list($year, $month, $day) = sscanf($valueString, '%d-%d-%d');

        if (!checkdate($month, $day, $year)) {
            $this-&gt;_error(self::INVALID);
            return false;
        }
    }

    return true;
}
</code></pre>

<p>}
<code></code></p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Kamil Nowakowski (kamiln) on 2008-03-27T04:02:35.000+0000</p> 
        <div class="body">
            <p>You can do this with current Date Validate class  . You can  add format in constructor or use  a setFormat fuction</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2008-03-27T15:29:04.000+0000</p> 
        <div class="body">
            <p>As mentioned this is already possible with Zend_Validate_Date.
Just set the format manually or the date constant from Zend_Date.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2008-03-27T15:29:35.000+0000</p> 
        <div class="body">
            <p>Already possible.</p>

        </div>
    </div>
    </div>

