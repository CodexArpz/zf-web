<h2>ZF-53: quote() quotes numeric values inappropriately.</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2006-06-20T01:06:10.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2007-07-05T14:43:08.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>0.8.0 (21/Feb/07)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Bill Karwin (bkarwin)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Db</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>I notice the quote() method quotes even numeric values which is not necessary.</p>

<p>Its strange this problem is manifest only with scalars. With an array as an argument, it works as expected: quote( '123' ); RESULT: '123'</p>

<p>quote( array( '1', 2, 3, 'a', 'b' )); RESULT: 1, 2, 3, 'a', 'b'</p>

<p>the problem is only with the quote(numeric-scalar). Doing an is_numeric() validation in the quote() method should do the trick.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Zend Framework (zend_framework) on 2006-06-20T01:06:29.000+0000</p> 
        <div class="body">
            <p>05/22/06 11:52:28: Modified by jayson</p>

<pre><code>* component changed from Documentation to Zend_Db.
</code></pre>

<p>05/22/06 15:50:20: Modified by rob.nospam@akrabat.com</p>

<p>For the PDO drivers, if this is a bug, then it is in PDO rather than in the framework code.</p>

<p>Zend_Db_Adapter_Pdo_Abstract::quote() calls the PDO drivers quote() function to do the work.</p>

<p><a href="http://uk.php.net/manual/en/function.pdo-quote.php">http://uk.php.net/manual/en/function.pdo-quote.php</a> clearly shows that it takes a string, not a mixed, so I suspect that it is by design.</p>

<p>Having said that, the manual page also says: "PDO::quote() places quotes around the input string (if required) and escapes special characters within the input string, using a quoting style appropriate to the underlying driver." The "if required" bit makes me wonder if the PDO drivers are supposed to be cleverer than they are.</p>

<p>Incidentally, I'm seeing quoted numbers in all cases for PDO drivers:</p>

<pre class="highlight"><code>
        // test numeric
        $value = $this-&gt;_db-&gt;quote('1');
        $this-&gt;assertEquals("'1'", $value);

        $value = $this-&gt;_db-&gt;quote(1);
        $this-&gt;assertEquals("'1'", $value);

        $value = $this-&gt;_db-&gt;quote(array(1,'2',3));
        $this-&gt;assertEquals("'1', '2', '3'", $value);
</code></pre>

<p>all pass.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Gavin (gavin) on 2006-07-24T18:09:45.000+0000</p> 
        <div class="body">
            <p>Yields reasonable output, as expected according to PHP's PDO documentation:</p>

<pre class="highlight"><code>
&lt;?
$include_path = ini_get('include_path')   . PATH_SEPARATOR . "./zf/library";
ini_set('include_path',  $include_path); 

require 'zf/library/Zend/Db.php';

$adapt = Zend_Db::factory('PDO_Sqlite',array('dsnprefix'=&gt;'sqlite','dbname'=&gt;'foo.sq3'));
var_dump($adapt);
$adapt-&gt;beginTransaction();
var_dump($adapt);

$vals = array( '1', 2, 3, 'a', 'b' );
foreach ( $vals as &amp;$val)

    $val = $adapt-&gt;quote($val);

var_dump(implode(', ', $vals));
?&gt;
</code></pre>

<p>At some point, integers, strings, dates, and such must be converted from PHP's data types to the database's types.  Usually, programmers try to minimize the number of conversions for various reasons.  PDO's choice of normalizing to strings enables developers to see <em>exactly</em> what will be sent to the database, making it easy to test and debug.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Gavin (gavin) on 2006-07-24T18:43:09.000+0000</p> 
        <div class="body">
            <p>"PDO is deliberately somewhat type agnostic in that it prefers to represent data as strings instead of converting to integer or double types. You might wonder at this, but the reasoning is quite simple: the string type is the type that is most precise and has the largest range available in PHP; prematurely converting data into integers or doubles can lead to either truncation or rounding errors. By pulling the data out as strings, PDO gives your script control over how and when the conversion happens using the usual PHP type juggling facilities (such as casting and implicitly during mathematical operations)."</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-02-18T15:37:12.000+0000</p> 
        <div class="body">
            <p>This actually is an issue, for example for DB2 and MySQL.</p>

<p>An expression like "columnName = '12'" fails on DB2 because it has no implicit way of converting a string to an integer.</p>

<p>This is also an issue on MySQL, because a comparison of an integer column to a string spoils the optimizer.  It can't use an index on the column because it thinks it's comparing against an expression, not a constant of the matching type.  So it results in very bad performance.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-02-18T15:38:18.000+0000</p> 
        <div class="body">
            <p>Fixed in revision 3520.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-02-18T15:43:43.000+0000</p> 
        <div class="body">
            <p>Note that I used is_int(), not is_numeric().  is_int() returns true only for actual PHP integer scalars, but is_numeric() returns true for strings that contain characters valid for a numeric value.  I want strings to continue to be quoted even if they appear numeric, so that strings like '000123' where the leading zeroes are significant can be inserted (this is not an unusual case).</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-02-18T15:52:47.000+0000</p> 
        <div class="body">
            <p>Unit tests updated in revision 3521.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bruno CHALOPIN (bruno) on 2007-07-03T15:27:42.000+0000</p> 
        <div class="body">
            <p>Since version 1.0.0 production release, it raise un issue on MS SQL server.
When inserting data in a string field, if the data is numeric, it raise un SQL error.
There should have an optional boolean parameter in the quote function wich enable or not the is_numeric test.</p>

        </div>
    </div>
    </div>

