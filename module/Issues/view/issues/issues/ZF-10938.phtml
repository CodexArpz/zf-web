<h2>ZF-10938: Convert file size from string to integer</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2011-01-11T19:19:12.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2011-01-17T12:24:38.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Thomas Weidner (thomas)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_File_Transfer</li>
            <li>Zend_Validate</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Converting string representation of file size or memory into bytes and backwards (e.g. 3M &lt;=&gt; 3145728) often usefull when using ini config files.</p>

<p>This code already used in ZF in such classes:
- Zend_Form_Element_File::_convertIniToInteger
- Zend_Validate_File_fromByteString</p>

<p>but has different realisation and can't be used anywhere else.</p>

<p>Maybe it will be useful to create some static method to use in all ZF?</p>

<p>For example Zend_Config_Ini::byteToInteger and Zend_Config_Ini::integerToByte</p>

<p>I have my own method, which is more compact</p>

<pre class="highlight"><code>
public static function str2byte($str)
{
    if(is_numeric($str))
        return (int) $str;

    if(!preg_match('/^([0-9]+) ?([KMGTPEZY])?B?$/i', trim($str), $match))
        return 0;

    if(!empty($match[2]))
        return $match[1] * pow(1024, 1 + (int) stripos('KMGTPEZY', $match[2]));

    return (int) $match[1];

}
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2011-01-16T02:32:43.000+0000</p> 
        <div class="body">
            <p>There is already a class which handles this and takes care of other issues caused by convertion:
Zend_Measure_Binary</p>

<p>Problem:
Components are said to work independend from other components. Therefor a solution like yours is actually not accepted into the framework.</p>

<p>Information:
The reason why those 2 methods are different is that they NEED to be different.
PHP accepts only K,M and G as value. P or E are denied by PHP but needed for files where this value comes from the filesystem (64bit) and not from HTTP or an PHP configuration file.</p>

<p>Therefor closing this issue as won't fix.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by mayhem (mayhem) on 2011-01-16T05:22:48.000+0000</p> 
        <div class="body">
            <p>Zend_Measure_Binary may be used only to convert from numbers to strings, not otherwice, and I want to convert from values like 3G (as in php.ini) to numbers, which may be used in calculations</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by mayhem (mayhem) on 2011-01-16T05:30:23.000+0000</p> 
        <div class="body">
            <p>I found just this to methods to do this conversion. Is any way to do this by using standart ZF components?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2011-01-17T12:24:35.000+0000</p> 
        <div class="body">
            <p>This is not correct.
All Zend_Measure classes can convert in ANY direction.</p>

<p>And all of the above mentioned classes ARE standard ZF components.</p>

        </div>
    </div>
    </div>

