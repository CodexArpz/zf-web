<h2>ZF-7839: Support or document Zend_Application_Bootstrap usage in Zend_Test_PHPUnit_ControllerTestCase</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2009-09-13T12:53:24.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-10-16T13:24:50.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.9.5 (27/Oct/09)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Matthew Weier O'Phinney (matthew)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Test_PHPUnit</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>I would like to see the "standard" Zend Framework bootstrapping method to be supported in Zend_Test_PHPUnit_ControllerTestCase. It is confusing and not obvious on how to reuse your Zend_Application_Bootstrap when using the ControllerTestCase.</p>

<p>There are 2 ways that this can be done.</p>

<p>------ First Method ------</p>

<p>Document with code examples on how to use Zend_Application_Bootstrap_* in the Zend_Test_PHPUnit_ControllerTestCase manual. However one issue is that it feels a bit weird as you have to overwrite $this-&gt;_frontController manually yourself.</p>

<p>--- One Current Example ---</p>

<pre class="highlight"><code>
public function setUp()
{
    $this-&gt;bootstrap = array($this, 'appBootstrap');
    parent::setUp();
}

public function appBootstrap()
{
    $this-&gt;frontController
         -&gt;registerPlugin(new Bugapp_Plugin_Initialize('development'));
}
</code></pre>

<p>--- Using Zend_Application_Bootstrap Example ---</p>

<pre class="highlight"><code>
public function setUp()
{
    $this-&gt;bootstrap = array($this, 'appBootstrap');
    parent::setUp();
}

public function appBootstrap()
{   
    // Create application, bootstrap, but don't RUN!
    $application = new Zend_Application(
        APPLICATION_ENV,
        APPLICATION_PATH . '/configs/application.ini'
    );
    $bootstrap = $application-&gt;getBootstrap();
    $bootstrap-&gt;bootstrap(); //note run() is not called!
    //front controller now bootstrapped using whatever method you used (config, resource plugin...etc)
    //Having $this-&gt;frontController and $this-&gt;_frontController may be hard to explain
    $this-&gt;_frontController = $bootstrap-&gt;getResource('frontController');
}
</code></pre>

<p>As you can see this is quite simple, but as I noted in the comment it may be confusing to explain that you have to overwrite $this-&gt;_frontController not $this-&gt;frontController.</p>

<p>------ Second Method ------</p>

<p>Actually supporting Zend_Application_Bootstrap in ControllerTestCase.</p>

<pre class="highlight"><code>
public function setUp()
{
    $this-&gt;bootstrap = new Zend_Application(
        APPLICATION_ENV,
        APPLICATION_PATH . '/configs/application.ini'
    );
    parent::setUp();
}
</code></pre>

<p>if $this-&gt;bootstrap is set to an instance of Zend_Application then have the ControllerTestCase automatically call $bootstrap-&gt;bootstrap() for you. Future calls to $this-&gt;getFrontController() will retrieve the frontController from the bootstrap instead.</p>

<p>This is a simplified example obviously and I may have missed some details, but it seems obvious for some kind of support of the "standard" bootstrapping method. Bootstrapping can be very lengthy/complex and since the main goal is re-usability why would we want to have a completely different bootstrap method (or duplicated) for controller testing. I think this improvement will "sync" Zend_Test_PHPUnit_ControllerTestCase with the encouraged bootstrap method. This also puts to great use the separate production , development, testing ini settings document in the Zend_Application quick start. It becomes even more important with all the plugins with preDispatch details...etc. I think you get the point :).</p>

<p>Thoughts, suggestions, hate messages are welcomed :)</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Duo Zheng (duoduo) on 2009-09-13T13:00:23.000+0000</p> 
        <div class="body">
            <p>Fixed code format</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Duo Zheng (duoduo) on 2009-09-13T13:03:43.000+0000</p> 
        <div class="body">
            <p>Made adjustment to title</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Duo Zheng (duoduo) on 2009-09-13T13:18:51.000+0000</p> 
        <div class="body">
            <p>Clarifying some confusing writing.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Duo Zheng (duoduo) on 2009-09-13T13:41:40.000+0000</p> 
        <div class="body">
            <p>Added additional support for importance of re-usability.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2009-10-16T11:48:52.000+0000</p> 
        <div class="body">
            <p>I think the second example makes the most sense. It's simple and concise for the end-user, and relatively easy to support. I'll take a stab at it today.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2009-10-16T13:24:50.000+0000</p> 
        <div class="body">
            <p>The second use case is now possible:</p>

<pre class="highlight"><code>
class FooControllerTest extends Zend_Test_PHPUnit_ControllerTestCase
{
    public function setUp()
    {
        $this-&gt;bootstrap = new Zend_Application(
            'testing',
            APPLICATION_PATH . '/configs/application.ini'
        );
        parent::setUp();
    }
}
</code></pre>

<p>This will be available in 1.9.5, and is currently in trunk and the 1.9 release branch.</p>

        </div>
    </div>
    </div>

