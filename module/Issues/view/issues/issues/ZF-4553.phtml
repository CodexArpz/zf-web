<h2>ZF-4553: DB2 Adapter with DB2/400 support -- Several issues when using to connect to i5/DB2 from Linux</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2008-10-10T19:46:40.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2011-01-20T08:06:09.000+0000</dd>

    <dt>Status:</dt>
    <dd>Open</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Ralph Schindler (ralph)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Db_Table</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-6039">ZF-6039</a></li>
            <li><a href="/issues/browse/ZF-5535">ZF-5535</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Just started testing the DB2 adapter with support for DB2/400 from the Zend Core release of ZFW on my Linux machine and I'm running into issues with SQL statements being constructed incorrectly.  Haven't had a chance to see if these same problems exist when running from ZC on i5, but I'm assuming they will.</p>

<p>An example:</p>

<pre class="highlight"><code>
class Personnel extends Zend_Db_Table_Abstract
{
    protected $_name = 'SCHEMA.TABLE';
}

    $personnel = new Personnel();
    $personnel-&gt;fetchAll();
</code></pre>

<p>This makes it through the tableDescribe just fine, but errors on the actual fetchAll with the error:</p>

<pre class="highlight"><code>Zend_Db_Statement_Db2_Exception: [IBM][CLI Driver][AS] SQL5001N "*N" does not have the 
authority to change the database manager configuration file. SQLSTATE=42703</code></pre>

<p>The sql DB2/400 is choking on is:</p>

<pre class="highlight"><code>

The following version of this select WILL work:
</code></pre>

<p>SELECT "SCHEMA"."TABLE".* FROM "SCHEMA"."TABLE"
SELECT "TABLE".* FROM "SCHEMA"."TABLE" as TABLE```</p>

<p>If needed, I may be able to make both i5 ZC and Linux -&gt; DB/400 environments available to aid in the tracking of this and any other DB/400 issues.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by old of Satoru Yoshida (yoshida@zend.co.jp) on 2009-05-10T20:48:23.000+0000</p> 
        <div class="body">
            <p>I think this issue has big impact on  setTable() method of Zend_Db_Table_Select class.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ralph Schindler (ralph) on 2009-06-24T06:36:38.000+0000</p> 
        <div class="body">
            <p>There are a couple of unknowns here:
a) is there something specific to the linux client that is not being discussed here?
b) it seems to me that this code runs fine when run locally on i5
c) what does the connection settings look like?</p>

<p>-ralph</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Alex Frenkel (sirshurf) on 2009-07-28T06:20:23.000+0000</p> 
        <div class="body">
            <p>couple of addon's.</p>

<p>The same error I had using LOCAL on i5.</p>

<p>The only solution was to user an alias for a SCHEMA/TABLE (last example).</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Christian Dub√© (christiand) on 2010-02-02T03:50:42.000+0000</p> 
        <div class="body">
            <p>as of ZF 1.10, using on local i5, this issue still exist.</p>

<p>[code]
&lt;?php
class Model_DbTable_Test extends Zend_Db_Table_Abstract
{</p>

<pre><code>function getValues()
{
    $string = "SELECT MYFILE.* from MYLIB.MYFILE";  
    $result = $this-&gt;_db-&gt;fetchAll($string);
    return $result;
}
</code></pre>

<p>}
[/code]</p>

<p>Will produce the following:
Message: Column qualifier or table MYFILE undefined. SQLCODE=-5001</p>

<p>but 
[code]
&lt;?php
class Model_DbTable_Test extends Zend_Db_Table_Abstract
{</p>

<pre><code>function getValues()
{
    $string = "SELECT MYFILE.* from MYLIB.MYFILE as MYFILE";    
    $result = $this-&gt;_db-&gt;fetchAll($string);
    return $result;
}
</code></pre>

<p>}
[/code]</p>

<p>Will work!</p>

<p>This also make Zend_Auth_Db_Adapter fail</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Richard Noya (richardnoya) on 2010-02-02T04:44:47.000+0000</p> 
        <div class="body">
            <p>I Agree, I have a selfmade fix for months now. But it should be fixed in Zend Framework.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by James Pankratz (jbgisser) on 2011-01-19T07:50:06.000+0000</p> 
        <div class="body">
            <p>@Richard - can you share your fix with us?</p>

<p>I noticed one fix that was shared in the duplicate bug 5535 <a href="http://zendframework.com/issues/browse/ZF-5535">http://zendframework.com/issues/browse/ZF-5535</a></p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by James Pankratz (jbgisser) on 2011-01-19T09:50:19.000+0000</p> 
        <div class="body">
            <p>Hello All.</p>

<p>We solved this problem by coding table and schema names in UPPERCASE.</p>

<p>This sample code did not work -&gt; got same problem as reported above:</p>

<p>&lt;?php
class Application_Model_DbTable_Application extends Zend_Db_Table_Abstract
{
    protected $_name = 'table_name';
    protected $_schema = 'schema';
}</p>

<p>But this did work:</p>

<p>&lt;?php
class Application_Model_DbTable_Application extends Zend_Db_Table_Abstract
{
    protected $_name = 'TABLE_NAME';
    protected $_schema = 'SCHEMA';
}</p>

<p>I may not know what I'm talking about as I have only been working with PHP for a month, and just finished ZF training - but hoping this helps.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Richard Noya (richardnoya) on 2011-01-20T08:06:06.000+0000</p> 
        <div class="body">
            <p>My fix which I implement in every version for several months now is the following:</p>

<p>in Zend\Db\Adapter\Abstract.php (see commented lines "Fix for i5")</p>

<pre><code>protected function _quoteIdentifierAs($ident, $alias = null, $auto = false, $as = ' AS ')
{
    if ($ident instanceof Zend_Db_Expr) {
        $quoted = $ident-&gt;__toString();
    } elseif ($ident instanceof Zend_Db_Select) {
        $quoted = '(' . $ident-&gt;assemble() . ')';
    } else {
        if (is_string($ident)) {
            $ident = explode('.', $ident);
        }
        if (is_array($ident)) {
            $segments = array();
            foreach ($ident as $segment) {
                if ($segment instanceof Zend_Db_Expr) {
                    $segments[] = $segment-&gt;__toString();
                } else {
                    $segments[] = $this-&gt;_quoteIdentifier($segment, $auto);
                }
            }
</code></pre>

<p>/*Fix for i5
                if ($alias !== null &amp;&amp; end($ident) == $alias) {
                    $alias = null;
                }
*/
                $quoted = implode('.', $segments);
            } else {
                $quoted = $this-&gt;_quoteIdentifier($ident, $auto);
            }
        }
        if ($alias !== null) {
            $quoted .= $as . $this-&gt;_quoteIdentifier($alias, $auto);
        }
        return $quoted;
    }</p>

<p>So by never setting the alias to null, it works like a charm for my DB2 database AND MySql.</p>

<p>regards Richard.</p>

        </div>
    </div>
    </div>

