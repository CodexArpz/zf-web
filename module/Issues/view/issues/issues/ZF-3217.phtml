<h2>ZF-3217: Add overloading to decorators to Zend_Form</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2008-05-07T04:45:50.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2008-09-09T12:18:44.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.6.1 (15/Sep/08)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Matthew Weier O'Phinney (matthew)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Form</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>A number of users have reported that they'd like syntax like the following in Zend_Form:</p>

<pre class="highlight"><code>
</code></pre><code>&lt;?= $this-&gt;form-&gt;foo-&gt;renderLabel() ?&gt;
        
            &lt;?= $this-&gt;form-&gt;foo-&gt;renderElement() ?&gt;
            &lt;?= $this-&gt;form-&gt;foo-&gt;renderDescription() ?&gt;
            &lt;?= $this-&gt;form-&gt;foo-&gt;renderErrors() ?&gt;
        
    </code>

<p>The idea is that they would like to selectively render specific metadata from the element or form.</p>

<p>This could be done fairly easily by using overloading. __call() could intercept methods beginning in 'render', and if the remainder of the method matches a decorator, would render that decorator.</p>

<p>As a sample implementation:</p>

<pre class="highlight"><code>
public function __call($method, $args)
{
    if ('render' == substr($method, 0, 6)) {
        $decoratorName = ucfirst(substr($method, 6));
        if (false !== ($decorator = $this-&gt;getDecorator($decoratorName))) {
            $seed = '';
            if (0 &lt; count($args)) {
                $seed = array_shift($args);
            }
            return $decorator-&gt;render($seed);
        }
        require_once 'Zend/Form/Exception.php';
        throw new Zend_Form_Exception(sprintf('Decorator by name %s does not exist', $decoratorName));
    }
    require_once 'Zend/Form/Exception.php';
    throw new Zend_Form_Exception(sprintf('Method %s does not exist', $method));
}
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Cristian Bichis (avantis) on 2008-05-07T05:36:08.000+0000</p> 
        <div class="body">
            <p>I think rendering to table (and generally speaking using tables on XHTML) is obsolete in 2008...</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Eric Coleman (eric) on 2008-05-07T05:58:50.000+0000</p> 
        <div class="body">
            <p>Cristian... the ticket isn't about "tables" it's about the extensions to form rendering.  I'd love to see this myself.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Torsten BÃ¼hl (tbuehl) on 2008-05-21T05:21:37.000+0000</p> 
        <div class="body">
            <p>Hello Matthew,</p>

<p>I am working at a project right now and want to change to Zend_Form from my own Form Implementation. How can I implement this feature quick in the class? I tried to copy &amp; paste your code but it's not working. There is no Element Decorator.</p>

<p>Best, Torsten</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Goran Juric (gog) on 2008-09-08T12:29:20.000+0000</p> 
        <div class="body">
            <p>Haven't tried it, but I think you should be able to do something like this:</p>

<p>Create a view helper:</p>

<p>[code]</p>

<p>&lt;</p>

<p>table&gt;
    </p>&lt;?= $this-&gt;element-&gt;getLabel() ?&gt;
        
            &lt;?= $this-&gt;element-&gt;render() ?&gt;
            &lt;?= $this-&gt;element-&gt;getDescription() ?&gt;
            &lt;?= $this-&gt;element-&gt;getErrors() ?&gt;
        
    
[/code]

<p>and add it to the element (or extend Zend_Form and set this to all elements) via a ViewScript decorator.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2008-09-08T12:56:51.000+0000</p> 
        <div class="body">
            <p>Goran -- not quite what the reporter is looking for. The idea is to be able to render an individual decorator at a time, not just the metadata.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2008-09-09T12:18:44.000+0000</p> 
        <div class="body">
            <p>Patch applied to trunk and 1.6 release branch; will release with 1.6.1</p>

        </div>
    </div>
    </div>

