<h2>ZF-4385: Create Zend_Controller_Action_Interface and make Standard Dispatcher check for it.</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Patch</dd>

    <dt>Created:</dt>
    <dd>2008-09-26T03:38:44.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-07-13T14:36:51.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Jurrien Stutterheim (norm2782)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Controller</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
        <li><a href="/issues/secure/attachment/11554/Controller_Action_Interface.patch">Controller_Action_Interface.patch</a></li>
        </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Currently the whole controller dispatcher and controller action components are very thighly coupled, since the Standard Dispatcher checks for an Zend_Controller_Action instance before dispatching. I propose to include a Zend_Controller_Action_Interface with just the constructor and the dispatch method required for any implementation. Make Zend_Controller_Action implement the new interface and the Standard Dispatcher to accept the interface as allowed action controller.</p>

<p>Advantages:
* Standard Dispatcher (Dispatcher in general) and Action Controller are now lously coupled.
* People can implement their own action controller following their needs.
* No BC issues, only added a new interface, old functionality stays 100%. All Unit-Tests still succeed.
* Even when MVC will be refactored in the future, this is still just a simple change that may lead only to problems for those who changed from the default Zend_Controller_Action implementation to a user-implemented one and those have probably to refactor anyways.</p>

<p>My use case would be to implement a new controller that handles everything as a SOAP request, you could of course insert any other webservice, so that a controller MyApp_Controller_Action_Soap will completly handle soap requests and still have all the advantages of a front controller approach. Currently you have to write non-DRY code for this or overwrite the Zend_Controller_Action class and have the problemt that many methods in the abstract class are public and even final, and can't be restricted access to.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Benjamin Eberlei (beberlei) on 2008-09-26T03:39:47.000+0000</p> 
        <div class="body">
            <p>Patch implementing a new Zend_Controller_Action_Interface, having the action controller implement it and changing the Standard Dispatcher to accept the interface as correct action controller implementation.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Benjamin Eberlei (beberlei) on 2008-09-26T04:31:30.000+0000</p> 
        <div class="body">
            <p>ah its probably important to say, the patch has to be applied to library/Zend/Controller directory. :-/ my mistake</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Dolf Schimmel (Freeaqingme) (freak) on 2008-09-30T08:19:40.000+0000</p> 
        <div class="body">
            <p>I just voted for this issue. I was actually quite amazed that a basic thing like this has been so thightly coupled for such a long time. 
I didn't expect to find that in framework that tries to have / has a use-at-will architecture ;)</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Jurrien Stutterheim (norm2782) on 2009-02-21T15:49:19.000+0000</p> 
        <div class="body">
            <p>Resolved in revision 14138</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2009-02-21T20:27:54.000+0000</p> 
        <div class="body">
            <p>Jurrien -- we actually need to back this out as it introduces a BC break.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2009-02-21T20:28:20.000+0000</p> 
        <div class="body">
            <p>... and should have noted that it's a good candidate for 2.0...</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Jurrien Stutterheim (norm2782) on 2009-02-21T20:31:53.000+0000</p> 
        <div class="body">
            <p>Curious... how does this break BC? Unit tests still pass...</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2009-02-22T07:24:55.000+0000</p> 
        <div class="body">
            <p>Because it changes the types it looks for. I'll take a closer look, however. Let's discuss on Monday.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Jurrien Stutterheim (norm2782) on 2009-02-22T12:12:22.000+0000</p> 
        <div class="body">
            <p>I'm currently behind a firewall that doesn't allow me to do anything, including committing changes to SVN. Will be able to do that later today. However, if the type check is the main concern, this simple check in Zend_Controller_Dispatcher_Standard would resolve that:</p>

<p>Line 262:</p>

<pre class="highlight"><code>
if (!($controller instanceof Zend_Controller_Action_Interface) ||
    !($controller instanceof Zend_Controller_Action)) {
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Jurrien Stutterheim (norm2782) on 2009-02-23T22:45:28.000+0000</p> 
        <div class="body">
            <p>I've applied the patch I proposed in my previous comment in revision 14152. This resolves any BC issues that might have occurred with the first patch.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Todd Pinkerton (toddp) on 2009-07-13T14:23:55.000+0000</p> 
        <div class="body">
            <p>I ran into a problem with this interface as implemented in 1.8.4, in that my test harness defines classes for each controller under test, as described in this article:</p>

<p><a href="http://blog.fedecarg.com/2008/12/27/phpunit-testing-zend-framework-controllers/">http://blog.fedecarg.com/2008/12/â€¦</a></p>

<p>to the point, I am extending a controller and changing the constructor (and its signature) in the derived class.  This is not possible with the new Zend_Controller_Action_Interface.</p>

<p>I know supporting this method is not the concern of ZF, but the new interface does break this approach. The larger problem is that it breaks general OOP design principles, in that derived classes should be free to instantiate themselves however they see fit.  WIth the new interface, ANY class implementing Zend_Controller_Action_Interface -- INCLUDING any class that extends Zend_Controller_Action -- must have that constructor signature.  This just seems wrong. In fact, I found much supporting arguments for all sorts of OO languages when doing a quick google search on this subject:   <a href="http://www.google.com/search?q=interface+constructor">http://google.com/search/?q=interface+constructor</a></p>

<p>This is my first ZF comment, so I apologize for not having a lot of the history here. But I hope this causes some second thoughts about placing constructors in the interface, thereby enforcing needless constraints on any derived classes.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Jurrien Stutterheim (norm2782) on 2009-07-13T14:29:40.000+0000</p> 
        <div class="body">
            <p>Could you open a separate issue for that please? :)</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Todd Pinkerton (toddp) on 2009-07-13T14:36:51.000+0000</p> 
        <div class="body">
            <p>new ticket created:  <a href="http://framework.zend.com/issues/browse/ZF-7252">http://framework.zend.com/issues/browse/ZF-7252</a></p>

        </div>
    </div>
    </div>

