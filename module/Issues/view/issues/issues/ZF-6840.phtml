<h2>ZF-6840: Loading Zend_Application Environment Name out of a Configuration INI</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2009-05-28T05:41:55.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-08-21T14:02:35.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Matthew Weier O'Phinney (matthew)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Application</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>It would be really handy if there would be no need to somehow hard code the environment into any PHP File, and load it instead out of a configuration.ini passed to Zend_Application. This way there would be no hardcoded environment configuration somewhere in the SCM-Repository, if your configuration.ini is not in the repo.</p>

<p>Short example:
== configuration.ini ==
[Application]
enviroment=production
[site]
db.adapter = PDO_MYSQL
db.params.dbname = "test"
db.params.username = "test"
db.params.password = "test"
db.params.hostname = "test"
debug = 1
[production : site]
db.params.dbname = "production"
debug = 0</p>

<p>== index.php ==
$application = new Zend_Application('path/to/configuration.ini');
$application-&gt;bootstrap();
$application-&gt;run();</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2009-08-21T14:02:35.000+0000</p> 
        <div class="body">
            <p>A key part of the design of Zend_Application was that it be environment aware. This is to enforce a best practice of segregating configuration data based on the environment.</p>

<p>While I see your point about wanting the ability to simply pass in an array of data, or a configuration file with no "environment" definitions, this goes against the design of the component. You can achieve similar effects, however, by using your own "environment" strings (pointing to a discrete section of the configuration or passing in an array of options (in which case the environment will be ignored).</p>

        </div>
    </div>
    </div>

