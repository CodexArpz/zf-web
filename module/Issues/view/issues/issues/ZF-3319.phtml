<h2>ZF-3319: Zend_Controller_Action: Method to get current MVC's path.</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2008-05-24T04:37:21.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2010-02-10T04:12:18.000+0000</dd>

    <dt>Status:</dt>
    <dd>Closed</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Aleksey V. Zapparov (ixti)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Matthew Weier O'Phinney (matthew)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Controller</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>I propose to include in Zend_Controller_Action one new method getMvcPath() and rewrite initView() to make it use new method:</p>

<pre class="highlight"><code>
abstract class Zend_Controller_Action   
{  
    /** 
     * Directory where MVCs are stored. 
     * 
     * @var string 
     */  
    protected $_mvcPath; 

    // ...skipped...

    /** 
     * Retrieve MVCs path, where models, views and controllers are stored. 
     * If optional $appendPath is specified then it is appended to MVC's path.
     * 
     * @param string $appendPath (optional) 
     * @return string 
     * @throws Zend_Controller_Action_Exception if appendix was given and is not a string 
     */  
    protected function _getMvcPath($appendPath = null)  
    {  
        if (!isset($this-&gt;_mvcPath)) {  
            $front   = $this-&gt;getFrontController();  
            $request = $this-&gt;getRequest();  
            $module  = $request-&gt;getModuleName();  
            $dirs    = $front-&gt;getControllerDirectory();  
              
            if (empty($module) || !isset($dirs[$module])) {  
                $module = $front-&gt;getDispatcher()-&gt;getDefaultModule();  
            }  
              
            $this-&gt;_mvcPath = dirname($dirs[$module]);  
        }  
          
        if (null !== $appendPath) {  
            if (!is_string($appendPath)) {  
                throw new Zend_Controller_Action_Exception();  
            }  
            return $this-&gt;_mvcPath . DIRECTORY_SEPARATOR . $appendPath;  
        }  
          
        return $this-&gt;_mvcPath;  
    } 

    /** 
     * Initialize View object 
     * 
     * Initializes {@link $view} if not otherwise a Zend_View_Interface. 
     * 
     * If {@link $view} is not otherwise set, instantiates a new Zend_View 
     * object, using the 'views' subdirectory at the same level as the 
     * controller directory for the current module as the base directory. 
     * It uses this to set the following: 
     * - script path = views/scripts/ 
     * - helper path = views/helpers/ 
     * - filter path = views/filters/ 
     * 
     * @return Zend_View_Interface 
     * @throws Zend_Controller_Exception if base view directory does not exist 
     */  
    public function initView()  
    {  
        if (!$this-&gt;getInvokeArg('noViewRenderer') &amp;&amp; $this-&gt;_helper-&gt;hasHelper('viewRenderer')) {  
            return $this-&gt;view;  
        }  
 
        require_once 'Zend/View/Interface.php';  
        if (isset($this-&gt;view) &amp;&amp; ($this-&gt;view instanceof Zend_View_Interface)) {  
            return $this-&gt;view;  
        }  
 
        $baseDir = $this-&gt;_getMvcPath('views');  
        if (!file_exists($baseDir) || !is_dir($baseDir)) {  
            throw new Zend_Controller_Exception('Missing base view directory ("' . $baseDir . '")');  
        }  
 
        require_once 'Zend/View.php';  
        $this-&gt;view = new Zend_View(array('basePath' =&gt; $baseDir));  
 
        return $this-&gt;view;  
    }  
    
    // ...skipped...
}
</code></pre>

<p>This improvement will be useful for Helpers and also it can be used inside Actions, e.g.:</p>

<pre class="highlight"><code>
class IndexController extends Zend_Controller_Action
{
    public function indexAction()
    {
        Zend_Loader::loadFile('filename', $this-&gt;getMvcPath());
        // or something like this:
        Zend_Loader::loadClass('Index_IndexModel', $this-&gt;getMvcPath());
    }
}
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-06-08T06:05:30.000+0000</p> 
        <div class="body">
            <p>Please evaluate and categorize as necessary.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2008-11-05T11:54:45.000+0000</p> 
        <div class="body">
            <p>This can be determined already by querying the front controller:</p>

<pre class="highlight"><code>
$moduleDir = Zend_Controller_Front::getInstance()-&gt;getModuleDirectory($request-&gt;getModuleName());
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2008-11-05T11:55:03.000+0000</p> 
        <div class="body">
            <p>getModuleDirectory() added in 1.6.0 solves this.</p>

        </div>
    </div>
    </div>

