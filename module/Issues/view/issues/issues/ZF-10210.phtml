<h2>ZF-10210: Select element InArray validation is too loose when there's a zero-option</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2010-07-23T07:58:47.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-11-20T21:38:01.000+0000</dd>

    <dt>Status:</dt>
    <dd>Open</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
        None
                    </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Form</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>When a select-field is created with an option of value '0', the default InArray validation accepts any string not beginning with a digit.</p>

<p>Code to reproduce:</p>

<p>//
    $form = new Zend_Form();
    $elem = $form-&gt;createElement(
      'select', 'name',
      array(
        'multioptions' =&gt; array('0' =&gt; 'option 0', '1' =&gt; 'option 1', '2' =&gt; 'option 2'),
        'required' =&gt; true,
      )
    );
    echo "all should return false<br />\n";
    echo 'With value 0:';
    $is_valid = $elem-&gt;isValid('123 SHOULD NOT BE VALID'); // returns false, good
    var_dump($is_valid);
    $is_valid = $elem-&gt;isValid('SHOULD NOT BE VALID 123'); // returns true, not good
    var_dump($is_valid);</p>

<pre><code>$elem = $form-&gt;createElement(
  'select', 'name',
  array(
    'multioptions' =&gt; array('-1' =&gt; 'option -1', '1' =&gt; 'option 1', '2' =&gt; 'option 2'),
    'required' =&gt; true,
  )
);
echo 'Without value 0:';
$is_valid = $elem-&gt;isValid('123 SHOULD NOT BE VALID'); // returns false, good
var_dump($is_valid);
$is_valid = $elem-&gt;isValid('SHOULD NOT BE VALID 123'); // returns false, good
var_dump($is_valid);

die;
</code></pre>

<p>//</p>

<p>To avoid this trap, the client workaround is to set up the element validation explicitly, as follows:</p>

<p>//
      $elem-&gt;addValidator(
        'InArray',
        true,
        array('haystack' =&gt; $elem-&gt;getMultiOptions(), 'strict' =&gt; true)
      )
//</p>

<p>How best to correct once and for all?  The problem stems from in_array('asdf', array(0)) always yielding true so we may need to call it like in_array('asdf', array(0), true) -- the third parameter making a strict check.</p>

<p>Thanks</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>
    <p class="comments">No comments to display</p>
    
</div>

