<h2>ZF-5813: Zend_ProgressBar_Adapter_JsPush</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2009-02-17T06:39:28.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-11-20T20:52:40.000+0000</dd>

    <dt>Status:</dt>
    <dd>Closed</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
        None
                    </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_ProgressBar</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
        <li><a href="/issues/secure/attachment/11759/JsPush.php">JsPush.php</a></li>
        </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Currently, Zend_ProgressBar_Adapter_JsPush, just works if the large proccess (that wil be monitored by the progressbar) runs in a hidden Iframe. I've started a improvement to make possible to do it with a ajax call to the larg process. It is very simple, I have just removed the  tags, and the parent object in the return of the the finish and notify methods. I've included a $_ajaxAccess propertie too. If you set this propertie to FALSE (using setAjaxAccess() method), the class will work normaly, if you set it to TRUE, it will work with ajax. In the moment, the improvement, only work in firefox, but I'm working to portate it to other browsers to.</p>

<p>In javascript ajax return function, you need to use the eval() function to execute the string that returns from the class.</p>

<p>I hope it could be usefull.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Jeferson Rodrigo Almeida (jeffrex) on 2009-02-17T06:41:26.000+0000</p> 
        <div class="body">
            <p>here ir the modified JsPush adapter class</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ben Scholzen (dasprid) on 2009-02-17T09:10:12.000+0000</p> 
        <div class="body">
            <p>It basically looks good, tho it can only be implemented if the major browsers are supported by this method (&gt;= IE6, &gt;= FF2, &gt;= Opera 9, &gt;= Safari 3 and Chrome). When your method works there, it will be implemented with the next mini release.</p>

<p>About the naming, it should probably change. This has actually nothing to do with XML, so AJAX is the wrong naming. As long as setting this option only means, taking away the script tags, it should just be named setDisableScriptTags(boolean $disable = true).</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Jeferson Rodrigo Almeida (jeffrex) on 2009-02-17T09:48:10.000+0000</p> 
        <div class="body">
            <p>Ok. But the setting does not mean just taking away the tags, it's a adaptation of the adapter class, to be used without a hidden iframe in the view code (taking away the parent object too), keeping just the function name, and the paramethers. In this mode, you can call the large proccess with ajax, and execute the return string with a eval javascript funcion, every time that the Zend_ProgressBar class made a change notify.</p>

<p>Maybe ajax is not the better name, but I thing that setDisableScriptTags, is a strange name. It will probably create a confusion. I'm waiting for suggestions.</p>

<p>What about setLocalCall, or setParentCall? This is the real function of this setting.</p>

<p>But the name doesn't matter now, first I'll try to make the code portable for the main browsers.</p>

<p>Thanks Ben.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Rob Allen (rob) on 2012-11-20T20:52:40.000+0000</p> 
        <div class="body">
            <p>Bulk change of all issues last updated before 1st January 2010 as "Won't Fix".</p>

<p>Feel free to re-open and provide a patch if you want to fix this issue.</p>

        </div>
    </div>
    </div>

