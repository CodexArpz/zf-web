<h2>ZF-2977: Zend_Form_Element_Radio ability to render radio buttons individually</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2008-03-26T16:22:32.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2008-04-22T11:40:58.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                jaap vstr (jaapvstr)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Matthew Weier O'Phinney (matthew)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Form</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Extending the Zend_Form_Element_Radio class with the following code gives it the ability to render radio buttons individually, which i think is very useful in view scripts.</p>

<p>Use case (from within a view script):</p>

<pre class="highlight"><code>
&lt;?php echo $this-&gt;form-&gt;subformradio-&gt;true; ?&gt;
&lt;?php echo $this-&gt;form-&gt;subform_select1; ?&gt;
&lt;?php echo $this-&gt;form-&gt;subform_select2; ?&gt;
&lt;?php echo $this-&gt;form-&gt;subform-&gt;false; ?&gt;
&lt;?php echo $this-&gt;form-&gt;subform_select3; ?&gt;
</code></pre>

<p>Added code to Zend_Form_Element_Radio:</p>

<pre class="highlight"><code>
/**
     * Render a single radio button
     * 
     * @param  Zend_View_Interface $view 
     * @param string $radio_key_value
     * @return string
     */
    public function renderValue(Zend_View_Interface $view = null, $radio_key_value)
    {
          if (!isset($this-&gt;options[$radio_key_value])) {
                throw new Zend_Form_Element_Exception('Cannot render non-existing radio value');
          }
        
        if (null !== $view) {
            $this-&gt;setView($view);
        }

        $all_options = $this-&gt;options;
        $this-&gt;options = array($radio_key_value =&gt; $this-&gt;options[$radio_key_value]);
        
        $view = $this-&gt;getView();
        $content = '';
        foreach ($this-&gt;getDecorators() as $decorator) {
            $decorator-&gt;setElement($this);
            $content = $decorator-&gt;render($content);
        }
        
        $this-&gt;options = $all_options;
        return $content;
    }
    
    /**
     * Overloading: access to single radio buttons
     * 
     * @param  string $name 
     * @return string
     */
    public function __get($name)
    {
        return $this-&gt;renderValue(null, $name);
    }
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-03-31T16:04:35.000+0000</p> 
        <div class="body">
            <p>Please evaluate and categorize as necessary.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2008-04-22T11:40:47.000+0000</p> 
        <div class="body">
            <p>You can do this already using the formCheckbox() helper:</p>

<pre class="highlight"><code>
&lt;?= $this-&gt;formRadio($this-&gt;form-&gt;element-&gt;getMultiOption('NAME'), 'NAME') ?&gt;
</code></pre>

<p>Additionally, formRadio() actually allows you to display a full set of radios at once, if you pass in an array of values and names.</p>

<p>I am loathe to add targetted render*() methods, as this is not an extensible way to render elements.</p>

<p>If you really want this feature, you can, of course, create your own Radio element that adds the behavior.</p>

        </div>
    </div>
    </div>

