<h2>ZF-1690: Unable to have table without primary key</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2007-07-09T12:07:25.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2007-07-09T14:08:00.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.0.1 (30/Jul/07)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Eric Garside (garside)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Bill Karwin (bkarwin)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Db_Table</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Certain table architectures in MySQL, such as the Archive table (which is designed to grow and grow) do not support primary keys of any type. Because of this and the oversight made in the Zend Framework, it makes the ZF incompatible with all MySQL Table Types, which should be fixed.</p>

<p>For development and testing, merely commenting out the requirement line in the source code (so no exception was thrown) did not negatively impact on performance in any manner when interfacing with Archive Tables.</p>

<p>The ZF needs to be updated to work with these table types which do not support primary keys (and thus, ids).</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-07-09T13:00:29.000+0000</p> 
        <div class="body">
            <p>This was not an oversight.  A class extending Zend_Db_Table_Abstract must have a primary key.  You must either depend on the RDBMS to report the primary key column(s) when queried via the {{describeTable()}} method, or you must declare the primary key column(s) in the {{_primary}} property of your Table concrete class.</p>

<pre class="highlight"><code>
CREATE TABLE foo (id INT, content VARCHAR(100)) ENGINE=ARCHIVE;
</code></pre>

<pre class="highlight"><code>
&lt;?php
class foo extends Zend_Db_Table_Abstract
{
    protected $_primary = 'id'; // declare primary key column explicitly
}

$foo = new foo();
print_r($foo-&gt;fetchAll()-&gt;toArray());
</code></pre>

<p>The above works fine, and does not throw an exception, because the primary key column has been declared (setting up the Db adapter connection is omitted for brevity).</p>

<p>A primary key simply means that the column(s) serve to uniquely identify each row.  There is no requirement that the column be indexed, be of any particular datatype, or be defined to auto-generate unique integer values (as in {{AUTO_INCREMENT}}).</p>

<p>If there is no set of columns in the table that can serve as a primary key, then you cannot use it with Zend_Db_Table.  But you can still query it with methods of the Zend_Db_Adapter class.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-07-09T13:01:43.000+0000</p> 
        <div class="body">
            <p>The feature works as designed.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-07-09T14:07:59.000+0000</p> 
        <div class="body">
            <p>Reword summary.  Change components.</p>

        </div>
    </div>
    </div>

