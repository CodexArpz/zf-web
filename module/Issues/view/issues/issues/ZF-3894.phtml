<h2>ZF-3894: Zend_Db_Select generates wrong query when joining</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2008-08-08T02:48:24.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-05-18T15:48:32.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.8.2 (27/May/09)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                peter hanula (miko3k)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Ralph Schindler (ralph)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Db_Select</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>There seems to be a problem with joins generated by Zend_Db_Select.</p>

<p>According to my little reserach query is contructed in _renderFrom it using all tables from $this-&gt;_parts[self::FROM], with first table being the table which we're selecting "from" and others are being joined. However this array is ordered diffrently (maybe a problem in _join() ?).</p>

<p>I fixed this by adding a code to _renderFrom which searches for "main" table (joinCondition is empty) and moves it in front of array (yes, I realize this solution is really hacky). Something like this:</p>

<pre class="highlight"><code>
@@ -897,6 +897,19 @@
             $this-&gt;_parts[self::FROM] = $this-&gt;_getDummyTable();
         }

+       // arrange array so first table is first in array. Note this changes state of class
+       // which is not good. We're also not fixing problem but consequence.
+       $first = reset($this-&gt;_parts[self::FROM]);
+       if($first["joinCondition"]) {
+               foreach($this-&gt;_parts[self::FROM] as $key =&gt; $part) {
+                       if($part["joinCondition"]) continue;
+
+                       unset($this-&gt;_parts[self::FROM][$key]);
+                       $this-&gt;_parts[self::FROM] = array_merge(array($key=&gt;$part), $this-&gt;_parts[self::FROM]);
+                       break;
+               }
+       }
+
         $from = array();

         foreach ($this-&gt;_parts[self::FROM] as $correlationName =&gt; $table) {

</code></pre>

<p>this is code snippet demonstrating this behaviour (it's ripped from my project, so it's not really possible to run it by itself - you need so set up adapter and such).</p>

<pre class="highlight"><code>
class Model_Runs extends Zend_Db_Table
    protected $_name = "runs";
    protected $_sequence = true;
    protected $_primary = array('id');

    public function blah()
    {
         $select = $this-&gt;select();
         $select-&gt;join('survey_runs', 'survey_runs.id_run = runs.id', array());
         echo $select-&gt;__toString(); die();
    }
}
</code></pre>

<p>result:
   {{SELECT "runs".* FROM "survey_runs" INNER JOIN "runs"}}</p>

<p>expected result:
   {{SELECT "runs".* FROM "runs" INNER JOIN "survey_runs" ON survey_runs.id_run = runs.id}}</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Emil Hesslow (wizkid) on 2008-08-23T14:50:34.000+0000</p> 
        <div class="body">
            <p>I ran into the same problem.</p>

<p>A workaround I found was to do</p>

<pre class="highlight"><code>$select = $this-&gt;select();
$select-&gt;__toString();
$select-&gt;join('survey_runs', 'survey_runs.id_run = runs.id', array());
</code></pre>

<p>My guess is that when calling __toString it seems that the table name is added to $this-&gt;_parts[self::FROM] which means that it is now first in the array and everything works.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ralph Schindler (ralph) on 2009-01-16T09:47:29.000+0000</p> 
        <div class="body">
            <p>From Christian Grafe</p>

<p>I'd really like to see this bug fixed. If its any help, I think I might 
have located the cause for this issue:</p>

<pre class="highlight"><code>
// If no fields are specified we assume all fields from primary table
if (!count($fields)) {
     $this-&gt;from($primary, self::SQL_WILDCARD, $schema);
     $fields = $this-&gt;getPart(Zend_Db_Table_Select::COLUMNS);
}
</code></pre>

<p>These lines from Zend_Db_Table_Select::assemble() will add the primary 
table to our query, only if we have <em>not</em> joined another table. I would 
think that for a Zend_Db_Table_Select query we always want all fields from 
the primary table. So, imho the above call to $this-&gt;from() should be made 
in Zend_Db_Table_Select::__construct(), which fixes the problem for me.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ralph Schindler (ralph) on 2009-05-18T15:48:32.000+0000</p> 
        <div class="body">
            <p>This has been fixed with the solution in ZF-2546, use $table-&gt;select(true) to retrieve a select object with the from part pre-loaded.</p>

        </div>
    </div>
    </div>

