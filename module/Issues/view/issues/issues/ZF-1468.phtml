<h2>ZF-1468: Support for PHP functions and static methods as filters/validators</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2007-05-31T16:38:30.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2007-07-05T14:44:15.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.0.0 RC2 (08/Jun/07)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Bill Karwin (bkarwin)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Filter_Input</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>I would like to see a way to filter/validate parameters using standard php functions and static methods in addition to the Zend_Filter, Zend_Validator and Custom_* namespaces using call_user_func_array().</p>

<p>examples:</p>

<pre class="literal">
$filters = array( 
    // call_user_func_array('intval', array($month));
    'month'   =&gt; 'intval', 
    // call_user_func_array('trim', array($name));
    'name'    =&gt; 'trim',   
); 

$validators = array( 
    'month'   =&gt; array(
        'ctype_digits',
    ),
    'user' =&gt; array(
        // call_user_func_array(array('UserModel' =&gt; 'checkUserId'), array($user)); -&gt; UserModel::checkUserId($user);
        'UserModel' =&gt; 'checkUserId' 
    )
);
</pre>

<p>Yes I know that there are good Zend_* wrappers available for several php functions, but maybe call_user_func_array could safe some object instantiation overhead; although it self needs some microseconds to execute.
But it would enable nice possibilities for validations as shown with the UserModel example, that you would call and check later in your script anyway, so you really would have all checks and treatments in one place.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-06-01T12:50:07.000+0000</p> 
        <div class="body">
            <p>The design of Zend_Filter_Input requires that filters refer to classes that extend Zend_Filter_Interface, and validators refer to classes that extend Zend_Validate_Interface.</p>

<p>The value of this is that these interface define the calling convention.  There is a {{filter()}} method and an {{isValid()}} method that Zend_Filter_Input knows to call.</p>

<p>In addition, validators return error messages, which the ad hoc solution you describe would not allow.</p>

<p>If you have custom filter or validation methods, you should write a class that implements Zend_Filter_Interface or extends Zend_Validate_Abstract.  Then name these classes in your Zend_Filter_Input rules.</p>

<p>It's really not likely that instantiating a single object per filter or validator is a significant issue for performance.</p>

        </div>
    </div>
    </div>

