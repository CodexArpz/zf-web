<h2>ZF-801: Zend_Auth - Implement Singleton Pattern</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2007-01-26T08:06:02.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2007-07-05T14:43:42.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>0.8.0 (21/Feb/07)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Darby Felton (darby)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Darby Felton (darby)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Auth</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>If we restrict Zend_Auth to providing for authenticating HTTP requests to the application, then we need only one instance of the authentication object per PHP execution space. It is best for the component design that Zend_Auth focus on supporting the generalized use case of authenticating the HTTP request against the web application. All things considered, Zend_Auth is a good candidate for implementing the Singleton pattern, since only one instance is needed per request. Of course, the one instance could bind to any of various authentication adapters included with Zend_Auth or to a custom adapter written by the user.</p>

<p>By implementing the Singleton pattern, there is a side benefit of inherently providing global access to the object instance.</p>

<p>Instead of:</p>

<pre class="highlight"><code>
$auth = new Zend_Auth(...);
</code></pre>

<p>We would have:</p>

<pre class="highlight"><code>
$auth = Zend_Auth::getInstance();
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Ralph Schindler (ralph) on 2007-02-02T13:42:59.000+0000</p> 
        <div class="body">
            <p>Also keep in mind that in addition to binding to different Auth Adapters, it can be bound to different Storage Mechanisms.. With that in mind, if component A and component B really want to maintain different authentication identities (extreme edge case), they can both do so within the same session, simply by using a different namespace in the ZendSession storage type adapter.</p>

<p>getInstance (like Zend_Contoller) should be complemented with a resetInstance().</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Darby Felton (darby) on 2007-02-02T14:36:19.000+0000</p> 
        <div class="body">
            <p>Also related to storage is [ZF-804]</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Darby Felton (darby) on 2007-02-02T14:37:13.000+0000</p> 
        <div class="body">
            <p>...and [ZF-802]</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Darby Felton (darby) on 2007-02-14T16:32:55.000+0000</p> 
        <div class="body">
            <p>Resolved with SVN <a href="http://framework.zend.com/fisheye/changelog/Zend_Framework/?cs=3412">r3412</a>.</p>

        </div>
    </div>
    </div>

