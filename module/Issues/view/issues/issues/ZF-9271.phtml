<h2>ZF-9271: Method listTableFields() for database adapters</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>New Feature</dd>

    <dt>Created:</dt>
    <dd>2010-02-26T01:35:12.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-11-20T21:37:49.000+0000</dd>

    <dt>Status:</dt>
    <dd>Open</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Thomas Ohms (tohms)
            </dd>

    <dt>Assignee:</dt>
    <dd>
        None
                    </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Db</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>I was in need for a method that returns an array of containing fields for a specified table. Because I didn't find any solution, I extended the adapter myself (see below). This version is for MySQL only and needs to be adopted to the others if you decide to implement this method.</p>

<pre class="highlight"><code>
/* Return a standardized array with field information
   *  
   * Standardized format:
   * - name:       field name (e.g. my_field)
   * - type:       field type (e.g. "int" or "number")
   * - length:     field length (e.g. 20)
   * - precision:  precision of a float number (e.g. 5)
   * - null:       NULL or NOT NULL
   * - default:    default value (e.g. "default_value")
   * - attributes: attributes (e.g. "unsigned")
   * - index:      PRIMARY, UNIQUE or INDEX
   * - extra:      extra information (e.g. auto_increment)
   * @param string
   * @return string
   * @todo Support all kind of keys (e.g. FULLTEXT or FOREIGN).
   */
    public function listTableFields($strTable)
    {
        $arrReturn = array();
        
        $this-&gt;setFetchMode(Zend_Db::FETCH_ASSOC);
        $arrFields = $this-&gt;fetchAll("SHOW COLUMNS FROM {$strTable}");

        foreach ($arrFields as $k=&gt;$v)
        {
            $arrChunks = preg_split('/(\([^\)]+\))/', $v['Type'], -1, PREG_SPLIT_DELIM_CAPTURE|PREG_SPLIT_NO_EMPTY);

            $arrReturn[$k]['name'] = $v['Field'];
            $arrReturn[$k]['type'] = $arrChunks[0];

            if (strlen($arrChunks[1]))
            {
                $arrChunks[1] = str_replace(array('(', ')'), array('', ''), $arrChunks[1]);
                $arrSubChunks = explode(',', $arrChunks[1]);

                $arrReturn[$k]['length'] = trim($arrSubChunks[0]);

                if (strlen($arrSubChunks[1]))
                {
                    $arrReturn[$k]['precision'] = trim($arrSubChunks[1]);
                }
            }

            if (strlen($arrChunks[2]))
            {
                $arrReturn[$k]['attributes'] = trim($arrChunks[2]);
            }

            if (strlen($v['Key']))
            {
                switch ($v['Key'])
                {
                    case 'PRI':
                        $arrReturn[$k]['index'] = 'PRIMARY';
                        break;

                    case 'UNI':
                        $arrReturn[$k]['index'] = 'UNIQUE';
                        break;

                    default:
                        $arrReturn[$k]['index'] = 'KEY';
                        break;
                }
            }

            $arrReturn[$k]['null'] = ($v['Null'] == 'YES') ? 'NULL' : 'NOT NULL';
            $arrReturn[$k]['default'] = $v['Default'];
            $arrReturn[$k]['extra'] = $v['Extra'];
        }
        
        return $arrReturn;
    }
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>
    <p class="comments">No comments to display</p>
    
</div>

