<h2>ZF-8899: Custom Zend_Tool_Framework_Provider classes are not found in include_path with ZendFramework-1.10</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2010-01-22T01:31:39.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2010-10-21T08:14:28.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.11.0 (02/Nov/10)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Stefan Stubbe (stefan.stubbe)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Ralph Schindler (ralph)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Tool</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-9397">ZF-9397</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>I'm following the manual for creating a custom Zend_Tool_Framework provider [1] in Zend Framework 1.10 (tested both beta1 and rc1)
My custom provider is never found although my provider and manifest are in the include_path.</p>

<p>This seems to be because Zend_Tool_Framework_Client_Console is now forcing the use of the BasicLoader in
Zend_Tool_Framework_Registry.
Previous zf version (I checked both 1.9.7 and 1.9.6) defaulted to the IncludePathLoader.</p>

<p>I can't find a way to override this new behaviour</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Stefan Stubbe (stefan.stubbe) on 2010-01-22T01:42:36.000+0000</p> 
        <div class="body">
            <p>To provide some more information, my current setup:</p>

<pre class="highlight"><code>
/local/www/library/My
`-- Tool
    |-- HelloProvider.php
    `-- Manifest.php
</code></pre>

<p>My/Tool/Manifest.php:</p>

<pre class="highlight"><code>
&lt;?php

class My_Tool_Manifest implements Zend_Tool_Framework_Manifest_ProviderManifestable
{
        public function getProviders()
        {
                return array(
                        new My_Tool_HelloProvider
                );
        }
}
</code></pre>

<p>My/Tool/HelloProvider.php</p>

<pre class="highlight"><code>
&lt;?php

class My_Tool_HelloProvider implements Zend_Tool_Framework_Provider_Interface
{
        public function say()
        {
                echo 'Hello from my provider!', PHP_EOL;
        }
}
</code></pre>

<p>Command I am using:</p>

<pre class="highlight"><code>
/home/yahiko $ cd /local/www/library
/local/www/library $ ZEND_TOOL_INCLUDE_PATH=$(pwd) /local/www/library/ZendFramework-1.10.0rc1-minimal/bin/zf.sh say hello
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Benjamin Eberlei (beberlei) on 2010-01-22T05:16:17.000+0000</p> 
        <div class="body">
            <p>The include path loader has been replaced with the basic loader.</p>

<p>You have to hook custom classes into Zend Tool by adding the following line to your .zf.ini:</p>

<pre class="highlight"><code>
basicloader.classes.0 = "My_ClassName"
basicloader.classes.1 = "My_Manifest"
</code></pre>

<p>Or you use the command:</p>

<pre class="highlight"><code>
benny@benny-pc:~$ zf enable config.?
Zend Framework Command Line Console Tool v1.10.0alpha
Details for action "Enable" and provider "Config"
    zf enable config.manifest class-name
    zf enable config.provider class-name
</code></pre>

<p>This does the same.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Stefan Stubbe (stefan.stubbe) on 2010-01-22T06:58:52.000+0000</p> 
        <div class="body">
            <p>Adding the custom classes to my .zf.ini did the trick.</p>

<p>The <a href="http://framework.zend.com/manual/1.10/en/zend.tool.extending.html#zend.tool.extending.zend-tool-framework.providers-and-manifests.loading">documentation</a> however does not mention this and still talks about the IncludePathLoader</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Guillermo Thiemann (guille) on 2010-03-11T02:23:04.000+0000</p> 
        <div class="body">
            <p>I would say that the environment-level configuration .zf.ini is a bad location to put custom providers anyway.</p>

<p>What if I have project-specific Providers and more than one Project running in one server?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by James Stuart (jstuart) on 2010-03-23T12:54:02.000+0000</p> 
        <div class="body">
            <p>I agree. Causing Zend Tool extensions to be loaded globally (per user) significantly diminishes their usefulness for project based tasks.</p>

<p>We have many developers, each with multiple workstations, working on many projects.  Having your configuration based on the user account (and workstation) that you're using and not the application that you're working on is a hurdle that will prevent us from using Zend Tool at all.</p>

<p>On the server side, our hosting setup causes us to have many applications on the same server running as the same user.  We obviously cannot use the same configuration for each application, so the environment-level configuration doesn't work here either.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ralph Schindler (ralph) on 2010-10-21T08:14:27.000+0000</p> 
        <div class="body">
            <p>Fixed in r23201 in trunk &amp; r23202 in release branch 1.11 (as part of ZF-9397)</p>

        </div>
    </div>
    </div>

