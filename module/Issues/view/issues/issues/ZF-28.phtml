<h2>ZF-28: Zend_Db_Select::_tableCols() won't select table-specific columns</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2006-06-19T22:52:11.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2007-07-05T14:43:06.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>0.8.0 (21/Feb/07)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Bill Karwin (bkarwin)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Db_Select</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Hello Zend,</p>

<p>in your method "Zend_Db_Select::_tableCols()" it won't select table specific columns. I have create a own Db_Select class thats extends your class and i have rewrite this method. Do you change this in the future or it is new ready?</p>

<p>my rewrited method:</p>

<pre class="highlight"><code>
    protected function _tableCols($tbl, $cols) {
        if (is_string($cols)) {
            $cols = explode(',', $cols);
        } else {
            settype($cols, 'array');
        }

        foreach ($cols as $col) {
            $col = trim($col);
            if ($col != '*' &amp;&amp; strpos($col, '(')===false) {
                $col = '`'.$col.'`';
            }
            $this-&gt;_parts['cols'][] = '`'.$tbl.'`.'.$col;
        }
    }
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2006-11-13T15:15:30.000+0000</p> 
        <div class="body">
            <p>Changing fix version to 0.8.0.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2006-12-29T14:35:40.000+0000</p> 
        <div class="body">
            <p>The problem is that the generated SQL may include ambiguous references to columns of the same name in more than one table.</p>

<p>The solution is to prefix the table name or correlation name to the columns, so that columns for a given table, or a wildcard "*" for all columns from the table, are retrieved specifically from one table.</p>

<p>The implementation given is not general-purpose:</p>

<ul><li><p>The backticks `` are MySQL-specific identifier delimiters.  The Db adapter should provide the correct quoting for identifiers. See ZF-1.</p></li>
<li><p>Inferring cases from the "*" or "(" characters does not account for special characters that may occur within delimited identifiers.  That is, "foo(bar" is a legitimate identifier when delimited.</p></li>
</ul>
        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-01-05T17:02:21.000+0000</p> 
        <div class="body">
            <p>Recategorize in Zend_Db_Select component.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-02-08T20:41:15.000+0000</p> 
        <div class="body">
            <p>Fixed in revision 3320.</p>

<p>Now columns in the select-list are prepended by the correlation name.</p>

<p>If you have columns that should not have correlation name prepended, use '' as the table name.  For example:</p>

<pre class="highlight"><code>
$select-&gt;from( '', 'count(*)');
</code></pre>

<p>I may introduce a function {{columns()}} for this purpose too.</p>

        </div>
    </div>
    </div>

