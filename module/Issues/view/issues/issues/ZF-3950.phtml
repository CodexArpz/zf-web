<h2>ZF-3950: Zend_Dom_Query should remember its internal DOMDocument object</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2008-08-14T10:53:44.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-11-20T20:52:31.000+0000</dd>

    <dt>Status:</dt>
    <dd>Closed</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
        None
                    </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Dom_Query</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
        <li><a href="/issues/secure/attachment/11771/DOMDocument.php">DOMDocument.php</a></li>
        </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Currently every call to Zend_Dom_Query::queryXpath() results in a completely new DOMDocument object being created, regardless of whether or not the underlying document string has changed.  This means that the same node retrieved by two separate queries is not actually the same node, making it difficult to do comparisons.</p>

<pre class="highlight"><code>
$string = '</code></pre><code>first itemsecond item';
$queryObject = new Zend_Dom_Query($string);

// Retrieve the first list item once.
$firstQueryResult = $queryObject-&gt;query('li');
$firstItemFromFirstQuery = current($firstQueryResult);

// Retrieve the first list item again.
$secondQueryResult = $queryObject-&gt;query('li');
$firstItemFromSecondQuery = current($secondQueryResult);

echo (integer)($firstItemFromFirstQuery-&gt;isSameNode($firstItemFromSecondQuery));
</code>

<p>The result I'd like to see here is 1 (true), but the actual result is 0 (false).</p>

<p>In order to make this work the way I was hoping, Zend_Dom_Query would need to avoid re-creating the DOMDocument object with each query, instead storing it internally and using it again later.</p>

<p>One downside of this approach is that the contents of $_document might not necessarily reflect the contents of the internally-stored DOMDocument object, if that object is modified by outside code.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Tomoaki Kosugi (noopable) on 2009-02-25T16:04:11.000+0000</p> 
        <div class="body">
            <p>I attached a sample script of a DOMDocument implementation. This enables you to solve this issue's problem and similarly ZF-3939.And this class enables us to handle a DOMDocument with a pointer to CSS-Queried objects.
The usage is an aggregation of DOMDocument and Zend_Dom_Query.
However I clipped part of the Zend_Dom_Query. If this approach make a sense,please review an attached scripts and add a comment.</p>

<pre class="highlight"><code>
&lt;?php
require_once('Zend/Dom/DOMDocument.php');
$string = '</code></pre><code>first itemsecond item';
$dom = new Zend_Dom_DOMDocument();
$dom-&gt;loadXML($string);
// Retrieve the first list item once.
$firstQueryResult = $dom-&gt;query('li');
$firstItemFromFirstQuery = $firstQueryResult-&gt;current();

// Retrieve the first list item again.
$secondQueryResult = $dom-&gt;query('li');
$firstItemFromSecondQuery = $secondQueryResult-&gt;current();

echo (integer)($firstItemFromFirstQuery-&gt;isSameNode($firstItemFromSecondQuery));
// output: 1

</code>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by anton mabundo (antonm) on 2009-05-01T08:10:11.000+0000</p> 
        <div class="body">
            <p>Hi guys,</p>

<p>I know this is not the proper forum to ask. but just one question. and maybe you can kick me off from this site. I was wondering how to use Zend_Dom. I tried my best searching for a good resource on the internet which gives tutorial on how to use it but aside from the brief introduction on Zend online manual I can't find anything more.</p>

<p>Anyway, i'm just particularly confused on how to use the DomDocument/DomElement objects. What are its member functions? I tried searching for the file which holds these classes in my installation but I can't figure where it's located.</p>

<p>Can you just help me understand and probably give me a sample usage of this plugin? Or maybe just redirect me to the proper forum where I can learn this thing.</p>

<p>Looking forward for you reply.</p>

<p>Thanks!</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Rob Allen (rob) on 2012-11-20T20:52:31.000+0000</p> 
        <div class="body">
            <p>Bulk change of all issues last updated before 1st January 2010 as "Won't Fix".</p>

<p>Feel free to re-open and provide a patch if you want to fix this issue.</p>

        </div>
    </div>
    </div>

