<h2>ZF-8618: Zend_Json_Decoder returns incompatible return types compared to ext/json</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2009-12-22T16:27:39.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2011-09-03T08:08:16.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>Next Major Release ()</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Marc Bennewitz (private) (mabe)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Json</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF2-54">ZF2-54</a></li>
            <li><a href="/issues/browse/ZF-8619">ZF-8619</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Zend_Json_Decoder (the native alternative to ext/json) returns types which are incompatible with ext/json, thus for the same JSON input ext/json may emit a stdClass object whereas Zend_Json_Decoder emits an Array instead. Given the access differences this incompatibility may break applications moving from an ext/json system to one (e.g. CentOS) where ext/json is not available and Zend_Json_Decoder is utilised instead.</p>

<p>Reproduce code:</p>

<pre class="highlight"><code>'));
var_dump(Zend_Json_Decoder::decode('{"zero": 2}'));</code></pre>

<p>Expected:</p>

<p>object(stdClass)#1 (1) {
  ["zero"]=&gt;
  int(2)
}
object(stdClass)#1 (1) {
  ["zero"]=&gt;
  int(2)
}</p>

<p>Actual:</p>

<p>object(stdClass)#1 (1) {
  ["zero"]=&gt;
  int(2)
}
array(1) {
  ["zero"]=&gt;
  int(2)
}</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Jair Henrique de Carvalho Souza (jairhenrique) on 2009-12-29T12:11:02.000+0000</p> 
        <div class="body">
            <p>you must pass the second parameter of the function.</p>

<p>var_dump(Zend_Json_Decoder::decode('{"zero": 2}',TYPE_OBJECT));</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Pádraic Brady (padraic) on 2009-12-29T13:29:10.000+0000</p> 
        <div class="body">
            <p>ext/json doesn't require the extra parameter - so it is an incompatible behaviour ;).</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Joel Clermont (jclermont) on 2010-05-20T18:54:35.000+0000</p> 
        <div class="body">
            <p>json_decode defaults to returning an object of type stdClass, but Zend_Json::decode defaults to returning an array whether it uses json_decode or its own internal decoder. I can see how this is confusing and inconsistent. However, if we change the default behavior, wouldn't that break backwards compatibility? This behavior has been in place since they added support for ext/json. Thoughts?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Chris Boyce (chrisboyce) on 2010-08-30T19:40:21.000+0000</p> 
        <div class="body">
            <p>Perhaps in ZF2 the default could change? I can't see a way to change the default behavior without breaking backwards compatibility.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Marc Bennewitz (private) (mabe) on 2010-11-03T00:40:37.000+0000</p> 
        <div class="body">
            <p>fixed on zf2 branch: <a href="https://github.com/zendframework/zf2/issues/closed#issue/63">https://github.com/zendframework/zf2/…</a></p>

        </div>
    </div>
    </div>

