<h2>ZF-3912: Incorrect encoding of 'subject' in Chinese e-mail, sent with Zend_Mail</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2008-08-09T05:28:02.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2008-10-06T08:44:24.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Jonathan Maron (jonathan_maron)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Nico Edtinger (nico)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Mail</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-1950">ZF-1950</a></li>
            <li><a href="/issues/browse/ZF-2532">ZF-2532</a></li>
            <li><a href="/issues/browse/ZF-3641">ZF-3641</a></li>
            <li><a href="/issues/browse/ZF-3588">ZF-3588</a></li>
            <li><a href="/issues/browse/ZF-1945">ZF-1945</a></li>
            <li><a href="/issues/browse/ZF-1688">ZF-1688</a></li>
            <li><a href="/issues/browse/ZF-3865">ZF-3865</a></li>
            <li><a href="/issues/browse/ZF-2043">ZF-2043</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
        <li><a href="/issues/secure/attachment/11475/r10901.patch">r10901.patch</a></li>
        </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>With the following code, I wish to send an e-mail with Chinese in the subject:</p>

<pre class="highlight"><code>// ZendFramework-1.5.2

$mail = new Zend_Mail('UTF-8');

$mail-&gt;setFrom('info@example.org');
$mail-&gt;addTo('sam@example.org');
$mail-&gt;setSubject('机器视觉组件生产商');
$mail-&gt;setBodyText('机器视觉组件生产商 机器视觉组件生产商');
$mail-&gt;send();</code></pre>

<p>However, the subject of the sent e-mail is garbled and displayed incorrectly in e-mail client (Thunderbird).</p>

<pre class="highlight"><code>

See full e-mail, which is sent, is below:

</code></pre>

<p>From - Sat Aug  9 14:17:45 2008
X-Account-Key: account2
X-UIDL: BNb"!%58"!UQ]!!J&gt;'"!
X-Mozilla-Status: 0001
X-Mozilla-Status2: 00000000
Return-Path: <a href="mailto:xxx@xxx.org">xxx@xxx.org</a>
X-Original-To: yyy@xxx.org
Delivered-To: yyy@xxx.org
Received: from xxx.xxx.org (localhost [127.0.0.1])
    by localhost (Postfix) with ESMTP id B6B67501847
    for <a href="mailto:yyy@xxx.org">yyy@xxx.org</a>; Sat,  9 Aug 2008 14:14:08 +0200 (CEST)
To: <a href="mailto:yyy@xxx.org">yyy@xxx.org</a>
Subject: =?UTF-8?Q?=E6=9C=BA=E5=99=A8=E8=A7=86=E8=A7=89=E7=BB=84=E4=BB=B6=E7=94=9F=E4=BA=A7= =E5=95=86?=
From: "" <a href="mailto:info@example.org">info@example.org</a>
Date: Sat, 09 Aug 2008 14:27:55 +0200
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable
Content-Disposition: inline
Message-Id: <a href="mailto:20080809122755.C0CAB8C056@xxx.xxx.org">20080809122755.C0CAB8C056@xxx.xxx.org</a></p>

<p>=E6=9C=BA=E5=99=A8=E8=A7=86=E8=A7=89=E7=BB=84=E4=BB=B6=E7=94=9F=E4=BA=A7=E5=
=95=86 =E6=9C=BA=E5=99=A8=E8=A7=86=E8=A7=89=E7=BB=84=E4=BB=B6=E7=94=9F=E4=
=BA=A7=E5=95=86</p>

<pre class="highlight"><code>

It seems that the method Zend_Mail::_encodeHeader() is causing the problem. 

E-Mail with a Chinese subject is sent correctly, when the following code is used for the method:

</code></pre>

<p>protected function _encodeHeader($value)
{
    if (Zend_Mime::isPrintable($value)) {
        return $value;
    } else {
        return '=?' . $this-&gt;_charset . '?B?' . base64_encode($value) . '?=';
    }
} ```</p>

<p>Jacky Chen posted this solution on Fri, 28 Dec 2007 17:21:26 -0800 at:</p>

<p><a href="http://www.mail-archive.com/fw-general@lists.zend.com/msg09005.html">http://mail-archive.com/fw-general@lists.zend.com/…</a></p>

<p>Can his version of Zend_Mail::_encodeHeader() be used to update the official version?</p>

<p>In the meantime, I am subclassing Zend_Mail, overloading Zend_Mail::_encodeHeader() with his version, as I need to send e-mail with Chinese subjects and *also* From and To addresses - Zend_Mail::_encodeHeader() is used in multiple methods.</p>

<p>Thank you for your kind consideration of this change.</p>

<p>Jonathan Maron</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Tomas Markauskas (tamole) on 2008-08-09T15:05:34.000+0000</p> 
        <div class="body">
            <p>This solution would work only for short headers, because the RFC does not allow the encoded words in the headers to be longer than 75 characters. The string has to be split to avoid problems with multibyte characters and therefore has to be split between those characters. I had the same problem and now I have a solution which fixes it for utf-8 string (other charsets later).</p>

<p>I will post a patch in the next few days. It should also close a few other tickets related to Zend_Mail/Zend_Mime.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Jonathan Maron (jonathan_maron) on 2008-08-09T21:58:05.000+0000</p> 
        <div class="body">
            <p>Hello Thomas</p>

<p>Thank you very much for your prompt answer.</p>

<p>I very much look forward to seeing your patch.</p>

<p>Would it be possible for you to send me a copy already?</p>

<p>TIA</p>

<p>Jonathan Maron</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Tomas Markauskas (tamole) on 2008-08-13T13:42:08.000+0000</p> 
        <div class="body">
            <p>Patch for Zend_Mail/Zend_Mime (@10901)</p>

<p>This fixes the described problem (and a few more).</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Tomas Markauskas (tamole) on 2008-08-13T13:51:24.000+0000</p> 
        <div class="body">
            <p>What was the problem:</p>

<p>From <a href="http://tools.ietf.org/html/rfc2047#section-2">http://tools.ietf.org/html/rfc2047#section-2</a></p>

<p>An encoded-word may not be more than 75 characters long, including
   charset, encoding, encoded-text, and delimiters.  If it is desirable
   to encode more text than will fit in an encoded-word of 75
   characters, multiple encoded-words (separated by CRLF SPACE) may be
   used.</p>

<p>While there is no limit to the length of a multiple-line header
   field, each line of a header field that contains one or more
   encoded-words is limited to 76 characters.</p>

<p>From <a href="http://tools.ietf.org/html/rfc2047#section-5">http://tools.ietf.org/html/rfc2047#section-5</a></p>

<p>The 'encoded-text' in an 'encoded-word' must be self-contained;
   'encoded-text' MUST NOT be continued from one 'encoded-word' to
   another.  This implies that the 'encoded-text' portion of a "B"
   'encoded-word' will be a multiple of 4 characters long; for a "Q"
   'encoded-word', any "=" character that appears in the 'encoded-text'
   portion will be followed by two hexadecimal characters.</p>

<p>Each 'encoded-word' MUST encode an integral number of octets.  The
   'encoded-text' in each 'encoded-word' must be well-formed according
   to the encoding specified; the 'encoded-text' may not be continued in
   the next 'encoded-word'.  (For example, "=?charset?Q?=?=
   =?charset?Q?AB?=" would be illegal, because the two hex digits "AB"
   must follow the "=" in the same 'encoded-word'.)</p>

<p>Each 'encoded-word' MUST represent an integral number of characters.
   A multi-octet character may not be split across adjacent 'encoded-
   word's.</p>

<p>There is still one problem with my patch: the first line of the header will probably exceed the length of 76 characters because we don't count the length of the header name. Zend_Mime::encodeQuotedPrintableHeader should get the length of the header name, so it could reduce the length of the first "encoded-word". I haven't seen any cases where this would cause big problems, so I haven't resolved it.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Tomas Markauskas (tamole) on 2008-08-16T04:57:15.000+0000</p> 
        <div class="body">
            <p>It would probably fix these two issues too.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Niko Sams (nikosams) on 2008-09-02T01:47:12.000+0000</p> 
        <div class="body">
            <p>Patch worked out fine for me. Thanks.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Tomas Markauskas (tamole) on 2008-09-02T10:07:33.000+0000</p> 
        <div class="body">
            <p>All these issues seem to be related.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Tomáš Fejfar (tomas.fejfar@gmail.com) on 2008-09-11T10:24:54.000+0000</p> 
        <div class="body">
            <p>Someone should fix this, it's critical bug for everyone usin non-ascii charset...</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Tomas Markauskas (tamole) on 2008-09-17T05:53:11.000+0000</p> 
        <div class="body">
            <p>I would like to know if there's any need for other character sets than UTF-8.
Another option to deal with multibyte characters would be to convert all multibyte character sets to UTF-8 in encodeQuotedPrintableHeader (see attached patch).</p>

        </div>
    </div>
    </div>

