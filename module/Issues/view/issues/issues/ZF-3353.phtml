<h2>ZF-3353: Zend_Cache::factory method does not allow custom namespaces.</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2008-05-29T16:40:05.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2008-05-30T11:04:27.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Fabien MARTY (fab)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Cache</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>The Zend_Filer_Input class allows for a custom name space to be defined. This allows for third party filters to be defined. In general it is useful to be able to define custom name spaces for Adapters to keep the upgrade path easier.</p>

<p>Currently the Zend_Cache::factory requires that the cache backend class begin with the string "Zend_Cache_Backend_". This restriction makes it difficult to create custom cache backends. For instance, I have created my own Memcache backend that allows tags to work. I am forced to name my class Zend_Cache_Backend_MemcacheTags. This will be confusing to other developers on my team because it is not obvious from the class name that the class is not created by Zend. This also has negative implications on my upgrade path when new versions of Zend Framework are released.</p>

<p><a href="http://framework.zend.com/manual/en/zend.filter.input.html#zend.filter.input.namespaces">http://framework.zend.com/manual/en/â€¦</a></p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Fabien MARTY (fab) on 2008-05-30T11:03:20.000+0000</p> 
        <div class="body">
            <p>already done in SVN trunk :</p>

<pre class="highlight"><code>
    /**
     * Factory
     *
     * @param string $frontend        frontend name
     * @param string $backend         backend name
     * @param array  $frontendOptions associative array of options for the corresponding frontend constructor
     * @param array  $backendOptions  associative array of options for the corresponding backend constructor
     * @param boolean $customFrontendNaming if true, the frontend argument is used as a complete class name ; if false, the frontend argument is used as the end of "Zend_Cache_Frontend_[...]" class name
     * @param boolean $customBackendNaming if true, the backend argument is used as a complete class name ; if false, the backend argument is used as the end of "Zend_Cache_Backend_[...]" class name
     * @param boolean $autoload if true, there will no require_once for backend and frontend (usefull only for custom backends/frontends)
     * @throws Zend_Cache_Exception
     * @return Zend_Cache_Frontend
     */
</code></pre>

        </div>
    </div>
    </div>

