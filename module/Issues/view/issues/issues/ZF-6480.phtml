<h2>ZF-6480: Subforms cannot be attached to parent forms using a name that happens to also be a name of one of the subforms element</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2009-04-30T12:36:11.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-09-07T06:02:48.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Josh Ribakoff (jshpro2)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Matthew Weier O'Phinney (matthew)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Form</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>I have an address subform that has fields such as address ( and other stuff ). I am trying to attach it to a form under the subform name 'address' and it looks like when validatePartial normalizes the array notation it goes too far, trying to grab $_POST['address']['address'] which is a string instead of $_POST['address'] ( array ).</p>

<p>Here is a failing integration ( unit ) test.</p>

<p>$form = new Zend_Form;</p>

<pre><code>    $address = new Zend_Form_SubForm();
    $address-&gt;addElement( 'text', 'address' );

    $form-&gt;addSubForms( array( 'address' =&gt; $address ) );

    $val = array(  'address' =&gt; array( // subforms get passed as arrays
        'address' =&gt; '123 street',
        'address2' =&gt; NULL,
        'city' =&gt; NULL,
        'state' =&gt; NULL
    ));
    var_dump( $form-&gt;isValidPartial( $val ) );  //Invalid argument supplied for foreach()] severity [E_WARNING] in [F:\svn_sites\k12\library\ZendFramework\library\Zend\Form.php line 2021
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Josh Ribakoff (jshpro2) on 2009-08-04T21:26:16.000+0000</p> 
        <div class="body">
            <p>Any updates or comments on this? If I decided to write a patch where would I submit it</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2009-08-05T04:38:43.000+0000</p> 
        <div class="body">
            <p>Not going to fix.</p>

<p>We use array access and overloading within Zend_Form, and use it to pull elements, display groups, and sub forms. As such, sub form names and element names must be unique even between the types.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Josh Ribakoff (jshpro2) on 2009-08-05T09:30:31.000+0000</p> 
        <div class="body">
            <p>I do believe you mis-read this.</p>

<p>I am not trying to add a sub form and an element with the same name to a form.</p>

<p>Rather I am trying to add an element to a sub-form, and then add that sub-form to another 3rd form with a name that happens to be one of the sub-forms elements. I typed up a use case for the "array access" you described that I understand does not work. Below that is 4 use cases reproducing the bug.</p>

<p>// I understand this is not supported
$form = new Zend_Form(); // create a form
$form-&gt;addElement( 'text', 'address', array( 'required' =&gt; true ) ); // add an element named address
$form-&gt;addSubForm( new Zend_Form_SubForm(), 'address' ); // add a sub form named address</p>

<p>// but here is the bug
$formA = new Zend_Form(); // create a form
$formB = new Zend_Form_SubForm(); // create a sub form
$formB-&gt;addElement( 'text', 'address', array( 'required' =&gt; true ) ); // add an element named address to the sub-form
$formA-&gt;addSubForm( $formB, 'address' ); // add the sub form to the parent form with an element name of address</p>

<p>$val = array(
    'address' =&gt; array( // subforms get passed as arrays
        'address' =&gt; ''
    )
);
var_dump( $formA-&gt;isValidPartial( $val ) );    // expect false, get true
var_dump( $formB-&gt;isValidPartial( $val['address'] ) );  // expect false, get true</p>

<p>$val = array(
    'address' =&gt; array( // subforms get passed as arrays
        'address' =&gt; '123 test'
    )
);
var_dump( $formA-&gt;isValidPartial( $val ) ); // at least returns true but causes a PHP error   Invalid argument supplied for foreach() in C:\dev\k12\library\ZendFramework\library\Zend\Form.php on line 2036
var_dump( $formB-&gt;isValidPartial( $val['address'] ) ); // same</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Josh Ribakoff (jshpro2) on 2009-08-05T09:30:35.000+0000</p> 
        <div class="body">
            <p>I do believe you mis-read this.</p>

<p>I am not trying to add a sub form and an element with the same name to a form.</p>

<p>Rather I am trying to add an element to a sub-form, and then add that sub-form to another 3rd form with a name that happens to be one of the sub-forms elements. I typed up a use case for the "array access" you described that I understand does not work. Below that is 4 use cases reproducing the bug.</p>

<p>// I understand this is not supported
$form = new Zend_Form(); // create a form
$form-&gt;addElement( 'text', 'address', array( 'required' =&gt; true ) ); // add an element named address
$form-&gt;addSubForm( new Zend_Form_SubForm(), 'address' ); // add a sub form named address</p>

<p>// but here is the bug
$formA = new Zend_Form(); // create a form
$formB = new Zend_Form_SubForm(); // create a sub form
$formB-&gt;addElement( 'text', 'address', array( 'required' =&gt; true ) ); // add an element named address to the sub-form
$formA-&gt;addSubForm( $formB, 'address' ); // add the sub form to the parent form with an element name of address</p>

<p>$val = array(
    'address' =&gt; array( // subforms get passed as arrays
        'address' =&gt; ''
    )
);
var_dump( $formA-&gt;isValidPartial( $val ) );    // expect false, get true
var_dump( $formB-&gt;isValidPartial( $val['address'] ) );  // expect false, get true</p>

<p>$val = array(
    'address' =&gt; array( // subforms get passed as arrays
        'address' =&gt; '123 test'
    )
);
var_dump( $formA-&gt;isValidPartial( $val ) ); // at least returns true but causes a PHP error   Invalid argument supplied for foreach() in C:\dev\k12\library\ZendFramework\library\Zend\Form.php on line 2036
var_dump( $formB-&gt;isValidPartial( $val['address'] ) ); // same</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Josh Ribakoff (jshpro2) on 2009-08-05T09:35:20.000+0000</p> 
        <div class="body">
            <p>Sorry for double post, your site keeps going down and I was trying to reload because I figured the 1st one didnt post. The real world use case for this is simple, I want to create an "address" form that contains an element address, or a sub form called person that happens to contain an element named person, etc.... I am not trying to add an element and sub form with the same name to the same form.</p>

<p>The bug is related to validation / value setting in the form, not related to getElement(). The issue is that the array notation "parser" violates the scope I expect, it sees $_POST['address']['address'] which I expect to do the equiavelent of $form-&gt;getSubForm( 'address' )-&gt;getElement( 'address' ). Instead I'm pretty sure its trying to grab  $_POST['address']['address'] and set it to the sub form, so the sub form is getting a string instead of an array. I would expect the sub-form to only "see"  $_POST['address'], so it can access  $_POST['address']['city'], etc...</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Josh Ribakoff (jshpro2) on 2009-09-06T23:41:45.000+0000</p> 
        <div class="body">
            <p>video with narration showing bug reproduced in debugger</p>

<p><a href="http://vehiclefits.com/formbug.wmv">http://vehiclefits.com/formbug.wmv</a></p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Josh Ribakoff (jshpro2) on 2009-09-07T06:02:41.000+0000</p> 
        <div class="body">
            <p>Changing ( commenting out? ) the following 3 lines in the dissolveArrayValue method would fix it.</p>

<p>if (isset($value[$arrayPath])) {
            $value = $value[$arrayPath];
        }</p>

<p>The problem is the PARENT form "A"  grabs the correct array when it does:
$form-&gt;isValid($data[$key])</p>

<p>Then when the subform form 'B' ( added to form A with the subform name 'address' ) receives the resultant array it redundantly "dissolves" it</p>

        </div>
    </div>
    </div>

