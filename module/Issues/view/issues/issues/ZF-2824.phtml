<h2>ZF-2824: There is a serious need to change how Zend_Form handles populating multioption elements when creating form from config</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2008-03-07T08:50:34.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-06-28T14:28:40.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.5.1 (25/Mar/08)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Marcin Lulek (ergo14)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Matthew Weier O'Phinney (matthew)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Form</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>In current implementation when creating lets say SELECT element, we need to pass the options as  'val'=&gt;'text', with that approache  we face a problem when we want to assign integer value to option. 
With current zend_config we would need to have in  XML something like &lt;1&gt;type11&gt;, this is illegal in xml - so we cant assign integer values to options, and i think that is the most common use case for select elements ( database normalization for inserting values etc. ).</p>

<p>I would suggest we have something that could accept a format like</p>

<pre class="highlight"><code> 
array(1) {
  ["multiOptions"]=&gt;
  array(3) {
    [0]=&gt;
    array(2) {
      ["val"]=&gt;
      string(1) "1"
      ["key"]=&gt;
      string(2) "aa"
    }
    [1]=&gt;
    array(2) {
      ["key"]=&gt;
      string(1) "2"
      ["val"]=&gt;
      string(4) "xxxx"
    }
    [2]=&gt;
    array(2) {
      ["val"]=&gt;
      string(3) "444"
      ["key"]=&gt;
      string(4) "ssss"
    }
  }
}
</code></pre>

<p>That way we can store our configuration in XML and generate options with text values as well.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2008-03-21T13:34:23.000+0000</p> 
        <div class="body">
            <p>Resolved in trunk and release-1.5 branch. You can now specify formats like the
following in your config files:</p>

<ul><li>INI</li>
</ul><pre class="highlight"><code>
[testing]
options.first.key = "aa"
options.first.value = 1
options.second.value = "xxxx"
options.second.key = 2
options.third.key = "ssss"
options.third.value = 444
</code></pre>

<ul><li>XML</li>
</ul><pre class="highlight"><code>
&lt;?xml version="1.0"?&gt;
aa1xxxx2ssss444</code></pre>

<ul><li>PHP:</li>
</ul><pre class="highlight"><code>
$options = array(
    array(
        'value' =&gt; '1',
        'key'   =&gt; 'aa',
    ),
    array (
        'key'   =&gt; '2',
        'value' =&gt; 'xxxx',
    ),
    array (
        'value' =&gt; '444',
        'key'   =&gt; 'ssss',
    ),
);
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by George Cooksey (ssbg) on 2009-06-28T14:28:39.000+0000</p> 
        <div class="body">
            <p>I would suggest reopening this issue for the following reason:  Short-hand xml configuration does not work.</p>

<pre class="highlight"><code>1Male</code></pre>

<p>Generates this (formatted for readability):</p>

<pre class="highlight"><code>
    
    Male


    
    Female
</code></pre>

        </div>
    </div>
    </div>

