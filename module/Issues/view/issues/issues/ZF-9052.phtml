<h2>ZF-9052: Easier extension to Zend_Form plugin loader prefix paths</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2010-02-01T22:57:24.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-08-01T10:44:33.000+0000</dd>

    <dt>Status:</dt>
    <dd>Closed</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Frank Br√ºckner (frosch)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Form</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>I tend to create my own extensions of Zend_Form which specify among other things custom plugin loader prefix paths.</p>

<p>To facilitate this, I propose the following changes</p>

<pre class="highlight"><code>
/**
 * Default plugin loader prefix path config
 * 
 * @var array
 */
protected $_defaultPluginLoaderPrefixPaths = array(
    self::DECORATOR =&gt; array(
        'Zend_Form_Decorator_' =&gt; 'Zend/Form/Decorator/'
    ),
    self::ELEMENT   =&gt; array(
        'Zend_Form_Element_' =&gt; 'Zend/Form/Element/'
    )
);

public function getPluginLoader($type = null)
{
    $type = strtoupper($type);
    if (!isset($this-&gt;_loaders[$type])) {
        if (!in_array($type, array_keys($this-&gt;_defaultPluginLoaderPrefixPaths))) {
            throw new Zend_Form_Exception(sprintf('Invalid type "%s" provided to getPluginLoader()', $type));
        }

        $this-&gt;_loaders[$type] = new Zend_Loader_PluginLoader($this-&gt;_defaultPluginLoaderPrefixPaths[$type]);
    }

    return $this-&gt;_loaders[$type];
}
</code></pre>

<p>This way, extensions to Zend_Form can easily add their own prefix paths to the plugin loader, eg</p>

<pre class="highlight"><code>
// My/Form.php
class My_Form extends Zend_Form
{
    protected $_defaultPluginLoaderPrefixPaths = array(
        self::DECORATOR =&gt; array(
            'Zend_Form_Decorator_' =&gt; 'Zend/Form/Decorator/',
            'My_Form_Decorator_'   =&gt; 'My/Form/Decorator/'
        ),
        self::ELEMENT   =&gt; array(
            'Zend_Form_Element_' =&gt; 'Zend/Form/Element/',
            'My_Form_Element_'   =&gt; 'My/Form/Element/'
        )
    );
}
</code></pre>

<p>This way, the prefix paths are ready to use prior to Zend_Form::init().</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Christian Albrecht (alab) on 2010-03-14T09:55:17.000+0000</p> 
        <div class="body">
            <p>You can do this already, sort of, passing</p>

<pre class="highlight"><code>
new Zend_Form( array(
    'prefixPath' =&gt; array(
        array(
            'type'   =&gt; Zend_Form::DECORATOR,
            'prefix' =&gt; 'My_Form_Decorator_',
            'path'   =&gt; 'My/Form/Decorator/'
        ),
        array(
            'type'   =&gt; Zend_Form::ELEMENT,
            'prefix' =&gt; 'My_Form_Element_',
            'path'   =&gt; 'My/Form/Element/'
        )
    )
);
</code></pre>

<p>Or setting $options['prefixPath'] within overwritten __construct() method before calling parent::construct($options);</p>

        </div>
    </div>
    </div>

