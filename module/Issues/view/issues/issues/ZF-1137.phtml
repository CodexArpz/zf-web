<h2>ZF-1137: Zend_Db (PDO_MYSQL) Exception does not contain &quot;code&quot;</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2007-03-26T08:13:26.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2007-07-05T14:43:59.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>0.9.2 (06/Apr/07)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Bill Karwin (bkarwin)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Db</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>We are distributing DB changes with SQL files which we loaded at the first request when someone logs into the application.</p>

<p>In order to catch the exception ("SQLSTATE[42S21]: Column already exists: 1060 Duplicate column name 'foo"), I checked with $e-&gt;getCode() inside the catch blog. Until the release of 0.9.1 this was working. With 0.9.1 getCode() returns 0 (int).</p>

<pre class="highlight"><code>
    try
    {
        $sql = "ALTER %s.TABLE AND SO ON...";
        $sql = sprintf($sql, $f-&gt;filter($session-&gt;db));
        $db-&gt;query($sql);
    }
    catch(Exception $e)
    {
        //Zend_Debug::dump(get_class_methods($e));
        //Zend_Debug::dump($e-&gt;getCode());
        if ($e-&gt;getCode() != '42S21')
        {
            throw $e;  
        }
    }
</code></pre>

<p>(I know, I should have probably used the constant instead of matching '42S21', but it doesn't work anyway - anymore.)</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-03-26T08:57:31.000+0000</p> 
        <div class="body">
            <p>Fixed in revision 4236.</p>

<p>The resolution of ZF-1031 made PDO drivers return a Zend_Db_Adapter_Exception instead of a PDOException.  The former includes a reference to the latter, accessible through getChainedException().</p>

<p>The fix for this issue makes Zend_Db_Adapter_Exception set its own code to that of the chained Exception, if one has been passed.</p>

<p>You can use the following workaround immediately:</p>

<pre class="highlight"><code>
catch (Zend_Db_Adapter_Exception $e) {
    if ($e-&gt;getChainedException()-&gt;getCode() ...) {
        ...
    }
}
</code></pre>

<p>Or you can update to revision 4236 and you won't have to change your code.</p>

        </div>
    </div>
    </div>

