<h2>ZF-1235: Zend_Filter_StripTags needs support to allow html comments</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2007-04-10T08:22:19.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2007-07-05T14:44:04.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.0.0 RC3 (23/Jun/07)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Till Klampaeckel (till)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Darby Felton (darby)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Filter</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Zend_Filter_StripTags needs support to allow html comments. Currently, the whitelist only accepts tags.</p>

<p>Inside the following string, the comments should be honoured:</p>

<pre class="highlight"><code>
'Hello world '
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by John Baldock (falesh) on 2007-04-10T15:27:28.000+0000</p> 
        <div class="body">
            <p>I have an idea about how this could be done. First swap all comments in the value with a unique identifier for each comment. Then process the value as normal. Finally swap the unique identifiers back with the comments stored at the start. Following is the two code blocks needed, the first at the start, the second at the end:</p>

<pre class="highlight"><code>
if ($keepComments === true) {
    // find comments
    preg_match_all('/&lt;\!--.*?--&gt;/ms' , (string) $value, $matches);
    // remove duplicate comments from the array
    $comments = array_unique($matches[0]);
    // replace each comment with a unique identifier
    foreach ($comments as $k =&gt; $v) {
        $value = str_replace($v, "ZFST$k", $value);
    }
}


if ($keepComments === true) {
    // replace the comment identifiers with their associated comment
    foreach ($comments as $k =&gt; $v) {
        $dataFiltered = str_replace("ZFST$k", $v, $dataFiltered);
    }
}
</code></pre>

<p>This is the full methods code:</p>

<pre class="highlight"><code>
public function filter($value, $keepComments = false)
{
    if ($keepComments === true) {
        // find comments
        preg_match_all('/&lt;\!--.*?--&gt;/ms' , (string) $value, $matches);
        // remove duplicate comments from the array
        $comments = array_unique($matches[0]);
        // replace each comment with a unique identifier
        foreach ($comments as $k =&gt; $v) {
            $value = str_replace($v, "ZFST$k", $value);
        }
    }
    
    // Initialize accumulator for filtered data
    $dataFiltered = '';        
    // Parse the input data iteratively as regular pre-tag text followed by a
    // tag; either may be empty strings
    preg_match_all('/([^&lt;]*)(&lt;?[^&gt;]*&gt;?)/s', (string) $value, $matches);
    // Iterate over each set of matches
    foreach ($matches[1] as $index =&gt; $preTag) {
        // If the pre-tag text is non-empty, strip any "&gt;" characters from it
        if (strlen($preTag)) {
            $preTag = str_replace('&gt;', '', $preTag);
        }
        // If a tag exists in this match, then filter the tag
        $tag = $matches[2][$index];
        if (strlen($tag)) {
            $tagFiltered = $this-&gt;_filterTag($tag);
        } else {
            $tagFiltered = '';
        }
        // Add the filtered pre-tag text and filtered tag to the data buffer
        $dataFiltered .= $preTag . $tagFiltered;
    }
    
    if ($keepComments === true) {
        // replace the comment identifiers with their associated comment
        foreach ($comments as $k =&gt; $v) {
            $dataFiltered = str_replace("ZFST$k", $v, $dataFiltered);
        }
    }
    
    // Return the filtered data
    return $dataFiltered;
}
</code></pre>

<p>I tested the above with the following string:</p>

<pre class="highlight"><code> 
<br /> test </code></pre><p><code> text </code></p><code> with  and 
</code>

<p>The output was:</p>

<pre class="highlight"><code> 
 test  text  with  and 
</code></pre>

<p>The one issue I can see with this is if the value includes an identifier equal to that used to associate with the comments (ZFST + array key in the above example).</p>

<p>Hope this helps,
John Baldock</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Till Klampaeckel (till) on 2007-04-10T15:52:57.000+0000</p> 
        <div class="body">
            <p>Hey John,</p>

<p>I am doing pretty much the same - maybe a bit more straight forward towards my issue, yet I thought this should be added to the filter class (well not my cheap workaround, of course).</p>

<p>The string in question contains {{}} in my case since this is part of a wordpress-style function to allow people to add a "teaser" for their blog's homepage and "extended blog entry" when people click, "read more" into the same text field.</p>

<p>Anyway...</p>

<pre class="highlight"><code>
$str = 'jksajsa sajsaj sakjsaksa jsa salksa j saksjakjsa js lkjsalk jsa whatever';
$str = str_replace('', '__ZF_IGNORE__', $str);
// do filter stuff
$str = str_replace('__ZF_IGNORE__', '', $str);
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Darby Felton (darby) on 2007-04-11T11:44:33.000+0000</p> 
        <div class="body">
            <p>Minor updates to summary and description.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Darby Felton (darby) on 2007-06-22T14:25:31.000+0000</p> 
        <div class="body">
            <p>Resolved with <a href="http://framework.zend.com/fisheye/changelog/Zend_Framework/?cs=5417">SVN r5417</a>. Documentation update to follow.</p>

        </div>
    </div>
    </div>

