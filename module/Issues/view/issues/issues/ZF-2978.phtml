<h2>ZF-2978: Zend_XmlRpc_Client returning system.methodSignature in methodName</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2008-03-26T19:09:57.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2008-07-23T05:53:58.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.5.3 (28/Jul/08)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Robert Castley (rcastley)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Matthew Weier O'Phinney (matthew)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_XmlRpc_Client</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Hi,</p>

<p>I have just upgraded from 1.5 to 1.5.1 and now my XML-RPC client calls no longer work.  My tracing show that system.methodSignature is being put in methodName.</p>

<p>The traces below reflect no change in my own code, only an upgrade to 1.5.1!</p>

<p>1.5 trace</p>

<pre class="highlight"><code>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
getVersionVPRabcdefg</code></pre>

<p>1.5.1 trace</p>

<pre class="highlight"><code>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
system.methodSignaturegetVersion</code></pre>

<p>As stated, all I have done is upgrade ZF to 1.5.1, nothing else has changed ... promise!</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2008-03-27T06:43:40.000+0000</p> 
        <div class="body">
            <p>Can you provide the minimum code to reproduce this issue? I've tried the following:</p>

<p>Server: has method 'foo.say' accepting a single string "$message".</p>

<p>Client code:</p>

<pre class="highlight"><code>
$conn   = new Zend_XmlRpc_Client('<a href="http://localhost/xml-rpc">http://localhost/xml-rpc</a>');
$client = $conn-&gt;getProxy();

try {
    $result = $client-&gt;foo-&gt;say('hello');
    echo $result, "\n\n";
} catch (Exception $e) {
    echo "An exception occurred: " . $e-&gt;getMessage() . "\n\n";
}
echo "Last Request: ", $conn-&gt;getLastRequest()-&gt;__toString();
</code></pre>

<p>Expected and Actual Result:</p>

<pre class="highlight"><code>
hello

Last Request: &lt;?xml version="1.0" encoding="UTF-8"?&gt;
foo.sayhello</code></pre>

<p>As you'll note, the request object clearly uses the 'foo.say' method as expected, and I get back a valid response. If you could provide some basic code showing how you reproduce the issue, I may be able to help you out better; right now, I can't identify any issues.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Robert Castley (rcastley) on 2008-03-27T07:28:48.000+0000</p> 
        <div class="body">
            <p>Sure,</p>

<p>I have my own XML-RPC client class that has all my calls in e.g.</p>

<pre class="highlight"><code>
    public function xselect($p1, $p2)
    {
        $methodType = 'foo.xselect';
        $params = array($p1, $p2);
        return $this-&gt;xmlRpcRequest($methodType, $params);
    }

    /**
     * Main XmlRpc call
     *
     * @param string $methodType
     * @param array $params
     * @return array
     * @throws Zend_Exception if call fails
     */
    public function xmlRpcRequest($methodType, $params)
    {
        if (isset($this-&gt;_host)) {
            $host = $this-&gt;_host;
        } 

        if (isset($this-&gt;_port)) {
            $port = $this-&gt;_port;
        }

        $client = new Zend_XmlRpc_Client('http://' . $host. ':' . $port);

        try {
            return $client-&gt;call($methodType, $params);
        } catch (Zend_Exception $e) {
            Zend_Registry::get('logger')-&gt;err($e-&gt;getMessage());
            return array('Error' =&gt; $e-&gt;getCode(), 'Message' =&gt; $e-&gt;getMessage());
        }
</code></pre>

<p>I then use the above in code like so:</p>

<pre class="highlight"><code>
$client = new My_XmlRpc();

$host = $params-&gt;getParam('host');
$port = $params-&gt;getParam('port');

$client-&gt;_host = $host;
$client-&gt;_port = $port;
$result = $client-&gt;xselect('A', 'B');
</code></pre>

<p>The above works just fine with 1.5.0, but not with 1.5.1.  Have I missed some changes in the way the client is used?</p>

<p>Cheers!</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2008-03-27T07:55:18.000+0000</p> 
        <div class="body">
            <p>I've now tried the following code, which uses Zend_XmlRpc_Client::call(), as per your example:</p>

<pre class="highlight"><code>
$conn   = new Zend_XmlRpc_Client('<a href="http://framework/xml-rpc">http://framework/xml-rpc</a>');

try {
    $result = $conn-&gt;call('foo.say', array('hello'));
    echo $result, "\n\n";
} catch (Exception $e) {
    echo "An exception occurred: " . $e-&gt;getMessage() . "\n\n";
}
echo "Last Request: ", $conn-&gt;getLastRequest()-&gt;__toString();
</code></pre>

<p>Again, I get the same expected and actual results as previously posted.</p>

<p>system.methodSignature <em>does</em> get called during the course of the XML-RPC client setup, as we do server introspection to ensure that the parameters you pass to the method match those specified in the server method signature -- but this has been true since before 1.0.0.</p>

<p>1.5.1 <em>did</em> feature a number of bug-fixes to the XmlRpc component, but all changes were bugfixes and introduced no BC changes (which was verified by the fact that the test suite continued to pass all previous tests).</p>

<p>Can you please attempt to run the client using a straight XmlRpc client, no proxying via a custom object, to make sure it's not an issue with your wrapper class?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Robert Castley (rcastley) on 2008-03-27T09:13:29.000+0000</p> 
        <div class="body">
            <p>Hi Matthew,</p>

<p>OK, I did as you said and stripped it right back and I get the same results.  It should be noted that the XML-RPC server I talk to is a windows service written in C using the Epinions API (<a href="http://xmlrpc-epi.sourceforge.net/main.php?t=summary">http://xmlrpc-epi.sourceforge.net/main.php/â€¦</a>).  This hasn't changed and works with requests coming from 1.5.0.</p>

<p>My code now looks like:</p>

<pre class="highlight"><code>
        $conn  = new Zend_XmlRpc_Client('<a href="http://localhost:8082">http://localhost:8082</a>');

        try {
            $result = $conn-&gt;call('OMAccs.ListReports');
            echo $result, "\n\n";
        } catch (Zend_XmlRpc_Exception $e) {
            echo $e-&gt;getMessage() . "\n\n";
        }
        echo $conn-&gt;getLastRequest()-&gt;__toString();
</code></pre>

<p>The response is:</p>

<pre class="highlight"><code>

Invalid response // Response from XML-RPC service

&lt;?xml version="1.0" encoding="UTF-8"?&gt;
system.methodSignatureOMAccs.ListReports</code></pre>

<p>Comparing Zend_XmlRpc_Cient in 1.5.0 and 1.5.1 there is a new chunk of code in the 'call' function (lines 254-278), if I comment this code out I get a working client again and my response using the above call is:</p>

<pre class="highlight"><code>
C:\ColumbusOM\ZoneServer\queue\accounting\templates\devices.xml  // XML-RPC server response

&lt;?xml version="1.0" encoding="UTF-8"?&gt;
OMAccs.ListReports</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Robert Castley (rcastley) on 2008-03-27T09:36:22.000+0000</p> 
        <div class="body">
            <p>Hi Matthew,</p>

<p>OK, I have taken this a step further and found a public XML-RPC server over at <a href="http://scripts.incutio.com">http://scripts.incutio.com</a> (Simon Willison)</p>

<pre class="highlight"><code>
        $conn  = new Zend_XmlRpc_Client('<a href="http://scripts.incutio.com/xmlrpc/simpleserver.php">http://scripts.incutio.com/xmlrpc/simpleserver.php</a>');

        try {
            $result = $conn-&gt;call('test.getTime');
            echo $result, "\n\n";
        } catch (Zend_XmlRpc_Exception $e) {
            echo $e-&gt;getMessage() . "\n\n";
        }
        echo $conn-&gt;getLastRequest()-&gt;__toString();
</code></pre>

<p>Using 1.5.1 this server has the same problem with the above client request:</p>

<pre class="highlight"><code>
server error. requested method system.methodSignature does not exist.

&lt;?xml version="1.0" encoding="UTF-8"?&gt;
system.methodSignaturetest.getTime</code></pre>

<p>If I comment out lines 254-278 in Zend_XmlRpc_Client it works!</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2008-03-27T09:51:25.000+0000</p> 
        <div class="body">
            <p>Hmm... This is not good. The code added in call() was to make sure that empty arrays are sent as the appropriate XML-RPC type as specified by the server; in PHP, you can't tell if an empty array is associative or indexed, so we need to check against the signatures on the server.</p>

<p>The check is done using system.methodSignature(); well-formed XML-RPC servers should implement the various system.* methods to allow introspection such as this.</p>

<p>However, when they don't Zend_XmlRpc_Client should do the right thing. I think we have two options:</p>

<h1>add a flag to Zend_XmlRpc_Client such as 'disableStrictSignatures' that would bypass this check</h1>

<h1>do some error handling in Zend_XmlRpc_Client_ServerIntrospection that would turn such a flag on by default if unable to call the method</h1>

<p>I'll work on these for the 1.5.2 release. In the meantime, you can create an extension of the Zend_XmlRpc_Client class that overrides call() as follows:</p>

<pre class="highlight"><code>
class My_XmlRpc_Client extends Zend_XmlRpc_Client
{
    public function call($method, $params = array())
    {
        $request = new Zend_XmlRpc_Request($method, $params);

        $this-&gt;doRequest($request);

        if ($this-&gt;_lastResponse-&gt;isFault()) {
            $fault = $this-&gt;_lastResponse-&gt;getFault();
            throw new Zend_XmlRpc_Client_FaultException($fault-&gt;getMessage(),
                                                        $fault-&gt;getCode());
        }

        return $this-&gt;_lastResponse-&gt;getReturnValue();
    }
}
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2008-04-25T11:00:42.000+0000</p> 
        <div class="body">
            <p>I have committed code in r9307 that seems to fix the issue; in call(), I wrap the call to the introspector in a try/catch block, and, if it fails, do not attempt to explicitly cast array/struct params. This will, of course, mean that ZF-2090 will still appear to be broken for any server that does not implement system.* methods. However, I think that's a reasonable tradeoff.</p>

<p>Please test (I tested with the incutio example in an above comment), and let me know if this is ready to commit to the release branch.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Oren Sol (stanzapub) on 2008-05-15T04:10:20.000+0000</p> 
        <div class="body">
            <p>I also experienced this issue with XmlRpc requests to Wordpress that broke when upgrading to 1.5.1.</p>

<p>The changes in r9307 seem to solve the problem.</p>

<p>Just a side note, if using Matthew's suggestion to extend the class for yourself for now, make sure to use $this-&gt;getLastResponse() and not $this-&gt;_lastResponse.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Robert Castley (rcastley) on 2008-05-16T14:13:45.000+0000</p> 
        <div class="body">
            <p>Hi,</p>

<p>Will the fix for this make 1.5.3 or above?</p>

<p>It is interesting that Oren suffered the same fate as Wordpress uses the Incutio XML-RPC library!</p>

<p>Cheers,</p>

<ul><li>Robert</li>
</ul>
        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Darien Hager (hagerd) on 2008-06-19T12:02:10.000+0000</p> 
        <div class="body">
            <p>I just tracked down an obscure bug I was having to this issue, and lo-and-behold there's already a ticket for it :)</p>

<p>So r9307 looks exactly like what the doctor ordered, and it fixes my problems.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Till Klampaeckel (till) on 2008-06-20T08:27:18.000+0000</p> 
        <div class="body">
            <p>Hey Matthew!</p>

<p>I am using Zend_XmlRpc_Server and Zend_XmlRpc_Client of the 1.5.2 release.</p>

<p>Now I am running into this issue as well - and don't ask me why, but the client "dies" when it attempts to guess the parameters required by the call. I figured this out because all of the sudden I have "system.methodSignature" in my request and after the request is issued, I just get "failed to parse" response.</p>

<p>And I was wondering why it never reached the actual class attached to the server. ;-)</p>

<p>I know you like debugging via a log, but there is absolutely nothing in my logs (parse errors or anything) and it would be nice if you added an optional debug that just outputs code on the screen or maybe a way to specify another logger to log what exactly is send out and received during a "single" call.</p>

<p>I also vote that I can turn off strict checks, I don't see a real benefit in this except for development. In a live environment every XMLRPC call equals two. I don't see why this should be done.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2008-07-23T05:53:57.000+0000</p> 
        <div class="body">
            <p>Added 'setSkipSystemLookup()' method to client, which disables system.methodSignature calls. Flag is false by default, enabling the check.</p>

<p>Changes are checked in to trunk and 1.5 and 1.6 release branches.</p>

        </div>
    </div>
    </div>

