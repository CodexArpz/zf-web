<h2>ZF-313: TTFBox or TextWidth/Height function (word wrapping functionality)</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>New Feature</dd>

    <dt>Created:</dt>
    <dd>2006-08-09T11:08:52.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-11-20T21:38:15.000+0000</dd>

    <dt>Status:</dt>
    <dd>Open</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
        None
                    </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Pdf</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-1993">ZF-1993</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Problem: 
When using the drawText function to write a string that is longer than the page, there is no WordWrap.
Is there a way to print text wrapped or to find out the width and height of the string that is about to be printed?</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Willie Alberty (willie) on 2006-08-09T18:32:48.000+0000</p> 
        <div class="body">
            <p>I am working on some advanced layout classes that will take care of wrapping long lines for you. This code won't be ready for several more weeks. In the meantime, you may be able to use this function:</p>

<pre class="highlight"><code>
/**
* Returns the total width in points of the string using the specified font and
* size.
*
* This is not the most efficient way to perform this calculation. I'm 
* concentrating optimization efforts on the upcoming layout manager class.
* Similar calculations exist inside the layout manager class, but widths are
* generally calculated only after determining line fragments.
*
* @param string $string
* @param Zend_Pdf_Resource_Font $font
* @param float $fontSize Font size in points
* @return float
*/
function widthForStringUsingFontSize($string, $font, $fontSize)
{
    $drawingString = iconv('', 'UTF-16BE', $string);
    $characters = array();
    for ($i = 0; $i &lt; strlen($drawingString); $i++) {
        $characters[] = (ord($drawingString[$i++]) &lt;&lt; 8) | ord($drawingString[$i]);
    }
    $glyphs = $font-&gt;cmap-&gt;glyphNumbersForCharacters($characters);
    $widths = $font-&gt;widthsForGlyphs($glyphs);
    $stringWidth = (array_sum($widths) / $font-&gt;getUnitsPerEm()) * $fontSize;
    return $stringWidth;
}

$font = Zend_Pdf_FontFactory::fontWithName(Zend_Pdf_Const::FONT_HELVETICA);
$stringWidth = widthForStringUsingFontSize('Hello world!', $font, 12);
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Tobias Plaputta (toby) on 2006-08-10T05:17:09.000+0000</p> 
        <div class="body">
            <p>@Wille Alberty: Amazing, this is 100% what I have needed! Thank you very much!</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2006-11-13T15:09:46.000+0000</p> 
        <div class="body">
            <p>Changing fix version to unknown.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2006-11-13T15:26:52.000+0000</p> 
        <div class="body">
            <p>Changing fix version to 0.6.0.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Alexander Veremyev (alexander) on 2007-05-25T02:22:25.000+0000</p> 
        <div class="body">
            <p>Summary is changed to describe problem more clear.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Alexander Veremyev (alexander) on 2007-05-25T02:23:59.000+0000</p> 
        <div class="body">
            <p>Depends on other text formatting tasks (canvases, paragraphs and so on)</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Alexander Veremyev (alexander) on 2007-05-25T06:34:28.000+0000</p> 
        <div class="body">
            <p>Assignee is changed to postpone issue to post-v1.0 period</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Alexander Veremyev (alexander) on 2007-05-25T06:35:04.000+0000</p> 
        <div class="body">
            <p>Postponed to post-v1.0</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Alexandre Lemaire (saeven) on 2008-09-12T14:32:38.000+0000</p> 
        <div class="body">
            <p>This only partially alleviates the metrics required for word wrapping though. This may be neat, but the instance where it doesn't help, is where you have a long string, need to word-wrap it, but need to know at which width a line should be cut without cutting words.</p>

<p>PHP inherently offers us the wordwrap function, which allows us to cut a string into an array where lines don't exceed a certain width, taking word composition into consideration.  It's useless in this case though, since a 'max width' is very variable when font glyphs are of variable sizes.</p>

<p>Is there a function in Zend_PDF somewhat akin to the above, which allows us to determine a cut-strategy given:
- a font
- a font size
- a page width (or width-coordinate restriction)
- a (possibly multi-line) string of text?</p>

<p>Thanks.
Alex</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Remi ++ (remi) on 2008-11-05T22:58:10.000+0000</p> 
        <div class="body">
            <p>There is a new Zend_Font Component Proposal available for this:
<a href="http://framework.zend.com/wiki/display/ZFPROP/Zend_Font+-+Karol+Babioch">http://framework.zend.com/wiki/display/â€¦</a></p>

<p>I would love to see a little bit progress with Zend_Pdf.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Willie Alberty (willie) on 2008-12-04T22:34:53.000+0000</p> 
        <div class="body">
            <p>Unassigning Zend_Pdf issues currently assigned to me pending decision on ZF 2.0 release timeframe and potential contribution of comprehensive changeset.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-12-19T13:33:40.000+0000</p> 
        <div class="body">
            <p>Alex, could you please look at this issue and mark it 'postponed' if we won't be addressing it before 1.8. Note that it has several votes.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by James Gordon (cryptopia) on 2010-02-15T21:46:35.000+0000</p> 
        <div class="body">
            <p>A few minor comments that might save people some time:</p>

<ol><li>The following line:</li>
</ol><p>{{$glyphs = $font-&gt;cmap-&gt;glyphNumbersForCharacters($characters);}}</p>

<p>...needs to be changed to this in order to work with later versions of ZF (eg. 1.10.1):</p>

<p>{{$glyphs = $font-&gt;glyphNumbersForCharacters($characters);}}</p>

<ol><li>The following line to test the function:</li>
</ol><p>{{$font = Zend_Pdf_FontFactory::fontWithName(Zend_Pdf_Const::FONT_HELVETICA);}}</p>

<p>...needs to be changed to this in order to work with later versions of ZF (eg. 1.10.1):</p>

<p>{{$font = Zend_Pdf_Font::fontWithName(Zend_Pdf_Font::FONT_HELVETICA);}}</p>

<ol><li>The function won't work with extracted fonts, only standard fonts or fonts loaded from {{ttf}} files.</li>
</ol><p>Otherwise excellent function (I see it made its way into {{Zend_Barcode_Renderer_Pdf}}). Many thanks!</p>

<p>James.</p>

        </div>
    </div>
    </div>

