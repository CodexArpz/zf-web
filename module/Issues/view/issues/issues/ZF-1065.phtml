<h2>ZF-1065: New setOptions('date_format' =&gt; ...) created a conflict with using the default format for a locale.</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2007-03-16T11:53:03.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2007-07-05T14:43:56.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>0.9.2 (06/Apr/07)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Thomas Weidner (thomas)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Locale</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>-------- Original Message --------
Subject:    Re: [fw-i18n] setOptions() - format option, opinions wanted
Date:   Tue, 13 Mar 2007 23:25:05 +0100
From:   Thomas Weidner <a href="mailto:thomas.weidner@gmx.at">thomas.weidner@gmx.at</a>
To:     Gavin Vess <a href="mailto:gavin@zend.com">gavin@zend.com</a>, ZF I18n <a href="mailto:fw-i18n@lists.zend.com">fw-i18n@lists.zend.com</a></p>

<blockquote>
  <p>Yup, I purposely committed the code allowing the existing class-wide 
  default 'format' to be set, and promptly posted an example of the 
  related issue to the list.  This gives others a chance to participate in 
  design and API changes and easily test.  Usually we post these 
  discussions directly to Jira issues for the i18n components.</p>
  
  <p>From the feedback so far, it sounds like splitting 'format' into 
  'dateFormat' and 'numberFormat' is agreeable to all.</p>
</blockquote>

<p>This is already in work by me, additionally with other small tweaks.</p>

<blockquote>
  <p>Ok, so far I like Thomas' version of Option 2 best :) .. with one minor 
  tweak to the naming of the constants:</p>
  
  <h1>Use Case A</h1>
  
  <p>Zend_Locale_Format::setOptions(array('dateFormat' =&gt; 'YmD'));</p>
  
  <p>// use default date format specifier for locale "de"
  Zend_Locale_Format::getDate('2007-04-05', array('dateFormat' =&gt; 
  Zend_Locale_Format::LOCALE, 'locale' =&gt; 'de'));</p>
  
  <p>// use the class-wide default date format "YmD", but use "en" for 
  recognizing any day or month names in the input string:
  Zend_Locale_Format::getDate('2007-April-05', array('dateFormat' =&gt; 
  Zend_Locale_Format::DEFAULT, 'locale' =&gt; 'en'));</p>
  
  <p>// throws an error, since class-wide default 'dateFormat' of "YmD" makes 
  the following ambiguous:
  Zend_Locale_Format::getDate('2007-April-05', array('locale' =&gt; 'en');</p>
  
  <h1>Use Case B</h1>
  
  <p>Zend_Locale_Format::setOptions(array('locale' =&gt; 'de'));</p>
  
  <p>// use the default date format specifier for locale "de"
  Zend_Locale_Format::getDate('2007-04-05', array('dateFormat' =&gt; 
  Zend_Locale_Format::DEFAULT));</p>
  
  <p>// use the user-supplied date format specifier "YmD" with the locale 
  "de" to recognize any day or month names in the input string:
  Zend_Locale_Format::getDate('2007-Mai-05', array('dateFormat' =&gt; 'YmD'));</p>
</blockquote>

<p>This is what I have in mind and what I am actually working on :-)</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Gavin (gavin) on 2007-03-16T12:05:37.000+0000</p> 
        <div class="body">
            <p>With the new $options arrays, and the above, I think we can eliminate toNumberFormat() from the public API of this component by making the same functionality available through toNumber(), selectable using options in the $options array.  There is no documentation for toNumberFormat(), so I don't see a problem with this method becoming protected visibility.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2007-03-17T13:13:14.000+0000</p> 
        <div class="body">
            <p>I added a new constant Zend_Locale_Format::STANDARD which does what we wrote before...
I also added some unit tests.
Could u add some docu for this feature please ?? ;-)</p>

<p>Eliminating the "toNumberFormat" is not so easy.... I am working on it, but it will take some days to act as expected.
Protected visible is not possible bcause users actualy use toNumberFormat to give a self defined format... toNumber takes automatically the locale standard number format. I am changing this...</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2007-03-17T18:49:33.000+0000</p> 
        <div class="body">
            <p>Hard work... but I got it running ;-)</p>

<p>toNumberFormat has been integrated into toNumber.
I will write some Unit tests... docu by gavin ??</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Gavin (gavin) on 2007-03-17T22:17:27.000+0000</p> 
        <div class="body">
            <p>Thomas, post example use cases in code here, and I will work them into the docu :)</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Gavin (gavin) on 2007-03-17T22:49:29.000+0000</p> 
        <div class="body">
            <p>Hmmm.  I suggested simply making toNumberFormat "protected visibility" (i.e. calling toNumberFormat() from toNumber()), which would have been less difficult than a complete refactor/rewrite/merge of these two functions.  However, it looks like the merger is done already :)</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2007-03-18T04:16:24.000+0000</p> 
        <div class="body">
            <p>Rework had to be done by me:</p>

<p>toNumber format only accepted the standard number format of this locale.
But with toNumberFormat a user can give a self defined number format.</p>

<p>Now both cases are handled by toNumber.</p>

<p>We should make this clear in the docu...
Related useage can be seen by the unit tests which are actually here.</p>

<p>toNumber(array('number_format' =&gt; '#,#0.###'));
for example.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2007-03-18T05:37:51.000+0000</p> 
        <div class="body">
            <p>I just fixed the last problems with self defined number formats.
We have 100% code coverage and all actual unit tests pass.</p>

<p>Example:</p>

<pre class="highlight"><code>
Zend_Locale_Format::toNumber(-123456.1234, array('number_format' =&gt; '#0.00-'));
// self defined format -&gt; output: "123456.12-"

Zend_Locale_Format::toNumber(-1234.123, array('precision' =&gt; 2, 'locale' =&gt; 'de'));
// precision 2, standard number format -&gt; output "-1.234,12"
</code></pre>

<p>Many many others can be found in the unit test bed.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2007-03-18T10:40:52.000+0000</p> 
        <div class="body">
            <p>Assigned to gavin as only the docu is missing</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2007-03-25T17:03:22.000+0000</p> 
        <div class="body">
            <p>Added documentation for Zend_Locale_Format::STANDARD
and for self defined number formats.</p>

        </div>
    </div>
    </div>

