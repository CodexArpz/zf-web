<h2>ZF-8576: name of single element is not correct</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2009-12-18T02:13:51.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2010-04-16T12:35:56.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Christian Albrecht (alab)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Form</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
        <li><a href="/issues/secure/attachment/12525/ZF-8576.patch">ZF-8576.patch</a></li>
        </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>I have a subform with different elements in it and I tried t ogive one single element out but the name of it was noch correct.</p>

<p>I gave this in my ViewScript out:</p>

<p>$this-&gt;form-&gt;getSubForm("sub_form_foo")-&gt;getElement("foo");</p>

<p>So the name of the element was "foo" but normally it should be "sub_form_foo-foo". I think this is the correct name of it and not only "foo".</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Menno Luiten (mluiten) on 2009-12-18T04:33:26.000+0000</p> 
        <div class="body">
            <p>Is the problem that the output of the HTML render of the command above is faulty (that is, outputting an input with attribute name = "foo" instead of "sub_form_foo-foo")?</p>

<p>If you just use the above command and then call getName() on the element, you should indeed get 'foo' (the original name of the element), but calling getFullyQualifiedName() should return 'sub_form_foo-foo'. Could you check that, please?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Hans Müller (anno) on 2009-12-18T05:44:08.000+0000</p> 
        <div class="body">
            <p>Yes the first question of you describes the problem excactly.</p>

<p>I tested it with the method "getFullyQualifiedName()" and "getName()" but I only got "foo" as name back. No name like "sub_form_foo-foo" was given back.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Menno Luiten (mluiten) on 2009-12-18T06:04:40.000+0000</p> 
        <div class="body">
            <p>Can you post a code snippet where you attach the element to the subform? As far as I know, that's where the $_belongsTo member is set, which should impack the fully qualified name. 
Also, do you rename the subform anywhere?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Hans Müller (anno) on 2009-12-18T06:32:45.000+0000</p> 
        <div class="body">
            <p>I expanded the creation of subforms a little bit. So that you can test more thank one. But it should have an effect on it if you only create one or more because the name of a subform is every time a key value of an array.</p>

<pre class="literal">

class Form_FooBar extends Zend_Form {

protected function CreateForm() {

for($i=0; $i &lt; 2; $i++) {

   $sub_form = new Zend_Dojo_Form_SubForm();

$sub_form-&gt;addElement("TextBox",                                            "foo",                                          array("label" =&gt; "Foo",                                         "value" =&gt; "some_text"));

$this-&gt;addSubForm($sub_form, "sub_form_name_" . $i);

}

$this-&gt;addElement("SubmitButton",                                               "submit_search",                                                array("label" =&gt; "search"));
$this-&gt;getElement("submit_search")-&gt;removeDecorator("label");

}

</pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Hans Müller (anno) on 2009-12-18T06:35:08.000+0000</p> 
        <div class="body">
            <p>I'm sorry this is a better view for it:</p>

<pre class="literal">
class Form_FooBar extends Zend_Form {

protected function CreateForm() {

for($i=0; $i &lt; 2; $i++) {

   $sub_form = new Zend_Dojo_Form_SubForm();

$sub_form-&gt;addElement("TextBox",
                      "foo",
                      array("label" =&gt; "Foo",
                      "value" =&gt; "some_text"));

$this-&gt;addSubForm($sub_form, "sub_form_name_" . $i);

}

$this-&gt;addElement("SubmitButton",                                               
                  "submit_search",
                  array("label" =&gt; "search"));
$this-&gt;getElement("submit_search")-&gt;removeDecorator("label");

}
</pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Menno Luiten (mluiten) on 2009-12-18T07:03:11.000+0000</p> 
        <div class="body">
            <p>The $_belongsTo member is set on attachment of the element to the form, so in this case you create a subform without name, attach an element to it and only then give the subform a name. Maybe that is the problem.</p>

<p>Try something like this (not tested):</p>

<pre class="highlight"><code>
class Form_FooBar extends Zend_Form {

protected function CreateForm() {

for($i=0; $i &lt; 2; $i++) {

   $sub_form = $this-&gt;addSubForm(new Zend_Dojo_Form_SubForm(), "sub_form_name_".$i);

   $sub_form-&gt;addElement("TextBox",
                      "foo",
                      array("label" =&gt; "Foo",
                      "value" =&gt; "some_text"));

}

$this-&gt;addElement("SubmitButton",                                               
                  "submit_search",
                  array("label" =&gt; "search"));
$this-&gt;getElement("submit_search")-&gt;removeDecorator("label");

}
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Menno Luiten (mluiten) on 2009-12-20T10:29:32.000+0000</p> 
        <div class="body">
            <p>Looking into this a bit further, I think I found some strange patterns regarding names and belongsTo in subforms..</p>

<p>SubForm -&gt; addElement -&gt; Form.addSubForm/setName = does not add name as value for belongsTo
SubForm -&gt; Form.addSubForm/setName -&gt; addElement = adds name as value for belongsTo for element</p>

<p>All is moot when rendering the entire form using FormElements decorator, since that propagates the name of the form to the belongsTo of the elements, but when rendering a single element, the behavior could be considered inconsistent.</p>

<p>Either</p>

<h1>let setName set belongsTo on all elements already added if isArray = true</h1>

<h1>remove _setBelongsTo from addElement</h1>

<p>Depending on the kind of behavior that is wanted for rendering single elements.</p>

<p>Attached a patch to test this 'issue' and implementation of solution #1. Anyone care to comment?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Christian Albrecht (alab) on 2010-03-16T04:39:56.000+0000</p> 
        <div class="body">
            <p>Menno, i think your solution is correct.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Christian Albrecht (alab) on 2010-04-02T04:24:58.000+0000</p> 
        <div class="body">
            <p>On the other side, after delving into elementsBelongTo and isArray of Zend_Form,
it feels wrong to use setName to set belongsTo of childElements, proposed solution
for this problem:</p>

<pre class="highlight"><code>
...
$sub_form-&gt;setElementsBelongTo("sub_form_name_" . $i);
...
</code></pre>

<p>Please respond if this issue could be closed now.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Christian Albrecht (alab) on 2010-04-16T12:34:33.000+0000</p> 
        <div class="body">
            <p>Won't fix because this can be solved by rearranging the order
of attaching SubForms and Elements and Setting ElementsBelongTo
on the SubForm before attaching Elements to the SubForm.</p>

        </div>
    </div>
    </div>

