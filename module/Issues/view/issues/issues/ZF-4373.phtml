<h2>ZF-4373: Zend_View_Helper_Action uses incorrect view script path for cross-module requests</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2008-09-24T19:36:27.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2008-11-07T20:54:46.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Matthew Weier O'Phinney (matthew)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_View</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Here's my basic setup...</p>

<p>I have 3 modules (default and two others) all stored under "application/modules", each containing a "controllers" and "views" directory.
The default module stores the layout (under application/modules/default/views/layouts/default.phtml) and is initialised via</p>

<p>Zend_Layout::startMvc(array(
    'layoutPath' =&gt; $root.'/application/modules/default/views/layouts',
    'layout'     =&gt; 'default'
));</p>

<p>The layout script contains a call to Zend_View_Helper_Action to render the output from a controller in the default module (a simple FlashMessenger controller - application/modules/default/controllers/MessagesController.php with view script at application/modules/default/views/scripts/messages/index.phtml)</p>

&lt;?php echo $this-&gt;action('index', 'messages', 'default') ?&gt;

<p>however when attempting to access a non-default module, I receive this error</p>

<p>Zend_View_Exception: script 'messages/index.phtml' not found in path...</p>

<p>The paths listed are application/modules/default/views/layouts/ and application/modules//views/scripts/</p>

<p>I would have thought the Zend_View_Helper_Action would be able to render the requested controller action in any module, provided the module name is supplied to Zend_View_Helper_Action::action() as I have done.</p>

<hr /><p>Edit: Further on this</p>

<p>As a test, I moved the MessagesController (and view scripts) into one of the modules and called Zend_View_Helper_Action::action() with that module name and it worked as expected. So the issue appears to be that the default view script path is not being added to the view when a default controller action is requested via the helper.</p>

<p>In case it matters, here is my controller directory setup</p>

<p>$front-&gt;setControllerDirectory(array(
                'default' =&gt; $root.'/application/modules/default/controllers',
                'moda'  =&gt; $root.'/application/modules/moda/controllers',
                'modb'  =&gt; $root.'/application/modules/modb/controllers'
            ));</p>

<hr /><p>Edit 2:</p>

<p>It appears the problem is having the layouts folder under the views folder (application/modules/default/views/layouts). If I move the layouts folder out of the views folder, it works as expected.</p>

<p>I can't find the source of this yet but I'm guessing the "default/views/scripts" folder is not being added to the view as the "default/views" folder is already in the stack (but not the "scripts" folder)</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2008-09-25T06:29:16.000+0000</p> 
        <div class="body">
            <p>Assigning to Ralph.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2008-11-07T20:54:34.000+0000</p> 
        <div class="body">
            <p>In order for render() to find a view script, the view script must be on the viewScriptPath. viewScriptPaths are added each time you enter a controller by the ViewRenderer, but must be manually added to the stack otherwise. This is to ensure two things:
* To ensure the current module's view script path will be searched first
* To prevent naming collisions between modules (which may share the same controller and/or view script names)
The partial() view helper allows you to specify a module name from which to render the view script. It accomplishes this by cloning the view object so that it can temporarily add the view script path to it. action() will utilize the new module's view script path due to the fact that the ViewRenderer will be invoked upon dispatching the requested action. However, there is no general cross module support in order to ensure the two bullet points above. If you need this, simply manually add all view script paths for each module during bootstrapping.</p>

        </div>
    </div>
    </div>

