<h2>ZF-3709: Inconsistent behaviour in Zend_Db_Table and supporting classes</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2008-07-21T19:01:23.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2010-02-19T13:14:41.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.10.2 (24/Feb/10)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Metagamer (metagaming)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Ralph Schindler (ralph)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Db_Table</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-6232">ZF-6232</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>I stumbled across this inconsistency while following some of the examples of the framework documentation about Zend_Db_Table relationships</p>

<p>Sample tables:</p>

<pre class="highlight"><code>
CREATE TABLE owners (
  id int(10) unsigned NOT NULL auto_increment PRIMARY_KEY,
  name varchar(64) NOT NULL,
);

CREATE TABLE cars (
  id int(10) unsigned NOT NULL auto_increment PRIMARY_KEY,
  model varchar(64) NOT NULL,
);

CREATE TABLE owner_car (
  owner_id int(10) unsigned NOT NULL,
  car_id int(10) unsigned NOT NULL,
  mileage int(10) unsigned NOT NULL,
);
</code></pre>

<p>Then the referenceMap for owner_car:</p>

<pre class="highlight"><code>
    protected $_referenceMap = array(
            'Owner' =&gt; array(
                    'columns'       =&gt; array('owner_id'),
                    'refTableClass' =&gt; 'owners',
                    'refColumns'    =&gt; array('id'),
            ),
            'Car' =&gt; array(
                    'columns'       =&gt; array('car_id'),
                    'refTableClass' =&gt; 'cars',
                    'refColumns'    =&gt; array('id'),
            )
    );
</code></pre>

<p>Then when you use the findManyToManyRowset() from a Zend_Db_Table_Row object:</p>

<pre class="highlight"><code>
$ownerTable = new owners();
$ownerRecord = $ownerTable-&gt;fetchRow('id = 1');

$manyToManyRecords = $ownerRecord-&gt;findManyToManyRowset('cars', 'owner_car');
</code></pre>

<p>The resulting rows in the rowset contain the following columns:</p>

<p>owner_id,
car_id,
mileage,
id,
model,</p>

<p>the readOnly value of the row object will be false and the tableClass will be set to cars
any subsequent save() will fail with an exception since not all returned columns are present in the cars table.</p>

<p>A variety of solutions are possible depending on the intended use cases but it does need some attention</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Michael Rehbein (tech13) on 2009-11-24T11:21:34.000+0000</p> 
        <div class="body">
            <p>Wouldn't</p>

<pre class="highlight"><code>
        $select-&gt;from(array('i' =&gt; $interName), array(), $interSchema)
               -&gt;joinInner(array('m' =&gt; $matchName), $joinCond, Zend_Db_Select::SQL_WILDCARD, $matchSchema)
               -&gt;setIntegrityCheck(false);
</code></pre>

<p>in place of</p>

<pre class="highlight"><code>
        $select-&gt;from(array('i' =&gt; $interName), Zend_Db_Select::SQL_WILDCARD, $interSchema)
               -&gt;joinInner(array('m' =&gt; $matchName), $joinCond, Zend_Db_Select::SQL_WILDCARD, $matchSchema)
               -&gt;setIntegrityCheck(false);
</code></pre>

<p>work, so that the join table's columns are ignored.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ralph Schindler (ralph) on 2010-02-19T13:14:41.000+0000</p> 
        <div class="body">
            <p>Fixed in trunk 21100 and in release branch 1.10 in 21102</p>

        </div>
    </div>
    </div>

