<h2>ZF-9757: inconsistent handling of varbinary types in sqlsrv_XX functions</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2010-04-28T01:34:14.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-11-20T21:37:38.000+0000</dd>

    <dt>Status:</dt>
    <dd>Open</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
        None
                    </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Db</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Fetching a row with fields of the VARBINARY() type the result is returned as string when retrieved via sqlsrv_fetch_array but returned as stream resource when retrieved via sqlsrv_fetch and sqlsrv_get_field.</p>

<p>Quick workaround is to test the column metadata when using sqlsrv_get_field and to explicitly request a string return type for VARBINARY columns. The type shows as -3 and can't be compared to the SQLSRV_SQLTYPE_VARBINARY as there is a signed/unsigned difference.</p>

<p>Best solution would be to enable a custom type mapping that is enforced on all fetch types.
sqlsrv only supports the forcing of DATETIME types to string instead of date.</p>

<p>--- Sqlsrv.php-1.10.3   Wed Apr 28 10:23:46 2010
+++ Sqlsrv.php-1.10.3-improved  Wed Apr 28 10:25:59 2010
@@ -301,7 +301,14 @@
             return false;
         }</p>

<ul><li>// Convert varbinary to php string</li>
<li>$metaData = $this-&gt;getColumnMeta($col);</li>
<li>if ((($metaData['Type'] ^ SQLSRV_SQLTYPE_VARBINARY('max')) &amp; 0x7ffffff ) == 0) {</li>
<li>$data = sqlsrv_get_field($this-&gt;_stmt, $col,SQLSRV_PHPTYPE_STRING( SQLSRV_ENC_BINARY)); //0-based</li>
<li>} else {
     $data = sqlsrv_get_field($this-&gt;_stmt, $col); //0-based</li>
<li>}</li>
<li>
     if ($data === false) {
         require_once 'Zend/Db/Statement/Sqlsrv/Exception.php';
         throw new Zend_Db_Statement_Sqlsrv_Exception(sqlsrv_errors());</li>
</ul>
    </div>
</div>

<div class="comments">
    <h3>Comments</h3>
    <p class="comments">No comments to display</p>
    
</div>

