<h2>ZF-11318: Zend_Paginator cache ( related to ZF-10447 )</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2011-04-22T23:02:36.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-05-05T02:34:12.000+0000</dd>

    <dt>Status:</dt>
    <dd>Closed</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Adam Lundrigan (adamlundrigan)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Paginator</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-6989">ZF-6989</a></li>
            <li><a href="/issues/browse/ZF-10447">ZF-10447</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>This is related to <a href="http://framework.zend.com/issues/browse/ZF-10447">http://framework.zend.com/issues/browse/ZF-10447</a></p>

<p>But I hope this may help.</p>

<p>Using the standard serialization of the adapter I noticed two things ( other than the DB reconnect ): -
1) Zend_Paginator::_getCacheInternalId() is called three times ( in my usage ), the first md5 serialization differs from the other two, probably because the last two modify the _select of the adapter.
2) The md5 changes on every subsequent page load, why I don't know at this stage.</p>

<p>I tried moving away from the serialization of the object to a string representation of the _select of the adapter ( added a getSelect() method ) this had the same effect as 1) but the subsequent loads did provide the same hashed strings, which was an improvement.</p>

<p>I then added a static cache within the Zend_Paginator::_getCacheInternalId() method which stored the initial hash ( probably the one before the paging changed the select ) and this seems to work.</p>

<pre class="highlight"><code>
    protected function _getCacheInternalId()
    {
        static $cache = array();
        $adapter_namespace = get_class( $this-&gt;getAdapter() );
        if ( !array_key_exists( $adapter_namespace, $cache ) ) {
            $cache[$adapter_namespace] = md5(serialize(array(
                                             $adapter_namespace,
                                             (string)$this-&gt;getAdapter()-&gt;getSelect(),
                                             $this-&gt;getItemCountPerPage()
                                          )));
        }
              
        return $cache[$adapter_namespace];
    }
</code></pre>

<p>The page number is still added to the md5 so it should still be unique.</p>

<p>Whether this is a valid solution I really don't know at this stage but thought it worth mentioning.
[edit]Code modified to allow caches for different adapter namespaces[/edit]</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>
    <p class="comments">No comments to display</p>
    
</div>

