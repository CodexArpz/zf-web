<h2>ZF-960: Assigning empty values using Zend::register('name', array()) causes Zend::registry('name') to throw an exception</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2007-02-23T13:55:35.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2007-07-05T14:43:51.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>0.9.0 (17/Mar/07)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Jason Austin (jfaustin)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Gavin (gavin)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Registry</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>With the upgrade of php to ver 5.2.1, Zend::register() does not work as expected.</p>

<p>With php 5.2.0, the following code would evaluate as 'set':</p>

<pre class="highlight"><code>
&lt;?php

Zend::register('myvar', array());

echo (Zend::isRegistered('myvar')) ? 'set' : 'unset';

?&gt;
</code></pre>

<p>After an upgrade to php 5.2.1, this code sample evaluates to 'unset' without any changes to the Zend library.  This is important if you have a function can return an empty array that is assigned with Zend::register().  Once you try to access that registry entry again, Zend::registry throws an exception, thinking the key has not been set.</p>

<p>This is reproducible in ZF 0.7 and 0.8.  It has been evaluated to be true on 2 separate webservers, one Windows and one Linux, both running php 5.2.1.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Gavin (gavin) on 2007-02-26T22:09:19.000+0000</p> 
        <div class="body">
            <p><a href="http://bugs.php.net/bug.php?id=40442">http://bugs.php.net/bug.php?id=40442</a></p>

<p>I found and comitted a workaround using array_key_exists(), but I welcome a better solution.</p>

        </div>
    </div>
    </div>

