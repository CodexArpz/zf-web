<h2>ZF-4951: CLONE -Can't execute multiple stored procedures with Pdo_Mysql</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2008-11-14T09:26:00.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2011-06-04T21:00:33.000+0000</dd>

    <dt>Status:</dt>
    <dd>Open</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Rob Scheibel (robscheibel)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Ralph Schindler (ralph)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Db</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>This bug is not fixed yet. Details: ZF v1.6.2, PHP v5.1.6, Mysql V5.0.45.</p>

<p>Irregardless of how PDO:MYSQL_ATTR_USE_BUFFERED_QUERY is set, or using fetchAll() if you run two store procedures you get the same error:</p>

<p>SQLSTATE[HY000]: General error: 2014 Cannot execute queries while other unbuffered queries are active. Consider using PDOStatement::fetchAll(). Alternatively, if your code is only ever going to run against mysql, you may enable query buffering by setting the PDO::MYSQL_ATTR_USE_BUFFERED_QUERY attribute.</p>

<p>Example code:
                $registry = Zend_Registry::getInstance();
                $tempdata = array();
                                $stmt = $registry-&gt;dbAdapter-&gt;query("CALL mgmtcomm_yearlybarchart('2008-01-01','2008-10-01')");
                                // Store results in array
                                $rows = $stmt-&gt;fetchAll();
                                foreach($rows as $row) {
                                        $tempdata[] = number_format($row['data'],2);
                                        $numrows++;
                                }
                                // Free DB Query resources
                      $stmt-&gt;closeCursor();
                        print_r($tempdata);
                                $stmt = $registry-&gt;dbAdapter-&gt;query("CALL mgmtcomm_yearlybarchart('2008-01-01','2008-10-01')");
                                // Store results in array
                                $rows = $stmt-&gt;fetchAll();
                                foreach($rows as $row) {
                                        $tempdata[] = number_format($row['data'],2);
                                        $numrows++;
                                }
                                // Free DB Query resources
                      $stmt-&gt;closeCursor();
                        print_r($tempdata);</p>

<p>Patrick Calkins writes:</p>

<p>{quote}
Code:</p>

<pre class="highlight"><code>
$pdoParams = array(
    PDO::MYSQL_ATTR_USE_BUFFERED_QUERY =&gt; true
);

$params = array(
    'host'           =&gt; '127.0.0.1',
    'username'       =&gt; 'webuser',
    'password'       =&gt; 'xxxxxx',
    'dbname'         =&gt; 'test',
    'driver_options' =&gt; $pdoParams
);

$db = Zend_Db::factory('Pdo_Mysql', $params);

// Stored procedure returns a single row
$stmt = $db-&gt;prepare('CALL get_customer_by_id(:customerId)');
$stmt-&gt;bindParam('customerId', $customerId, PDO::PARAM_INT);
$stmt-&gt;execute();
$result = $stmt-&gt;fetchAll();
print_r($result);

$stmt-&gt;closeCursor();

// Stored procedure returns a single row
$stmt = $db-&gt;prepare('CALL get_address_by_id(:customerId)');
$stmt-&gt;bindParam('customerId', $customerId, PDO::PARAM_INT);
$stmt-&gt;execute();
$result = $stmt-&gt;fetchAll();
print_r($result);
</code></pre>

<p>This will consistently throw this error: 'SQLSTATE[HY000]: General error:
2014 Cannot execute queries while other unbuffered queries are active.
Consider using PDOStatement::fetchAll(). Alternatively, if your code is only
ever going to run against mysql, you may enable query buffering by setting
the PDO::MYSQL_ATTR_USE_BUFFERED_QUERY attribute.'</p>

<p>If you insert $stmt-&gt;nextRowset(); before $stmt-&gt;closeCursor(); it will
throw this error: 'SQLSTATE[HYC00]: Optional feature not implemented'</p>

<p>This appears to be a bug, and I haven't found any more info as to its status
lately. Is this correct??
{quote}</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2009-01-13T10:49:26.000+0000</p> 
        <div class="body">
            <p>Assigning to Ralph to get closure on this issue.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by SÃ©bastien Barbieri (scips) on 2009-07-22T06:35:35.000+0000</p> 
        <div class="body">
            <p>Just my 5 cents:
On Linux (ubuntu 9.4) with PHP5 from Zend (Zend Server CE), I don't have the issue</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Rohit Deshmukh (ved2rob) on 2011-06-04T21:00:33.000+0000</p> 
        <div class="body">
            <p>Hi Patric Calkins,
i am relatively new to zend framework but i think i have find solution to this problem.
i can call procedures multiple time. you dont even have to set attribute.
you can simply avoid this problem using changing cursor name.
because even if you call method $stmt-&gt;closeCursor(). $stmt still retains the prepare statement properties.
so it will shout error if you try to overwrite its old properties. 
your code might look something like follows
*
$db = Zend_Db::factory('Pdo_Mysql', $params);</p>

<p>// Stored procedure returns a single row
$stmt = $db-&gt;prepare('CALL get_customer_by_id(:customerId)');
$stmt-&gt;bindParam('customerId', $customerId, PDO::PARAM_INT);
$stmt-&gt;execute();
$result = $stmt-&gt;fetchAll();
print_r($result);</p>

<p>$stmt-&gt;closeCursor();</p>

<p>// Stored procedure returns a single row
$stmt2 = $db-&gt;prepare('CALL get_address_by_id(:customerId)');
$stmt2-&gt;bindParam('customerId', $customerId, PDO::PARAM_INT);
$stmt2-&gt;execute();
$result = $stmt2-&gt;fetchAll();
print_r($result);*</p>

<p>regards
Rohit Deshmukh</p>

        </div>
    </div>
    </div>

