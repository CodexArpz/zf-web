<h2>ZF-4599: Zend_Date::isDate() and Zend_Validate_Date do not reliably check format</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2008-10-14T16:30:26.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-11-21T08:08:54.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.7.3 (19/Jan/09)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Thomas Weidner (thomas)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Date</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Neither Zend_Date::isDate() or Zend_Validate_Date can be used to reliably check the date for format AND existence.  Take the following unit test and it's results as an example.</p>

<p>Below, we expect all dates to be in this format:  <code>2008-01-01</code> and be a date that exists on the calendar:</p>

<pre class="highlight"><code> 
class BPDateValidatorTest extends PHPUnit_Framework_TestCase
{

    /**
     * @var Zend_Validate_Date
     */
    private $_oValidator;

    public function setUp()
    {
        $this-&gt;_oValidator = new Zend_Validate_Date( 'YYYY-MM-DD' );
    }
    public function testValidDatesSHouldNotFail1()
    {
        $sDate = date( 'Y-m-d' );

        $bResult = $this-&gt;_oValidator-&gt;isValid( $sDate );
        $this-&gt;assertTrue( $bResult, $sDate . ' did not validate correctly: ' . $this-&gt;_oValidator-&gt;getMessages() );
    }

    public function testValidDatesSHouldNotFail2()
    {
        $sDate = '1984-03-08';
        $bResult = $this-&gt;_oValidator-&gt;isValid( $sDate );
        $this-&gt;assertTrue( $bResult, $sDate . ' did not validate correctly: ' . $this-&gt;_oValidator-&gt;getMessages() );
    }

    public function testInvalidDateFormatShouldBeInvalid1()
    {
        $sDate = 'fooo-ba-rs';
        $bResult = Zend_Date::isDate( $sDate, 'yyyy-MM-dd' );
        $this-&gt;assertFalse( $bResult, $sDate . ' validated correctly' );
    }

    public function testInvalidDateFormatShouldBeInvalid2()
    {
        $sDate = date( 'Y/m/d' );
        $bResult = $this-&gt;_oValidator-&gt;isValid( $sDate );
        $this-&gt;assertFalse( $bResult, $sDate . ' validated correctly' );
    }


    public function testInvalidDateFormatShouldBeInvalid3()
    {
        $sDate = date( 'r' );
        $bResult = $this-&gt;_oValidator-&gt;isValid( $sDate );
        $this-&gt;assertFalse( $bResult, $sDate . ' validated correctly' );
    }


    public function testInvalidDateFormatShouldBeInvalid4()
    {
        $sDate = date( 'Y:m:d' );
        $bResult = $this-&gt;_oValidator-&gt;isValid( $sDate );
        $this-&gt;assertFalse( $bResult, $sDate . ' validated correctly' );
    }

    public function testInvalidDateFormatShouldBeInvalid5()
    {
        $sDate = date( 'Y-m-d H:i' );
        $bResult = $this-&gt;_oValidator-&gt;isValid( $sDate );
        $this-&gt;assertFalse( $bResult, $sDate . ' validated correctly' );
    }

    public function testLeapYearFebruaryWith29DaysShouldPass1()
    {
        $sDate = '2008-02-29';
        $bResult = $this-&gt;_oValidator-&gt;isValid( $sDate );
        $this-&gt;assertTrue( $bResult, $sDate . ' did not validate correctly' );
    }

    public function testNonLeapYearFebruaryWith29DaysShouldBeInvalid1()
    {
        $sDate = '2009-02-29';
        $bResult = $this-&gt;_oValidator-&gt;isValid( $sDate );
        $this-&gt;assertFalse( $bResult, $sDate . ' validated correctly' );
    }

    /**
     * This handles the fact that 1900 and 2100 are NOT leap years.  Since
     * The validator will not acceppt a date after 2099, we don't have to
     * worry about that date, but 1900-04-29 shouldn't validate.
     *
     */
    public function testNonLeapYearFebruaryWith29DaysShouldBeInvalid2()
    {
        $sDate = '1900-02-29';
        $bResult = $this-&gt;_oValidator-&gt;isValid( $sDate );
        $this-&gt;assertFalse( $bResult, $sDate . ' validated correctly' );
    }

    public function testFebruaryWith30DaysShouldBeInvalid()
    {
        $sDate = '2008-02-30';
        $bResult = $this-&gt;_oValidator-&gt;isValid( $sDate );
        $this-&gt;assertFalse( $bResult, $sDate . ' validated correctly' );
    }

    public function testShortMonthsWith31DaysShouldBeInvalid()
    {
        $sDate = '2008-09-31';
        $bResult = $this-&gt;_oValidator-&gt;isValid( $sDate );
        $this-&gt;assertFalse( $bResult, $sDate . ' validated correctly' );
    }

    public function testLongMonthsWith31DaysShouldPass()
    {
        $sDate = '2008-10-31';
        $bResult = $this-&gt;_oValidator-&gt;isValid( $sDate );
        $this-&gt;assertTrue( $bResult, $sDate . ' did not validate correctly' );
    }

}
</code></pre>

<pre class="literal"> 
-----------------------------------------------------
TEST RESULTS:
-----------------------------------------------------

 Test Valid Dates S Hould Not Fail1: SUCCESS
 Test Valid Dates S Hould Not Fail2: SUCCESS
 Test Invalid Date Format Should Be Invalid1: SUCCESS
 Test Invalid Date Format Should Be Invalid2: FAILURE
 Test Invalid Date Format Should Be Invalid3: SUCCESS
 Test Invalid Date Format Should Be Invalid4: FAILURE
 Test Invalid Date Format Should Be Invalid5: FAILURE
 Test Leap Year February With29 Days Should Pass1: SUCCESS
 Test Non Leap Year February With29 Days Should Be Invalid1: SUCCESS
 Test Non Leap Year February With29 Days Should Be Invalid2: SUCCESS
 Test February With30 Days Should Be Invalid: SUCCESS
 Test Short Months With31 Days Should Be Invalid: SUCCESS
 Test Long Months With31 Days Should Pass: SUCCESS
</pre>

<p>notice that the following formats are actually validating correctly, despite me strictly specifying the format:</p>

<p>date( 'Y/m/d' );
date( 'Y:m:d' );
date( 'Y-m-d H:i' );</p>

<p>When using Zend_Date::isDate(), I get similar results except with date( 'r' ) passing validation as well.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2008-12-09T00:55:40.000+0000</p> 
        <div class="body">
            <p>Your testInvalidDateFormatShouldBeInvalid2, 4 and 5 does not test properly.</p>

<p>Why should a Y.m.d where . is the separator not be valid ?
You are testing for the date and not if the string contains this separators.</p>

<p>Separators are independently from the date and you can use any separator as long as the date is correct.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2008-12-16T01:41:50.000+0000</p> 
        <div class="body">
            <p>Closed due to no response</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by A.J. Brown (ajbrown) on 2008-12-16T09:50:39.000+0000</p> 
        <div class="body">
            <p>I apologize. When I went to respond, I did not have sufficient rights to leave a comment for some reason.  This was fixed a few days ago, and I since forgot.</p>

<p>When a format is passed in, you would expect the date to validate the format as well.  Seperator characters fall into the category "expected format" as loosely described:</p>

<p><a href="http://framework.zend.com/manual/en/zend.validate.set.html#zend.validate.set.date">http://framework.zend.com/manual/en/…</a>
"And if the optional format option is set this format is used for the validation. "</p>

<p>AND</p>

<p><a href="http://framework.zend.com/manual/en/zend.date.additional.html#zend.date.additional.checking">http://framework.zend.com/manual/en/…</a>
"The second parameter can be the format which the date is expected to have."</p>

<p>Either the functionality should be changed to match the description, or the documentation should be ammended.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by nike shox (nike shox) on 2012-11-21T08:08:54.000+0000</p> 
        <div class="body">
            <p>En Hvit Vulkaniseret only supports skoen <a href="http://www.nikeshoxsko.biz">http://www.nikeshoxsko.biz</a> under and avsluttes with a brun gummi under føttene. Each par will completely with a sett av Kork innleggssåler, extra Blonder and Stov bags.More detaljerte Pictures of "Woodgrain" Janoski below. You can <a href="http://www.nikeshoxsko.biz">http://www.nikeshoxsko.biz</a> plukke opp et par achieve with forhandlere as Primitive.</p>

        </div>
    </div>
    </div>

