<h2>ZF-7899: Inappropriate exception handler</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2009-09-19T09:14:13.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-09-20T04:46:04.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Mark Haase (mehaase)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Matthew Weier O'Phinney (matthew)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Form</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
        <li><a href="/issues/secure/attachment/12236/Screen+shot+2009-09-19+at+12.03.26+PM.png">Screen shot 2009-09-19 at 12.03.26 PM.png</a></li>
        </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Zend Form has an exception handler when you call __tostring that converts exceptions into PHP errors.</p>

<p>The big problem with this is that the error covers up the exception. The stack trace of interest is the one which the exception created, not the one which the error created! See the screenshot.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Mark Haase (mehaase) on 2009-09-19T09:15:46.000+0000</p> 
        <div class="body">
            <p>In the screenshot, there are TWO stack traces. The one in orange which is not marked up with HTML is the interesting one!</p>

<p>For some reason, Zend_Form clobbers the original exception and throws its own error. I don't see the point in this, all it does is make the interesting stack trace hard to read, and then add a 2nd stack trace that isn't meaningful. (The 2nd stack trace will always be the same, irregardless of where or why the original exception occurred.)</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Mark Haase (mehaase) on 2009-09-19T09:16:53.000+0000</p> 
        <div class="body">
            <p>In version 1.9.2, the offending code is in Zend/Form.php:2626-2637</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2009-09-20T04:44:13.000+0000</p> 
        <div class="body">
            <p>PHP does not like __toString() to produce exceptions; when you do, PHP throws a fatal error merely with the string "Method [class]::__toString() must not throw an exception," and the backtrace contains no information about the exception. It is therefor widely accepted to catch exceptions in __toString() and either ignore them or mutate the message. Since __toString() is typically only invoked in views, having it return the error message would be irresponsible.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2009-09-20T04:45:48.000+0000</p> 
        <div class="body">
            <p>And, to follow-up -- this is also the rationale around raising a PHP error in Zend_Form -- that way at least an error is logged. Unfortunately, that also clobbers the stack trace.</p>

<p>The trick, then, is, as a developer, ensure that no exceptional conditions occur during __toString() invocations.</p>

        </div>
    </div>
    </div>

