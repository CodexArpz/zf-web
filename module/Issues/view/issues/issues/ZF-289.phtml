<h2>ZF-289: This is a new approach for the Session Module for Zend and is open for any implementation in the future</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>New Feature</dd>

    <dt>Created:</dt>
    <dd>2006-07-27T04:04:28.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2007-07-05T14:44:31.000+0000</dd>

    <dt>Status:</dt>
    <dd>Closed</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Gavin (gavin)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Session</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-552">ZF-552</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Come advantages are:</p>

<pre><code>* use PHP native functions like: session_start() and session_destroy();
* use the global $_SESSION;
</code></pre>

<p>The plugin is using an SQL table (the example is for a MySQL table)</p>

<p>Code:</p>

<p>CREATE TABLE <code>app_session</code> (
<code>session_id</code> varchar(32) collate latin1_general_ci NOT NULL default '',
<code>session_time</code> int(11) NOT NULL default '0',
<code>session_start</code> int(11) NOT NULL default '0',
<code>session_data</code> text collate latin1_general_ci NOT NULL,
<code>session_key</code> varchar(50) collate latin1_general_ci default NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1 COLLATE=latin1_general_ci;</p>

<p>The Session class where factory is located.</p>

<p>php:</p>

<p>/**</p>

<pre><code>* Application_Plugins_Session_Exception
  */
  require_once 'Application/Plugins/Session/Exception.php';
</code></pre>

<p>/**</p>

<pre><code>* Factory for Zend_Db_Handler classes.
  *
* @param string $adapterName Name of the adapter to return:
* 'database' -&gt; Application_Plugins_Session_Handler_Database
  *
* @param array $config An array of adapter configuration keys.
  *
* @return Application_Plugins_Session_Handler_Abstract
  *
  */
  class Application_Plugins_Session {
  static public function factory($adapterName, $configuration = null)
  {
  if (!is_string($adapterName) or !strlen($adapterName)) { throw new Application_Plugins_Session_Exception('Adapter name must be specified in a string!'); }
  $adapterName = 'Application_Plugins_Session_Handler_'.str_replace(' ','',ucwords(str_replace('', ' ', $adapterName)));
</code></pre>

<ol><li>Load adapter
  Zend::loadClass($adapterName);</li>
</ol><p>return new $adapterName();
}
}</p>

<p>The abstract class from which all other implementations will be extended (sorry for my english):</p>

<p>php:
/**</p>

<pre><code>* Abstract class for Zend_Session to help enforce private constructs.
  *
* @category Zend
* @package Zend_Session
  */
  abstract class Application_Plugins_Session_Handler_Abstract
  {
  /**
* This is the first function called by PHP when a session is started
  *
* @param string $strSessionPath
* @param string $strSessionName
  */
  public function open($strSessionPath, $strSessionName)
  {
</code></pre>

<p>}</p>

<p>/**</p>

<pre><code>* The close function is the last function called by PHP related to the session.
* It does not accept any parameters, and returns either TRUE or FALSE.
  */
  public function close()
  {
</code></pre>

<p>}</p>

<p>/**</p>

<pre><code>* Retrieve any data that is stored for the session, and return it. It is extremely
* important always to return a string from this function, even if it's empty.
  */
  public function read()
  {
</code></pre>

<p>}</p>

<p>/**</p>

<pre><code>* Write session data
  *
* @param string $strSessionId
* @param string $SessionData
  */
  public function write($strSessionId,$SessionData)
  {
</code></pre>

<p>}</p>

<p>/**</p>

<pre><code>* Destroy session, delete all data related to the session id
  *
* @param string $strSessionId
  */
  public function destroy($strSessionId)
  {
</code></pre>

<p>}</p>

<p>public function gc($strSessionLifeTime)
{</p>

<p>}
}</p>

<p>The Database implementation
php:</p>

<p>/**</p>

<pre><code>* Application_Plugins_Session_Handler_Absstract
  */
  require_once 'Application/Plugins/Session/Handler/Abstract.php';
</code></pre>

<p>/**</p>

<pre><code>* Application_Plugins_Session_Handler_Exception
  */
  require_once 'Application/Plugins/Session/Handler/Exception.php';
</code></pre>

<p>class Application_Plugins_Session_Handler_Database extends Application_Plugins_Session_Handler_Abstract
{
public function open($strSessionPath, $strSessionName)
{ return true; }</p>

<p>public function close()
{ return true; }</p>

<p>protected function _generateId()
{
do { # Generate session ID $strSessionId = md5(uniqid(mt_srand((double) microtime() * 1000000))); } while ($this-&gt;_validateId($strSessionId) === false);
}</p>

<p>protected function _formatSessionData($SessionData)
{ $arrSession = array(); $arrSession = preg_split("/([a-zA-Z0-9_]+|)/",$SessionData,-1,PREG_SPLIT_NO_EMPTY|PREG_SPLIT_DELIM_CAPTURE); return array_chunk($arrSession,2); }</p>

<p>protected function _validateId($strSessionId)
{</p>

<ol><li><p>Get database connection
  $db = Zend::registry('db');</p></li>
<li><p>Check is the session ID is unique
  $select = $db-&gt;select();
  $select-&gt;from('app_session','count(session_id) as session_found');
  $select-&gt;where('session_id = ?',$strSessionId);
  $intValue = $db-&gt;fetchOne($select-&gt;__toString()) ;
  if($intValue) { return false; }
  else { return true; }
  }</p></li>
</ol><p>public function write($strSessionId,$SessionData)
{</p>

<ol><li><p>Get database connection
  $db = Zend::registry('db');
  $arrSessionData = $this-&gt;_formatSessionData($SessionData);</p></li>
<li><p>Check if the session id exists
  if($this-&gt;_validateId($strSessionId))
  Unknown macro: { foreach ($arrSessionData as $arrSessionDataKey =&gt; $arrSessionDataValue) { # ID of the session doesn't exist, perform insert $db-&gt;insert("app_session",array("session_id"=&gt;$strSessionId,"session_time"=&gt;time(),"session_start"=&gt;time(),"session_data"=&gt;$arrSessionDataValue[1],"session_key"=&gt;$arrSessionDataValue[0])); } }</p>

<p>else
  {</p></li>
<li>ID of the session exists perform update
  foreach ($arrSessionData as $arrSessionDataKey =&gt; $arrSessionDataValue) {</li>
<li>ID of the session doesn't exist, perform insert
  $intAffected = $db-&gt;update("app_session",array("session_time"=&gt;time(),"session_key"=&gt;$arrSessionDataValue[0],"session_data"=&gt;$arrSessionDataValue[1]),"session_id = '".$strSessionId."' and session_key = '".$arrSessionDataValue[0]."'");
  if(!$intAffected) { $db-&gt;insert("app_session",array("session_id"=&gt;$strSessionId,"session_time"=&gt;time(),"session_start"=&gt;time(),"session_data"=&gt;$arrSessionDataValue[1],"session_key"=&gt;$arrSessionDataValue[0])); }
  }
  }
  return true;
  }</li>
</ol><p>public function destroy($strSessionId)
{</p>

<ol><li><p>Get database connection
  $db = Zend::registry('db');</p></li>
<li><p>Check if the session id exists
  if(!$this-&gt;_validateId($strSessionId)) { # Delete session and data associated with it from database return $db-&gt;delete("app_session","session_id= '".$strSessionId."'") &gt; 0 ? true : false; }</p>

<p>return true;
  }</p></li>
</ol><p>public function gc($strSessionLifeTime = 30)
{</p>

<h1>Get database connection</h1>

<p>$db = Zend::registry('db');</p>

<p># Load application configuration parameters to get session lifetime</p>

<p>$config_app = Zend::registry('config_app'); $strSessionLifeTime = strtotime("-".$config_app-&gt;lifetime." minutes"); $db-&gt;delete("app_session","session_time &lt; ".$strSessionLifeTime); return true; }</p>

<p>public function read($strSessionId)
{ # Get database connection $db = Zend::registry('db'); # Get all data associated with the session $select = $db-&gt;select(); $select-&gt;from('app_session',"(GROUP_CONCAT(session_key,session_data SEPARATOR '')) as session_data"); $select-&gt;where('session_id = ?',$strSessionId); $SessionData = $db-&gt;fetchAll($select-&gt;__toString()); # If no results the empty string will be returned return $SessionData ; }</p>

<p>}</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2006-09-25T19:44:21.000+0000</p> 
        <div class="body">
            <p>Reassigning from Jayson to Bill Karwin, pending further triage.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2006-11-08T12:07:05.000+0000</p> 
        <div class="body">
            <p>Assigning Zend_Session issue to Gavin.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ralph Schindler (ralph) on 2006-11-08T14:27:32.000+0000</p> 
        <div class="body">
            <p>+1 Here to close this issue.</p>

<p>This type of functionality would be implemented by using the Zend_Session_SaveHandler_Interface.  It might be worth discussing to create a stock database save handler to release with Zend_Session perhaps based off Zend_Db, but that is outside my scope as when you drill down into the specifics, people are using the savehandler to suit a very specific need.</p>

<p>Also, this was filed long ago before code was produced.  Perhaps close, and alert the initial reporter.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Gavin (gavin) on 2006-11-10T23:34:43.000+0000</p> 
        <div class="body">
            <p>Nicolae, please see the new Zend_Session in the incubator.  We welcome suggestions, recommendations, improvements for consideration, and help.  Very large changes, such a new proposal or significant new componet or major API changes should follow the proposal process:</p>

<p><a href="http://framework.zend.com/wiki/display/ZFPROP/Home">http://framework.zend.com/wiki/display/ZFPROP/Home</a></p>

        </div>
    </div>
    </div>

