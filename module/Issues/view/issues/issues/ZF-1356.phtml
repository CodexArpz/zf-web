<h2>ZF-1356: add method to get parent resource and methods get all parents of roles or resources</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Community Driven Feature</dd>

    <dt>Created:</dt>
    <dd>2007-05-07T01:45:02.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-08-31T09:12:31.000+0000</dd>

    <dt>Status:</dt>
    <dd>Open</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Ralph Schindler (ralph)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Acl</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-5638">ZF-5638</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <pre class="highlight"><code>
    /**
     * @param Zend_Acl_Resource_Interface|string $resource
     * @return Zend_Acl_Resource_Interface|null
     */
    public function getParent($resource) {
        $resourceId = $this-&gt;get($resource)-&gt;getResourceId();
        return $this-&gt;_resources[ $resourceId ]['parent'];
    }
    
    /**
     * @param Zend_Acl_Resource_Interface|string $resource
     * @return array([ string =&gt; Zend_Acl_Resource_Interface[, ...]])
     */
    public function getAllParents($resource) {
        $resource = $this-&gt;get($resource);
        
        $parents = array();
        do {
            $parent = $this-&gt;getParent($resource);
            if (!$parent) {
                break;
            } else {
                $resource = $parent;
                $parents[ $parent-&gt;getResourceId() ] = $parent;
            }
        } while (true);
        
        return $parents;
    }
    
    // This method must implemented in Zend_Acl_Role_Registry
    public function getAllParentRoles($role) {
        $role = $this-&gt;getRole($role);
        
        $parents = $this-&gt;_getRoleRegistry()-&gt;getParents($role);
        foreach ($parents as $role) {
            $parents = array_merge($parents, $this-&gt;getAllParentRoles($role));
        }
        
        return $parents;
    }
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-05-07T11:57:20.000+0000</p> 
        <div class="body">
            <p>Assigning to Darby.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Sorin Alin Stoiana (sorin) on 2007-07-30T14:26:35.000+0000</p> 
        <div class="body">
            <pre class="highlight"><code>
    /**
     * Returns all the Roles 
     * 
     * @uses   Zend_Acl_Role_Registry::getAll()
     * @return Zend_Acl_Role_Interface[]
     */
    public function getRoleAll()
    {
        return $this-&gt;_getRoleRegistry()-&gt;getAll();
    }
    
    /**
     * Returns an array with the given Role's parents
     *
     * @uses Zend_Acl_Role_Registry::getParents()
     * @return array()
     */
    public function getRoleParents($role) 
    {
        return $this-&gt;_getRoleRegistry()-&gt;getParents($role);
    }
    
    /**
     * Returns an array with all the given Role's parents and ancestors, parsed BF
     *
     * @param Zend_Acl_Role_Interface|string $role
     * @return array
     */
    public function getRoleAllParents($role) 
    {
        return $this-&gt;_getRoleRegistry()-&gt;getAllParents($role);
    }

//
//
//


    /**
     * Returns parent resource for a given resource
     * 
     * @param Zend_Acl_Resource_Interface|string $resource
     * @return Zend_Acl_Resource_Interface|null
     */
    public function getParent($resource) {
        $resourceId = $this-&gt;get($resource)-&gt;getResourceId();
        return $this-&gt;_resources[ $resourceId ]['parent'];
    }
    
    /**
     * Returns child resources for a given resource
     *
     * @param Zend_Acl_Resource_Interface|string $resource
     * @throws Zend_Acl_Exception
     * @return Zend_Acl_Resource_Interface[]
     */
    public function getChildren( $resource )
    {
        if($resource == null){
            $resourceId = null;
        } else {
            if ($resource instanceof Zend_Acl_Resource_Interface) {
                $resourceId = $resource-&gt;getResourceId();
            } else {
                $resourceId = (string) $resource;
            }

            if (!$this-&gt;has($resource)) {
                require_once 'Zend/Acl/Exception.php';
                throw new Zend_Acl_Exception("Resource '$resourceId' not found");
            }
        }

        $children = array();
        
        if($resourceId == null)
        {
            foreach($this-&gt;_resources as $currentResourceId =&gt; $currentResource) {
                if($currentResource['parent'] == null) {
                    $children[$currentResourceId] = $currentResource['instance'];
                }
            }
        }
        else {
            $children = $this-&gt;_resources[$resourceId]['children'];
        }

        return $children;
    }

</code></pre>

<pre class="highlight"><code>
    /**
     * returns all the roles in the registry
     * 
     * @return Zend_Acl_Role_Interface
     */
    public function getAll()
    {
        $roles = array();
        
        foreach($this-&gt;_roles as $currentRole)
        {
            $roles[] = $currentRole['instance'];
        }
        return $roles;
    }

    /**
     * Returns an array of an existing Role's parents, parsed in BF fashion
     *
     * @param Zend_Acl_Role_Interface|string $role
     * @return array
     */
    public function getAllParents($role) 
    {   
        $parents = $this-&gt;getParents($role);
        
        foreach ($parents as $role) {
            $parents = array_merge($parents, $this-&gt;getAllParents($role));
        }
        
        return $parents;
    }

</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Sorin Alin Stoiana (sorin) on 2007-07-30T14:28:12.000+0000</p> 
        <div class="body">
            <p>There should also be some methods for retrieving Role children. I'm working on those, and will post them here.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Darby Felton (darby) on 2007-07-31T11:54:22.000+0000</p> 
        <div class="body">
            <p>Resources are organized into a tree. Therefore, at most one parent resource can exist for any given resource.</p>

<p>Roles are organized into a directed acyclic graph (DAG). Therefore, a role may have zero, one, or more than one parent roles.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Darby Felton (darby) on 2007-07-31T11:59:36.000+0000</p> 
        <div class="body">
            <p>I see that the intent is to fetch all ancestors (i.e., parents, grandparents, and so on) of a role or resource. Though this is fine, the results hide the actual data structure. For example, it is not apparent whether a returned "parent" resource is actually a parent, the parent of a parent, and so on.</p>

<p>Further, for what purpose is such information useful, I'm curious? That is, what use case requirements do these new methods help to meet?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Sorin Alin Stoiana (sorin) on 2007-08-01T14:24:01.000+0000</p> 
        <div class="body">
            <p>It seems logical to be able to interrogate the Acl object once created, to meet the needs of (say) a CMS, where roles, resources and permissions vary dynamically to match the structure of the content.</p>

<p>A typical use case would be listing all the Roles defined in the Acl:</p>

<pre class="highlight"><code>
//users will be stored in the DB, in order to also allow authorization using Zend_Auth
class Pornlist_Db_Users_Row extends Zend_Db_Table_Row_Abstract implements Zend_Acl_Role_Interface
{
//
//
//
}

foreach($acl-&gt;getRoleAll() as $role)
        {
                // we don't want to display users stored in the Acl
            if($role instanceof MyApp_Acl_Role_User) continue;
            
            $parents = $acl-&gt;getRoleParents($role);
            
            $parents_data = array();
            foreach($parents as $parent)
            {
                $parents_data[] = $parent-&gt;getRoleId();
            }
            
            $role_data[] = array( 
                'name'      =&gt; $role-&gt;getRoleId(),
                'parents'   =&gt; $parents_data, 
                'actions'   =&gt; array(
                    'delete'    =&gt; '/admin/aclroles/delete/id/'.$role-&gt;getRoleId(),
                    'edit'      =&gt; '/admin/aclroles/edit/id/'.$role-&gt;getRoleId(),
                )
            );
        }
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ralph Schindler (ralph) on 2009-09-10T08:36:40.000+0000</p> 
        <div class="body">
            <p>While this is a worthwhile feature, the ZF team will not develop this feature, but if a community member would like to pick up and develop it, they may make an assignment of it.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2010-03-21T10:30:26.000+0000</p> 
        <div class="body">
            <p>Reassigned to component maintainer</p>

        </div>
    </div>
    </div>

