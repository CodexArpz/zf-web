<h2>ZF-6459: The Array-Union-Operator ignores values of existing keys</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2009-04-28T23:41:53.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-05-15T12:02:07.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.8.1 (12/May/09)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Sebastian Krebs (kingcrunch)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Matthew Weier O'Phinney (matthew)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Application</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-6679">ZF-6679</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>The union operator found in</p>

<pre class="highlight"><code>
    public function setOptions(array $options)
// ..
        $this-&gt;_options = $this-&gt;_options + $options;
        return $this;
    }</code></pre>

<p>ignores subkeys, if the key at toplevel already exists.</p>

<pre class="highlight"><code>$a = array ('config'=&gt;array('key1'=&gt;'$a1','key2'=&gt;'$a2'));
$b = array ('config'=&gt;array('key1'=&gt;'$b1','key3'=&gt;'$b2'));
var_dump ($a + $b);

array(1) {
  ["config"]=&gt;
  array(2) {
    ["key1"]=&gt;
    string(3) "$a1"
    ["key2"]=&gt;
    string(3) "$a2"
  }
}</code></pre>

<p>The 'key3' is missing. This behaviour is described in the PHP-Manual [1]</p>

<p>'array_merge' does the same in the other direction, it overwrite the value of a existing key, instead of ignoring it. 'array_merge_recursive' will merge two scalar to one array and so it will destroy the config structure.
Zend_Config has a method merge() which act like expected, but its not used here. So the method 'setOptions()' has to convert one config into a 'Zend_Config', merge and deconvert into an array again, or it must implement its own merge-Method.</p>

<p>Version is trunk 15243</p>

<p>[1]<a href="http://de.php.net/manual/en/language.operators.array.php">http://de.php.net/manual/en/â€¦</a>
{quote} The + operator appends elements of remaining keys from the right handed array to the left handed, whereas duplicated keys are NOT overwritten. ```</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2009-05-07T06:23:33.000+0000</p> 
        <div class="body">
            <p>Resolved in trunk and 1.8 release branch</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Sebastian Krebs (kingcrunch) on 2009-05-11T18:39:36.000+0000</p> 
        <div class="body">
            <p>As i mentioned 'array_merge_recursive' will lead to another problem</p>

<pre class="highlight"><code>$a = array (
  'config'=&gt;array(
    'db'=&gt;array(
      'dbname'=&gt;'name')));
$b = array (
  'config'=&gt;array(
    'db'=&gt;array(
      'dbname'=&gt;'thisConfigUseAnotherName')));

var_dump (array_merge_recursive($a,$b));</code></pre>

<p>output</p>

<pre class="highlight"><code>array(1) {
  ["config"]=&gt;
  array(1) {
    ["db"]=&gt;
    array(1) {
      ["dbname"]=&gt;
      array(2) {
        [0]=&gt;
        string(4) "name"
        [1]=&gt;
        string(22) "thisConfigUseOtherName"
      }
    }
  }
}</code></pre>

<p>Now "dbname" is not a string anymore and will likely fail.</p>

<p>Another example, which returns a very iteresting result.</p>

<pre class="highlight"><code>class Test_Bootstrap extends Zend_Application_Module_Bootstrap {
    protected function _initOptionDump () {
        $this-&gt;setOptions($this-&gt;getOptions());
        var_dump ($this-&gt;getOptions());
    }
}</code></pre>

<pre class="highlight"><code>
All scalar values are doubled.
</code></pre>

<p>array(1) {
  ["somekey"]=&gt;
  array(2) {
    [0]=&gt;
    string(9) "somevalue"
    [1]=&gt;
    string(9) "somevalue"
  }
}</p>

<pre class="highlight"><code>
Expected: No change.
</code></pre>

<p>array(1) {
  ["somekey"]=&gt;
  string(9) "somevalue"
}
```</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2009-05-12T07:45:45.000+0000</p> 
        <div class="body">
            <p>Better merging algorithm added in trunk and 1.8 release branch.</p>

        </div>
    </div>
    </div>

