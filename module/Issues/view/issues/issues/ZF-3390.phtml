<h2>ZF-3390: Inheritage of roles: rules are checked by parent roles</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2008-06-04T14:13:27.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-08-14T14:33:08.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.9.1 (11/Aug/09)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Mathias Schreck (lo1tuma)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Ralph Schindler (ralph)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Acl</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-1722">ZF-1722</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Hi,</p>

<p>I think there is a problem of inheritage of roles. If an inhertited role is checked by isAllowed(), the rules are checked on an instance (Zend_Acl_Role) of the parent and not on the instance of the current role.</p>

<p>Example:</p>

<p>ACL definitions</p>

<pre class="highlight"><code>
class TestAcl extends Zend_Acl {

    public function __construct() {
        $this-&gt;add(new Zend_Acl_Resource('video'));

        $this-&gt;addRole(new Zend_Acl_Role('guest'));
        $this-&gt;addRole(new Zend_Acl_Role('member'), 'guest');

        $this-&gt;allow('guest', 'video', 'watch', new VideoWatchAssertion());
        $this-&gt;allow('member');
    }
}

class Video implements Zend_Acl_Resource_Interface {

    public $property;

    public function __construct($p) {
        $this-&gt;property = 0;
        if($p) {
            $this-&gt;property = 1;
        }
    }
    
    public function getResourceId() {
        return 'video';
    }
}

class User implements Zend_Acl_Role_Interface {

    public $property;
    private $roleId;

    public function __construct($role, $p) {
        $this-&gt;roleId = $role;
        $this-&gt;property = 0;
        if($p) {
            $this-&gt;property = 1;
        }
    }
    
    public function getRoleId() {   
        return $this-&gt;roleId;
    }
}

class VideoWatchAssertion implements Zend_Acl_Assert_Interface {

    public function assert(Zend_Acl $acl, Zend_Acl_Role_Interface $user=null, Zend_Acl_Resource_Interface $video=null, $privilege=null) {
        
        if($video-&gt;property == 1) {
            if($user-&gt;property != 1) {
                return false;
            }
        }

        return true;
    }
}
</code></pre>

<p>Check for access:</p>

<pre class="highlight"><code>
$acl = new TestAcl();
$user = new User('member', true);
$video = new Video(true);
$result = $acl-&gt;isAllowed($user, $video, 'watch');
</code></pre>

<p>The assertion is called by an instance of Zend_Acl_Role (roleId = guest) and not by an instance of User; but the check of the User instance for access to object specific properties/methods would be absolutly necessary.
It would be very helpful if the rules of the parent role is checked by the instance of the current role.</p>

<p>Of course it is possible to bypass this problem by defining the rules for each single role, but it is not very nice.</p>

<pre class="highlight"><code>
$this-&gt;allow('guest', 'video', 'watch', new VideoWatchAssertion());
$this-&gt;allow('member', 'video', 'watch', new VideoWatchAssertion());
$this-&gt;allow('member');
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Marc Jakubowski (octavian) on 2008-07-01T09:17:21.000+0000</p> 
        <div class="body">
            <p>In your TestAcl::__construct() you assigned standard Zend_Acl_Role and Zend_Acl_Resource objects so objects of these types are stored.
Why donÂ´t you pass the User and Video objects?</p>

<p>$result = $acl-&gt;isAllowed($user, $video, 'watch') 
only extracts the IDs of your custom objects and looks in the registry for existing objects with that IDs, and then of course the standard ones will be found and used for the assertions.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Mathias Schreck (lo1tuma) on 2008-07-09T05:22:19.000+0000</p> 
        <div class="body">
            <p>You are right, your solution uses the correct class. But I have to work with the current instance that the assertion can handle
the object specific properties.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2009-01-14T13:31:39.000+0000</p> 
        <div class="body">
            <p>Assigning to Ralph to get closure on this issues.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ralph Schindler (ralph) on 2009-07-30T18:48:32.000+0000</p> 
        <div class="body">
            <p>There is a fix in place for ZF-1721 and ZF-1722 which I think will fix this issues, please test r17317 in trunk.</p>

        </div>
    </div>
    </div>

