<h2>ZF-10740: Add methods:  $db-&gt;updateWhere()   $db-&gt;deleteWhere() to  Zend_Db_Adapter_Abstract</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2010-11-24T08:57:21.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2010-11-24T12:00:25.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Ralph Schindler (ralph)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Db</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-9298">ZF-9298</a></li>
            <li><a href="/issues/browse/ZF-3571">ZF-3571</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>I suggest adding two more method to Zend_Db_Adapter_Abstract
 * updateWhere() 
 * deleteWhere()</p>

<p>These will be equivalent to the the {{update()}} and {{delete()}} methods except they will throw an Exception if no WHERE conditions are passed. Thus preventing ALL rows of a table from being accidentally deleted or updated.</p>

<p>(This is a different tangent to issues already raised by : ZF-9298 and ZF-3571)</p>

<p><em>The problem</em></p>

<p>Using the current methods of Zend Db Adaptor there is a high chance of accidentally updating/deleting ALL rows of db table if no WHERE is passed in as an argument to the method. Naturally, no error is thrown.</p>

<p>It is argued that the behaviour of the {{update()}} and {{delete()}} methods is in keeping with an SQL query, in that if no 'where CLAUSE' is provided, then the query affects all rows.</p>

<p>In SQL it would <em>not</em> throw an error if you submitted a query like :</p>

<pre class="highlight"><code> 
$whereClause = '';
"UPDATE tblEvents SET colIsSoldOut='1' " . $whereClause;
</code></pre>

<p>This is correct. Therefore, we should keep the update() and delete() methods as they are.</p>

<p><em>But how often do you update or delete ALL rows?</em></p>

<p>It is rare to have code that updates or deletes ALL rows of a db table.</p>

<p>It makes sense to add methods to Zend_Db_Adapter_Abstract that are consistent with the 'normal case', most common, type of update and delete SQL behaviour, that is:</p>

<p>Running an UPDATE without a WHERE <em>condition</em> in a WHERE clause will NOT update all rows and WILL throw an Error.</p>

<p>In SQL it <em>would</em> throw an error if you submitted a query like :</p>

<pre class="highlight"><code> 
$whereConditions = '';
"UPDATE tblEvents SET colIsSoldOut='1' WHERE " . $whereConditions;
</code></pre>

<p>This behaviour can be represented by the two, newly proposed methods {{updateWhere()}} and {{deleteWhere()}} which can be used <em>explicitly</em> in code that never, ever, ever, will feel the need to update or delete ALL rows of table.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Ryan Mauger (bittarman) on 2010-11-24T09:01:57.000+0000</p> 
        <div class="body">
            <p>The update and delete methods of the db adapters already take a second argument for a where clause, which takes an array of clauses / paramaters as so:</p>

<pre class="highlight"><code>
$db-&gt;delete('tablename', array('id = ?' =&gt; $id));
</code></pre>

<pre class="highlight"><code>
$db-&gt;update('tablename', $data, array('id = ?' =&gt; $id));
</code></pre>

<p>Closing as won't fix because an  adequate solution already exists.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by jw (ronny stalker) on 2010-11-24T09:17:56.000+0000</p> 
        <div class="body">
            <p>I disagree that an adequate solution already exists - but fair enough, I agree its not a high priority issue.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ryan Mauger (bittarman) on 2010-11-24T10:00:32.000+0000</p> 
        <div class="body">
            <p>Apologies, I also meant to mention, that even with a where clause supplied, it could still be possible to accidentally truncate a table, especially where the clause is built programmatically.</p>

<p>Having a method which claims to prevent truncation would lead to complacent usage, and when it is not possible to create this function to be 100% safe, would result in potentially more harm.</p>

<p>The responsibility for ensuring truncation cannot occur unless its wanted needs to lie with the developer, and not the framework. After-all, you wouldn't send the same query directly to the db without the where clause.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Marc Hodgins (mjh_ca) on 2010-11-24T10:04:50.000+0000</p> 
        <div class="body">
            <p>@Ryan: I do like this approach.  Sort of a "safety" method.  Something similar was proposed and rejected in ZF-3571 and ZF-9298 (linking here) but I think yours is a better approach because it doesn't change the existing behavior like those other tickets proposed to do.  +1 from me on this.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by jw (ronny stalker) on 2010-11-24T10:52:55.000+0000</p> 
        <div class="body">
            <p>I see where you are coming from Ryan. If it claims to 'prevent truncation' then it would be dangerous. If it claims to throw Exception on "no where condition at all" then I don't think it would induce complacency.</p>

<p>To be honest I am not 100% sure how to check the $where variable for "no where condition at all" in client code and in a safe way that is future compatible. This is why, as a developer, I currently avoid using the update() and delete() methods and end up building the queries myself and calling $db-&gt;query().</p>

<p>If I was inside the class I could do exactly the same check against the result of "_whereExpr()" that is done by the ternary operation that decides whether or not to append the word "WHERE" when building the query:
i.e.</p>

<pre class="highlight"><code>
abstract class Zend_Db_Adapter_Abstract 
 ...
 public function delete($table, $where = '')
        ...
        $where = $this-&gt;_whereExpr($where);
           ...
           . (($where) ? " WHERE $where" : '');
           ...

</code></pre>

<p>So the whole the method would simply do:</p>

<pre class="highlight"><code>
abstract class Zend_Db_Adapter_Abstract 
 ...
    /**
     * Deletes table rows based on a REQUIRED WHERE clause.
     * Behaves the same as delete() except $where parameter is required.
     *
     * @param  mixed        $table The table to update.
     * @param  mixed        $where DELETE WHERE clause(s).
     * @throws Zend_Db_Adapter_Exception if where conditions result in false  
     * @return int          The number of affected rows.
     */
    public function deleteWhere($table, $where)
    {

        if (!$this-&gt;_whereExpr($where)) {
            /** @see Zend_Db_Adapter_Exception */
            require_once 'Zend/Db/Adapter/Exception.php';
            throw new Zend_Db_Adapter_Exception("_whereExpr($where) returned FALSE");
            } 

        return $this-&gt;delete($table, $where);
    }
</code></pre>

<p>As I write this I realise what I am really asking for is some form of access to the boolean test that is used in the ternary operation that appends the where conditions to the query (see above).</p>

<p>I suppose an alternative would be to have an equivalent public method that behaves exactly like "_whereExpr()" so clients can perform that 'if-throw' logic outside the class. If there is one, then I must have missed it and yes I'd agree an adequate solution already exists and sorry for wasting time.</p>

<p>@Marc - thanks for the +1</p>

        </div>
    </div>
    </div>

