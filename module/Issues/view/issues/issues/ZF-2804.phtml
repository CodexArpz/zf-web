<h2>ZF-2804: bcmath extension and numbers processing behavior may need spechial approach to provide correct results for some locales</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2008-03-04T18:11:54.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2008-03-21T17:05:30.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.5.0 (17/Mar/08)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Alexander Veremyev (alexander)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Thomas Weidner (thomas)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Locale</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-2813">ZF-2813</a></li>
            <li><a href="/issues/browse/ZF-2839">ZF-2839</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>The core of the problem is locale dependent numbers processing behavior, especially strings &lt;-&gt; numbers conversion.</p>

<p>float -&gt; string conversion uses zend_spprintf() function, which actually uses xbuf_format_converter() function. xbuf_format_converter() uses decimal point provided by current locale.
string -&gt; float conversion uses zend_strtod() function which has hardcoded decimal point character ('.')</p>

<p>So float -&gt; string -&gt; float  conversion may be not reversible operation for locales which don't use '.' as decimal point (e.g. fr_FR locale uses ',');</p>

<pre class="highlight"><code>
setlocale(LC_ALL,'fr_FR'); var_dump((float)26.25); // output: float(26,25)

setlocale(LC_ALL,'fr_FR'); var_dump((string)(float)26.25); // output: string(5) "26,25"

setlocale(LC_ALL,'fr_FR'); var_dump((float)(string)(float)26.25); // output: float(26)
</code></pre>

<p>I am not sure it's a bug, since that exactly corresponds to the behavior described in the PHP manual (<a href="http://www.php.net/manual/en/language.types.type-juggling.php#language.types.typecasting">http://php.net/manual/en/â€¦</a>)</p>

<p>That affects our implementation of Zend_Locale_Math_PhpMath methods.</p>

<p>Another problem is bcmath extension behavior. bcmath functions take strings as arguments. Conversion to the strings is performed automatically. But! bcmath functions operate with '.' as decimal point. If it gets another symbol it treats number as zero:</p>

<pre class="highlight"><code>
setlocale(LC_ALL,'fr_FR'); var_dump(bcadd(1, '2.25', 2)); // output: string(4) "3.25"

setlocale(LC_ALL,'fr_FR'); var_dump(bcadd(1, '2,25', 2)); // output: string(4) "1.00"

setlocale(LC_ALL,'fr_FR'); var_dump(bcadd(1, 2.25, 2)); // output: string(4) "1.00"
</code></pre>

<p>So we have to provide input for math functions as non-localized strings with numbers.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2008-03-06T12:38:38.000+0000</p> 
        <div class="body">
            <p>With the change from ZF-2813 and the last changeset 8584 the problem should be prevented.
Now all inputs are converted to string and only string is returned.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2008-03-08T14:24:02.000+0000</p> 
        <div class="body">
            <p>All I18N classes which make use of this internal class have been reviewed and 2 small possible problems have been reworked.</p>

<p>The testbed always tests with the actual used locale. Some defined tests are done with 'fr' which has a complete different number representation.
Using the testhelper you can simply change the used locale to any locale you wish.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-03-21T17:05:30.000+0000</p> 
        <div class="body">
            <p>This issue should have been fixed for the 1.5 release.</p>

        </div>
    </div>
    </div>

