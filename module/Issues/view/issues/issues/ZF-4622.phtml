<h2>ZF-4622: Zend_View_Abstract::_addPath() strips double-slash from protocol</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Unit Tests: Improvement</dd>

    <dt>Created:</dt>
    <dd>2008-10-17T00:52:36.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2011-06-07T23:20:31.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.11.8 (07/Jul/11)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Adam Lundrigan (adamlundrigan)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_View</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-9000">ZF-9000</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>This code is run on the path in Zend_View_Abstract::_addPath():
{{$dir = rtrim($dir, DIRECTORY_SEPARATOR . DIRECTORY_SEPARATOR) . DIRECTORY_SEPARATOR;}}</p>

<p>This should be removed/improved because it prevents you from using custom stream wrappers. For example, I have implemented a few custom wrappers to work with a different template engine. Instead of hacking everything to work from non-filesystem sources, I just created some stream wrappers to do it behind the scenes. I register the protocol 'tpl', and then set the script path to 'tpl://' (i.e., to load a '<a>tpl://emaple.html</a>' template). But the code above strips off the extra slash so ZF tries to load '<a>tpl:/example.html</a>' which is incorrect.</p>

<p>Furthermore, the _addPath method is private so I can't override it in a subclass.</p>

<p>For now what I've been doing to work around the problem is to set the script path to '<a>tpl://null/</a>' to stop the rtrim from stripping the double slash from the protocol part.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Ralph Schindler (ralph) on 2011-02-18T14:59:25.000+0000</p> 
        <div class="body">
            <p>Is this still an issue?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Adam Lundrigan (adamlundrigan) on 2011-05-28T23:09:36.000+0000</p> 
        <div class="body">
            <p>No.  The unit test for ZF-9000 shows that this issue no longer exists:</p>

<pre class="highlight"><code>
/**
 * @group ZF-9000
 */
public function testAddingStreamSchemeAsScriptPathShouldNotReverseSlashesOnWindows()
{
    if (false === strstr(strtolower(PHP_OS), 'windows')) {
        $this-&gt;markTestSkipped('Windows-only test');
    }
    $view = new Zend_View();
    $path = rtrim('file://' . str_replace('\\', '/', realpath(dirname(__FILE__))), '/') . '/';
    $view-&gt;addScriptPath($path);
    $paths = $view-&gt;getScriptPaths();
    $this-&gt;assertContains($path, $paths, var_export($paths, 1));
}
</code></pre>

<p>It successfully adds a view path using the file:// scheme.  This unit test should be generalized for all platforms.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Adam Lundrigan (adamlundrigan) on 2011-05-28T23:35:23.000+0000</p> 
        <div class="body">
            <p>Added adapted unit test to trunk r24076
* Renamed test to: testAddingStreamSchemeAsScriptPathShouldNotMangleThePath
* Removed Windows-only constraint</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Adam Lundrigan (adamlundrigan) on 2011-06-07T23:07:07.000+0000</p> 
        <div class="body">
            <p>Merged updated unit test to release-1.11 in r24127</p>

        </div>
    </div>
    </div>

