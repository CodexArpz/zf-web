<h2>ZF-7698: Cannot 'describeTables' with SQLServer 2000, using Zend_Db_Adapter_Sqlsrv</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2009-08-27T04:23:25.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2010-08-09T01:05:38.000+0000</dd>

    <dt>Status:</dt>
    <dd>Closed</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Juozas Kaziukenas (juokaz)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Db</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Connecting to SQLServer 2000 using the latest Sqlsrv driver (1.1 CTP Aug 09 release), with the Microsoft SQL Server Native Client 2008, on a windows IIS server (6.0) using FastCGI and PHP v5.2.10</p>

<p>The describeTable function fails with the exception: 
'The connection cannot process this operation because there is a statement with pending results. To make the connection available for other queries, either fetch all results or cancel or free the statement. For more information, see the product documentation about the MultipleActiveResultSets connection option'</p>

<p>Line 436 in Zend\Db\Adapter\SqlSrv.php executes a stored procedure, but the script cannot run the next stored procedure on line 455 without first clearing the statement.</p>

<p>I propose unsetting the first statement after the result set is returned:</p>

<p>Line 439: unset($stmt);</p>

<p>This will resolve the describeTable issue with SQLServer 2000.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Victor Smirnov (victorsmirnov) on 2010-02-06T05:17:31.000+0000</p> 
        <div class="body">
            <p>Hi!</p>

<p>I face the same error as described here with Zend Framework 1.10.0.
And suggested solution works for me too.</p>

<p>It's just one line - why not fix this? :)</p>

<p>Thanks!</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bob Marley (qr123de) on 2010-02-25T03:32:41.000+0000</p> 
        <div class="body">
            <p>Same on 1.10.1 and also with MSSQL2008.</p>

<p>Zend_Db_Statement_Sqlsrv_Exception: The connection cannot process this operation because there is a statement with pending results.  To make
 the connection available for other queries, either fetch all results or cancel or free the statement.  For more information, see the produc
t documentation about the MultipleActiveResultSets connection option. in [...]\ZendFramework-1.10.1\library\Zend\Db\Statement\Sqlsrv.php o
n line 206</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Juozas Kaziukenas (juokaz) on 2010-04-16T07:57:17.000+0000</p> 
        <div class="body">
            <p>This adapter is not supposed to be used in Sql server 2000 (<a href="http://msdn.microsoft.com/en-US/library/cc296172">http://msdn.microsoft.com/en-US/library/cc296172</a>(v=SQL.90).aspx). I have added code to fix this though.</p>

<p>Fixed in r21882</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bob Marley (qr123de) on 2010-04-19T06:28:39.000+0000</p> 
        <div class="body">
            <p>Which adapter do you mean?
zend, php_sqlsvr or native sql driver</p>

<p>Here 
<a href="http://msdn.microsoft.com/en-US/library/cc296170%28v=SQL.90%29.aspx">http://msdn.microsoft.com/en-US/library/â€¦</a>
is a response from Ashay Chaudhary and he writes:
MSFT RESPONSE: Yes, it should work. SQL Server 2000 is the oldest version supported by this driver.</p>

<p>If you look into the driver documentation, you will also find that the sql2k server is supported.</p>

<p>but thats all for the native driver.
i didnt found informations about php_sqlsvr,
but it uses the native driver.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bob Marley (qr123de) on 2010-04-19T06:35:15.000+0000</p> 
        <div class="body">
            <p>I just to a look on your fixed code.</p>

<p>Maybe, you also should free the second statment on/after line 467.</p>

<p>{{// Discover primary key column(s) for this table.}}
{{$primaryKeysResult = $stmt-&gt;fetchAll(Zend_Db::FETCH_NUM);}}</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Juozas Kaziukenas (juokaz) on 2010-04-19T06:41:51.000+0000</p> 
        <div class="body">
            <p>Sqlsrv adapter uses sqlsrv driver, which requirements are here <a href="http://msdn.microsoft.com/en-US/library/cc296170">http://msdn.microsoft.com/en-US/library/cc296170</a>(v=SQL.90).aspx But that comment now confused me as in all texts 2005 is referenced as lowest version supported.</p>

<p>Let me get back to you after I speak with Ashay.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bob Marley (qr123de) on 2010-08-09T01:05:35.000+0000</p> 
        <div class="body">
            <p>isnt fixed in 1.10.7</p>

<p>my patch</p>

<p>public function describeTable($tableName, $schemaName = null)
    {
        /**
         * Discover metadata information about this table.
         */
        $sql    = "exec sp_columns @table_name = " . $this-&gt;quoteIdentifier($tableName, true);
        $stmt   = $this-&gt;query($sql);
        $result = $stmt-&gt;fetchAll(Zend_Db::FETCH_NUM);
unset($stmt);</p>

<pre><code>    $owner           = 1;
    $table_name      = 2;
    $column_name     = 3;
    $type_name       = 5;
    $precision       = 6;
    $length          = 7;
    $scale           = 8;
    $nullable        = 10;
    $column_def      = 12;
    $column_position = 16;

    /**
     * Discover primary key column(s) for this table.
     */
    $tableOwner = $result[0][$owner];
    $sql        = "exec sp_pkeys @table_owner = " . $tableOwner
                . ", @table_name = " . $this-&gt;quoteIdentifier($tableName, true);
    $stmt       = $this-&gt;query($sql);
</code></pre>

<p>unset($stmt);</p>

<pre><code>    $primaryKeysResult = $stmt-&gt;fetchAll(Zend_Db::FETCH_NUM);
    $primaryKeyColumn  = array();

    // Per &lt;a rel="nofollow" href="http://msdn.microsoft.com/en-us/library/ms189813.aspx"&gt;http://msdn.microsoft.com/en-us/library/&amp;hellip;&lt;/a&gt;,
    // results from sp_keys stored procedure are:
    // 0=TABLE_QUALIFIER 1=TABLE_OWNER 2=TABLE_NAME 3=COLUMN_NAME 4=KEY_SEQ 5=PK_NAME

    $pkey_column_name = 3;
    $pkey_key_seq     = 4;
    foreach ($primaryKeysResult as $pkeysRow) {
        $primaryKeyColumn[$pkeysRow[$pkey_column_name]] = $pkeysRow[$pkey_key_seq];
    }

    $desc = array();
    $p    = 1;
    foreach ($result as $key =&gt; $row) {
        $identity = false;
        $words    = explode(' ', $row[$type_name], 2);
        if (isset($words[0])) {
            $type = $words[0];
            if (isset($words[1])) {
                $identity = (bool) preg_match('/identity/', $words[1]);
            }
        }

        $isPrimary = array_key_exists($row[$column_name], $primaryKeyColumn);
        if ($isPrimary) {
            $primaryPosition = $primaryKeyColumn[$row[$column_name]];
        } else {
            $primaryPosition = null;
        }

        $desc[$this-&gt;foldCase($row[$column_name])] = array(
            'SCHEMA_NAME'      =&gt; null, // @todo
            'TABLE_NAME'       =&gt; $this-&gt;foldCase($row[$table_name]),
            'COLUMN_NAME'      =&gt; $this-&gt;foldCase($row[$column_name]),
            'COLUMN_POSITION'  =&gt; (int) $row[$column_position],
            'DATA_TYPE'        =&gt; $type,
            'DEFAULT'          =&gt; $row[$column_def],
            'NULLABLE'         =&gt; (bool) $row[$nullable],
            'LENGTH'           =&gt; $row[$length],
            'SCALE'            =&gt; $row[$scale],
            'PRECISION'        =&gt; $row[$precision],
            'UNSIGNED'         =&gt; null, // @todo
            'PRIMARY'          =&gt; $isPrimary,
            'PRIMARY_POSITION' =&gt; $primaryPosition,
            'IDENTITY'         =&gt; $identity,
        );
    }

    return $desc;
}
</code></pre>

        </div>
    </div>
    </div>

