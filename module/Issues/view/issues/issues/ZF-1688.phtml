<h2>ZF-1688: Long header lines containing non-printable characters are corrupted</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2007-07-07T06:24:21.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-02-12T15:36:21.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.7.5 (16/Feb/09)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Benjamin Eberlei (beberlei)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Mail</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-1950">ZF-1950</a></li>
            <li><a href="/issues/browse/ZF-1950">ZF-1950</a></li>
            <li><a href="/issues/browse/ZF-2532">ZF-2532</a></li>
            <li><a href="/issues/browse/ZF-4819">ZF-4819</a></li>
            <li><a href="/issues/browse/ZF-3641">ZF-3641</a></li>
            <li><a href="/issues/browse/ZF-3588">ZF-3588</a></li>
            <li><a href="/issues/browse/ZF-3912">ZF-3912</a></li>
            <li><a href="/issues/browse/ZF-264">ZF-264</a></li>
            <li><a href="/issues/browse/ZF-3865">ZF-3865</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
        <li><a href="/issues/secure/attachment/10935/example_zf-1688.txt">example_zf-1688.txt</a></li>
            <li><a href="/issues/secure/attachment/11700/MimeController.php">MimeController.php</a></li>
        </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>The following test case generates a mail with a non-readable subject line:</p>

<pre class="highlight"><code>
&lt;?php
require_once('Zend/Mail.php');
require_once('Zend/Mail/Transport/Smtp.php');
$mail = new Zend_Mail();
$mail-&gt;setSubject("Das ist eine Nachricht mit deutschen Ümläuten im Betreff und einer absichtlich extralangen Betreffzeile, statt dessen ohne Text");
$mail-&gt;setBodyText('no text');
$mail-&gt;addTo('recipient@domain.com');
$mail-&gt;send(new Zend_Mail_Transport_Smtp());
?&gt;</code></pre>

<pre class="highlight"><code>
=?iso-8859-1?Q?Das=20ist=20eine=20Nachricht=20mit=20deutschen=20=DCml=E4uten=20im=20Betreff=20und=20einer=20abs=?ichtlich=20extralangen=20Betreffzeile,=20statt=20dessen=20ohne=20Text?=
</code></pre>

<p>The reason of this bad behaviour is easily locateable: {{Zend_Mail::addSubject()}} first replaces line breaks by question marks, then {{_encodeHeader()}} wraps lines longer than 74 chars *only if they contain non-printable characters*, and afterwards {{_storeHeader()}} again replaces line breaks by question marks.</p>

<p>The problem applies to any type of header, not just the subject line.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Willy Schott (willydee) on 2007-07-08T14:32:15.000+0000</p> 
        <div class="body">
            <p>After digging a bit, I'd like to suggest having a look into Pear::Mail_Mime, and how RFC2047 conformance is ensured there. Using the same method for encoding header lines and body parts might not be sufficient since the requirements are different.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Darby Felton (darby) on 2007-07-19T16:16:23.000+0000</p> 
        <div class="body">
            <p>Assigning to [~nico] to initiate issue review.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Sergey Belov (arikon) on 2007-07-24T07:05:58.000+0000</p> 
        <div class="body">
            <p>I have such issue with long russian (non-printable) subjects too.
Is there any progress on fixing this bug? Hope, it will be fixed in 1.0.1.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Nico Edtinger (nico) on 2007-09-18T16:08:46.000+0000</p> 
        <div class="body">
            <p>Postponed because encoding will (most likely) be changed to iconv_mime_encode(), which should also fix this issue.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Nico Edtinger (nico) on 2007-09-18T16:09:40.000+0000</p> 
        <div class="body">
            <p>same fix</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Jan Pieper (jpieper) on 2007-11-26T04:02:31.000+0000</p> 
        <div class="body">
            <p>Please look at my attached mail. The break in header causes (compare X-Original-Subject with Subject) that mails with cyrillic characters can´t be decoded and will moved to junk.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ota Mares (ota) on 2008-03-25T09:22:05.000+0000</p> 
        <div class="body">
            <p>Whats the current status of this bugfix?
It seems that this error still occurs in ZF 1.5. Long subject headlines will break the email encoding.</p>

<p>I am unsure if i should create a new issue or not.</p>

<p><a href="http://www.nabble.com/ZF-1.5---Zend_Mail-and-long-subject-lines-td16097576s16154.html">http://nabble.com/ZF-1.5---Zend_Mail-and-long-subj…</a></p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Alexandre Lemaire (saeven) on 2008-07-29T21:48:55.000+0000</p> 
        <div class="body">
            <p>I can confirm the same problem.  Examining the headers, it appears that an extra newline is inserted into the header when the line length exceeds the length to which ZF formats the message's horizontal distance.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Willy Schott (willydee) on 2008-09-04T02:02:23.000+0000</p> 
        <div class="body">
            <p>A year has passed by since the fix was postponed. Now ZF 1.6 is out, and guess what? Still no fix.
For non-English people this issue is a blocker for using the Zend_Mail class (and most probably the Zend Framework) at all.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ota Mares (ota) on 2008-09-04T02:12:15.000+0000</p> 
        <div class="body">
            <p>I have to agree at some points with Willy, this bugreport is a year old, one with the most votes and a big deal breaker for most non-English users.
Pointing out the bug in the #zftalk.dev channel doesnt seem to have changed anything.</p>

<p>Somehow this is disappointing.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Alexandre Lemaire (saeven) on 2008-09-04T14:04:52.000+0000</p> 
        <div class="body">
            <p>Yes it is indeed disappointing, not only to users who are non-English, but moreso to people who develop with ZF, that want to use Zend_Mail in a product that targets non-English audiences.  If I were to commit some time to fixing this, are we able to submit patches to the ZF project?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-09-04T15:33:15.000+0000</p> 
        <div class="body">
            <p>Nico, what is your current take on this issue? It has a lot of votes, so I think we should address it ASAP.</p>

<p>,Wil</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ota Mares (ota) on 2008-09-12T06:17:03.000+0000</p> 
        <div class="body">
            <p>Still nothing ...</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Alexandre Lemaire (saeven) on 2008-09-12T11:00:14.000+0000</p> 
        <div class="body">
            <p>There is some kind comical relief in this though :)  We seemingly can't 'communicate' with the guy who wrote Zend_Mail! :)</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ota Mares (ota) on 2008-09-12T11:15:41.000+0000</p> 
        <div class="body">
            <p>Seems so, lets see if i can bring up the time to fix this, but i do not think so.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Alexandre Lemaire (saeven) on 2008-09-12T11:30:20.000+0000</p> 
        <div class="body">
            <p>We could write our own!  Zend_Mail_More!  I think though, that a proper solution would lie in separating headers from the body before any kind of decoding takes place.  I offered to dedicate some company time to fixing this (we're currently using imap as a fallback to solve this) since a contained solution would be nice; I just want some guarantee that it will not be work-wasted.  Our time, as is everyone's, is expensive.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Alexandre Lemaire (saeven) on 2008-09-29T10:35:21.000+0000</p> 
        <div class="body">
            <p>Some reliable alternatives then:</p>

<ol><li><p>the <em>very</em> old html_mime_mail class found here:
<a href="http://www.phpguru.org/static/mime.mail.html">http://www.phpguru.org/static/mime.mail.html</a></p></li>
<li><p>The PHP IMAP implementations.
<a href="http://php.net/IMAP">http://php.net/IMAP</a></p></li>
<li><p>MailParse
<a href="http://pear.php.net/package/mailparse">http://pear.php.net/package/mailparse</a></p></li>
</ol><p>Zend Mail is simply not fit for production with this fatal flaw</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Lukas Smith (lsmith) on 2008-10-07T01:12:02.000+0000</p> 
        <div class="body">
            <p>I am starting to notice a pattern with bugs I encounter in ZF:
- bug is already reported a year ago
- various solutions are proposed in the bug report
- a lot of people are suffering
- new ZF releases add all sorts of candy, but fail to address the open bugs</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Fred Blanc (fblanc) on 2008-10-10T00:37:24.000+0000</p> 
        <div class="body">
            <p>Hello,</p>

<p>If this can help some of you, for my part I set up the following solution:</p>

<p>&lt;?php</p>

<p>class My_Mail extends Zend_Mail {</p>

<pre><code>public function __construct() {
    parent::__construct();
}

/**
 * Sets the subject of the message
 *
 * @param   string    $subject
 * @return  Zend_Mail Provides fluent interface
 * @throws  Zend_Mail_Exception
 */
public function setSubject($subject)
{
    Zend_Debug::dump($subject, 'sujet 1');
    if ($this-&gt;_subject === null) {
        $subject = strtr($subject,"\r\n\t",'???');
        $this-&gt;_subject = $subject;
        $this-&gt;_storeHeader('Subject', $this-&gt;_subject);
    } else {
        /**
         * @see Zend_Mail_Exception
         */
        require_once 'Zend/Mail/Exception.php';
        throw new Zend_Mail_Exception('Subject set twice');
    }
    return $this;
}    
</code></pre>

<p>}</p>

<p>I know that this code is vulnerable in security but the subjects are hard-written within the application.
Do not use this if your subject is set by user in form.</p>

<p>It works for me waiting for a better solution.</p>

<p>Bests Regards,</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Fred Blanc (fblanc) on 2008-10-10T02:56:46.000+0000</p> 
        <div class="body">
            <p>I'm sorry the code is bad formatted, I try again with 'code' option.</p>

<pre class="highlight"><code>
&lt;?php

class My_Mail extends Zend_Mail {
    
    public function __construct() {
        parent::__construct();
    }
    
    /**
     * Sets the subject of the message
     *
     * @param   string    $subject
     * @return  Zend_Mail Provides fluent interface
     * @throws  Zend_Mail_Exception
     */
    public function setSubject($subject)
    {
        if ($this-&gt;_subject === null) {
            $subject = strtr($subject,"\r\n\t",'???');
            $this-&gt;_subject = $subject;
            $this-&gt;_storeHeader('Subject', $this-&gt;_subject);
        } else {
            /**
             * @see Zend_Mail_Exception
             */
            require_once 'Zend/Mail/Exception.php';
            throw new Zend_Mail_Exception('Subject set twice');
        }
        return $this;
    }    
}
</code></pre>

<p>Bests regards</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thorsten Suckow-Homberg (thorsten) on 2008-10-10T04:17:42.000+0000</p> 
        <div class="body">
            <p>From RFC 1522:</p>

<pre class="highlight"><code>
While there is no limit to the length of a multiple-line header
field, each line of a header field that contains one or more
encoded-words is limited to 76 characters.
</code></pre>

<p>Here's my take on this. Tested and seems to work fine. I had some problems when the subject only contains Umlauts (such as a string with the length of 128 chars consisting of only "äüöß"), which threw an iconv-error (error-code 7), but AFAIK this is reated to a bug in the iconv-extension.</p>

<pre class="highlight"><code>
    protected function _encodeHeader($value)
    {
        if (Zend_Mime::isPrintable($value)) {
            return $value;
        } else {

            $mimePrefs = array(
                'scheme'           =&gt; 'Q';
                'input-charset'    =&gt; $this-&gt;_charset;
                'output-charset'   =&gt; $this-&gt;_charset;
                'line-length'      =&gt; 74;
                'line-break-chars' =&gt; "\n";
            );

            $value = iconv_mime_encode('DUMMY', $value, $mimePrefs);
            $value = preg_replace("#^DUMMY\:\ #", "", $value);

            return $value;
        }
    }
</code></pre>

<p>I hope this helps you guys until this bug is officially fixed.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thorsten Suckow-Homberg (thorsten) on 2008-10-10T04:21:59.000+0000</p> 
        <div class="body">
            <p>You might want to replace the semicolons ( ; ) with commas ( , )</p>

<pre class="highlight"><code>
            $mimePrefs = array(
                'scheme'           =&gt; 'Q',
                'input-charset'    =&gt; $this-&gt;_charset,
                'output-charset'   =&gt; $this-&gt;_charset,
                'line-length'      =&gt; 74,
                'line-break-chars' =&gt; "\n"
            );
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Fred Blanc (fblanc) on 2008-10-10T04:31:50.000+0000</p> 
        <div class="body">
            <p>Thanks a lot Thorsten, it works fine. ;)</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Yo-han (yo-han) on 2008-11-21T02:09:54.000+0000</p> 
        <div class="body">
            <p>The fix works great. Why isn't this patch done in release 1.7?? Cost me 2 freaking hours to find this page and solve my problem.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Manylov Pavel (rap-kasta) on 2008-11-30T06:55:58.000+0000</p> 
        <div class="body">
            <p>And why bug-hunt day doesn't touch this? :(</p>

<p>//sorry for my english</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Andrei Nikolov (viperx) on 2008-12-12T05:52:45.000+0000</p> 
        <div class="body">
            <p>Unfortunatelly there is also a bug in iconv_mime_encode function, which makes the fix of Thorsten Suckow-Homberg not reliable :(</p>

<p><a href="http://bugs.php.net/bug.php?id=43314">http://bugs.php.net/bug.php?id=43314</a></p>

<p>and +1 for</p>

<p>"I am starting to notice a pattern with bugs I encounter in ZF: 
bug is already reported a year ago 
various solutions are proposed in the bug report 
a lot of people are suffering 
new ZF releases add all sorts of candy, but fail to address the open bugs "</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ota Mares (ota) on 2009-01-09T11:01:46.000+0000</p> 
        <div class="body">
            <p>Okay, so i decided to investigated the issue and found the problem.
Its not Zend_Mail alone but also Zend_Mime and the problem consists of two bugs. :)</p>

<p>It is a bit complicated and not so easy to explain so this became a fairly long read.
Also please feel free to correct me or ask questions if something is incorret or unclear!</p>

<p>Ill start with the RFC definitions that will be usede for referencing when pointing out the issues and that help to understand the problem a bit better.
And just for clarification a encoded header-value =?ISO-8859-1?Q?aaaaaa?= is referred as encoded-word.
The string "aaaaaa" is referred as encoded-text and "=?ISO-8859-1?Q?" and "?=" as delimiters, charset and encoding, i refer to this three as DCE.</p>

<p>RFC definitions:</p>

<h1>The key and value needs to be composed of printable US-ASCII characters, to accomplish this you have to encode the header value either with quoted-printable or base64.</h1>

<h1>An 'encoded-word' may not be more than 75 characters long, including  'charset', 'encoding', 'encoded-text', and delimiters. If it is desirable to encode more text than will fit in an 'encoded-word' of 75 characters, multiple 'encoded-word's (separated by CRLF SPACE) may be used.</h1>

<h1>While there is no limit to the length of a multiple-line header field, each line of a header field that contains one or more 'encoded-word's is limited to 76 characters. It doesnt have to be exactly 76 chars long but should be about that length, some chars more or less dont hurt.</h1>

<h1>The 'encoded-text' may not be continued in the next 'encoded-word'.</h1>

<h1>Each value MUST represent an integral number of characters. A multi-octet character may not be split across adjacent 'encoded-word's.</h1>

<p>Phew, in words that everyone understand this means:</p>

<h1>Take the Header-line, encode its value.</h1>

<h1>Calculate how long a line would be when it includes the current DCE.</h1>

<h1>Split the encoded-value to chunks with a newline at the calculated length WITHOUT breaking an encoded-char.</h1>

<h1>Place the DCE at the start and end of every line.</h1>

<h1>???</h1>

<h1>PROFIT!</h1>

<p>Lets take the following example subject:
This is än germän multiline sübject with randöm ümläuts.</p>

<p>After doing all four steps from above the header value should look like this (i used the method mb_encode_mimeheader for this result):
This is =?UTF-8?Q?=C3=A4n=20germ=C3=A4n=20multiline=20s=C3=BCbject=20with?=
 =?UTF-8?Q?=20rand=C3=B6m=20=C3=BCml=C3=A4uts=2E?=</p>

<p>This is how it looks like after the string has been encoded with Zend_Mime::encodeQuotedPrintable, notice the length and the missing space at the start of the second line which is required by point 2 of the definition list. The string gets splitted into to big chunks because the method does not take into account the DCE length.
This is =C3=A4n germ=C3=A4n multiline s=C3=BCbject with rand=C3=B6m =C3=BC=
ml=C3=A4uts.</p>

<p>And this is the final result after Zend_Mail::_encodeHeader has done its job.
=?UTF-8?Q?This=20is=20=C3=A4n=20germ=C3=A4n=20multiline=20s=C3=BCbject=20with=20rand=C3=B6m=20=C3=BC=
ml=C3=A4uts.?=</p>

<p>Besides the not so tragical error of the length, you will see that the DCE is missing at the end of the first line (?=) and the start of the second ( =?UTF-8?Q?)!
As also stated above all encoded-words need to be incased by the delimiters, charset and encoding syntax, this also means encoded-words on new lines! _encodeHeader simply concats the corresponding DCE at the start and end of the string. This would be the first major problem.
A not-so-good solution would be to replace every newline char with the DCE and a newline to get the desired result.
When using an iso charset this could work but not with utf8 or so called multibytechars and here comes the second issue into play.</p>

<p>When looking at the Zend_Mime code you will see that the code for splitting only checks if it found an equalsign, if yes it starts a newline.
Now take a look at the first umlaut we have, the "ä" that got encoded into "=C3=A4" because it consists of two bytes, now imagine that umlaut would start exactly at the 73 position of a string, Zend_Mime would break the char apart ....=C3= \n A4 and thus breaking our encoded string, resulting in a borked email.
This is the second major issue because point 5 from above states that a multi-octet char may not be splited accross adjacent encoded-words.</p>

<p>Lets recap the errors:</p>

<h1>When an encoded value gets splitted onto mulitple lines the DCE params are missing.</h1>

<h1>Zend_Mime::encodeQuotedPrintable is not multibyte compatible.</h1>

<h1>Zend_Mime is not build for encoding email headers!</h1>

<p>It would take alof of effort to fix both the issues but i think its possible. It definitively would need an own encoding method which is build for mail header encoding.</p>

<p>A pass-by solution, as long as the iconv method is broken, would be to use the much better mbstring methods. Please note that you need to explicitly activate the mbstring extension! This is the replace method we use at work, right now:</p>

<pre class="highlight"><code>
protected function _encodeHeader($value)
{
    if (!Zend_Mime::isPrintable($value)) {
        $value = mb_encode_mimeheader($value, $this-&gt;_charset, 'Q', "\n", 74);
    }
    
    return $value;
}
</code></pre>

<p>To be honest i encourage everyone to use the above method because there can be other issues with Zend_Mime and the way email headers get encoded. Also note that Zend_Mime works perfectly fine for the body encoding!</p>

<p>I really hope i explained the issue so we can start to discuss further steps.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ota Mares (ota) on 2009-01-09T11:04:25.000+0000</p> 
        <div class="body">
            <p>Awww F*CK, why cant you edit your own posts?</p>

<p>The above posted version is not the one i wanted to post, it includes some spelling errors and stuff. So please bear with me.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ota Mares (ota) on 2009-01-09T11:17:49.000+0000</p> 
        <div class="body">
            <p><em>sigh</em> I also noticed the stupid replacement of newlines and tabs in most of the set* methods with question marks.
I would suggest to replace the three question marks at the start of _encodeHeader with one space.</p>

<p>Oh and the RFCs i used for everyone who is interested into them
<a href="http://tools.ietf.org/html/rfc5322">http://tools.ietf.org/html/rfc5322</a>
<a href="http://tools.ietf.org/html/rfc2047">http://tools.ietf.org/html/rfc2047</a></p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by twk (twk) on 2009-01-10T22:01:23.000+0000</p> 
        <div class="body">
            <p>mb_encode_mimeheader works fine with Ota's example.
I also need a base64 encodingScheme so the Zend_Mime should be something like this.</p>

<p>iconv_mime_encode trick by Thorsten also works, but it will return the shorter lines
since it also counts 'DUMMY:' as the line length.</p>

<p>I don't think there is a good solution with Zend_Mime::encode, since the '?', ' ', '_' replacement
will overflow the line length.  We need to extend Zend_Mime::encode.</p>

<p>I hope the following code can help you.</p>

<pre class="highlight"><code>
protected static $_encodingScheme = Zend_Mime::ENCODING_QUOTEDPRINTABLE;

public static function setDefaultEncodingScheme($encodingScheme)
{
    // should check here if quotedprintable or base64?
    self::$_encodingScheme = $encodingScheme;
}
public static function getDefaultEncodingScheme()
{
    return self::$_encodingScheme;
}

protected function _encodeHeader($value)
{
  if (Zend_Mime::isPrintable($value)) {
      return $value;
  } else {
      $encodingScheme = self::getDefaultEncodingScheme();
      $schemeChar = $encodingScheme == Zend_Mime::ENCODING_BASE64 ? 'B' : 'Q';
      
      if (function_exists('mb_encode_mimeheader')) {
          $encodedValue = mb_encode_mimeheader($s, $this-&gt;_charset, $schemeChar);
      } else if (function_exists('iconv_mime_encode')) {
          // shorter but no problem
          $s = iconv_mime_encode('X', $s, array(
              'scheme'           =&gt; $schemeChar,
              'output-charset'   =&gt; $this-&gt;_charset,
              'line-break-chars' =&gt; "\r\n ",
          ));
          $s = preg_replace("#^X\:\ #", "", $s);
      } else {
          $prefix = '=?' . $this-&gt;_charset . '?' . $schemeChar . '?';
          $suffix = '?=';
          $lineLength = Zend_Mime::LINELENGTH - strlen($prefix) - strlen($suffix);
          $lineEndChar = Zend_Mime::LINEEND;
          if ($encodingScheme == Zend_Mime::ENCODING_BASE64) {
              $encodedValue = Zend_Mime::encodeBase64($value, $encodeScheme, $lineLength, $lineEndChar);
          } else ($encodeScheme == Zend_Mime::ENCODING_QUOTEDPRINTABLE) {
              $encodedValue = Zend_Mime::encodeQuotedPrintable($value, $encodeScheme, $lineLength, $lineEndChar);
              // FIXME This replacement may exceeds the max linelength!  Maybe Zend_Mime::encode should have the additional parameters to set the replace character set
              $quotedValue = str_replace(array('?', ' ', '_'), array('=3F', '=20', '=5F'), $quotedValue);
          } else {
              throw new Zend_Mail_Exception('Unsupported encoding scheme "' . $encodingScheme '"');
          }
          $quotedValue = str_replace($lineEndChar, $suffix . "\r\n " . $prefix, $quotedValue);
          $encodedValue = $prefix . $quotedValue . $suffix;
      }
      
      return $encodedValue;
  }
}
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by old of Satoru Yoshida (yoshida@zend.co.jp) on 2009-01-10T22:05:04.000+0000</p> 
        <div class="body">
            <p>Hello, Ota Mares.</p>

<p>mb_encode_mimeheader needs  mbstring extension is loaded.</p>

<p>I usually use the extension for treating Japanese.
  But I do not know Europians and other peoples use the extension.</p>

<p>Do you know?
If there is no problem that the mbstring extension will be required,  I will try to fix this issue.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ota Mares (ota) on 2009-01-11T06:09:57.000+0000</p> 
        <div class="body">
            <p>Twk's method would be a nice solution if there wouldnt be the problems with the iconv or zend_mime method. (Btw. why the hell do you people use preg_replace for removing the first x chars, use substr instead.)</p>

<p>Satoru, i cannot speak for all europeans :) but most hosting servers have it activated and still its pretty easy to install. Anyway by default the extension is not loaded!</p>

<p>Currently we are in a kind of dilemma, because iconv_mime_encode has a serious bug that results in broken mime headers if a unspecified string length is reached.
See the link above from Andrei Nikolov, i wouldnt use that method until its fixed.
Zend_Mime is not build for email header encoding and the mbstring extension needs to be present.</p>

<p>To create a fix that would be extension indepentend you need to rewrite parts of zend_mail mainly removing the, to me unexplainable, replacement of newlines with question marks (i would change that anyway) and as stated above create a new encoding method for email headers. The second part would be the hardest, mainly because you need to study all the rfc documents and need to apply the rules for email mime headers.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by old of Satoru Yoshida (yoshida@zend.co.jp) on 2009-01-11T10:02:22.000+0000</p> 
        <div class="body">
            <p>Solved in SVN r13598</p>

<p>I will be happy if you evaluate this fix.
I do not copy to release-1.7 branch now.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by old of Satoru Yoshida (yoshida@zend.co.jp) on 2009-01-11T17:39:34.000+0000</p> 
        <div class="body">
            <p>Additional change in SVN r13602.</p>

<p>Adds _filterOther() function instead of strtr("\r\n\t", '???') .</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ota Mares (ota) on 2009-01-12T01:46:38.000+0000</p> 
        <div class="body">
            <p>I will evaluate the fix during the course of this day.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ota Mares (ota) on 2009-01-12T08:07:52.000+0000</p> 
        <div class="body">
            <p>Overall i like the changes, you also fixed some other bugs i wanted to report/look into. :)</p>

<p>Still i suggest to temporarly remove the iconv and zend_mail code parts and  make zend_mail mbstring dependant until the specific problems/bugs are fixed.
The iconv method has a very frustrating bug that can cause more harm then good and zend_mime will break the encoded string when utf8 is used, both problems where stated more then once in the comments.</p>

<p>I found out that you should set the internal encoding of mb before using the mb_encode_mimeheader method, else you will get some weird results from the method. (This is also stated in the PHP documentation). And i interpreted the documentation wrong, the fourth param "indent" is not the overall linelength but then length of the header key, its optional so i would remove it.</p>

<pre class="highlight"><code>protected function _encodeHeader($value)
{
    if (!Zend_Mime::isPrintable($value)) {
        // pick the encoding to use. quoted-printable or base64
        $encoding = ($this-&gt;_encodingOfHeaders === Zend_Mime::ENCODING_QUOTEDPRINTABLE) ? 'Q' : 'B';
        
        // set mb internal encoding, this should be the same encoding as used for mb_encode_mimeheader
        mb_internal_encoding($this-&gt;_charset);
        
        $value = mb_encode_mimeheader($value, $this-&gt;_charset, $encoding, Zend_Mime::LINEEND);
    }
    
    return $value;
}</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ota Mares (ota) on 2009-01-12T08:20:54.000+0000</p> 
        <div class="body">
            <p>Oh and could you please change all "encodingofHeaders" instances to "headerEncoding", the former is just wrong :x</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by twk (twk) on 2009-01-12T18:24:07.000+0000</p> 
        <div class="body">
            <p>Yoshida-san, thanks for commiting.</p>

<p>Ota,
iconv_ issue (<a href="http://bugs.php.net/bug.php?id=43314">http://bugs.php.net/bug.php?id=43314</a>) has a status "No Feedback".  It would be a reason the problem iss not fixed for a long time. 
If you know the reproduceable input/output value pair with the latest php release build, could you please add them there?</p>

<p>mb_internal_encoding is necessary and probably you need to rollback the current value.</p>

<pre class="highlight"><code>
$current_internal_encoding = mb_internal_encoding();
mb_internal_encoding($this-&gt;_charset);        
$value = mb_encode_mimeheader($value, $this-&gt;_charset, $encoding, Zend_Mime::LINEEND);
mb_internal_encoding($current_internal_encoding);
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by old of Satoru Yoshida (yoshida@zend.co.jp) on 2009-01-13T08:24:19.000+0000</p> 
        <div class="body">
            <p>Additional commit in SVN r13612.</p>

<p>Hi, Ota Mares,  thank You for evaluating.</p>

<p>At first, I find the 'Q' encoding causes error in the iconv_mime_encode function .
So I will check return value of the function.</p>

<p>At second,  I add mb_internal_encoding() function.</p>

<p>At third, I remove forth parameter from mb_encode_mimeheader() function.</p>

<p>At last , I change the _encodingOfHeaders to _headerEncoding .</p>

<p>Thanks Your points!</p>

<p>Hi, twk, thank Your proposed logics.</p>

<p>I add as following.
$formerEncoding = mb_internal_encoding() .</p>

<p>They help me a lot!</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Benjamin Eberlei (beberlei) on 2009-01-13T09:19:29.000+0000</p> 
        <div class="body">
            <p>Bug has been reopened as mbstring is not allowed to be used for this fix.</p>

<p>I have therefore added two new functions to Zend_Mime which encode Mime Headers correctly. I have added unitt-tests to both Zend_Mail and  Zend_Mime testsuites for this functionality and commited the fixes into the SVN repo.</p>

<p>Before i close this bug again, please re-check that the fixes are working for you please.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by old of Satoru Yoshida (yoshida@zend.co.jp) on 2009-01-13T13:36:26.000+0000</p> 
        <div class="body">
            <p>Hi , Benjamin.
I find the lineLength parameter of encodeQuotedPrintableHeader() takes no effect .</p>

<p>encodeBase64Header is OK,  thank you. :-)</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Benjamin Eberlei (beberlei) on 2009-01-13T14:27:26.000+0000</p> 
        <div class="body">
            <p>Hello Saturo,</p>

<p>i have added a testcase (testLineLengthInQuotedPrintableHeaderEncoding()) to Zend_MimeTest which checks for the lineLength parameter.</p>

<p>Could you add your test-case that produces the failure?</p>

<p>But: There is one case, when no line-break will ocour at the given linelength: When the complete line has only encoded chars (non US-ascii), because in this case the algorithm doesn't know where to cut.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by old of Satoru Yoshida (yoshida@zend.co.jp) on 2009-01-14T04:41:54.000+0000</p> 
        <div class="body">
            <p>Hi, Benjamin.
I attach code for reproduce.</p>

<p>The  code contains 4 patterns.</p>

<p>B-1. Zend_Mime::encodeBase64Header
Q-1. Zend_Mime::encodeQuotedPrintableHeader
B-2. Base64 by mb_encode_mimeheader
Q-2. QuotedPrintable by mb_encode_mimeheader</p>

<p>Results of the B-1 and B-2 are almost equal,  but  the Q-1 differs from the Q-2.
The difference is the result of Q-1 contains no linefeeds.</p>

<p>For example,
Result of the Q-1:
=?UTF-8?Q?=E3=81=84=E3=82=8D=E3=81=AF=E3=81=AB=E3=81=BB=E3=81=B8=E3=81=A8=E3=81=A1=E3=82=8A=E3=81=AC=E3=82=8B=E3=82=92=E3=82=8F=E3=81=8B=E3=82=88=E3=81=9F=E3=82=8C=E3=81=9D=E3=81=A4=E3=81=AD=E3=81=AA=E3=82=89=E3=82=80?=</p>

<p>Result of the Q-2
 =?UTF-8?Q?=E3=81=84=E3=82=8D=E3=81=AF=E3=81=AB=E3=81=BB=E3=81=B8=E3=81=A8?=
 =?UTF-8?Q?=E3=81=A1=E3=82=8A=E3=81=AC=E3=82=8B=E3=82=92=E3=82=8F=E3=81=8B?=
 =?UTF-8?Q?=E3=82=88=E3=81=9F=E3=82=8C=E3=81=9D=E3=81=A4=E3=81=AD=E3=81=AA?=
 =?UTF-8?Q?=E3=82=89=E3=82=80?=</p>

<p>I hope it will help for you.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by old of Satoru Yoshida (yoshida@zend.co.jp) on 2009-01-14T07:53:04.000+0000</p> 
        <div class="body">
            <p>Hi, Benjamin.
I take some fix in encodeBase64Header() function  in SVN r13625,  and I think this issue seems to be solved.</p>

<p>I think I have better to use base64 encoding more than quoted printable encoding in the case of my last comment.</p>

<p>Because If header value contains only multibyte characters, it causes no new line, 
but the new line may destroy multibyte characters where is acrossed between former line and next line.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Benjamin Eberlei (beberlei) on 2009-01-14T15:17:37.000+0000</p> 
        <div class="body">
            <p>you are correct, i guess base64 encoding is the way to go on multibyte characters.</p>

<p>i have made another commit to this issue, breaking only at space and at sentence ending characters such as .!: and so on. This is to support clients that produce a space when words are broken between lines.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Benjamin Eberlei (beberlei) on 2009-01-18T10:26:31.000+0000</p> 
        <div class="body">
            <p>Since i got no complaints about the fix i am resolving issue, will be included in next minor release 1.8</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by old of Satoru Yoshida (yoshida@zend.co.jp) on 2009-01-30T21:11:36.000+0000</p> 
        <div class="body">
            <p>I copied to 1.7 branch at SVN r13886.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by old of Satoru Yoshida (yoshida@zend.co.jp) on 2009-02-02T18:19:50.000+0000</p> 
        <div class="body">
            <p>Sorry,  not in 1.7.4.  I think  it will be released in next minor or major.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Benjamin Eberlei (beberlei) on 2009-02-12T15:36:21.000+0000</p> 
        <div class="body">
            <p>This will be in 1.7.5</p>

        </div>
    </div>
    </div>

