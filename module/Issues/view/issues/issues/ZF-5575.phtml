<h2>ZF-5575: Shared memory segment and semaphore not being deleted in ZendX_Console_Process_Unix</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2009-01-17T17:20:53.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-11-20T20:52:58.000+0000</dd>

    <dt>Status:</dt>
    <dd>Closed</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
        None
                    </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>ZendX_Console_Process_Unix</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-6047">ZF-6047</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>The shared memory segment and semaphore files (*.shm and *.sem) are not being deleted when the process is stopped. In the _cleanProcessContext method, on lines 387 and 388, there are the following statements, which are no-ops:</p>

<pre><code>    $this-&gt;_ipcSegFile;
    $this-&gt;_ipcSemFile;
</code></pre>

<p>The above is probably a typo. IMO, it should be as follows:</p>

<pre><code>    unlink($this-&gt;_ipcSegFile);
    unlink($this-&gt;_ipcSemFile);
</code></pre>

<p>I can submit a patch if needed. Let me know the steps I need to take if this is preferred.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Ben Scholzen (dasprid) on 2009-01-19T00:43:01.000+0000</p> 
        <div class="body">
            <p>When creating a patch, include a new unit test which makes sure, that the new case works. Also make sure, that all the other unit tests still work after your modifications.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Benjamin Eberlei (beberlei) on 2009-01-19T14:28:01.000+0000</p> 
        <div class="body">
            <p>take it ben :-)</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ben Scholzen (dasprid) on 2009-03-17T06:26:21.000+0000</p> 
        <div class="body">
            <p>Fixed with r14345 and merged into 1.7 release branch with r14346.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by James Dempster (letssurf) on 2009-03-18T14:40:58.000+0000</p> 
        <div class="body">
            <p>Is there a need to use ftok to create an id? I think that a random number might do?
Also I don't think the files are bing removed because _cleanProcessContext is only ever called if your killing the process by using stop. So a process that successfully completes never gets cleaned up.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ben Scholzen (dasprid) on 2009-03-19T01:20:07.000+0000</p> 
        <div class="body">
            <p>Hm, actually it's not required if I read it right from the php.net comments of ftok. I'll look into it again.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Dominik Krebs (shihan) on 2009-04-20T01:40:13.000+0000</p> 
        <div class="body">
            <p>It seems the created ipc-segments are not removed after running the _run-function. 
The stop function is not being executed after the process terminates.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ben Scholzen (dasprid) on 2009-04-20T02:02:25.000+0000</p> 
        <div class="body">
            <p>Post 1.8 I will take a deeper look and do some internal refactoring to get rid of this issue.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ben Scholzen (dasprid) on 2009-04-20T02:07:27.000+0000</p> 
        <div class="body">
            <p>Post 1.8 I will take a deeper look and do some internal refactoring to get rid of this issue.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by James Dempster (letssurf) on 2009-04-20T02:12:55.000+0000</p> 
        <div class="body">
            <p>try adding this</p>

<pre class="highlight"><code>
/**
 * Destructor
 *
 * Cleans up
 */
public function __destruct() {
    // mark the shared memory object for deletion
    // read and write can still happen
    // no more process can attach
    // when the last process is detached then the
    // memory object is deleted
    shmop_delete($this-&gt;_internalIpcKey);
    shmop_close($this-&gt;_internalIpcKey);
}
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Jessie Hernandez (jrhernandez) on 2009-08-03T12:12:04.000+0000</p> 
        <div class="body">
            <p>FYI, in the updated version from ZF 1.9 I ran into cases where the shared memory segments remained for a child even though the child was killed. Since the SHM segments remained, and isRunning is set to false only after everything has been cleaned up, the parent process remained running indefinitely.</p>

<p>FWIW, the fix I made for this was to call $this-&gt;stop() right before the exit(0) call in the start() method (see below). Before the change my script would always hang, and after this change the script consistently ends successfully after the children are stopped. I still don't understand fully why it works, as from what I see in the class, $this-&gt;_pid is null for the child, and stop() only cleans up the process context if $this-&gt;_pid has a nonzero value.</p>

<pre><code>        // Destroy the child after _run() execution. Required to avoid
        // unuseful child processes after execution
        $this-&gt;stop();
        exit(0);
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Rob Allen (rob) on 2012-11-20T20:52:58.000+0000</p> 
        <div class="body">
            <p>Bulk change of all issues last updated before 1st January 2010 as "Won't Fix".</p>

<p>Feel free to re-open and provide a patch if you want to fix this issue.</p>

        </div>
    </div>
    </div>

