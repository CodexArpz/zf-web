<h2>ZF-1882: Improve integer validation</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2007-08-27T06:48:54.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2008-12-19T06:22:34.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.8.0 (30/Apr/09)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Thomas Weidner (thomas)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Validate</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
        <li><a href="/issues/secure/attachment/11255/Int-V3.php.patch">Int-V3.php.patch</a></li>
            <li><a href="/issues/secure/attachment/11256/Int-V4.php.patch">Int-V4.php.patch</a></li>
            <li><a href="/issues/secure/attachment/11254/Int.php.patch">Int.php.patch</a></li>
            <li><a href="/issues/secure/attachment/11253/Int.php.patch">Int.php.patch</a></li>
        </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Right now Zend_Validate_Int uses intval() function while checking if given value is valid integer. There is a problem with that solution because this validation rejects all correct integers that exceedes bounds of integer type. Also note that this method of validation sometimes also approves values like 0.00000001 as valid integers, which is wrong.</p>

<p>This can be easy fixed by using  regular expressions instead of intval() function.</p>

<p>This code of isValid() method:</p>

<pre class="highlight"><code>
if (strval(intval($valueFiltered)) != $valueFiltered) {
      $this-&gt;_error();
      return false;
}
</code></pre>

<p>can be replaced by the following one:</p>

<pre class="highlight"><code>
if (!preg_match('/^[-+]?((\d+(\.0*)?)|(0x[\dABCDE]+))$/', $valueFiltered)) {
      $this-&gt;_error();
      return false;
}
</code></pre>

<p>This improvement will validate all, even extremely long integer values (passed as string of course, because we don't want value beyond integer type). This can be usefull when for example when working on databases that accepts wider range of integer values than php or when working on GMP values converted to string.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2008-01-22T04:29:33.000+0000</p> 
        <div class="body">
            <p>This leads to another problem:</p>

<p>When the locale of your environment is set to another value than 'en' the validation will not work anymore.</p>

<p>If you define 1000 as integer and cast it to an string you will get '1.000' when 'de' is set as locale or '1 000' if your locale is set to 'fr'.</p>

<p>You regex will not work in such environments...</p>

<p>The simplest solution would be to use Zend_Locale_Format::isInteger($number) for such cases... or as fallback to intval().</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-04-18T13:12:00.000+0000</p> 
        <div class="body">
            <p>This doesn't appear to have been fixed in 1.5.0. Please update if this is not correct.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-04-18T16:55:03.000+0000</p> 
        <div class="body">
            <p>Please evaluate and categorize/assign as necessary.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Andries Seutens (andries) on 2008-04-22T12:25:11.000+0000</p> 
        <div class="body">
            <p>Please review the attached patch.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Darby Felton (darby) on 2008-04-22T12:37:30.000+0000</p> 
        <div class="body">
            <p>The patch does not make clear the changes; could you re-attach a new version (e.g., with correct line endings)? Still, I'll apply the patch to my local copy and diff without regard to white space.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Darby Felton (darby) on 2008-04-22T12:43:36.000+0000</p> 
        <div class="body">
            <p>It appears this is just output of svn diff, not a {{patch}}-compatible file; please attach such a new version.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Andries Seutens (andries) on 2008-04-22T13:00:29.000+0000</p> 
        <div class="body">
            <p>Sorry, i used wrong line endings. please check the attached file (new one)</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Darby Felton (darby) on 2008-04-22T13:14:37.000+0000</p> 
        <div class="body">
            <p>{{setFailOnPhpIntegerBoundary()}} should return {{$this}} for convenience.</p>

<p>Also, it appears that {{$this-&gt;_error()}} is called without differentiating the cause of the error. It would be nice to expose the specific cause of the validation failure to the developer, rather than hiding it. Put another way, multiple causes of validation failure are producing the same validation failure message, which hides information that could otherwise be exposed to the application (e.g., for logging, usability analysis, etc.).</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Andries Seutens (andries) on 2008-04-22T13:36:53.000+0000</p> 
        <div class="body">
            <p>changes taken into account, please verify</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Andries Seutens (andries) on 2008-04-22T13:45:44.000+0000</p> 
        <div class="body">
            <p>V3 attached, please verify</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2008-04-22T13:54:18.000+0000</p> 
        <div class="body">
            <p>In my eyes this patch is problematic.</p>

<p>Zend_Validate_Int accepts only english notation regarding to replacing 
the actual set number tokens to english.
But when you use Zend_Locale_Format you rely to the last set default 
locale which can differ from the one from setlocale.</p>

<p>I would ask you to fix the used locale to english to prevent this problem.</p>

<p>Also you should create a new issue to allow the usage of ANY locale 
which would allow the user to check for inputs of foreign locales by 
will. This would allow the same benefit as already available in 
Zend_Validate_Date.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Andries Seutens (andries) on 2008-04-22T13:59:53.000+0000</p> 
        <div class="body">
            <p>Thomas,</p>

<p>I've taken your suggestions into account, could you verify (V4).</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Emanuele Deserti (lord_lele) on 2008-05-09T06:00:24.000+0000</p> 
        <div class="body">
            <p>This issue also affect Zend_Validate_Float.
If you set another locale (with setlocale()) the validator will fail, because PHP function floatval() return a value with the correct (for the locale) decimal separator, but Zend_Validate_Float replace the separator with a dot '.'</p>

<p>It's possible to fix Zend_Validate_Float to take in account the current locale?</p>

<p>Here is the code:</p>

<pre class="highlight"><code>
setlocale('it_IT.UTF-8');
$number = 123.15;
$float = new Zend_Validate_Float();
if ($float-&gt;isValid($number)) {
    echo $number . " is a valid float.";
} else {
    echo $number . " is NOT a valid float.";
}
</code></pre>

<p>This output, ever, "is NOT a valid float"...
and even with:</p>

<pre class="highlight"><code>
$number = floatval(123.15);
// or
$number = floatval(123,15);
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-12-04T13:28:47.000+0000</p> 
        <div class="body">
            <p>Andries, what is the status of this issue? Has it already been committed? Are you just waiting for Thomas' feedback?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2008-12-19T06:19:11.000+0000</p> 
        <div class="body">
            <p>New feature implemented with r13375</p>

        </div>
    </div>
    </div>

