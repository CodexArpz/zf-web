<h2>ZF-5336: Validatation using Zend_Validate_Between return incorrect result</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2008-12-22T01:33:45.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2008-12-22T06:39:52.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Arthur Wiebe (artooro)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Thomas Weidner (thomas)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Filter_Input</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Here's my test case (reproduced using both ZF 1.7.1 and 1.7.2):</p>

<p>PHP:</p>

&lt;?php
require_once('Zend/Filter.php');
require_once('Zend/Filter/Input.php');
require_once('Zend/Validate/Between.php');

$validators = array(
    'username' =&gt; 'Alnum',
    'key' =&gt; array(
        'Alnum',
        new Zend_Validate_Between(13, 128),
    ),
    'password' =&gt; array('presence' =&gt; 'required'),
);

$input = array(
    'username' =&gt; 'thisisme',
    'key' =&gt; '1234567891111416', // 16 characters
    'password' =&gt; 'mywrittensecret'
);

$input = new Zend_Filter_Input(NULL, $validators, $input);
if ($input-&gt;hasInvalid() || $input-&gt;hasMissing()) {
    echo '<pre>' . print_r($input-&gt;getMessages(), true) . '</pre>';
}
?&gt;

<hr /><h2>Outputs:</h2>

<p>Array
(
    [key] =&gt; Array
        (
            [notBetween] =&gt; '1234567891111416' is not between '13' and '128', inclusively
        )</p>

<p>)</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2008-12-22T06:06:25.000+0000</p> 
        <div class="body">
            <p>Sorry but '1234567891111416' is far away from '128'.
The error message you are getting is correct and not a false behaviour.</p>

<p>When you want to validate the string length then you have to use the StringLength validator.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2008-12-22T06:10:27.000+0000</p> 
        <div class="body">
            <p>Closed as no issue</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Arthur Wiebe (artooro) on 2008-12-22T06:39:51.000+0000</p> 
        <div class="body">
            <p>Thanks Thomas, perhaps the documentation could be made more clear on this as well.</p>

<p>Currently it states:
Returns true if and only if $value is between the minimum and maximum boundary values. The comparison is inclusive by default ($value may equal a boundary value), though this may be overridden in order to do a strict comparison,...</p>

<p>To me that sounds like (minimum &lt;= $value &lt;= maximum) but I supppose it's actually (minimum &gt;= $value &gt;= maximum)</p>

<p>Then the rest of the paragraph says:
" where $value must be strictly greater than the minimum and strictly less than the maximum. "
Which at first glance seems to contradict.</p>

<p>Instead it should read something like this:</p>

<p>Returns true if and only if $value is outside (greater or less than) the minimum and maximum boundary values. The comparison is inclusive by default ($value may equal a boundary value), though this may be overridden in order to do a strict comparison, where $value must be strictly greater than the minimum and strictly less than the maximum. "</p>

        </div>
    </div>
    </div>

