<h2>ZF-5559: Zend_Form::isErrors() could check for errors on the fly</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2009-01-15T12:36:43.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-11-20T20:53:02.000+0000</dd>

    <dt>Status:</dt>
    <dd>Closed</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
        None
                    </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Form</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-5150">ZF-5150</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>At the end of isValid(), _errorsExist is set based on the return value. isErrors() then returns the value of _errorsExist.</p>

<p>What I find a common usage pattern is to override isValid() in many forms to add an additional check or two, without having to write a validator which I would only use once anyways. Something like this</p>

<pre class="highlight"><code>
    public function isValid($data)
    {
        $valid = parent::isValid($data);

        // Check that password and passwordConfirmation match
        if ($this-&gt;password-&gt;getValue() !== $this-&gt;passwordConfirmation-&gt;getValue()) {
            $this-&gt;passwordConfirmation-&gt;addErrorMessage('Not the same as password.')-&gt;markAsError();
            $valid = false;
        }

        return $valid;
    }
</code></pre>

<p>Now imagine the passwords don't match. The call to isValid() will return false, as expected. However, if you subsequently call $form-&gt;isErrors(), it will return FALSE (i.e., "no errors").</p>

<p>The reason for this is that _errorsExist is set in the base class, before everything was validated (in the derived class).</p>

<p>Of course, I could have called $this-&gt;markAsError() manually, but IMO isErrors() should always return true if a previous call to isValid() returned false, for the sake of consistency, like it does with the base class.</p>

<p>Therefore I propose, if there aren't other problems that I'm missing, that isErrors() is reworked to something like this:</p>

<pre class="highlight"><code>
    /**
     * Are there errors in the form?
     * 
     * @return bool
     */
    public function isErrors()   
    {
        $errors = $this-&gt;_errorsExist;

        if (!$errors) {
            foreach ($this-&gt;getElements() as $key =&gt; $element) {
                if ($element-&gt;hasErrors())
                    $errors = true;
                    break;
                }
            }
        }

        return $errors;
    }
</code></pre>

<p>This way if form is markAsError()'d manually it will still return that is has errors (even if the validators didn't report one), but it will never say that it doesn't have errors when isValid() reports it does.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Claude Duvergier (cduv) on 2009-09-18T05:50:18.000+0000</p> 
        <div class="body">
            <p>I second that issue (I just ran into that strange behaviour of Zend_Form). I would also file it as a bug instead of a simple improvement.</p>

<p>To complete Jaka Jancar's fix, I would also add a loop to check for sub forms :{</p>

<pre class="highlight"><code>
foreach ($this-&gt;getSubForms() as $key =&gt; $subForm) {
                if ($subForm-&gt;isErrors()) {
                    $errors = true;
                    break;
                }
            }
{</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Rob Allen (rob) on 2012-11-20T20:53:02.000+0000</p> 
        <div class="body">
            <p>Bulk change of all issues last updated before 1st January 2010 as "Won't Fix".</p>

<p>Feel free to re-open and provide a patch if you want to fix this issue.</p>

        </div>
    </div>
    </div>

