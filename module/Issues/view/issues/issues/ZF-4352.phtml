<h2>ZF-4352: Zend_Validate_Alpha / Zend_Validate_Alnum CAST to string</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2008-09-22T12:26:20.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-06-08T13:44:47.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.9.0 (31/Jul/09)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Christopher Vogt (cvogt)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Thomas Weidner (thomas)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Filter</li>
            <li>Zend_Validate</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>{{$v = new Zend_Validate_Alpha();</p>

<h2>echo $v-&gt;isValid( array('%&amp;$!!') ) ? 'valid' : 'invalid';}}</h2>

<p>expected result:</p>

<h2>invalid</h2>

<p>actual result:</p>

<h2>valid</h2>

<p>The reason is, that _Alpha and _Alnum cast the validation target to string in the line {{$valueString = (string) $value;}}. I think a validator should never cast the value it validates without examining the type. It should rather check if the value has an expected type. So the line {{$valueString = (string) $value;}} should be replaced by something like
{{ if( is_int($value) ){
$valueString = (string) $value;
} elseif( is_string($value) ) {
$valueString = $value;
} else {
return false;
}
}}</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by old of Satoru Yoshida (yoshida@zend.co.jp) on 2008-10-07T00:28:49.000+0000</p> 
        <div class="body">
            <p>I think fear of  inconsistency between these modules and another Zend_Validate_* (and Zend_Filter_*) modules if we carry out as this report.</p>

<p>For example , Zend_Validate_Digits also returns 'invalid' against array.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by old of Satoru Yoshida (yoshida@zend.co.jp) on 2008-10-07T00:32:12.000+0000</p> 
        <div class="body">
            <p>Sorry, I mistook to write.</p>

<p>Correct  : Zend_Validate_Digits also returns 'valid' against array.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Christopher Vogt (cvogt) on 2008-10-08T05:06:24.000+0000</p> 
        <div class="body">
            <p>The current Zend_Validate_Alpha / Zend_Validate_Alnum behavior is clearly broken in my eyes. People use these classes to validate their input and they expect that Alpha or Alnum strings to be valid. Arrays are neither neither strings, nor does Alpha or Alnum make sense for them.</p>

<p>If you fear inconsistency this means the bug could be in other Classes as well. However this does not mean that not fixing it makes the situation any better. It should be fixed in every broken class then. Besides, I cannot replicate Zend_Validate_Digits validating an array as valid.</p>

<p>Fixing this bug does not break backwards compatibility in my eyes. I don't see any reason for not fixing it and I strongly oppose against "Won't Fix".</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by old of Satoru Yoshida (yoshida@zend.co.jp) on 2008-10-08T23:00:32.000+0000</p> 
        <div class="body">
            <p>Hi, Christopher.
I reopen this issue for you.</p>

<p>I will be happy if more useful idea will come on there.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Christopher Vogt (cvogt) on 2008-10-09T03:40:16.000+0000</p> 
        <div class="body">
            <p>Thanks :).</p>

<p>I would take a white-listing approach for types and return false for all types not white-listed. The question is what should be on the white-list.</p>

<p>string: yes
object: rather yes, maybe only if it implements __toString ?
integer: yes, but only for Alnum
boolean: maybe yes for backwards-compatibility?
NULL: maybe yes for backwards-compatibility?
float: maybe yes for Alnum for backwards-compatibility? (because: (string) 1.0 === "1")
array: no
resource: no</p>

<p>The implementation could be like the following at the beginning of the isValid method:</p>

<p>if( !is_string($value) &amp;&amp; !is_int($value) &amp;&amp; !etc. ){
    return false;
}</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Nils Bujny (budcha) on 2009-04-04T10:26:55.000+0000</p> 
        <div class="body">
            <p>Hi,
stumbled today into this "bug".</p>

<p>Used Zend_Validate not for user input from Forms etc, but for field validation before its saved in the Storage Engine. My UnitTest failed, where i expected failure from the Zend_Alnum class, because the validation was successful. "The Coder" can (shouldnt, but ...) write something like this:
<code>
$wrongData = array();
$role = new Role();
$role-&gt;setName($wrongData);
</code></p>

<p>Through the (string) cast the empty Array becomes "Array", even the empty string check is in this case useless ...</p>

<p>My Solution, for compatibility would be to make a static flag if my projects wants to use STRICT validation. (disable cast if STRICT). (And this for all Zend_Validate_* Classes), Or put this flag in the Zend_Validate constructor.</p>

<p><code>
$valueString = Zend_Validate::STRICT ? $value : (string) $value;
</code>
or
<code>
$valueString = $this-&gt;validateStrict ? $value : (string) $value;
</code></p>

<p>something like this.
my best regards.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2009-06-08T13:44:47.000+0000</p> 
        <div class="body">
            <p>Fixed with r15951.
Please test this fix hard to prevent possible problems for the next release.</p>

        </div>
    </div>
    </div>

