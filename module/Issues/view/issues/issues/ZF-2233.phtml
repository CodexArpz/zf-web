<h2>ZF-2233: E.164 phone number standard as Zend_Phone and extending Zend_Locale</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>New Feature</dd>

    <dt>Created:</dt>
    <dd>2007-11-26T01:21:34.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-11-20T20:52:47.000+0000</dd>

    <dt>Status:</dt>
    <dd>Closed</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
        None
                    </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Locale</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Zend_Phone is a new component which can handle E.164 calling numbers and display's them in a local format. Like the Zend_Date component, you can change the local format by using a different Zend_Locale. One example: you have an E.164 number like +49 211 123456789. with the locale 'de_DE' you would see this number as 0211 123456789, and someone with 'en_GB' would see it as 00 49 211 123456789.</p>

<p>As you can see, I have parted the phone number. This is important, because such a calling number has different parts. First of all, the '+' get's changed to the international prefix. In Germany it is '00', other countries have '0001' or something like that. The country calling number is everywhere the same. Next, we need to know, what the local prefix is. In Germany, it is the '0', like 0211 instead of 211. The Area code 211 is also important. Here it is possible to find out, if it is a mobile number or a fixed-line number. It is a lot easier to get the phone number type (mobile or fixed-line) within this component, because you have to split this number into parts or just leave an option where you can check the area code if it's a mobile or fixed-line number.</p>

<p>The formatting of telephone numbers, like the international prefix, the local prefix, spaces after two numbers etc. should be implemented into the Zend/Locale/Data XML files.</p>

<p>Besides the country calling numbers, Voice over IP providers often use the +0 calling number. Some telephone providers support those calling numbers, some don't, but to be compatible to nearly all kind of numbers, it should be added, too.</p>

<p>For those, who don't know the specifications of E.164 numbers I have added some links below.
<a href="http://www.itu.int/publ/T-SP-E.164D-2006/en">http://www.itu.int/publ/T-SP-E.164D-2006/en</a> official paper which shows which country has which international number
<a href="http://www.iso.org/iso/country_codes/iso_3166_code_lists.htm">http://iso.org/iso/country_codes/…</a> I checked the countries with this list
<a href="http://en.wikipedia.org/wiki/List_of_country_calling_codes">http://en.wikipedia.org/wiki/…</a> here you see all country calling codes
<a href="http://en.wikipedia.org/wiki/E.164">http://en.wikipedia.org/wiki/E.164</a> E.164 specifications</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2007-11-26T02:04:07.000+0000</p> 
        <div class="body">
            <p>Some comments on this one:</p>

<ul><li><p>Instead of creating a own component we should add a own subclass of Zend_Locale (Zend_Locale_Phone), because we need to localize and normalize phone numbers and normalizing and localizing is what Zend_Locale was build for</p></li>
<li><p>We can not edit the CLDR files. Because from time to time (for example in a few days) a new release of CLDR will be integrated into the framework and we would loose all changes. But we can add a own support_phone.xml file which will hold related informations. See the support file within the data directory.</p></li>
<li><p>We will also need some additional functions for handling phonenumbers. Like getAreaCode(), getCountryCode(), ... We would have to think about this in detail.</p></li>
</ul>
        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Dennis Becker (radhad) on 2007-11-27T03:03:41.000+0000</p> 
        <div class="body">
            <p>We need to find out, which country uses which kind of format for telephone numbers. Also have to find out the following for each country:
* international prefix
* national prefix
* area codes (about 5200 lines for Germany)
* area codes for cell phones</p>

<p>Zend_Locale_Phone should have the following methods:
* __construct(): OPTIONAL: telephone number - OPTIONAL: string|Zend_Locale
* getAreaCode(): Returns the area code of a telephone number
* getCountryCode(): Returns the country code of a telephone number
* getPhoneNumber(): Returns the whole telephone number, either in national or international format (depends on the country code and Zend_Locale) - OPTIONAL: string|Zend_Locale $locale to change the output format
* setLocale(): string|Zend_Locale $locale to change the output format
* setPhoneNumber(): set a telephone number. This method must devide the telephone number in several parts and find out the country code, areacode etc. - also check if it is a cell phone network (they have also an area code)
* isMobileNumber(): check if this number belongs to a network for cell phones. Returns true or false</p>

<p>Zend_Locale_Phone should accept the following telephone numbers and formats:
* + 49 211 123456789 (E.164 format)
* 0 211 123456789 - de_DE (localised national formats)
* 00 49 123456789 - de_DE (localised international formats)</p>

<p>Maybe it allows some wrong numbers (you can easily find out the right parts of this number):
* + 49 0 211 123456789 - the local national '0' is wrong, but we won't save it in the object, so we can ignore it
* 00 49 2 211 123456789 - same as above, only different notation</p>

<p>Besides Zend_Locale_Phone a validator is needed for forms to check if it is a valid telephone number. The Zend_Validate_Phone have to check, if the number is valid in it's Zend_Locale-Format or international format. Also it should be possible to set a Zend_Locale as parameter at Zend_Validate_Phone and to match against this Locale.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Dennis Becker (radhad) on 2007-11-27T03:21:03.000+0000</p> 
        <div class="body">
            <p>I have out some more interesting websites which provide information about telephone number around the world, some I have mentioned above.
* List of country calling codes <a href="http://en.wikipedia.org/wiki/List_of_country_calling_codes">http://en.wikipedia.org/wiki/…</a>
* List of international call prefixes <a href="http://en.wikipedia.org/wiki/List_of_international_call_prefixes">http://en.wikipedia.org/wiki/…</a>
* List of international mobile phone codes <a href="http://en.wikipedia.org/wiki/International_mobile_phone_codes">http://en.wikipedia.org/wiki/…</a></p>

<ul><li><a href="http://www.howtocallabroad.com/codes.html">http://www.howtocallabroad.com/codes.html</a></li>
<li><a href="http://kropla.com/dialcode.htm">http://kropla.com/dialcode.htm</a>  - <a href="http://kropla.com/">http://kropla.com/</a> =&gt; looks nearly complete</li>
</ul><p>The Last link has 2 different names for hwat I called national prefox and international prefix:
* IDD Prefix (International Direct Dialing)
* NDD Prefix (National Direct Dialing)
I think we should use these names in future.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Dennis Becker (radhad) on 2007-11-30T03:50:57.000+0000</p> 
        <div class="body">
            <p>I forgot one method:</p>

<p>It must be possible to add a Zend_Cache_Core object for caching all the loaded data. I have set up a little page, which uses a lot Zend_Date, Zend_Currency etc. and caching with memcacheD makes the site about 20 times faster.</p>

<p>Zend_Locale_Phone::setCache() is a "must have"!</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2007-11-30T04:19:38.000+0000</p> 
        <div class="body">
            <p>All I18N classes make use of caching. This is no "must", it's automatically included.
So no need of headache. :-)</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-02-25T13:56:21.000+0000</p> 
        <div class="body">
            <p>Unsetting 'fix version priority' until the next major release is planned.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Rob Allen (rob) on 2012-11-20T20:52:47.000+0000</p> 
        <div class="body">
            <p>Bulk change of all issues last updated before 1st January 2010 as "Won't Fix".</p>

<p>Feel free to re-open and provide a patch if you want to fix this issue.</p>

        </div>
    </div>
    </div>

