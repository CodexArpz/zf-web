<h2>ZF-1343: &quot;Invalid parameter number: no parameters were bound&quot; when using ' and ? in where clause</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2007-05-04T17:47:26.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-11-03T16:44:57.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Ralph Schindler (ralph)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Db</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-5790">ZF-5790</a></li>
            <li><a href="/issues/browse/ZF-4083">ZF-4083</a></li>
            <li><a href="/issues/browse/ZF-7969">ZF-7969</a></li>
            <li><a href="/issues/browse/ZF-2059">ZF-2059</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <pre class="highlight"><code>
class Users extends Zend_Db_Table_Abstract {
    protected $_name = 'users';
}

$db = Zend_Db::factory('PDO_MYSQL', $options);
Zend_Db_Table_Abstract::setDefaultAdapter($db);

$username = "chr?i's";

$table = new Users();
$where = $table-&gt;getAdapter()-&gt;quoteInto('username = ?',$username);
$rows = $table-&gt;fetchAll($where);
</code></pre>

<p>results in an exception:</p>

<p>Fatal error: Uncaught exception 'Zend_Db_Adapter_Exception' with message 'SQLSTATE[HY093]: Invalid parameter number: no parameters were bound'</p>

<p>When using "chr?is" or "chr'is" for $username everything is fine. It doesn't matter where the ? and ' are in the $username variable, just when they are both in $username they are causing problems.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2007-05-06T09:06:45.000+0000</p> 
        <div class="body">
            <p>Zend_Db related - assigned to Bill</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Chris van der Wel (kritz) on 2007-05-06T10:05:02.000+0000</p> 
        <div class="body">
            <p>It looks like it's a bug in PDO itself and not the Zend Framework.</p>

<p>The following code produces the same error:</p>

<pre class="highlight"><code>
$sth = $dbh-&gt;prepare("SELECT * FROM `users` WHERE username = 'ch?\'ris';");
$sth-&gt;execute();
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Chris van der Wel (kritz) on 2007-05-06T14:05:03.000+0000</p> 
        <div class="body">
            <p>Does anybody from Zend know if any bugs in the PDO extension will be fixed? The last release was more than a year ago, but there are several bug reports. Does it make any sense to report a new bug?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-05-06T21:22:37.000+0000</p> 
        <div class="body">
            <p>There are bugs reported as recently as March 15 in the PDO category that are now CLOSED (for example: <a href="http://bugs.php.net/bug.php?id=40822">http://bugs.php.net/bug.php?id=40822</a>).  So clearly some work continues on PDO.</p>

<p>This bug seems related to ZF-347.  PDO is not very intelligent about noticing when parameter placeholders inside string literals.  Not surprising -- to support that, PDO would have to implement a complete client-side SQL parser and that's probably beyond its scope.</p>

<p>I'm going to mark this issue POSTPONED with respect to working on it for Zend Framework.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-07-20T20:23:57.000+0000</p> 
        <div class="body">
            <p>Confirmed, a test shows that this bug occurs when using PDO directly, not using Zend_Db at all.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Julian Davchev (jmut) on 2008-03-18T09:16:11.000+0000</p> 
        <div class="body">
            <p>I think we should reopen this ticket.</p>

<p>I know this is old story but it totally bugs me that I am not able to use PDO_Mysql because of this...it's just so much faster.
From your conclusion I get the idea that it's impossible to use this value using PDO_Mysql, well this is not the case.
I am in process to finding what exactly the problem is...but it come to Select object etc etc... and will need more time. Thats why I decided to post this...so get some feedback from someone more familiar with issue.</p>

<p>I looked in 6 scenarios with two values - one reported in ticket and one that I have problem with (seems it behaves differently - see scenario 2)</p>

<p>Well obviously to reproduce all cases should comment/uncomment all values  and/or all scenarious code.
Hope it is not messy and clear.
Scenario 1 is the one that works for either values.</p>

<pre><code>    $username = "chr?i's";  // value 1
    //$username = "';?%&gt;'"; // value 2

    $table = new Table_User();

    //scenario 1 ... works for value 1 and 2
    //$oRow = $table-&gt;getAdapter()-&gt;fetchRow("SELECT * FROM `user` WHERE U_user_name = ?",$username);

    //scenario 2 ... works for value 1 doesn't work for value 2       - initially reported in ticket
    //$sql_username = $table-&gt;getAdapter()-&gt;quoteInto('U_user_name = ?',$username);
    //$oRow = $table-&gt;getAdapter()-&gt;fetchRow("SELECT * FROM user WHERE $sql_username");

    //scenario 3 ... doesn't work for value 1 and 2
    //$oRow = $table-&gt;fetchRow("U_user_name = ?",$username);

    //scenario 4 ... doesn't work for value 1 and 2
    //$where = $table-&gt;getAdapter()-&gt;quoteInto('U_user_name = ?',$username);
    //$oRow = $table-&gt;fetchAll($where);

    //scenario 5 ... doesn't work for value 1 and 2
    //$oRow = $table-&gt;fetchRow("SELECT * FROM user WHERE U_user_name = ?",$username);

    //scenario 6 ... doesn't work for value 1 and 2       -  one Chris van der Wel tested with.
    //$sth = $table-&gt;getAdapter()-&gt;prepare("SELECT * FROM `users` WHERE U_user_name = '{$username}';");
    //$sth-&gt;execute();

    var_dump($oRow);
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Julian Davchev (jmut) on 2008-03-18T09:30:17.000+0000</p> 
        <div class="body">
            <p>My bad,
"initially reported in ticket"  is scenario 4, not as I mentioned scenario 2</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Julian Davchev (jmut) on 2008-03-18T09:49:19.000+0000</p> 
        <div class="body">
            <p>Can scratch scenario 3 and 5... second param is order by there, hence not relevant...don't know why got confused.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Willie Alberty (willie) on 2008-03-18T10:53:54.000+0000</p> 
        <div class="body">
            <p>I am experiencing this same issue in a production environment. I acknowledge the fact that there is a bug in PDO which is causing this behavior. However, I am not using PDO directly. If I were, I would be forced to live with it.</p>

<p>Since I am using Zend_Db, there is an opportunity to work around the bug until it can be fixed in PDO. Isn't that part of the purpose of an abstraction layer -- to normalize behavior and work around bugs in the underlying implementations?</p>

<p>Unless there is truly nothing that can be done (i.e, there is no possible way to code around it in PHP, which I did not read in the comment stream), this issue should be reopened. Telling our customers to "not use ' and ? characters in the same database column" is simply impractical.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2008-03-18T11:40:52.000+0000</p> 
        <div class="body">
            <p>Removing myself as assignee for this issue.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2008-03-18T11:57:24.000+0000</p> 
        <div class="body">
            <p>Users requested reopening this issue.</p>

<p>Changing component, since it is not specific to Zend_Db_Table.  Any query to a PDO adapter can exhibit this issue.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-03-25T20:43:58.000+0000</p> 
        <div class="body">
            <p>Please categorize/fix as needed.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-03-25T22:06:47.000+0000</p> 
        <div class="body">
            <p>Resetting 'fix version priority' and 'fix version' to be re-evaluated for next release.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Tim Steiner (spam38) on 2008-08-05T09:15:44.000+0000</p> 
        <div class="body">
            <p>It would appear that if you use double quotes instead of single quotes around the string, the problem goes away</p>

<p>ie:
SELECT * FROM users WHERE username = "chr?i\'s";
instead of 
SELECT * FROM users WHERE username = 'chr?i\'s';</p>

<p>What are the consequences of having the _quote method use double quotes instead of single quotes?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2008-08-05T09:22:06.000+0000</p> 
        <div class="body">
            <p>@Tim:  Double-quotes used for string delimiters is non-standard SQL.  Double-quotes are supposed to delimit identifiers (e.g. table and column names).  SIngle quotes are the only standard SQL string delimiter.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ralph Schindler (ralph) on 2008-08-05T09:29:31.000+0000</p> 
        <div class="body">
            <p>Bill, do you have any insight for me as per fixing the issue?  I am inclined to mark this as not-an-issue since its a PDO thing.  is that not the right course of action?</p>

<p>-ralph</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2008-08-05T11:05:32.000+0000</p> 
        <div class="body">
            <p>Yes, in my opinion this is a non-issue for ZF.  The fault lies in PDO code, not in ZF.  I had closed this issue as a non-issue on 2007-06-20, but users requested that it be re-opened.</p>

<p>There are two workarounds:</p>

<ol><li><p>Avoid using a PDO adapter if you use string literals in SQL expressions containing both an escaped quote and a question mark (or named parameter like :param).  This is not satisfying some people who say that PDO_MySQL is faster than MySQLi.  However, I'm not sure what the real difference in performance is, or whether it's a dealbreaker for a typical web app.  This deserves some measurement, not anecdotal evidence or artificial benchmarks.</p></li>
<li><p>Parameterize the SQL string literal, without using interpolation as a "fake parameter" mechanism like {{quoteInto()}}.  For example compare the following two solutions, the first using a parameter and the second using {{quoteInto()}}:</p></li>
</ol><pre class="highlight"><code>
// True parameter solution works:
$string = "O'Reilly?";
$sql = "SELECT * FROM foo WHERE c = ?";
$stmt = $db-&gt;prepare($sql);
$stmt-&gt;execute(array($string));
print_r($stmt-&gt;fetchAll());

// Fake parameter solution with interpolation throws exception:
$string = "O'Reilly?";
$sql = $db-&gt;quoteInto("SELECT * FROM foo WHERE c = ?", $string);
$stmt = $db-&gt;prepare($sql);
$stmt-&gt;execute();  // PDO throws exception here
print_r($stmt-&gt;fetchAll());
</code></pre>

<p>It's still difficult to use params in Zend_Db_Table methods, since those all use interpolation rather than true parameters.  You might want to architect some methods to Zend_Db_Table to support true parameters.  In fact, a community member just posted on the ZF mailing list today with such an idea.  But I think his solution is clumsy.</p>

<p>One other suggestion:  have someone with privileges on PHP.net actually fix the fault in PDO itself.  I have emailed Wez Furlong about this issue twice in the past, but unfortunately I got no reply.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by James Hartford (jameshartford) on 2008-08-21T10:22:30.000+0000</p> 
        <div class="body">
            <p>This is also an issue when using Zend_Db_Select as follows:</p>

<p>$db = new Zend_Db::factory(...);</p>

<p>$select = $db-&gt;select()-&gt;from("users")-&gt;where("firstname=?", "test's ?");
$rows = $db-&gt;fetchAll($select);</p>

<p>In this case you should be able to detect in Zend_Db_Adapter_Abstract-&gt;query() that $sql is an instance of Zend_Db_Select and reset the $sql and $bind values appropriately to use a true parameter solution. Unless this is done, using Zend_Db_Select gives the same result as the fake parameter solution that Bill has shown above.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Tim Steiner (spam38) on 2008-10-30T14:31:31.000+0000</p> 
        <div class="body">
            <p>I believe the issue is resolved as of PHP 5.2.7RC2</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-12-19T15:08:08.000+0000</p> 
        <div class="body">
            <p>Ralph, please evaluate this issue and determine the best course of action.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ralph Schindler (ralph) on 2009-01-09T13:42:55.000+0000</p> 
        <div class="body">
            <p>Has this been resolved in PHP?</p>

<p>-Ralph</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Serban Ghita (serbanghita) on 2009-01-21T23:30:33.000+0000</p> 
        <div class="body">
            <p>this has been fixed in PHP 5.2.8</p>

<p>take a look at: <a href="http://www.php.net/ChangeLog-5.php">http://www.php.net/ChangeLog-5.php</a></p>

<p>Fixed bugs #44251, #41125 (PDO + quote() + prepare() can result in segfault). (tsteiner at nerdclub dot net)</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Alexander Steshenko (lcf) on 2009-02-26T09:19:22.000+0000</p> 
        <div class="body">
            <p>Nope. Nothing has changed in 5.2.8. The bug is still there.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Johannes Schill (johannes) on 2009-02-27T02:21:32.000+0000</p> 
        <div class="body">
            <p>I had similar (if not the same?) problem with PHP 5.2.3, but yesterday's release - 5.2.9 - solved it here if anyone is interested.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Alexander Steshenko (lcf) on 2009-02-27T03:06:00.000+0000</p> 
        <div class="body">
            <p>Yes. I've just upgraded to the yesterday's 5.2.9 release - problem is solved.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Niko Kivelä (tovrleaf) on 2009-03-16T01:44:02.000+0000</p> 
        <div class="body">
            <p>I experiences this same bug and what I found interesting was that using PDOStatement doesn't crash if you have used single ' before using both ' and ? as:</p>

<pre class="literal"> 

This gives us dirty quick workaround solution (in theory) to add logic to query when input contains both ' and ? for users with PHP version &lt; 5.2.9 to use something like this:
</pre>

<p>when 
```` 
crashes.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Snakehit (snakehit) on 2009-03-18T03:55:41.000+0000</p> 
        <div class="body">
            <p>I have also upgraded to latest version of PHP 5.2.9 and the problem is solved.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Artur Bodera (joust) on 2009-04-27T04:29:48.000+0000</p> 
        <div class="body">
            <p>This sucks when you can't use the newest PHP version.</p>

<p>My workaround for the problem  (only for Mysql, may have other negative effects)</p>

<pre class="highlight"><code>
$db-&gt;getConnection()-&gt;setAttribute(PDO::MYSQL_ATTR_DIRECT_QUERY, false);
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Artur Bodera (joust) on 2009-04-27T07:36:08.000+0000</p> 
        <div class="body">
            <p>Unfortunatelly PDO sucks even more, and the same error happend when using :varName binding, ie:</p>

<pre class="highlight"><code>
SELECT * FROM table  WHERE name = '}elhF\'?:u|h&gt;\'?n\'?'
</code></pre>

<p>This query, even with my woarkound above, will throw <em>SQLSTATE[HY093]: Invalid parameter number: mixed named and positional parameters</em>. That's because it sees :u as a parameter.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ralph Schindler (ralph) on 2009-05-18T15:41:01.000+0000</p> 
        <div class="body">
            <p>Test case commited, this appears to be not an issue in php 5.2.8</p>

        </div>
    </div>
    </div>

