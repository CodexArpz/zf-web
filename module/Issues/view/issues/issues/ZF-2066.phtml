<h2>ZF-2066: Zend_Cache_Frontend_Class should not require cachedEntity in options</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2007-10-15T02:16:10.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2010-06-30T10:37:00.000+0000</dd>

    <dt>Status:</dt>
    <dd>Closed</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.10.7 (28/Jul/10)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Marc Bennewitz (private) (mabe)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Cache</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-9979">ZF-9979</a></li>
            <li><a href="/issues/browse/ZF-9422">ZF-9422</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Zend_Cache_Frontend_Class should not require cachedEntity in the options, instead you should be able to pass either a class name or object to a "call" method just like Zend_Cache_Frontend_Function. This allows use of the same cache object for methods of multiple classes or objects.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2007-10-15T13:40:20.000+0000</p> 
        <div class="body">
            <p>Assigned to Fabien</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Darien Hager (hagerd) on 2008-01-24T19:56:22.000+0000</p> 
        <div class="body">
            <p>While I can see how that may be useful...</p>

<p>But I think it poses a risk of conflict with the established use. Whatever name you give the 'call method' you describe would have to be one that no underlying object would ever conflict with. So it cannot be "call()", but would have to be something like "zend_cache_call()".</p>

<p>Instead, it may be worth having Zend_Cache_Frontend_Object as a new class of it's own which has the behavior you describe.</p>

<p>$result = $cache-&gt;call($object,'methodName',$argumentArray);</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Fabien MARTY (fab) on 2008-07-28T12:29:24.000+0000</p> 
        <div class="body">
            <p>I agree, if someone wants to help... :-)</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Steven Brown (pooh) on 2008-07-28T15:39:19.000+0000</p> 
        <div class="body">
            <p>I'd be interested in helping...what's the process?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Steven Brown (pooh) on 2008-07-28T22:09:33.000+0000</p> 
        <div class="body">
            <p>I think Darien's on the right track, though I'd recommend Zend_Cache_Frontend_Method</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Fabien MARTY (fab) on 2009-07-17T11:03:31.000+0000</p> 
        <div class="body">
            <p>change Assignee because I'm inactive now</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Marc Bennewitz (private) (mabe) on 2010-04-30T09:29:20.000+0000</p> 
        <div class="body">
            <p>for zend cache 2.0 i'm planning to add a new Callback cache which implements a (non overloaded) call method with the two arguments $callback &amp; $arguments.</p>

<p>(The class &amp; function cache leave similar as is - using magic methods)</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Marc Bennewitz (private) (mabe) on 2010-06-30T10:37:00.000+0000</p> 
        <div class="body">
            <p>Now it's possible to use all types of callbacks within Zend_Cache_Frontend_Function</p>

        </div>
    </div>
    </div>

