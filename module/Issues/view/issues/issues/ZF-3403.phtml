<h2>ZF-3403: Implements plugin system based on Zend_Controller_Plugin</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>New Feature</dd>

    <dt>Created:</dt>
    <dd>2008-06-05T21:33:03.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2008-10-31T13:18:20.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Diego Tremper (diegotremper)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Benjamin Eberlei (beberlei)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Soap_Server</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
        <li><a href="/issues/secure/attachment/11321/Soap.tar.gz">Soap.tar.gz</a></li>
        </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>I suggest an implementation of the plugin system to allows user code to be called when certain events occur in the soap handle process lifetime.<br />
Similarly, the package Zend_Controller_Plugin</p>

<p>Example code:</p>

<p>File: client.php</p>

<pre class="highlight"><code>
&lt;?php

$wsdl = 'http://'  .$_SERVER['HTTP_HOST'] . str_replace('client', 'server', $_SERVER['SCRIPT_NAME']) . '?wsdl';

$client = new SoapClient($wsdl);

try {
    var_dump($client-&gt;example());
} catch (Exception $e) {
    echo $e-&gt;getMessage() . "\n";
    echo $e-&gt;getTraceAsString() . "\n";
}
</code></pre>

<p>File: MyPlugin.php</p>

<pre class="highlight"><code>
&lt;?php

require_once 'Zend/Soap/Server/Plugin/Abstract.php'; 
require_once 'Zend/Soap/Server/Plugin/Abstract.php';
require_once 'Zend/Log/Writer/Stream.php';
require_once 'Zend/Log.php';

class MyPlugin extends Zend_Soap_Server_Plugin_Abstract {
    
    private $_logger;
    private $start;
    private $end;
    
    public function __construct()
    {
        $writer = new Zend_Log_Writer_Stream(dirname(__FILE__) .DIRECTORY_SEPARATOR . 'service.log');
        $logger = new Zend_Log();
        $logger-&gt;addWriter($writer);
        $this-&gt;_logger = $logger;
    }
    
    public function preHandle($request)
    {
        $this-&gt;start = microtime();
    }

    public function postHandle($response)
    {
    }
    
    public function notifyFault($code, $message)
    {
        $this-&gt;_logger-&gt;err('error on response: code=' . $code . ', message=' . $message);
    }
    
    public function __destruct()
    {
        $this-&gt;end = microtime();
        $this-&gt;_logger-&gt;info('elapsed time: ' . ($this-&gt;end - $this-&gt;start));
    }
}

</code></pre>

<p>Use case
File: server.php</p>

<pre class="highlight"><code>
&lt;?php

require "Zend/Soap/AutoDiscover.php";
require 'Zend/Soap/Server.php';

require dirname(__FILE__).DIRECTORY_SEPARATOR.'MyPlugin.php';

$wsdl = 'http://'  .$_SERVER['HTTP_HOST'] . $_SERVER['SCRIPT_NAME'] . '?wsdl';

class MyFacade {

    /**
     * example method
     *
     * @return boolean
     */
    public function example() {
        return true;
    }
    
}

if (array_key_exists('wsdl', $_GET)) {
    $server = new Zend_Soap_AutoDiscover();
    $server-&gt;setClass('MyFacade');
    $server-&gt;handle();
} else {
    $soap = new Zend_Soap_Server($wsdl);
    $soap-&gt;setReturnResponse(true);
    $soap-&gt;setClass('MyFacade');
    $soap-&gt;registerPlugin(new MyPlugin());
    echo $soap-&gt;handle();
}
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Diego Tremper (diegotremper) on 2008-06-05T21:39:22.000+0000</p> 
        <div class="body">
            <p>I fix this issue based on review 9619.
<a href="http://framework.zend.com/svn/framework/standard/incubator/library/Zend/Soap/">http://framework.zend.com/svn/framework/â€¦</a></p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Benjamin Eberlei (beberlei) on 2008-10-31T13:18:19.000+0000</p> 
        <div class="body">
            <p>This is a great feature, but although i have use cases for it myself, its overall usability is very limited and its easy to extend Zend_Soap_Server to provide this, if you need it.</p>

        </div>
    </div>
    </div>

