<h2>ZF-11073: Zend_Cache_Backend_Dba</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>New Feature</dd>

    <dt>Created:</dt>
    <dd>2011-02-14T08:06:17.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-05-07T07:15:34.000+0000</dd>

    <dt>Status:</dt>
    <dd>Open</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Gjero Krsteski (gjerokrsteski)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Cache</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF2-139">ZF2-139</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Based on php-dba-cache a have writen a "Zend_Cache_Backend_Dba" class. The php-dba-cache uses the database (dbm-style) abstraction layer to cache your objects, strings, integers or arrays. Even instances of SimpleXMLElement can be puted to the cache. I just wrote the Class "Zend_Cache_Backend_Dba" for my company, and it works fine. More information about php-dba-cache you can find at <a href="https://github.com/gjerokrsteski/php-dba-cache">https://github.com/gjerokrsteski/php-dba-cache</a></p>

<p>I allso can see the "Zend_Cache_Backend_Dba" class at <a href="https://github.com/gjerokrsteski/Zend_Cache_Backend_Dba">https://github.com/gjerokrsteski/…</a> for inspection.</p>

<p>Best regards,
Gjero Krsteski</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Marc Bennewitz (private) (mabe) on 2011-03-02T12:30:11.000+0000</p> 
        <div class="body">
            <p>Hi Giero,</p>

<p>That's an very interesting idea !</p>

<p>But please note the following:</p>

<ul><li>You need to sign and return a CLA: <a href="http://framework.zend.com/cla">http://framework.zend.com/cla</a></li>
<li>You simply created a wrapper for your caching implementation of dba this could be better done
to implement the zend dba backend directly</li>
<li>development of zf2 already started -&gt; please take a look into my proposal : <a href="http://framework.zend.com/wiki/display/ZFPROP/Zend+Cache+2.0+-+Marc+Bennewitz">http://framework.zend.com/wiki/display/…</a></li>
</ul><p>Greetings</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Gjero Krsteski (gjerokrsteski) on 2011-03-03T01:52:53.000+0000</p> 
        <div class="body">
            <p>Hi Marc,</p>

<p>thanks for the answer. I already sent the CLA by fax and e-mail. See here, i just wrote an dba-backend-cache <a href="https://github.com/gjerokrsteski/Zend_Cache_Backend_Dba">https://github.com/gjerokrsteski/…</a></p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Marc Bennewitz (private) (mabe) on 2011-03-25T17:39:45.000+0000</p> 
        <div class="body">
            <p>HI Gjero,</p>

<p>I impemented a dba adapter for ZF2 to see how it works an find issues:
<a href="https://github.com/marc-mabe/zf2/blob/cache/library/Zend/Cache/Storage/Adapter/Dba.php">https://github.com/marc-mabe/zf2/…</a></p>

<p>One think i have found is described @ <a href="http://bugs.php.net/bug.php?id=54242">http://bugs.php.net/bug.php?id=54242</a>
But I can't test all available handlers :(
It would be nice if you can could take a look into it and run some more tests with different handlers.</p>

<p>Feel free to backport this version back to ZF1 (without the Cache*-Classes).</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Gjero Krsteski (gjerokrsteski) on 2011-04-01T09:10:00.000+0000</p> 
        <div class="body">
            <p>Hi Marc,</p>

<p>thanks for the report. In the next two weeks i will backport your fix of the Bug #54242. There is something you have to know about the DBA-style databases, like not all of the databases can replace key-value pairs, like the CDB. The CDB database can handle onlly with fixed key-vaue pairs. The best and fastest handlers for DBA-style caching are: QDBM, Berkeley DB (DB4), NDBM and least the Flatfile. Why you are trying to re-insert instead of replace the value?</p>

<p>p.s. can you send me the url tho the ZF1 SVN-branch for the backport?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Marc Bennewitz (private) (mabe) on 2011-04-02T15:51:04.000+0000</p> 
        <div class="body">
            <p>??Why you are trying to re-insert instead of replace the value???</p>

<p>dba_insert:  If this key already exist in the database, this function will fail.
dba_replace: replaces or inserts the entry</p>

<p>Therefor the adapter works as follows:
setItem:     -&gt; dba_replace
addItem:     -&gt; dba_insert + workaround for Bug #54242
replaceItem: -&gt; dba_exists + dba_replace</p>

<p>I don't have a backport for ZF1, yet. For now I don't have enough time to implement new features to ZF1 :(
If you have SVN-Access you can create a branch @ <a href="http://framework.zend.com/svn/framework/standard/branches/user/">http://framework.zend.com/svn/framework/…</a>
or create a clean backport on github that can be simply added as one backend file to ZF1.</p>

<p>I read your implementation for ZF1 on github but this requires 3 more classes which are not needed for ZF.
Additionally serialization is done on frontend and the backend have to handle strings only. You could store the time within that string using the pack function ;)</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Marc Bennewitz (private) (mabe) on 2011-04-02T15:54:15.000+0000</p> 
        <div class="body">
            <p>Changed assignee to Gjero</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Gjero Krsteski (gjerokrsteski) on 2011-04-21T04:23:25.000+0000</p> 
        <div class="body">
            <p>You can find the backport on github. I just keep the additional serialization, because i have some additional data, which is important for the caching. Please give me an review.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Marc Bennewitz (private) (mabe) on 2011-05-03T21:19:00.000+0000</p> 
        <div class="body">
            <p>Some small Notices/Questions:</p>

<ol><li>Using constants for mode doesn't help to note which modes are available and how they should use.
-&gt; You can set the default mode directly option directly and take a link to php documentation</li>
<li>Using constants for handlers doesn't show all available handlers.
-&gt; I would prefer same as on modes</li>
<li>If DB-Faile doesn't exist you create it on __construct and _retrieveDbaConnection (fopen)
-&gt; Why is this needed? This should be solved by mode.</li>
<li>On _put you test if the key exists and calls replace or update but dba_replace replaces or inserts the already with one call:
-&gt; php.net: dba_replace() replaces or inserts the entry described with key and value into the database specified by handle. </li>
<li>Your "test"-Implementation doesn't return mtime if item exist</li>
<li>Why a simple serialize/unserialize isn't enough ?</li>
<li>Missing UnitTests</li>
</ol>
        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Gjero Krsteski (gjerokrsteski) on 2011-09-08T19:10:40.000+0000</p> 
        <div class="body">
            <p>Hi Marc,</p>

<p>Thank you for your comment. I've implemented all your improvements. Check it out on github, and please give me a new recognition.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Marc Bennewitz (private) (mabe) on 2011-09-09T17:29:28.000+0000</p> 
        <div class="body">
            <p>Hi Gjero,</p>

<p>Thank you for your work. I have looked into it and the most looks great but two points from above I'm missing:</p>

<ol><li>Your "test"-Implementation doesn't return mtime if item exist</li>
</ol><pre class="highlight"><code>
    public function test($id)
    {
        return ((NULL === $this-&gt;_dba) ? false : true);
    }
</code></pre>

<pre class="highlight"><code>
    protected function _has($identifier)
    {
        return dba_exists($identifier, $this-&gt;_dba);
    }
</code></pre>

<p>... but you have to return a boolean false if the item doesn't exist and the last modification time of the item else.</p>

<ol><li>Why a simple serialize/unserialize isn't enough ?</li>
</ol>
        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Gjero Krsteski (gjerokrsteski) on 2011-09-10T14:59:08.000+0000</p> 
        <div class="body">
            <p>Hi Marc,</p>

<p>thank you for the recognition.</p>

<p>to 5.) I implemented it as you wrote. see it on github.
to 6.) A simple serialize/unserialize isn't enough, because I made the experience that a lot of people use ZF1 only as library and put any type of data into the cache. By this implementation you can use it in your ZF1-application and handle with strings, and on the other hand you can use it as library and put any types of data into the cache.</p>

<p>p.s. which is the official ZF1 repository on github?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Marc Bennewitz (private) (mabe) on 2012-01-09T20:30:27.000+0000</p> 
        <div class="body">
            <p>Cloned for ZF2 see ZF2-139</p>

        </div>
    </div>
    </div>

