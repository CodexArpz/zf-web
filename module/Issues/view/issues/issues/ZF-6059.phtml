<h2>ZF-6059: Add objectKey parameter to partialLoop</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2009-03-18T15:07:17.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-11-20T20:53:03.000+0000</dd>

    <dt>Status:</dt>
    <dd>Closed</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Tim Fountain (tfountain)
            </dd>

    <dt>Assignee:</dt>
    <dd>
        None
                    </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_View</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Currently the partialLoop helper seems to be of limited use when working with arrays of objects, since the objects are converted to array format before being assigned to the view. This makes it impossible to call class methods in the partial.</p>

<p>Consider the following class:</p>

<pre class="highlight"><code>
class User
{
   public $firstname;
   public $surname;

   public function name()
   {
      return $this-&gt;firstname.' '.$this-&gt;surname;
   }
}
</code></pre>

<p>Let's say I have an array of these objects (in $users) that I want to display. Using the normal partial helper I might do something like this:</p>

<p>users.phtml:</p>

<pre class="highlight"><code>
foreach ($users as $user) {
   echo $this-&gt;partial('_user.phtml', $user);
}
</code></pre>

<p>_user.phtml:</p>

<pre class="highlight"><code>
&lt;?=$this-&gt;user-&gt;name()?&gt;<br /></code></pre>

<p>users.phtml looks like a prime candidate for refactoring to use partialLoop():</p>

<pre class="highlight"><code>
echo $this-&gt;partialLoop('_user.phtml', $users);
</code></pre>

<p>but this won't work, since there's no way to call the name() function in _user.phtml, as only the properties of each User object are assigned to _user.phtml.</p>

<p>I suggest a optional fourth parameter is added to partialLoop which allows objectKey to be set for each resulting partial() call. E.g.:</p>

<pre class="highlight"><code>
echo $this-&gt;partialLoop('_user.phtml', null, $users, 'user');
</code></pre>

<p>each object is then assigned to the partial in the variable 'user'.  The original _user.phtml above would then work fine.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Tim Fountain (tfountain) on 2009-03-18T15:11:22.000+0000</p> 
        <div class="body">
            <p>The Ruby on Rails equivalent of this helper uses the partial filename to infer the variable name. So in Rails you'd do something like:</p>

<p>&lt;%= render :partial =&gt; 'user', :collection =&gt; @users %&gt;</p>

<p>each user object would then be stored in a variable called 'user' for use in the partial. So this would be an alternative solution.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2009-03-18T17:17:18.000+0000</p> 
        <div class="body">
            <p>Oddly, this was added to the partial() view helper already, but not the partialLoop() helper. I've noted it as a feature improvement.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Rob Allen (rob) on 2012-11-20T20:53:03.000+0000</p> 
        <div class="body">
            <p>Bulk change of all issues last updated before 1st January 2010 as "Won't Fix".</p>

<p>Feel free to re-open and provide a patch if you want to fix this issue.</p>

        </div>
    </div>
    </div>

