<h2>ZF-9135: Auto wsdl creator default complex type does not parses interfaces</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2010-02-10T05:28:27.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2010-04-16T01:44:46.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Benjamin Eberlei (beberlei)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Soap_Wsdl</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Hi, I'm trying to autogenerate a wsdl from a class.</p>

<p>This class has an attribute like "adapter" and this adapter's type is an interface (let's say FooInterface)</p>

<pre class="highlight"><code>
class Service
{
   /**
    * @var FooInterface
    */
   protected $_adapter
}

class Service_Adapter_Bar1 implements FooInterface {}

class Service_Adapter_Bar2 implements FooInterface {}
</code></pre>

<p>as adapter can be any Bar1 or Bar2 setting type as the interface is logical (wrong perhaps I don't know).</p>

<p>when zend wsdl tries to parse this, it creates an error that FooInterface does not exists on DefaultComplex strategy (Cannot add a complex type FooInterface that is not an object or where class could not be found in 'DefaultComplexType' strategy).</p>

<p>This is because of a check there which is like this:</p>

<pre class="highlight"><code>
if(!class_exists($type)) {
    require_once "Zend/Soap/Wsdl/Exception.php";
    throw new Zend_Soap_Wsdl_Exception(sprintf(
        "Cannot add a complex type %s that is not an object or where ".
        "class could not be found in 'DefaultComplexType' strategy.", $type
));
</code></pre>

<p>class_exists function does not work for interfaces so you should also include interface_exists check there too like:</p>

<pre class="highlight"><code>
if (!class_exists($type)) {
    if (!interface_exists($type)) {
        require_once "Zend/Soap/Wsdl/Exception.php";
        throw new Zend_Soap_Wsdl_Exception(sprintf(
            "Cannot add a complex type %s that is not an object or where ".
            "class could not be found in 'DefaultComplexType' strategy.", $type
        ));
    }
}
</code></pre>

<p>this control first checks for classes and second for interfaces.</p>

<p>This can be also be currently solved by creating your own strategy, same as defalutcomplex (copy-paste) and add the interface check there. While instanciating the autodiscover class you should use it like this:</p>

<pre class="highlight"><code>
$autodiscover = new Zend_Soap_AutoDiscover('My_Soap_Wsdl_Strategy_MyComplex');
</code></pre>

<p>I'm not really sure if this is a bug, or defaultcomplex should implement it or not bug I suppose it should.</p>

<p>thanks</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Benjamin Eberlei (beberlei) on 2010-04-16T01:01:43.000+0000</p> 
        <div class="body">
            <p>I don't understand this issue, how can you return an interface from a SOAP method? You cannot set public properties on an interface, i don't see the use-case here.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by roy simkes (radalin) on 2010-04-16T01:14:58.000+0000</p> 
        <div class="body">
            <p>Yes you are possibly right, I was not returning the interface but a class which was implementing that interface. As the instance was not just one class, I had thought to return the interface. But as I cannot use methods from a soap call this becomes very useless. I should have used an abstract class instead of interface.</p>

<p>I had totaly forgotten about this issue, sorry for the inconvenience.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Benjamin Eberlei (beberlei) on 2010-04-16T01:44:44.000+0000</p> 
        <div class="body">
            <p>No problem, i haven't looked at it for all the time also :-)</p>

        </div>
    </div>
    </div>

