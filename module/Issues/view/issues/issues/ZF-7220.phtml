<h2>ZF-7220: AllowEmpty has no effect if required is set</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2009-07-07T17:24:46.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-07-08T06:15:59.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Matthew Weier O'Phinney (matthew)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Filter</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>In Zend/Form/Element.php:</p>

<pre class="highlight"><code>    public function isValid($value, $context = null)
    {
        $this-&gt;setValue($value);
        $value = $this-&gt;getValue();

        if ((('' === $value) || (null === $value))
            &amp;&amp; !$this-&gt;isRequired()
            &amp;&amp; $this-&gt;getAllowEmpty()
        ) {
            return true;
        }
    // ...
    }</code></pre>

<p>I dont know, why an empty value is declared as "missing required", because in some cases its useful, that a value is required, but also its allowed to be empty. In my understanding the definitions of "required" and "empty" are independent (except that a missing value can not be empty, of course)</p>

<p>Because Zend_Form::isValid() itself always gives null, if there is no data</p>

<pre class="highlight"><code>        foreach ($this-&gt;getElements() as $key =&gt; $element) {
            $element-&gt;setTranslator($translator);
            if (!isset($data[$key])) {
                $valid = $element-&gt;isValid(null, $data) &amp;&amp; $valid;
            } else {
                $valid = $element-&gt;isValid($data[$key], $data) &amp;&amp; $valid;
            }
        }</code></pre>

<p>it can be splitted</p>

<pre class="highlight"><code>if ( (('' === $value) &amp;&amp; $this-&gt;getAllowEmpty()) || ((null === $value) &amp;&amp; !$this-&gt;isRequired()) ) {
  return true;
}</code></pre>

<p>A matrix of the statement from Element::isValid()
||allowEmpty||isRequired||''||null||
|true|true|false|false|
|false|true|false|false|
|true|false|true|true|
|false|false|false|false|</p>

<p>As I just see: I few lines later (in Zend_Form_Element::isValid())</p>

<pre class="highlight"><code>        if ($this-&gt;isRequired()
            &amp;&amp; $this-&gt;autoInsertNotEmptyValidator()
            &amp;&amp; !$this-&gt;getValidator('NotEmpty'))
        {
            $validators = $this-&gt;getValidators();
            $notEmpty   = array('validator' =&gt; 'NotEmpty', 'breakChainOnFailure' =&gt; true);
            array_unshift($validators, $notEmpty);
            $this-&gt;setValidators($validators);
        }</code></pre>

<p>Why is there again a NotEmptyValidator and why its "autoInsert"ed, then tested (if it is really set) and then added again? Should this not allowEmpty do? (Or the other way round).</p>

<p>Anyway this are the two points in isValid() where isRequired and allowEmpty are used and it seems, that the mechanic is identical.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2009-07-08T06:14:07.000+0000</p> 
        <div class="body">
            <p>If a field is required, it cannot be empty. HTML forms will submit either an empty string for a value, or not submit the value at all (this latter is true only of checkboxes and buttons). In terms of validation, if we allow empty strings, but simultaneously require the element, we have no reasonable mechanism to test -- one or the other can be true, but not both.</p>

<p>Marking as "won't fix", as this design was determined after much community discussion, and changing the behavior would be a BC break.</p>

        </div>
    </div>
    </div>

