<h2>ZF-1579: Zend_Locale_FormatTest Unit Tests failing</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Unit Tests: Problem</dd>

    <dt>Created:</dt>
    <dd>2007-06-17T12:28:25.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2007-07-05T14:44:20.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.0.0 (30/Jun/07)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Sebastian Nohn (nohn)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Thomas Weidner (thomas)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Locale</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>1) testToNumber(Zend_Locale_FormatTest)
string -1.234.567,12345 expected
Failed asserting that &lt;string:-1.234.567,12345&gt; is equal to &lt;string:-1.234.568,87655&gt;.
/home/sebastian/Work/ZendFramework/tests/Zend/Locale/FormatTest.php:103</p>

<p>2) testToFloat(Zend_Locale_FormatTest)
string -1.234.567,12345 expected
Failed asserting that &lt;string:-1.234.567,12345&gt; is equal to &lt;string:-1.234.568,87655&gt;.
/home/sebastian/Work/ZendFramework/tests/Zend/Locale/FormatTest.php:183</p>

<p>3) testToNumberFormat(Zend_Locale_FormatTest)
string -1.234.567,12345 expected
Failed asserting that &lt;string:-1.234.567,12345&gt; is equal to &lt;string:-1.234.568,87655&gt;.
/home/sebastian/Work/ZendFramework/tests/Zend/Locale/FormatTest.php:681</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2007-06-18T15:37:05.000+0000</p> 
        <div class="body">
            <p>Please give details for reproduction...
Cannot reproduce this issue on 2 different servers.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Sebastian Nohn (nohn) on 2007-06-20T13:09:05.000+0000</p> 
        <div class="body">
            <p>PHP 5.2.1, Ubuntu 6.06</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2007-06-23T16:43:42.000+0000</p> 
        <div class="body">
            <p>Sorry, but I am not able to reproduce this issue.
On Windows and on the ZF-community Server (Linux Redhat?) the result is the same for the tests...</p>

<p>Please give more details for reproduction...
Locale, Extensions, PHP, OS...</p>

<p>Please use the latest SVN (min. 5432)... the testbed is from an outdated SVN version.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Sebastian Nohn (nohn) on 2007-06-24T04:08:17.000+0000</p> 
        <div class="body">
            <p>phpinfo()
PHP Version =&gt; 5.2.1</p>

<p>System =&gt; Linux h939937 2.6.15-26-686 #1 SMP PREEMPT Fri Sep 8 20:16:40 UTC 2006 i686
Build Date =&gt; Feb  8 2007 09:09:51
Configure Command =&gt;  './configure' '--prefix=/opt/php' '--sysconfdir=/etc/opt/php' '--localstatedir=/var/opt/php' '--with-apxs2=/opt/apache/sbin/apxs' '--with-mysql' '--wit
h-zlib' '--with-xml' '--enable-inline-optimization' '--enable-sockets' '--enable-ftp' '--with-pdo' '--with-pdo-mysql' '--with-gd' '--with-freetype-dir=/usr' '--with-jpeg-dir
=/usr' '--with-curl' '--with-tidy' '--with-xsl'
Server API =&gt; Command Line Interface
Virtual Directory Support =&gt; enabled
Configuration File (php.ini) Path =&gt; /opt/php/lib/php-cli.ini
PHP API =&gt; 20041225
PHP Extension =&gt; 20060613
Zend Extension =&gt; 220060519
Debug Build =&gt; no
Thread Safety =&gt; enabled
Zend Memory Manager =&gt; enabled
IPv6 Support =&gt; enabled
Registered PHP Streams =&gt; php, file, data, http, ftp, compress.zlib
Registered Stream Socket Transports =&gt; tcp, udp, unix, udg
Registered Stream Filters =&gt; string.rot13, string.toupper, string.tolower, string.strip_tags, convert.*, consumed, convert.iconv.*, zlib.*</p>

<p>This server is protected with the Suhosin Patch 0.9.6.2
Copyright (c) 2006 Hardened-PHP Project</p>

<p>This program makes use of the Zend Scripting Language Engine:
Zend Engine v2.2.0, Copyright (c) 1998-2007 Zend Technologies
    with Xdebug v2.0.0RC4-dev, Copyright (c) 2002, 2003, 2004, 2005, 2006, 2007, by Derick Rethans
    with Suhosin v0.9.18, Copyright (c) 2002-2006, by Hardened-PHP Project</p>

<p>$ echo $LANG
en_US</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2007-06-24T10:48:21.000+0000</p> 
        <div class="body">
            <p>Still not enough data for reproduction...
Missing active extensions and SVN version of ZF.</p>

<p>You are still using an outdated/old version of ZF... please use the latest SVN for the tests.</p>

<p>Please verify the following code:</p>

<p>&lt;</p>

<p>pre class="highlight"&gt;<code>
&lt;?php
require_once 'Zend/Locale.php';</code></p>

<p>print "</p>

<pre>";
        $options = array('locale' =&gt; 'de_AT');
print "\nZLF:".Zend_Locale_Format::toNumber(-1234567.12345, $options);
print "\nORG:-1.234.567,12345";
</pre>

<p>and give us the result from your browser.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Sebastian Nohn (nohn) on 2007-06-24T11:23:26.000+0000</p> 
        <div class="body">
            <p>SVN rev 5442.</p>

<p>Output:</p>

<p>ZLF:-1.234.568,87655
ORG:-1.234.567,12345</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2007-06-24T13:00:44.000+0000</p> 
        <div class="body">
            <p>Ok... I will need your help to fix this one as the code works on the ZFDEV's linux server.</p>

<p>Please change the code within Zend_Locale_Format-&gt;toNumber with this one and give me the generated output of the above code so I can see where your OS/PHP behaves different.</p>

<pre class="highlight"><code>
    public static function toNumber($value, array $options = array())
    {
        $value = Zend_Locale_Math::normalize($value);
        $options = array_merge(self::$_Options, self::checkOptions($options));
        if ($options['locale'] instanceof Zend_Locale) {
            $options['locale'] = $options['locale']-&gt;toString();
        }
print "\n316:.$value\nOPT:";print_r($options);

        // Get correct signs for this locale
        $symbols = Zend_Locale_Data::getContent($options['locale'], 'numbersymbols');
        iconv_set_encoding('internal_encoding', 'UTF-8');

        // Get format
        $format = $options['number_format'];
        if ($format === null) {
            $format  = Zend_Locale_Data::getContent($options['locale'], 'decimalnumberformat');
            $format  = $format['default'];
            if (iconv_strpos($format, ';') !== false) {
                if (call_user_func(Zend_Locale_Math::$comp, $value, 0) &lt; 0) {
                    $format = iconv_substr($format, iconv_strpos($format, ';') + 1);
                } else {
                    $format = iconv_substr($format, 0, iconv_strpos($format, ';'));
                }
            }
        } else {
            // seperate negative format pattern when avaiable
            if (iconv_strpos($format, ';') !== false) {
                if (call_user_func(Zend_Locale_Math::$comp, $value, 0) &lt; 0) {
                    $format = iconv_substr($format, iconv_strpos($format, ';') + 1);
                } else {
                    $format = iconv_substr($format, 0, iconv_strpos($format, ';'));
                }
            }

            if (strpos($format, '.')) {
                if (is_numeric($options['precision'])) {
                    $value = round($value, $options['precision']);
                } else {
                    if (substr($format, strpos($format, '.') + 1, 3) == '###') {
                        $options['precision'] = null;
                    } else {
                        $options['precision'] = strlen(substr($format, strpos($format, '.') + 1,
                                                              strrpos($format, '0') - strpos($format, '.')));
                        $format = substr($format, 0, strpos($format, '.') + 1) . '###'
                                . substr($format, strrpos($format, '0') + 1);
                    }
                }
            } else {
                $value = round($value, 0);
                $options['precision'] = 0;
            }
        }
print "\n362:".$format;
        // set negative sign
        if (call_user_func(Zend_Locale_Math::$comp, $value, 0) &lt; 0) {
            if (iconv_strpos($format, '-') === false) {
                $format = $symbols['minus'] . $format;
            } else {
                $format = str_replace('-', $symbols['minus'], $format);
            }
        }
print "\n371:$format";

        // get number parts
        if (strlen($value) != strlen(round($value, 0))) {
            if ($options['precision'] === null) {
                $precstr = iconv_substr($value, strlen(round($value, 0)) + 1);
print "\n378:$precstr";
            } else {
                $precstr = iconv_substr($value, strlen(round($value, 0)) + 1, $options['precision']);
                if (iconv_strlen($precstr) &lt; $options['precision']) {
                    $precstr = $precstr . str_pad("0", ($options['precision'] - iconv_strlen($precstr)), "0");
                }
            }
        } else {
            if ($options['precision'] &gt; 0) {
                $precstr = str_pad("0", ($options['precision']), "0");
            }
        }
        if ($options['precision'] === null) {
            if (isset($precstr)) {
                $options['precision'] = iconv_strlen($precstr);
            } else {
                $options['precision'] = 0;
            }
        }
print "\n392:".$options['precision'];

        // get fraction and format lengths
        $preg = call_user_func(Zend_Locale_Math::$sub, $value, '0');
        $prec = call_user_func(Zend_Locale_Math::$sub, $value, $preg, $options['precision']);
print "\n401:".$preg."...".$prec;
        if (iconv_strpos($prec, '-') !== false) {
            $prec = iconv_substr($prec, 1);
        }
print "\n405:".$prec;
        if (($options['precision'] + 2) &gt; strlen($prec)) {
            $prec = $prec . str_pad("0", ($options['precision'] - iconv_strlen($prec)), "0");
        }
print "\n409:".$prec;
        $number = call_user_func(Zend_Locale_Math::$sub, $value, $prec, 0);
print "\n411:".$number;
        if (iconv_strpos($number, '-') !== false) {
            $number = iconv_substr($number, 1);
        }
print "\n415:".$number;
        $group  = iconv_strrpos($format, ',');
        $group2 = iconv_strpos ($format, ',');
        $point  = iconv_strpos ($format, '0');
        // Add fraction
        $rest = "";
        if (($value &lt; 0) &amp;&amp; (strpos($format, '.'))) {
            $rest   = substr(substr($format, strpos($format, '.') + 1), -1, 1);
        }
print "\n424:".$rest;
        if ($options['precision'] == '0') {
            $format = iconv_substr($format, 0, $point) . iconv_substr($format, iconv_strrpos($format, '#') + 2);
        } else {
            $format = iconv_substr($format, 0, $point) . $symbols['decimal']
                               . iconv_substr($prec, 2) . iconv_substr($format, iconv_strrpos($format, '#') + 2 + strlen($prec) - 2);
        }
print "\n431:".$format;
        if (($value &lt; 0) and ($rest != '0') and ($rest != '#')) {
            $format .= $rest;
        }
print "\n435:".$format;
        // Add seperation
        if ($group == 0) {
            // no seperation
            $format = $number . iconv_substr($format, $point);

        } else if ($group == $group2) {
            // only 1 seperation
            $seperation = ($point - $group);
            for ($x = iconv_strlen($number); $x &gt; $seperation; $x -= $seperation) {
                if (iconv_substr($number, 0, $x - $seperation) !== "") {
                    $number = iconv_substr($number, 0, $x - $seperation) . $symbols['group']
                             . iconv_substr($number, $x - $seperation);
                }
            }
print "\n450:$number";
            $format = iconv_substr($format, 0, iconv_strpos($format, '#')) . $number . iconv_substr($format, $point);
print "\n452:$format";

        } else {

            // 2 seperations
            if (iconv_strlen($number) &gt; ($point - $group)) {
                $seperation = ($point - $group);
                $number = iconv_substr($number, 0, iconv_strlen($number) - $seperation) . $symbols['group']
                        . iconv_substr($number, iconv_strlen($number) - $seperation);

                if ((iconv_strlen($number) - 1) &gt; ($point - $group + 1)) {
                    $seperation2 = ($group - $group2 - 1);

                    for ($x = iconv_strlen($number) - $seperation2 - 2; $x &gt; $seperation2; $x -= $seperation2) {
                         $number = iconv_substr($number, 0, $x - $seperation2) . $symbols['group']
                                 . iconv_substr($number, $x - $seperation2);
                    }
                }

            }
            $format = iconv_substr($format, 0, iconv_strpos($format, '#')) . $number . iconv_substr($format, $point);

        }

        return (string) $format;
    }
</code></pre>

<p>And please verify if you are using BCMath or not.</p>

<p>Thanks for your help and effort...</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Sebastian Nohn (nohn) on 2007-06-25T14:06:59.000+0000</p> 
        <div class="body">
            <p>no bcmath,</p>

<p>316:.-1234567.12345
OPT:Array
(
    [date_format] =&gt;
    [number_format] =&gt;
    [format_type] =&gt; iso
    [fix_date] =&gt;
    [locale] =&gt; de_AT
    [precision] =&gt;
)</p>

<p>362:#,##0.###
371:-#,##0.###
378:12345
392:5
401:-1234568...0.87655
405:0.87655
409:0.87655
411:-1234568
415:1234568
424:#
431:-#,##,87655
435:-#,##,87655
450:1.234.568
452:-1.234.568,87655
ZLF:-1.234.568,87655
ORG:-1.234.567,12345</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2007-06-25T14:45:32.000+0000</p> 
        <div class="body">
            <p>I think I know where the problem is related to...
I just committed a fix for BCless subbing.</p>

<p>Please try if SVN5450 fixes your problems and give feedback.... thnx</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Sebastian Nohn (nohn) on 2007-06-26T12:22:14.000+0000</p> 
        <div class="body">
            <p>One is still failing:</p>

<p>6) testToNumberFormat(Zend_Locale_FormatTest)
value -12.345 expected
Failed asserting that &lt;string:-12.345&gt; is equal to &lt;string:-12.356&gt;.
/home/sebastian/Work/ZendFramework/tests/Zend/Locale/FormatTest.php:697</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2007-06-26T16:28:18.000+0000</p> 
        <div class="body">
            <p>Hopefully it should now work with SVN 5456.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Sebastian Nohn (nohn) on 2007-06-27T13:36:11.000+0000</p> 
        <div class="body">
            <p>6) testToNumberFormat2(Zend_Locale_FormatTest)
Failed asserting that &lt;double:2.3&gt; is equal to &lt;double:1.3&gt;.
/home/sebastian/Work/ZendFramework/tests/Zend/Locale/FormatTest.php:708</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2007-06-27T14:05:54.000+0000</p> 
        <div class="body">
            <p>I still dont know where the difference between rhel und ubutu are :-(
Linux is not Linux... community server (rhel) has no problem...</p>

<p>Can you check the code from 708 (toNumber call) with the changed function I gave you and give me the output as already done before for the other test... hopefully I will see the difference again...</p>

<p>Thanks for your effort and help</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Sebastian Nohn (nohn) on 2007-06-29T08:00:26.000+0000</p> 
        <div class="body">
            <pre class="highlight"><code>
316:.1.7
OPT:Array
(
    [date_format] =&gt;
    [number_format] =&gt;
    [format_type] =&gt; iso
    [fix_date] =&gt;
    [locale] =&gt; en
    [precision] =&gt;
)

362:#,##0.###
371:#,##0.###
378:7
392:1
401:1...0.7
405:0.7
409:0.7
411:1
415:1
424:
431:#,##.7
435:#,##.7
450:1
452:1.7
316:.2.3
OPT:Array
(
    [date_format] =&gt;
    [number_format] =&gt;
    [format_type] =&gt; iso
    [fix_date] =&gt;
    [locale] =&gt; en
    [precision] =&gt;
)

362:#,##0.###
371:#,##0.###
378:3
392:1
401:2...0.3
405:0.3
409:0.3
411:1
415:1
424:
431:#,##.3
435:#,##.3
450:1
452:1.3F

Time: 00:00

There was 1 failure:

1) testToNumberFormat2(Zend_Locale_FormatTest)
Failed asserting that </code></pre>
        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2007-06-29T14:58:25.000+0000</p> 
        <div class="body">
            <p>Probably fixed with SVN 5507...
This should do it for all tests ( at last ;-) )</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Sebastian Nohn (nohn) on 2007-06-30T13:00:15.000+0000</p> 
        <div class="body">
            <p>Works now.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2007-06-30T15:32:58.000+0000</p> 
        <div class="body">
            <p>Super !!</p>

<p>At all before 1.0 we got it running.
Thank you for your help, Sebastian.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Sebastian Nohn (nohn) on 2007-07-01T01:55:33.000+0000</p> 
        <div class="body">
            <p>:)</p>

        </div>
    </div>
    </div>

