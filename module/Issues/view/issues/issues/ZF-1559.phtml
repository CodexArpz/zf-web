<h2>ZF-1559: Zend_Pdf leaks memory</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2007-06-13T11:20:05.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2007-07-05T14:44:19.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.0.0 RC3 (23/Jun/07)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Alexander Veremyev (alexander)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Pdf</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>I've created fairly extensive reporting system based on Zend_Pdf. It generates reports in a loop.
Each report has around 20 pages containing text, images and tables. 
The problem is that I'm loosing about 1.5MB of memory on each iteration.
Looks like a major memory leak to me.</p>

<p>It seams that even simple instantiation of Zend_Pdf or Zend_Pdf_Page looses memory.
The script below demonstrates this. Objects are not assigned to anything and shouldn't eat memory like that.
For comparison Zend_Pdf_Style shows proper behavior.</p>

<pre class="highlight"><code>
start:4,076,700
new Zend_Pdf()
4,087,384
4,093,488
4,099,544
4,105,560
4,111,596
new Zend_Pdf_Page()
4,115,544
4,121,936
4,128,504
4,135,072
4,141,640
new Zend_Pdf_Style()
4,141,872
4,141,872
4,141,872
4,141,872
4,141,872
</code></pre>

<pre class="highlight"><code>
require_once 'Zend/Pdf.php';
require_once 'Zend/Pdf/Page.php';
require_once 'Zend/Pdf/Style.php';

echo number_format(memory_get_usage()),PHP_EOL;
echo 'new Zend_Pdf()',PHP_EOL;
foreach(range(1,5) as $i) {
    new Zend_Pdf();
    echo number_format(memory_get_usage()),PHP_EOL;
}
echo 'new Zend_Pdf_Page()',PHP_EOL;
foreach(range(1,5) as $i) {
    new Zend_Pdf_Page('a4');
    echo number_format(memory_get_usage()),PHP_EOL;
}
echo 'new Zend_Pdf_Style()',PHP_EOL;
foreach(range(1,5) as $i) {
    new Zend_Pdf_Style('a4');
    echo number_format(memory_get_usage()),PHP_EOL;
}
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-06-13T12:41:22.000+0000</p> 
        <div class="body">
            <p>Assigning to Alexander.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Alexander Veremyev (alexander) on 2007-06-21T09:26:24.000+0000</p> 
        <div class="body">
            <p>Fixed.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Karol Grecki (antych) on 2007-06-21T10:15:58.000+0000</p> 
        <div class="body">
            <p>Thanks Alexander for working on it.
Unfortunately  I checked out code from trunk and I get lots of warnings, an error opening a pdf file and missing images.</p>

<p>Here are the warnings:
Warning: Invalid argument supplied for foreach() in /home/kgrecki/Zend/Pdf/ElementFactory.php on line 274
Warning: Invalid argument supplied for foreach() in /home/kgrecki/Zend/Pdf/ElementFactory.php on line 226
Warning: ksort() expects parameter 1 to be array, null given in /home/kgrecki/Zend/Pdf/ElementFactory.php on line 386
Warning: Invalid argument supplied for foreach() in /home/kgrecki/Zend/Pdf/ElementFactory.php on line 389
Warning: Invalid argument supplied for foreach() in /home/kgrecki/Zend/Pdf/ElementFactory.php on line 402</p>

<p>Acrobat complains: Could not find the XObject named 'X1'</p>

<p>Cheers</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Alexander Veremyev (alexander) on 2007-06-21T10:44:01.000+0000</p> 
        <div class="body">
            <p>one moment... I'll check it right now</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Alexander Veremyev (alexander) on 2007-06-21T11:15:27.000+0000</p> 
        <div class="body">
            <p>I think the problem is concerned with sharing image object between documents or something like this.  Nevertheless such sharing should work correct.</p>

<p>I can't reproduce problem right now. Could you give an example of your script and, if possible, your data? If yes, please send it to me (alexander.v@zend.com) or put somewhere for downloading or attach to the issue.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Karol Grecki (antych) on 2007-06-21T11:33:44.000+0000</p> 
        <div class="body">
            <p>I managed to replicate it with this code.
I have a decorator class, where I'm passing $pdf object and draw logo on every page.
This seams to be a problem, when I render it inside a function it works, but if I return it and call render() it gives warnings.</p>

<p>Hopes that help</p>

<pre class="highlight"><code>
$pdf = new Zend_Pdf();
$pdf-&gt;pages[] = new Zend_Pdf_Page('a4');

$pdf = decorate($pdf);
$pdf-&gt;render();

function decorate(Zend_Pdf $pdf) {
    $logo = new Zend_Pdf_Resource_Image_Png('../assets/logo.png');
    foreach ($pdf-&gt;pages as $page) {
        $page-&gt;drawImage($logo, 30, 530, 30 + $logo-&gt;getPixelWidth()/4.2, 530 + $logo-&gt;getPixelHeight()/4.2);   
    }
    return $pdf;
}
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Alexander Veremyev (alexander) on 2007-06-21T12:06:12.000+0000</p> 
        <div class="body">
            <p>Yes. That's clear, what is this.</p>

<p>$logo variable goes out of scope and it destroys image data.</p>

<p>You can describe $logo as static as temporary solution:</p>

<pre class="highlight"><code>
function decorate(Zend_Pdf $pdf) {
    $dirName = '/home/cawa/ZendFramework/laboratory/Pdf';

    static $logo;
    if (!$logo instanceof Zend_Pdf_Resource_Image) {
        $logo = Zend_Pdf_Image::imageWithPath($dirName . '/stamp.png');
    }

    foreach ($pdf-&gt;pages as $page) {
        $page-&gt;drawImage($logo, 30, 530, 30 + $logo-&gt;getPixelWidth()/4.2, 530 + $logo-&gt;getPixelHeight()/4.2);
    }
    return $pdf;
}
</code></pre>

<p>So I am reopening issue while this problem is not fixed.</p>

<p>PS New syntax Zend_Pdf_Image::imageWithPath(...) is preferable.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Alexander Veremyev (alexander) on 2007-06-22T10:25:20.000+0000</p> 
        <div class="body">
            <p>Fixed.</p>

        </div>
    </div>
    </div>

