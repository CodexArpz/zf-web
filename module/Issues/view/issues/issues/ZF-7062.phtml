<h2>ZF-7062: Zend_Application_Resource_Layout: support for custom Layout Classes (My_Layout)</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2009-06-21T00:31:52.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-06-21T05:09:41.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Dolf Schimmel (Freeaqingme) (freak)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Application</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Hi,</p>

<p>it would be nice to get support for custom Layout classes like My_Layout by the layout resource plugin.</p>

<p>currently I workaround this by using the _init() functions in Bootstrap to get the layout initialized:</p>

<p>protected function _initLayout () 
    {
        $view = $this-&gt;getResource('View');</p>

<pre><code>    $options = array(
        'view'     =&gt; $view,
        'layout'     =&gt; 'layout_standard',
        'layoutPath' =&gt; APPLICATION_PATH . '/layouts/scripts/',
        'contentKey' =&gt; 'content',           // ignored when MVC not used
        'viewSuffix' =&gt; 'html',
    );

    Herod_Layout::startMvc($options);
    $layout = Herod_Layout::getMvcInstance();
    return $layout;
} 
</code></pre>

<p>thx and greetings!
marco</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Ben Rexin (salz) on 2009-06-21T05:09:25.000+0000</p> 
        <div class="body">
            <p>That not an bug, create your own Resource Plugin!</p>

<p>/library/App/Application/Resource/Layout.php</p>

<pre class="highlight"><code>
class App_Application_Resource_Layout extends Zend_Application_Resource_Layout {
    public function getLayout()
    {
        if (null === $this-&gt;_layout) {
            $this-&gt;_layout = Herod_Layout::startMvc($this-&gt;getOptions());
        }
        return $this-&gt;_layout;
    }
} 
</code></pre>

<p>and for the applications.ini:
/application/configs/application.ini</p>

<pre class="highlight"><code>
resources.App_Application_Resource_Layout.yourOptions
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Dolf Schimmel (Freeaqingme) (freak) on 2009-06-21T05:09:41.000+0000</p> 
        <div class="body">
            <p>This is not an issue. The resource plugins that are shipped with ZF are meant for ZF components only. If you need a resource plugin for another component you can simply extend Zend_Application_Resource_Layout or Zend_Application_Resource_ResourceAbstract.</p>

        </div>
    </div>
    </div>

