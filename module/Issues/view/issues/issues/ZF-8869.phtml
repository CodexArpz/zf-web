<h2>ZF-8869: Memory leak in xml-rpc client.</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2010-01-19T06:18:11.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-05-30T14:11:39.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.12.0 (27/Aug/12)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Gonzalo Martinez (gmartine)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Michelangelo van Dam (dragonbe)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_XmlRpc_Client</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-8457">ZF-8457</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
        <li><a href="/issues/secure/attachment/12657/args_reqs_resp.zip">args_reqs_resp.zip</a></li>
            <li><a href="/issues/secure/attachment/12656/memory_usage.png">memory_usage.png</a></li>
            <li><a href="/issues/secure/attachment/14336/ZendXmlRpcClientCall.php">ZendXmlRpcClientCall.php</a></li>
            <li><a href="/issues/secure/attachment/14328/ZendXmlRpcGeneratorXmlWriterLeaks.php">ZendXmlRpcGeneratorXmlWriterLeaks.php</a></li>
            <li><a href="/issues/secure/attachment/14329/ZF-8869-library.patch">ZF-8869-library.patch</a></li>
        </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>When using "$XmlRpcClient-&gt;call($method, $args);" in a loop structure, after a few rounds, I got Php's memory exhaustion message.</p>

<p>I traced the leak to "Zend\XmlRpc\Client.php" line 351 where the code is;</p>

<pre class="highlight"><code>
$params[$key] = Zend_XmlRpc_Value::getXmlRpcValue($param, $type);
</code></pre>

<p>I did the trace by placing a "memory_get_usage();" before and after the line and see the results (there is probably a better way).</p>

<p>My app is running on a Windows XP / SP3, using php 5.2.12 and ZF 1.9.7.</p>

<p>This is my first time reporting a bug, if I omitted some info or not reporting the right way please let me know and will make the necessary corrections.</p>

<p>Regards,
Gonzalo.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Lars Strojny (lars) on 2010-01-20T16:11:40.000+0000</p> 
        <div class="body">
            <p>Thanks for the bug report. Could you provide me an example of the parameters you are passing to Zend_XmlRpc_Client::call()?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Gonzalo Martinez (gmartine) on 2010-01-21T06:39:21.000+0000</p> 
        <div class="body">
            <p>Hi Lars,</p>

<p>Will attach all the info I think relevant.</p>

<p>I've just did run the loop for about 30 secs, that did perform four xml-rpc client calls, each with $args of around 400K each.</p>

<p>I am attaching all the info I could get from it.</p>

<p>i) graph of process memory consumption.</p>

<p>ii) zip file containing 12 files, 3 for each call, eg; 
      # 1st_args.txt is print_r() of the $args passed in the call.
      # 1st_request.txt is the captured http request.
      # 2nd_response.txt is the captured http response.</p>

<hr /><p>On the client's side the line making the call goes like;</p>

<pre class="highlight"><code>
$result = $XmlRpcClient-&gt;call($method, $args);
</code></pre>

<h2>where $method is a string and $args is "array($queries)" being $queries another array.</h2>

<p>On the server's side the head of the method handling the xml-rpc call is;</p>

<pre class="highlight"><code>
/*
* @param struct $queries
* @return struct
*/
public function actondbms($queries) {
...
}
</code></pre>

<p>Regards,
Gonzalo.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Gonzalo Martinez (gmartine) on 2010-01-21T06:40:30.000+0000</p> 
        <div class="body">
            <p>See comment for files content description...</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Patrick Schwisow (patrick.schwisow) on 2010-02-18T11:27:07.000+0000</p> 
        <div class="body">
            <p>I believe this issue is related to the addition of an XML generator based on XMLWriter. If the XMLWriter extension is enabled, Zend_XmlRpc_Value defaults to using it.</p>

<p>Following an update of my local version of Zend Framework, one of my scripts went from comfortably fitting in 512M to needing 2G. I added</p>

<pre class="literal">
Zend_XmlRpc_Value::setGenerator(new Zend_XmlRpc_Generator_DomDocument());
</pre>

<p>before my call to {{new Zend_XmlRpc_Server()}} and the memory usage is back down to normal levels.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Patrick Schwisow (patrick.schwisow) on 2010-02-18T12:49:52.000+0000</p> 
        <div class="body">
            <p>OK... I'll revise my statements. It is now running out of memory only some of the time.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Sven B. (susouke) on 2010-09-03T01:22:10.000+0000</p> 
        <div class="body">
            <p>Hi guys,</p>

<p>we can confirm this problem. We have a cron-script which runs in an infinity-loop and uses also the Zend_XmlRpc_Client. The memory usage grows minute for minute.</p>

<p>It really would be nice if we had an solution or workaround for this issue.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Christoph Roensch (croensch) on 2011-05-27T02:14:36.000+0000</p> 
        <div class="body">
            <p>Succesfully reproduced it on Zend Server 5.1.0 (php-5.3.5-nts-Win32-VC9-x86). The memory usage increases slightly in my Simulation, but with the fix it is constant and much faster.</p>

<p><a href="http://de.php.net/manual/de/function.xmlwriter-flush.php">Manual for XMLWriter::flush()</a></p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ralph Schindler (ralph) on 2011-05-28T17:51:48.000+0000</p> 
        <div class="body">
            <p>I am not sure what the issue is, both the DomDocument and XmlWriter generators operate the same way.  They are capturing all values passed through Zend_XmlRpc_Value::getXmlRpcValue() and keeping them in-memory (as I think I expect them to as you are using a static generator).  If you remove the generator from the equation, then memory usage is constant.</p>

<pre class="highlight"><code>
&lt;?php
set_include_path('path/to/ZFStandardTrunk/library');

//require_once('Zend/XmlRpc/Generator/XmlWriter.php');
require_once('Zend/XmlRpc/Generator/DomDocument.php');
require_once('Zend/XmlRpc/Value.php');

// be sure to use the leaky generator
//$generator = new Zend_XmlRpc_Generator_XmlWriter();
$generator = new Zend_XmlRpc_Generator_DomDocument();
Zend_XmlRpc_Value::setGenerator($generator);

// test a thousand times
for( $i = 0; $i &lt; 1000; $i++ ){
  $targetValue = str_repeat('*', 1000); // 1000 stars
  $xmlRpcValue = Zend_XmlRpc_Value::getXmlRpcValue($targetValue, Zend_XmlRpc_Value::XMLRPC_TYPE_STRING);
  $output = $xmlRpcValue-&gt;saveXml();
  
  // report sometimes
  if( $i%100 === 0 ){
    $mem = floor(memory_get_usage()/1024);
    echo "KB $mem\n";
  }
  
  // writing output to disk
  file_put_contents(__DIR__ . '/tmp/' . str_pad($i, 4, '0', STR_PAD_LEFT) . '.output', $output);
  
  // clean
  unset($output, $targetValue, $xmlRpcValue);
}

</code></pre>

<p>Try that with a variety of different runs and examine the output files.</p>

<p>I am inclined to close as not an issue.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Christoph Roensch (croensch) on 2011-05-29T15:04:24.000+0000</p> 
        <div class="body">
            <p>You're right. I was mislead by the description and only tested Zend_XmlRpc_Value.</p>

<p>I've read through the module now and found out that only $generator-&gt;saveXml() gets called. Also $xmlRpcValue-&gt;saveXml() is never called. If it were called the user would have to call $generator-&gt;flush() beforehand, else it would return xml of other values that we're generated before.</p>

<p>However, that is not the problem, Request/Response and Client flush the generator correctly. I reproduced Zend_XmlRpc_Client::call() and now i'm as sure as you that there is no leak.</p>

<p>I'm voting for a close as not an issue, i also have no issue with this in production, i just wanted to bug hunt :)</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Patrick Schwisow (patrick.schwisow) on 2011-05-31T14:21:47.000+0000</p> 
        <div class="body">
            <p>It's possible that this is the same issue that was fixed in ZF-9504. I think you should look over that ticket and also ZF-8457 before calling this one closed (duplicate).</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Michelangelo van Dam (dragonbe) on 2011-08-26T15:56:17.000+0000</p> 
        <div class="body">
            <p>Patched in r24402, ready to deploy</p>

<p>Had some additional test runs.</p>

<p>Can't see why it was set to false in the first place (r19561)</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Kazusuke Sasezaki (sasezaki) on 2012-05-30T14:11:39.000+0000</p> 
        <div class="body">
            <p>I found r24402 fix is reverted at r24480
<a href="http://framework.zend.com/code/revision.php?repname=Zend+Framework&amp;path=%2Ftrunk&amp;rev=24480">http://framework.zend.com/code/revision.php/â€¦</a></p>

<p>So, is this Memory leak issue is resolved?</p>

        </div>
    </div>
    </div>

