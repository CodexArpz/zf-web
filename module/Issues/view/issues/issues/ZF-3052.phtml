<h2>ZF-3052: leacking unnecessary attributes into html source.  viewScript  + helper</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2008-04-05T07:11:28.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-11-20T12:57:10.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.10.0 (27/Jan/10)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Matthew Weier O'Phinney (matthew)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Form</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>viewScript and helper are set as attributes to elements when source is rendered...
I see sample solution -&gt; Zend_Form_Decorator_Image::$_attribBlacklist<br />
But only there it is implemented.
Should be done for all Elements.</p>

<pre class="highlight"><code>
        $el = new Zend_Form_Element_Select('el_name');
        $el-&gt;viewScript = 'index/ba.html';
        $el-&gt;setDecorators(array(
                                array('ViewScript', array('class' =&gt; 'form element')),
                                //array('ViewHelper', array('helper' =&gt; 'formSelect'))
                                ));

        $form-&gt;addElement($el);
</code></pre>

<p>output:
</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Julian Davchev (jmut) on 2008-04-05T07:11:53.000+0000</p> 
        <div class="body">
            <p>Setting to Zend_Form componnent...forgot to mention</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2008-05-09T11:23:54.000+0000</p> 
        <div class="body">
            <p>While I can see this as nice when validating against w3c, there are applications where having arbitrary attributes can be useful -- dojo and other JS toolkits utilize custom attributes to configure elements.</p>

<p>Any solution such as this (whitelisting or blacklisting) should be configurable -- i.e., it can be either on or off by default, with methods or configuration options to toggle the behavior.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2008-05-09T11:27:10.000+0000</p> 
        <div class="body">
            <p>Tentatively scheduling for next minor release. Will require significant amount of work to make form decorators/view helpers comply with w3c specifications, and the benefit, while nice, is one that is negligible.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Julian Davchev (jmut) on 2008-08-11T12:08:37.000+0000</p> 
        <div class="body">
            <p>Well then, perhaps postpone this for later.   Maybe not worth so much work if little benefit - never thought of applications needing arbitrary attributes. I just thought of this as bug and from my point of view wasn't so much work. Of course you have much better overview in Zend_Form and the like. I see no votes here so I guess best option is don't touch at all for now.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2009-11-20T12:57:10.000+0000</p> 
        <div class="body">
            <p>Too many moving parts. Some parts can be fixed on a case-by-case basis, but a sweeping change to blacklisting would break too many other areas at this time.</p>

        </div>
    </div>
    </div>

