<h2>ZF-651: Bind inconsistent in query() versus update()/delete().</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2006-12-14T20:53:42.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2008-12-19T13:13:49.000+0000</dd>

    <dt>Status:</dt>
    <dd>Closed</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>0.9.3 (05/May/07)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Alex Adriaanse (alexadriaanse)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Ralph Schindler (ralph)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Db</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-1905">ZF-1905</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Zend_Db_Adapter_Abstract::query(), Zend_Db_Select::where(), etc. allow you to bind variables to $sql/$where.  However, in Zend_Db_Adapter_Abstract::update(), Zend_Db_Adapter_Abstract::delete(), Zend_Db_Table::update() and Zend_Db_Table::delete() it will not bind any variables to the $where variable.</p>

<p>Furthermore, Zend_Db_Table::fetchAll() and Zend_Db_Table::fetchOne() allow you to bind variables to $where, but you'd have to pass it as the values in the $where array rather than using a separate $bind variable, and you can only use question mark placeholders in those.</p>

<p>Unless this was done deliberately, it'd be nice if Zend_Db_Adapter_Abstract, Zend_Db_Select, and Zend_Db_Table would all use the same interface for binding variables.  Essentially, always use a separate $bind variable to allow you to bind using either question mark placeholders or named placeholders.</p>

<p>It'd also be nice if one could directly pass arrays as one of the bind values (i.e. $bind would be an array of arrays) in all the aforementioned functions and it'd substitute a comma-separated list of values, just like how Zend_Db_Adapter_Abstract::quote() does it.</p>

<p>Again, if this is done by design then that's fine with me, so in that case just ignore this ticket.  It's just that the different ways that variables need to be bound makes things a bit confusing.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2006-12-19T12:37:55.000+0000</p> 
        <div class="body">
            <p>Assigning to Bill Karwin.  Scheduling for 0.8.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2006-12-19T12:38:47.000+0000</p> 
        <div class="body">
            <p>Assigning to Bill Karwin.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Darby Felton (darby) on 2007-04-20T17:37:22.000+0000</p> 
        <div class="body">
            <p>For Table::fetchAll(), we already have four optional parameters, and additional optional parameters would certainly take away from the simplicity of using the method.</p>

<p>For Table::update() and delete(), the $where parameter may be an array, and therefore, the usage of binding variables here would be difficult to document and to use, as the interface becomes more complex.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Piotr Kabacinski (kabot) on 2008-11-02T12:15:03.000+0000</p> 
        <div class="body">
            <p>bq. For Table::update() and delete(), the $where parameter may be an array, and therefore, the usage of binding variables here would be difficult to document and to use, as the interface becomes more complex.</p>

<p>But when you add third argument like <em>Zend_Db_Table_Abstract::update(array $data, $where, $bind = array())</em> is it still possible to use method as it was before and in new way, for example:</p>

<pre class="highlight"><code>
class Table1 extends Zend_Db_Table_Abstract  {}

$t = new Table1();

$t-&gt;update(array('a', 'b'), array('id = ?'), 2); //for only one parameter it doesn't have to be array
$t-&gt;update(array('a', 'b'), array('id = ?', 'active = ?'), array(2, 1));
</code></pre>

<p>What do you think about this idea?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-12-19T13:13:49.000+0000</p> 
        <div class="body">
            <p>Bookkeeping. Closing old issues and assigning them to the person who ultimately resolved the issue.</p>

        </div>
    </div>
    </div>

