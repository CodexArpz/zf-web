<h2>ZF-9588: Como utilizar Zend_Form_Element_Hash com AJAX</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Docs:  Improvement</dd>

    <dt>Created:</dt>
    <dd>2010-04-01T12:14:33.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2010-04-01T12:19:00.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Matthew Weier O'Phinney (matthew)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Form</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-9587">ZF-9587</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>A solução exposta a seguir foi pensada para o problema do uso do elemento Zend Form Hash com solicitação Ajax no formulário. O problema ocorre porque o valor do hash expira depois da primeira tentativa de enviar o formulário, o que inviabiliza qualquer tentativa de envio posterior sem recarregar a página.</p>

<p>Crie, além do seu formulário que conterá os dados, um formulário sem elementos. Do controlador você instancia os dois formulários. Também no controlador, você adiciona o elemento hash ao formulário vazio. Ambos formulários devem ser enviados à visão. Depois, dentro da condição "if ($request-&gt;isXmlHttpRequest())" do controlador você renderiza o formulário vazio. Em seguida, pega-se o valor do hash com o método "getValue()". Esse valor deve ser enviado na resposta Ajax e pelo JavaScript substituir o valor do hash que já está obsoleto. A opção de criar um formulário vazio para o hash serve para evitar problemas com outros elementos como, por exemplo, o captcha que ao ser renderizado o formulário teria o seu id gerado novamente e também teria que ter a informação substituída. A validação será feita separadamente já que são dois formulários distintos. Depois você pode reutilizar o formulário (vazio) hash quando quiser. Abaixo seguem os exemplos do código.</p>

<p>//No controlador, após instanciar o formulário vazio, você adiciona o elemento hash a ele:
$hash = new Zend_Form_Element_Hash('no_csrf_foo');
$hash_form-&gt;addElement('hash', 'no_csrf_foo', array('salt' =&gt; 'unique'));</p>

<p>//...</p>

<p>//Também no controlador, dentro da condição "if ($request-&gt;isXmlHttpRequest())" você renderiza o formulário (isso vai renovar a sessão para a próxima tentativa de enviar o formulário) e pega o valor do novo id:
$hash_form-&gt;render($this-&gt;view);
$hash_value['hash'] = $hash_form-&gt;getElement('no_csrf_foo')-&gt;getValue();//O valor deve ser adicionado à resposta ajax em Json, por exemplo. Podem-se usar os métodos Zend_Json::decode($response) e Zend_Json::encode($array) para as conversões entre o array do Php e o Json.</p>

<p>//--------------------------------------</p>

<p>//No JavaScript, na função de resposta Ajax:
document.getElementById("no_csrf_foo").value = data.hash;//Recupera o valor hash da resposta Json e manda ele para o input do hash.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Ryan Mauger (bittarman) on 2010-04-01T12:18:33.000+0000</p> 
        <div class="body">
            <p>Same support request, but in spanish</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ryan Mauger (bittarman) on 2010-04-01T12:19:00.000+0000</p> 
        <div class="body">
            <p>see ZF-9587</p>

        </div>
    </div>
    </div>

