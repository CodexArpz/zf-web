<h2>ZF-10239: Zend_Dojo CurrencyTextBox is not validated by Zend_Validate_Float when using Zend_Locale</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2010-07-28T02:02:21.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-11-20T21:38:10.000+0000</dd>

    <dt>Status:</dt>
    <dd>Open</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
        None
                    </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Dojo</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>There's thing that bothers me is when using Zend_Dojo_Form_Element_CurrencyTextBox with currency set to, let's say 'PLN': it's displaying value with all advantages of dijit.form.currencytextbox, but this dojo element actually returns not-localized, plain float to form field.</p>

<p>What makes the problem is Zend_Validate_Float, which is using Zend_Locale. When it receives float string, not number, it does not recognize it as dotted float is not compliant with Polish locale.</p>

<p>Reproduction:
1. Set CurrencyTextBox 'value' to 12.34 and 'currency' to 'PLN' (locale: 'pl' or 'pl_PL').
2. While displaying dijit.form.currencytextbox it displays locale-aware value ('pl_PL' - 12,34), but input holds '12.34' and that value is POSTed
3. Zend_Validate_Float gets string '12.34' and does not recognizes it as float, then tries to use Zend_Locale_Format::isFloat($value, array('locale' =&gt; $this-&gt;_locale)) - but fails to recognize, because value returned from dijit has dot instead of comma.</p>

<p>I had to create my custom float validator that is exact copy of Zend_Validate_Float but has one more check between is_float() and try{} section - if (is_string($value) &amp;&amp; is_numeric($value)) - but that is not elegant way, isn't it?</p>

<p>Solution suggested by Thomas Weidner was to set English locale just for Zend_Validate_Float, but it is good solution only when you know that client browser has javascript enabled, but what if somebody needs it working in both situations? If javascript is disabled, dijit won't convert it to English locale, and there will be message: '12,34' does not appear to be a float.</p>

<p>So still, possible solutions are:</p>

<ol><li><p>find out how to force dijit to return localized value and make Zend_Dojo_Form_Element_CurrencyTextBox to do that (if Zend_Locale is enabled and Zend_Validate_Float is in use, otherwise it will be ok)</p></li>
<li><p>use is_numeric() in Zend_Validate_Float() after is_float() and before Zend_Locale_Format::isFloat() - not elegant way, might pass not only floats, but does not break app</p></li>
</ol>
    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Kim Blomqvist (kblomqvist) on 2010-07-28T02:24:13.000+0000</p> 
        <div class="body">
            <p>I would use filters like LocalizedToNormalized before validation process. In my opinion, the float validator shouldn't even be locale aware...</p>

        </div>
    </div>
    </div>

