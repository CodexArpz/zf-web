<h2>ZF-2730: Zend_Validate_Abstract::setMessgage() does not overwrite the message from the translator.</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2008-02-25T11:35:29.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-09-15T10:55:04.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.10.0 (27/Jan/10)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Laurent Melmoux (laurent melmoux)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Thomas Weidner (thomas)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Validate</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>When I have set a translation object in Zend_Registry() to be used as default translator, sometime I will need to set a Custom Validator Error Message for a specific field.</p>

<p>But when we call Zend_Validate_Abstract::setMessgage() it does not overwrite the message from the translator.</p>

<p>To have it working I had to add a property in <em>Zend_Validate_Abstract</em> to keep track of the messages template which have been changed by <em>Zend_Validate_Abstract::setMessgage()</em>;</p>

<p>And use it to see if the translator message should overwrite it, in <em>Zend_Validate_Abstract:: _createMessage()</em>:</p>

<pre class="highlight"><code>
if (null !== ($translator = $this-&gt;getTranslator()) &amp;&amp; !in_array($messageKey, $this-&gt;_messagesOverWriten)) {
    if ($translator-&gt;isTranslated($messageKey)) {
        $message = $translator-&gt;translate($messageKey);
    }
}
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-04-18T16:55:02.000+0000</p> 
        <div class="body">
            <p>Please evaluate and categorize/assign as necessary.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2009-03-08T12:47:03.000+0000</p> 
        <div class="body">
            <p>That's correct behaviour. It could be described as:</p>

<p>First output Original message -&gt;&gt; but when set then the own message -&gt;&gt; and then when set the translation</p>

<p>Expect you have set own messages and also translation:
A english user would get you own message and a french user would get the translation of the original message.</p>

<p>So, having both you would have to change the translation, otherwise your message is inconsistent.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Laurent Melmoux (laurent melmoux) on 2009-03-09T01:20:01.000+0000</p> 
        <div class="body">
            <p>What I want to say is that sometime you don't want to display the generic translation but a custom one.
A use case will make it clearer :</p>

<p>For exemple with the NotEmpty Validator the original message is :
* Value is empty, but a non-empty value is required
Then my translation is :
* le champs est requis
But now let say I want so display something more specific, for exemple "the terme of use checkbox" and display
* vous devez accepter les conditions d'utilisations du site</p>

<p>The in this specific use case custom message is usefull</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2009-06-26T11:45:42.000+0000</p> 
        <div class="body">
            <p>To have a "custom" translation you would have to extend the default translation instance and add your wished "custom" translations.</p>

<p>Then you have to give this "extended" translation instance to the validator you want to customize.
It's not possible to do "chained" translations.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2009-06-26T11:47:15.000+0000</p> 
        <div class="body">
            <p>Closing as won't fix due to the previous mentioned reasons.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Laurent Melmoux (laurent melmoux) on 2009-06-29T01:02:41.000+0000</p> 
        <div class="body">
            <p>I'm using Zend_Form and if I use your solution all the field will used the custom translation when I just need an one specific field to used it.</p>

<p>Also the behavior between native language and others language  (with i18n  translation object) is not the same :
With Zen_Form and without i18n support you can use custom message  (@see ZF manual &gt; Zend_Form &gt; 23.3.3.1. Custom Error Messages) but as long as you use i18n support by setting the default translator in Zend_Registry() this feature does not work anymore. 
IMHO it should be the same behaviors. Activating  i18n shouldn't change as your application behave.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2009-06-29T03:37:27.000+0000</p> 
        <div class="body">
            <p>As described before do custom translations by using setTranslator() which is a instance method of the abstract class.</p>

<p>Why should the custom translation be used for all elements?
This is only the case when you use the same element multiple times.</p>

<p>The solution is to use different instances... one with translation-A and one with translation-B.
When you want to use a "specific" field then also initiate it as specific field (seperate instance). Simple OOP behaviour.</p>

<p>And why should translation no longer work when setting a custom error message ?
All errors are translated as long as you provide their key and their translation.
When you don't want the custom error to be translated use a different key or a different translation.</p>

<p>This works for the default errors the same as for custom errors.
There is no change in behaviour.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Laurent Melmoux (laurent melmoux) on 2009-06-29T06:22:18.000+0000</p> 
        <div class="body">
            <p>Thomas,</p>

<p>I probably don't express me very well so let's take an example to illustrate my issue :</p>

<p>Let's say I have a form with severals fields where I need to validate the string length.  Most of the time the generic message for Zend_Validate_StringLength string too short is good enough, but  I want a more explicit/friendly message for my username field.</p>

<p>Here how it works with no i18n setup :</p>

<pre class="highlight"><code>
$validator = new Zend_Validate_StringLength(8);

// with generic message output
// "'word' is less than %min% characters long"
if (!$validator-&gt;isValid('word')) {
    $messages = $validator-&gt;getMessages();
    echo current($messages);
}

// I want a custum message for my username field
$validator-&gt;setMessage(
    'Your username \'%value%\' is too short; it must be at least %min% ' .
    'characters',
    Zend_Validate_StringLength::TOO_SHORT);

// with custom message the output is
// "Your username 'word' is too short; it must be at least 8 characters"
if (!$validator-&gt;isValid('logme')) {
    $messages = $validator-&gt;getMessages();
    echo current($messages);
}

</code></pre>

<p>So here, all is fine. But when I start to use the i18n feature it doesn't work the same :</p>

<pre class="highlight"><code>

$validator = new Zend_Validate_StringLength(8);

$messageTemplates = array('stringLengthTooShort'=&gt;"La chaine '%value%' est trop courte, fait moins de %min% charactères", 'stringLengthTooLong'=&gt;"La chaine '%value%' est trop longue, faitplus de %min% charactères");
$translator = new Zend_Translate('array', $messageTemplates, 'fr_FR');
Zend_Registry::set('Zend_Translate', $translator);

// default message
// La chaine 'unmot' est trop courte, fait moins de 8 charactères
if (!$validator-&gt;isValid('unmot')) {
    $messages = $validator-&gt;getMessages();
    echo current($messages);
}

// I want a custom message for my username field
$validator-&gt;setMessage(
    "Votre nom d'utilisateur \'%value%\' est trop court; il doit faire au moins %min% charactères",
    Zend_Validate_StringLength::TOO_SHORT);
// Then HERE, custom message is not taken into account. The output is steel :
// La chaine 'logme' est trop courte, fait moins de 8 charactères
// While I was expecting
// Votre nom d'utilisateur 'logme' est trop court; il doit faire au moins 8 charactères
if (!$validator-&gt;isValid('logme')) {
    $messages = $validator-&gt;getMessages();
    echo current($messages);
}
</code></pre>

<p>It is not possible anymore to set an custom message .</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2009-06-29T06:38:04.000+0000</p> 
        <div class="body">
            <p>Reopened due to new reproducable example.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2009-08-29T12:30:16.000+0000</p> 
        <div class="body">
            <p>After digging a little bit the reason is logical and also the solution is clear.</p>

<p>There are 2 possibilities to select from:
1.) A message will ALWAYS be translated.
Default behaviour because otherwise you would have to call setMessage based on the users locale.
Which means that you do the translation yourself.</p>

<p>2.) A message will ONLY be translated when setMessage is not set.
This is problematic as you need to give different messages based on the users locale.
In this case you do the translation yourself.</p>

<p>To select between this 2 different behaviours you have to handle your translation file differently...</p>

<p>Using the messageKey as source will force the first way.
Using the messageContent as source will force the second way.</p>

<p>So for you this means to change your translation file as follows when you want to override translations and not the content of the templates:</p>

<pre class="highlight"><code>
$content = $validator-&gt;getMessageTemplates();
$messageTemplates = array($content['stringLengthTooShort'] =&gt;"Votre nom d'utilisateur \'%value%\' est trop court; il doit faire au moins %min% charactères");
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2009-08-29T12:34:43.000+0000</p> 
        <div class="body">
            <p>Closing as not an issue due the previous described reasons.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Laurent Melmoux (laurent melmoux) on 2009-09-14T09:19:58.000+0000</p> 
        <div class="body">
            <p>Thomas,</p>

<p>I'm still thinking that the correct behavior should be 2) A message will ONLY be translated when setMessage is not set. :-)</p>

<p>Right now if you use the validators in a i18n context (with an application wide locale within your registry) Zend_Validate::setMessage() is not working at all which means you have a behavior's change  bettween the "default"  and the localised context. And this is the same with Zend_Form_Element::addErrorMessage() and co.</p>

<p>To set custom message depending on the user local it is easy to do something $validator-&gt;setMessage($customMessages[$locale]['stringLengthTooShort']);</p>

<p>Also about your exemple, what should I do with $messageTemplates ?</p>

<p>Thanks.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2009-09-14T10:57:49.000+0000</p> 
        <div class="body">
            <p>I still don't get the point about your problem of things which already work.
$messageTemplates in my example is just a variable... name it $something or $dontknow... it's just a variable.</p>

<p>As described before translation does already work for case 2 when things are handled like described.</p>

<pre class="highlight"><code>
// example translation for case 2
// this is already described above
return array(
    "'%value%' is less than %min% characters long" =&gt; "my translation %min% for %value%",
    "'%value%' is greater than %max% characters long" =&gt; "other translation");
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Laurent Melmoux (laurent melmoux) on 2009-09-15T02:38:41.000+0000</p> 
        <div class="body">
            <p>Pardon me if I'm not really clear.</p>

<p>I'm mostly using  Zend_Validate with Zend_Form in an Automated CRUD  and  I'm creating them with a config object, then if I want a custom message I can simply do :</p>

<pre class="highlight"><code>
user.login.elements.username.options.validators.emailAddressInvalidFormat.options.messages.emailAddressInvalidFormat=  "Votre login doit être un email valid";
</code></pre>

<p>I really like this feature because I have no additional code to write and I don't really want to rewrite everything by hand only to add a custom message. :-(</p>

<p>To illustrate this here is 2 simples working examples :</p>

<p>With no translator, here the custom message is as expected :</p>

<pre class="highlight"><code>
date_default_timezone_set('Europe/Berlin');

require_once 'Zend/Loader/Autoloader.php';
$autoloader = Zend_Loader_Autoloader::getInstance();
$autoloader-&gt;registerNamespace('Mmx_');


$form = new Zend_Form();

$username = new Zend_Form_Element_Text('username');
$username-&gt;setLabel('Utilisateur')
         -&gt;addValidator('NotEmpty')
         -&gt;addValidator('EmailAddress', false, array('messages'=&gt;array('emailAddressInvalidFormat' =&gt; "Votre login doit être un email valid")))
         -&gt;addFilter('StringToLower');
         
$password = new Zend_Form_Element_Text('password');     
$password-&gt;setLabel('Password')
         -&gt;addValidator('NotEmpty')
         -&gt;addValidator('StringLength',false, array(6, 20))
         -&gt;addValidator('Alnum')
         -&gt;addFilter('StringTrim')
         -&gt;addFilter('StringToLower');
         
$form-&gt;addElement($username)
     -&gt;addElement($password)
     -&gt;addElement(new Zend_Form_Element_Submit('login'));


$view = new Zend_View();
$view-&gt;addHelperPath($rootPath. '/library/Zend/View/Helper', 'Zend_View_Helper');
$form-&gt;setView($view);

echo "Try invalid data: \n";
echo $form-&gt;isValid(array('username' =&gt; 'FOOBAR', 'password' =&gt; 'short')) ? "Form is validated\n" : "Form did not validate.\n";
echo $form-&gt;render($view), "\n\n";
</code></pre>

<p>But when I'm using a translator within the form my custom message is not display :</p>

<pre class="highlight"><code>
date_default_timezone_set('Europe/Berlin');

require_once 'Zend/Loader/Autoloader.php';
$autoloader = Zend_Loader_Autoloader::getInstance();
$autoloader-&gt;registerNamespace('Mmx_');

$messageTemplates = array(
    //Empty
    'isEmpty'     =&gt; 'Le champ est requis !',
    'notEmptyInvalid' =&gt; 'Le champ est requis !',
    //EmailAdress
    'emailAddressInvalidFormat'          =&gt; "L'adresse email n'est pas valide",
    'emailAddressInvalidHostname'  =&gt; "'%hostname%' n'est pas un nom de domaine valide",
    //StringLength
    'stringLengthTooShort'          =&gt; "Minimum %min% caractères",
    'stringLengthTooLong'           =&gt; "Maximum %max% caractères",
    //Alpha
    'notAlpha'    =&gt; "Lettres alphabetiques uniquement",
    'stringEmpty' =&gt; "Ne peut être vide"
);

$locale = new Zend_Locale('fr');
Zend_Registry::set('Zend_Locale', $locale);
$translator = new Zend_Translate('array', $messageTemplates, $locale);

$form = new Zend_Form();

$username = new Zend_Form_Element_Text('username');
$username-&gt;setLabel('Utilisateur')
         -&gt;addValidator('NotEmpty')
         -&gt;addValidator('EmailAddress', false, array('messages'=&gt;array('emailAddressInvalidFormat' =&gt; "Votre login doit être un email valid")))
         -&gt;addFilter('StringToLower');
         
$password = new Zend_Form_Element_Text('password');     
$password-&gt;setLabel('Password')
         -&gt;addValidator('NotEmpty')
         -&gt;addValidator('StringLength',false, array(6, 20))
         -&gt;addValidator('Alnum')
         -&gt;addFilter('StringTrim')
         -&gt;addFilter('StringToLower');
         
$form-&gt;addElement($username)
     -&gt;addElement($password)
     -&gt;addElement(new Zend_Form_Element_Submit('login'));

$form-&gt;setTranslator($translator);

$view = new Zend_View();
$view-&gt;addHelperPath($rootPath. '/library/Zend/View/Helper', 'Zend_View_Helper');



$form-&gt;setView($view);

echo "Try invalid data: \n";
echo $form-&gt;isValid(array('username' =&gt; 'FOOBAR', 'password' =&gt; 'short')) ? "Form is validated\n" : "Form did not validate.\n";
echo $form-&gt;render($view), "\n\n";
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2009-09-15T10:54:57.000+0000</p> 
        <div class="body">
            <p>There is no solution to this usecase:</p>

<p>You changed the messageTemplate of the validator and you added translation to the form.
Now the form translates returned messages.
How should the validator know what should be translated and what not? The validator has no connection to the form.</p>

<p>I see no way how this should be integrated.</p>

<p>Eighter change your translation as mentioned before or handle it different in this case.
(You can disable translation on a element).</p>

        </div>
    </div>
    </div>

