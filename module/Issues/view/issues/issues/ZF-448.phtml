<h2>ZF-448: Zend_Cache::SQLite - Cleanup</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2006-10-17T02:20:25.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2007-07-05T14:43:23.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>0.6.0 (16/Dec/06)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Fabien MARTY (fab)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Cache</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>The SQLite backend needs to cleanup the database to recover wasted space and address structure/data fragmentation issues. The automaticCleaningFactor &gt; 0 leaves the database size the same even after all the rows are deleted from the cache table. Inserts and deletes can leave the database file structure fragmented, which slows down disk access to the database contents. For &gt; 100 rows, this results in a large file size that gets accessed for every page load. Use VACUUM or PRAGMA auto_vacuum to address this situation:</p>

<p><a href="http://www.sqlite.org/lang_vacuum.html">http://www.sqlite.org/lang_vacuum.html</a>
<a href="http://www.sqlite.org/pragma.html#pragma_auto_vacuum">http://sqlite.org/pragma.html/#pragma_auto_vacuum</a></p>

<p>VACUUM could be offered as an additional configuration option (ALONG WITH AN AUTOMATIC-VACUUMING-FACTOR OPTION , if possible :-)</p>

<p>Thanks,</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Fabien MARTY (fab) on 2006-10-22T09:00:09.000+0000</p> 
        <div class="body">
            <p>I just commited an automatic VACUUM system in SVN.</p>

<p>Can you try it ?</p>

<p>It introduces a new backend option :</p>

<p>{{
     * ====&gt; (int) automaticVacuumFactor :
     * - Disable / Tune the automatic vacuum process
     * - The automatic vacuum process defragment the database file (and make it smaller)
     *   when a clean() or delete() is called
     *     0               =&gt; no automatic vacuum 
     *     1               =&gt; systematic vacuum (when delete() or clean() methods are called)
     *     x (integer) &gt; 1 =&gt; automatic vacuum randomly 1 times on x clean() or delete()
}}</p>

<p>thanks</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Fabien MARTY (fab) on 2006-11-04T03:59:50.000+0000</p> 
        <div class="body">
            <p>no news ?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Shekar Reddy (zendfw) on 2006-11-08T15:04:19.000+0000</p> 
        <div class="body">
            <p>It doesn't work. I guess the _automaticVacuum() method should read:</p>

<pre><code>private function _automaticVacuum() 
{
    if ( ! $this-&gt;_options['automaticVacuumFactor'] )
        return;
    //
    $rand = 1;      // Default init for 'automaticVacuumFactor' = 1
    //
    if ($this-&gt;_options['automaticVacuumFactor'] &gt; 1)
        $rand = rand(1, $this-&gt;_options['automaticVacuumFactor']);
    //
    if ($rand == 1)
        @sqlite_query($this-&gt;_db, 'VACUUM');
}
</code></pre>

<p>Regards,</p>

<p>On 11/4/06, Shekar C Reddy <a href="mailto:zendfw@gmail.com">zendfw@gmail.com</a> wrote:
I wasn't aware you had fixed this issue. I'm gonna hvae to try it out from SVN. But I currently have no way to test in a multi-user/heavy-load environment. The documentation on VACUUM states it fails if there is an active transaction but states it differently on PRAGMA VACUUM.</p>

<p>Thanks,</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2006-11-13T15:20:50.000+0000</p> 
        <div class="body">
            <p>Changing fix version to 0.6.0.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Fabien MARTY (fab) on 2006-11-30T11:02:50.000+0000</p> 
        <div class="body">
            <p>the following example works for me</p>

<pre class="literal">

&lt;?php 

require_once 'Zend/Cache.php';

$frontendOptions = array(
    'lifeTime' =&gt; 7200 // cache lifetime of 2 hours
);

$backendOptions = array(
    'cacheDBCompletePath' =&gt; '/tmp/toto.db',
    'automaticVacuumFactor' =&gt; 1
);

$cache = Zend_Cache::factory('Core', 'Sqlite', $frontendOptions, $backendOptions);

/*for ($i=0;$i&lt;1000;$i++) {
    $cache-&gt;save((string) $i, (string) $i);
    echo($i);
}*/

$cache-&gt;clean();

?&gt; 

</pre>

        </div>
    </div>
    </div>

