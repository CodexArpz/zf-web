<h2>ZF-1563: QuoteInto doesn't work with Sqlite</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2007-06-14T05:37:18.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2008-06-19T14:22:43.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li> 1.5.2 (15/May/08)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Julien Duponchelle (noplay)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Simon Mundy (peptolab)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Db</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>We discover a problem with quoteInto and SQLite.</p>

<p>The Zend Framework generate this kind of SQL (we use quoteInto for projects_id and users_id):</p>

<pre class="highlight"><code>
DELETE FROM "usvn_users_to_projects" WHERE (projects_id = '1' AND users_id = 1)
</code></pre>

<p>But in SQlite quote seems to be mandatory and we need write:</p>

<pre class="highlight"><code>
DELETE FROM "usvn_users_to_projects" WHERE (projects_id = '1' AND users_id = '1')
</code></pre>

<p>We made an ugly hack to fix the problem into Zend/Db/Adapter/Pdo/Sqlite.php</p>

<pre class="highlight"><code>
public function quote($value)
{
    if (is_int($value) || is_float($value)) {
       return parent::quote("$value");
    }
    return parent::quote($value);
}
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-06-14T15:06:54.000+0000</p> 
        <div class="body">
            <p>I'm not sure I understand.  Are the SQL datatypes of projects_id and users_id integer or varchar?</p>

<p>Does SQLite have a problem comparing an integer literal to a varchar?  Some RDBMS brands have the opposite problem, you can't compare a string literal to an integer column.</p>

<p>You also have a workaround:</p>

<pre class="highlight"><code>
$expr = $db-&gt;quoteInto('users_id = ?', (string) 1);
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-06-14T15:07:41.000+0000</p> 
        <div class="body">
            <p>This is not a critical bug, since there are already two workarounds.</p>

<p>I'd be glad to fix it regardless, but I'm reducing the severity.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-06-14T15:11:50.000+0000</p> 
        <div class="body">
            <p>Resolved in revision 5314.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-06-28T21:00:10.000+0000</p> 
        <div class="body">
            <p>Reopening.  SQLite does require that integers are compared to integers, and strings are compared to strings.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-06-28T21:01:28.000+0000</p> 
        <div class="body">
            <p>Fixed in revision 5493.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Julien Duponchelle (noplay) on 2007-09-27T04:58:06.000+0000</p> 
        <div class="body">
            <p>Problem is still present. That's why we use this patch:</p>

<h1>=== www/Zend/Db/Adapter/Pdo/Sqlite.php</h1>

<p>--- www/Zend/Db/Adapter/Pdo/Sqlite.php  (revision 1088)
+++ www/Zend/Db/Adapter/Pdo/Sqlite.php  (local)
@@ -278,4 +278,22 @@
         return $sql;
     }</p>

<ul><li>/**</li>
<li>
<ul><li>Safely quotes a value for an SQL statement.</li>
</ul></li>
<li>*</li>
<li>
<ul><li>If an array is passed as the value, the array values are quoted</li>
</ul></li>
<li>
<ul><li>and then returned as a comma-separated string.</li>
</ul></li>
<li>*</li>
<li>
<ul><li>@param mixed $value The value to quote.</li>
</ul></li>
<li>
<ul><li>@param mixed $type  OPTIONAL the SQL datatype name, or constant, or null.</li>
</ul></li>
<li>
<ul><li>@return mixed An SQL-safe quoted value (or string of separated values).</li>
</ul></li>
<li>*/</li>
<li>public function quote($value, $type = null)</li>
<li>{</li>
<li>if (is_int($value) || is_float($value)) {</li>
<li>return parent::quote("$value", $type);</li>
<li>}</li>
<li>return parent::quote($value, $type);</li>
<li>}</li>
<li>
}</li>
</ul>
        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-10-17T15:31:54.000+0000</p> 
        <div class="body">
            <p>Unmark fixed version.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-03-21T17:05:28.000+0000</p> 
        <div class="body">
            <p>This issue should have been fixed for the 1.5 release.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-03-25T20:43:51.000+0000</p> 
        <div class="body">
            <p>Please categorize/fix as needed.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-04-18T13:12:01.000+0000</p> 
        <div class="body">
            <p>This doesn't appear to have been fixed in 1.5.0. Please update if this is not correct.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Simon Mundy (peptolab) on 2008-06-19T00:37:11.000+0000</p> 
        <div class="body">
            <p>Hi Julian</p>

<p>I'm looking into this for the 1.6 release if it's able to be resolved. Can I clarify - what is the reason for explicitly casting as a string by default? The only concern I have defaulting to a string type is that it will break an existing expected behaviour. Or is SQLite expecting a string and this behaviour has always been incorrect.</p>

<p>The patch itself is straight-forward, as are the tests, but I want to be sure this is absolutely required before committing.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Julien Duponchelle (noplay) on 2008-06-19T14:22:42.000+0000</p> 
        <div class="body">
            <p>I just test and now it's work without our patch. Thanks for your help.</p>

        </div>
    </div>
    </div>

