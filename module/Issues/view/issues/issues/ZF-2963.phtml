<h2>ZF-2963: Why there is a reset(Zend_Db_Select::COLUMNS) without a &quot;set&quot; function?</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2008-03-25T05:55:36.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2008-04-21T14:41:36.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Simon Mundy (peptolab)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Db_Select</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-197">ZF-197</a></li>
            <li><a href="/issues/browse/ZF-935">ZF-935</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Hi *,
I don't understand why there is a reset(Zend_Db_Select::COLUMNS) without a correspondent function to set it.</p>

<p>After a reset, how can I add a column to the existents tables?</p>

<pre class="highlight"><code>
$select = $db-&gt;select();
$select-&gt;from("users", array('user_id', 'user_name'))
        -&gt;join('users_roles','users.user_id = users_roles.user_id',array())
        -&gt;join('roles','users_roles.role_id = roles.role_id',array('role_name' =&gt; 'name'));
echo $select;
$select-&gt;reset(Zend_Db_Select::COLUMNS);
echo $select;
</code></pre>

<p>output:</p>

<pre class="highlight"><code>
SELECT `users`.`user_id`, `users`.`user_name`, `roles`.`name` AS `role_name` FROM `users` INNER JOIN `users_roles` ON users.user_id = users_roles.user_id INNER JOIN `roles` ON users_roles.role_id = roles.role_id
SELECT FROM `users` INNER JOIN `users_roles` ON users.user_id = users_roles.user_id INNER JOIN `roles` ON users_roles.role_id = roles.role_id
</code></pre>

<p>if I add a $select-&gt;from('users') the output is
SELECT <code>users_2</code>.* FROM <code>users</code> INNER JOIN <code>users_roles</code> ON users.user_id = users_roles.user_id INNER JOIN <code>roles</code> ON users_roles.role_id = roles.role_id INNER JOIN <code>users</code> AS <code>users_2</code></p>

<p>maybe a $select-&gt;columns(mixed columns) would be useful :D</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-03-25T20:11:19.000+0000</p> 
        <div class="body">
            <p>Can you please take a look at this Simon and process it accordingly?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Simon Mundy (peptolab) on 2008-03-26T19:53:46.000+0000</p> 
        <div class="body">
            <p>Resolved in trunk r9057</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Apaella (apaella) on 2008-03-27T03:47:44.000+0000</p> 
        <div class="body">
            <p>tkz a lot dear friends :D</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Apaella (apaella) on 2008-03-27T05:29:21.000+0000</p> 
        <div class="body">
            <p>I don't understand why $correlationName could be null</p>

<pre class="highlight"><code>
public function columns($cols = '*', $correlationName = null)
{
        if ($correlationName === null &amp;&amp; count($this-&gt;_parts[self::FROM])) {
            $correlationName = key($this-&gt;_parts[self::FROM]);
        }
        ...
}
</code></pre>

<p>If I specify no correlationName like this (two tables in the from clause)</p>

<pre class="highlight"><code>
$select = $db-&gt;select()
    -&gt;from('table1',array("count"=&gt;"count(table2.id)","table1.type","table1.name"))
    -&gt;joinLeft("table2","table1.id=table2.father_id",array())
    -&gt;where("table1.type=?",'FOO')
    -&gt;where("table1.deleted=0")
    -&gt;group("table1.id")
    -&gt;limitPage(5, 10);
echo $select."<br />";
$select-&gt;reset(Zend_Db_Select::COLUMNS)
        -&gt;reset(Zend_Db_Select::GROUP)
        -&gt;reset(Zend_Db_Select::LIMIT_COUNT)
        -&gt;reset(Zend_Db_Select::LIMIT_OFFSET);
$select-&gt;columns(array("field1", "field2"));
echo $select;
</code></pre>

<p>the class throws (obviously) an Exception</p>

<p>But if I specify no correlationName like this (one table in the from clause)</p>

<pre class="highlight"><code>
$select = $db-&gt;select()
    -&gt;from('table1',array("count"=&gt;"count(table2.id)","table1.type","table1.name"))
    -&gt;where("table1.type=?",'FOO')
    -&gt;where("table1.deleted=0")
    -&gt;group("table1.id")
    -&gt;limitPage(5, 10);
echo $select."<br />";
$select-&gt;reset(Zend_Db_Select::COLUMNS)
        -&gt;reset(Zend_Db_Select::GROUP)
        -&gt;reset(Zend_Db_Select::LIMIT_COUNT)
        -&gt;reset(Zend_Db_Select::LIMIT_OFFSET);
$select-&gt;columns(array("field1", "field2"));
echo $select;
</code></pre>

<p>it thows an Exception too because the key($this-&gt;_parts[self::FROM]) return false (bool)</p>

<p>In both cases if I put the table alias all works fine.</p>

<p>Tkz!</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Simon Mundy (peptolab) on 2008-03-27T06:32:35.000+0000</p> 
        <div class="body">
            <p>The correlation name can be null to imply the FROM table - the error was showing up as a result of the "key($this-&gt;_parts[self::FROM])" code failing due to the array not being rewound. That's been fixed in trunk.</p>

<p>Cheers</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-04-21T14:41:36.000+0000</p> 
        <div class="body">
            <p>Simon, should this go out with this next mini release, or is it considered a true "improvement" that should wait until the next minor release?</p>

        </div>
    </div>
    </div>

