<h2>ZF-6525: does not work at all - Mac OS X, custom LAMP build</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2009-05-04T14:47:37.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2011-08-20T14:35:07.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.8.4 (23/Jun/09)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Paul Court (gargoyle)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Satoru Yoshida (satoruyoshida)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Tool</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-7036">ZF-7036</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
        <li><a href="/issues/secure/attachment/12008/Zend_Tool_Framework_Client_Console.php.patch">Zend_Tool_Framework_Client_Console.php.patch</a></li>
            <li><a href="/issues/secure/attachment/12009/Zend_Tool_Framework_Client_Console_HelpSystem.php.patch">Zend_Tool_Framework_Client_Console_HelpSystem.php.patch</a></li>
        </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>I cannot get Zend_Tool to work at all. This is all I get:-</p>

<p>paul-courts-mac-pro:XAMP_Build paul$ zf show version
PHP 5.2.9 (cli) (built: May  4 2009 22:25:46) 
Copyright (c) 1997-2009 The PHP Group
Zend Engine v2.2.0, Copyright (c) 1998-2009 Zend Technologies
.:/Volumes/WORK/XAMP/lib/php/
                       An Error Has Occurred<br />
 Action 'show' is not a valid action.</p>

<p>Zend FrameworkPHP Fatal error:  Class 'Zend_Version' not found in /Volumes/WORK/XAMP/lib/Zend1.8/Tool/Framework/Client/Console/HelpSystem.php on line 159</p>

<p>Fatal error: Class 'Zend_Version' not found in /Volumes/WORK/XAMP/lib/Zend1.8/Tool/Framework/Client/Console/HelpSystem.php on line 159</p>

<p>paul-courts-mac-pro:XAMP_Build paul$ php /Volumes/WORK/sites/test 
1.8.0</p>

<p>paul-courts-mac-pro:XAMP_Build paul$ cat /Volumes/WORK/sites/test
&lt;?php
require_once 'Zend/Loader/Autoloader.php';
$loader = Zend_Loader_Autoloader::getInstance();
echo Zend_Version::VERSION . "\n";
paul-courts-mac-pro:XAMP_Build paul$</p>

<p>I added the commands to show the php version and the include path to zf.sh just to make sure, and my very short test script works fine. Any ideas?</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Dolf Schimmel (Freeaqingme) (freak) on 2009-05-04T14:49:01.000+0000</p> 
        <div class="body">
            <p>Are you sure ZF is in your include path?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Paul Court (gargoyle) on 2009-05-04T14:58:45.000+0000</p> 
        <div class="body">
            <p>Just found the problem. It does not like the "Zend" entry in my include path being a symlink!</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by David Rogers (al_the_x) on 2009-06-13T09:27:19.000+0000</p> 
        <div class="body">
            <p>I did a little debugging, as well, as I get the same errors on "release-1.8.3", using a symlink to Zend in my "include_path". I added the following in Zend/Tool/Framework/Client/Console/HelpSystem.php on line 164 to test a few things:</p>

<p>[code]
var_dump(array(
    'Is Zend_Loader_Autoloader available?' =&gt; class_exists('Zend_Loader_Autoloader', false),
    'Is autoloading enabled?' =&gt; ( spl_autoload_functions() !== false ),
    'Is Zend_Loader_Autoloader::autoload() registered?' =&gt; ( in_array(array('Zend_Loader_Autoloader', 'autoload'), (array) spl_autoload_functions()) ),
));
[code]</p>

<p>Then executing "zf.sh" with no arguments, the expected output should be:</p>

<p>[code]
array(3) {
  ["Is Zend_Loader_Autoloader available?"]=&gt;
  bool(true)
  ["Is autoloading enabled?"]=&gt;
  bool(true)
  ["Is Zend_Loader_Autoloader::autoload() registered?"]=&gt;
  bool(true)
}
[code]</p>

<p>Actual:</p>

<p>[code]
array(3) {
  ["Is Zend_Loader_Autoloader available?"]=&gt;
  bool(false)
  ["Is autoloading enabled?"]=&gt;
  bool(false)
  ["Is Zend_Loader_Autoloader::autoload() registered?"]=&gt;
  bool(false)
}
[code]</p>

<p>I was able to remedy the problem by performing either of the following in Zend/Tool/Framework/Client/HelpSystem.php @ 164:</p>

<p>[code]
        require_once 'Zend/Loader/Autoloader.php'; Zend_Loader_Autoloader::getInstance(); // Register the autoloader...
        require_once 'Zend/Version.php'; // Or just include the unloaded class before it's used...
[code]</p>

<p>The bug actually appears to be in Zend_Tool_Framework_Client_Console::_preInit() @ 111, where the autoloader class is registered:</p>

<p>[code]
        // support setting the loader from the environment
        if (isset($_ENV['ZEND_TOOL_FRAMEWORK_LOADER_CLASS'])) {
            if (class_exists($_ENV['ZEND_TOOL_FRAMEWORK_LOADER_CLASS'])
                || Zend_Loader::loadClass($_ENV['ZEND_TOOL_FRAMEWORK_LOADER_CLASS'])
            ) {
                $this-&gt;_registry-&gt;setLoader(new $_ENV['ZEND_TOOL_FRAMEWORK_LOADER_CLASS']);
            }
        }
[code]</p>

<p>Note that there's no "else" clause there if the $_ENV variable isn't set, so Zend_Loader_Autoloader doesn't get registered by default. Thus, if "ZEND_TOOL_FRAMEWORK_LOADER_CLASS" isn't set in our local environments, the autoloader stack is empty. Boo. I'll attach a patch.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by David Rogers (al_the_x) on 2009-06-13T13:06:35.000+0000</p> 
        <div class="body">
            <p>This patch should be applied to the base project directory and affect Zend_Tool_Framework_Client_Console, adding default autoloader support via Zend_Loader_Autoloader::autoload() if no other class is specified via the ENV variable ZEND_TOOL_FRAMEWORK_LOADER_CLASS. It contains the following lines, applied to library/Zend/Tool/Framework/Client/Console.php @ 119:</p>

<pre class="highlight"><code>
        // otherwise register the default autoloader: Zend_Loader_Autoloader
        else {
            require_once 'Zend/Loader/Autoloader.php';
            $this-&gt;_registry-&gt;setLoader(Zend_Loader_Autoloader::getInstance());
        } // END if-else
</code></pre>

<p>The problem from this ticket can also be resolved by patching Zend_Tool_Framework_Client_Console_HelpSystem by adding the following line to library/Zend/Tool/Framework/Client/Console/HelpSystem.php @ 164:</p>

<pre class="highlight"><code>
        require_once 'Zend/Version.php';
</code></pre>

<p>However, the included patch is a more elegant solution, IMO, since it addresses a yet undetected issue with Zend_Tool, as explained above. Please feel free to apply either. I'm using the former for now. Thanks,</p>

<p>David @ OrlandoPHP.org</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by David Rogers (al_the_x) on 2009-06-13T13:09:43.000+0000</p> 
        <div class="body">
            <p>If an admin would also please edit my earlier comment to correct my use of "[code]" instead of "```" for readability. Thanks.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by David Rogers (al_the_x) on 2009-06-13T13:23:38.000+0000</p> 
        <div class="body">
            <p>Actually, scratch that. I neglected to test before I uploaded that patch. The simpler, more specific one does the job, although having an autoloader registered would be handy, too... However, my earlier patch doesn't actually <em>do</em> that. Sorry.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by David Rogers (al_the_x) on 2009-06-13T13:26:58.000+0000</p> 
        <div class="body">
            <p>So this <em>does</em> get Zend_Tool <em>executable</em> for me, but the list of providers is still empty, and {{zf.sh}} does not recognize any commands...</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by David Rogers (al_the_x) on 2009-06-13T13:33:30.000+0000</p> 
        <div class="body">
            <p>To test out Paul's solution, I renamed my symlink and copied over the contents of the "Zend" directory into my {{include_path}}, instead. {{zf.sh ?}} now returns a list of colorized providers, but this problem still bugs me...</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by David Rogers (al_the_x) on 2009-06-13T15:00:34.000+0000</p> 
        <div class="body">
            <p>So my workaround for the moment is to set the ENV variable {{ZEND_TOOL_INCLUDE_PATH_PREPEND}} to {{/usr/local/share/php/Zend_Framework/library/}}, and I've found the following in {{library/Zend/Tool/Framework/Loader/IncludePathLoader.php}} @ 98:</p>

<pre class="highlight"><code>
                // no links allowed here for now
                if ($item-&gt;isLink()) {
                    continue;
                }
</code></pre>

<p>Apparently there's not a good solution for what to do with symlinks at this point, yet the <a href="http://framework.zend.com/docs/quickstart/create-your-project">Quickstart Documentation</a> recommends a symlink to the library... Obviously <em>after</em> you get {{zf.sh}} running, though.</p>

<p>Perhaps the problem here is that the IncludePathLoader is scanning the <em>entire tree</em> defined by the {{include_path}} for files named "Manifest.php" or "Provider.php", which seems rather wasteful... Couldn't this operate more like the Plugin patterns, such that a number of known, assumed valid paths / namespaces are added to a stack for scanning...? That would bypass the symlink problem, at least.</p>

<p>Is there a use-case for walking the <em>entire tree</em> like that?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by old of Satoru Yoshida (yoshida@zend.co.jp) on 2009-06-19T20:53:54.000+0000</p> 
        <div class="body">
            <p>I think this issue could be resolved by ZF-7036.
It seems to be more simply.</p>

<p>I think it would be too complex to use Zend_Loader_Autoloader.</p>

        </div>
    </div>
    </div>

