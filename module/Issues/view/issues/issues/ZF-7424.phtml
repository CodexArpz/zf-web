<h2>ZF-7424: Adapter helper functions into Zend_Db_Table</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>New Feature</dd>

    <dt>Created:</dt>
    <dd>2009-07-30T14:08:54.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-07-31T13:54:22.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Andy Thompson (at465)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Ralph Schindler (ralph)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Db</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Could helper functions for ease of use of Zend_Db_Table be added?</p>

<p>functions such as:</p>

<p>getTable($name)  - includes, instanciates and returns a table object based on the name
select(.+)() - creates a Zend_Db_Table_Select from the name trailing the select, e.g. $adapter-&gt;selectProjects()
find(.+)($arg1, $arg2 ...) - does a find on the table specified from the name trailing the find, e.g. $adapter-&gt;findProjects(1)
fetchNew(.+)()  - runs the fetchNew function on the table specified from the name trailing the fetchNew</p>

<p>I've implemented the functions myself already:</p>

<pre class="highlight"><code>

    public function getTable($table) {
        $table = ucfirst($table);
        Zend_Loader::loadClass($table);
        $table = new $table(array('db' =&gt; $this));
        return $table;
    }
    
    public function __call($name, $args) {
        if (preg_match('/^select(.+)/i', $name, $match)) {
            $table = $this-&gt;getTable($match[1]);
            return $table-&gt;select();
        } else if (preg_match('/^find(.+)/i', $name, $match)) {
            $table = $this-&gt;getTable($match[1]);
            return call_user_func_array(array($table, 'find'), $args);
        } else if (preg_match('/^fetchNew(.+)/i', $name, $match)) {
            $table = $this-&gt;getTable($match[1]);
            return $table-&gt;fetchNew();
        }
    }
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Dolf Schimmel (Freeaqingme) (freak) on 2009-07-30T14:46:48.000+0000</p> 
        <div class="body">
            <p>I don't we think we should. I think you should just extend Zend_Db_Table to make it suite your needs (as does the rest of the world).</p>

<p>Proposing to close as wont-fix or not an issue</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Andy Thompson (at465) on 2009-07-30T14:54:21.000+0000</p> 
        <div class="body">
            <p>extending Zend_Db_Table doesn't make it any easier to instanciate. You still have to do new TableName(array('db' =&gt; $adapter)), somewhat cumbersome for what could be an effective ORM</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Dolf Schimmel (Freeaqingme) (freak) on 2009-07-30T14:57:50.000+0000</p> 
        <div class="body">
            <p>Zend_Db is not an ORM. And jfyi; before 1.9 Zend_Date was abstract, and /had to/ be extended on a per-table basis. This is not bad practice whatsoever.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Andy Thompson (at465) on 2009-07-30T15:07:17.000+0000</p> 
        <div class="body">
            <p>And by that argument, we should be doing $select = new Zend_Db_Table_Select($table) rather than $table-&gt;select() ?</p>

<p>I wasn't disputing the practice of instanciating classes, I was just suggesting useful magic helpers which help speed up frequently created table functions.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Andy Thompson (at465) on 2009-07-30T15:30:19.000+0000</p> 
        <div class="body">
            <p>Ok, I accept there are some limitations to this idea, as this needs $table to be the exact class name, but the way the Table's referenceMap instanciates the dependent tables is exactly the same. I was just hoping for constructive criticism.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ralph Schindler (ralph) on 2009-07-31T12:40:53.000+0000</p> 
        <div class="body">
            <p>Zend_Db_Adapter should not be aware of Zend_Db_Table.  The only coupling designed in is that Zend_Db_Table is coupled with Zend_Db_Adatper, so just a one way requirement.</p>

<p>As for your features: you should have a look at the new instantiation feature of Zend_Db_Table.  There is a note at the top of the manual:</p>

<p><a href="http://framework.zend.com/manual/en/zend.db.table.html">http://framework.zend.com/manual/en/…</a></p>

<p>and here:</p>

<p><a href="http://framework.zend.com/manual/en/zend.db.table.definition.html">http://framework.zend.com/manual/en/…</a></p>

<p>This allows for easy instantiation based off a definition file (if you need to maintain relationships), outside of that, you can simply create a table object that will utilize a table name provided in the constructor.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Andy Thompson (at465) on 2009-07-31T12:57:55.000+0000</p> 
        <div class="body">
            <p>Ok, thanks, not exactly what I was looking for though, I do understand you not wanting to add a cyclic dependency.</p>

<p>I am writing a framework which sits on top of ZF mvc, which makes it easy to get going, e.g. in a controller being able to do $this-&gt;getDb('connectionName')-&gt;selectTableName() and I thought it would be best to integrate the table/row ability into the adapter.</p>

<p>I'll instead create a loosly coupled class around the top that gives the same functions but with my own additions.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ralph Schindler (ralph) on 2009-07-31T13:54:21.000+0000</p> 
        <div class="body">
            <p>Yeah, I think it would be more appropriate to add a service layer (concrete or abstract) that would proxy to the adapter and the tables.  This way you've created a composite api for the functionality you want without compromising the level of coupling that would/might cause confusion.</p>

<p>For example, $this-&gt;getDataModel('connectionName')-&gt;...  , where a DataModel (via a controller action helper) would combine the Adapter and Table/Row apis to do what you want to do.</p>

<p>-ralph</p>

        </div>
    </div>
    </div>

