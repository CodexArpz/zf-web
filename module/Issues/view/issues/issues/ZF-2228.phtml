<h2>ZF-2228: Improvement of where</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2007-11-22T15:40:05.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-05-05T23:46:18.000+0000</dd>

    <dt>Status:</dt>
    <dd>Closed</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Ralph Schindler (ralph)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Db_Select</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-2144">ZF-2144</a></li>
            <li><a href="/issues/browse/ZF-2142">ZF-2142</a></li>
            <li><a href="/issues/browse/ZF-1841">ZF-1841</a></li>
            <li><a href="/issues/browse/ZF-2143">ZF-2143</a></li>
            <li><a href="/issues/browse/ZF-2227">ZF-2227</a></li>
            <li><a href="/issues/browse/ZF-2211">ZF-2211</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>The where clause should be improved.</p>

<p>The actual implementation has some problems and is lacking simple but usefull features.
This is a summary of all usefull changes which include:</p>

<ul><li>Instant Binding of values</li>
<li>Combining of instant and late binding</li>
<li>Accepting array input</li>
<li>Accepting multiple placeholders</li>
<li>Creation of difficult clauses with array</li>
<li>Accept value types for values</li>
</ul><p>Here are the usecases which solve old behaviour and show some new behaviour</p>

<pre class="highlight"><code>
 1) where("column = 1");         // -&gt; "column = 1"
 4) where("column = :id");       // -&gt; "column = '1'" depends on :id

 2) where("column = ?", 1);      // -&gt; "column = '1'"
 3) where("column = ?", $value); // -&gt; "column = '1'" depends on $value

 5) where("column = ?",      1, Zend_Db::INT_TYPE); // -&gt; "column = 1" -&gt; "column = 'stringvalue'"
 6) where("column = ?", $value, Zend_Db::INT_TYPE); // -&gt; "column = 1" -&gt; "column = 'stringvalue'" depends on $value

11) where("column = ? AND (column2 = ? OR column5 = ?)", 4, 'test', 5);        // -&gt; "column = 4 AND (column2 = 'test' OR column5 = 5)"
12) where("column = ? AND (column2 = ? OR column5 = ?)", array(4, 'test', 5)); // -&gt; "column = 4 AND (column2 = 'test' OR column5 = 5)"
16) where("price in (?)", 1, 2, 3, 4);                    // where price in (1, 2, 3, 4)

13) where("column = :first AND (column2 = :second OR column5 = :third)", array('first' =&gt; 4, 'second' =&gt; 'test', 'third' =&gt; 5)); // -&gt; "column = 4 AND (column2 = 'test' OR column5 = 5)"
14) where("column = :first AND (column2 = :second OR column5 = :third)", array('first' =&gt; 4, 'second' =&gt; 'test'));               // -&gt; "column = 4 AND (column2 = 'test' OR column5 = :third)" -&gt; for later binding

 7) where(array("column" =&gt; 1, "other" =&gt; 140));       // -&gt; "column = 1 AND other = 140"
 8) where(array("column" =&gt; 1, "other" =&gt; 140), true); // -&gt; "column = '1' AND other = '140'"

 9) where(array(array("column = ?", 1), array("other = ?", 140)); // -&gt; "column = '1' AND other = '140'
10)where(array(array("column = ?", 1, Zend_Db::INT_TYPE), array("other = ?", 140, Zend_Db::STRING_TYPE)); // -&gt; "column = 1 AND other = '140'

15)where(array(array("column = ?", 1, Zend_Db::INT_TYPE), Zend_Db::OR, array("other = ?", 140, Zend_Db::STRING_TYPE)); // -&gt; "(column = 1) OR (other = '140')

17) where("price in (?)", array(1,2,3,4));                    // where price in (1, 2, 3, 4)
18) where("price &gt; ? and price in (?)", array (1,2,3,4));     // where price &gt; 1 and price in (2, 3, 4)
19) where("price in (?) and price like '?'", array(1,2,3,4)); // where price in (1, 2, 3, 4) and price like '?'
</code></pre>

<p>There are some other issues which are related to single usecases and are set as dependend/relevant</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2007-11-26T02:09:38.000+0000</p> 
        <div class="body">
            <p>I included the usecases 1-6 and 11-19 into the incubator.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2008-02-17T03:20:59.000+0000</p> 
        <div class="body">
            <p>The already implemented usecases have been integrated into core for 1.5RC</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2008-03-11T03:34:30.000+0000</p> 
        <div class="body">
            <p>Class will be reworked by Simon... sorry if I confused anybody. He has a better overview over the complete Db design, not only Zend_Db_Select and will help better than me.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Alexandre Lemaire (saeven) on 2009-01-06T07:07:51.000+0000</p> 
        <div class="body">
            <p>Numbers 17-19 are critical requirements, not enhancements imo.  Are these features currently available under 1.7?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ralph Schindler (ralph) on 2009-01-10T10:33:07.000+0000</p> 
        <div class="body">
            <p>Will evaluate within 2 weeks</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Adam Lundrigan (adamlundrigan) on 2012-05-05T23:46:18.000+0000</p> 
        <div class="body">
            <p>All sub-issues have been closed, except ZF-2142 which can stand alone.</p>

        </div>
    </div>
    </div>

