<h2>ZF-3334: Zend_Rest_Server faults with empty page on strange keys in _structValue()</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2008-05-28T00:51:20.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2008-11-08T00:44:13.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Davey Shafik (davey)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Rest_Server</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-3338">ZF-3338</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Trying to return associative structs / arrays with XML-invalid keys (e.g. Zend_Db_Profiler_Query)  breaks _structValue.</p>

<pre class="highlight"><code>
    protected function _structValue($struct, DOMDocument $dom, DOMElement $parent)
    {
        $struct = (array) $struct;

        foreach ($struct as $key =&gt; $value) {
          // at this point $struct can have strange keys (.e.g "*_query")
          //  $key=preg_replace('/[^a-zA-Z0-9_-]/','_',$key); // this could sanitize $key
            if ($value === false) {
                $value = 0;
            } elseif ($value === true) {
                $value = 1;
            }

            if (ctype_digit((string) $key)) {
                $key = 'key_' . $key;
            }

            if (is_array($value) || is_object($value)) {
                $element = $dom-&gt;createElement($key); // this is generates an exception because $key is invalid XML

</code></pre>

<p>Finally, the  fault exception handler registered in the constructor fails to output anything because fault() is designed to return the DomDocument Instead. Suggest to register a separate handler.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Christian Kissner (chrispsm&amp;w) on 2008-05-28T04:24:25.000+0000</p> 
        <div class="body">
            <p>Actually, the issue appears with private and protected object properties:</p>

<p>[ <a href="http://www.php.net/manual/en/language.types.array.php">http://php.net/manual/en/â€¦</a> ]
If an object is converted to an array, the result is an array whose elements are the object's properties. The keys are the member variable names, with a few notable exceptions: private variables have the class name prepended to the variable name; protected variables have a '*' prepended to the variable name. These prepended values have null bytes on either side. This can result in some unexpected behaviour:</p>

<p>I don't think private/protected properties should be returned. Suggested fix:</p>

<pre class="highlight"><code>
    protected function _structValue($struct, DOMDocument $dom, DOMElement $parent)
    {
        if (is_object($struct)) $struct=get_object_vars($struct);
        
        $struct = (array) $struct;

</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-06-07T21:46:42.000+0000</p> 
        <div class="body">
            <p>Please evaluate and fix/categorize as necessary.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Benjamin Eberlei (beberlei) on 2008-11-08T00:44:13.000+0000</p> 
        <div class="body">
            <p>See ZF-3338 - This issue has been fixed already in one of the many duplicate entries of this bug.</p>

        </div>
    </div>
    </div>

