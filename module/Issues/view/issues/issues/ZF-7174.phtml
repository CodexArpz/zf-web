<h2>ZF-7174: Handling Arrays in Nirvanix Service</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2009-07-01T13:36:19.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-11-20T20:53:07.000+0000</dd>

    <dt>Status:</dt>
    <dd>Closed</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Barry Ruffner (bruffner)
            </dd>

    <dt>Assignee:</dt>
    <dd>
        None
                    </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Service_Nirvanix</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>In the Nirvanix web services arrays can be passed to avoid having to call the same call multiple times.  The setParameterPost does not pass the parameters when passing a sub-array to the method.  To change the behavior a new method is introduced below that parses the parameters and constructs the HTTP POST body directly taking the sub-array into account.</p>

<p>Changes:</p>

<p>Line 132 /trunk/library/Zend/Service/Nirvanix/Namespace/Base.php</p>

<ul><li>$this-&gt;_httpClient-&gt;setParameterPost($params);</li>
<li>$this-&gt;_httpClient-&gt;setRawData($this-&gt;_getBody($params));</li>
</ul><p>Line 171 /trunk/library/Zend/Service/Nirvanix/Namespace/Base.php</p>

<pre><code>/**
 * The httpClient-&gt;setParametersPost does not handle arrays properly when
 * passing a subarray in the value.  This method handles the parameter
 * parsing to take this into account.
 *
 * @param  array    $params  Parameter array containing the name value pairs
 * @return string   URL Encoded string for the HTTP POST Body.
 */
 private function _getBody($params)
 {
      foreach ($params as $name =&gt; $value) {
           if (is_array($value)) {
                foreach ($value as $k =&gt; $value) {
                     $paramstr .= '&amp;' . urlencode($name) . '=' . urlencode($value);
                }
           } else {
                $paramstr .= '&amp;' . urlencode($name) . '=' . urlencode($value);
           }
      }
      return $paramstr;
 }
</code></pre>

<p>Unit Test:</p>

<p>New file: /trunk/tests/Zend/Service/Nirvanix/parameterTest.php</p>

&lt;?php
/**
 * Zend Framework
 *
 * LICENSE
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * <a href="http://framework.zend.com/license/new-bsd">http://framework.zend.com/license/new-bsd</a>
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@zend.com so we can send you a copy immediately.
 *
 * @category   Zend
 * @package    Zend_Service
 * @subpackage Nirvanix
 * @copyright  Copyright (c) 2005-2009 Zend Technologies USA Inc. (<a href="http://www.zend.com">http://www.zend.com</a>)
 * @license    <a href="http://framework.zend.com/license/new-bsd">http://framework.zend.com/license/new-bsd</a>     New BSD License
 */
 
/**
 * @see Zend_Service_Nirvanix_Namespace_Imfs
 */
require_once 'Zend/Service/Nirvanix/Namespace/Imfs.php';

/**
 * @see Zend_Service_Nirvanix_FunctionalTestCase
 */
require_once 'Zend/Service/Nirvanix/FunctionalTestCase.php';

/**
 * @category   Zend
 * @package    Zend_Service
 * @subpackage UnitTests
 * @copyright  Copyright (c) 2005-2009 Zend Technologies USA Inc. (<a href="http://www.zend.com">http://www.zend.com</a>)
 * @license    <a href="http://framework.zend.com/license/new-bsd">http://framework.zend.com/license/new-bsd</a>     New BSD License
 */
class Zend_Service_Nirvanix_Namespace_ImfsTest extends Zend_Service_Nirvanix_FunctionalTestCase
{
    public function testInheritsFromNirvanixBase()
    {
        $imfs = new Zend_Service_Nirvanix_Namespace_Imfs();
        $this-&gt;assertType('Zend_Service_Nirvanix_Namespace_Base', $imfs);
    }
    
    // _getBody()
    
    public function testMultiparameter()
    {
        $imfs = $this-&gt;nirvanix-&gt;getService('IMFS');

        $imfs-&gt;putContents('/foo', 'contents for foo');

        $metadata = $this-&gt;nirvanix-&gt;getService('Metadata');

        $metaarray = array('color:blue', 'texture:smooth');
        $testarray = array('path' =&gt; '/foo', 'metadata' =&gt; $metaarray);

        $this-&gt;httpAdapter-&gt;addResponse(
           $this-&gt;makeNirvanixResponse(
                array('ResponseCode'   =&gt; '0'))
        );        

        $metadata-&gt;setMetadata($testarray);
        
        $imfs-&gt;unlink('foo');
    }    

}


A quick test to verify that everything is working outside of the unit tests as well:

&lt;?php

set_include_path(get_include_path() . PATH_SEPARATOR . 'C:\Program Files\PHP\ZendFramework-1.8.2-minimal\library');
require_once 'C:\Program Files\PHP\ZendFramework-1.8.2-minimal\library\Zend\Service\Nirvanix.php';

$auth = array('username' =&gt; 'userforzendbug',
'password' =&gt; 'zendpass',
'appKey' =&gt; '1a6df3fd-c81d-4cbf-9a97-27110926e916');

$nirvanix = new Zend_Service_Nirvanix($auth);
$imfs = $nirvanix-&gt;getService('IMFS');

$imfs-&gt;putContents('/foo.txt', 'fourteen bytes');

$metadata = $nirvanix-&gt;getService('Metadata');
$metaarray = array('color:blue', 'te&amp;xture:smooth');
$testarray = array('path' =&gt; '/foo.txt', 'metadata' =&gt; $metaarray);
$result = $metadata-&gt;setMetadata($testarray);
$result = $metadata-&gt;getMetadata($testarray);
print_r($result);

?&gt;

<p>The results should be similar to:
Zend_Service_Nirvanix_Response Object
(
    [_sxml:protected] =&gt; SimpleXMLElement Object
        (
            [ResponseCode] =&gt; 0
            [Metadata] =&gt; Array
                (
                    [0] =&gt; SimpleXMLElement Object
                        (
                            [Type] =&gt; color
                            [Value] =&gt; blue
                        )</p>

<pre><code>                [1] =&gt; SimpleXMLElement Object
                    (
                        [Type] =&gt; MD5
                        [Value] =&gt; KpY3FwasAWNyyIXIBmsTEg==
                    )

                [2] =&gt; SimpleXMLElement Object
                    (
                        [Type] =&gt; te&amp;xture
                        [Value] =&gt; smooth
                    )
            )
    )
</code></pre>

<p>)</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Rob Allen (rob) on 2012-11-20T20:53:07.000+0000</p> 
        <div class="body">
            <p>Bulk change of all issues last updated before 1st January 2010 as "Won't Fix".</p>

<p>Feel free to re-open and provide a patch if you want to fix this issue.</p>

        </div>
    </div>
    </div>

