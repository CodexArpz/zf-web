<h2>ZF-3013: add Filter HtmlEntityDecode &amp; HtmlEntityEncode  (rename HtmlEntities -&gt; HtmlEntityEncode)</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>New Feature</dd>

    <dt>Created:</dt>
    <dd>2008-04-01T13:22:17.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2010-12-03T15:21:30.000+0000</dd>

    <dt>Status:</dt>
    <dd>Closed</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Marc Bennewitz (GIATA mbH) (mben)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Marc Bennewitz (private) (mabe)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Filter</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <ul><li>add the filter Zend_Filter_HtmlEntityDecode to decode html entities to plain text</li>
<li>rename the filter Zend_Filter_HtmlEntities to Zend_Filter_HtmlEntityEncode for named consistently</li>
</ul><p>add features not supported by php's functions:
- decode and encode hex entities
- decode and encode decimal entities
- selectable if named entities will be used (on encode)
- selectable if hex or decimal entities will be used (on encode)
- selectable to throw an exception if an entity can't convert to the given encoding or ignore it
- use mbstring (if installed) to encode/decode encodings not supported by htmlentities and friends</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-04-18T17:11:46.000+0000</p> 
        <div class="body">
            <p>Please evaluate and categorize/assign as necessary.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-12-30T07:22:02.000+0000</p> 
        <div class="body">
            <p>It seems like the proposed change would have to wait for 2.0 for BC reasons. Matthew, please evaluate whether it is something we should do and, if so, when we should do it.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2009-07-08T08:51:20.000+0000</p> 
        <div class="body">
            <p>Waiting for reply from dev-team (ralph) since 26.06.09</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Marc Bennewitz (GIATA mbH) (mben) on 2009-08-20T04:34:58.000+0000</p> 
        <div class="body">
            <p>This is a little script to convert a html text to UTF-8:
(It is not optimal because it doesn't handle script tags and some other specials)</p>

<pre class="highlight"><code>
// $text = html text
// $enc = encoding of html text
$text = mb_convert_encoding($text, 'UTF-8', $enc);
// convert numeric entities
$pattern = '/\d{2,5};/u';
$text = preg_replace_callback($pattern, '_decEntitiesToUtf8', $text);
// convert hex entities
$pattern = '/([a-f0-9]{2,8});/ui'; // erst in XML muss das "x" klein geschrieben werden
$text = preg_replace_callback($pattern, '_hexEntitiesToUtf8', $text);
// convert named entities (but not ",',&lt;,&gt;,&amp;)
$htmlTransTable = get_html_translation_table(HTML_ENTITIES, ENT_NOQUOTES);
$xmlTransTable  = get_html_translation_table(HTML_SPECIALCHARS, ENT_NOQUOTES);
$myTransTable   = array();
foreach (array_diff_assoc($htmlTransTable, $xmlTransTable) as $char =&gt; $ent) {
    $myTransTable[$ent] = mb_convert_encoding($char,'UTF-8','ISO-8859-1');
}
$text = strtr($text, $myTransTable);

function _decEntitiesToUtf8($matches) {
    $convmap = array(0x0, 0x10000, 0, 0xfffff);
    $transTable = get_html_translation_table(HTML_SPECIALCHARS, ENT_QUOTES);
    $ret = mb_decode_numericentity($matches[0], $convmap, 'UTF-8');
    if (isset($transTable[$ret])) {
        return $transTable[$ret];
    } else {
        return $ret;
    }
}

function _hexEntitiesToUtf8($matches) {
    $convmap = array(0x0, 0x10000, 0, 0xfffff);
    $transTable = get_html_translation_table(HTML_SPECIALCHARS, ENT_QUOTES);
    $ret = mb_decode_numericentity(hexdec($matches[1]), $convmap, 'UTF-8');
    if (isset($transTable[$ret])) {
        return $transTable[$ret];
    } else {
        return $ret;
    }
}
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2009-08-23T14:31:19.000+0000</p> 
        <div class="body">
            <p>I got reply some days ago from the devteam...</p>

<p>No for the renaming from HtmlEntities to HtmlEntityEncode
Yes for the new HtmlEntityDecode.
No for mbstring because iconv is installed per default but mbstring not.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Marc Bennewitz (private) (mabe) on 2009-10-28T15:01:47.000+0000</p> 
        <div class="body">
            <p>I created a proposal for this: <a href="http://framework.zend.com/wiki/pages/viewpage.action?pageId=18219044">http://framework.zend.com/wiki/pages/â€¦</a></p>

<p>-&gt; the functionality is different to htmlentities, htmlspecialchars and friends and should not replace these filter(s).</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Raphael Dehousse (thymus) on 2010-02-16T03:22:48.000+0000</p> 
        <div class="body">
            <p>A basic Zend_Filter_HtmlEntityDecode:</p>

<pre class="highlight"><code>
&lt;?php

class Zend_Filter_HtmlEntityDecode implements Zend_Filter_Interface
{

    /**
     * Corresponds to the second htmlentities() argument
     *
     * @var integer
     */
    protected $_quoteStyle;

    /**
     * Corresponds to the third htmlentities() argument
     *
     * @var string
     */
    protected $_encoding;

    /**
     * Sets filter options
     *
     * @param  integer|array $quoteStyle
     * @param  string  $charSet
     * @return void
     */
    public function __construct($options = array())
    {
        if (!is_array($options)) {
            $options = func_get_args();
            $temp['quotestyle'] = array_shift($options);
            if (!empty($options)) {
                $temp['charset'] = array_shift($options);
            }

            $options = $temp;
        }

        if (!isset($options['quotestyle'])) {
            $options['quotestyle'] = ENT_COMPAT;
        }

        if (!isset($options['encoding'])) {
            $options['encoding'] = 'UTF-8';
        }
        if (isset($options['charset'])) {
            $options['encoding'] = $options['charset'];
        }

        $this-&gt;setQuoteStyle($options['quotestyle']);
        $this-&gt;setEncoding($options['encoding']);
    }

    /**
     * Returns the quoteStyle option
     *
     * @return integer
     */
    public function getQuoteStyle()
    {
        return $this-&gt;_quoteStyle;
    }

    /**
     * Sets the quoteStyle option
     *
     * @param  integer $quoteStyle
     * @return Zend_Filter_HtmlEntities Provides a fluent interface
     */
    public function setQuoteStyle($quoteStyle)
    {
        $this-&gt;_quoteStyle = $quoteStyle;
        return $this;
    }

    /**
     * Get encoding
     *
     * @return string
     */
    public function getEncoding()
    {
         return $this-&gt;_encoding;
    }

    /**
     * Set encoding
     *
     * @param  string $value
     * @return Zend_Filter_HtmlEntities
     */
    public function setEncoding($value)
    {
        $this-&gt;_encoding = (string) $value;
        return $this;
    }

    /**
     * Returns the charSet option
     *
     * Proxies to {@link getEncoding()}
     *
     * @return string
     */
    public function getCharSet()
    {
        return $this-&gt;getEncoding();
    }

    /**
     * Sets the charSet option
     *
     * Proxies to {@link setEncoding()}
     *
     * @param  string $charSet
     * @return Zend_Filter_HtmlEntities Provides a fluent interface
     */
    public function setCharSet($charSet)
    {
        return $this-&gt;setEncoding($charSet);
    }

    /**
     * Defined by Zend_Filter_Interface
     *
     * Returns the string $value, converting HTML entity to their corresponding characters
     * equivalents where they exist
     *
     * @param  string $value
     * @return string
     */
    public function filter($value)
    {
        return html_entity_decode((string) $value, $this-&gt;getQuoteStyle(), $this-&gt;getEncoding());
    }

}
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Marc Bennewitz (private) (mabe) on 2010-12-03T15:21:29.000+0000</p> 
        <div class="body">
            <p>not accepted by CR-Team</p>

        </div>
    </div>
    </div>

