<h2>ZF2-186: Config::merge() replacing numeric config settings</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2012-03-03T10:06:05.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-03-03T13:40:56.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Artur Bodera (joust)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend\Config</li>
            <li>Config</li>
            <li>merge</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>h3. The problem
In a scenario, where a config value is a numerical list (numerical array), {{Config::merge()}} overwrites individual items in the source list instead of appending to it.</p>

<p>h3. Real-world scenario
{{Config}} is probably most often used to configure components and modules. Numeric keys are rarely used, but if present, usually describe a list of possible items.</p>

<p>An example for that could be a {{Navigation}} container. A {{Navigation}} container is configured by an ordered list (i.e. numerical array) describing different pages. Let's assume that <em>ModuleA</em> provides a list of pages, and <em>ModuleB</em> provides its own list of pages.</p>

<p>When merging two Config objects from two different modules, the items (pages) from ModuleB will override (replace pages) from ModuleA, which is not an expected behavior.</p>

<p>h3. Sample script</p>

<pre class="highlight"><code>

$arrayA = array(
    'flag' =&gt; true,
    'text' =&gt; 'foo',
    'list' =&gt; array( 'a', 'b', 'c' ),
    'aSpecific' =&gt; 12
);

$arrayB = array(
    'flag' =&gt; false,
    'text' =&gt; 'bar',
    'list' =&gt; array( 'd', 'e' ),
    'bSpecific' =&gt; 100
);

$configA = new Config($arrayA);
$configB = new Config($arrayB);

$configA-&gt;merge($configB); // merge B onto A

$expectedMergeResult = array(
    'flag' =&gt; false,
    'text' =&gt; 'bar',
    'list' =&gt; array( 'a', 'b', 'c', 'd', 'e' ),
    'aSpecific' =&gt; 12,
    'bSpecific' =&gt; 100
);


</code></pre>

<p>h3. How does it work outside of ZF?
In pure PHP implementation, the primary difference between {{array_merge_recursive()}} and {{array_replace_recursive()}} is that _merge will append (extend) nested, numerical arrays. The other function, _replace, will override numerical values. {{Config::merge()}} method does perform similar operation to {{array_replace_recursive()}} but does not provide any means to select a behavior for handling lists.</p>

<p>h3. The solution
The default {{Config::merge()}} behavior needs to be compatible with {{array_merge_recursive()}} - i.e. it has to recognize lists and append their values. For cases when one needs to have a {{replace}} behavior, a separate function will be provided - {{Config::replace()}}</p>

<p>h3. Differences between Config::merge() and array_merge_recursive()</p>

<p>The most important difference between those functions is how they handle string values.</p>

<p>Let's assume we have following arrays:</p>

<pre class="highlight"><code>
$arrayA = array( 'foo' =&gt; 1, 'bar' =&gt; 'text' );
$arrayB = array( 'bar' =&gt; 'other text' );
</code></pre>

<p>When given duplicate keys and string values {{array_merge_recursive()}} will create an array of values:</p>

<pre class="highlight"><code>
print_r(array_merge_recursive($arrayA,$arrayB));
// Array
//(
//    [foo] =&gt; 1
//    [bar] =&gt; Array
//        (
//            [0] =&gt; text
//            [1] =&gt; other text
//        )
//
//)
</code></pre>

<p>With duplicate keys {{Config::merge()}} will overwrite the value, regardless of its type :</p>

<pre class="highlight"><code>
$configA = new Config($arrayA);
$configB = new Config($arrayB);
$configA-&gt;merge($configB);

print_r($configA-&gt;toArray());
// Array
//(
//    [foo] =&gt; 1
//    [bar] =&gt; other text
//)
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Artur Bodera (joust) on 2012-03-03T13:40:56.000+0000</p> 
        <div class="body">
            <p>Fixed in <a href="https://github.com/zendframework/zf2/pull/880">https://github.com/zendframework/zf2/pull/880</a></p>

        </div>
    </div>
    </div>

