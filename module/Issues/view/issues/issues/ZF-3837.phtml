<h2>ZF-3837: insert() don't return last_insert_id when empty key exists in inserted data</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2008-08-03T07:57:05.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2011-12-20T12:17:51.000+0000</dd>

    <dt>Status:</dt>
    <dd>Closed</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.11.6 (05/May/11)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Pavel Vrany (derk)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Adam Lundrigan (adamlundrigan)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Db_Table</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-4183">ZF-4183</a></li>
            <li><a href="/issues/browse/ZF-2953">ZF-2953</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
        <li><a href="/issues/secure/attachment/13884/ZF-3837.patch">ZF-3837.patch</a></li>
        </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>example with MySQL:</p>

<p>CREATE TABLE <code>customer</code> (
    <code>id</code> int(11) NOT NULL auto_increment,
    <code>title</code> text NOT NULL,
    PRIMARY KEY  (<code>id</code>)
)</p>

<p>class Customer extends Zend_Db_Table_Abstract
{
   protected _sequence = true; // defaul behavior
}</p>

<p>$data=('id'=&gt;null, 'title'=&gt;'xxx');</p>

<p>$table = new Customer();
$table-&gt;insert($data);</p>

<p>Mysql is ignoring empty 'id' and using auto value, framework (Zend/Db/Table/Abstract.php) don't expects it:</p>

<pre><code>    if ($this-&gt;_sequence === true &amp;&amp; !isset($data[$pkIdentity])) {
        $data[$pkIdentity] = $this-&gt;_db-&gt;lastInsertId();
    }
</code></pre>

<p>Maybe, empty() test will be better.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Dolf Schimmel (Freeaqingme) (freak) on 2009-07-22T14:47:33.000+0000</p> 
        <div class="body">
            <p>1.6.1
1.7.3
1.7.5
1.7.6
1.7.7
1.7.8
1.8.1
1.8.2
1.8.3
1.8.4
Next mini relase (again)</p>

<p>Could anybody please explain what's going on here? This issue has been updated so many times that in that same timeframe it could have been fixed. Please either fix it, close it as wont-fix, or set a realistic 'fix version'.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Fabio Almeida (fabius) on 2009-08-18T02:27:32.000+0000</p> 
        <div class="body">
            <p>@Dolf Schimmel: I totally second that. And it got bumped again, to version 1.9.1. And guess what... It's not fixed. Again.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ralph Schindler (ralph) on 2009-08-18T09:46:35.000+0000</p> 
        <div class="body">
            <p>Updating to "Should Have" in "Next Mini Release".
Changing to "Major" priority.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Alin Gherman (ha11owed) on 2009-09-10T02:52:17.000+0000</p> 
        <div class="body">
            <p>this happens also in 1.9.2, i think the only workaround is to create a new array with no empty elements</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Menno Luiten (mluiten) on 2009-12-19T03:01:38.000+0000</p> 
        <div class="body">
            <p>Looking into this, and strange thing is that 'id' should be emptied by the following code (above the actual insertion)</p>

<pre class="highlight"><code>
/**
 * If the primary key can be generated automatically, and no value was
 * specified in the user-supplied data, then omit it from the tuple.
 */
 if (array_key_exists($pkIdentity, $data) &amp;&amp; $data[$pkIdentity] === null) {
    unset($data[$pkIdentity]);
 }
</code></pre>

<p>So the isset($data[$pkIdentity]) as mentioned above should fail anyway, even when given null, since it's being unset in that case. Trying to replicate the behavior..</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Menno Luiten (mluiten) on 2009-12-19T04:51:25.000+0000</p> 
        <div class="body">
            <p>There is a actually test case named testTableInsert() inside Zend/Db/Table/TestCommon.php which uses the exact scenario described, and it succeeds. And I can't seem to get it to fail under any condition; anyone else with more 'luck'? Otherwise, this might not be an issue.</p>

<pre class="highlight"><code>
public function testTableInsert()
{
    $table = $this-&gt;_table['bugs'];
    $row = array (
        'bug_id'          =&gt; null,
        'bug_description' =&gt; 'New bug',
        'bug_status'      =&gt; 'NEW',
        'created_on'      =&gt; '2007-04-02',
        'updated_on'      =&gt; '2007-04-02',
        'reported_by'     =&gt; 'micky',
        'assigned_to'     =&gt; 'goofy',
        'verified_by'     =&gt; 'dduck'
    );
    $insertResult = $table-&gt;insert($row);
    $lastInsertId = $this-&gt;_db-&gt;lastInsertId();
    $this-&gt;assertEquals($insertResult, $lastInsertId);
    $this-&gt;assertEquals(5, $lastInsertId);
}
</code></pre>

<p>Tried scenarios (using mysqli driver):
* changing bug_id column from IDENTIFIER to 'INT(11) NOT NULL auto_increment'
* adding $_sequence = true to My_ZendDbTable_TableBugs
* commenting out "protected $_primary = 'bug_id';" in My_ZendDbTable_TableBugs
* replacing $_primary with "array('bug_id')"
* changing table type from InnoDB to MyISAM</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Pavel Vrany (derk) on 2009-12-19T06:24:51.000+0000</p> 
        <div class="body">
            <p>The function dbAdapter-&gt;lastInsertId() is OK, the problem is with the return value of the function dbtable-&gt;insert()</p>

<p>$ php test.php 
returnedKey is 0, but lastInsertId is 55</p>

<p>$ cat test.php</p>

<pre class="highlight"><code>
&lt;?php

set_include_path('/var/www/weby/library/');
require_once 'Zend/Db/Table.php';
require_once 'Zend/Db/Table/Abstract.php';
require_once 'Zend/Db.php';


$dbAdapter = Zend_Db::factory('mysqli',array(
    'host'     =&gt; '127.0.0.1',
    'port'     =&gt; '3306',
    'username' =&gt; 'root',
    'password' =&gt; '',
    'dbname'   =&gt; 'test'
));

Zend_Db_Table::setDefaultAdapter($dbAdapter);

class customer extends Zend_Db_Table_Abstract {
    protected $_sequence = true; // default behavior
    protected $_primary = 'id';
}
$data=array();
$data['title']='xxx';
$data['id']=0; //mysql documentation: It is not even changed if you update another AUTO_INCREMENT column with a nonmagic value (that is, a value that is not NULL and not 0). 
$table = new customer;
$primary_key=$table-&gt;insert($data); //@return mixed The primary key of the row inserted.  

$lastInsertId = $dbAdapter-&gt;lastInsertId();
echo "returnedKey is $primary_key, but lastInsertId is $lastInsertId\n";

?&gt;
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Menno Luiten (mluiten) on 2009-12-19T07:21:37.000+0000</p> 
        <div class="body">
            <p>That should be discovered by</p>

<pre class="highlight"><code>
$this-&gt;assertEquals($insertResult, $lastInsertId);
</code></pre>

<p>In your code, you set $data['id'] to 0 (zero), not null. This would not be unset and would explain the behavior (if the mysqli adapter does convert 0 -&gt; null at some point). Could you test with $data['id'] = null and confirm if that works?</p>

<p>If I insert 0 as row key directly into MySQL, it is true that is considers it as NULL and thus creates an auto incremented key. This could be easily patched by checking for $data[$pkIdentity] == null instead of === null</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Pavel Vrany (derk) on 2009-12-19T10:19:00.000+0000</p> 
        <div class="body">
            <p>You're right, null value works correctly now. But other empty values returns a bad result: string '', integer 0, array().
Also everything what isn't number: string 'fsdfdsfs' etc.</p>

<p>It's not only "feature" of php adapter, I get the same results from the terminal client.</p>

<p>The behavior can be also changed: <a href="http://dev.mysql.com/doc/refman/5.5/en/server-sql-mode.html#sqlmode_no_auto_value_on_zero">http://dev.mysql.com/doc/refman/â€¦</a></p>

<p>Solution could be to call the function last_insert_id() before and after the insert(), compare the values and in case of change use the new value as the primary_key.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Menno Luiten (mluiten) on 2009-12-19T13:25:01.000+0000</p> 
        <div class="body">
            <p>Actually, empty values like string "" and array() would be detected when using the == operator instead of the ==== operator. I don't think an input of "fsdfsdgsf" would be wanted anyway when using sequence = true. Maybe should give some Exception, but I'm not sure. I will talk to Ralph or Matthew to decide if loosening the check is wanted tomorrow.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Adam Lundrigan (adamlundrigan) on 2011-04-28T15:19:55.000+0000</p> 
        <div class="body">
            <p>I've attached a test suite patch which, in my mind anyway, proves that this bug no longer exists.</p>

<p>In the test, I set 'bug_id' to an empty string then perform the insert.  The return value of insert() is the correct auto value.</p>

<p>This test passed when using both sqlite in-memory and pdo_mysql adapters.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Adam Lundrigan (adamlundrigan) on 2011-04-28T17:58:35.000+0000</p> 
        <div class="body">
            <p>Duplicate of ZF-2953</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Adam Lundrigan (adamlundrigan) on 2011-04-28T22:36:07.000+0000</p> 
        <div class="body">
            <p>Fix in trunk r23878</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ralph Schindler (ralph) on 2011-05-03T03:26:48.000+0000</p> 
        <div class="body">
            <p>Fixed in release branch 1.11 in r23949</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ketil Stadskleiv (stadskle) on 2011-12-20T12:17:51.000+0000</p> 
        <div class="body">
            <p>I am receiving the same issue now when the data field is a Zend_Db_Expr('NULL'). This should not stop the db_table to return the new primary key.</p>

<pre class="highlight"><code>
$row = array (
        'bug_id'          =&gt; Zend_Db_Expr('NULL'),
        'bug_description' =&gt; 'New bug',
        'bug_status'      =&gt; 'NEW',
        'created_on'      =&gt; '2007-04-02',
        'updated_on'      =&gt; '2007-04-02',
        'reported_by'     =&gt; 'micky',
        'assigned_to'     =&gt; 'goofy',
        'verified_by'     =&gt; 'dduck'
    );</code></pre>

<p>This causes insert() to return a Zend_Db_Expr('NULL') object, that cannot be the desired behaviour?</p>

        </div>
    </div>
    </div>

