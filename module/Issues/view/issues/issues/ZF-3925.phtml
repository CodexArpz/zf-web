<h2>ZF-3925: Ability to override self URL on Zend_OpenId</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Patch</dd>

    <dt>Created:</dt>
    <dd>2008-08-11T09:41:49.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2008-12-21T06:05:17.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.7.1 (01/Dec/08)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Dmitry Stogov (dmitry)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_OpenId</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
        <li><a href="/issues/secure/attachment/11468/trunk.diff">trunk.diff</a></li>
        </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>At the moment this fetches from the $_SERVER supervariable directly. It would be nice to have a $selfUrl static in the style of the $exitOnRedirect that allows the return url to be defined cleanly if it's different than expected.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Ian Barber (ibarber) on 2008-08-11T09:42:54.000+0000</p> 
        <div class="body">
            <p>Patch for zend_openid class with the above suggestion implement.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Dmitry Stogov (dmitry) on 2008-12-01T02:32:56.000+0000</p> 
        <div class="body">
            <p>Why do you need it?
Doesn't the second argument of Zend_Consumer::login($id, $returnTo) work for you?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ian Barber (ibarber) on 2008-12-01T03:02:43.000+0000</p> 
        <div class="body">
            <p>Because it assumes that the URL in the server variable is the URL that user is trying to auth against. It's a subtle condition, but it's we had it when the auth was being done on a different address than that user was viewing (the auth code was centrally located, but being used as a service by a number of different domains, for a shared sign on type solution).</p>

        </div>
    </div>
    </div>

