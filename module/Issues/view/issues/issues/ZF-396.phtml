<h2>ZF-396: Create plugin/callback capability to individual ACOs</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>New Feature</dd>

    <dt>Created:</dt>
    <dd>2006-09-25T01:42:32.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2007-07-05T14:43:21.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>0.6.0 (16/Dec/06)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Darby Felton (darby)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Acl</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Originally suggested by F Galassi
{quote}
I think this set of assertions based on environment (context) are common
enough to be worth inclusion in Zend_Acl itself as some kind of callback evaluated at runtime.
An assertion would be able to access involved ARO and ACO,
php superglobals and maybe the acl object to support many useful checks.
Here a possible example using an implementation based on one class
per assertion (admittedly too much fine grained)</p>

<pre class="highlight"><code>
class Ip_Equal_To implements Zend_Acl_Assertion {
  private $ip;
  public __construct($ip) { $this-&gt;ip = $ip; }
  public assert ($aro, $aco, $acl) {
    return $_SERVER['REMOTE_ADDRESS'] == $this-&gt;ip;
  }
}

// later
$acl-&gt;userManagement-&gt;allow(
  $user, 'edit', new Ip_Equal_To('123.123.123.123')
);
</code></pre>

<p>{quote}</p>

<p>I'd like to investigate a plugin architecture (similar to Zend_Controller) that fires off a series of callbacks for an ACO <em>only</em> if the base condition is met. Let's examine a theoretical ACO:-</p>

<pre class="highlight"><code>
$acl-&gt;allow('admin', null, array(new MyAclPluginIpEquals('123.123.123.123'),
                                 new MyAclPluginTimeBetween(strtotime('12.00pm'), strtotime('5.00pm'))));
</code></pre>

<p>The order of checking would be
* Check if the current ARO can view the ACO
* If true, check the first plugin (MyAclPluginIpEquals) - only if that returns true then continue with MyAclPluginTimeBetween. If everything is OK then return an explicit Allow
* Otherwise an explicit Deny is returned</p>

<p>I expect performance won't be adversely affected if this is the order of execution and that plugins only extend a very simple abstracted class.</p>

<p>Would appreciate feedback/critique between now and the end of October before I commence on this addition.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Darby Felton (darby) on 2006-09-27T14:22:47.000+0000</p> 
        <div class="body">
            <p>There seem to be some similarities between what is being requested here and what is proposed here:</p>

<p>Zend_FilterChain and Zend_Validator
<a href="http://framework.zend.com/wiki/x/cwM">http://framework.zend.com/wiki/x/cwM</a></p>

<p>at least in that we are applying a chain of rules to which the request must conform for authorization/validation. Just some food for thought.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2006-11-13T15:10:43.000+0000</p> 
        <div class="body">
            <p>Changing fix version to 0.6.0.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Darby Felton (darby) on 2006-11-22T12:23:20.000+0000</p> 
        <div class="body">
            <p>I'll be attempting to address this plugin ability with my next commit, in coordination with Simon and others who are willing to review the code.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Darby Felton (darby) on 2006-11-30T11:19:49.000+0000</p> 
        <div class="body">
            <p>Resolved in latest SVN with Zend_Acl_Assert_Interface. Note that the way this works is that the assertion is assigned to a particular rule, and the rule only applies if the assert() method returns true. Thus, if users want to conditionally allow or deny certain access with Zend_Acl, they simply attach instances of the assertion classes that will determine whether or not the rule applies.</p>

<p>When an authorization query occurs, the assert() method is passed the ACL, ARO, ACO, and privilege to which the query applies (i.e., where applicable), in order to provide a robust context for the user's assertion class.</p>

        </div>
    </div>
    </div>

