<h2>ZF-30: add a clearRecipients() method to the Zend_Mail (TRAC#14)</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2006-06-19T22:55:35.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2007-07-05T14:43:06.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Zend Framework (zend_framework)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Matthew Weier O'Phinney (matthew)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Mail</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>The second suggestion is to add a clearRecipients() method to the Zend_Mail class to optimize the process when sending the same email to several receipients.</p>

<p>My criteria are : no use of the BCC, and I do not want users to see which other users has received the email.</p>

<p>Here is how I do it right now :</p>

<pre class="highlight"><code>
require_once('Zend/Mail.php');
require_once 'Zend/Mail/Transport/Smtp.php';                                                   
       
$tr = new Zend_Mail_Transport_Smtp('myMailServer');
$tr-&gt;connect();
       
foreach ($emails as $value) {
    $mail = new Zend_Mail();
    $mail-&gt;setFrom($from);
    $mail-&gt;setBodyText($message);
    $mail-&gt;setSubject('this is a test');                   
    $mail-&gt;addTo($value);
    $mail-&gt;send();
}
       
$tr-&gt;disconnect();
</code></pre>

<p>Here is my suggestion :</p>

<pre class="highlight"><code>
require_once('Zend/Mail.php');
require_once 'Zend/Mail/Transport/Smtp.php';                                                   
       
$tr = new Zend_Mail_Transport_Smtp('myMailServer');
$tr-&gt;connect();
$mail = new Zend_Mail();
$mail-&gt;setFrom($from);
$mail-&gt;setBodyText($message);
$mail-&gt;setSubject('this is a test');
       
foreach ($emails as $value) {
    $mail-&gt;clearRecipients();                      
    $mail-&gt;addTo($value);
    $mail-&gt;send();
}

$tr-&gt;disconnect();
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Zend Framework (zend_framework) on 2006-06-19T22:55:50.000+0000</p> 
        <div class="body">
            <p>Another feature creep likely to be requested: mail merge</p>

<p>Mail merge usually involves similar activities found in template instantiation, except for email the instantiation may be once per email in a list, instead of once per page view for templates used to produce web pages. Consider a common, but simple case, where the beginning of an email includes a greeting with the recipient's name, but the remainder of the email remains identical.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2006-07-07T21:46:29.000+0000</p> 
        <div class="body">
            <p>We have discussed this request internally, and decided not to add the feature at this time in anticipation of a proper mail merge/queue module in a future release.</p>

<p>In the meantime, a very easy workaround exists for doing this. First, create the mail object with all information except the recipients list:</p>

<p>$mail = new Zend_Mail();
$mail-&gt;setFrom('matthew@zend.com, "Matthew Weier O'Phinney");
$mail-&gt;setBodyText('This is the message body');</p>

<p>Then, loop over your recipients, clone the mail object, add recipients to the clone, and send:</p>

<p>foreach ($recpients as $to) {
    $copy = clone $mail;
    $copy-&gt;addTo($to);
    $copy-&gt;send();
    unset($copy);
}</p>

        </div>
    </div>
    </div>

