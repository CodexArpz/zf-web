<h2>ZF-10878: Zend_Http_Client: compressed streams unusable</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2010-12-28T14:29:04.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-08-31T08:44:25.000+0000</dd>

    <dt>Status:</dt>
    <dd>Open</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Daniel Berlin (dberlin)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Shahar Evron (shahar)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Http_Client</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>When fetching a file from a server supporting gzip or compress and sending it to a stream,
the data is compressed and there is no handy way to uncompress/inflate it.</p>

<p>$client = new Zend_Http_Client(
   "http://some_url_on_a_server_with_gzip_support/some_text_file.txt"
   , array(
    "adapter"         =&gt; "Zend_Http_Client_Adapter_Curl"
    , "storeresponse" =&gt; false
    , "timeout"       =&gt; 60
   )
);</p>

<p>// This works around the problem, but it's far from a solution!
//$client-&gt;setHeaders("Accept-Encoding", "compress;q=0 gzip;q=0");</p>

<p>$reply = $client-&gt;setStream("target_file.txt")-&gt;request();</p>

<p>...</p>

<p>bash&gt; file target_file
target_file.txt: gzip compressed data</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Daniel Berlin (dberlin) on 2010-12-28T14:33:17.000+0000</p> 
        <div class="body">
            <p>The response header:</p>

<p>object(Zend_Http_Response_Stream)#37 (8) {
  ["stream":protected] =&gt; resource(33) of type (stream)
  ["stream_name":protected] =&gt; string(20) "target_file.txt"
  ["_cleanup":protected] =&gt; NULL
  ["version":protected] =&gt; string(3) "1.1"
  ["code":protected] =&gt; int(200)
  ["message":protected] =&gt; string(2) "OK"
  ["headers":protected] =&gt; array(9) {
    ["Date"] =&gt; string(29) "Tue, 28 Dec 2010 22:05:57 GMT"
    ["Server"] =&gt; string(3) "off"
    ["Last-modified"] =&gt; string(29) "Tue, 28 Dec 2010 05:30:01 GMT"
    ["Etag"] =&gt; string(30) ""2c8171a-2346ff-49871be796f43""
    ["Accept-ranges"] =&gt; string(5) "bytes"
    ["Vary"] =&gt; string(15) "Accept-Encoding"
    ["Content-encoding"] =&gt; string(4) "gzip"
    ["Connection"] =&gt; string(5) "close"
    ["Content-type"] =&gt; string(10) "text/plain"
  }
  ["body":protected] =&gt; string(0) ""
}</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Shahar Evron (shahar) on 2010-12-30T09:17:54.000+0000</p> 
        <div class="body">
            <p>It is possible that adding a gzip stream filter on the stream will help.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Daniel Berlin (dberlin) on 2011-01-01T06:22:29.000+0000</p> 
        <div class="body">
            <p>Sure, but that's kind of a hack...</p>

<p>My point is, that the file created by the Zend_Http_Client is not usable
without ugly extra-code (check the response headers if compression was used,
apply a stream filter, etc.)</p>

<p>The expected result should be a usable file without having to care about
HTTP details.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by John Flatness (zerocrates) on 2011-11-16T19:48:58.000+0000</p> 
        <div class="body">
            <p>The underlying problem seems to be that Zend_Http_Client is responsible for adding the Accept-Encoding headers, but Zend_Http_Response is responsible for dealing with a compressed response. This works out fine for normal usage, since the response body is accessed through Zend_Http_Response, but when setStream is used, the response data is streamed directly to the destination, without Zend_Http_Response being involved at all.</p>

<p>Using the zlib stream filters would let you deal with this, but it seems like something the framework would need to do for you; you can't know whether you need to inflate the output until you look at the headers, and as a user of Zend_Http_Client, you can't see the headers until the response has already been {{stream_copy_to_stream}}'d to its destination.</p>

<p>Of course, the reporter's workaround (or {{$client-&gt;setHeaders('Accept-Encoding', 'identity');}}) is the simplest workaround, but it'd be ideal to have both HTTP compression and streaming.</p>

        </div>
    </div>
    </div>

