<h2>ZF-5094: Zend_Amf serialization of associative arrays with Amf0 does not retains the keys</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2008-11-28T06:14:24.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2008-12-15T15:17:07.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Wade Arnold (wadearnold)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Amf</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>When serializing an associative array the keys are not preserved correctly.</p>

<p>The class handling the serialization to Amf0 format is Zend_Amf_Parse_Amf0_Serializer.
The method to determine how the data should be serialized is writeTypeMarker.</p>

<p>First example:
$first = array('foo' =&gt; 5, 'bar' =&gt; 23)
This array is serialized using the type marker AMF0_MIXEDARRAY since it contains non-numeric keys.
This results in receiving an Array-instance in action script which means the keys of the associative array are lost.
Shouldn't this be serialized so that an Object-instance is received in action script?</p>

<p>Second example:
$second = array(1 =&gt; 'foo', 5 =&gt; 'bar')
This array is sparse (not dense, because of the gaps) but is serialized using the type marker AMF0_ARRAY since it only contains numeric keys.
This results in receiving an Array-instance in action script which means the keys are lost again since the array got reindexed.
Shouldn't this be serialized as a sparse array (using the type marker) AMF0_MIXEDARRAY so that an Array-instance is received in action script which retains the key-value mapping?</p>

<p>I modified the code where the type marker is determined for array data.
The current implementation in svn version 1.7.0PL1 is (line 130-142):</p>

<p>case (is_array($data)):
  // check if it is a mixed typed array
  foreach (array_keys($data) as $key) {
    if (!is_numeric($key)) {
      $markerType = Zend_Amf_Constants::AMF0_MIXEDARRAY;
      break;
    }
  }
  // Dealing with a standard numeric array
  if(!$markerType){
    $markerType = Zend_Amf_Constants::AMF0_ARRAY;
    break;
  }</p>

<p>I modified the code to match my previous suggestions:</p>

<p>case (is_array($data)):
  // check if it is an associative array
  $i = 0;
  foreach (array_keys($data) as $key) {
    // check if it contains non-integer keys
    if (!is_numeric($key) || intval($key) != $key) {
      $markerType = Zend_Amf_Constants::AMF0_OBJECT;
      break;
    // check if it is a sparse indexed array
    } else if ($key != $i) {
      $markerType = Zend_Amf_Constants::AMF0_MIXEDARRAY;
      break;
    }
    $i++;
  }
  // Dealing with a standard indexed array
  if(!$markerType){
    $markerType = Zend_Amf_Constants::AMF0_ARRAY;
    break;
  }</p>

<p>I hope it is possible to follow my desciptions.
Please don't hesitate to ask me if anything is not clear.</p>

<p>For the Amf3-part i was not yet able to figure out how to force Zend_Amf to use Amf3 and test that kind of serialization.
But looking at the implementation of Zend_Amf_Parse_Amf0_Serializer::writeArray i am quite sure that it suffers the same problem.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Wade Arnold (wadearnold) on 2008-12-15T15:17:06.000+0000</p> 
        <div class="body">
            <p>I have taken the suggestions of this thread and implemented them into AMF0. I will open a new ticket for adding the changes into AMF3.</p>

        </div>
    </div>
    </div>

