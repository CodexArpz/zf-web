<h2>ZF-1808: Allow controllers in default module to be namespaced</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2007-08-03T09:17:43.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2008-03-21T16:25:17.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.5.0 (17/Mar/08)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Matthew Weier O'Phinney (matthew)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Controller</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-2429">ZF-2429</a></li>
            <li><a href="/issues/browse/ZF-1831">ZF-1831</a></li>
            <li><a href="/issues/browse/ZF-2609">ZF-2609</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Currently, Zend_Controller_Dispatcher_Standard does not allow controllers in the default module to be namespaced. This can cause an issue if setting the default module to a name other than 'default' in order to have an existing module be the default. A simple change to loadClass() would fix this. The new method would look like this:</p>

<pre class="highlight"><code>
public function loadClass($className)
{
    $dispatchDir = $this-&gt;getDispatchDirectory();

    $loadFile    = $dispatchDir . DIRECTORY_SEPARATOR . $this-&gt;classToFilename($className);
    $dir         = dirname($loadFile);
    $file        = basename($loadFile);

    try {
        Zend_Loader::loadFile($file, $dir, true);
    } catch (Zend_Exception $e) {
        require_once 'Zend/Controller/Dispatcher/Exception.php';
        throw new Zend_Controller_Dispatcher_Exception('Cannot load controller class "' . $className . '" from file "' . $file . '" in directory "' . $dir . '"');
    }

    $final = $this-&gt;formatModuleName($this-&gt;_curModule) . '_' . $className;

    if (!class_exists($final)) {
        if ((($this-&gt;_curModule == $this-&gt;_defaultModule) 
                &amp;&amp; !class_exists($className))
            || ($this-&gt;_curModule != $this-&gt;_defaultModule))
        {
            require_once 'Zend/Controller/Dispatcher/Exception.php';
            throw new Zend_Controller_Dispatcher_Exception('Invalid controller class ("' . $className . '")');
        }
        $final = $className;
    }

    return $final;
}
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Patrick Nijs (patricknijs) on 2007-10-22T11:38:43.000+0000</p> 
        <div class="body">
            <p>Yes! This would be great.
Especially as a developer it's convenient to have one framework available where you can plugin the several modules.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Patrick Nijs (patricknijs) on 2007-10-22T13:03:25.000+0000</p> 
        <div class="body">
            <p>You should change one line btw, just for esthetics:</p>

<p>$final = $this-&gt;formatModuleName(ucfirst($this-&gt;<em>curModule)) . '</em>' . $className;</p>

<p>Notice the ucfirst()?</p>

<p>Kind regards,</p>

<p>Patrick</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2007-11-16T12:46:15.000+0000</p> 
        <div class="body">
            <p>Tentatively scheduling for 1.1.0</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2007-12-14T18:43:07.000+0000</p> 
        <div class="body">
            <p>What is the status of this issue? Will the fix be included in 1.5?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2008-02-20T11:07:00.000+0000</p> 
        <div class="body">
            <p>Resolved in trunk. Passing the front controller or dispatcher parameter 'prefixDefaultModule' will ensure the controllers in the default module are namespaced.</p>

        </div>
    </div>
    </div>

