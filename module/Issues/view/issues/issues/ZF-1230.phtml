<h2>ZF-1230: Zend_Controller_Router_Route - URI_DELIMITER as const is limiting development over Route</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2007-04-09T17:23:32.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2007-07-05T14:44:03.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>0.9.3 (05/May/07)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Cristian Bichis (avantis)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Michal Minicki (martel)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Controller</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>I am working a lot with SEO things, and i find out approach for making more SEO friendly URL's on ZF a bit difficult to update in order to work properly.</p>

<p>Problem is that on Route class the const URI_DELIMITER = '/';  makes impossible to subclass Route class for working with some custom delimiters. If we subclass Route class and put new value to const URI_DELIMITER  this will be available only at subclass level, so all functions from Route class working with URI_DELIMITER will still use / (from Route class), not from subclass.</p>

<p>Sample: if we want to use _ instead of / we need to use a more complicated approach, suggested by Matthew... Here is a workaround, but i think would be much easier to work if we can somehow have a URI_DELIMITER which can be customized.</p>

<p><a href="http://framework.zend.com/wiki/display/ZFMLGEN/mail/26839">http://framework.zend.com/wiki/display/â€¦</a></p>

<p>So i suggest to see if no any possibility to have custom URI_DELIMITER without to fall into RegEx approach.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-04-09T18:08:36.000+0000</p> 
        <div class="body">
            <p>Assign to Matthew.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Michal Minicki (martel) on 2007-04-11T06:45:30.000+0000</p> 
        <div class="body">
            <p>Fixed. Zend_Controller_Router_Route consts are now protected vars to allow subclassing.</p>

<p>Thanks for your submission, Cristian.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Cristian Bichis (avantis) on 2007-04-11T07:28:16.000+0000</p> 
        <div class="body">
            <p>Thanks for update.</p>

<p>Just wondering one thing.</p>

<p>Always we go for subclassing ? I mean in this case is only needed to set uri_delimiter to new value.</p>

<p>Also, same case on PDO MSSQL, where is needed to set protected $_pdoType = 'mssql';  to 'dblib' to work properly under *NIX based systems. So basically i need to subclass just for this very small thing. Same on Route thing...</p>

<p>So, that's a standard way to go on ZF, even if only one parameter change we need to subclass instead of just set this variable ? Subclassing a lot for just very small things if going to add a non-necessary server overhead when working with ZF apps.</p>

<p>Other approach possible, maybe some profiling or something like this...</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Michal Minicki (martel) on 2007-04-11T11:35:20.000+0000</p> 
        <div class="body">
            <blockquote>
  <p>Always we go for subclassing ? I mean in this case is only needed to set uri_delimiter to new value.</p>
</blockquote>

<p>You have to in this case, because url delimiter is used as early as in constructor. If we were to use setters, you would have to use static variables which would make impossible to use two classes with different delimiters. Not to mention subclassing would be render unusable again.</p>

        </div>
    </div>
    </div>

