<h2>ZF-772: API method name improvement: toNumberSystem() =&gt; convertNumerals()</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2007-01-19T17:48:28.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2007-07-05T14:43:40.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>0.9.3 (05/May/07)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Gavin (gavin)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Thomas Weidner (thomas)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Locale</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>The method {{toNumberSystem()}} actually converts decimal numerals from one script to another.</p>

<p>I suggest something like: {{convertNumerals($numeralsString, $fromScript, $toScript)}}</p>

<p>Thoughts? Ideas?</p>

<p>Also, the default numeral system should not be "Decimal".
The word decimal in English is ambiguous in this useage.
I suggest using "Default" or "Latin" or both.
The CLDR uses "Latin" when referring to the character set:  0,1,2,3,4,5,6,7,8,9 
However, the proper English dictionary name is "Arabic numerals" (yes I know that is confusing, so let us use "Default" and/or "Latin").</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-01-25T09:06:22.000+0000</p> 
        <div class="body">
            <p>Assign to Thomas.  Set component to Zend_Measure (educated guess).</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2007-01-26T15:07:03.000+0000</p> 
        <div class="body">
            <p>Fixed with SVN 3028 for the Branch I18N-0.8</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Gavin (gavin) on 2007-04-05T17:58:47.000+0000</p> 
        <div class="body">
            <p>I just realized that the code "Latin" was added the array instead of "Latn".  The standards use 4 letter codes, and usually use "latn" when referencing the assigned unique identifier for the Arabic numerals (0,1,2,3,4,5,6,7,8,9).  I do not object to adding "Latin" as done in the changeset shown under the FishEye link.</p>

<p>However, to support those who expect standards-compliant names, I think we should also add "latn", effectively duplicating the row of code:</p>

<pre class="highlight"><code>
    private static $_signs = array(
        'Default'=&gt;array('0', '1', '2', '3', '4', '5', '6', '7', '8', '9'), // Default == Latin
        'Latin'=&gt; array('0', '1', '2', '3', '4', '5', '6', '7', '8', '9'), // Latin == Default      
</code></pre>

<p>to become:</p>

<pre class="highlight"><code>
    private static $_signs = array(
        'Default'=&gt;array('0', '1', '2', '3', '4', '5', '6', '7', '8', '9'), // Default == Latin
        'Latin'=&gt; array('0', '1', '2', '3', '4', '5', '6', '7', '8', '9'), // Latin == Default      
        'Latn'=&gt; array('0', '1', '2', '3', '4', '5', '6', '7', '8', '9'), // Latn == Default      
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Gavin (gavin) on 2007-04-06T17:34:24.000+0000</p> 
        <div class="body">
            <p>Also, the input should have its case normalized to the same format as used for the $_signs array.</p>

<pre class="highlight"><code>
        if (!array_key_exists($from, self::$_signs)) {
            throw new Zend_Locale_Exception("script ($from) is no known script, use 'Latin' for 0-9");
        }
        if (($to !== null) and (!array_key_exists($to, self::$_signs))) {
</code></pre>

<p>becomes</p>

<pre class="highlight"><code>
        $from = ucfirst(strtolower($from));
        $to = ucfirst(strtolower($to));
        if (!array_key_exists($from, self::$_signs)) {
            throw new Zend_Locale_Exception("script ($from) is no known script, use 'Latin' for 0-9");
        }
        if (($to !== null) and (!array_key_exists($to, self::$_signs))) {
</code></pre>

<p>I added some additional tests to FormatTest.php in SVN revision 4413.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2007-04-08T15:56:46.000+0000</p> 
        <div class="body">
            <p>Fixed with SVN 4425.</p>

<p>Deleted 'Default'
Deleted 'Latin'... use new 'Latn' instead
Changed Docu and Examples</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Gavin (gavin) on 2007-04-08T16:34:06.000+0000</p> 
        <div class="body">
            <p>I think "Latin" was ok.  I think we should support both the standards' compliant "LATN" and "Latin" as a convenience for developers.  Not everyone will think of and remember "Latn" is the code for the default number script.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2007-04-08T17:49:48.000+0000</p> 
        <div class="body">
            <p>Within CLDR and the avaiable scripts there are all script definitions 4 lettered.
It would be unlogic to have only one full named english script and all others
abbreviated international ones.</p>

<p>For users there is no difference if they have the "i" or have it not ;-)
Error messages and documentations are making clear that default is "Latn".
I dont think that this is a problem.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Gavin (gavin) on 2007-04-09T12:33:12.000+0000</p> 
        <div class="body">
            <p>I see your point, but I still believe "Latin" is a reasonable, logical programmatic name for developers to use when selecting the default script with {{convertNumerals()}}.  Also, this is a very late time (very close to 1.0) for removing "Latin" from the API.</p>

<p>Perhaps we could make things more consistent by supporting <em>both</em> the 4 letter code names for the scripts, and the English words (i.e. Latin, Arabic, Bengali, Malayalam, Thai, etc.).  Then we are not deleting things from the API, but merely adding convenience aliases.  So long as there are no name collisions (I don't see any atm), this should be more convenient than forcing developers to use cryptic 4 letter codes ("latn" instead of "Latin").  In contrast, the 4 letter codes might work well when extracting them from a column in a database table.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2007-04-09T14:05:00.000+0000</p> 
        <div class="body">
            <p>But here we get problems.</p>

<p>This is a multilingual class.
Why should the full script names be supported only for english and all others use the abbreviated ones ?
Because "Latn" refers to "Latein" within german for example. And we can not support all 126 languages within our constants for all known 47 scripts.</p>

<p>For details about script see the cldr file 'en.xml' or 'de.xml' part  for example.</p>

<p>When someone wants the complete name he has to use "getTranslation()" from Zend_Locale for a detail descripted translation from the abbreviated names.
When having the long names this would not work anymore.</p>

<p>I did not find any "Latin" script within any CLDR File. This was a false information by creation of this issue. ;-)
I think we should stay consistent with CLDR. Because we speak about one "i" of a function which is for now only used within Zend_Currency and the function is for now regulary unknown to users.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Gavin (gavin) on 2007-04-10T17:13:40.000+0000</p> 
        <div class="body">
            <p>The reason for supporting programmer-friendly names in English is the same reason that the option names for Zend_Date, Zend_Session, Zend_Console, and many more are all in English.</p>

<p>I did not propose removing the 4 letter abbreviated codes, but merely adding back "Latin" and then I also suggested <em>adding</em> programmer-friendly names for use with {{convertNumerals()}}.</p>

<p>{quote}did not find any "Latin" script within any CLDR File. This was a false information by creation of this issue. {quote}</p>

<p>Look under [en] ;) .. let us stay consistent with the CLDR:
<a href="http://unicode.org/cldr/data/diff/supplemental/languages_and_scripts.html?sortby=date">http://unicode.org/cldr/data/â€¦</a></p>

<p>Why did they write this web page in English?  .. for the same reasons the ZF uses English for its option names, method names, and class names, and the same reasons we should offer "Latin" in addition to "Latn" as a programmer-friendly name for this script (0,1,2,3,4,5,6,7,8,9).</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2007-04-11T05:54:56.000+0000</p> 
        <div class="body">
            <p>But the actual implementation is consistent to CLDR.</p>

<p>Within CLDR the scripts are defined ONLY with 4 letters.
There are no other definitions than 4 letter scripts... I reviewed all 126 languages.
There is also an additional supplementationMetaTag file where you can search for all scripts when you download the CLDR itself.
Also there you can find ONLY 4 lettered definitions.</p>

<p>Your "Latin" is the translation of the script "Latn" for the english language, it's not the script... only the translation.</p>

<p>Having translated definitions integrated as constants is inconstistent.</p>

<p>Documentation and exception messages are making clear that "Latn" is the default value.
Instead of adding inconsistent constants it would be better to have 
eighter $from allowed to be null so default Latn is used (this was already implemented and erased for "tool-friendlyness" ?)
or/and allow the user to give a locale to accept all translated script names for the function.</p>

<p>Anyway... I think we are shooting here with cannons at sparrows.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Gavin (gavin) on 2007-04-11T14:06:43.000+0000</p> 
        <div class="body">
            <p>It is not inconsistent to use English words as programmer-friendly names to refer to values and options.  This is done throughout the ZF.  Should Zend_Date's constants be replaced with cryptic 4 letter codewords, instead of English words?  Please see the examples and reasons given above.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2007-04-11T15:30:49.000+0000</p> 
        <div class="body">
            <p>Within supplementalData we have:</p>

<pre class="highlight"><code>
</code></pre>

<p>.... only 4 digit definition scripts</p>

<p>Looking at "zh" for example the scripts are defined like this</p>

<pre class="highlight"><code>
</code></pre>

<p>there is no Latin</p>

<p>"de" defines this</p>

<pre class="highlight"><code>
</code></pre>

<p>and also here no Latin defined.
Only within one single locale there is "Latin" defined as translation string for the script "Latn"... within en.</p>

<p>Also for all locales for example we are using the international defined abbreviations and not the english translation...
We have always "en" and not "english" for the locale.</p>

<p>The supplementalMetaData where all scripts are defined does not know a "latin" script.
The supplementalData where the language to script relation is defined does also not know a "latin" script.</p>

<p>And wherever we support scripts like within "getTranslation()" we are not able to give response to a "Latin" script... getTranslation('Latin', 'script');  throws an exception.</p>

<p>This is what leads to inconsistency.
The scripts are no self defined constants... they are defined within CLDR. And I would not want to add things which are not defined within CLDR because we use this data not only within this function.
We just had to add constants to be able to convert the numbers between scripts because until not CLDR is not able to give the related data. But this could also change in the future to be consistent to the CLDR.</p>

<p>I hope this makes the reson for my "no" a little bit clearer.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Gavin (gavin) on 2007-04-11T16:02:05.000+0000</p> 
        <div class="body">
            <p>{quote}Only within one single locale there is "Latin" defined as translation string for the script "Latn"... within en.{quote}</p>

<p>There are <em>many</em> cases where a translation does not exist for a script (Try {{print_r( Zend_Locale_Data::getContent('en', 'scriptlist') );}} and {{print_r( Zend_Locale_Data::getContent('fr', 'scriptlist') );}}).  "Latin" is not unique in this respect.  This issue is not relevant to supporting programmer-friendly names in English within the ZF.  We should discuss the issue of missing translations for scripts in a different issue to avoid confusion in this issue.</p>

<p>The univeral word used by the Unicode team to refer to the digits 0,1,2,3,4,5,6,7,8,9 is "Latin" with the 4 letter code of "Latn", as mentioned previously: <a href="http://unicode.org/cldr/data/diff/supplemental/languages_and_scripts.html?sortby=date">http://unicode.org/cldr/data/â€¦</a></p>

<p>{quote}Looking at "zh" for example the scripts are defined like this ... and also here no Latin defined.{quote}</p>

<p>Yes, but that is not the point.  "Latn" <em>is</em> defined as a script in zh.xml.   So .. Chinese users must currently use the <em>abbreviated English word</em> that is "Latn".  I am suggesting that we remain consistent with the rest of the ZF, and support more programmer-friendly words for accessing this functionality. I make this suggestion for the same reasons that we avoid cryptically short variable names in our code, but use programmer-friendly identifiers, constant names, and function names.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Gavin (gavin) on 2007-04-12T15:06:24.000+0000</p> 
        <div class="body">
            <p>I added an example convenience function in the docu showing developers how to obtain the 4 letter script codes using their native-language names.  The documentation example and helpful messages in exceptions thrown by Zend_Locale_Format are a good compromise, because the feature is now readily available to those who need it.</p>

        </div>
    </div>
    </div>

