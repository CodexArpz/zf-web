<h2>ZF-10417: Better standardization of services management classes</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>New Feature</dd>

    <dt>Created:</dt>
    <dd>2010-09-03T17:06:30.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2010-09-04T07:04:25.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Henry Galvez (alograg)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Matthew Weier O'Phinney (matthew)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Amf</li>
            <li>Zend_Json_Server</li>
            <li>Zend_Rest_Server</li>
            <li>Zend_Soap_Server</li>
            <li>Zend_XmlRpc_Server</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>I recommend a standardization Zend_Server_Interface to share common methods and properties.
For example:
ACL (set / get)
addDirectory
Auth (set / get)
autoEmitResponse
Data conversion
Loader
Request (set / get)
Session (set / get)
WSDL/AutoDiscover/Table of classes and methods available</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2010-09-04T07:04:08.000+0000</p> 
        <div class="body">
            <p>This is a really, really vague recommendation. Some items you suggest are highly contextual and cannot be shared between service types -- WSDL, for instance, is specific to Soap. Others likely should not be pushed into the Server classes at all (e.g., ACLs).</p>

<p>Other items are planned: Currently, the XmlRpc and Json servers both extend from a common base class, and utilize Zend_Server_Definition to store the table of class/method pairs available. We plan to extend this to both the AMF and Soap servers as well -- particularly because this will allow us to create more fine-grained definitions (e.g., selectively choosing what methods from selected classes to import and handle), as well as standardize the creation of definitions (you could attach the same definition tables to any of the servers). Authentication and sessions will likely also be something we will handle at the server level, as this provides an easy way to inject authenticated identities into the service objects attached to the server -- which then allows them to handle ACLs.</p>

<p>I'm going to close this issue as "needs proposal". If you have concrete ideas you wish to put forward, I suggest creating a proposal and/or discussing the ideas in the #zftalk.dev IRC channel on Freenode or on the zf-contributors mailing list.</p>

        </div>
    </div>
    </div>

