<h2>ZF-8038: Zend_Filter_LocalizedToNormalized performs in a non-intuitive way</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2009-10-09T02:27:14.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-10-09T05:36:55.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.9.4 (13/Oct/09)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Ian Lewis (electricowl)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Thomas Weidner (thomas)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Filter</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Zend_Filter_LocalizedToNormalized does not behave in an intuitive manner.</p>

<p>Example 1
When passing in a value such as 23,555.0 the value returned is 23555.0 which is acceptable.</p>

<h2>Expected</h2>

<p>Commas are stripped out</p>

<p>Example 2
When passing in a malformed numeric value from a form such as 23.05.1 the class returns a date.</p>

<h2>Expected:</h2>

<p>i) Return value should be 23.05 with extra characters removed.</p>

<p>ii) Alternatively the class should be configurable to return a value with all but the first decimal point removed. 23.051</p>

<h1>Conclusion</h1>

<p>The fact that the class returns unexpected data makes it unsafe to use when validating Numeric or Date data.</p>

<p>The class should either be removed from the framework or redesigned to remove the inherently confused design issues.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2009-10-09T02:43:55.000+0000</p> 
        <div class="body">
            <p>When you need to validate numbers or dates then use Validators.
Filters are not Validators, and they should not  be used with unvalidated content.</p>

<p>When you give a localized value to this filter then it will be normalized.
And when the value is detected as localized date, then you will get a normalized date in return.</p>

<p>Use Zend_Validate_Float/Int/Digits to get sure if the value is a number.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ian Lewis (electricowl) on 2009-10-09T03:03:33.000+0000</p> 
        <div class="body">
            <p>The response misses the point completely.</p>

<p>No attempt was made to use the class as a validator - it is supposed to be a Filter.</p>

<p>The Zend Filters make modifications to the data and the modifications occur Before Validation.</p>

<p>If a value is normalized it should be passed in as a number and returned as a number. This class looks at the format of the data passed in and then makes some assumptions based on that structure.</p>

<p>This means that the user will receive an unexpected response when passing in numeric data from a form that has to be filtered.</p>

<p>The data is not being normalised it is being interpreted, modified and cast to a different form. This is wrong and it is a bug.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Richard Turner (rjt_zygous) on 2009-10-09T03:25:10.000+0000</p> 
        <div class="body">
            <p>"Filters are not Validators, and they should not be used with unvalidated content."</p>

<p>Actually, they definitely should be used on unvalidated content:</p>

<p>From the ZF Docs site (<a href="http://framework.zend.com/manual/en/zend.form.elements.html#zend.form.elements.filters">http://framework.zend.com/manual/en/â€¦</a>):
    It's often useful and/or necessary to perform some normalization on input prior to validation ... [and] run your validations on what remains to ensure the submission is valid. ... These operations may be performed using Zend_Filter.</p>

<p>One of the major uses of Zend_Filter is to filter-out unwanted stuff, like commas in numbers, before validation. Zend_Validate_Digits will fail if there's a comma in the number, which is why one should run the number through a Zend_Filter first.</p>

<p>There's no way a filter should return a Zend_Date, or any other complex object - it should return what it's given with some stuff stripped-out, that's all.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2009-10-09T04:23:10.000+0000</p> 
        <div class="body">
            <p>{quote}
One of the major uses of Zend_Filter is to filter-out unwanted stuff, like commas in numbers, before validation.
{quote}</p>

<p>Exactly this is done.
But filters do not only "Filter out"... they can also be used to filter content in a way where you apply somthing and it is changed according to specified rules. And this is done within Zend_Filter_LocalizedToNormalized. An algorithm is processed which changes the content.</p>

<p>See for example the Compress filters... nothing is filtered out, but a defined algorithm is processed on the content.</p>

<p>Btw: Zend_Filter does not return Zend_Date or any objects. Please inform yourself before throwing out conclusions on issues which other persons have filled.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2009-10-09T04:30:26.000+0000</p> 
        <div class="body">
            <p>And regarding false input and validation.</p>

<p>When the above noted false input is filtered it will return a normalized date because of the 2 "." seperators.
When you would process a validation on Digits or Int or Float then the value would not pass validation.</p>

<p>So even if validation is done afterwards, all would work as expected, because the false input will not pass as number. It is returned as normalized date and not as normalized number... so the behaviour is correct when validation would have been applied.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ian Lewis (electricowl) on 2009-10-09T04:37:19.000+0000</p> 
        <div class="body">
            <p>
Zend_Filter does not return Zend_Date or any objects
</p>

<p>No it returns an array which is just as bad. The input data is a string from a form which is then 'interpreted' and depending on the results of this it the returns either a number or an array containing date information.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ian Lewis (electricowl) on 2009-10-09T05:36:49.000+0000</p> 
        <div class="body">
            <h2>Case</h2>

<p>This is an input for a numeric field
We'll ignore the fact that  'precision =&gt; 2' effectively hints that the value will be a number.</p>

<p>$oColourInput = new Zend_Form_Element_Text($sColourRateName, array(
    'decorators' =&gt; $this-&gt;aDecoratorsElementInlineNoLabel,
        'filters'    =&gt; array(
             new Zend_Filter_LocalizedToNormalized(array('precision' =&gt; 2))
         ),
         'validators' =&gt; array(new Zend_Validate_Float())
    )
 );</p>

<p>
When the above noted false input is filtered it will return a normalized date because of the 2 "." seperators.
When you would process a validation on Digits or Int or Float then the value would not pass validation.
</p>

<p>Effectively you are suggesting a workaround here because validation will fail because the Digits/Int/Float classes will fail when passed an array.</p>

<p>In the long run it would be far better to have separate classes for normalising inputs from number or date fields. It is extremely disconcerting to have input of one type 'automagically' converted to another.</p>

<p>Re. Please inform yourself before throwing out conclusions on issues which other persons have filled.
Personally I welcome comments from anyone with programming knowhow and experience</p>

        </div>
    </div>
    </div>

