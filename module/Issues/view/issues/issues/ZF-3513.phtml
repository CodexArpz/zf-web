<h2>ZF-3513: The &quot;remove&quot; family of methods in Zend_Form et al should not return Boolean</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2008-06-25T14:23:42.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2008-09-02T10:39:16.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.6.0 (02/Sep/08)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                David Rogers (al_the_x)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Matthew Weier O'Phinney (matthew)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Form</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-3572">ZF-3572</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
        <li><a href="/issues/secure/attachment/11346/Form.php">Form.php</a></li>
            <li><a href="/issues/secure/attachment/11347/form.php.ZF-3513.diff">form.php.ZF-3513.diff</a></li>
        </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>The "remove" method family (Zend_Form::removeElement(), Zend_Form_DisplayGroup::removeDecorator(), Zend_Form_Element::removeValidator(), etc) should not return a Boolean but an Object. Either these methods should return the Object they remove or the Object on which the method is called, which is fairly standard behavior for pushing and popping Stack Objects. In languages where garbage collection is an issue, the Stack returns the object popped, so that it can be explicitly destroyed. In a language such as PHP where garbage collection isn't as much of an issue, the Stack should return itself, to allow additional method chaining on itself.</p>

<p>In the case of Zend_Form, this latter approach would be invaluable, as a developer could then perform an action such as:</p>

<pre class="highlight"><code>
$Form = new Zend_Form;
$Form-&gt;removeDecorator('FormElements')-&gt;addDecorator('Fieldset')-&gt;addDecorator('FormElements');
echo $Form;
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Stephen Crosby (stevecrozz) on 2008-06-26T14:21:57.000+0000</p> 
        <div class="body">
            <p>Try Zend_Form::removeElement() after applying this patch. It returns the Zend_Form object, but throws an exception if you tried to remove an element that doesn't exist.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Stephen Crosby (stevecrozz) on 2008-06-26T14:24:41.000+0000</p> 
        <div class="body">
            <p>I meant to attach this diff rather than the whole class file.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by David Rogers (al_the_x) on 2008-06-28T07:56:59.000+0000</p> 
        <div class="body">
            <p>That appears to do the job, although you may want to handle the Exception message differently, ie:</p>

<p>[code]
        throw new Zend_Form_Exception('Only form elements and groups may be overloaded; variable of type "' . $type . '" provided');
[code]</p>

<p>Or, alternately:</p>

<p>[code]
        throw new Zend_Form_Exception(sprintf('%s cannot remove nonexistent element: %s', getclass($this), $name));
[code]</p>

<p>This produces more portable code, IMO. Good job, though! Are we regular users permitted to submit patches? I know there's an official process for submitting new components and an agreement to sign, etc. Does the same process apply for patches?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2008-07-03T13:01:14.000+0000</p> 
        <div class="body">
            <p>Scheduling for next minor release</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2008-07-03T13:04:33.000+0000</p> 
        <div class="body">
            <p>depends on refactoring for lazy loading (not entirely, but that's a good time to do it)</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2008-07-03T13:11:23.000+0000</p> 
        <div class="body">
            <p>Fixed in r9919</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-09-02T10:39:16.000+0000</p> 
        <div class="body">
            <p>Updating for the 1.6.0 release.</p>

        </div>
    </div>
    </div>

