<h2>ZF-2166: findIterator($query) function to complement index-&gt;find($query)</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2007-11-08T05:44:06.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-08-31T09:02:48.000+0000</dd>

    <dt>Status:</dt>
    <dd>Open</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Alexander Veremyev (alexander)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Search_Lucene</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>If find() finds a lot of results, memory-usage can be enormous. If I still <em>need</em> all of the results, I cannot use setResultSetLimit. It would be great if a complementary function to find() returned an iterator, which would keep memory-consumption down if I don't need the results afterwards (and don't need them sorted either).</p>

<p>use case: 
I have different types of documents in the same index, each with a keyword field named doctype. Now I want to delete all documents of a specific doctype.</p>

<p>The following code implements this but can take a huge amount of memory depending on the number of hits</p>

<pre class="highlight"><code>
$query = Zend_Search_Lucene_Search_QueryParser::parse('doctype:books');
$hits = $searchindex-&gt;find($query);
foreach($hits as $hit) {
    $searchindex-&gt;delete($hit-&gt;id);
}
</code></pre>

<p>What I would like to see is similar code but without the memory hit</p>

<pre class="highlight"><code>
$query = Zend_Search_Lucene_Search_QueryParser::parse('doctype:books');
$hits = $searchindex-&gt;findIterator($query);
foreach($hits as $hit) {
    $searchindex-&gt;delete($hit-&gt;id);
}
</code></pre>

<p>There are some possible workarounds I can think of, neither of which works great.</p>

<ul><li><p>Loop through all documents using index-&gt;numDocs and index-&gt;getDocument, and test for doctype myself. For more complex queries this would not work as well, because you are recreating the find() functionality in your own loop. Plus, it takes a lot of time to retrieve each document and test it, lots more than the find() takes.</p></li>
<li><p>Use separate indexes for doctypes so you can just delete an entire index, but the point is to use a single search for all doctypes, and also, this won't work for more complex queries</p></li>
</ul>
    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Marc Boeren (mc) on 2007-11-08T06:10:36.000+0000</p> 
        <div class="body">
            <p>I've found a workable workaround for this particular test, but for more complex queries this would be cumbersome.</p>

<p>The following works using low memory and acceptable time:</p>

<pre class="highlight"><code>
$term = new Zend_Search_Lucene_Index_Term('books', 'doctype');
$docids = $searchindex-&gt;termDocs($term);
foreach($docids as $docid) {
    $searchindex-&gt;delete($hit-&gt;id);
}
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-03-25T20:31:42.000+0000</p> 
        <div class="body">
            <p>Please categorize/fix as needed.</p>

        </div>
    </div>
    </div>

