<h2>ZF-10488: Unable to set additional backend options to Zend_Db_Table MetadataCache</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2010-09-22T19:20:07.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2010-09-26T11:39:51.000+0000</dd>

    <dt>Status:</dt>
    <dd>Closed</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                jsnod (afx114)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Alexander Veremyev (alexander)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Cache</li>
            <li>Zend_Db</li>
            <li>Zend_Db_Table</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>I am unable to set additional backend options to Zend_Db_Table MetadataCache.</p>

<p>I tried passing in the cache_file_umask param like so:</p>

<pre class="literal">
$frontendOptions = array(
   'automatic_serialization'  =&gt; true,
   'lifetime'                 =&gt; 86400,  
);
$backendOptions  = array(
   'cache_dir'         =&gt; APPLICATION_ROOT . '/data/cache',
   'cache_file_umask'  =&gt; 0666
);
$cache = Zend_Cache::factory('Core', 'File', $frontendOptions, $backendOptions);
Zend_Db_Table_Abstract::setDefaultMetadataCache($cache);
</pre>

<p>But then the metadatacache would not work.</p>

<p>An example of where this would be userful is when both a cron (run as a system user) and regular web requests from Apache have to read/write to the same cache files.</p>

<p>If the cron creates the cachefiles, the Apache process is unable to read/write to them.  The opposite is also true if Apache created the metadatacache files first -- the cron will be unable to read/write the cache files.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Ralph Schindler (ralph) on 2010-09-23T06:36:45.000+0000</p> 
        <div class="body">
            <p>From the report, I am not sure I understand how this is related to Zend_Db_Table.  Can you please elaborate on how this problem is manifested only in situations where Zend_Db_Table is in use?</p>

<p>-ralph</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by jsnod (afx114) on 2010-09-23T09:03:51.000+0000</p> 
        <div class="body">
            <p>Sure, take a look at example #32 here: <a href="http://framework.zend.com/manual/en/zend.db.table.html#zend.db.table.metadata.caching">http://framework.zend.com/manual/en/…</a></p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Benoît Durand (intiilapa) on 2010-09-23T10:37:33.000+0000</p> 
        <div class="body">
            <p>Ralph wants to say that there is no relation with Zend_Db_Table. This is due to a bug in the File backend or the configuration of your system.</p>

<p>I think it's a conflict between two users of the permissions system. Your <em>safe_mode</em> directive is on or off?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by jsnod (afx114) on 2010-09-23T10:42:52.000+0000</p> 
        <div class="body">
            <p>safe_mode is Off.  The regular cache works fine.  It is only the MetadataCache that does not accept any backend options other than cache_dir.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Benoît Durand (intiilapa) on 2010-09-23T10:45:26.000+0000</p> 
        <div class="body">
            <p>Can you show the permissions of the cache files created for metadata?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by jsnod (afx114) on 2010-09-23T11:51:17.000+0000</p> 
        <div class="body">
            <p>Here are a few files from the list:</p>

<pre class="literal">
-rw-------  1 apache  apache   669 Sep 22 18:16 zend_cache---eca1091f12f77c77858eef5a4684b979
-rw-------  1 apache  apache   982 Sep 23 09:48 zend_cache---f6f0f4e4e1b86a6e35427bfd7ee128ce
-rw-------  1 apache  apache    98 Sep 22 18:16 zend_cache---internal-metadatas---1683d48add005d58009f47911b42a3e0
-rw-------  1 apache  apache    98 Sep 22 18:16 zend_cache---internal-metadatas---23a9806dc89c4147cbc66f2d331b1b87
-rw-------  1 apache  apache    98 Sep 22 18:17 zend_cache---internal-metadatas---4391ff602d862cefa2695c3edde37dbd
</pre>

<p>As you can see they are owned by the apache user, so if I try to execute a cron as a shell user, the scripts don't have access to read/write.  That is why I would like to be able to pass in the <em>cache_file_umask</em> backend option so they can be created as 0666 files.</p>

<p>Again, I do not believe it is a problem with my system configuration because the regular cache works fine.  I am able to pass in a <em>cache_file_umask</em> option into the cache backend so that the files get the proper permissions:</p>

<pre class="literal">
-rw-rw-rw- 1 apache apache 710 Sep 23 09:46 zend_cache---MyKey_569713589
-rw-rw-rw- 1 apache apache 132 Sep 23 09:46 zend_cache---internal-metadatas---MyKey_569713589
</pre>

<p>However, if I pass in <em>cache_file_umask</em> as a backend option to MetadataCache, the MetadataCache fails (does not get written).  This is the bug I am reporting.</p>

<p>To reproduce, simply use the code posted in the bug description.  If you pass in a <em>cache_file_umask</em> the MetadataCache will not be written.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Benoît Durand (intiilapa) on 2010-09-23T22:08:24.000+0000</p> 
        <div class="body">
            <p>I reproduce your issue in a script :</p>

<pre class="highlight"><code>
require_once 'Zend/Loader/Autoloader.php';
Zend_Loader_Autoloader::getInstance();

$frontendOptions = array(
   'automatic_serialization'  =&gt; true,
   'lifetime'                 =&gt; 86400,  
);
$backendOptions  = array(
   'cache_dir'         =&gt; dirname(__FILE__),
   'cache_file_umask'  =&gt; 0666
);
$cache = Zend_Cache::factory('Core', 'File', $frontendOptions, $backendOptions);
$cache-&gt;save(array('test' =&gt; 'content'), 'sample');

$db = Zend_Db::factory('PDO_SQLITE', array(
    'dbname' =&gt; ':memory:'
));
$db-&gt;query('CREATE TABLE `zf10488` (`id` INT NOT NULL, PRIMARY KEY(`id`));');
Zend_Db_Table::setDefaultAdapter($db);
Zend_Db_Table::setDefaultMetadataCache($cache);

$dbTable = new Zend_Db_Table(array(Zend_Db_Table::NAME =&gt; 'zf10488'));
var_dump($dbTable-&gt;info(Zend_Db_Table::METADATA));
</code></pre>

<pre class="highlight"><code>
$ php zf-10488.php
$ ls -l 
-rw-r--r--     1 daemon  daemon  797 Sep 24 06:42 zf-10488.php
-rw-rw-rw-     1 daemon  daemon  325 Sep 24 06:42 zend_cache---f17f4f9e7c8e73320cef3a028414ba84
-rw-rw-rw-     1 daemon  daemon   98 Sep 24 06:42 zend_cache---internal-metadatas---f17f4f9e7c8e73320cef3a028414ba84
-rw-rw-rw-     1 daemon  daemon   98 Sep 24 06:42 zend_cache---internal-metadatas---sample
-rw-rw-rw-     1 daemon  daemon   31 Sep 24 06:42 zend_cache---sample
</code></pre>

<p>The metadata use the same instance of Zend_Cache_Backend_File, and the same save method. It seems absurd to have this error that appears just for a table metadatas. Look at the code used:</p>

<pre class="highlight"><code>
825            if (null !== $this-&gt;_metadataCache &amp;&amp; !$this-&gt;_metadataCache-&gt;save($metadata, $cacheId)) {
</code></pre>

<pre class="highlight"><code>
390            $result = $this-&gt;_backend-&gt;save($data, $id, $tags, $specificLifetime);
</code></pre>

<pre class="highlight"><code>
249        $res = $this-&gt;_filePutContents($file, $data);
</code></pre>

<pre class="highlight"><code>
990        @chmod($file, $this-&gt;_options['cache_file_umask']);
</code></pre>

<p>Try to find why <em>chmod</em> does not work with the <em>umask 0666</em> in your case. I do not see how we can help. You can edit <em>Zend/Cache/Backend/File.php</em> in order to delete the character <em>@</em>.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by jsnod (afx114) on 2010-09-24T12:22:37.000+0000</p> 
        <div class="body">
            <p>My apologies, <em>cache_file_umask</em> as a backend option works.  But <em>hashed_directory_level</em> does not.  It works fine with regular cache, but not table metadata cache.  Can you re-try your testcase above, but with the following options?</p>

<pre class="highlight"><code>
$backendOptions  = array(
   'cache_dir'             =&gt; dirname(__FILE__),
   'cache_file_umask'      =&gt; 0666,
   'hashed_directory_level =&gt; 2
);
</code></pre>

<p>It looks like all table metadatata cache files get put into the root of the specified cache_dir by default.  So perhaps hashed_directory_level is irrelevant here.  But if so, should it not throw an error, or at least be ignored?  Passing it in as a backend option breaks table metadata caching with no warning.  I wrapped everything around a try/catch block but didn't catch any exceptions.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Benoît Durand (intiilapa) on 2010-09-25T23:42:51.000+0000</p> 
        <div class="body">
            <p>This is not an issue. Your configuration is wrong: look at the default value of the option <em>hashed_directory_umask</em> (0700).</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by jsnod (afx114) on 2010-09-26T11:39:48.000+0000</p> 
        <div class="body">
            <p>Ok, but I'm curious -- why does passing in the <em>hashed_directory_level</em> option break the table metadata cache?  Should I open another bug regarding the usage of <em>hashed_directory_level</em> on table metadata cache?  If it's not a valid option, ZF should throw an exception.  If an exception had been thrown I probably wouldn't have filed this bug and wasted everybody's time.</p>

        </div>
    </div>
    </div>

