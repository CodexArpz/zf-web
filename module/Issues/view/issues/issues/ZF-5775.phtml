<h2>ZF-5775: Zend_Db_Table-&gt;find() returns all rows when passed empty array</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2009-02-13T04:49:29.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-08-25T16:12:21.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.9.3 (22/Sep/09)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Mark (lightflowmark)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Ralph Schindler (ralph)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Db_Table</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Not sure if this is a bug or a feature; it certainly contradicts the documentation which states:
"If you specify multiple values in an array, the method returns at most as many rows as the number of distinct values you specify. "</p>

<p>Suggested fix, if this is not desired behaviour (it's certainly counter-intuitive), is to create &amp; return an empty rowset of the correct class if there are no items in the whereList:</p>

<pre class="highlight"><code>
 &lt;?php
      public function find()
    {
        $this-&gt;_setupPrimaryKey();
        $args = func_get_args();
        $keyNames = array_values((array) $this-&gt;_primary);

        if (count($args) &lt; count($keyNames)) {
            require_once 'Zend/Db/Table/Exception.php';
            throw new Zend_Db_Table_Exception("Too few columns for the primary key");
        }

        if (count($args) &gt; count($keyNames)) {
            require_once 'Zend/Db/Table/Exception.php';
            throw new Zend_Db_Table_Exception("Too many columns for the primary key");
        }

        $whereList = array();
        $numberTerms = 0;
        foreach ($args as $keyPosition =&gt; $keyValues) {
            // Coerce the values to an array.
            // Don't simply typecast to array, because the values
            // might be Zend_Db_Expr objects.
            if (!is_array($keyValues)) {
                $keyValues = array($keyValues);
            }
            if ($numberTerms == 0) {
                $numberTerms = count($keyValues);
            } else if (count($keyValues) != $numberTerms) {
                require_once 'Zend/Db/Table/Exception.php';
                throw new Zend_Db_Table_Exception("Missing value(s) for the primary key");
            }
            for ($i = 0; $i &lt; count($keyValues); ++$i) {
                if (!isset($whereList[$i])) {
                    $whereList[$i] = array();
                }
                $whereList[$i][$keyPosition] = $keyValues[$i];
            }
        }

        $whereClause = null;
        if (count($whereList)) {
            $whereOrTerms = array();
            foreach ($whereList as $keyValueSets) {
                $whereAndTerms = array();
                foreach ($keyValueSets as $keyPosition =&gt; $keyValue) {
                    $type = $this-&gt;_metadata[$keyNames[$keyPosition]]['DATA_TYPE'];
                    $tableName = $this-&gt;_db-&gt;quoteTableAs($this-&gt;_name, null, true);
                    $columnName = $this-&gt;_db-&gt;quoteIdentifier($keyNames[$keyPosition], true);
                    $whereAndTerms[] = $this-&gt;_db-&gt;quoteInto(
                        $tableName . '.' . $columnName . ' = ?',
                        $keyValue, $type);
                }
                $whereOrTerms[] = '(' . implode(' AND ', $whereAndTerms) . ')';
            }
            $whereClause = '(' . implode(' OR ', $whereOrTerms) . ')';
            return $this-&gt;fetchAll($whereClause);
        }
        else
        {
          $data  = array(
              'table'    =&gt; $this,
              'readOnly' =&gt; $select-&gt;isReadOnly(),
              'rowClass' =&gt; $this-&gt;_rowClass,
              'stored'   =&gt; true
                );

          @Zend_Loader::loadClass($this-&gt;_rowsetClass);
          return new $this-&gt;_rowsetClass($data);
        }
        
    }
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Mark (lightflowmark) on 2009-07-27T10:21:51.000+0000</p> 
        <div class="body">
            <p>I'm happy to put together a patch &amp; test for this issue, if I get some guidance as to whether it's a feature or a bug.</p>

<p>Let me know if there's another place I should be asking this kind of question.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ralph Schindler (ralph) on 2009-08-25T16:12:21.000+0000</p> 
        <div class="body">
            <p>Fixed in trunk in r17817, merged to branch release 1.9 in 17818</p>

        </div>
    </div>
    </div>

