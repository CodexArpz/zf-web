<h2>ZF-197: Zend_Db_Select: new method reset()</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2006-07-06T09:08:22.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2008-03-25T06:00:03.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>0.8.0 (21/Feb/07)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Georg von der Howen (ghowen)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Bill Karwin (bkarwin)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Db_Select</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-817">ZF-817</a></li>
            <li><a href="/issues/browse/ZF-2963">ZF-2963</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>It can be useful to be able to reset just a part of a select object instead of creating a new one.</p>

<p>For example I construct a select, run the query and get no results. I then want to run the same query again with just a slight modification of the WHERE clause.
Currently I have to construct a new select object because there are no ways of resetting a part of the select.</p>

<p>It could be done this way:</p>

<pre class="literal">

     /**
     * Resets a part of the SELECT statement to null, so you can set it again without creating a new Select object
     *
     * @param string $part The part to reset (e.g. 'where', 'limit', etc.)
     * @return true on success, otherwise false
     */
    
    public function resetPart($part) 
    {
        // find part in private $_parts array
        if(in_array($part, $this-&gt;_parts)) {
            
            // reset it
            $this-&gt;_parts[$part] = null;
            
            return true;
            
        } else {
            
            // part not found, so return false
            return false;
            
        }
    }

</pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Christian Münch (cmuench) on 2006-07-10T12:03:05.000+0000</p> 
        <div class="body">
            <p>I also think that the parts must be accessible. Zend_Db_Select should offer some setter or getter methods to change i.e. the columns.
We want to create a DB pager class with Zend_Db_Select. In the pager class the limitPage Method is very usefull, but we need to reset some parts.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Gavin (gavin) on 2006-10-24T16:22:30.000+0000</p> 
        <div class="body">
            <p>The solution for ZF-1 will provide a large portion of the solution to this problem.  In order to properly submit ZF "where" clauses and other data collected programmatically through an OO interface to a DB driver in a format suitable for prepared queries (if supported by that driver), all parts of the SQL query need to be kept separated, instead of combined into a string.  If the parts collected via the programmatic interface are stored individually, the parts can then be quoted correctly (e.g. quoting for column names is not always the same for other identifiers, depending on the DB).  Additional API methods could then be added to get and set the parts of the query.</p>

<p>Creating a programmatic interface that offers the above features without becoming more difficult than using raw SQL with PHP's PDO object will not be a simple task.  Contact the ZF DB Project Team, if you would like to help!</p>

<p><a href="http://framework.zend.com/wiki/display/ZFDEV/DB+Team">http://framework.zend.com/wiki/display/…</a></p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2006-11-13T15:22:38.000+0000</p> 
        <div class="body">
            <p>Changing fix version to 0.8.0.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-01-05T17:02:21.000+0000</p> 
        <div class="body">
            <p>Recategorize in Zend_Db_Select component.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Shekar Reddy (zendfw) on 2007-01-29T04:28:20.000+0000</p> 
        <div class="body">
            <p>I guess the following would be more ideal as it resets a specific part or the entire parts array optionally:</p>

<p>[code]
/**
     * Resets a part of the SELECT statement to null, so you can set it again without creating a new Select object
     *
     * @param string $part The part to reset (e.g. 'where', 'limit', etc.)
     * @return true on success, otherwise false
     */</p>

<pre><code>public function reset( $part = '' ) 
{
    // find part in private $_parts array
    if( ! $part )

        // No part specified; reset entire parts array
        $this-&gt;_parts = array();

    } elseif ( in_array($part, $this-&gt;_parts)) {

        // reset specific part
        $this-&gt;_parts[$part] = null;

    }
}
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Shekar Reddy (zendfw) on 2007-01-29T04:46:35.000+0000</p> 
        <div class="body">
            <p>Applied the right code tags:</p>

<p>I guess the following would be more ideal as it resets a specific part or the entire parts array optionally:</p>

<p>```
/**
     * Resets a part of the SELECT statement to null, so you can set it again without creating a new Select object
     *
     * @param string $part The part to reset (e.g. 'where', 'limit', etc.)
     * @return true on success, otherwise false
     */</p>

<pre><code>public function reset( $part = '' ) 
{
    // find part in private $_parts array
    if( ! $part )

        // No part specified; reset entire parts array
        $this-&gt;_parts = array();

    } elseif ( in_array($part, $this-&gt;_parts)) {

        // reset specific part
        $this-&gt;_parts[$part] = null;

    }
}
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-02-08T20:43:17.000+0000</p> 
        <div class="body">
            <p>Fixed in revision 3320.</p>

<p>New method {{reset()}} clears all parts internal to the Select object.
With a parameter, it clears one individual part.  For example:</p>

<pre class="highlight"><code>
$select-&gt;reset('where');
</code></pre>

<p>There are also constants defined to make it easier to name the parts.  For example:</p>

<pre class="highlight"><code>
$select-&gt;reset( Zend_Db_Select::WHERE );
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-02-08T20:44:39.000+0000</p> 
        <div class="body">
            <p>Change summary wording.</p>

        </div>
    </div>
    </div>

