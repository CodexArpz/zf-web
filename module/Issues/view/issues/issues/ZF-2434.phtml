<h2>ZF-2434: Zend_Controller_Request should have a clean interface</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2008-01-15T04:55:56.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-11-20T20:53:36.000+0000</dd>

    <dt>Status:</dt>
    <dd>Closed</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>Next Major Release ()</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Michal Minicki (martel)
            </dd>

    <dt>Assignee:</dt>
    <dd>
        None
                    </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Controller</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Zend_Controller_Request should have a clean and well defined interface to allow for switching to user created (possibly lightweight) request objects. All below framework classes should use an interface instead of an abstract class:</p>

<ul><li><p>Zend/View/Helper/Action.php</p></li>
<li><p>Zend/Layout/Controller/Plugin/Layout.php</p></li>
<li><p>Zend/Controller/Action.php</p></li>
<li><p>Zend/Controller/Plugin/ErrorHandler.php</p></li>
<li>Zend/Controller/Plugin/Broker.php</li>
<li>Zend/Controller/Plugin/ActionStack.php</li>
<li><p>Zend/Controller/Plugin/Abstract.php</p></li>
<li><p>Zend/Controller/Router/Route/Module.php</p></li>
<li>Zend/Controller/Router/Rewrite.php</li>
<li><p>Zend/Controller/Router/Interface.php</p></li>
<li><p>Zend/Controller/Request/Simple.php (should probably use an abstract)</p></li>
<li><p>Zend/Controller/Request/Http.php (should probably use an abstract)</p></li>
<li><p>Zend/Controller/Dispatcher/Interface.php</p></li>
<li>Zend/Controller/Dispatcher/Abstract.php</li>
<li><p>Zend/Controller/Dispatcher/Standard.php</p></li>
<li><p>Zend/Controller/Front.php</p></li>
<li><p>Zend/Controller/Action/Helper/ActionStack.php</p></li>
<li>Zend/Controller/Action/Helper/Abstract.php</li>
</ul>
    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Michal Minicki (martel) on 2008-01-15T05:20:00.000+0000</p> 
        <div class="body">
            <p>I will be happy to work on this but I'm sure somebody should review this issue first. Feel free to assign it to me if you find it useful.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2008-01-15T08:55:35.000+0000</p> 
        <div class="body">
            <p>While I understand the rationale behind this from a strict OOP point of view, I disagree with it in practice. Most times, users would rather not need to write all the functionality, but rather simply use it and/or override the default functionality for a subset of methods. While there's nothing saying that we can't have abstract implmentations of the interfaces that people can standardize on, that adds yet another layer into the hierarchy, and the more of this present, the more bloated ZF will look to the lay observer.</p>

<p>Additionally, since many signatures are referencing the Abstract classes, we have the potential for a pretty big BC break, which is a big concern.</p>

<p>I'm not going to rule these changes out, but I need to sit and think on them for a while, and see what comments others might have.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Michal Minicki (martel) on 2008-01-15T09:24:14.000+0000</p> 
        <div class="body">
            <p>The problem, which may not be clear from the first glance, is that abstract classes generally include lots of other framework components.</p>

<p>As well as you I would see the resulting code as abstract classes implementing the interfaces. The main difference being the rest of the framework coded against interfaces instead of abstract classes. Furthermore, this shouldn't generate BC problem since we're loosening the constraints not enforcing more (abstract class which users already extend will still implement the new interface). But I agree we're generating more "clutter" for those not well versed in OOP methodology.</p>

<p>The second thing is, one can implement more than one interface which is not possible with extending abstract classes. Imagine one could wich to create one object for HTTP handling, for both request and a response (abstract example, may not be as good as I wanted it to be).</p>

<p>In this exact moment we have both solutions in the code base - take a look at Controller Response / Request objects and a Router for instance. Router has an interface as well as a lightweight Abstract class which can be easily extended but has a dependency on Front Controller (which I have removed today by JIT loading, btw).</p>

<p>I know you're against it Matthew, but please take that in a serious consideration :)</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-03-25T20:41:12.000+0000</p> 
        <div class="body">
            <p>Please categorize/fix as needed.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2008-04-22T11:01:53.000+0000</p> 
        <div class="body">
            <p>Scheduling for next major release.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Rob Allen (rob) on 2012-11-20T20:53:36.000+0000</p> 
        <div class="body">
            <p>Bulk change of all issues last updated before 1st January 2010 as "Won't Fix".</p>

<p>Feel free to re-open and provide a patch if you want to fix this issue.</p>

        </div>
    </div>
    </div>

