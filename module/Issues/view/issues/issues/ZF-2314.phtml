<h2>ZF-2314: Accessors to set custom classes for ErrorHandler</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2007-12-14T21:11:43.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2008-12-17T13:54:14.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.0.4 (26/Feb/08)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Matthew Weier O'Phinney (matthew)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Controller</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
        <li><a href="/issues/secure/attachment/10993/change-errorHandler-class.diff">change-errorHandler-class.diff</a></li>
        </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>It seems that Zend_Controller_Front does not have any methods to set a custom class to use if you use an extended ErrorHandler...
In order to use an extended error handler, it seems that one would have to do the following hack below and use a plugin index other than 100 which is the one used currently by the errorHandler</p>

<pre class="highlight"><code>
    /**
     * Called before Zend_Controller_Front begins evaluating the
     * request against its routes.
     *
     * @param Zend_Controller_Request_Abstract $request
     * @return void
     */
    public function routeStartup()
    {  
        $frontController = Zend_Controller_Front::getInstance();
        
        // Ensure this plugin is the only one (hackish, because FC does not allow custom ER setting)
        if ($frontController-&gt;hasPlugin('Zend_Controller_Plugin_ErrorHandler')) {
            //$frontController-&gt;unregisterPlugin('Zend_Controller_Plugin_ErrorHandler');
        }
    }
</code></pre>

<p>The reason I came across this problem is that I created an extended errorHandler that calls the current module's error controller before falling back to the default module's error controller.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2007-12-15T06:19:09.000+0000</p> 
        <div class="body">
            <p>You can already utilize a custom error handler using the following code:</p>

<pre class="highlight"><code>
$front-&gt;setParam('noErrorHandler');
$front-&gt;regsterPlugin(new MyCustomErrorHandler, 100);
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Geoffrey Tran (potatobob) on 2007-12-15T14:44:52.000+0000</p> 
        <div class="body">
            <p>Isn't that solution somewhat "hackish"?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Lars Strojny (lars) on 2007-12-17T01:39:35.000+0000</p> 
        <div class="body">
            <p>I've stumbled over this issue by myself a few days ago. I also would like to have accessors for the error handling objects. Of course I could do that myself but custom error handling should fit into the 80/20 ratio.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Sebastian Krebs (kingcrunch) on 2007-12-17T09:26:18.000+0000</p> 
        <div class="body">
            <p>Hi</p>

<p>Ive tried my first patch ;) Maybe it helps, its not tested. This will allow you to change the errorHandler-class before (!) dispatching (when it works like it should)</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-12-17T13:54:14.000+0000</p> 
        <div class="body">
            <p>Matthew, can this be closed or is there documentation that could be added to the ref guide to make the solution clearer?</p>

        </div>
    </div>
    </div>

