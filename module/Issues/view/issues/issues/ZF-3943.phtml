<h2>ZF-3943: Zend_Db_Profiler_Firebug does not initialize header's sending</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2008-08-13T08:07:33.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2008-09-02T10:39:17.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.6.0 (02/Sep/08)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Christoph Dorn (cadorn)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Log</li>
            <li>Zend_Wildfire</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>You also need to register the plugin:
$front-&gt;registerPlugin(Zend_Wildfire_Channel_HttpHeaders::getInstance());</p>

<p>It should be done automatically or mentioned in docs</p>

<p><a href="http://www.nabble.com/Db_Profiler_Firebug-documentation-td18904176.html#a18904176">detail</a></p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Christoph Dorn (cadorn) on 2008-08-13T10:16:20.000+0000</p> 
        <div class="body">
            <p>It is done automatically if you have initialized your front controller before calling the first DB query that the profiler is registered with.</p>

<p>Is this not working for you?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2008-08-13T11:01:56.000+0000</p> 
        <div class="body">
            <p>I can confirm; I have an app where I'm initializing the front control prior to the first DB query, and I'm not getting headers. In fact, even manually adding the Wildfire channel plugin is not producing any headers for me. :(</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2008-08-13T11:14:47.000+0000</p> 
        <div class="body">
            <p>I've had some success now. I had to call setEnabled() on the profiler <em>AND</em> register the plugin manually. Once I did both tasks, all worked as expected.</p>

<p>Neither the constructor nor setEnabled() register the plugin, btw; I've verified this looking in the source.</p>

<p>My recommendation is that the profiler should be enabled by default, and the constructor should attempt to register the plugin.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Martin Hujer (mhujer) on 2008-08-13T12:50:33.000+0000</p> 
        <div class="body">
            <p><a href="http://www.nabble.com/Firebug-logger-issues-td18969434.html">Another discussion</a> on mailing list</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Adam Jensen (jazzslider) on 2008-08-14T07:40:10.000+0000</p> 
        <div class="body">
            <p>I've been experiencing a similar issue with Zend_Log_Writer_Firebug.  Please see <a href="http://www.nabble.com/Firebug-logger-issues-td18969434.html">the mailing list discussion</a> Martin Hujer referenced yesterday for a full description.</p>

<p>The problem may well be the order in which plugins are executed...my Firebug logger instance works perfectly in every context except layout scripts.  If the layout script is rendered after Zend_Wildfire_Channel_HttpHeaders::postDispatch() has already fired, any Firebug log messages triggered in the layout script will not make it into the final response.</p>

<p>Manually flushing out the headers again (Zend_Wildfire_Channel_HttpHeaders::getInstance()-&gt;flush()) at the very end of the layout script solves the issue; however, it's not an ideal solution.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Mickael Perraud (mikaelkael) on 2008-08-14T09:27:07.000+0000</p> 
        <div class="body">
            <p>Part of message exchange directly with [~cadorn]:
"I use Db_Profiler_Firebug and Log_Writer_Firebug. I create Db_Profiler_Firebug in a auth plugin (dispatchLoopStartup) just for administrator.
I create my logger in my bootstrap. I send info log in a postDispatch plugin (auth) just for administrator (so the first log is very late in my code).</p>

<p>Case 1:
Just the doc =&gt; nothing in Firebug</p>

<p>Case 2:
The doc + the manual registration =&gt; all is in Firebug</p>

<p>Case 3:
The doc + an immediate log just after the creation of the logger (in bootstrap, so very early in my code) =&gt; all is in Firebug</p>

<p>I think, there is sending of headers too early. I don't know if it's due to my particular code."</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2008-08-22T15:15:20.000+0000</p> 
        <div class="body">
            <p>Scheduling for RC3.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Christoph Dorn (cadorn) on 2008-08-24T00:16:47.000+0000</p> 
        <div class="body">
            <p>The registering of the plugin has been fixed for Zend_Db_Profiler_Firebug.</p>

<p>You only need to call setEnabled() on Zend_Db_Profiler_Firebug not Zend_Wildfire_Plugin_FirePhp as it is enabled by default.</p>

<p>For the issue of flushing messages in Zend_Wildfire_Channel_HttpHeaders::postDispatch() see ZF-3963.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Mickael Perraud (mikaelkael) on 2008-08-26T12:29:38.000+0000</p> 
        <div class="body">
            <p>This OK for me.
ZF SVN 11073.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-09-02T10:39:17.000+0000</p> 
        <div class="body">
            <p>Updating for the 1.6.0 release.</p>

        </div>
    </div>
    </div>

