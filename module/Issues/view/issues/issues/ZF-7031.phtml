<h2>ZF-7031: Zend_Loader_Autoloader_ServiceLoader</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>New Feature</dd>

    <dt>Created:</dt>
    <dd>2009-06-16T15:06:00.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-06-16T18:31:05.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Mina R Waheeb (syncer)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Matthew Weier O'Phinney (matthew)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Loader</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Hi, After version 1.8 and the new Autoloader system, I think we need Zend_Loader_Autoloader_ServiceLoader or PluginLoader, It will be more easy to plug and play service between modules for example the below workflow:</p>

<h1>Module "admin" create Interface "Admin_Api_Registration"</h1>

<h1>Module "news" create class "News_Service_Administration" implements interface  "Admin_Api_Registration"</h1>

<h1>Module "admin" creates new Zend_Loader_Autoloader_ServiceLoader("service","Administration");</h1>

<h1>Now Module admin can use foreach loader-&gt;getPlugins()</h1>

<p>Thanks</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2009-06-16T17:15:18.000+0000</p> 
        <div class="body">
            <p>I fail to see how this differs from the current Zend_Loader_Autoloader_Resource and related Zend_Application_Module_Autoloader, which provide autoloading capabilities for precisely this sort of thing. Plugins may be autoloaded the same way as classes using this paradigm already.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Mina R Waheeb (syncer) on 2009-06-16T17:56:44.000+0000</p> 
        <div class="body">
            <p>The functionality already exist in the new Autoloader system, I'm talking about encapsulate it for loading across modules, maybe the below code explain more than me :)</p>

<pre class="highlight"><code>
$modules = Zend_Controller_Front::getInstance()-&gt;getControllerDirectory();
foreach (array_keys($modules) as $module) {
       $class = $this-&gt;_formatModuleName($module) . '_' . $this-&gt;_namespace . '_' . $this-&gt;_type;
        foreach(Zend_Loader_Autoloader::getInstance()-&gt;getClassAutoloaders($class) as $loader) {
                $types = $loader-&gt;getResourceTypes();
                 if(isset($types[$this-&gt;_namespace])) {
                      $path = $types[$this-&gt;_namespace]['path'] . '/' . str_replace('_', '/', $this-&gt;_type) . '.php';
                      if(is_file($path)) {
                          require_once $path;
                          if(!class_exists($class)) {
                              require_once 'Zend/Loader/Exception.php';
                              throw new Zend_Loader_Exception("Unable to find class: " . $class);
                          }
                          $this-&gt;_plugins[$module] = new $class();
                     }
              }
         }
}
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2009-06-16T18:31:05.000+0000</p> 
        <div class="body">
            <p>Zend_Application_Module_Autoloader already fulfills this purpose.</p>

<p>If you use Zend_Application_Module_Bootstrap, it will create an instance of the above class that sets up a resource autoloader for that module; alternately, you can instantiate it yourself. Regardless, if used, you can then autoload that module's resources from anwywhere. As an example, if you have modules/foo/models/Bar.php with class 'Foo_Model_Bar', you can then simply instantiate the class: $bar = new Foo_Model_Bar(). This is easier and more intuitive than any other approach, and works cross-modules.</p>

        </div>
    </div>
    </div>

