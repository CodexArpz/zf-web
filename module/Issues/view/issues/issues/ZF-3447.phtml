<h2>ZF-3447: when using _forward() viewrenderer tries to render wrong script</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2008-06-11T11:15:21.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-05-05T03:02:21.000+0000</dd>

    <dt>Status:</dt>
    <dd>Closed</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Adam Lundrigan (adamlundrigan)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Controller</li>
            <li>zf-caretaker-adamlundrigan</li>
            <li>zf-crteam-padraic</li>
            <li>zf-crteam-priority</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-5240">ZF-5240</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>When from 
module/oldController/oldAction</p>

<p>i try forwarding to</p>

<p>module/newController/newAction</p>

<p>i get exception because $this-&gt;render('newAction'), results in trying to render script from</p>

<p>oldController/newAction.phtml</p>

<p>this happened to me in every ZF version i think.</p>

<p>forwarding between actions of the same controller and module would work fine.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Yashar Saberi (ysaberi) on 2008-06-11T17:43:29.000+0000</p> 
        <div class="body">
            <p>I recreated this same issue. from controllerA-&gt;indexAction I _forward() to controllerB-&gt;testAction() and I get an exception because it is looking for controllerA-&gt;testAction.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Yashar Saberi (ysaberi) on 2008-06-11T17:44:50.000+0000</p> 
        <div class="body">
            <p>Forgot to mention I am on version 1.5.1</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2008-06-19T05:45:05.000+0000</p> 
        <div class="body">
            <p>I cannot reproduce this issue. I've tried both forwarding to actions in different controllers within the same module, as well as actions in different controllers in different modules; in each case, the appropriate view script was loaded.</p>

<p>My testbed:</p>

<pre class="highlight"><code>
// in application/default/controllers/TestController.php
class TestController extends Zend_Controller_Action
{
    public function localForwardAction
    {
        return $this-&gt;_forward('from-forward', 'foo');
    }

    public function remoteForwardAction
    {
        return $this-&gt;_forward('from-forward', 'foo', 'bar');
    }
}

// in application/default/controllers/FooController.php
class FooController extends Zend_Controller_Action
{
    public function fromForwardAction
    {
    }
}

// in application/bar/controllers/FooController.php
class Bar_FooController extends Zend_Controller_Action
{
    public function fromForwardAction
    {
    }
}

// in application/default/views/scripts/foo/from-forward.phtml
FooController::fromForwardAction()

// in application/bar/views/scripts/foo/from-forward.phtml
Bar_FooController::fromForwardAction()
</code></pre>

<p>I then visited /test/local-forward and /test/remote-forward, and received the appropriate view scripts in each instance.</p>

<p>If you can recreate the issue, please post a minimum necessary testbed so I can independently verify. Otherwise, I will mark this issue as 'Cannot Reproduce'.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2008-06-19T05:46:08.000+0000</p> 
        <div class="body">
            <p>Downgrading from Blocker to Major, as cannot reproduce.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Yashar Saberi (ysaberi) on 2008-06-19T10:10:07.000+0000</p> 
        <div class="body">
            <p>Forgot to mention, this happens when you _forward() from either init() or __construct() in an action controller.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Marcin Lulek (ergo14) on 2008-06-24T01:47:46.000+0000</p> 
        <div class="body">
            <p>ok, ive nailed a problem a bit more,</p>

<p>when i forward from one action to another it works, but if in the action im forwarding from i want to render explictly this creates a problem:</p>

<p>$this-&gt;render('remove-page','default');</p>

<p>when i have this in my action i end up with exception, if i dont render explictly the forwards seems to take place fine...</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Yashar Saberi (ysaberi) on 2008-09-16T01:57:21.000+0000</p> 
        <div class="body">
            <p>Has this issue been looked into more yet? If not, is it Ok for me to try to look at the code and post a patch?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Dolf Schimmel (Freeaqingme) (freak) on 2009-07-04T15:40:35.000+0000</p> 
        <div class="body">
            <p>Could anyone please attach some code by which this can be reproduced?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Lauri Elevant (clon) on 2010-01-04T15:45:18.000+0000</p> 
        <div class="body">
            <p>This happened to me when using the built-in ErrorController. For example, when EXCEPTION_NO_CONTROLLER is thrown in "somemodule", it gets routed to the ErrorController in the "default" module. When I then try to:</p>

<p>$errors = $this-&gt;_getParam('error_handler');
  $this-&gt;_forward('index', 'index', $errors-&gt;request-&gt;getModuleName());</p>

<p>This actually seems to dispatch to the correct index action in index controller in the originating module. However, the view script is still pulled from the "default" module. When I look at the View object in the ViewRenderer, it has bot the paths configured:</p>

<p>Zend_View Object
(
    [_useViewStream:Zend_View:private] =&gt; 1
    [_useStreamWrapper:Zend_View:private] =&gt; 
    [_path:Zend_View_Abstract:private] =&gt; Array
        (
            [script] =&gt; Array
                (
                    [0] =&gt; ..\application\modules\default\views\scripts\
                    [1] =&gt; ..\application\modules\group\views\scripts\
                )</p>

<pre><code>        [helper] =&gt; Array
            (
            )

        [filter] =&gt; Array
            (
            )

    )
</code></pre>

<p>Naturally, the _script method in Zend_View_Abstract chooses the first path and the wrong script get rendered.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Lauri Elevant (clon) on 2010-01-04T15:58:09.000+0000</p> 
        <div class="body">
            <p>For my case the workaround was to:</p>

<p>$this-&gt;_helper-&gt;viewRenderer-&gt;view-&gt;setScriptPath(NULL);</p>

<p>in the ErrorController before forwarding to a different module. Seems to clear the script path stack. Without exploring the innards too much, it seems to me that when switching before modules, the ViewRenderer's View scriptPath stack is not correctly maintained.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Adam Lundrigan (adamlundrigan) on 2011-09-23T15:31:08.000+0000</p> 
        <div class="body">
            <p>Is this still an issue?  If so, should it be rectified in ZF1 at this late stage in it's lifecycle?  In any event, controller-view integration is being reworked in ZF2, so the same fix will likely not be necessary there.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Adam Lundrigan (adamlundrigan) on 2012-05-05T03:02:21.000+0000</p> 
        <div class="body">
            <p>Fixing this now may introduce a backwards-compatibility break.  Closing as won't fix.</p>

        </div>
    </div>
    </div>

