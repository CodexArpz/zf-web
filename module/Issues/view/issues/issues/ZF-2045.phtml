<h2>ZF-2045: Add memoization to Zend_Cache_Core::load()</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2007-10-05T10:14:44.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2008-05-04T11:31:49.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Romain Lalaut (roro)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Fabien MARTY (fab)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Cache</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Use case :</p>

<pre class="highlight"><code>
$id = 'foo';
$res = $cache-&gt;get( $id ); // loads it a first time
[...] // lot of code
$res = $cache-&gt;get( $id ); // loads it a second time
</code></pre>

<p>Actually, in this situation, the backend is call two time. A quick implementation of memoization in Zend_Cache_Core::load() can solve it.</p>

<pre class="highlight"><code>
private $loaded_entries;

public function __construct($options = array())
{
        [...]
        $this-&gt;loaded_entries = array();
}

public function load($id, $doNotTestCacheValidity = false, $doNotUnserialize = false)
    {
        if (!$this-&gt;_options['caching']) {
            return false;
        }
        
        if(isset($this-&gt;loaded_entries[$id])) 
            return $this-&gt;loaded_entries[$id];
        
        $this-&gt;_lastId = $id;
        self::_validateIdOrTag($id);
        $data = $this-&gt;_backend-&gt;load($id, $doNotTestCacheValidity);
        if ($data===false) {
            // no cache available
            return false;
        }
        if ((!$doNotUnserialize) &amp;&amp; $this-&gt;_options['automatic_serialization']) {
            // we need to unserialize before sending the result
            $data = unserialize($data);
        }
        
        $this-&gt;loaded_entries[$id] = $data;
        
        return $data;
    }
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2007-10-15T13:42:15.000+0000</p> 
        <div class="body">
            <p>Assigned to Fabien</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Shekar Reddy (zendfw) on 2008-04-24T11:59:33.000+0000</p> 
        <div class="body">
            <p>A BIG NO-NO!! This would duplicate data in memory for each cache-ID's data. If you have to load cache for more than once during a request, why not just store it in our own var for later use? A static var or the Registry, maybe? This is functionality of memorizing data is too specific of a use-case and not recommended at the component level but should be handled/managed by the developer himself. Loading cache data for more than once (even memorizing data) during a request indicates a design flaw.</p>

<p>Please do not complicate the component. If memorizing of loaded data is requested by a majority of users, it may be offered as an <em>option</em> initialized/defaulted to FALSE.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Fabien MARTY (fab) on 2008-04-24T15:45:07.000+0000</p> 
        <div class="body">
            <p>I agree with you. I maintain this issue open to get feedbacks.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Romain Lalaut (roro) on 2008-04-25T02:24:47.000+0000</p> 
        <div class="body">
            <p>i agree too</p>

        </div>
    </div>
    </div>

