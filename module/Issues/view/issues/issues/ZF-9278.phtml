<h2>ZF-9278: Problems with magic files</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2010-02-26T15:47:02.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2010-03-12T02:36:30.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.10.3 (01/Apr/10)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Marc Bennewitz (private) (mabe)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Thomas Weidner (thomas)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Validate_File</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
        <li><a href="/issues/secure/attachment/12804/MimeType.php.diff">MimeType.php.diff</a></li>
            <li><a href="/issues/secure/attachment/12805/tests_MimeType.php.diff">tests_MimeType.php.diff</a></li>
        </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>On some systems the magic file can't used by finfo. On using it php errors will be reported and tests fails.
I know this is not directly a ZF problem but Zend_Validate_File_Mimetype should throw an exception on setting an invalid magic file or if finfo isn't supported by php and the magic file can't used.</p>

<p>Additionally the first found magic files will be used (if not set) without testing its format.</p>

<p>To solve this
1. use the function based interface of finfo than an invalid magic file can detected and throw an exception
2. use the opened finfo resource (opened on setMagicFile to check format) within isValid
3. throw an exception finfo_file returns false -&gt; it returns application/octed-stream if no matches was found
4. throw an exception on setMagicFile if finfo isn't available
5. set systems magic file on constructor (if no option) but don't throw an exception if invalid
   (skip magic file if it has an invalid format and check the next)
6. add and use a valid magic file on tests</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2010-02-26T15:52:20.000+0000</p> 
        <div class="body">
            <p>Changing from patch to improvement as there was no patch added</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Marc Bennewitz (private) (mabe) on 2010-02-26T16:02:16.000+0000</p> 
        <div class="body">
            <p>patch added
(Currently only tested on php 5.3.1)</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2010-02-26T16:05:08.000+0000</p> 
        <div class="body">
            <p>No to 1... no difference to object interface except that you must additionally unset the resource on a failure.</p>

<p>No to 2 (see 1)</p>

<p>No to 3... a false from finfo can also mean any other error and is not limited to a not recognised mimetype</p>

<p>No to 4... an automatic found magicfile should not throw an exception</p>

<p>No to 5... this is actually done afterwards to reduce payload</p>

<p>6: This is already done</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Marc Bennewitz (private) (mabe) on 2010-02-26T16:16:24.000+0000</p> 
        <div class="body">
            <p>to 1: I set the resource only if finfo_open retunred a resource and on destructor i close it</p>

<p>to 3: yes a false from finfo_file means there was an error - on error i throw an exception
      else it returns application/octed-stream (on my tests) -&gt; I reset this to null</p>

<p>to 4: the automatic file detection is done on constructor and will catch the exception</p>

<p>to 5: within trunk the detection was on getMagicFile ?</p>

<p>to 6: I couldn't find it - where is it located ?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Marc Bennewitz (private) (mabe) on 2010-02-26T18:42:42.000+0000</p> 
        <div class="body">
            <p>patch for changes in tests</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2010-03-04T13:31:12.000+0000</p> 
        <div class="body">
            <p>No for the patch... it adds not allowed behaviour and also errors</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Marc Bennewitz (private) (mabe) on 2010-03-05T09:42:31.000+0000</p> 
        <div class="body">
            <p>Can you tell me which not allowed behavior do you mean and where errors are reported, please?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2010-03-08T12:32:34.000+0000</p> 
        <div class="body">
            <p>You were adding an exception within isValid() which is not allowed.</p>

<p>Additionally you added some other problems by erasing the check for save_mode which integrates already solved issues.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Marc Bennewitz (private) (mabe) on 2010-03-08T13:25:30.000+0000</p> 
        <div class="body">
            <p>??You were adding an exception within isValid() which is not allowed.??
yes, but if finfo_file returns false I'm sure it's an internal error of finfo because it returns "application/octet-stream" if mimetype could not detect.
(finfo_file: Returns a textual description of the contents of the filename  argument, or FALSE if an error occurred.)
-&gt; On such cases than we need to add a new validate message and return false.</p>

<p>??Additionally you added some other problems by erasing the check for save_mode which integrates already solved issues.??
I will do some tests with it - don't tested it now</p>

<p>I see you closed ZF-9320, but:
1. if new finfo failes PHP-Notices are reported - This is also not allowed (if possible) on ZF
2. $mime isn't false if mime database is invalid. -&gt; this is why I implemented it as open_finfo in my patch
3. You open an finfo instance twice -&gt; on setMagicFile and on isValid /:</p>

<pre class="highlight"><code>
$const = defined('FILEINFO_MIME_TYPE') ? FILEINFO_MIME_TYPE : FILEINFO_MIME;
$mime = new finfo($const, __FILE__);
// PHP Notice:  finfo::finfo(): Warning: offset `&lt;?php' invalid in .../finfo_test.php on line 4
// PHP Notice:  finfo::finfo(): Warning: type `&lt;?php' invalid in .../finfo_test.php on line 4
// PHP Notice:  finfo::finfo(): Warning: offset `$const = defined('FILEINFO_MIME_TYPE') ? FILEINFO_MIME_TYPE : FILEINFO_MIME;' invalid in .../finfo_test.php on line 4
// PHP Notice:  finfo::finfo(): Warning: type `$const = defined('FILEINFO_MIME_TYPE') ? FILEINFO_MIME_TYPE : FILEINFO_MIME;' invalid in .../finfo_test.php on line 4
// PHP Notice:  finfo::finfo(): Warning: offset `$mime = new finfo($const, __FILE__);' invalid in .../finfo_test.php on line 4
// PHP Notice:  finfo::finfo(): Warning: type `$mime = new finfo($const, __FILE__);' invalid in .../finfo_test.php on line 4
// PHP Notice:  finfo::finfo(): Warning: offset `var_dump($mime);' invalid in .../finfo_test.php on line 4
// PHP Notice:  finfo::finfo(): Warning: type `var_dump($mime);' invalid in .../finfo_test.php on line 4
// PHP Warning:  finfo::finfo(): Failed to load magic database at '.../finfo_test.php'. in .../finfo_test.php on line 4

var_dump($mime);
// object(finfo)#1 (0) {
// }
</code></pre>

<p>Additionally:
* getMagicFile don't return mime_magic.magicfile if finfo isn't available but mime_content_type is
* setMagicFile don't throw an exception if finfo isn't available</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2010-03-12T02:36:30.000+0000</p> 
        <div class="body">
            <p>Fixed as discussed within IRC</p>

        </div>
    </div>
    </div>

