<h2>ZF-2112: Zend_Db_Adapter_Interface::fetchCol() does not properly retrieve a column on single column SQL statements.</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2007-10-29T20:18:45.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-03-28T02:12:07.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.8.3 (09/Jun/09)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Kekoa Vincent (kekoav)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Satoru Yoshida (satoruyoshida)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Db</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-6788">ZF-6788</a></li>
            <li><a href="/issues/browse/ZF-5204">ZF-5204</a></li>
            <li><a href="/issues/browse/ZF-6603">ZF-6603</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>When using a Mysqli adapter(not sure if this occurs with others) the following produces an error:</p>

<pre class="highlight"><code>

Warning: mysqli_stmt::bind_param() [function.mysqli-stmt-bind-param]: Number of variables doesn't match number of parameters in prepared statement in /usr/home/sciworld/application/library/Zend/Db/Statement/Mysqli.php on line 241

This occurs independent of if a column index is provided.

Interestingly, the following code does work correctly:

</code></pre>

<p>$stmnt = $db-&gt;query("SELECT areaID FROM userPermissions WHERE userID='$userID'");
$column = $stmnt-&gt;fetchColumn();```</p>

<p>It seems perhaps the parsing of the statement in the first case is not functioning properly, although admittedly I don't have much experience with Zend_Db.  I do know the documentation does indicate that the first case should work identically to the second, which is not the case(unless I am missing something here).</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-03-21T17:05:34.000+0000</p> 
        <div class="body">
            <p>This issue should have been fixed for the 1.5 release.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-03-25T20:43:59.000+0000</p> 
        <div class="body">
            <p>Please categorize/fix as needed.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-04-18T13:11:54.000+0000</p> 
        <div class="body">
            <p>This doesn't appear to have been fixed in 1.5.0. Please update if this is not correct.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Simon Mundy (peptolab) on 2008-05-26T18:50:48.000+0000</p> 
        <div class="body">
            <p>What's the final SQL query? What does $userID resolve to? I can't reproduce this here but if you can supply any additional information it will help immensely.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Cole Snodgrass (cole.snodgrass) on 2008-06-25T12:44:12.000+0000</p> 
        <div class="body">
            <p>It appears that this is still happening (verified in 1.5.2) if the where statement is searching for a column with an id of 0 and the column being returned has a 0 in it.</p>

<p><em>Repro:</em></p>

<pre class="highlight"><code>
mysql&gt; CREATE TABLE cds_delete ( id SMALLINT NOT NULL DEFAULT 0, name VARCHAR(10) NOT NULL DEFAULT '') ENGINE=innodb;
Query OK, 0 rows affected (0.07 sec)

mysql&gt; INSERT INTO cds_delete VALUES (0, 'zero'), (1, 'one'), (2, 'two');
Query OK, 3 rows affected (0.01 sec)
Records: 3  Duplicates: 0  Warnings: 0

mysql&gt; select * from cds_delete;
+----+------+
| id | name |
+----+------+
|  0 | zero | 
|  1 | one  | 
|  2 | two  | 
+----+------+
3 rows in set (0.00 sec)

&lt;?php
require_once 'Zend/Db.php';
$db = Zend_Db::factory('Mysqli', array(...));

var_dump(
    $db-&gt;fetchCol("SELECT id FROM cds_delete WHERE id IN (0, 1, 2)"),
    $db-&gt;fetchCol("SELECT id FROM cds_delete WHERE id IN (1, 2)"),
    $db-&gt;fetchCol("SELECT name FROM cds_delete WHERE id IN (0, 1, 2)"),
    $db-&gt;fetchCol("SELECT name FROM cds_delete WHERE id IN (1, 2)")
);
?&gt;
</code></pre>

<p><em>Expected Result:</em></p>

<pre class="highlight"><code>
array(3) {
  [0]=&gt;
  int(0)
  [1]=&gt;
  int(1)
  [2]=&gt;
  int(2)
}
array(2) {
  [0]=&gt;
  int(1)
  [1]=&gt;
  int(2)
}
array(3) {
  [0]=&gt;
  string(4) "zero"
  [1]=&gt;
  string(3) "one"
  [2]=&gt;
  string(3) "two"
}
array(2) {
  [0]=&gt;
  string(3) "one"
  [1]=&gt;
  string(3) "two"
}
</code></pre>

<p><em>Actual Result:</em></p>

<pre class="highlight"><code>
array(0) {
}
array(2) {
  [0]=&gt;
  int(1)
  [1]=&gt;
  int(2)
}
array(3) {
  [0]=&gt;
  string(4) "zero"
  [1]=&gt;
  string(3) "one"
  [2]=&gt;
  string(3) "two"
}
array(2) {
  [0]=&gt;
  string(3) "one"
  [1]=&gt;
  string(3) "two"
}
</code></pre>

<p>Notice that the first fetchCol is returning an empty arrays instead of the expected results.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Cole Snodgrass (cole.snodgrass) on 2008-06-25T13:10:29.000+0000</p> 
        <div class="body">
            <p>I traced this issue down to the <em>Zend_Db_Statement::fetchAll</em> function and determined this is due to improper type checking.</p>

<pre class="highlight"><code>
    public function fetchAll($style = null, $col = null)
    {
        $data = array();
        if ($style === Zend_Db::FETCH_COLUMN &amp;&amp; $col === null) {
            $col = 0;
        }
        if ($col === null) {
            while ($row = $this-&gt;fetch($style)) {
                $data[] = $row;
            }
        } else {
            while ($val = $this-&gt;fetchColumn($col)) {
                $data[] = $val;
            }
        }
        return $data;
    }

</code></pre>

<p>Notice that both {{while}} loops are not checking the types returned from {{fetchColumn}} and {{fetch}}, therefore anything that could evaluate to a false will cause the {{while}} loop to terminate.  This is why when the integer 0 is being returned by the {{fetchColumn}} method, nothing is being returned.</p>

<p>Updating the code to verify that a boolean false was returned appears to fix this issue (I can only vouch that this fixes the fetchCol issue, I didn't bother to look into what {{fetch}} should/could return so that should still be verified).</p>

<pre class="highlight"><code>
    public function fetchAll($style = null, $col = null)
    {
        $data = array();
        if ($style === Zend_Db::FETCH_COLUMN &amp;&amp; $col === null) {
            $col = 0;
        }
        if ($col === null) {
            while (($row = $this-&gt;fetch($style)) !== false) {
                $data[] = $row;
            }
        } else {
            while (($val = $this-&gt;fetchColumn($col)) !== false) {
                $data[] = $val;
            }
        }
        return $data;
    }
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2009-01-06T14:33:40.000+0000</p> 
        <div class="body">
            <p>This issue has gone unaddressed for too long. I'm re-assigning to Ralph for re-evaluation and categorization.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ralph Schindler (ralph) on 2009-01-10T10:22:48.000+0000</p> 
        <div class="body">
            <p>Will evaluate within 2 weeks</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Tomasz Gunerski (tommygun) on 2009-01-21T20:05:16.000+0000</p> 
        <div class="body">
            <p>Cole Snodgrass solution is incorrect for Mysqli adapter. False is returned only when error will occurre, when stmt cursor reaches the end of data NULL will be returned.
More about this here:
<a href="http://php.net/manual/en/mysqli-stmt.fetch.php">http://php.net/manual/en/mysqli-stmt.fetch.php</a></p>

<p>Proper solution:</p>

<pre class="highlight"><code>
public function fetchAll($style = null, $col = null)
{
    $data = array();
    if ($style === Zend_Db::FETCH_COLUMN &amp;&amp; $col === null) {
        $col = 0;
    }
    if ($col === null) {
        while ($row = $this-&gt;fetch($style)) {
            $data[] = $row;
        }
    } else {
        while (false !== $val = $this-&gt;fetchColumn($col)) {
            if ($val === null)
                break;
            $data[] = $val;
        }
    }
    return $data;
}
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by old of Satoru Yoshida (yoshida@zend.co.jp) on 2009-05-16T18:02:42.000+0000</p> 
        <div class="body">
            <p>can not reproduce</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by old of Satoru Yoshida (yoshida@zend.co.jp) on 2009-05-29T07:25:01.000+0000</p> 
        <div class="body">
            <p>Reopen for ZF-6788</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by old of Satoru Yoshida (yoshida@zend.co.jp) on 2009-05-29T07:59:06.000+0000</p> 
        <div class="body">
            <p>add "false !== " condition  to "$val = $this-&gt;fetchColumn($col)".</p>

<p>But I think the problem with mysql  should be issue on fetch() method.</p>

        </div>
    </div>
    </div>

