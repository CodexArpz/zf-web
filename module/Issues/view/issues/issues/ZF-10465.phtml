<h2>ZF-10465: Add option 'encodeUrl' to Zend_Page_MVC config</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2010-09-17T02:07:26.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2011-09-04T13:02:50.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.11.11 (29/Sep/11)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Ulrich Beckers (ubeckers)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Frank Br√ºckner (frosch)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Navigation</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-8586">ZF-8586</a></li>
            <li><a href="/issues/browse/ZF-8023">ZF-8023</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
        <li><a href="/issues/secure/attachment/14343/Mvc.php.patch">Mvc.php.patch</a></li>
            <li><a href="/issues/secure/attachment/14547/MvcTest.php.patch">MvcTest.php.patch</a></li>
        </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Zend_Page_MVC has the option to switch whether params should be reset when assembling URL. There are some cases where some params contain characters (like '/') which needs to be preserved by some routes. So there needs to be a way of sitching encodeUrl.</p>

<p>E.g.: You have a route for content-pages like this</p>

<pre class="highlight"><code>
'content' =&gt; array(
    'type' =&gt; 'Zend_Controller_Router_Route_Regex',
    'route' =&gt; '(.+)\.html',
    'defaults' =&gt; array(
        'module' =&gt; 'default',
        'controller' =&gt; 'content',
        'action' =&gt; 'content'
    ),
    'map' =&gt; array(
        1 =&gt; 'contentKey'
    ),
    'reverse' =&gt; '%s.html'
),
</code></pre>

<p>And later on you want to define some subpages via Zend_Navigation:</p>

<pre class="highlight"><code>
 array(
    'label' =&gt; 'PageXY',
    'route' =&gt; 'content',
    'module' =&gt; 'default',
    'controller' =&gt; 'content',
    'action' =&gt; 'content',
    'params' =&gt; array(
        'contentKey' =&gt; 'pagexy/subpage'
    )
),
</code></pre>

<p>This results in an invalid href, because Zend_Page_MVC calls a url-helper (Zend_Controller_Action_Helper_Url) internally, but there is no way to pass a configuration variable which controls the parameter '$encode' of url-helper</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Ulrich Beckers (ubeckers) on 2010-09-17T02:11:08.000+0000</p> 
        <div class="body">
            <p>I changed the code of class Zend_Navigation_Page_Mvc in my setup, so there is a way to control the url encoding. Maybe there is a way this can be applied to further ZF-Version?</p>

<p>&lt;?php
/**
 * Zend Framework
 *
 * LICENSE
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * <a href="http://framework.zend.com/license/new-bsd">http://framework.zend.com/license/new-bsd</a>
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@zend.com so we can send you a copy immediately.
 *
 * @category   Zend
 * @package    Zend_Navigation
 * @subpackage Page
 * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (<a href="http://www.zend.com">http://www.zend.com</a>)
 * @license    <a href="http://framework.zend.com/license/new-bsd">http://framework.zend.com/license/new-bsd</a>     New BSD License
 * @version    $Id: Mvc.php 20096 2010-01-06 02:05:09Z bkarwin $
 */</p>

<p>/**
 * @see Zend_Navigation_Page
 */
require_once 'Zend/Navigation/Page.php';</p>

<p>/**
 * @see Zend_Controller_Action_HelperBroker
 */
require_once 'Zend/Controller/Action/HelperBroker.php';</p>

<p>/**
 * Used to check if page is active
 *
 * @see Zend_Controller_Front
 */
require_once 'Zend/Controller/Front.php';</p>

<p>/**
 * Represents a page that is defined using module, controller, action, route
 * name and route params to assemble the href
 *
 * @category   Zend
 * @package    Zend_Navigation
 * @subpackage Page
 * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (<a href="http://www.zend.com">http://www.zend.com</a>)
 * @license    <a href="http://framework.zend.com/license/new-bsd">http://framework.zend.com/license/new-bsd</a>     New BSD License
 */
class Zend_Navigation_Page_Mvc extends Zend_Navigation_Page
{
    /**
     * Action name to use when assembling URL
     *
     * @var string
     */
    protected $_action;</p>

<pre><code>/**
 * Controller name to use when assembling URL
 *
 * @var string
 */
protected $_controller;

/**
 * Module name to use when assembling URL
 *
 * @var string
 */
protected $_module;

/**
 * Params to use when assembling URL
 *
 * @see getHref()
 * @var array
 */
protected $_params = array();

/**
 * Route name to use when assembling URL
 *
 * @see getHref()
 * @var string
 */
protected $_route;

/**
 * Whether params should be reset when assembling URL
 *
 * @see getHref()
 * @var bool
 */
protected $_resetParams = true;

/**
 * Whether href should be encoded when assembling URL
 *
 * @see getHref()
 * @var bool
 */
protected $_encodeUrl = true;

/**
 * Cached href
 *
 * The use of this variable minimizes execution time when getHref() is
 * called more than once during the lifetime of a request. If a property
 * is updated, the cache is invalidated.
 *
 * @var string
 */
protected $_hrefCache;

/**
 * Action helper for assembling URLs
 *
 * @see getHref()
 * @var Zend_Controller_Action_Helper_Url
 */
protected static $_urlHelper = null;

// Accessors:

/**
 * Returns whether page should be considered active or not
 *
 * This method will compare the page properties against the request object
 * that is found in the front controller.
 *
 * @param  bool $recursive  [optional] whether page should be considered
 *                          active if any child pages are active. Default is
 *                          false.
 * @return bool             whether page should be considered active or not
 */
public function isActive($recursive = false)
{
    if (!$this-&gt;_active) {
        $front = Zend_Controller_Front::getInstance();
        $reqParams = $front-&gt;getRequest()-&gt;getParams();

        if (!array_key_exists('module', $reqParams)) {
            $reqParams['module'] = $front-&gt;getDefaultModule();
        }

        $myParams = $this-&gt;_params;

        if (null !== $this-&gt;_module) {
            $myParams['module'] = $this-&gt;_module;
        } else {
            $myParams['module'] = $front-&gt;getDefaultModule();
        }

        if (null !== $this-&gt;_controller) {
            $myParams['controller'] = $this-&gt;_controller;
        } else {
            $myParams['controller'] = $front-&gt;getDefaultControllerName();
        }

        if (null !== $this-&gt;_action) {
            $myParams['action'] = $this-&gt;_action;
        } else {
            $myParams['action'] = $front-&gt;getDefaultAction();
        }

        if (count(array_intersect_assoc($reqParams, $myParams)) ==
            count($myParams)) {
            $this-&gt;_active = true;
            return true;
        }
    }

    return parent::isActive($recursive);
}

/**
 * Returns href for this page
 *
 * This method uses {@link Zend_Controller_Action_Helper_Url} to assemble
 * the href based on the page's properties.
 *
 * @return string  page href
 */
public function getHref()
{
    if ($this-&gt;_hrefCache) {
        return $this-&gt;_hrefCache;
    }

    if (null === self::$_urlHelper) {
        self::$_urlHelper =
            Zend_Controller_Action_HelperBroker::getStaticHelper('Url');
    }

    $params = $this-&gt;getParams();

    if ($param = $this-&gt;getModule()) {
        $params['module'] = $param;
    }

    if ($param = $this-&gt;getController()) {
        $params['controller'] = $param;
    }

    if ($param = $this-&gt;getAction()) {
        $params['action'] = $param;
    }

    $url = self::$_urlHelper-&gt;url($params,
                                  $this-&gt;getRoute(),
                                  $this-&gt;getResetParams(),
                                  $this-&gt;getEncodeUrl()
                                  );

    return $this-&gt;_hrefCache = $url;
}

/**
 * Sets action name to use when assembling URL
 *
 * @see getHref()
 *
 * @param  string $action             action name
 * @return Zend_Navigation_Page_Mvc   fluent interface, returns self
 * @throws Zend_Navigation_Exception  if invalid $action is given
 */
public function setAction($action)
{
    if (null !== $action &amp;&amp; !is_string($action)) {
        require_once 'Zend/Navigation/Exception.php';
        throw new Zend_Navigation_Exception(
                'Invalid argument: $action must be a string or null');
    }

    $this-&gt;_action = $action;
    $this-&gt;_hrefCache = null;
    return $this;
}

/**
 * Returns action name to use when assembling URL
 *
 * @see getHref()
 *
 * @return string|null  action name
 */
public function getAction()
{
    return $this-&gt;_action;
}

/**
 * Sets controller name to use when assembling URL
 *
 * @see getHref()
 *
 * @param  string|null $controller    controller name
 * @return Zend_Navigation_Page_Mvc   fluent interface, returns self
 * @throws Zend_Navigation_Exception  if invalid controller name is given
 */
public function setController($controller)
{
    if (null !== $controller &amp;&amp; !is_string($controller)) {
        require_once 'Zend/Navigation/Exception.php';
        throw new Zend_Navigation_Exception(
                'Invalid argument: $controller must be a string or null');
    }

    $this-&gt;_controller = $controller;
    $this-&gt;_hrefCache = null;
    return $this;
}

/**
 * Returns controller name to use when assembling URL
 *
 * @see getHref()
 *
 * @return string|null  controller name or null
 */
public function getController()
{
    return $this-&gt;_controller;
}

/**
 * Sets module name to use when assembling URL
 *
 * @see getHref()
 *
 * @param  string|null $module        module name
 * @return Zend_Navigation_Page_Mvc   fluent interface, returns self
 * @throws Zend_Navigation_Exception  if invalid module name is given
 */
public function setModule($module)
{
    if (null !== $module &amp;&amp; !is_string($module)) {
        require_once 'Zend/Navigation/Exception.php';
        throw new Zend_Navigation_Exception(
                'Invalid argument: $module must be a string or null');
    }

    $this-&gt;_module = $module;
    $this-&gt;_hrefCache = null;
    return $this;
}

/**
 * Returns module name to use when assembling URL
 *
 * @see getHref()
 *
 * @return string|null  module name or null
 */
public function getModule()
{
    return $this-&gt;_module;
}

/**
 * Sets params to use when assembling URL
 *
 * @see getHref()
 *
 * @param  array|null $params        [optional] page params. Default is null
 *                                   which sets no params.
 * @return Zend_Navigation_Page_Mvc  fluent interface, returns self
 */
public function setParams(array $params = null)
{
    if (null === $params) {
        $this-&gt;_params = array();
    } else {
        // TODO: do this more intelligently?
        $this-&gt;_params = $params;
    }

    $this-&gt;_hrefCache = null;
    return $this;
}

/**
 * Returns params to use when assembling URL
 *
 * @see getHref()
 *
 * @return array  page params
 */
public function getParams()
{
    return $this-&gt;_params;
}

/**
 * Sets route name to use when assembling URL
 *
 * @see getHref()
 *
 * @param  string $route              route name to use when assembling URL
 * @return Zend_Navigation_Page_Mvc   fluent interface, returns self
 * @throws Zend_Navigation_Exception  if invalid $route is given
 */
public function setRoute($route)
{
    if (null !== $route &amp;&amp; (!is_string($route) || strlen($route) &lt; 1)) {
        require_once 'Zend/Navigation/Exception.php';
        throw new Zend_Navigation_Exception(
             'Invalid argument: $route must be a non-empty string or null');
    }

    $this-&gt;_route = $route;
    $this-&gt;_hrefCache = null;
    return $this;
}

/**
 * Returns route name to use when assembling URL
 *
 * @see getHref()
 *
 * @return string  route name
 */
public function getRoute()
{
    return $this-&gt;_route;
}

/**
 * Sets whether params should be reset when assembling URL
 *
 * @see getHref()
 *
 * @param  bool $resetParams         whether params should be reset when
 *                                   assembling URL
 * @return Zend_Navigation_Page_Mvc  fluent interface, returns self
 */
public function setResetParams($resetParams)
{
    $this-&gt;_resetParams = (bool) $resetParams;
    $this-&gt;_hrefCache = null;
    return $this;
}

/**
 * Returns whether params should be reset when assembling URL
 *
 * @see getHref()
 *
 * @return bool  whether params should be reset when assembling URL
 */
public function getResetParams()
{
    return $this-&gt;_resetParams;
}

/**
 * Sets whether href should be encoded when assembling URL
 *
 * @see getHref()
 *
 * @param  bool $resetParams         whether href should be encoded when
 *                                   assembling URL
 * @return Zend_Navigation_Page_Mvc  fluent interface, returns self
 */
public function setEncodeUrl($encodeUrl)
{
    $this-&gt;_encodeUrl = (bool) $encodeUrl;
    $this-&gt;_hrefCache = null;
    return $this;
}

/**
 * Returns whether herf should be encoded when assembling URL
 *
 * @see getHref()
 *
 * @return bool whether herf should be encoded when assembling URL
 */
public function getEncodeUrl()
{
    return $this-&gt;_encodeUrl;
}

/**
 * Sets action helper for assembling URLs
 *
 * @see getHref()
 *
 * @param  Zend_Controller_Action_Helper_Url $uh  URL helper
 * @return void
 */
public static function setUrlHelper(Zend_Controller_Action_Helper_Url $uh)
{
    self::$_urlHelper = $uh;
}

// Public methods:

/**
 * Returns an array representation of the page
 *
 * @return array  associative array containing all page properties
 */
public function toArray()
{
    return array_merge(
        parent::toArray(),
        array(
            'action'       =&gt; $this-&gt;getAction(),
            'controller'   =&gt; $this-&gt;getController(),
            'module'       =&gt; $this-&gt;getModule(),
            'params'       =&gt; $this-&gt;getParams(),
            'route'        =&gt; $this-&gt;getRoute(),
            'reset_params' =&gt; $this-&gt;getResetParams()
        ));
}
</code></pre>

<p>}</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Kai Uwe (kaiuwe) on 2011-01-26T00:39:19.000+0000</p> 
        <div class="body">
            <p>Added code tags</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Kai Uwe (kaiuwe) on 2011-01-26T00:44:32.000+0000</p> 
        <div class="body">
            <p>Hi Ulrich,
can you add a patch file for this and some tests? Thanks.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ulrich Beckers (ubeckers) on 2011-01-26T03:03:36.000+0000</p> 
        <div class="body">
            <p>Ok, here is the patch file. I don't know how to attach a file here, so I just Post it..</p>

<p>--- Mvc_Orig.php    2010-01-06 03:05:09.000000000 +0100
+++ Mvc.php 2011-01-26 11:57:51.000000000 +0100
@@ -93,6 +93,14 @@
      * @var bool
      */
     protected $_resetParams = true;
+<br />
+    /**
+     * Whether href should be encoded when assembling URL
+     *
+     * @see getHref()
+     * @var bool
+     */
+    protected $_encodeUrl = true;</p>

<pre><code> /**
  * Cached href
</code></pre>

<p>@@ -201,7 +209,9 @@</p>

<pre><code>     $url = self::$_urlHelper-&gt;url($params,
                                   $this-&gt;getRoute(),
</code></pre>

<p>-                                      $this-&gt;getResetParams());
+                                      $this-&gt;getResetParams(),
+                                      $this-&gt;getEncodeUrl()
+                                      );</p>

<pre><code>     return $this-&gt;_hrefCache = $url;
 }
</code></pre>

<p>@@ -403,6 +413,34 @@
     {
         return $this-&gt;_resetParams;
     }
+<br />
+    /**
+     * Sets whether href should be encoded when assembling URL
+     *
+     * @see getHref()
+     *
+     * @param  bool $resetParams         whether href should be encoded when
+     *                                   assembling URL
+     * @return Zend_Navigation_Page_Mvc  fluent interface, returns self
+     */
+    public function setEncodeUrl($encodeUrl)
+    {
+        $this-&gt;_encodeUrl = (bool) $encodeUrl;
+        $this-&gt;_hrefCache = null;
+        return $this;
+    }
+<br />
+    /**
+     * Returns whether herf should be encoded when assembling URL
+     *
+     * @see getHref()
+     *
+     * @return bool whether herf should be encoded when assembling URL
+     */
+    public function getEncodeUrl()
+    {
+        return $this-&gt;_encodeUrl;
+    }</p>

<pre><code> /**
  * Sets action helper for assembling URLs
</code></pre>

<p>@@ -434,7 +472,8 @@
                 'module'       =&gt; $this-&gt;getModule(),
                 'params'       =&gt; $this-&gt;getParams(),
                 'route'        =&gt; $this-&gt;getRoute(),
-                'reset_params' =&gt; $this-&gt;getResetParams()
+                'reset_params' =&gt; $this-&gt;getResetParams(),
+                'encodeUrl'    =&gt; $this-&gt;getEncodeUrl(),
             ));
     }
 }</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Kai Uwe (kaiuwe) on 2011-01-26T03:09:05.000+0000</p> 
        <div class="body">
            <p>Please add code tags!</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ulrich Beckers (ubeckers) on 2011-01-26T04:18:25.000+0000</p> 
        <div class="body">
            <p>Sorry!</p>

<pre class="highlight"><code>
--- Mvc_Orig.php    2010-01-06 03:05:09.000000000 +0100
+++ Mvc.php 2011-01-26 11:57:51.000000000 +0100
@@ -93,6 +93,14 @@
      * @var bool
      */
     protected $_resetParams = true;
+          
+    /**
+     * Whether href should be encoded when assembling URL
+     *
+     * @see getHref()
+     * @var bool
+     */
+    protected $_encodeUrl = true;
 
     /**
      * Cached href
@@ -201,7 +209,9 @@
 
         $url = self::$_urlHelper-&gt;url($params,
                                       $this-&gt;getRoute(),
-                                      $this-&gt;getResetParams());
+                                      $this-&gt;getResetParams(),
+                                      $this-&gt;getEncodeUrl()
+                                      );
 
         return $this-&gt;_hrefCache = $url;
     }
@@ -403,6 +413,34 @@
     {
         return $this-&gt;_resetParams;
     }
+    
+    /**
+     * Sets whether href should be encoded when assembling URL
+     *
+     * @see getHref()
+     *
+     * @param  bool $resetParams         whether href should be encoded when
+     *                                   assembling URL
+     * @return Zend_Navigation_Page_Mvc  fluent interface, returns self
+     */
+    public function setEncodeUrl($encodeUrl)
+    {
+        $this-&gt;_encodeUrl = (bool) $encodeUrl;
+        $this-&gt;_hrefCache = null;
+        return $this;
+    }
+    
+    /**
+     * Returns whether herf should be encoded when assembling URL
+     *
+     * @see getHref()
+     *
+     * @return bool whether herf should be encoded when assembling URL
+     */
+    public function getEncodeUrl()
+    {
+        return $this-&gt;_encodeUrl;
+    }
 
     /**
      * Sets action helper for assembling URLs
@@ -434,7 +472,8 @@
                 'module'       =&gt; $this-&gt;getModule(),
                 'params'       =&gt; $this-&gt;getParams(),
                 'route'        =&gt; $this-&gt;getRoute(),
-                'reset_params' =&gt; $this-&gt;getResetParams()
+                'reset_params' =&gt; $this-&gt;getResetParams(),
+                'encodeUrl'    =&gt; $this-&gt;getEncodeUrl(),
             ));
     }
 }
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Kai Uwe (kaiuwe) on 2011-01-28T08:04:35.000+0000</p> 
        <div class="body">
            <p>Thanks for your help!
I will write some test cases.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Kai Uwe (kaiuwe) on 2011-06-06T11:22:19.000+0000</p> 
        <div class="body">
            <p>Unit tests</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Frank Br√ºckner (frosch) on 2011-07-29T07:33:57.000+0000</p> 
        <div class="body">
            <p>Extended unit test attached.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by P√°draic Brady (padraic) on 2011-09-04T13:02:50.000+0000</p> 
        <div class="body">
            <p>Fixed in r24444 and via ZF2 PR</p>

        </div>
    </div>
    </div>

