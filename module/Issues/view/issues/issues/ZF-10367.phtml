<h2>ZF-10367: public Zend_Mail::clearHeader() method?</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>New Feature</dd>

    <dt>Created:</dt>
    <dd>2010-08-23T01:59:10.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2010-11-10T10:04:43.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.11.0 (02/Nov/10)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Marc Hodgins (mjh_ca)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Mail</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
        <li><a href="/issues/secure/attachment/13386/ZF-10367.patch">ZF-10367.patch</a></li>
        </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Many of the things you set with public add<em>() methods on a Zend_Mail object, you can remove again using corresponding clear</em>() methods, but this isn't the case with headers.</p>

<p>There is the protected Zend_Mail::_clearHeader() method, but (unless I'm missing something) there isn't a clear reason why this isn't safe to have a public method for. One shouldn't have to extend Zend_Mail just to clear a header, when there's already methods like clearRecipients(), clearSubject() etc.</p>

<p>The usage scenario where this would be handy is when you're looping through recipients within the same Zend_Mail instance, changing some things (e.g. clearRecipients()-&gt;addTo('foo@bar.com') ), then calling send() again. You might've also added some custom header with addHeader() which you then want to remove and add <em>differently</em> for the next recipient. Presently this is only possible by extending Zend_Mail, or creating a new Zend_Mail instance for each recipient (which may get problematic if you have things like attachments in the mix).</p>

<p>A public clearHeader() method could be as simple as:</p>

<pre class="highlight"><code>
        public function clearHeader($headerName)
        {   
            $this-&gt;_clearHeader($headerName);
            
            return $this;
        }
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Marc Hodgins (mjh_ca) on 2010-10-25T17:52:24.000+0000</p> 
        <div class="body">
            <p>Patch with test attached.  Maintains protected _clearHeader() method as a proxy for backwards compatibility for classes that have extended Zend_Mail.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Jon Nott (jonnott) on 2010-10-26T02:23:42.000+0000</p> 
        <div class="body">
            <p>Would be interesting to know why _clearRecipients() was made a protected method to begin with? Any ideas?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Dolf Schimmel (Freeaqingme) (freak) on 2010-10-26T04:56:32.000+0000</p> 
        <div class="body">
            <p>I don't know why the original author, of one of its successors did it like this. I suppose because he doesn't want the enduser to call it (doh ;D). Zend_Mail suffers from a lot of this kind of decisions and a bad API-design alltogether. That is why I plan to do a rewrite of its core for ZF2, so we have something that actually works.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2010-10-26T05:51:05.000+0000</p> 
        <div class="body">
            <p>Patch applied to trunk and 1.11 release branch -- thanks!</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Jon Nott (jonnott) on 2010-11-10T10:04:43.000+0000</p> 
        <div class="body">
            <p>Interestingly, on the subject of backwards-compatibility, this provides an example of how having to work around weaknesses in the API can actually cause a kind of backwards-incompatibility where framework users have extended classes to provide those work-arounds.</p>

<p>For example, my work-around for the lack of a public clearHeader() method in Zend_Mail was to create a method in an extended class which did the reverse of what this patch now does (see my original description above). So if I upgrade now from ZF 1.10 to 1.11, I actually have to <em>remove</em> my extended public method to avoid an infinite-loop method calling scenario.</p>

<p>Funny..</p>

        </div>
    </div>
    </div>

