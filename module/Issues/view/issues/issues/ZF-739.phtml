<h2>ZF-739: Ability to configure LevelKey character or string</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>New Feature</dd>

    <dt>Created:</dt>
    <dd>2007-01-11T12:02:28.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2007-07-05T14:43:39.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>0.9.0 (17/Mar/07)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Rob Allen (rob)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Config</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>I currently have a project that defines valid 'primitives' (which become xml nodes) in the form of something.something2</p>

<p>For example, i would like to do the following:</p>

<p>[primitives]
byte.ascii:valid_operators = "eq,ne"
byte.string:valid_operators = "eq,ne"</p>

<p>you get the drift.</p>

<p>I would love to see an api similar to</p>

<p>Zend_Config_Ini::load($filename, $section, array('level_key_character' =&gt; ':'));</p>

<p>Any chance? Is this asking too much?</p>

<p>-ralph</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Rob Allen (rob) on 2007-01-15T08:34:55.000+0000</p> 
        <div class="body">
            <p>Hi Ralph,</p>

<p>Do you mean that you just want Zend_Config_Ini to provide the choice of which character to use as the "nesting" separator?</p>

<p>I suspect that it would be rarely used, so cluttering up the constructor's parameter list is less desirable to me. How about a static function such as setNestSeparator()?</p>

<p>You would then do</p>

<pre class="highlight"><code>
Zend_Config_Ini::setNestSeparator(':');
$config = new Zend_Config_Ini($filename, $section);
</code></pre>

<p>Whilst writing this, it's dawned on me that the alternative is to change the last parameter on the constructor as you suggest so that instead of being a boolean, it is an array called $options. That might be more flexible long term?</p>

<p>Regards,</p>

<p>Rob...</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ralph Schindler (ralph) on 2007-01-15T12:48:18.000+0000</p> 
        <div class="body">
            <p>The only problem with setting the Nest Separator statically is that it will then affect all INI instances, not just the one that I want it to operate on.. wouldn't be a biggie, but it means is that to be safe, you'd have to do something like:</p>

<pre class="highlight"><code>
Zend_Config_Ini::setNestSeparator(':');
$config = new Zend_Config_Ini($filename, $section);
Zend_Config_Ini::setNestSeparator(Zend_Config_Ini::NEST_DEFAULT);
</code></pre>

<p>I think that yes, the ability to specify options to otherwise static features is a good thing in general, plus, (and while this is considered an edge case).. allows for the most flexibility long term.  I've reviewed the code in INI and currently, this seems like the only place that is candidate for optional configurations..</p>

<p>That being said, i think yes, a 3rd optional parameter would be nice.  You could potentially accept a mixed type parameter named options allowing for the following:</p>

<p>$ini = new Zend_Config_Ini($filename, $section, Zend_Config_Ini::READONLY);
or $ini = new Zend_Config_Ini($filename, $section, array('nest_separator' =&gt; ':', 'read_only' =&gt; true));
or $ini = new Zend_Config_Ini($filename, $section, array('nest_separator' =&gt; ':'));</p>

<p>Since the last parameter is optional, i see no drawbacks in making it a mixed parameter that can be clearly defined in the manual.</p>

<p>my 3cents ;)</p>

<p>-ralph</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Rob Allen (rob) on 2007-01-18T15:21:23.000+0000</p> 
        <div class="body">
            <p>Proposed patch v1:</p>

<pre class="highlight"><code>
Index: Ini.php
===================================================================
--- Ini.php (revision 2898)
+++ Ini.php (working copy)
@@ -34,6 +34,8 @@
  */
 class Zend_Config_Ini extends Zend_Config
 {
+    protected $_nestSeparator= '.';
+
     /**
      * Loads the section $section from the config file $filename for
      * access facilitated by nested object properties.
@@ -64,12 +66,24 @@
      * @param boolean $allowModifications
      * @throws Zend_Config_Exception
      */
-    public function __construct($filename, $section, $allowModifications = false)
+    public function __construct($filename, $section, $config = false)
     {
         if (empty($filename)) {
             throw new Zend_Config_Exception('Filename is not set');
         }
+        $allowModifications = false;
 
+        if (is_bool($config)) {
+            $allowModifications = $config;
+        } elseif (is_array($config)) {
+            if (isset($config['allowModifications'])) {
+                $allowModifications = (bool)$config['allowModifications'];
+            }
+            if (isset($config['nestSeparator'])) {
+                $this-&gt;_nestSeparator = $config['nestSeparator'];
+            }
+        }
+
         $iniArray = parse_ini_file($filename, true);
         $preProcessedArray = array();
         foreach ($iniArray as $key =&gt; $data)
@@ -161,8 +175,8 @@
      */
     protected function _processKey($config, $key, $value)
     {
-        if (strpos($key, '.') !== false) {
-            $pieces = explode('.', $key, 2);
+        if (strpos($key, $this-&gt;_nestSeparator) !== false) {
+            $pieces = explode($this-&gt;_nestSeparator, $key, 2);
             if (strlen($pieces[0]) &amp;&amp; strlen($pieces[1])) {
                 if (!isset($config[$pieces[0]])) {
                     $config[$pieces[0]] = array();

</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Rob Allen (rob) on 2007-01-18T15:26:19.000+0000</p> 
        <div class="body">
            <p>test:</p>

<pre class="highlight"><code>
Index: IniTest.php
===================================================================
--- IniTest.php (revision 2898)
+++ IniTest.php (working copy)
@@ -35,6 +35,7 @@
         $this-&gt;_iniFileAllSectionsConfig = dirname(__FILE__) . '/_files/allsections.ini';
         $this-&gt;_iniFileCircularConfig = dirname(__FILE__) . '/_files/circular.ini';
         $this-&gt;_iniFileMultipleInheritanceConfig = dirname(__FILE__) . '/_files/multipleinheritance.ini';
+        $this-&gt;_iniFileSeparatorConfig = dirname(__FILE__) . '/_files/separator.ini';
     }
 
     public function testLoadSingleSection()
@@ -205,4 +206,14 @@
         }
 
     }
+
+    public function testZF739()
+    {
+        $config = new Zend_Config_Ini($this-&gt;_iniFileSeparatorConfig, 'all', array('nestSeparator'=&gt;':'));
+
+        $this-&gt;assertEquals('all', $config-&gt;hostname);
+        $this-&gt;assertEquals('live', $config-&gt;db-&gt;name);
+        $this-&gt;assertEquals('multi', $config-&gt;one-&gt;two-&gt;three);
+        $this-&gt;assertNull(@$config-&gt;nonexistent); // property doesn't exist
+    }
 }
</code></pre>

<p>separator.ini:</p>

<pre class="highlight"><code>
[all]
hostname = all
name = thisname
db:host = 127.0.0.1
db:user = username
db:pass = password
db:name = live
one:two:three = multi

</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ralph Schindler (ralph) on 2007-01-24T12:43:00.000+0000</p> 
        <div class="body">
            <p>This seems to work great within Zend_Config_Ini.  It bails when you are attempting to traverse with Zend_Config.  I think the offending line is the call to _isValidKey(...)</p>

<p>For example:</p>

<p>assuming this config:</p>

<pre class="highlight"><code>
[production]

development_mode                            = false

database/driver                             = "PDO_MYSQL"
database/parameters/username                = "test"
database/parameters/password                = "test"
database/parameters/dbname                  = "test"
database/parameters/profiler                = false

controller/controller_directory.1             = "../application/user/controllers"
controller/controller_directory.2             = "../application/user/controllers2"
controller/controller_directory.3             = "../application/user/controllers3"

</code></pre>

<p>And this in bootstrap:</p>

<pre class="highlight"><code>
$config = new Zend_Config_Ini('../application/config/config.ini', $config_type, array('nestSeparator' =&gt; '/'));
</code></pre>

<p>i get this error:</p>

<p>Invalid key: 'controller_directory.1'</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Gavin (gavin) on 2007-03-01T13:45:20.000+0000</p> 
        <div class="body">
            <p>I am not entirely convinced that the ZF should encourage and support a multitude of different syntax for the ini files.  There is some value in having a standardized format with standardized separators (e.g. reduces learning curve, encourages portability and readability).  However, I can understand that some individuals will want to use a character other than the period for the separator.  Clearly, there are trade-offs.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Rob Allen (rob) on 2007-03-02T00:17:10.000+0000</p> 
        <div class="body">
            <p>It's that tricky compromise between being predictable verses flexible.</p>

<p>I'm generally thinking this is a good idea as without it you can't load any legacy INI file that doesn't expect a "." to be a hierarchical separator.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Darby Felton (darby) on 2007-03-08T14:06:04.000+0000</p> 
        <div class="body">
            <p>Changed fix version to 0.9.0</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Rob Allen (rob) on 2007-03-14T15:54:58.000+0000</p> 
        <div class="body">
            <p>Fixed in svn revision 3938 .</p>

        </div>
    </div>
    </div>

