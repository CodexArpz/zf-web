<h2>ZF2-134: CLONE - Add multi get support ( exemple, for memcached )</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2012-01-09T19:24:49.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-01-09T19:26:26.000+0000</dd>

    <dt>Status:</dt>
    <dd>Closed</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Marc Bennewitz (private) (mabe)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend\Cache</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>I think ZF should add multi get support for memcached ( included at the version 1.4 of memcache package <a href="http://pecl.php.net/package-changelog.php?package=memcache">http://pecl.php.net/package-changelog.php/â€¦</a> , <a href="http://it.php.net/manual/en/memcache.get.php">http://it.php.net/manual/en/memcache.get.php</a> )</p>

<p>Core.php in Cache</p>

<pre class="highlight"><code>
     /**
     * Test if a cache is available for the given id and (if yes) return it (false else)
     *
     * @param  string  $id                     Cache id
     * @param  boolean $doNotTestCacheValidity If set to true, the cache validity won't be tested
     * @param  boolean $doNotUnserialize       Do not serialize (even if automatic_serialization is true) =&gt; for internal use
     * @return mixed|false Cached datas
     */
    public function load($id, $doNotTestCacheValidity = false, $doNotUnserialize = false)
    {
        if (!$this-&gt;_options['caching']) {
            return false;
        }
        $id = $this-&gt;_id($id); // cache id may need prefix
        $this-&gt;_lastId = $id;
        self::_validateIdOrTag($id);
        $data = $this-&gt;_backend-&gt;load($id, $doNotTestCacheValidity);
        if ($data===false) {
            // no cache available
            return false;
        }
        if ((!$doNotUnserialize) &amp;&amp; $this-&gt;_options['automatic_serialization']) {
            // we need to unserialize before sending the result
            return unserialize($data);
        }
        return $data;
    }
</code></pre>

<p>TO:</p>

<pre class="highlight"><code>
     /**
     * Test if a cache is available for the given id and (if yes) return it (false else)
     *
     * @param  string|array $id                Cache id or Array of Cache id
     * @param  boolean $doNotTestCacheValidity If set to true, the cache validity won't be tested
     * @param  boolean $doNotUnserialize       Do not serialize (even if automatic_serialization is true) =&gt; for internal use
     * @return mixed|array|false Cached datas
     */
    public function load($id, $doNotTestCacheValidity = false, $doNotUnserialize = false)
    {
        if (!$this-&gt;_options['caching']) {
            return false;
        }
        if(!is_array($id)){
            $id = $this-&gt;_id($id); // cache id may need prefix
            $this-&gt;_lastId = $id;
            self::_validateIdOrTag($id);
            $data = $this-&gt;_backend-&gt;load($id, $doNotTestCacheValidity);
            if ($data===false) {
                // no cache available
                return false;
            }
            if ((!$doNotUnserialize) &amp;&amp; $this-&gt;_options['automatic_serialization']) {
                // we need to unserialize before sending the result
                return unserialize($data);
            }
        }else{
            $ids = $id
            $this-&gt;_lastId = end($ids);
            foreach($ids as &amp;$id){
                $id = $this-&gt;_id($id); // cache id may need prefix
                self::_validateIdOrTag($id);
            }
            $data = $this-&gt;_backend-&gt;load($ids, $doNotTestCacheValidity);
            if ($data===false) {
                // no cache available
                return false;
            }
            if ((!$doNotUnserialize) &amp;&amp; $this-&gt;_options['automatic_serialization']) {
                foreach($data as &amp;$row){                
                    // we need to unserialize before sending the result
                    $row = unserialize($row);
                }
            }
        }
        return $data;
    }
</code></pre>

<p>Memcache.php</p>

<pre class="highlight"><code>

     /**
     * Test if a cache is available for the given id and (if yes) return it (false else)
     *
     * @param  string  $id                     Cache id
     * @param  boolean $doNotTestCacheValidity If set to true, the cache validity won't be tested
     * @return string|false cached datas
     */
    public function load($id, $doNotTestCacheValidity = false)
    {
        $tmp = $this-&gt;_memcache-&gt;get($id);
        if (is_array($tmp) &amp;&amp; isset($tmp[0])) {
            return $tmp[0];
        }
        return false;
    }


</code></pre>

<p>only wiki to change
TO:</p>

<pre class="highlight"><code>

     /**
     * Test if a cache is available for the given id and (if yes) return it (false else)
     * Now it supports also array of id
     * @param  string|array  $id    Cache id or an array of them
     * @param  boolean $doNotTestCacheValidity If set to true, the cache validity won't be tested
     * @return string|array|false cached datas
     */
    public function load($id, $doNotTestCacheValidity = false)
    {
        $tmp = $this-&gt;_memcache-&gt;get($id);
        if (is_array($tmp) &amp;&amp; isset($tmp[0])) {return $tmp[0];
            
        }
        return false;
    }


</code></pre>

<p>for other cache engines that doesn't suppor by default multiget I think should be simply so:</p>

<p>Apc.php</p>

<pre class="highlight"><code>

    /**
     * Test if a cache is available for the given id and (if yes) return it (false else)
     *
     * WARNING $doNotTestCacheValidity=true is unsupported by the Apc backend
     *
     * @param  string  $id                     cache id
     * @param  boolean $doNotTestCacheValidity if set to true, the cache validity won't be tested
     * @return string cached datas (or false)
     */
    public function load($id, $doNotTestCacheValidity = false)
    {
        $tmp = apc_fetch($id);
        if (is_array($tmp)) {
            return $tmp[0];
        }
        return false;
    }

</code></pre>

<p>TO:</p>

<pre class="highlight"><code>

    public _last_notFound = array();
    /**
     * Test if a cache is available for the given id and (if yes) return it (false else)
     * Now it supports also array of id
     * WARNING $doNotTestCacheValidity=true is unsupported by the Apc backend
     *
     * @param  string|array  $id    Cache id or an array of them
     * @param  boolean $doNotTestCacheValidity If set to true, the cache validity won't be tested
     * @return string|array|false cached datas
     */
    public function load($id, $doNotTestCacheValidity = false)
    {
        
        if(!is_array($id){
            $tmp = apc_fetch($id);
            if (is_array($tmp)) {
                return $tmp[0];
            }
        }else{
            $this-&gt;_last_not_Found = array()
            $ids = $id;
            $results = array()
            foreach($ids as $id){
                $tmp = apc_fetch($id);
                if (is_array($tmp)) {
                    array_push($results,$tmp[0]);
                }else{
                    array_push($this-&gt;_last_not_Found,$id);
                }
            }
            if(!empty($results)){
                return $results;
            }
        }
        return false;
    }

</code></pre>

<p>I hope I haven't made mistakes in writing and I hope there will be this improvement in next release, thanks</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Marc Bennewitz (private) (mabe) on 2012-01-09T19:26:26.000+0000</p> 
        <div class="body">
            <p>fixed</p>

<p>Nearly all methods have a version to read/write multiple items @ once.</p>

        </div>
    </div>
    </div>

