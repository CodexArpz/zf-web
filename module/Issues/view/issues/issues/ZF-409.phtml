<h2>ZF-409: Zend_Db_Adapters should verify extensions are loaded before using them.</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2006-09-29T14:32:32.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2007-07-05T14:43:22.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>0.8.0 (21/Feb/07)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Bill Karwin (bkarwin)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Db</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Currently, if you send the adapter name 'oracle' to Zend_Db::factory(), you will receive notices and a fatal error if the Oracle extension isn't loaded. I would recommend that extension_loaded() be used in each adapter's constructor to verify that the functions and constants associated with the adapter/extension can be used. If the extension isn't loaded, then throw an exception. This will also require that all uses of extension constants are within the methods of the classes, and are not assigned to class variables by default.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Gavin (gavin) on 2006-10-02T01:19:45.000+0000</p> 
        <div class="body">
            <p>We will discuss this issue again.  Previous decisions were in favor of not checking for PHP extensions per request, as such checks do not need to occur on every request, and success or failure generally does not vary over time (excluding changes to the PHP installation).</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Jordan Ryan Moore (jordanryanmoore) on 2006-10-02T12:03:29.000+0000</p> 
        <div class="body">
            <p>My specific case where this matters is an installation script for a web application. The user performing the installation is given a drop-down menu that is populated using a filtered listing of the Zend/Db/Adapter directory. When the user's selection is received from the web form, the script uses Zend_Db::factory() to initialize a database connection to test if it works. If the adapter's extension isn't loaded, a fatal error occurs. If an Exception was thrown, the problem could be dealt with in a much cleaner way.</p>

<p>I'm having a hard time believing that using extension_loaded() each time a database adapter is initialized is an expensive process. I haven't tested it myself, but if it is, I can think another good solution (ignoring naming conventions):</p>

<p>Add a public static method to each adapter that verifies that the adapter can be used on the system. For example, add...</p>

<p>public static function canBeUsed() {
  return extension_loaded('pdo_mysql');
}</p>

<p>...to the PDO MySQL adapter, and add a public static method to Zend_Db with one parameter (adapter name) that calls the "canBeUsed()" method of the specified adapter.</p>

<p>I believe that all extension constants not located within class methods of the adapters will still need to be moved into their constructors to avoid "undefined constant" notices, but I don't necessarily see this as a drawback.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2006-11-13T15:15:30.000+0000</p> 
        <div class="body">
            <p>Changing fix version to 0.8.0.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-02-06T22:02:40.000+0000</p> 
        <div class="body">
            <p>Fixed in revision 3254</p>

        </div>
    </div>
    </div>

