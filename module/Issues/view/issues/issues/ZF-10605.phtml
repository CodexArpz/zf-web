<h2>ZF-10605: allow use of database.schema.table in Zend_Db_Select</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2010-10-27T12:04:59.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-01-29T04:44:47.000+0000</dd>

    <dt>Status:</dt>
    <dd>Postponed</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Ralph Schindler (ralph)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Db_Select</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Using database.schema.table (often needed in MSSQL) results in the SQL string outputting "database"."schema".  It doesn't recognize the 3 part name.  In this case, it seems to be an easy fix, just limit the explode to 2 parts.  I'm probably missing the 'correct' way to do this, but I didn't see anything for the select statement builder relating to this.</p>

<pre class="highlight"><code>`

</code></pre>

<p>protected function _join($type, $name, $cond, $cols, $schema = null)
{
  ...
  // Schema from table name overrides schema argument
  if (!is_object($tableName) &amp;&amp; false !== strpos($tableName, '.')) {
    - list($schema, $tableName) = explode('.', $tableName);
    + list($schema, $tableName) = explode('.', $tableName, 2);
  }
  ...
}
```</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Ralph Schindler (ralph) on 2011-04-01T19:19:05.000+0000</p> 
        <div class="body">
            <p>Postponing.  To be not an issue in ZF2.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Andrew Keller (akeller) on 2012-01-29T04:44:47.000+0000</p> 
        <div class="body">
            <p>I had this problem as well and used the $schema parameter to work around it.</p>

<pre class="highlight"><code>
$select = $db-&gt;select()
             -&gt;from(array('t' =&gt; 'table'), '*', 'database.schema')
             -&gt;joinLeft(array('t2' =&gt; 'jointable'), 't.id = t2.id', '*', 'database.schema');
</code></pre>

<p>This is working for me on version 1.11.11 of the Zend Framework.  But I agree it would be great for Zend_Db_Select to accept the database.schema.table syntax in the first parameter.</p>

        </div>
    </div>
    </div>

