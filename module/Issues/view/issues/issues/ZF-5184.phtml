<h2>ZF-5184: sibling files of controllers fail to load</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2008-12-08T13:31:59.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2010-11-20T06:01:33.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Ryan Mauger (bittarman)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Controller</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>A short time before 1.7 was released I started using ZF. Two small web solutions were been given to different customers and I had planned to upgrade to 1.7 as early as it was available. First I wasn't able to get it working, because I ran into errors related to class loading/creation by the autoload feature. Here's an example of the related file layout:</p>

<pre class="highlight"><code>
&lt;?php

abstract class ControllerBase extends Sfs_Controller_Base
{
...
}

?&gt;
</code></pre>

<pre class="highlight"><code>
&lt;?php

class IndexController extends ControllerBase
{
...
}

?&gt;
</code></pre>

<p>When the IndexController is created by the dispatcher, the {{Zend_Controller_Dispatcher_Standard::loadClass()}} fails, because ControllerBase.php can't be found by {{include_once}}. 
That's because the value of the variable {{$dispatcherDir}} isn't prepended to the <em>includepath</em> like it was done in zf1.6 by the {{Zend_Loader::loadFile()}}. 
The old behaviour can easily be restored by following snippet inside loadClass (I think, that's why the {{$dispatchDir}} is still around).</p>

<pre class="highlight"><code>
&lt;?php
...
    public function loadClass($className)
    {
...

        $dispatchDir = $this-&gt;getDispatchDirectory();
        $loadFile    = $dispatchDir . DIRECTORY_SEPARATOR . $this-&gt;classToFilename($className);

       // The necessary new line
    set_include_path($dispatchDir . PATH_SEPARATOR . get_include_path());

        if (!include_once $loadFile) {
            require_once 'Zend/Controller/Dispatcher/Exception.php';
            throw new Zend_Controller_Dispatcher_Exception('Cannot load controller class "' . $className . '" from file "' . $loadFile . "'");
        }
...
?&gt;
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Ryan Mauger (bittarman) on 2010-11-20T06:01:33.000+0000</p> 
        <div class="body">
            <p>Closing this as Wont fix for two reasons,</p>

<p>Firstly, controllers are not intended to be loaded in this manner, and are better suited in the library dir of your application, under a custom namespace.</p>

<p>Given the new resource loading in 1.8 onwards, making these autoload from this location would be a simple matter of adding a controller resource, and following the appropriate naming convention.</p>

        </div>
    </div>
    </div>

