<h2>ZF-4273: Exceptions thrown inside or after a call to Zend_Rest_Server::setClass() are swallowed</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2008-09-12T13:43:04.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-11-20T20:53:17.000+0000</dd>

    <dt>Status:</dt>
    <dd>Closed</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Joshua Beall (jbeall)
            </dd>

    <dt>Assignee:</dt>
    <dd>
        None
                    </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Rest_Server</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Exceptions thrown inside Zend_Rest_Server::setClass are effectively swallowed.</p>

<p>This is because inside Zend_Rest_Server::__construct, on line 93, we have the following:</p>

<pre><code>    set_exception_handler(array($this, "fault"));
</code></pre>

<p>This means that any uncaught exceptions are passed to Zend_Rest_Server::fault (even if it's thrown from somewhere else, outside the Zend_Rest_Server class instance.</p>

<p>This caused me some frustration when I inadvertently had a mismatch in the PHPDoc block for one the methods I was exposing via the Zend_Rest_Server interface.  When I called Zend_Rest_Server::setClass('My_Class'), eventually an exception was thrown on line 344 in the Zend_Server_Reflection_Function class.  Here's the excerpt:</p>

<pre class="highlight"><code>
        if (count($paramTypesTmp) != $paramCount) {
            throw new Zend_Server_Reflection_Exception(
               'Variable number of arguments is not supported for services (except optional parameters). '
             . 'Number of function arguments must currespond to actual number of arguments described in a docblock.');
        }
</code></pre>

<p>The problem was I had a PHPDoc block that was out of sync with the actual method signature.  But the real problem was that instead of an exception explaining this, I got a blank page.  I eventually tracked it down to the fact that Zend_Rest_Server::fault() was catching the exception and effectively swallowing it--actually, it was returning a DOMDocument, which if I had been inside Zend_Rest_Server::handle(), would have been printed on the screen.  But uncaught exceptions thrown from anywhere else just result display a blank screen.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Keith Craigo (keithc) on 2009-03-10T14:27:15.000+0000</p> 
        <div class="body">
            <p>This same error is appearing in release 1.7.6, with a different scenario. 
ex.
public function getusers(); // throws "Uncaught exception 'Zend_Server_Reflection_Exception'"</p>

<p>public function getusers($userid); // does not throw error</p>

<p>private function getusers(); // does not throw error</p>

<p>Error is only thrown when function is declared public with no parameters.</p>

<p>Environment:
Mac 10.5.6
XAMPP for Mac OS X 0.7.4</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Rob Allen (rob) on 2012-11-20T20:53:17.000+0000</p> 
        <div class="body">
            <p>Bulk change of all issues last updated before 1st January 2010 as "Won't Fix".</p>

<p>Feel free to re-open and provide a patch if you want to fix this issue.</p>

        </div>
    </div>
    </div>

