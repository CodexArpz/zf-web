<h2>ZF-5704: SoapServer-&gt;fault() will not correct encode the exception-message</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2009-02-06T00:30:44.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-09-09T11:11:34.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Sven (sunnysven)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Benjamin Eberlei (beberlei)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Soap_Server</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Setting up an SoapServer with another encoding as UTF-8 - for example ISO-8859-1 - SoapServer-&gt;fault() will not correct encode the message.
By throwing a SoapFault with an message, the encoding will be done correctly, but SoapServer-&gt;fault() does not.</p>

<p>To suppress this php error (I reported that bug to php.net), I run an internal encoding.
mb_convert_encoding($string, 'UTF-8', $this-&gt;getEncoding());</p>

<h2>Reproduce code:</h2>

<p>All code listed here is part of a complex class hierarchy.</p>

<hr /><p>SERVER-CODE</p>

<hr /><pre class="highlight"><code>
$server = new Zend_Soap_Server('<a href="http://xxx.de/?wsdl">http://xxx.de/?wsdl</a>', array('encoding' =&gt; 'ISO-8859-1'));
$server-&gt;setClass('SoapFaultTest');
$server-&gt;registerFaultException(array('Exception'));
$server-&gt;handle();
</code></pre>

<hr /><h2>CLIENT-CODE</h2>

<pre class="highlight"><code>
try {
    $client = new SoapClient('<a href="http://xxx.de/?wsdl">http://xxx.de/?wsdl</a>', array('encoding' =&gt; 'ISO-8859-1'));
    echo $client-&gt;test();
}
catch (SoapFault $fault) {
    echo 'error: ' . $fault-&gt;getMessage();
}
</code></pre>

<hr /><h2>SERVICE-CLASS SoapFaultTest</h2>

<pre class="highlight"><code>
class SoapFaultTest
{
    public function test() {
        throw new Exception('Exception with some special chars: Äßö');
    }
}
</code></pre>

<hr /><h2>IMPROVEMENT FOR Zend_Soap_Server on line 941 (SVN)</h2>

<pre class="highlight"><code>
return new SoapFault($code, $this-&gt;_convertEncoding($message));

/**
 * Converts non UTF-8 characters to UTF-8 charachters.
 * That is essential, otherwise PHPs Soap Extension will throw a SoapFault
 * SOAP-ERROR: Encoding: string '...' is not a valid utf-8 string
 * 
 * @param string String to encode
 * @return string correct Encoded String
 */
protected function _convertEncoding($string) {
    return 0 === strlen($this-&gt;getEncoding() || 'utf-8' === strtolower($this-&gt;getEncoding())) ? $string : mb_convert_encoding($string, 'UTF-8', $this-&gt;getEncoding());
}
</code></pre>

<p>So by throwing exceptions the exception-message will be converted correctly and the php bug can be circumvented.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Benjamin Eberlei (beberlei) on 2009-02-06T01:43:54.000+0000</p> 
        <div class="body">
            <p>thanks for the report, i'll look into it.</p>

<p>the problem, why i can't use your solution is the mbstring extension, which is not allowed in ZF components without a fallback. But iconv should be doing roughly good too :-)</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Benjamin Eberlei (beberlei) on 2009-02-06T06:25:02.000+0000</p> 
        <div class="body">
            <p>I do wait for this bug to be confirmed on bugs.php.net (link: <a href="http://bugs.php.net/bug.php?id=47273">http://bugs.php.net/bug.php?id=47273</a>), then i will implement a workaround.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Benjamin Eberlei (beberlei) on 2009-09-09T11:11:34.000+0000</p> 
        <div class="body">
            <p>The underlying PHP bug has been fixed, so this is marked as non-issue.</p>

        </div>
    </div>
    </div>

