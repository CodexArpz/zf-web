<h2>ZF-6494: Zend_Filter_Input::_escapeRecursive($data) applies defaultEscapeFilter when $data is an object.</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2009-05-01T18:00:12.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-08-26T11:47:46.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.10.0 (27/Jan/10)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Thomas Weidner (thomas)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Filter_Input</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>I created a custom filter called ToDate wich returns a Zend_Date object. So, i'm using this after validating a date field with Zend_Validate_Date. Thus, i can apply custom date validators on it and, finally, convert to 'yyyy-mm-dd' format in order to save the row object in database. But when i call  Zend_Filter_Input::getEscaped(), i get a date string, because defaultEscapeFilter is applied on the value in _escapeRecursive(). I think the correction in Zend_Filter_Input::_escapeRecursive() is quite simple:</p>

<p>change:</p>

<pre><code>    if (!is_array($data)) {
        return $this-&gt;_getDefaultEscapeFilter()-&gt;filter($data);
    }
</code></pre>

<p>to:
        if (!is_array($data) &amp;&amp; !is_object($data)) {
            return $this-&gt;_getDefaultEscapeFilter()-&gt;filter($data);
        }</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2009-08-25T14:51:21.000+0000</p> 
        <div class="body">
            <p>This would not work.</p>

<p>Your change would force objects to be run through the foreach loop which causes a warning as objects are casted to string. And the API of getEscaped() declares that the input value has to be a string and not a object.</p>

<p>Using this I would simply define a own Default Filter which accepts and returns objects.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2009-08-25T15:13:36.000+0000</p> 
        <div class="body">
            <p>Additionally I would not know how escaping of a object should work.
Escaping can only be applied to a string. Therefor a casting is expected behaviour.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2009-08-26T11:47:33.000+0000</p> 
        <div class="body">
            <p>Closing this issue as Won't Fix after a short discussion with the dev-team.</p>

<p>Reason:
getEscaped() escapes data which is intended for usage within the View. This method does not handle non native types. What should be escaped within an object? It would be casted to an string in any case.</p>

<p>Therefor there is no solution for the described case. You would have to extend the needed classes to provide the methodology you wish.</p>

        </div>
    </div>
    </div>

