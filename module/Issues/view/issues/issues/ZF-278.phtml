<h2>ZF-278: DB Adapter / PDO: quoting PHP's null value, working with empty/null values in columns</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2006-07-21T04:57:00.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2007-07-05T14:43:16.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>0.9.2 (06/Apr/07)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Bill Karwin (bkarwin)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Db</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-900">ZF-900</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Summary tells it all.</p>

<pre class="highlight"><code>
echo $db-&gt;quoteInto('some_field is ?', null);
</code></pre>

<p>Produces: "some_field is '0'" which is invalid SQL.</p>

<p>I'm using the current function to quote values that can be null:</p>

<pre class="highlight"><code>
  function sqlFor( $value )
  {
    $db = Zend::registry('db');
    if ( $value === null ) {
      return 'is NULL';
    }
    elseif ( is_array($value) ) {
      $values = array();
      foreach ( $value as $v ) {
        $values[] = $db-&gt;quoteInto('?', $v);
      }
      return 'in (' . explode(', ', $values) . ')';
    }
    else {
      return $db-&gt;quoteInto('= ?', $value);
    }
  }
</code></pre>

<p>Maybe something similar could be used to quote null values properly. I've only used this with MySQL and have no clue if it's portable to other DBs.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Gavin (gavin) on 2006-07-24T21:47:37.000+0000</p> 
        <div class="body">
            <p>Please suggest some practical use cases, including why quoteInto() is needed instead of quote().</p>

<p>For example, what if the SQL needed is "not null" instead of "is null"?</p>

<p>What if the developer's code needs "foo &lt;&gt; 3" or "foo is null", depending on some extraneous condition?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Sami Samhuri (sjs) on 2006-07-25T03:19:39.000+0000</p> 
        <div class="body">
            <p>You're absolutely right. I hadn't thought past my limited use of SQL here.</p>

<p>quoteInto() is not needed, but it is a useful convenience. If you put it that way quoteInto() is never really needed. The db I'm using has integer fields that default to null, which is why I need to check for null and return different SQL if it's null or not.</p>

<p>quote() turns null into '' (empty single quotes in a string). Fixing that is easier, it could check for null and return 'NULL' or the quoted value.</p>

<p>The only way I can think of to fix quoteInto() to do the right thing, would be to check for null values and then mangle the preceding operator, changing = to IS and &lt;&gt; or != to IS NOT.</p>

<p>For &lt;, &gt;, &lt;=, &gt;= I'm not sure what would be appropriate.</p>

<p>If you're interested in this behaviour at all I'll post a patch. If this is beyond the scope of what quoteInto() should do then I'll let it rest.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Gavin (gavin) on 2006-07-25T13:59:57.000+0000</p> 
        <div class="body">
            <p>I'll post a lengthy analysis of quoting issues throughout the Zend_Db* classes to the mail list soon.  Your use case (working with nulls) had not been raised earlier, yet remains an important and common one that ZF needs to intuitively support.  Your participation in helping arrive at a broad solution for quoting issues, not just quoteInto(), would be most welcome.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2006-11-13T15:14:32.000+0000</p> 
        <div class="body">
            <p>Changing fix version to 0.8.0.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-02-16T17:39:17.000+0000</p> 
        <div class="body">
            <p>Linking to ZF-900.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-04-04T14:45:11.000+0000</p> 
        <div class="body">
            <p>SQL parameters are intended to be used as placeholders for values.  Values are expressions that can be used in equality/inequality comparisons.  The NULL keyword in SQL does not fit this definition.</p>

<p>If you really need to parameterize the string 'NULL' and interpolate it into an expression, use the Zend_Db_Expr class:</p>

<pre class="highlight"><code>
$db-&gt;quoteInto('column_name IS ?', new Zend_Db_Expr('NULL'))
</code></pre>

        </div>
    </div>
    </div>

