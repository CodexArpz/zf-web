<h2>ZF-10623: BBCode Parser returns wrong value for multibyte strings when mbstring.func_overload is enabled</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2010-11-02T06:01:28.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-11-20T21:37:23.000+0000</dd>

    <dt>Status:</dt>
    <dd>Open</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Rob van Aarle (scaror)
            </dd>

    <dt>Assignee:</dt>
    <dd>
        None
                    </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Markup</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <pre class="highlight"><code>
$oBbParser = Zend_Markup::factory('Bbcode');
echo $oBbParser-&gt;render('a[foo]'); // prints 'a[foo]'
echo $oBbParser-&gt;render('€[foo]'); // prints '€', but should have printed '€[foo]'
</code></pre>

<p>h5.Description
When mbstring.func_overload is enabled for strings, the above issue arises. I tracked it down to the Zend_Markup_Parser_Bbcode class. This class relies on preg_match() and its 'offset' parameter). This parameter indicates the start in +bytes+ (<em>php.net: The optional parameter offset can be used to specify the alternate place from which to start the search (in bytes)</em>). However, the value of this 'offset' parameter is calculated using strlen().</p>

<p>h5.Solution
A function to count the number of bytes should be used instead of counting the number of characters. To verify, I've replaced all 4 occurrences of strlen($str) with mb_strlen($str, 'latin1') in the Zend_Markup_Parser_Bbcode class. The example on top prints the correct rendered value then.</p>

<p>h5.Explanation
When mbstring.func_overload is not enabled for strings, then strlen() returns the number of bytes of a multibyte string, and everything works fine. When mbstring.func_overload is enabled for strings, the strlen() function behaves as mb_strlen() and returns the number of characters of a multibyte string. Things go wrong in this case.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Rob van Aarle (scaror) on 2010-11-02T06:10:36.000+0000</p> 
        <div class="body">
            <p>'latin' should be 'latin1'</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Pieter Kokx (kokx) on 2010-11-02T06:34:20.000+0000</p> 
        <div class="body">
            <p>I checked this with my own PHP configuration and since the default (and recommended) value for mbstring.func_overload is 0, this is more a configuration problem rather than a coding bug. From my point of view, a note in the documentation would be better than changing the code for this.</p>

        </div>
    </div>
    </div>

