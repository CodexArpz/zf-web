<h2>ZF-731: Define own formats</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2007-01-09T09:50:15.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2007-07-05T14:43:38.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>0.8.0 (21/Feb/07)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Thomas Weidner (thomas)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Thomas Weidner (thomas)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Locale</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Zend_Locale_toNumber (toxxx) should accept user given formating rules.</p>

<p>Instead of using the predefined locale format a own format should also be setable overruling the locale setting.
Parameter has to be optional.</p>

<p>Zend_Locale_Format::toNumber($value, $precision = false, $format = null, $locale = null)
$format has to be set in LDML format</p>

<h2>0,###;-#.###,### for example</h2>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Gavin (gavin) on 2007-01-19T16:38:07.000+0000</p> 
        <div class="body">
            <p>In order to avoid API problems with having a long list of optional parameters,
what do you think about the following?</p>

<pre class="highlight"><code>
Zend_Locale_Format::toNumberFormat($value, $format, $precision = false)
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2007-01-19T17:00:17.000+0000</p> 
        <div class="body">
            <p>No way...</p>

<p>I can't delete the $locale parameter because without it I would not know the seperators, the standard format, the fraction seperator and the minus sign which has to be used for localized values.</p>

<p>The $locale parameter makes the Zend_Locale_Format::toNumberFormat function locale aware... without it the function would have no sense.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Gavin (gavin) on 2007-01-19T17:42:13.000+0000</p> 
        <div class="body">
            <p>I didn't intend to leave off the $locale parameter.
However, this does raise another issue and another possibility:</p>

<p>We could create a new class, or extend/modify Zend_Measure_Number to support:</p>

<pre class="highlight"><code>
$numberString = new Zend_Measure_Number($input, Zend_Measure::NUMERALS, $locale)
$numberString-&gt;setPrecision(3);
$numberString-&gt;setLocale('de_AT');
$numberString-&gt;toNumeralFormat($value, $format);
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2007-01-20T16:22:02.000+0000</p> 
        <div class="body">
            <p>Zend_Measure's useage is converting between different units and systems. This has nothing to do with the actual issue.</p>

<p>Having Zend_Locale_Format::toNumber();
being extended to not only support the default formats but also self defined ones is a problem which has to be solved within Zend_Locale_Format... otherwise we would duplicate existing code.</p>

<p>Myself is not seeing any problem with the first approach but a little bit different :</p>

<pre class="highlight"><code>
Zend_Locale_Format::toNumberFormat($value, $format, $locale = false);
</code></pre>

<p>The precission can be defined within the format and does not need an own parameter if self defined formats are used.
The standard formats always leave the precission as long as the original defines it. So we need $precission for the standard formats but not for the self defined ones.</p>

<p>A format like ##,#0.# would define unlimited precission
A format like ###0.000;-###0.0 would define a precission of 3 for positive, and 1 for negative values.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Gavin (gavin) on 2007-01-29T19:44:30.000+0000</p> 
        <div class="body">
            <p>If you write the documentation and unit tests for this addition, then I would support adding this feature, after we finish all the other more important tasks for i18n components.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2007-01-30T03:51:39.000+0000</p> 
        <div class="body">
            <p>Fixed with SVN 3090</p>

        </div>
    </div>
    </div>

