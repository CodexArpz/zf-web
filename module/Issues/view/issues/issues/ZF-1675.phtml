<h2>ZF-1675: Zend_Db::factory() is hardcoded</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2007-07-03T01:30:06.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2008-01-23T18:42:11.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.0.2 (25/Sep/07)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Bill Karwin (bkarwin)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Db</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Line: 169</p>

<pre class="highlight"><code>
$adapterName = 'Zend_Db_Adapter_' . str_replace(' ', '_' , ucwords(str_replace('_', ' ', $adapterName)));
</code></pre>

<p>Just to use a different adapter class, do we have to extend the entire Zend_Db class? How about changing the function signature to:</p>

<pre class="highlight"><code>
public static function factory( $adapterName, array $config = array(), $adapterClass = 'Zend_Db_Adapter' )
</code></pre>

<p>Now the Line: 169 reads like so:</p>

<pre class="highlight"><code>
$adapterName = $adapterClass . '_' . str_replace(' ', '_' , ucwords(str_replace('_', ' ', $adapterName)));
</code></pre>

<p>Or, better yet, like so (DELETE LINE 168):</p>

<pre class="highlight"><code>
$adapterName = str_replace(' ', '_' , ucwords(str_replace('_', ' ', strtolower( $adapterClass . '_' . $adapterName))));
</code></pre>

<p>The above obviously reduces the number of files and classes in the application.</p>

<p>The above change is backwards-compatible, too.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-07-03T10:59:27.000+0000</p> 
        <div class="body">
            <p>Another way to solve this without breaking the interface is to add the class namespace as an element in the options array:</p>

<p>Usage:</p>

<pre class="highlight"><code>
$db = Zend_Db::factory('MyAdapter', array(
    'username' =&gt; 'bill', // and other parameters
    'adapterNamespace' =&gt; 'MyClasses'
);
</code></pre>

<p>Code in the {{Zend_Db::factory()}} method:</p>

<pre class="highlight"><code>
if (isset($config['adapterNamespace'])) {
    $namespace = $config['adapterNamespace'];
    unset($config['adapterNamespace']);
} else {
    $namespace = 'Zend_Db_Adapter';
}
$adapterName = str_replace(' ', '_' , ucwords(str_replace('_', ' ', strtolower( $namespace . '_' . $adapterName))));
</code></pre>

<p>It is not obvious how this change reduces the number of classes in an application.  In fact, it is a general rule that in almost every instance of stating that something is obvious, it is not.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Shekar Reddy (zendfw) on 2007-07-03T13:28:46.000+0000</p> 
        <div class="body">
            <p>The default is to use something like Zend_Db_Adapter_Pdo_Mysql class that comes with the framework by specifying 'pdo_mysql' as the adapter name. If I subclass this adapter class with something like Widgets_Db_Adapter_Pdo_Mysql, there is currently no way to use my class instead of the default framework class because 'Zend_Db_Adapter_' namespace is prefixed to the adapter name in a hardcoded way.  At present, I'm creating a subclass of Zend_Db just to be able to use my adapter class which seems an overkill just to specify a different adapter class. The above change would elegantly offer the ability to use a different adapter class instead of the default and I don't need to use an extension of Zend_Db either - I can use Zend_Db straight and get rid of the subclass of Zend_Db. It reduces one file and one class in the application.</p>

<p>However, your approach to using the options array for the namespace is more ideal :)</p>

<p>Please go ahead...</p>

<p>Thanks!</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-07-03T13:44:53.000+0000</p> 
        <div class="body">
            <p>For what it's worth, you're right that currently there is no way to use the {{factory()}} method to instantiate your custom adapter classes outside the Zend_Db_Adapter namespace, but there is a way to use them:</p>

<pre class="highlight"><code>
$db = new Widgets_Db_Adapter_Pdo_Mysql($config);
</code></pre>

<p>Using the {{factory()}} method is a convenience, but it is not required.  It does make things handy, though, if you want to specify the adapter class in a config file for your application.  I commonly do this:</p>

<pre class="highlight"><code>
$config = new Zend_Config_Ini(...);
$db = Zend_Db::factory($config-&gt;database-&gt;adapter, $config-&gt;database-&gt;params-&gt;toArray());
</code></pre>

<p>This of course does not work for user-supplied adapters unless the factory method accepts an alternative adapter namespace.  So I think this feature is a good one.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-08-01T20:56:18.000+0000</p> 
        <div class="body">
            <p>Implemented in revision 5961.  Docs and tests are also updated.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-01-23T18:42:11.000+0000</p> 
        <div class="body">
            <p>Updating Fix Version to follow issue tracker conventions.</p>

        </div>
    </div>
    </div>

