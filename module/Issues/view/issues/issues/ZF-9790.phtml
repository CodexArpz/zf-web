<h2>ZF-9790: allow to attach a formatter from .ini configuration and do not hardcode formatter class in Log_Writer class</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2010-05-02T14:07:06.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2011-09-19T13:24:33.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.11.3 (01/Feb/11)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Benoît Durand (intiilapa)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Log</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-9176">ZF-9176</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
        <li><a href="/issues/secure/attachment/13144/Log_config-formatter.patch">Log_config-formatter.patch</a></li>
        </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>It would be great if we could attach a formatter directly through application.ini file AND without having to subclass a writer either.</p>

<p>Currently we can define the following entries for Zend_Log:</p>

<pre class="highlight"><code>
resources.log.stream.writerName = "Stream"
resources.log.stream.writerParams.stream = APPLICATION_PATH "/../logs/app.log"
resources.log.stream.writerNamespace = "Library_Log_Writer"
resources.log.stream.filterName = "Priority"
resources.log.stream.filterParams.priority = Zend_Log::WARN

// It would be great if we could add something like:
resources.log.stream.formatterName = "MyFormaterName"
resources.log.stream.formatterNamespace = "My_Formater_Namespace"
</code></pre>

<p>This would improve logging customization a lot and make it easier.
It would be absolutely necessary to remove currently hardcoded formatter classes within Writer classes.</p>

<pre class="highlight"><code>
        $this-&gt;_formatter = new Zend_Log_Formatter_Simple();
</code></pre>

<p>=&gt; currently, to attach your own formatter, you have to create your own subclass of Writter_Stream... Not very flexible...</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Erick Wilder de Oliveira (erickwilder) on 2010-06-02T05:45:54.000+0000</p> 
        <div class="body">
            <p>Not sure if is really necessary to extend a Writer. Just setting a Formatter to the current Writer doesn't does the trick?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Aaron S. Hawley (ashawley) on 2010-06-18T14:26:31.000+0000</p> 
        <div class="body">
            <p>Here's a patch against 1.10.4 that simply duplicates the way writers and filters are generated as application resources.</p>

<p>I tested only:</p>

<pre class="literal">
resources.log.db.formatterName = "Simple"
resources.log.db.formatterParams.format = '%timestamp%: %message%'
</pre>

<p>Not the testing of Namespace.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Benoît Durand (intiilapa) on 2010-12-30T09:54:02.000+0000</p> 
        <div class="body">
            <p>r23599</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Aaron S. Hawley (ashawley) on 2011-01-03T08:53:58.000+0000</p> 
        <div class="body">
            <p>Benoit, thanks for taking this on.</p>

<p>Perhaps, this should be added to the existing tests for Zend_Application_Resource_Log?</p>

<pre class="literal">
Index: trunk/tests/Zend/Application/Resource/LogTest.php
===================================================================
--- trunk/tests/Zend/Application/Resource/LogTest.php   (revision 23599)
+++ trunk/tests/Zend/Application/Resource/LogTest.php   (working copy)
@@ -109,5 +109,13 @@
             'writerParams' =&gt; array(
                 'stream' =&gt; $stream,
-            )
+            ),
+            'filterName'   =&gt; 'Priority',
+            'filterParams' =&gt; array(
+                'priority' =&gt; Zend_Log::INFO,
+            ),
+            'formatterName'   =&gt; 'Simple',
+            'formatterParams' =&gt; array(
+                'format' =&gt; '%timestamp%: %message%',
+            ),
         ));
 
@@ -121,5 +129,7 @@
         $log-&gt;log($message = 'logged-message', Zend_Log::INFO);
         rewind($stream);
-        $this-&gt;assertContains($message, stream_get_contents($stream));
+        $contents = stream_get_contents($stream);
+        $this-&gt;assertStringEndsWith($message, $contents);
+        $this-&gt;assertRegexp('/\d\d:\d\d:\d\d/', $contents);
     }
</pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2011-01-04T06:04:18.000+0000</p> 
        <div class="body">
            <p>Benoit -- patch looks good, but I also think Aaron's point is valid. Once the Log resource test is added, feel free to merge to the 1.11 release branch.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Benoît Durand (intiilapa) on 2011-01-23T01:16:18.000+0000</p> 
        <div class="body">
            <p>I have committed the unit test of Aaron in the trunk r23642. And, I added documentation in r23675.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Alberto (neofraktal) on 2011-02-10T00:48:12.000+0000</p> 
        <div class="body">
            <p>Documentation appears as:</p>

<p>filterParams -&gt; format</p>

<p>but you must to use:</p>

<p>formatterParams -&gt; format</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Peter Culak (fr0z3nk0) on 2011-09-14T12:56:08.000+0000</p> 
        <div class="body">
            <p>I'm using tag <a href="http://framework.zend.com/svn/framework/standard/tags/release-1.11.7/library/Zend">http://framework.zend.com/svn/framework/…</a>.
this setting in application.ini just gets ignored:
resources.log.stream.formatterNamespace = "Model_Log_Formatter"</p>

<p>the reason for it is that Zend_Log calls this on line 225:
$formatter = $this-&gt;_constructFromConfig('formatter', $config, $this-&gt;_defaultFormatterNamespace);</p>

<p>has this fix not been included in release yet ?</p>

<p>peter</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Benoît Durand (intiilapa) on 2011-09-14T18:31:52.000+0000</p> 
        <div class="body">
            <p>What fix are you talking about?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Peter Culak (fr0z3nk0) on 2011-09-15T08:56:25.000+0000</p> 
        <div class="body">
            <p>fix which would allow to set a namespace from through config file. the patch attached above doesn't allow that as it does: 
protected function _constructFormatterFromConfig($config)
+    {
+        $formatter = $this-&gt;_constructFromConfig('formatter', $config, $this-&gt;_defaultFormatterNamespace);</p>

<p>$this-&gt;_defaultFormatterNamespace should probably pick up formatterNamespace from config first and if not set then use default one.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Benoît Durand (intiilapa) on 2011-09-15T17:43:38.000+0000</p> 
        <div class="body">
            <p>This feature is added since version 1.11.3. Would you have a sample of a configuration that does not work?</p>

<p>You make a misreading of the source code. You should read the <em>getClassName</em> method: a default namespace is used only if the configuration does not provide to complete the short name.</p>

<pre class="highlight"><code>
        // line 295
        $namespace = $defaultNamespace;
        if (isset($config[ $type . 'Namespace' ])) {
            $namespace = $config[ $type . 'Namespace' ];
        }

        $fullClassName = $namespace . '_' . $className;
</code></pre>

<p>You should open a new issue as bug to discuss if there really is a bug on this feature.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Peter Culak (fr0z3nk0) on 2011-09-19T13:24:33.000+0000</p> 
        <div class="body">
            <p>you're right, it works fine. I was extending formatter and i didn't overload factory method so it was returning wrong class.</p>

<p>thanx for your time ;)</p>

        </div>
    </div>
    </div>

