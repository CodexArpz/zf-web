<h2>ZF-1680: Zend_Auth_Adapter_DbTable authenticate active users only</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2007-07-04T17:50:15.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2008-01-23T18:32:36.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.0.1 (30/Jul/07)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Ralph Schindler (ralph)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Auth</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-2405">ZF-2405</a></li>
            <li><a href="/issues/browse/ZF-2238">ZF-2238</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>In most cases, when a user signs-up to a website, he becomes active only after confirmation (for example after providing a code that has been sent  via email). Before confirmation, there is a field "status" in the users table set to "off" or "inactive". As soon as the user confirms his account, the "status" field is set to "on" or "active".</p>

<p>The problem with the authenticate() method is that it only checks the identity, credential and applies an optional treatment. So in the case described above, an unactive user would be authenticated successfully.</p>

<p>I think there should be a 5th optional parameter, some kind of "where" statement. Example:</p>

<pre class="highlight"><code>
$authAdapter-&gt;setTableName('doby')
    -&gt;setIdentityColumn('username')
    -&gt;setCredentialColumn('password')
    -&gt;setCondition('status = ?', $statusValue); // $statusValue = 'on'
</code></pre>

<p>As the framework works actually, to have the authenticate method work as expected, I need to have 2 tables: one with the unconfirmed users, and one with the confirmed, and then searching the confirmed table for authentication. This is not very practical.</p>

<p>I hope you find this proposal interesting and useful.</p>

<p>Loris Candylaftis</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Darby Felton (darby) on 2007-07-05T14:37:24.000+0000</p> 
        <div class="body">
            <p>Assigning to [~ralph].</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Darby Felton (darby) on 2007-07-05T14:44:28.000+0000</p> 
        <div class="body">
            <p>My first impression leads me to suggest to simply extend the existing functionality with the custom functionality described above. Is this not workable for some reason?</p>

<p>Another possible solution would be to use the DbSelect adapter, currently available in the incubator:</p>

<p><a href="http://framework.zend.com/svn/framework/trunk/incubator/library/Zend/Auth/Adapter/DbSelect.php">http://framework.zend.com/svn/framework/â€¦</a></p>

<p>Finally, there is another possible solution: if you consider whether or not an authenticated user account is "active" as access control, and not part of authentication, then you can move this logic to where other access control rules may be implemented (e.g., within a controller or controller plugin). That is, change the one-step process of authentication into two steps:</p>

<h1>authenticate as normal</h1>

<h1>upon authentication success, apply additional access control logic (e.g., whether or not the account is "active")</h1>

<p>Changing the priority to minor, since easy workarounds seem to be viable at this point.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ralph Schindler (ralph) on 2007-07-18T14:58:44.000+0000</p> 
        <div class="body">
            <p>what about this:</p>

<pre class="highlight"><code>

// create an adapter that will work on a database table
$adapter = new Zend_Auth_Adapter_DbTable($db, 'users', 'username', 'password', 'MD5(?) AND active = 1');

</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Loris Candylaftis (loloziberlo) on 2007-07-18T17:47:05.000+0000</p> 
        <div class="body">
            <p>Yes Ralph! your suggestion works perfect!</p>

<pre class="highlight"><code>
// Set the input credential values (from the login form)
$authAdapter-&gt;setIdentity($this-&gt;_request-&gt;getPost('username'))
        -&gt;setCredential($this-&gt;_request-&gt;getPost('password'))
        -&gt;setCredentialTreatment('md5(?) AND active = 1');
</code></pre>

<p>Thank you very much.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Darby Felton (darby) on 2007-07-19T07:49:07.000+0000</p> 
        <div class="body">
            <p>Resolving as not an issue.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-01-23T18:32:36.000+0000</p> 
        <div class="body">
            <p>Updating Fix Version to follow issue tracker conventions.</p>

        </div>
    </div>
    </div>

