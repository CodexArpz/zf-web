<h2>ZF-11709: $request-&gt;isPost($formName) to check for submitted form</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2011-08-30T17:56:13.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-03-06T14:26:53.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Duccio Gasparri (duccio@citta.bo.it)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Matthew Weier O'Phinney (matthew)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Controller</li>
            <li>Zend_Form</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>I see in all the examples</p>

<pre class="highlight"><code>
class SomeController {
function someAction()
{
    $request = $this-&gt;getRequest();
    $form = new CustomForm();
    if($request-&gt;isPost()) {
        $form-&gt;populate($request-&gt;getPost());
        .... do stuff here
    }
    $this-&gt;view-&gt;form = $form;
}
}
</code></pre>

<p>This works fine all the times... almost.</p>

<p>If there's a _forward to someAction by another controller/action that received a POST as well (for example, a login controller/action), the someAction processes the original form, not its own form. It would be handy (and good practice) to actually check if the processed form is indeed the intended form.</p>

<p>Form name is not trasmitted over POST, but we can anyway have Zend_Controller_Request_Http::isPost() check for some hidden field of specific name:</p>

<pre class="highlight"><code>
    /**
     * Was the request made by POST?
     * 
     * @param string|bool $fieldName
     * @return boolean
     */
    public function isPost($requiredField = false)
    {
        if ('POST' != $this-&gt;getMethod())
            return false;
             
        if($requiredField === false)
            return true;

        return $this-&gt;__isset($requiredField);
      
    }
</code></pre>

<p>so a simple if($this-&gt;getRequest()-&gt;isPost('someform')) would do the trick. Of course it is up to the form creator to identify a form field (hidden input, submit button name, or similar) that is unique to that form.</p>

<p>The same purpose could be achieved with more precision by creating a specific form element (hidden input text) reporting the (md5?) form class name.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Adam Lundrigan (adamlundrigan) on 2012-03-05T23:30:47.000+0000</p> 
        <div class="body">
            <p>IMO, this (determining whether the right fields were submitted) is part of form validation and should be the responsibility of the application, not the framework.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2012-03-06T14:26:42.000+0000</p> 
        <div class="body">
            <p>I concur with Adam. If there's a possibility of multiple forms, or forms targeted at different actions of the same request, you should be namespacing them -- usually this is done by grouping all fields of a form under the form's name ("login[user]", "login[password]" vs "comment[subject]", "comment[body]"). This is logic that you as a developer need to perform -- not the framework (though the framework enables this practice in Zend_Form).</p>

        </div>
    </div>
    </div>

