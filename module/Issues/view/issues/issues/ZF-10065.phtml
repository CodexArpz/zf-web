<h2>ZF-10065: Radio Element adds a Label decorator automatically</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2010-06-28T06:09:25.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-07-30T13:58:38.000+0000</dd>

    <dt>Status:</dt>
    <dd>Closed</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Goran Juric (gog)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Frank Brückner (frosch)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Form</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-11517">ZF-11517</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>When using radio element with a custom decorator (for example view script decorator) and you do not set the disableLoadDefaultDecorators flag to true the element adds a label decorator to the element.</p>

<p>This is not consistent with how other elements work, and in my case it causes the element to render an extra label decorator.</p>

<p>Commit 22151 in the Subversion changed the way Zend_Form_Element_Radio loads decorators.</p>

<p>What has changed can be seen here:
<a href="http://framework.zend.com/code/browse/Standard_Library/standard/trunk/library/Zend/Form/Element/Radio.php?r1=20096&amp;r2=22151">http://framework.zend.com/code/browse/…</a> and the commit message refers to the issue ZF-9682.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Boyan Krastev (masterbo) on 2010-08-10T01:44:38.000+0000</p> 
        <div class="body">
            <p>Adding a simple check if there are decorators set will fix the issue.</p>

<p>Also the @return type is wrong. Should be Zend_Form_Element_Radio.</p>

<pre class="highlight"><code>

    /**
     * Load default decorators
     *
     * Disables "for" attribute of label if label decorator enabled.
     *
     * @return void
     */
    public function loadDefaultDecorators()
    {
        if ($this-&gt;loadDefaultDecoratorsIsDisabled()) {
            return $this;
        }

        /**
         * Check if there are decorators set
         */
        $decorators = $this-&gt;getDecorators();
        if (!empty($decorators)) {
            return $this;
        }

        parent::loadDefaultDecorators();
        $this-&gt;addDecorator('Label', array('tag' =&gt; 'dt',
                                           'disableFor' =&gt; true));
        return $this;
    }
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Simon Corless (sico) on 2010-12-08T14:21:56.000+0000</p> 
        <div class="body">
            <p>Why not check for a label decorator and if there is one set the disableFor attribute to true. If there isn't a label then add the default one as normal and set the disableFor.</p>

<pre class="literal"> 

As an additional problem this also overwrites any changes you make such as to the requiredSuffix and optionalSuffix.

In fact could the whole method be changed to the following:

</pre>

<p>public function loadDefaultDecorators()
    {
        parent::loadDefaultDecorators();</p>

<pre><code>    if (!($label = $this-&gt;getDecorator('Label'))) {
        return $this;
    }

    $label-&gt;setOption('disableFor', true);

    return $this;
}````
</code></pre>

<p>The parent::loadDefaultDecorators(); takes care of the first if() in the new method itself. Then you just check for a label and disable the for option.</p>

        </div>
    </div>
    </div>

