<h2>ZF-2178: Zend_Cache utilization within other Zend Framework components</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2007-11-09T16:54:09.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-11-20T21:37:53.000+0000</dd>

    <dt>Status:</dt>
    <dd>Open</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Wil Sinclair (wil)
            </dd>

    <dt>Assignee:</dt>
    <dd>
        None
                    </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Cache</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Define an infrastucture and/or coding standard for utilizing Zend_Cache within other ZF components. The best backend available should be automatically chosen to make optimal Zend_Cache utilization relatively transparent. On the other hand, the backend should be configurable for each instance of use.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-04-18T13:11:48.000+0000</p> 
        <div class="body">
            <p>This doesn't appear to have been fixed in 1.5.0. Please update if this is not correct.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-06-09T13:08:04.000+0000</p> 
        <div class="body">
            <p>Stas, I believe you were looking in to this. Do you have a proposal? Is it something we'd want to do in one of the upcoming minor releases?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by old of Satoru Yoshida (yoshida@zend.co.jp) on 2009-04-03T16:39:40.000+0000</p> 
        <div class="body">
            <p>set component</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Aleksi Ursin (aleksiu) on 2009-06-11T03:32:05.000+0000</p> 
        <div class="body">
            <p>Quickly thinking check if registry has "Zend_Cache"  or "Zend_Cache_Transparent" and use that, and have methods for replacing the engine if needed to, ie. $object-&gt;setCacheEngine(obj Zend_Cache)</p>

<p>Easy and transparent.</p>

<p>Keys: a prefix, object name, method name, method call variables, potentially aswell (some) object variables. and have a method to change the prefix.</p>

<p>registry "Zend_Cache_Transparent" could be used to give more feasible option to set a separate engine for the transparent caching portions.</p>

<p>Most of the work ofc is in the other ZF components to actually implement this.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Satoru Yoshida (satoruyoshida) on 2009-12-02T06:38:35.000+0000</p> 
        <div class="body">
            <p>I found it as unassigned.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Marc Bennewitz (private) (mabe) on 2010-02-27T19:27:44.000+0000</p> 
        <div class="body">
            <p>With the current Zend_Cache implementation there are some issues for using it on other components:</p>

<ol><li><p>The only interface to use is an instance of Zend_Cache_Core (frontend) there is no way to set/add cache functionality without changing options of this instance
-&gt; e.g. serializing have to be done by component. If its enabled on cache it will be double serialized</p></li>
<li><p>The components can't use the best cache frontend because it gets already a frontend.
-&gt; e.g. data of Zend_Locale/Zend_Config are based on source files and should use Zend_Cache_Frontend_File to remove cache if source file changed but can't use because they have to accept a cache instance of Zend_Cache_Core</p></li>
<li><p>The components can't accept backends to set they're own frontend because the backend alone isn't simple to get and on set they're own frontend some options are set to backend, too. Additionally some important options like "caching" are not configurable out of the component.
-&gt; e.g. $frontend-&gt;setLifetime() sets the lifetime directive on backend, too</p></li>
</ol>
        </div>
    </div>
    </div>

