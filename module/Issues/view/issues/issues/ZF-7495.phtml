<h2>ZF-7495: Add plugin interface to Zend_Form init() and validate()</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>New Feature</dd>

    <dt>Created:</dt>
    <dd>2009-08-05T16:12:13.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-11-20T20:52:42.000+0000</dd>

    <dt>Status:</dt>
    <dd>Closed</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
        None
                    </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Form</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>There needs to be a plugin interface for the global operations in Zend_Form.  For init(), there needs to be a preInit() and postInit() method.  A common situation for users is to override the decorators globally.  Currently that means calling {{setElementDecorators()}} after adding the form elements:</p>

<pre class="highlight"><code> 
class My_Login_Form extends Zend_Form
{
  init()
  {
    //add elements
    //call setElementDecorators
  }
}
</code></pre>

<p>A more convenient way that would fit with the flexible nature of Zend_Form would be to provide a plugin interface for the init() method.  So the user could create a global wrapper class, My_Form and then provide instructions for all forms.</p>

<pre class="highlight"><code>
class My_Form extends Zend_Form
{
  preInit()
  {
    //set global form defaults, charset, etc.
  }

  init()
  {
     //this gets run if the extending class doesn't have an init() method
     parent::init();
  }


  postInit()
  {
     //here we can do stuff after all the fields are added with init
     
  }

  preValidate()
  {
    //add a default validator 
   }

  postValidate()
  {
 
  }

}
</code></pre>

<p>Then the user could extend this class for all forms instead of Zend_Form.  If they didn't want the default for the form they could locally override postInit():</p>

<pre class="highlight"><code>
class My_Login_Form extends My_Form
{
    init()
    {
      //add fields, postInit() will apply default decorators to all with setElementDecorators()
    }

}

class My_Password_Form extends My_Form
{
   init()
   {
      //add fields
   }

   postInit()
   {
     //override default decorator here because we don't want it.
   }
}

</code></pre>

<p>This would add a great deal of flexibility and would only take about 6 lines of code in Zend Form.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Satoru Yoshida (satoruyoshida) on 2009-08-05T17:59:46.000+0000</p> 
        <div class="body">
            <p>Set component and auto reassign</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2009-08-05T19:33:21.000+0000</p> 
        <div class="body">
            <p>This is a very interesting idea; can you please create a proposal for it so we can see if there might be other areas within Zend_Form that could use plugin support?</p>

<p>Once you do, please close this issue.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Rob Allen (rob) on 2012-11-20T20:52:42.000+0000</p> 
        <div class="body">
            <p>Bulk change of all issues last updated before 1st January 2010 as "Won't Fix".</p>

<p>Feel free to re-open and provide a patch if you want to fix this issue.</p>

        </div>
    </div>
    </div>

