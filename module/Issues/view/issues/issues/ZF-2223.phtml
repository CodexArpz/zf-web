<h2>ZF-2223: Zend_Db_Select needs a new in() method</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>New Feature</dd>

    <dt>Created:</dt>
    <dd>2007-11-21T03:58:03.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2008-02-26T12:56:05.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.0.4 (26/Feb/08)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Shekar Reddy (zendfw)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Thomas Weidner (thomas)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Db_Select</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Discussed with Thomas Wiedner regarding the where() that used to implode an array of values for use in "IN (...)" inside a SQL but broke in 1.0.2+ where they are imploding only the first array element (for the single placeholder):</p>

<pre class="highlight"><code>
Giving an array as input would result in each single placeholder to be replaced.

where("price &gt; ? and price &lt;= ?", array(2, 10));
becomes
"where (price &gt; 2 and price &lt;= 10)"

This is the reason why the automatic imploding does not work anymore.

Principially there are several ways:
You could for example do the following:

$array = array(2,10,14,20);
$addwhere = "";
for($i = 1; $i &lt; count($array); ++$i) {
   $addwhere .= ", ?";
}

$where = "price IN (?". $addwhere.")";
$db-&gt;where($where, $array);

In my eyes it would be better to have a own "IN" function avaiable for such clauses. I am actually also working on a BEWTEEN function which adds between to be avaiable.

So eighter you use a the codesnippet I gave you or you add a new issue for creating a "IN" function which handles the IN within the where clause.
</code></pre>

<p>The old code used to be generic and would apply to both - a normal where clause with a boolean operator or an IN operator because it used to implode the array into a list of values but the new enhancements need IN-operators handled differently using arrays and multiple placeholders. I guess having a separate in() function for such expressions is more ideal and desired at the component level.</p>

<p>Thanks!</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2007-11-22T03:33:28.000+0000</p> 
        <div class="body">
            <p>Unassigned as original additional where methodology was not accepted.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Darby Felton (darby) on 2008-01-10T10:25:36.000+0000</p> 
        <div class="body">
            <p>Reduced priority to should have</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2008-02-05T16:45:14.000+0000</p> 
        <div class="body">
            <p>Actually the where clause has been reworked and supports the array - in syntax as before.
So there is no need for an explicit "in" method as the standard where can be used without problems.</p>

<pre class="highlight"><code>
$select-&gt;where("column IN (?)", array(2, 3, 4, 5, 6, 7));
</code></pre>

        </div>
    </div>
    </div>

