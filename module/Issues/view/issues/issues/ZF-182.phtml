<h2>ZF-182: Zend_Db_Select::where() and ::orWhere() are insufficient</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2006-07-01T09:58:52.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2007-07-05T14:43:12.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>0.8.0 (21/Feb/07)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Ron Korving (abraxas)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Bill Karwin (bkarwin)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Db_Select</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>It seems to me that where() and orWhere() in the Zend_Db_Select class are not enough to be able to write all queries. It does not support the nesting of conditions, which doesn't enforce the user with abstraction in somewhat more complex cases. With where() and orWhere() I cannot write this:</p>

<p>select * from mytable where a=3 and (a=b or (a=c and a=d))</p>

<p>A syntax like the following could be a solution:</p>

<pre class="highlight"><code>

(or)

</code></pre>

<p>$select-&gt;where(
  $select-&gt;and(
    'a=3',
    $select-&gt;or(
      'a=b',
      $select-&gt;and('a=c', 'a=d')
    )
  )
);
```</p>

<p>So I don't really have an elegant solution, but the current situation really is insufficient if you ask me. Also, looking at the current implementation of Zend_Db_Select, it seems like you hardly use the adapter in __toString(), but I guess you're well aware of this and it will improve in the future (Oracle, unlike MySQL for example, uses "(+)" for certain join syntax).</p>

<p>You might find this interesting by the way: <a href="http://troels.arvin.dk/db/rdbms/">http://troels.arvin.dk/db/rdbms/</a></p>

<p>Bill: sounds reasonable, thanks.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Ron Korving (abraxas) on 2006-07-03T09:15:52.000+0000</p> 
        <div class="body">
            <p>added multiline solution example</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ron Korving (abraxas) on 2006-07-03T09:20:58.000+0000</p> 
        <div class="body">
            <p>added ``` tags and renamed whereOr() and whereAnd() to or() and and(), because it could also be useful for "having" and possibly other areas.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2006-11-13T15:22:38.000+0000</p> 
        <div class="body">
            <p>Changing fix version to 0.8.0.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-01-03T13:27:49.000+0000</p> 
        <div class="body">
            <p>Regarding joins, all RDBMS brands now support ANSI SQL-92 syntax for JOIN...ON.<br />
Zend_Db should not support the proprietary join syntax forms used by Oracle and Microsoft.</p>

<p>Regarding complex expressions, I agree that the method interface does not support arbitrary expressions.</p>

<p>There are many other SQL features for which Zend_Db does not offer a method interface.  Subqueries, UNION, FOR UPDATE, etc.  Also RDBMS-proprietary clauses such as index hints, locking modes.  It would be cost-prohibitive to support all of the SQL language with a method interface.</p>

<p>The current solution to write queries that are not supported in the method interface is to use the query() method.  You have complete control to write your own SQL query.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-01-05T17:02:21.000+0000</p> 
        <div class="body">
            <p>Recategorize in Zend_Db_Select component.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-02-07T21:13:55.000+0000</p> 
        <div class="body">
            <p>The where() and orWhere() methods of Zend_Db_Select support a majority of common queries.  This class is not able to implement a method interface to the entire SQL language.
Complex queries that are not supported by Zend_Db_Select must be written in SQL and submitted as a string to the Zend_Db_Adapter_*::query() method.</p>

        </div>
    </div>
    </div>

