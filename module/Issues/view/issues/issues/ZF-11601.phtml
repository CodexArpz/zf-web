<h2>ZF-11601: Default module autoloader in bootstrap</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2011-07-23T23:12:17.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2011-07-23T23:13:21.000+0000</dd>

    <dt>Status:</dt>
    <dd>Open</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Erik Landvall (erik-landvall)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Matthew Weier O'Phinney (matthew)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Application</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>If one have set the front controller to use a default module I think that autoloader should be returned by the application bootstrap.
Basically I would like for the following code to be the standard functionality: (I think thats what one could expect)</p>

<pre class="highlight"><code>
    protected function _initDefaultModuleAutoloader()
    {
        $fc     = $this-&gt;bootstrap( 'frontController' )
                -&gt;getResource( 'frontController' );
        $module = $fc-&gt;getDefaultModule();
        $path   = $fc-&gt;getModuleDirectory( $module );
        $filter = new Zend_Filter_Word_DashToCamelCase();
        
        $moduleLoader = new Zend_Application_Module_Autoloader(
            array( 'namespace' =&gt; $filter-&gt;filter( $module ),
                   'basePath'  =&gt; $path ));
        $this-&gt;setResourceLoader( $moduleLoader );
    }
</code></pre>

<p>If this functionality is set by default then one can easy add a resource type in a normal fashion.
<em>eg:</em> ````</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>
    <p class="comments">No comments to display</p>
    
</div>

