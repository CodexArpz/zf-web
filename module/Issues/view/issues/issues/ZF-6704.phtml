<h2>ZF-6704: We cant setup plugin options for Zend_Application_Resource_Frontcontroller </h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2009-05-17T12:45:23.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-08-21T09:34:43.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Matthew Weier O'Phinney (matthew)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Application</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-6694">ZF-6694</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>in Zend_Application_Resource_Frontcontroller near line 90. where the plugin is set, we can see no option can be pass to the plugin from the config file.</p>

<p>Actually : 
resources.frontController.plugins.myplugin = "My_Plugin"
resources.frontController.plugins.errorhandler = "Zend_Controller_Plugin_ErrorHandler"</p>

<p>case 'plugins':
    foreach ((array) $value as $pluginClass) {
        $plugin = new $pluginClass();
            $front-&gt;registerPlugin($plugin);
        }
    break;</p>

<p>I transfort that to like this :</p>

<p>resources.frontController.plugins.myplugin = "My_Plugin"    (Old way alway work if no data need to be set)
resources.frontController.plugins.errorhandler.classname = "Zend_Controller_Plugin_ErrorHandler"  (new way to add options to the plugin.)
resources.frontController.plugins.errorhandler.options.module = "default"
resources.frontController.plugins.errorhandler.options.controller = "error" 
...</p>

<p>case 'plugins':
    foreach ((array) $value as $pluginClass) {
        if (is_array($pluginClass)){
           if (!isset($pluginClass['options'])){
        $pluginClass['options'] = array();
       }
       $plugin = new $pluginClass<a href="$pluginClass%5B'options'%5D">'classname'</a>;
        }else{
            $plugin = new $pluginClass();
        }
        $front-&gt;registerPlugin($plugin);
    }
break;</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2009-08-21T09:34:32.000+0000</p> 
        <div class="body">
            <p>The resource was never designed to do this. The reason is because there is no standard constructor argument for plugins -- meaning that we don't have a single approach that will work for any plugin referenced.</p>

<p>If you need to configure a given plugin, you have two options:</p>

<ul><li>Create a resource method or plugin that does this work for you. It might pull configuration options from the bootstrap and pass them to selected plugins, or simply instantiate the plugins directly and pass them into the front controller.</li>
<li>Extend existing plugins to specify your desired defaults, and then specify this pre-configured plugin class to the front controller resource.</li>
</ul>
        </div>
    </div>
    </div>

