<h2>ZF-1709: Validating array of fields validates twice</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2007-07-11T18:36:55.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2008-01-23T18:42:11.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.0.2 (25/Sep/07)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Bill Karwin (bkarwin)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Filter_Input</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Joshua writes:</p>

<p>I am having a problem with Zend_Filter_Input when attempting to validate an array of values using the fields meta command.  What happens is that ZFI passes the array of values to my filter which correctly returns true and then ZFI passes each value separately which fails.  Here is my
code(simplified) pretty much straight from the doc:</p>

<pre class="highlight"><code>
$validators = array(
  'password_check' =&gt; array(
    'StringEquals',
    'presence' =&gt; 'required',
    'fields' =&gt; array('password0', 'password1')
  )
);

$input = new Zend_Filter_Input(array(), $validators, $this-&gt;getRequest()-&gt;getPost()); $input-&gt;addNamespace('Local_Validate');

if (!$input-&gt;isValid()) {

}
</code></pre>

<p>What happens is StringEquals is called three times, once with an array, and once with each string.  Some debug output dumping the value passed to my StringEquals validator produces the following:</p>

<pre class="highlight"><code>
array(2) {
  ["password0"] =&gt; string(9) "Testing1!"
  ["password1"] =&gt; string(9) "Testing1!"
}

string(9) "Testing1!"

string(9) "Testing1!"
</code></pre>

<p>So I looked into ZFI and it appears it handles arrays of fields (line 720 in ZF 1.0.0 v5344) but then it continues to evaluate all fields in the data array <em>seperately</em> validating it against the current validator chain which happens to be the validator StringEquals which only validates arrays...  which of course returns false.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Joshua L Ross (joshualross) on 2007-08-09T19:44:05.000+0000</p> 
        <div class="body">
            <p>As I commented in the newsgroup, the most straightforward fix is to wrap the validation check of a single field in an if statement which counts the fields.  This prevents the subsequent checks of the individual fields when the fields metacommand is used.</p>

<p>Zend/Filter/Input.php 
( * @version    $Id: Input.php 5344 2007-06-15 17:53:11Z bkarwin $)
Starting at Line 720</p>

<pre class="highlight"><code>

if (1 == count($validatorRule[self::FIELDS])) {
    if (!$validatorRule[self::VALIDATOR_CHAIN]-&gt;isValid($value)) {
        $this-&gt;_invalidMessages[$validatorRule[self::RULE]] = 
            $validatorRule[self::VALIDATOR_CHAIN]-&gt;getMessages();
        $this-&gt;_invalidErrors[$validatorRule[self::RULE]] = 
            $validatorRule[self::VALIDATOR_CHAIN]-&gt;getErrors();
        unset($this-&gt;_validFields[$fieldKey]);
        $failed = true;
        if ($validatorRule[self::BREAK_CHAIN]) {
            return;
    }
}
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Joshua L Ross (joshualross) on 2007-08-09T19:46:51.000+0000</p> 
        <div class="body">
            <p>correction to the above code, I lost a parenthesis in the copy/paste:</p>

<pre class="highlight"><code>
if (1 == count($validatorRule[self::FIELDS])) {
    if (!$validatorRule[self::VALIDATOR_CHAIN]-&gt;isValid($value)) {
        $this-&gt;_invalidMessages[$validatorRule[self::RULE]] = 
            $validatorRule[self::VALIDATOR_CHAIN]-&gt;getMessages();
        $this-&gt;_invalidErrors[$validatorRule[self::RULE]] = 
            $validatorRule[self::VALIDATOR_CHAIN]-&gt;getErrors();
        unset($this-&gt;_validFields[$fieldKey]);
        $failed = true;
        if ($validatorRule[self::BREAK_CHAIN]) {
            return;
        }
    }
}
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Joshua L Ross (joshualross) on 2007-08-09T20:10:39.000+0000</p> 
        <div class="body">
            <p>disregard my comments.... its been a long day.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-08-09T21:19:00.000+0000</p> 
        <div class="body">
            <p>Fixed in revision 6053.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-09-11T15:38:59.000+0000</p> 
        <div class="body">
            <p>Update fix version to 1.0.2 after merging revision 6053 to branch.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-01-23T18:42:11.000+0000</p> 
        <div class="body">
            <p>Updating Fix Version to follow issue tracker conventions.</p>

        </div>
    </div>
    </div>

