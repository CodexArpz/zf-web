<h2>ZF2-484: Log\Writer\Db not able to handle timestamp colum as datetime can't be converted to string</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2012-08-20T23:49:32.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-08-24T19:36:35.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Benoît Durand (intiilapa)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend\Log</li>
            <li>log</li>
            <li>log\writer\db</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>The doWrite method of Log\Writer\Db currently doesn't handle the datetime object, so when the query is set to be manually built (something which should perhaps use the Sql insert class?) the datetime object cannot be converted to a string, and it errors out. Tested with sqlite, though perhaps not for mysql?</p>

<p>This poses an urgent problem of how the datetime is to be formatted for the user, should it be something like simply getTimestamp() on the datetime object, or formatted with date("r", ...) for example. The user should be able to choose.</p>

<p>See the two commented out lines below.</p>

<pre class="highlight"><code>
    protected function doWrite(array $event)
    {
        if (null === $this-&gt;db) {
            throw new Exception\RuntimeException('Database adapter is null');
        }

        // manually format timestamp
//        $event['timestamp'] = $event['timestamp']-&gt;getTimestamp();
//        $event['timestamp'] = date("r", $event['timestamp']-&gt;getTimestamp());

        // Transform the event array into fields
        if (null === $this-&gt;columnMap) {
            $dataToInsert = $this-&gt;eventIntoColumn($event);
        } else {
            $dataToInsert = $this-&gt;mapEventIntoColumn($event, $this-&gt;columnMap);
        }

        $statement = $this-&gt;db-&gt;query($this-&gt;prepareInsert($this-&gt;db, $this-&gt;tableName, $dataToInsert));
        $statement-&gt;execute($dataToInsert);

    }
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Benoît Durand (intiilapa) on 2012-08-24T19:36:35.000+0000</p> 
        <div class="body">
            <p>Fixed on master</p>

        </div>
    </div>
    </div>

