<h2>ZF-820: Method in Zend_Controller_Request_Http for analyzing USER_AGENT</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>New Feature</dd>

    <dt>Created:</dt>
    <dd>2007-01-29T15:01:13.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2010-11-26T22:28:41.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.11.0 (02/Nov/10)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Marc Hodgins (mjh_ca)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Controller</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>This is a feature request for a method in Zend_Controller_Request_Http to provide structured information about the request's USER_AGENT to a ZF application.</p>

<p>Sometimes an application must output custom markup, javascript, or css depending on the browser brand or version.  Parsing the USER_AGENT of a request is difficult and error-prone, because so many browsers use nonstandard syntax.</p>

<p>It makes sense that the Zend Framework can provide a "best-practices" method to parse known USER_AGENT strings and return the information in some kind of canonical, structured form, using an associative array for individual information pieces for instance.  Then this information can be used by the View or even by the Controller to deliver custom output in the response.</p>

<p>References:
<a href="http://www.faqs.org/rfcs/rfc1945.html">http://www.faqs.org/rfcs/rfc1945.html</a>
<a href="http://www.faqs.org/rfcs/rfc2068.html">http://www.faqs.org/rfcs/rfc2068.html</a>
<a href="http://www.dotvoid.com/view.php?id=68">http://www.dotvoid.com/view.php?id=68</a>
<a href="http://www.texsoft.it/index.php?c=software&amp;m=sw.php.useragent&amp;l=it">http://texsoft.it/index.php/â€¦</a></p>

<p>This is probably not a mandatory feature for ZF 1.0, but we may want to revisit this in a subsequent release.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2007-11-16T14:38:16.000+0000</p> 
        <div class="body">
            <p>Scheduling for 1.1.0</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by julien PAULI (doctorrock83) on 2007-11-30T04:41:53.000+0000</p> 
        <div class="body">
            <p>In addition to that, ZendFramework could care about the wonderfull PHP function called get_browser().
browscap.ini must be provided in php.ini for that function to work, so ZF could check about that, and use it if available in addition to 'standard parsings'</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-04-18T13:12:04.000+0000</p> 
        <div class="body">
            <p>This doesn't appear to have been fixed in 1.5.0. Please update if this is not correct.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2008-04-22T10:41:11.000+0000</p> 
        <div class="body">
            <p>Scheduling for next minor release; would be good to have for use with ContextSwitch.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by julien PAULI (doctorrock83) on 2009-04-30T13:59:52.000+0000</p> 
        <div class="body">
            <p>This could serve as well for a future HTTP-based caching mechanism.</p>

<p>I suggest the creation of classe(s) and object(s) that could answer</p>

<pre class="highlight"><code>
$infos = $request-&gt;getClientInfo();
$info-&gt; ...

- isIE(), isFireFox() is{any-familly}()
- getVersion()
- supportsCompression()
- supportsCookies() (that needs a 3xx refresh ...)
- isFlashRequest() and isXmlHttpRequest() could move to that object
- getLanguage() to map with Zend_Locale that actually does the job itself if I remember
- getIP()
- isProxied()
</code></pre>

<p>Just some ideas ...</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Marc Hodgins (mjh_ca) on 2010-11-26T22:28:29.000+0000</p> 
        <div class="body">
            <p>Resolved by the addition of Zend_Http_UserAgent in ZF 1.11.</p>

        </div>
    </div>
    </div>

