<h2>ZF-9435: Zend_Application_Bootstrap_Boostrap::getResourceLoader() calculates extra, invalid paths for Autoloader</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Performance Improvement</dd>

    <dt>Created:</dt>
    <dd>2010-03-16T10:22:08.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2013-03-13T08:01:31.000+0000</dd>

    <dt>Status:</dt>
    <dd>Reopened</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.12.1 (18/Dec/12)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Ken Stanley (dohpaz)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Matthew Weier O'Phinney (matthew)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Application</li>
            <li>FixForZF1.12</li>
            <li>zf-caretaker-adamlundrigan</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
        <li><a href="/issues/secure/attachment/12904/ZF-9435.patch">ZF-9435.patch</a></li>
        </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>If an application is using an empty appnamespace, the Zend_Application_Bootstrap_Boostrap::getResourceLoader() incorrectly adds the path to Zend/Application/Bootstrap to the autoloader, causing the application to have to scan extra directories when looking to map plugins, models, etc. Attached is a patch that changes the identical comparison to an equality comparison when testing the appnamespace to avoid the extra erroneous paths.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Adam Lundrigan (adamlundrigan) on 2012-05-18T12:01:59.000+0000</p> 
        <div class="body">
            <p>Downgrading to minor performance improvement</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Rob Allen (rob) on 2012-11-06T19:32:11.000+0000</p> 
        <div class="body">
            <p>Fixed in trunk(25072) and release-1.2(25073)</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Jacek Kobus (jacekkobus.com) on 2013-01-15T21:45:51.000+0000</p> 
        <div class="body">
            <p>So now if I have application/plugins Plugin_Example the autoloader will not find it, unless I'll add a resource loader to the loader's stack ?
All my applications stopped working after this path.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Frank Br√ºckner (frosch) on 2013-01-16T07:05:46.000+0000</p> 
        <div class="body">
            <p>@Jacek
Register your plugin. <a href="http://framework.zend.com/manual/1.12/en/zend.application.available-resources.html#zend.application.available-resources.frontcontroller">Look at the docs</a>. (Example #5)</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Jacek Kobus (jacekkobus.com) on 2013-01-16T11:27:33.000+0000</p> 
        <div class="body">
            <p>Hello Frank, thanks for your response.
That's not a problem with plugin registration as it is already registered. It just doesnt know that Plugin_ resides in /plugins.</p>

<p>I'm using default directory structure and all resources fail to load as Zend_Application_Module_Autoloader pointing to my APPLICATION_PATH is not initialized anymore.
application/services Service_
application/models Model_
application/plugins Plugin_
application/forms Form_</p>

<p>Those are "application-wide" resources used in all modules.
My default module resides in /modules/default and that is probably the problem here.</p>

<p>So if anyone out there is using such structure, and APPLICATION_PATH/{model|form|etc...} to store their base classes or reusable components for other modules, after update to 1.12.1 it will stop working.</p>

<p>{</p>

<pre class="highlight"><code>
public function _initResourceLoader()
    {
        if($this-&gt;getResourceLoader() === null){
            $this-&gt;setResourceLoader(new Zend_Application_Module_Autoloader(array(
                'namespace' =&gt; $this-&gt;getAppNamespace(),
                'basePath'  =&gt; dirname(__FILE__),
            )));
        }
    }
{</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Christoph Roensch (croensch) on 2013-03-12T14:22:19.000+0000</p> 
        <div class="body">
            <p>I use this too, simply to load "Form_Foo" from "/application/forms/Foo.php". Now it breaks :(</p>

<pre class="highlight"><code>
<a href="http://c2.com/cgi/wiki?AbuseCase">production]
appNamespace = ;Zend_Application_Module_Autoloader
</a></code></pre>

<p>If i delete that entry, everything works as intended, no resource loader is built. Haven't tested for modules tough.</p>

<p>I suspect the source code change was not need, maybe it's possible to reach the desired performance improvement with a more precise/explicit configuration and still have the [#AbuseCase to work with.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Christoph Roensch (croensch) on 2013-03-13T08:01:31.000+0000</p> 
        <div class="body">
            <p>I like to reopen and revert this. To my understanding the feature worked as intended.</p>

        </div>
    </div>
    </div>

