<h2>ZF-9710: When having subforms FormErrors produce bad html markup.</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2010-04-19T09:35:34.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2011-02-22T13:05:10.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.11.4 (03/Mar/11)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Sergio Medina (sergiomedinag)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Matthew Weier O'Phinney (matthew)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Form</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>This only happens when having subforms in a form with the Zend_Form_Decorator_FormErrors. To produce the error:</p>

<pre class="highlight"><code>
class Form_User extends Zend_Form
{
    public function init()
    {
        $this-&gt;addElement('text', 'name', array(
            'label' =&gt; 'Name',
            'required' =&gt; true,
            'validators' =&gt; array(
                new Zend_Validate_Alnum(true)
            )
        ));

        $this-&gt;addElement('text', 'email', array(
            'label' =&gt; 'Email',
            'required' =&gt; true,
            'validators' =&gt; array(
                new Zend_Validate_EmailAddress()
            )
        ));

        $subform = new Zend_Form_SubForm();

        $subform-&gt;addElement('text', 'address', array(
            'label' =&gt; 'Address',
            'required' =&gt; true,
            'validators' =&gt; array(
                new Zend_Validate_Alnum(true)
            )
        ));

        $subform-&gt;addElement('text', 'phone', array(
            'label' =&gt; 'Phone number',
            'required' =&gt; true
        ));

        $this-&gt;addSubForm($subform, 'location');

        $this-&gt;addElement('submit', 'submit');

        $this-&gt;addDecorators(array(
            new Zend_Form_Decorator_FormErrors(),
            new Zend_Form_Decorator_FormElements(),
            new Zend_Form_Decorator_HtmlTag(array(
                'tag' =&gt; 'dl', 'class' =&gt; 'zend_form'
            )),
            new Zend_Form_Decorator_Form(),
        ));
    }
}
</code></pre>

<p>When submiting with missing or wrong values it will produce:</p>

<pre class="highlight"><code>
</code></pre><code>Element Label
      </code><code>Errors
      
    Element Label
      </code><code>Errors
      
    </code><code>Subform element Label
        </code><code>Errors
        
    </code>

<p>The problem seems to be in the protected method _recurseSubform.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Christian Albrecht (alab) on 2010-05-24T09:12:14.000+0000</p> 
        <div class="body">
            <p>Fixed in trunk r22270 and merged into 1.10 release branch</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Marian BÃ¶hmer (djmabo) on 2010-07-05T07:08:30.000+0000</p> 
        <div class="body">
            <p>It seems to be not fixed. Subform without elements produces:</p>

<ul class="form-errors"><li></li></ul>
        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by B. Charbonneau (beeboo) on 2010-09-14T10:43:47.000+0000</p> 
        <div class="body">
            <p>There seems to be no check on if the subform is actually rendering any markup.</p>

<p>Mimicking the behavior from its own render() method, the following patch fixes the issue [~djmabo] is seeing</p>

<pre class="highlight"><code>
Index: FormErrors.php
===================================================================
--- FormErrors.php  (revision 22929)
+++ FormErrors.php  (working copy)
@@ -451,9 +451,13 @@
                              .  $this-&gt;getMarkupListItemEnd();
                 }
             } else if ($subitem instanceof Zend_Form &amp;&amp; !$this-&gt;ignoreSubForms()) {
-                $content .= $this-&gt;getMarkupListStart()
-                          . $this-&gt;_recurseForm($subitem, $view)
-                          . $this-&gt;getMarkupListEnd();
+                $markup = $this-&gt;_recurseForm($subitem, $view);
+
+                if (!empty($markup)) {
+                    $content .= $this-&gt;getMarkupListStart()
+                              . $markup
+                              . $this-&gt;getMarkupListEnd();
+                }
             }
         }
         return $content;
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by B. Charbonneau (beeboo) on 2010-10-13T20:57:55.000+0000</p> 
        <div class="body">
            <p>Any comments on the proposed patch?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Fabio Almeida (fabius) on 2010-12-09T06:16:09.000+0000</p> 
        <div class="body">
            <p>I confirm this bug is still around in 1.11.1.</p>

<p>The proposed patch works fine for me.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by B. Charbonneau (beeboo) on 2011-01-20T12:49:33.000+0000</p> 
        <div class="body">
            <p>I can confirm this bug is still around in 1.11.2.</p>

<p>This patch will adds a test case for this issue to the FormErrorsTest test class:</p>

<pre class="highlight"><code>Index: Zend/Form/Decorator/FormErrorsTest.php
===================================================================
--- Zend/Form/Decorator/FormErrorsTest.php  (revision 23642)
+++ Zend/Form/Decorator/FormErrorsTest.php  (working copy)
@@ -138,6 +138,18 @@
         $this-&gt;assertSame($content, $this-&gt;decorator-&gt;render($content));
     }
 
+    public function testNotGeneratingSubformErrorMarkupWrappingWhenNoErrors()
+    {
+        $form1 = new Zend_Form_SubForm();
+        $form2 = new Zend_Form();
+        $form2-&gt;addSubForm($form1, 'sub');
+        $form2-&gt;setView($this-&gt;getView());
+        $this-&gt;decorator-&gt;setElement($form2);
+
+        $content = 'test content';
+        $this-&gt;assertSame($content, $this-&gt;decorator-&gt;render($content));
+    }
+
     public function testRenderRendersAllErrorMessages()
     {
         $this-&gt;setupForm();
@@ -289,6 +301,7 @@
         $this-&gt;assertNotContains('form-badness', $html);
     }
 
+
     /**
      * @dataProvider markupOptionMethodsProvider
      */
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2011-01-21T14:49:00.000+0000</p> 
        <div class="body">
            <p>Actually, that test case is flawed -- there's no way it can produce the value "test content" from rendering. The output actually rendered is "</p>

<ul class="form-errors"><li></li></ul><p>" -- which makes sense to me. Can you clarify the test case?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by B. Charbonneau (beeboo) on 2011-01-26T11:29:01.000+0000</p> 
        <div class="body">
            <p>I disagree. $this-&gt;decorator-&gt;render($content) does indeed render 'test content' (the FormErrors decorator prepends or appends error messages to the standard output of a form).  A number of the other tests use a similar method calling render() (indeed, thats where I copied it from). The complete output is actually:</p>

<pre class="highlight"><code>
test content
</code></pre><code></code><code></code>

<p>Where as the correctly patched code outputs:</p>

<pre class="highlight"><code>
test content
</code></pre>

<p>So, in summary, in the case where a form has no errors, the Zend_Form_Decorator_FormErrors::render($content) merely returns $content.</p>

<pre class="highlight"><code>
        $markup = $this-&gt;_recurseForm($form, $view);

        if (empty($markup)) {
            return $content;
        }
</code></pre>

<p>This is true for the case where a form has NO subforms.</p>

<p>In the case where a form has a subform, during the _recurseForm method, the decorator ALWAYS wraps the output from the recursive response to _recurseForm even when the response is empty.</p>

<pre class="highlight"><code>
            } else if ($subitem instanceof Zend_Form &amp;&amp; !$this-&gt;ignoreSubForms()) {
                $content .= $this-&gt;getMarkupListStart()
                          . $this-&gt;_recurseForm($subitem, $view)
                          . $this-&gt;getMarkupListEnd();
            }
</code></pre>

<p>So when FormErrors decorates a form with no errors and no subforms, the return from render is merely the form itself. When FormErrors decorates a form with no errors and at least one subform also with NO errors, the return from render is "</p>

<ul class="form-errors"><li></li></ul><p>" (the inner</p>

<p>&lt;</p>

<p>ul&gt; from the lines 453-457 above, and the outer</p>

<p>&lt;</p>

<p>ul&gt; caused by code continuing past line 95 highlighted above).</p>

<p>This behavior is invalid, and I believe the test case I've provided correctly identifies the problem.</p>

<p>The patch I've proposed above checks makes _recurseForm check for a non-empty response from $this-&gt;_recurseForm($subitem, $view) before wrapping it with the error list start/end markup, just as render() does with the over-all response from _recurseForm().</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2011-02-22T13:05:08.000+0000</p> 
        <div class="body">
            <p>Unit test case added and patch applied.</p>

        </div>
    </div>
    </div>

