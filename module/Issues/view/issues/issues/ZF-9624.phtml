<h2>ZF-9624: Zend_Mail_Protocol_Imap::_decodeLine incorrectly parses some kind of strings</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2010-04-06T10:55:08.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-06-11T19:13:06.000+0000</dd>

    <dt>Status:</dt>
    <dd>Open</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Nico Edtinger (nico)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Mail_Storage</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <pre class="highlight"><code>
$imap-&gt;_decodeLine("1 FETCH (BODYSTRUCTURE (("TEXT" "PLAIN" ("CHARSET" "ISO-8859-1") NIL NIL "7BIT" 1753 34 NIL NIL NIL)("TEXT" "HTML" ("CHARSET" "ISO-8859-1") NIL NIL "7BIT" 2161 56 NIL NIL NIL) "ALTERNATIVE" ("BOUNDARY" "00032557554a10c659047e4f6eb7") NIL NIL))") </code></pre>

<p>returns</p>

<pre class="highlight"><code>
Array
(
    [0] =&gt; Array
        (
            [0] =&gt; 1
            [1] =&gt; FETCH
            [2] =&gt; Array
                (
                    [0] =&gt; BODYSTRUCTURE
                    [1] =&gt; Array
                        (
                            [0] =&gt; Array
                                (
                                    [0] =&gt; TEXT
                                    [1] =&gt; PLAIN
                                    [2] =&gt; Array
                                        (
                                            [0] =&gt; CHARSET
                                            [1] =&gt; ISO-8859-1
                                        )

                                    [3] =&gt; NIL
                                    [4] =&gt; NIL
                                    [5] =&gt; 7BIT
                                    [6] =&gt; 1753
                                    [7] =&gt; 34
                                    [8] =&gt; NIL
                                    [9] =&gt; NIL
                                    [10] =&gt; NIL)("TEXT"
                                    [11] =&gt; HTML
                                    [12] =&gt; Array
                                        (
                                            [0] =&gt; CHARSET
                                            [1] =&gt; ISO-8859-1
                                        )

                                    [13] =&gt; NIL
                                    [14] =&gt; NIL
                                    [15] =&gt; 7BIT
                                    [16] =&gt; 2161
                                    [17] =&gt; 56
                                    [18] =&gt; NIL
                                    [19] =&gt; NIL
                                    [20] =&gt; NIL
                                )

                            [1] =&gt; ALTERNATIVE
                            [2] =&gt; Array
                                (
                                    [0] =&gt; BOUNDARY
                                    [1] =&gt; 00032557554a10c659047e4f6eb7
                                )

                            [3] =&gt; NIL
                            [4] =&gt; NIL
                        )

                )

        )

)
</code></pre>

<p>The issue is the NIL)("TEXT" in the return array, i.e. a closing parenthesis immediately followed by an opening parenthesis doesn't seem to be correctly parsed.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Dominik Gehl (dominikgehl) on 2010-04-06T11:59:04.000+0000</p> 
        <div class="body">
            <p>The following quick patch fixes the problem:</p>

<p>--- library/Zend/Mail/Protocol/Imap.php 2010-01-05 21:05:09.000000000 -0500
+++ Imap.php    2010-04-06 14:55:07.000000000 -0400
@@ -203,6 +203,11 @@
         $line = rtrim($line) . ' ';
         while (($pos = strpos($line, ' ')) !== false) {
             $token = substr($line, 0, $pos);
+            $closingPos = strpos($token,')(');
+            if (($closingPos !== false) &amp;&amp; ($token[0] != '"')) {
+                $pos = $pos - strlen($token) + $closingPos;
+                $token = substr($line, 0, $pos+1);
+            }
             while ($token[0] == '(') {
                 array_push($stack, $tokens);
                 $tokens = array();</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Dominik Gehl (dominikgehl) on 2010-09-29T12:00:23.000+0000</p> 
        <div class="body">
            <p>patch against SVN checkout:</p>

<p>--- library/Zend/Mail/Protocol/Imap.php (revision 23006)
+++ library/Zend/Mail/Protocol/Imap.php (working copy)
@@ -203,6 +203,11 @@
         $line = rtrim($line) . ' ';
         while (($pos = strpos($line, ' ')) !== false) {
             $token = substr($line, 0, $pos);
+            $closingPos = strpos($token,')(');
+            if (($closingPos !== false) &amp;&amp; ($token[0] != '"')) {
+                $pos = $pos - strlen($token) + $closingPos;
+                $token = substr($line, 0, $pos+1);
+            }
             while ($token[0] == '(') {
                 array_push($stack, $tokens);
                 $tokens = array();</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Dominik Gehl (dominikgehl) on 2010-09-29T12:03:17.000+0000</p> 
        <div class="body">
            <p>With patch in place, the code in the ticket description returns</p>

<pre class="highlight"><code>
Array
(
    [0] =&gt; 1
    [1] =&gt; FETCH
    [2] =&gt; Array
        (
            [0] =&gt; BODYSTRUCTURE
            [1] =&gt; Array
                (
                    [0] =&gt; Array
                        (
                            [0] =&gt; TEXT
                            [1] =&gt; PLAIN
                            [2] =&gt; Array
                                (
                                    [0] =&gt; CHARSET
                                    [1] =&gt; ISO-8859-1
                                )
                            [3] =&gt; NIL
                            [4] =&gt; NIL
                            [5] =&gt; 7BIT
                            [6] =&gt; 1753
                            [7] =&gt; 34
                            [8] =&gt; NIL
                            [9] =&gt; NIL
                            [10] =&gt; NIL
                        )
                    [1] =&gt; Array
                        (
                            [0] =&gt; TEXT
                            [1] =&gt; HTML
                            [2] =&gt; Array
                                (
                                    [0] =&gt; CHARSET
                                    [1] =&gt; ISO-8859-1
                                )
                            [3] =&gt; NIL
                            [4] =&gt; NIL
                            [5] =&gt; 7BIT
                            [6] =&gt; 2161
                            [7] =&gt; 56
                            [8] =&gt; NIL
                            [9] =&gt; NIL
                            [10] =&gt; NIL
                        )
                    [2] =&gt; ALTERNATIVE
                    [3] =&gt; Array
                        (
                            [0] =&gt; BOUNDARY
                            [1] =&gt; 00032557554a10c659047e4f6eb7
                        )
                    [4] =&gt; NIL
                    [5] =&gt; NIL
                )
        )
)
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Dominik Gehl (dominikgehl) on 2011-07-06T15:52:42.000+0000</p> 
        <div class="body">
            <pre class="highlight"><code>

&lt;?php

require_once('Zend/Mail/Protocol/Imap.php');

class Zend_Mail_Protocol_TestAsset_Imap extends Zend_Mail_Protocol_Imap 
{ 
    protected $proxy; 

    public function __construct(Zend_Mail_Protocol_Imap $imap) 
    { 
        $this-&gt;proxy = $imap; 
    } 

    public function _decodeLineOld($line) 
    { 
        return $this-&gt;proxy-&gt;_decodeLine($line);
    } 

    public function _decodeLine($line) 
    { 
        $tokens = array();
        $stack = array();

    /*
        We start to decode the response here. The unterstood tokens are:
        literal
        "literal" or also "lit\\er\"al"
        {bytes}literal
        (literals*)
        All tokens are returned in an array. Literals in braces (the last unterstood
        token in the list) are returned as an array of tokens. I.e. the following response:
        "foo" baz {3}bar ("f\\\"oo" bar)
        would be returned as:
        array('foo', 'baz', 'bar', array('f\\\"oo', 'bar'));

        // TODO: add handling of '[' and ']' to parser for easier handling of response text
     */
        //  replace any trailling  including spaces with a single space
        $line = rtrim($line) . ' ';
        while (($pos = strpos($line, ' ')) !== false) {
            $token = substr($line, 0, $pos);
            $closingPos = strpos($token,')(');
            if (($closingPos !== false) &amp;&amp; ($token[0] != '"')) {
                $pos = $pos - strlen($token) + $closingPos;
                $token = substr($line, 0, $pos+1);
            }
            while ((strlen($token) &gt; 0) &amp;&amp; ($token[0] == '(')) {
                array_push($stack, $tokens);
                $tokens = array();
                $token = substr($token, 1);
            }
            if ((strlen($token) &gt; 0) &amp;&amp; ($token[0] == '"')) {
                #Friedl's unrolled loop
                if (preg_match('%^\(*"([^"\\\\]*(?:\\\\.[^"\\\\]*)*)" *%', $line, $matches)) {
                    $tokens[] = $matches[1];
                    $line = substr($line, strlen($matches[0]));
                    continue;
                }
            }
            if ((strlen($token) &gt; 0) &amp;&amp; ($token[0] == '{')) {
                $endPos = strpos($token, '}');
                $chars = substr($token, 1, $endPos - 1);
                if (is_numeric($chars)) {
                    $token = '';
                    while (strlen($token) &lt; $chars) {
                        $token .= $this-&gt;_nextLine();
                    }
                    $line = '';
                    if (strlen($token) &gt; $chars) {
                        $line = substr($token, $chars);
                        $token = substr($token, 0, $chars);
                    } else {
                        $line .= $this-&gt;_nextLine();
                    }
                    $tokens[] = $token;
                    $line = trim($line) . ' ';
                    continue;
                }
            }
            if ((strlen($token)&gt;0) &amp;&amp; $stack &amp;&amp; $token[strlen($token) - 1] == ')') {
                // closing braces are not seperated by spaces, so we need to count them
                $braces = strlen($token);
                $token = rtrim($token, ')');
                // only count braces if more than one
                $braces -= strlen($token) + 1;
                // only add if token had more than just closing braces
                if (rtrim($token) != '') {
                    $tokens[] = rtrim($token);
                }
                $token = $tokens;
                $tokens = array_pop($stack);
                // special handline if more than one closing brace
                while ($braces-- &gt; 0) {
                    $tokens[] = $token;
                    $token = $tokens;
                    $tokens = array_pop($stack);
                }
            }
            $tokens[] = $token;
            $line = substr($line, $pos + 1);
        }

        // maybe the server forgot to send some closing braces
        while ($stack) {
            $child = $tokens;
            $tokens = array_pop($stack);
            $tokens[] = $child;
        }

        return $tokens;
    } 
} 
?&gt;
</code></pre>

<pre class="highlight"><code>
&lt;?php
require_once(dirname(__FILE__) . '/Zend_Mail_Protocol_TestAsset_Imap.php');

class Zend_Mail_Protocol_Imap_Test extends PHPUnit_Framework_TestCase {

    public function testDecodeLineOldParenthesis() {
        $imap  = new Zend_Mail_Protocol_Imap(); 
        $proxy = new Zend_Mail_Protocol_TestAsset_Imap($imap); 

        $line   = '1 FETCH (BODYSTRUCTURE (("TEXT" "PLAIN" ("CHARSET" "ISO-8859-1") NIL NIL "7BIT" 1753 34 NIL NIL NIL)("TEXT" "HTML" ("CHARSET" "ISO-8859-1") NIL NIL "7BIT" 2161 56 NIL NIL NIL) "ALTERNATIVE" ("BOUNDARY" "00032557554a10c659047e4f6eb7") NIL NIL))'; 
        $result = $proxy-&gt;_decodeLineOld($line); 
        $expectedResult = array(
            1,
            'FETCH',
            array(
                'BODYSTRUCTURE',
                array(
                    array(
                        'TEXT',
                        'PLAIN',
                        array('CHARSET', 'ISO-8859-1'),
                        'NIL',
                        'NIL',
                        '7BIT',
                        1753,
                        34,
                        'NIL',
                        'NIL',
                        'NIL)("TEXT"',
                        'HTML',
                        array('CHARSET', 'ISO-8859-1'),
                        'NIL',
                        'NIL',
                        '7BIT',
                        2161,
                        56,
                        'NIL',
                        'NIL',
                        'NIL'
                    ),
                    'ALTERNATIVE',
                    array(
                        'BOUNDARY',
                        '00032557554a10c659047e4f6eb7'
                    ),
                    'NIL',
                    'NIL'
                )
            )
        );
        $this-&gt;assertEquals($expectedResult, $result);
    }

    public function testDecodeLineParenthesis() {
        $imap  = new Zend_Mail_Protocol_Imap(); 
        $proxy = new Zend_Mail_Protocol_TestAsset_Imap($imap); 

        $line   = '1 FETCH (BODYSTRUCTURE (("TEXT" "PLAIN" ("CHARSET" "ISO-8859-1") NIL NIL "7BIT" 1753 34 NIL NIL NIL)("TEXT" "HTML" ("CHARSET" "ISO-8859-1") NIL NIL "7BIT" 2161 56 NIL NIL NIL) "ALTERNATIVE" ("BOUNDARY" "00032557554a10c659047e4f6eb7") NIL NIL))'; 
        $result = $proxy-&gt;_decodeLine($line); 
        $expectedResult = array(
            1,
            'FETCH',
            array(
                'BODYSTRUCTURE',
                array(
                    array(
                        'TEXT',
                        'PLAIN',
                        array('CHARSET', 'ISO-8859-1'),
                        'NIL',
                        'NIL',
                        '7BIT',
                        1753,
                        34,
                        'NIL',
                        'NIL',
                        'NIL'
                    ),
                    array(
                        'TEXT',
                        'HTML',
                        array('CHARSET', 'ISO-8859-1'),
                        'NIL',
                        'NIL',
                        '7BIT',
                        2161,
                        56,
                        'NIL',
                        'NIL',
                        'NIL'
                    ),
                    'ALTERNATIVE',
                    array(
                        'BOUNDARY',
                        '00032557554a10c659047e4f6eb7'
                    ),
                    'NIL',
                    'NIL'
                )
            )
        );
        $this-&gt;assertEquals($expectedResult, $result);
    }

    public function testDecodeLineOldEscapedQuote() {
        $imap  = new Zend_Mail_Protocol_Imap(); 
        $proxy = new Zend_Mail_Protocol_TestAsset_Imap($imap); 

        $line = '* XLIST (\HasNoChildren) "/" "test\"label1"';
        $result = $proxy-&gt;_decodeLineOld($line); 
        $expectedResult = array('*', 'XLIST', array('\HasNoChildren'), '/', 'test\\', 'label1"');
        $this-&gt;assertEquals($expectedResult, $result);
    }

    public function testDecodeLineEscapedQuote() {
        $imap  = new Zend_Mail_Protocol_Imap(); 
        $proxy = new Zend_Mail_Protocol_TestAsset_Imap($imap); 

        $line = '* XLIST (\HasNoChildren) "/" "test\"label1"';
        $result = $proxy-&gt;_decodeLine($line); 
        $expectedResult = array('*', 'XLIST', array('\HasNoChildren'), '/', 'test\"label1');
        $this-&gt;assertEquals($expectedResult, $result);
    }
}
?&gt;

</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Russell Kenny (rkenny3264) on 2012-06-11T19:13:06.000+0000</p> 
        <div class="body">
            <p>Thank you Dominik!  This was still broken in ZF 1.11.11, I applied your patch and was then able to parse BODYSTRUCTURE tags correctly.  Much hair pulling was avoided.</p>

        </div>
    </div>
    </div>

