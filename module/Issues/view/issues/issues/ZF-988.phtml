<h2>ZF-988: fetchAll ORDER BY clause no longer working</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2007-02-27T20:46:58.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2007-07-05T14:43:52.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>0.9.0 (17/Mar/07)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Bill Karwin (bkarwin)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Db_Table</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>When I upgraded my application from Zend 0.6 to 0.8, I was unable to use any in-line Postgresql functions in my ORDER clauses.</p>

<p>For instance, the following (pseudo) code worked in Zend 0.6:
{quote}
$where = '1=1';
$order = 'lower(name)';
$my_object = $my_zend_db_tabel-&gt;fetchAll($where, $order);
{quote}</p>

<p>Now, as of Zend 0.8, the above returns the following error:
{quote}
 PHP Fatal error:  Uncaught exception 'PDOException' with message 'SQLSTATE[42703]: Undefined column: 7 ERROR:  column "lower(name)" does not exist'
{quote}</p>

<p>If I change the code to the following, it will work:
{quote}
$where = '1=1';
$order = 'name';
$my_object = $my_zend_db_tabel-&gt;fetchAll($where, $order);
{quote}</p>

<p>Is this a bug or a feature? 
Perhaps it is new problem with the PDO PostgreSQL driver?</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Luke Rathbun (lrathbun) on 2007-02-27T20:48:00.000+0000</p> 
        <div class="body">
            <p>fixed one typo</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-02-27T23:06:14.000+0000</p> 
        <div class="body">
            <p>We are trying to implement best practices and promote usage of more secure SQL syntax, by quoting column names wherever we can in the Zend_Db classes.  This also helps if SQL identifiers contain special characters.</p>

<p>The default behavior of Zend_Db is to assume that the argument to the order() method is a column name, and thus should be quoted to reduce risk of SQL injection vulnerability.</p>

<p>I have implemented a class so that strings that should not be quoted can be distinguished from plain column names.  You should be able to use expressions instead of column names this way:</p>

<pre class="highlight"><code>
$where = '1=1';
$order = new Zend_Db_Expr('lower(name)');
$my_object = $my_zend_db_tabel-&gt;fetchAll($where, $order);
</code></pre>

<p>Objects of type Zend_Db_Expr are not quoted; the string value is used verbatim.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Luke Rathbun (lrathbun) on 2007-02-28T10:45:13.000+0000</p> 
        <div class="body">
            <p>Thank you for the information. It is much appreciated.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-02-28T11:10:44.000+0000</p> 
        <div class="body">
            <p>Resolving this issue as "not an issue."  This is more an issue of usage.  The product works as intended (in its current design).</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Luke Rathbun (lrathbun) on 2007-02-28T11:31:33.000+0000</p> 
        <div class="body">
            <p>This does not work either. I get the same error.</p>

<p>Should I open another issue, or post the details here?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Luke Rathbun (lrathbun) on 2007-02-28T11:38:27.000+0000</p> 
        <div class="body">
            <p>Could this be one of the difference between a Zend_Db_Select object and Zend_Db_Table object?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-02-28T12:08:51.000+0000</p> 
        <div class="body">
            <p>Reopened pending solution that works.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-02-28T17:24:59.000+0000</p> 
        <div class="body">
            <p>Fixed in revision 3677.</p>

<p>Now Zend_Db_Table::fetchAll() should handle arguments of type Zend_Db_Expr for the second argument, the $order criteria.</p>

        </div>
    </div>
    </div>

