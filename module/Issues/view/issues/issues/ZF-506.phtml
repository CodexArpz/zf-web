<h2>ZF-506: SSL Handling bug (Not handling buggy servers)</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2006-11-08T07:49:38.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2007-07-05T14:43:25.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>0.6.0 (16/Dec/06)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Shahar Evron (shahar)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Http_Client</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>I'm not sure if everyone gets this problem, but I do and it is a serious headache.</p>

<p>Apparently there are some buggy servers out there that do not cleanly close an SSL connection.</p>

<p>This is from the <a href="http://php.net/file_get_contents">PHP Manual</a>
{quote}
When using SSL, Microsoft IIS will violate the protocol by closing the connection without sending a close_notify indicator. PHP will report this as "SSL: Fatal Protocol Error" when you reach the end of the data. To workaround this, you should lower your error_reporting level not to include warnings. PHP 4.3.7 and higher can detect buggy IIS server software when you open the stream using the https:// wrapper and will suppress the warning for you. If you are using fsockopen() to create an ssl:// socket, you are responsible for detecting and suppressing the warning yourself.
{quote}</p>

<p>This seems to happen for me in calls to fgets inside Zend_Http_Client, Line 252.
Now,  to be fair, I am running 0.1.5.
However, as far as I can tell, this would still happen with trunk and incubator.</p>

<p>I'm not sure of the exact fix for it apart from a well placed @, although I personally hate hiding errors/warnings.</p>

<p>P.S. I'm also running PHP 5.0.4 but the issue seems to be that the ZF code does not handle buggy servers.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Shahar Evron (shahar) on 2006-11-08T07:59:36.000+0000</p> 
        <div class="body">
            <p>Hi,</p>

<p>Actually, the matter of fact is that this is a problem in PHP, and the HTTP client only uses the PHP built-in ssl:// stream handler to do HTTPS. I've noticed this problem before, but had no simple and easy way to fix it except for silencing the error.</p>

<p>I will leave this bug open for now and hopefully will try to find a resolution for this issue before 1.0. Until then, any suggestions are welcome.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Lee Saferite (lsaferite) on 2006-11-08T08:13:02.000+0000</p> 
        <div class="body">
            <p>As I mentioned, I think using @ would fix the issue, however I hate the idea.  On the other hand, it is already being used when opening the socket, so why not use it when reading?</p>

<p>It seems to me that PHP really should handle this problem a bit more gracefully.  Or maybe they should re-write the https wrapper to support writing. (Since the https wrapper handles this problem internally)</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Shahar Evron (shahar) on 2006-11-11T00:58:13.000+0000</p> 
        <div class="body">
            <p>Can you provide a pulic URL that I can use to reproduce and test this problem?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2006-11-13T15:24:57.000+0000</p> 
        <div class="body">
            <p>Changing fix version to 0.6.0.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Alex Adriaanse (alexadriaanse) on 2006-11-18T22:10:17.000+0000</p> 
        <div class="body">
            <p>A URL that triggered this warning for me is <a href="https://records.txdps.state.tx.us/DPS_WEB/Sor/index.aspx?PageIndex=Search&amp;SubmitType=Address">https://records.txdps.state.tx.us/DPS_WEB/Sor/â€¦</a> .</p>

<p>Would using feof() to check to see if the socket has been closed work?  Essentially, do something like this:</p>

<pre class="highlight"><code>
while (!feof($this-&gt;socket) &amp;&amp; $buff = fread($this-&gt;socket, 8192)) {
     $response .= $buff;
}
</code></pre>

<p>Making this change seemed to get rid of the warning for me.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Alex Adriaanse (alexadriaanse) on 2006-11-19T01:01:43.000+0000</p> 
        <div class="body">
            <p>Never mind, I'm still seeing the warnings after my change, it's just sporadic.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Shahar Evron (shahar) on 2006-11-19T03:38:14.000+0000</p> 
        <div class="body">
            <p>I've changed lines 169 and 217 to include your change, and I don't get the warning every time - it seems to behave a bit better.
But this is not good enough yet. Maybe we need to combine this with a '@'..</p>

<p>I will commit this anyway, it's a bit less warning prone.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Shahar Evron (shahar) on 2006-11-19T06:54:52.000+0000</p> 
        <div class="body">
            <p>Oddly enough, when I used the sslv2:// wrapper instead of ssl:// the problem does not appear. I've committed this change although I am not sure this is a very good idea (in case some servers still use sslv1).</p>

<p>Please test and let me know.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Alex Adriaanse (alexadriaanse) on 2006-11-19T18:59:59.000+0000</p> 
        <div class="body">
            <p>The change you made in r1767 seems to have solved this warning for me.  I've tested it a few times and haven't seen the warning so far.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Shahar Evron (shahar) on 2006-11-21T06:59:56.000+0000</p> 
        <div class="body">
            <p>Seems to be fixed then.
Marking as resolved unless proven otherwise</p>

        </div>
    </div>
    </div>

