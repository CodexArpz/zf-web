<h2>ZF-3584: Add information to 'Invalid controller' error to ease debugging</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2008-07-05T09:16:51.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2008-11-05T12:16:55.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Tim Fountain (tfountain)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Matthew Weier O'Phinney (matthew)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Controller</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Currently when ZF can't find a controller your routing has told it to use, the following exception is generated:</p>

<p>Zend_Controller_Dispatcher_Exception: Invalid controller specified () in /usr/share/php/libzend-framework-php/Zend/Controller/Dispatcher/Standard.php on line 249</p>

<p>In a modular application with a custom routing class there are a number of different possible causes of this error:</p>

<ul><li>Incorrectly named module directory</li>
<li>Incorrectly named controller class </li>
<li>Incorrectly named controller class file</li>
<li>Problem with a custom route</li>
</ul><p>it would aid debugging if the exception message could include the full path to the controller directory in which it was expecting to find the controller, along with the name of the class it was expecting to find. E.g.:</p>

<p>Zend_Controller_Dispatcher_Exception: Invalid controller specificed (). Expecting to find controller class 'Foo_BarController' in /path/to/application/modules/foo/controllers/BarController.php</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2008-11-05T12:16:45.000+0000</p> 
        <div class="body">
            <p>You can determine most of this information (path specified) already by pulling the request object stored in the error_handler parameter:</p>

<pre class="highlight"><code>
$request = $this-&gt;_getParam('error_handler')-&gt;request;
$module = $request-&gt;getModuleName();
// etc.
</code></pre>

<p>From that, you can derive the module and controller that resulted in the bad query.</p>

<p>As for the source of the invalid controller name, it could be a combination of factors -- and you can determine the actual reason by examining the exception thrown. Incorrectly named module directory, controller class, and/or file are basically all the same, and we cannot differentiate -- they're all based on trying to load the controller class file. As for custom routes not matching, the dispatcher assumes that it got good informaiton from the router, and again, cannot differentiate the source. The only information that you, the developer, can go on are the module and controller names.</p>

        </div>
    </div>
    </div>

