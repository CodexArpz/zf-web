<h2>ZF2-133: CLONE - Zend_Cache_Core::save() requires that $data be a string or that it be auto-serialized</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2012-01-09T19:11:32.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-01-09T19:18:09.000+0000</dd>

    <dt>Status:</dt>
    <dd>Closed</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Marc Bennewitz (private) (mabe)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Marc Bennewitz (private) (mabe)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend\Cache</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Trying to store and integer or an object throws a fatal exception even when using a cache backend that supports a large range of values. Memcache and APC can store complete objects and they do not need to be pre-serialized for those backends. It is generally wise to wrap data in an object prior to storing it because otherwise arrays are mangled in certain circumstances.</p>

<p>Checking the validity of the passed dat should be the domain of the backend, not the front-end. The front-end has no way of knowing which data is valid for a particular backend. As mentioned, Memcache and APC have no trouble dealing with complex objects or arrays. In any case, storing an integer should be reasonable.</p>

<p>Lines 276-283 from Zend_Cache_Core:</p>

<pre class="highlight"><code> 
        if ($this-&gt;_options['automatic_serialization']) {
            // we need to serialize datas before storing them
            $data = serialize($data);
        } else {
            if (!is_string($data)) {
                Zend_Cache::throwException("Datas must be string or set automatic_serialization = true");
            }
        }
</code></pre>

<p>Test code to demonstrate the problem:</p>

<pre class="highlight"><code>
$frontendOptions = array(
    'caching' =&gt; true,
    'logging' =&gt; false,
    'lifetime' =&gt; 3600,
    'automatic_cleaning_factor' =&gt; 0,
);
$backendOptions = array(
    'servers' =&gt; array(array('host' =&gt; 'localhost', 'port' =&gt; 11211, 'persistent' =&gt; false)),
    'compression' =&gt; true,
);
$cache = Zend_Cache::factory('Core', 'Memcached', $frontendOptions, $backendOptions);
$cache-&gt;save(1, 'test_cache');
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Marc Bennewitz (private) (mabe) on 2012-01-09T19:18:09.000+0000</p> 
        <div class="body">
            <p>fixed by desing</p>

<p>Now data no longer gets serialized by default.
To enable serializing please use the plug-in "serializer"</p>

        </div>
    </div>
    </div>

