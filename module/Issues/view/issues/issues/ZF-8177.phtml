<h2>ZF-8177: Registering helpers with views</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2009-10-29T09:59:16.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-12-04T13:10:08.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.10.0 (27/Jan/10)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Matthew Weier O'Phinney (matthew)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_View</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
        <li><a href="/issues/secure/attachment/12339/ViewTest.diff">ViewTest.diff</a></li>
            <li><a href="/issues/secure/attachment/12338/Zend_View_Abstract.diff">Zend_View_Abstract.diff</a></li>
        </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>From a request on the FW-MVC mailing list, Zend_View should offer a way to register helper objects without relying on the plugin loader. This would allow for dependency injection, objects that don't follow the PEAR naming convention, and PHP 5.3 namespaces.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Hector Virgen (djvirgen) on 2009-10-29T10:02:51.000+0000</p> 
        <div class="body">
            <p>I'm putting together a patch that will allow registering custom helpers like this:</p>

<p>// Adding a custom helper
$view = new Zend_View();
$helper = new MyCustomHelper();
$view-&gt;addHelper($helper, 'foo');
$view-&gt;foo(); // calls MyCustomHelper#foo()</p>

<p>// Overwriting a built-in helper
$myUrlHelper = new MyUrlHelper();
$view-&gt;addHelper($myUrlHelper, 'url');
$view-&gt;url(); // calls MyUrlHelper#url();</p>

<p>Any thoughts on this?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Avi Block (blocka) on 2009-10-29T10:07:10.000+0000</p> 
        <div class="body">
            <p>I'm wondering now if it's a good idea also to include anonymous functions here as well (a la Zend_Validate_Callback). Of course, one could always create a "Callback" helper this way as well, which would accomplish the same purpose, without having to change things around too much.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Hector Virgen (djvirgen) on 2009-10-29T10:30:14.000+0000</p> 
        <div class="body">
            <p>What would that code look like? So far I have this:</p>

<p>/**
 * Registers a helper
 *
 * @param Zend_View_Helper_Abstract|object $helper
 * @param string $name
 * @return Zend_View_Abstract
 */
public function registerHelper($helper, $name)
{
    if (!is_object($helper)) {
        throw new Zend_View_Exception('View helper must be an object.', $this);
    }
    $this-&gt;_helper[$name] = $helper;
    return $this;
}</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Hector Virgen (djvirgen) on 2009-10-29T10:35:12.000+0000</p> 
        <div class="body">
            <p>Sorry, forgot to add the code markup.. this should look better:</p>

<pre class="highlight"><code>
/**
 * Registers a helper
 *
 * @param Zend_View_Helper_Abstract|object $helper
 * @param string $name
 * @return Zend_View_Abstract
 */
public function registerHelper($helper, $name)
{
    if (!is_object($helper)) {
        throw new Zend_View_Exception('View helper must be an object.', $this);
    }
    $this-&gt;_helper[$name] = $helper;
    return $this;
}
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Avi Block (blocka) on 2009-10-29T10:51:49.000+0000</p> 
        <div class="body">
            <p>What you have here seems to me to be sufficient for the main purpose of this feature (of course it must be tested!). As for adding in the anonymous function capabilities, you would probably have to change the __call method of Zend_View_Abstract, because that method is expecting a class and a method.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Hector Virgen (djvirgen) on 2009-10-29T11:29:10.000+0000</p> 
        <div class="body">
            <p>I don't have a CLA yet but I've attached the patch and passing unit test.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Hector Virgen (djvirgen) on 2009-12-02T10:49:40.000+0000</p> 
        <div class="body">
            <p>Please see attached files for fix and passing unit test.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2009-12-02T10:55:39.000+0000</p> 
        <div class="body">
            <p>Re-opening. Attaching a patch does not resolve an issue; committing code to the repository does. I'll review the patch for inclusion.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Hector Virgen (djvirgen) on 2009-12-02T11:01:24.000+0000</p> 
        <div class="body">
            <p>Thanks, Matthew. I don't have SVN commit privileges (that I know of). How can I submit a patch for review?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2009-12-02T11:28:59.000+0000</p> 
        <div class="body">
            <p>You just did. ;-)</p>

<p>Seriously, though, attaching patches to the issue tracker is the best way to do so. If you notice no action on one, feel free to bug the component lead (either directly, or via the zf-contributors mailing list).</p>

<p>Thanks!</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2009-12-04T13:10:07.000+0000</p> 
        <div class="body">
            <p>Patches applied (with additional tests and slight changes in functionality) to trunk; will release with 1.10.</p>

        </div>
    </div>
    </div>

