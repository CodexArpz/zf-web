<h2>ZF-7144: hard to extend Zend_Pdf_Page classes</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2009-06-27T16:44:54.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2011-04-06T19:13:12.000+0000</dd>

    <dt>Status:</dt>
    <dd>Open</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Remy Damour (remy215)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Alexander Veremyev (alexander)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Pdf</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Hi,</p>

<p>I would like to join my voice on <a href="http://framework.zend.com/issues/browse/ZF-3701">http://framework.zend.com/issues/browse/ZF-3701</a> and add that it's still hard to extend some pdf classes.
Well it's not hard to create a new subclass (parent properties are protected, no longer private), anyway it's extremely hard to incorporate our subclass in Zend_Pdf normal behaviour without having to rewrite the entire class.</p>

<p>For instance I wanted to subclass Zend_Pdf_Page to add extra methods such as drawTextOnRight(), drawTextOnCenter(), getTextWidth()... and the problem is that default Zend_Pdf_Page is hard-coded within Zend_Pdf =&gt; Zend_Pdf::load() will return a pdf with all pages being instances of Zend_Pdf_Page and not of my subclass.</p>

<p>It would be really nice if Zend_Pdf used same mechanism as used by Zend_Db, ie. to store name of used pdf classes (Zend_Pdf_Page, Zend_Font...) as protected properties (ex: Zend_Db_Table::$_rowClass). That way we could easily subclass and fully customize our own version of Zend_Pdf and other pdf classes.</p>

<p>Regards,
Remy</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Dolf Schimmel (Freeaqingme) (freak) on 2009-06-27T16:49:03.000+0000</p> 
        <div class="body">
            <p>I think this issue should be postponed till 2.0 due to backwards compatibility (sigh...)</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Remy Damour (remy215) on 2009-06-27T17:40:28.000+0000</p> 
        <div class="body">
            <p>I might miss the point but I don't see backwards incompatibility.</p>

<p>just create a Zend_Pdf::$_pageClass property, then within Zend_Pdf class, replace all hard-coded 'Zend_Pdf_Page' with $this-&gt;_pageClass.</p>

<p>Such approach should be backward compatible.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Jason Bury (jbury) on 2011-04-06T19:13:12.000+0000</p> 
        <div class="body">
            <p>This may be a duplicate of ZF-4848 ("_pdfpageClass property to specify which Zend_Pdf_Page object is used to render page").</p>

        </div>
    </div>
    </div>

