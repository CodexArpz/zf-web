<h2>ZF-6506: No mention of isValid context variable in new docs</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Docs:  Problem</dd>

    <dt>Created:</dt>
    <dd>2009-05-03T11:02:44.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-07-30T13:31:19.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.9.0 (31/Jul/09)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Mark (lightflowmark)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Matthew Weier O'Phinney (matthew)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Validate</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-7422">ZF-7422</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>I'm sure there used to be an example of validating that two password fields matched in the docs for Zend_Validate.</p>

<p>In any event, there is currently no mention at all of the optional second 'context' parameter to isValid().</p>

<p>This is and will cause problems for new users, as validating fields against each other is a basic requirement.</p>

<p>Apologies if this is still here and I've somehow missed it, I've looked twice!
Cheers,
Mark</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2009-05-03T11:08:55.000+0000</p> 
        <div class="body">
            <p>Can you please explane what you are speaking of ?</p>

<p>Zend_Validate-&gt;isValid() defines only ONE parameter.
There is no additional context parameter within Zend_Validate.</p>

<p>Maybe you've mixed this with a custom class of your own ?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Mark (lightflowmark) on 2009-05-03T11:18:20.000+0000</p> 
        <div class="body">
            <p>Perhaps I'm confused about the line between the validation in Zend_Form and Zend_Validate.</p>

<p>The docs I was thinking of are actually at 
<a href="http://framework.zend.com/manual/en/zend.form.elements.html#zend.form.elements.validators">http://framework.zend.com/manual/en/â€¦</a>
See the Note on "Validation Context" about 1/3 of the way down.</p>

<p>Not sure if this should be included in the Zend_Validate docs or not; apologies if not.</p>

<p>M</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2009-05-03T11:31:13.000+0000</p> 
        <div class="body">
            <p>As you already noted this is a feature of Zend_Form and not from Zend_Validate.
It allows to use self defined validators and attach data from subforms to them.</p>

<p>Zend_Validate does not provide context within the default validators.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2009-05-03T11:32:57.000+0000</p> 
        <div class="body">
            <p>Closing as non-issue as mentioned feature is a Zend_Form feature and already mentioned there.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2009-05-03T12:36:52.000+0000</p> 
        <div class="body">
            <p>The Zend_Validate docs should also have a note of this, as validating against other items in the data set is a common paradigm.</p>

<p>I'll take care of this update.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2009-05-03T14:41:18.000+0000</p> 
        <div class="body">
            <p>I just checked the complete API.
There is no single validation class within Zend_Validate which supports context.</p>

<p>Looking at the code within Zend_Form (which calls isValid of the validator with 2 params) I have the feeling that Zend_Form uses a notation which is actually not supported by Zend_Validate.</p>

<p>This should also be checked as it could be the reason for this confusion.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2009-05-03T20:04:46.000+0000</p> 
        <div class="body">
            <p>There are no validators within Zend_Validate that <em>need</em> a context, but that does not mean that they cannot support it. isValid() simply requires one argument, a value to validate; extending classes may require additional arguments, provided they are marked as optional (i.e., they have a default value). Zend_Form's use of a $context parameter makes use of this -- and it <em>is</em> fully tested.</p>

<p>The documentation I plan to add is to show how patterns of validating against data sets or additional values, as, as noted, it's a common paradigm, and supported by PHP's definitions of interfaces and methods, but not explicitly defined within the component.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Brian Morton (rokclimb15) on 2009-05-28T09:34:44.000+0000</p> 
        <div class="body">
            <p>I think there is a related issue here.  The example cited by Matt shows the custom validator extending Zend_Validate_Abstract.  Zend_Validate_Abstract implements Zend_Validate_Interface, which defines the isValid method as having only one argument.  Therefore, it is impossible to utilize $context passed from Zend_Form::isValid while taking advantage of the functionality in Zend_Validate_Abstract.  Someone trying to will receive an error message like this:</p>

<p>Fatal error: Declaration of Foo_Validate_Widget::isValid() must be compatible with that of Zend_Validate_Interface::isValid()</p>

<p>I think the solution is to add $context to the isValid definition in Zend_Validate_Interface but make it optional for compatibility.  Having access to context from the Zend_Form is very important in my opinion.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Mark (lightflowmark) on 2009-05-28T10:03:13.000+0000</p> 
        <div class="body">
            <p>You don't get this error, actually.</p>

<p>My understanding is that the Interface defines the minimal set of parameters you have to implement; as long as any additional parameters are declared as optional, you'll be OK.  This is borne out by my own testing - my context-dependent isValid code works fine as long as it's declared as isValid($value,$context = null)</p>

<p>I agree that adding $context in the Interface and Abstract would help to disambiguate, though.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Brian Morton (rokclimb15) on 2009-05-28T10:08:21.000+0000</p> 
        <div class="body">
            <p>You're very correct.  I had not thought to try that.</p>

<p>As you say, I think it would help.  It would also be nice to get those changes into the PHPDoc so it is clear how this works.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2009-05-28T10:10:13.000+0000</p> 
        <div class="body">
            <p>Let me clarify.</p>

<p>When you have an interface definition as follows:</p>

<pre class="highlight"><code>
interface Validator
{
    public function isValid($value);
}
</code></pre>

<p>You can then define a class that implements it that provides <em>additional</em> arguments <em>provided</em> they are <em>conditional</em>. So, for example, the following will <em>not</em> work:</p>

<pre class="highlight"><code>
class IsNumeric implements Validator
{
    public function isValid($value, $strict)
    {
        // ...
    }
}
</code></pre>

<p>But this will:</p>

<pre class="highlight"><code>
class IsNumeric implements Validator
{
    public function isValid($value, $strict = false)
    {
        // ...
    }
}
</code></pre>

<p>This is exactly how the $context parameter is documented -- you indicate a default value, and check for the $context when you do your validations.</p>

<p>We cannot change the interface at this point because it would be a backwards compatibility break -- anybody who has implemented the current interface to write their own validators would now have broken code. However, if you use the technique above, using a conditional second argument, there are no issues.</p>

<p>I am once again closing this issue. It's already well documented.</p>

        </div>
    </div>
    </div>

