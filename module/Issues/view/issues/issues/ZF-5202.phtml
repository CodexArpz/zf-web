<h2>ZF-5202: Add Zend_Soap_Wsdl_Strategy_Composite</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>New Feature</dd>

    <dt>Created:</dt>
    <dd>2008-12-10T10:39:52.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-01-21T03:06:39.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.8.0 (30/Apr/09)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Jordan Raub (ludicruz)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Benjamin Eberlei (beberlei)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Soap_Wsdl</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>I found the need to use multiple strategies for my WSDL strategy. This is because I had a class that was for my response which had an array of ints and I wanted that to show up instead of just array.</p>

<p>The default nature of this will always return something since the last strategy used is Zend_Soap_Wsdl_Strategy_AnyType</p>

<p>hope this is useful</p>

<pre class="highlight"><code>
class ReturnClass
{
    /**
     * @var string[]
     */
    public $firstName = array();

    /**
     * @var string[]
     */
    public $lastName = array();

    /**
     * @var string[]
     */
    public $email = array();
}
</code></pre>

<pre class="highlight"><code>
class Zend_Soap_Wsdl_Strategy_Composite
    extends Zend_Soap_Wsdl_Strategy_Abstract
{
    protected $_strategies = array(
        'Zend_Soap_Wsdl_Strategy_DefaultComplexType',
        'Zend_Soap_Wsdl_Strategy_ArrayOfTypeComplex',
        'Zend_Soap_Wsdl_Strategy_ArrayOfTypeSequence',
        'Zend_Soap_Wsdl_Strategy_AnyType',
    );

    public function __construct(array $strategies = null)
    {
        $this-&gt;setStrategies($strategies);
    }

    public function setStrategies(array $strategies = null)
    {
        if (!empty($strategies)) {
            foreach ($strategies as $strategy) {
                if (!class_exists($strategy)) {
                    require_once "Zend_Soap_Wsdl_Exception";
                    throw new Zend_Soap_Wsdl_Exception(
                        "WSDL Strategy {$strategy} does not exist"
                    );
                }
            }
            $this-&gt;_strategies = $strategies;
        }
    }

    /**
     * @param  string $type class
     * @return string XSD type for the given PHP type
     */
    public function addComplexType($type)
    {
        $retval = false;

        foreach ($this-&gt;_strategies as $strategy) {
            try {
                $strategy = new $strategy();
                $strategy-&gt;setContext($this-&gt;getContext());
                $retval = $strategy-&gt;addComplexType($type);
                break;
            } catch(Zend_Soap_Wsdl_Exception $e) {}
        }

        if(!$retval)
        {
            throw new Zend_Soap_Wsdl_Exception(
                "{$type} cannot be converted to a XSD type"
            );
        }

        return $retval;
    }
}
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Benjamin Eberlei (beberlei) on 2009-01-21T03:06:38.000+0000</p> 
        <div class="body">
            <p>I have added a composite strategy for Complex Type detection. It works different than your suggestion though. You instantiate the strategy, give it a default Strategy and a map of type =&gt; strategy pairs that overwrite the default choice.</p>

<p>Will be released with the next minor version.</p>

        </div>
    </div>
    </div>

