<h2>ZF-9275: Zend_Form_Element overrides Zend_Validate DefaultTranslator</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2010-02-26T12:46:04.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2010-08-30T03:02:23.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.11.0 (02/Nov/10)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Thomas Rothe (burnred)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Rob Allen (rob)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Form</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-9330">ZF-9330</a></li>
            <li><a href="/issues/browse/ZF-9364">ZF-9364</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
        <li><a href="/issues/secure/attachment/13235/Form.diff">Form.diff</a></li>
            <li><a href="/issues/secure/attachment/13232/Zend.diff">Zend.diff</a></li>
            <li><a href="/issues/secure/attachment/12956/zf9275.diff">zf9275.diff</a></li>
        </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>If I set Zend_Validate_Abstract::$_defaultTranslator to an other Translator than that one of Zend_Form. Zend_Form_Element will allways use it's global default Translator from the registry.</p>

<pre class="highlight"><code>
    protected function _initTranslator()
    {
        $translate = new Zend_Translate('gettext',APPLICATION_PATH.'/languages/de/de.mo','de');
        Zend_Registry::set('Zend_Translate', $translate);
        
        $translateValidate = new Zend_Translate('array', APPLICATION_PATH.'/languages/de/Zend_Validate.php','de');
        Zend_Validate_Abstract::setDefaultTranslator($translateValidate);
    }
</code></pre>

<pre class="highlight"><code>
public function testtranslateAction()
    {
        $form = new Zend_Form();
        $input = new Zend_Form_Element_Text
        (
            'example',
            array
            (
                'required' =&gt; true
            )
        );
        $submit = new Zend_Form_Element_Submit
        (
            'test',
            array
            (
                'label' =&gt; _('submit')
            )
        );
        $form-&gt;addElements(array($input, $submit));
        if($this-&gt;getRequest()-&gt;isPost())
        {
            $form-&gt;isValid($this-&gt;getRequest()-&gt;getPost());
        }
        $this-&gt;view-&gt;form = $form;
    }
</code></pre>

<p>If I send this form with an empty post, the error message should be the german text "Es wird ein Wert ben√∂tigt. Dieser darf nicht leer sein" ,but it's allways the original message "Value is required and can't be empty".</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2010-02-26T14:02:15.000+0000</p> 
        <div class="body">
            <p>Can you please provide some reproduce code, and clearly indicate expected and actual results?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Rothe (burnred) on 2010-02-26T14:33:35.000+0000</p> 
        <div class="body">
            <p>Added example code</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Christian Albrecht (alab) on 2010-03-18T08:27:57.000+0000</p> 
        <div class="body">
            <p>Fixed in [ZF-9364]</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Dominique Lorre (dlorre) on 2010-03-24T06:34:31.000+0000</p> 
        <div class="body">
            <p>Please reopen this issue as the validator translator is overriden by the form element translator. ZF 9364 addresses another issue see the comments.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Christian Albrecht (alab) on 2010-03-24T07:28:51.000+0000</p> 
        <div class="body">
            <pre class="highlight"><code>
Index: library/Zend/Form/Element.php
===================================================================
--- library/Zend/Form/Element.php       (Revision 21633)
+++ library/Zend/Form/Element.php       (Arbeitskopie)
@@ -1329,7 +1329,9 @@
         $isArray         = $this-&gt;isArray();
         foreach ($this-&gt;getValidators() as $key =&gt; $validator) {
             if (method_exists($validator, 'setTranslator')) {
-                $validator-&gt;setTranslator($this-&gt;getTranslator());
+                if (!$validator-&gt;getTranslator()) {
+                    $validator-&gt;setTranslator($this-&gt;getTranslator());
+                }
             }
 
             if (method_exists($validator, 'setDisableTranslator')) {
</code></pre>

<p>However i am not sure, if that is correct since $validator will return
Translator from Zend_Registry when it has none set and therefor break BC 
because the default Translator may differ from that set to Zend_Form or 
Zend_Form_Element.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Dominique Lorre (dlorre) on 2010-03-24T08:03:57.000+0000</p> 
        <div class="body">
            <p>Thank you for reopening. Yes, the fix is tricky.</p>

<p>I suggest checking $validator-&gt;getTranslator() against Zend_Registry::get('Zend_Translate').</p>

<p>If they are identical then it would be fine to override the validator. That follows the logic of going from general to specific.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Christian Albrecht (alab) on 2010-03-25T06:32:11.000+0000</p> 
        <div class="body">
            <p>Suggested fix, add new members to Zend_Validate_Abstract</p>

<p>protected $_isSpecificTranslator = false;
protected static $_isSpecificDefaultTranslator = false;</p>

<p>with appropriate getter Methods and set the new members true 
within setTranslator() and setDefaultTranslator().</p>

<pre class="highlight"><code>
// edit, deleted diff code
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Dominique Lorre (dlorre) on 2010-03-25T06:56:17.000+0000</p> 
        <div class="body">
            <p>It's an interesting approach but  I don't think we need specificc translator flag, because when we use:</p>

<p>Zend_Validate_Abstract::setDefaultTranslator($translateValidate);</p>

<p>we precisely mean that we want the validators to use this translator.</p>

<p>First case: we want to handle all the translations. We do :</p>

<pre class="highlight"><code>
        Zend_Registry::set('Zend_Translate', $translate);
</code></pre>

<p>and everything is fine.
==&gt; Zend_Validate_Abstract::getDefaultTranslator() == Zend_Registry::get('Zend_Translate')</p>

<p>Second case: we want to handle translations but want to use the default translations for validators 
then we do:</p>

<pre class="highlight"><code>
        Zend_Registry::set('Zend_Translate', $translate);
</code></pre>

<p>and:</p>

<pre class="highlight"><code>
        $locale = Zend_Registry::get('Zend_Locale') ;
        $translator = new Zend_Translate(
            Zend_Translate::AN_ARRAY,
            APPLICATION_PATH . '/resources/languages',
            $locale, 
            array('scan' =&gt; Zend_Translate::LOCALE_DIRECTORY)
        );
        Zend_Validate_Abstract::setDefaultTranslator($translator) ; 
</code></pre>

<p>==&gt; Zend_Validate_Abstract::getDefaultTranslator() != Zend_Registry::get('Zend_Translate')</p>

<p>Third case: we don't want to use Zend_Translate but our project is not in english. So we will to use the translator for the validators only.</p>

<pre class="highlight"><code>
        $translator = new Zend_Translate(
            Zend_Translate::AN_ARRAY,
            APPLICATION_PATH . '/resources/languages',
            'fr', 
            array('scan' =&gt; Zend_Translate::LOCALE_DIRECTORY)
        );
        Zend_Validate_Abstract::setDefaultTranslator($translator) ; 
</code></pre>

<p>==&gt; Zend_Validate_Abstract::getDefaultTranslator() != Zend_Registry::get('Zend_Translate')</p>

<p>So, if Zend_Validate_Abstract::getDefaultTranslator() == Zend_Registry::get('Zend_Translate')
then we can assume it is safe to override the validator translator.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Christian Albrecht (alab) on 2010-03-25T07:15:22.000+0000</p> 
        <div class="body">
            <p>Dominique, i think the problem is</p>

<p>$translate = Zend_Registry::get('Zend_Translate');
$translate instanceof Zend_Translate || $translate instanceof Zend_Translate_Adapter</p>

<p>but always</p>

<p>Zend_Validate_Abstract::getDefaultTranslator() instanceof Zend_Translate_Adapter</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Christian Albrecht (alab) on 2010-03-25T07:38:56.000+0000</p> 
        <div class="body">
            <p>Baah, much to complicated my solution, here is a simpler one</p>

<pre class="highlight"><code>
Index: library/Zend/Form/Element.php
===================================================================
--- library/Zend/Form/Element.php       (Revision 21641)
+++ library/Zend/Form/Element.php       (Arbeitskopie)
@@ -1329,7 +1329,10 @@
         $isArray         = $this-&gt;isArray();
         foreach ($this-&gt;getValidators() as $key =&gt; $validator) {
             if (method_exists($validator, 'setTranslator')) {
-                $validator-&gt;setTranslator($this-&gt;getTranslator());
+                if (!$validator-&gt;hasTranslator() &amp;&amp;
+                    null !== ($translator = $this-&gt;getTranslator())) {
+                    $validator-&gt;setTranslator($translator);
+                }
             }
 
             if (method_exists($validator, 'setDisableTranslator')) {
Index: library/Zend/Validate/Abstract.php
===================================================================
--- library/Zend/Validate/Abstract.php  (Revision 21641)
+++ library/Zend/Validate/Abstract.php  (Arbeitskopie)
@@ -353,6 +353,20 @@
     }
 
     /**
+     * Was a (default) translator set?
+     * 
+     * @return Boolean
+     */
+    public function hasTranslator()
+    {
+        if (null === $this-&gt;_translator &amp;&amp;
+            null === self::$_defaultTranslator) {
+            return false;
+        }
+        return true;
+    }
+
+    /**
      * Set default translation object for all validate objects
      *
      * @param  Zend_Translate|Zend_Translate_Adapter|null $translator
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Dominique Lorre (dlorre) on 2010-03-25T08:00:08.000+0000</p> 
        <div class="body">
            <p>Christian, that code works with my project. It's probably safer to do it that way.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Christian Albrecht (alab) on 2010-03-25T08:06:28.000+0000</p> 
        <div class="body">
            <p>Which one do you refer to with 'that'? My simpler solution, or yours?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Dominique Lorre (dlorre) on 2010-03-25T08:49:04.000+0000</p> 
        <div class="body">
            <p>My safety concern is about Zend_Form::getDefaultTranslator(). Actually Zend_Validate_Abstract::getDefaultTranslator() ignores the default form translator but should the Zend dev team changes this then the registry check would stop working. So, yes your solution is safer in that perspective.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Christian Albrecht (alab) on 2010-03-25T09:17:50.000+0000</p> 
        <div class="body">
            <p>proove that it works</p>

<pre class="highlight"><code>
cd library
php -r 'require_once "Zend/Translate.php"; \
require_once "Zend/Validate/Alnum.php"; \
$translate = new Zend_Translate("Array"); \
$validator = new Zend_Validate_Alnum(); \
var_dump($validator-&gt;hasTranslator()); \
Zend_Validate_Abstract::setDefaultTranslator($translate); \
var_dump($validator-&gt;hasTranslator());'

// bool(false)
// bool(true)
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Rob Allen (rob) on 2010-03-28T08:22:46.000+0000</p> 
        <div class="body">
            <p>This unit test shows the problem:</p>

<pre class="highlight"><code>
    /**
     * @group ZF-9275
     */
    public function testElementDoesntOverrideValidatorsDefaultTranslatorWithDefaultRegistryTranslator()
    {
        $registryTranslations = array('alphaInvalid' =&gt; 'Registry message');
        $registryTranslate = new Zend_Translate('array', $registryTranslations);
        Zend_Registry::set('Zend_Translate', $registryTranslate);
        
        $validatorTranslations = array('alphaInvalid' =&gt; 'Validator message');
        $validatorTranslate = new Zend_Translate('array', $validatorTranslations);
        Zend_Validate_Abstract::setDefaultTranslator($validatorTranslate);
        
        $elementTranslations = array('alphaInvalid' =&gt; 'Element message');
        $elementTranslate = new Zend_Translate('array', $elementTranslations);
       
        // the default validate translator should beat the registry one
        $this-&gt;element-&gt;addValidator('Alpha');
        $this-&gt;assertFalse($this-&gt;element-&gt;isValid(123));
        $messages = $this-&gt;element-&gt;getMessages();
        $this-&gt;assertEquals('Validator message', $messages['alphaInvalid']);
        
        // however the element's translator should beat both
        $this-&gt;element-&gt;setTranslator($elementTranslate);
        $this-&gt;assertFalse($this-&gt;element-&gt;isValid(123));
        $messages = $this-&gt;element-&gt;getMessages();
        $this-&gt;assertEquals('Element message', $messages['alphaInvalid']);
        
    }    
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Rob Allen (rob) on 2010-03-28T09:17:26.000+0000</p> 
        <div class="body">
            <p>Christian's solution will result in a translator attached directly to an element not being set for that element's validators which is wrong.</p>

<p>This is a potential patch that passes my unit test above:</p>

<pre class="highlight"><code>
$ svn diff library/Zend/Form/Element.php 
Index: library/Zend/Form/Element.php
===================================================================
--- library/Zend/Form/Element.php   (revision 21664)
+++ library/Zend/Form/Element.php   (working copy)
@@ -1332,6 +1332,15 @@
             array_unshift($validators, $notEmpty);
             $this-&gt;setValidators($validators);
         }
+        
+        // Find the correct translator. Zend_Validate_Abstract::getDefaultTranslator()
+        // will get either the static translator attached to Zend_Validate_Abstract
+        // or the 'Zend_Translate' from Zend_Registry. 
+        $translator = Zend_Validate_Abstract::getDefaultTranslator();
+        if($this-&gt;hasTranslator()) {
+            // only pick up this element's translator if it was attached directly.
+            $translator = $this-&gt;getTranslator();
+        }
 
         $this-&gt;_messages = array();
         $this-&gt;_errors   = array();
@@ -1339,7 +1348,7 @@
         $isArray         = $this-&gt;isArray();
         foreach ($this-&gt;getValidators() as $key =&gt; $validator) {
             if (method_exists($validator, 'setTranslator')) {
-                $validator-&gt;setTranslator($this-&gt;getTranslator());
+                $validator-&gt;setTranslator($translator);
             }
 
             if (method_exists($validator, 'setDisableTranslator')) {

</code></pre>

<p>The problem with this patch is that the translator attached to Zend_Form::setDefaultTranslator() is now ignored for validation messages, so you would then have to set them using Zend_Validate_Abstract::setDefaultTranslator().</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Rob Allen (rob) on 2010-03-28T09:54:02.000+0000</p> 
        <div class="body">
            <p>The correct order of translators to apply to a validator when validating it via a form element is:</p>

<p>(most generic to most specific)
1. Zend_Registry's 'Zend_Translate' translator
2. Zend_Validate_Abstract's static default translator
3. Zend_Form's static default translator
4. The form instance's directly attached translator
5. The element instance's directly attached translator
6. The validator instance's directly attached translator</p>

<p>To prove this, I've created 4 unit tests:</p>

<pre class="highlight"><code>
    /**
     * @group ZF-9275
     */
    public function testElementDoesntOverrideDefaultValidatorTranslatorWithDefaultRegistryTranslator()
    {
        $registryTranslations = array('alphaInvalid' =&gt; 'Registry message');
        $registryTranslate = new Zend_Translate('array', $registryTranslations);
        Zend_Registry::set('Zend_Translate', $registryTranslate);
        
        $validatorTranslations = array('alphaInvalid' =&gt; 'Validator message');
        $validatorTranslate = new Zend_Translate('array', $validatorTranslations);
        Zend_Validate_Abstract::setDefaultTranslator($validatorTranslate);
        
        $elementTranslations = array('alphaInvalid' =&gt; 'Element message');
        $elementTranslate = new Zend_Translate('array', $elementTranslations);
       
        // the default validate translator should beat the registry one
        $this-&gt;element-&gt;addValidator('Alpha');
        $this-&gt;assertFalse($this-&gt;element-&gt;isValid(123));
        $messages = $this-&gt;element-&gt;getMessages();
        $this-&gt;assertEquals('Validator message', $messages['alphaInvalid']);
    }
    
    /**
     * @group ZF-9275
     */
    public function testDefaultTranslatorDoesntOverrideElementTranslatorOnValdiation()
    {
        $registryTranslations = array('alphaInvalid' =&gt; 'Registry message');
        $registryTranslate = new Zend_Translate('array', $registryTranslations);
        Zend_Registry::set('Zend_Translate', $registryTranslate);
        
        $validatorTranslations = array('alphaInvalid' =&gt; 'Validator message');
        $validatorTranslate = new Zend_Translate('array', $validatorTranslations);
        Zend_Validate_Abstract::setDefaultTranslator($validatorTranslate);
        
        $elementTranslations = array('alphaInvalid' =&gt; 'Element message');
        $elementTranslate = new Zend_Translate('array', $elementTranslations);
        
        $this-&gt;element-&gt;addValidator('Alpha');
        $this-&gt;element-&gt;setTranslator($elementTranslate);
        $this-&gt;assertFalse($this-&gt;element-&gt;isValid(123));
        $messages = $this-&gt;element-&gt;getMessages();
        $this-&gt;assertEquals('Element message', $messages['alphaInvalid']);
    }

    /**
     * @group ZF-9275
     */
    public function testValidatorsDefaultTranslatorDoesntOverrideFormsDefaultTranslator()
    {
        $formTranslations = array('alphaInvalid' =&gt; 'Form message');
        $formTranslate = new Zend_Translate('array', $formTranslations);
        Zend_Form::setDefaultTranslator($formTranslate);
        
        $validatorTranslations = array('alphaInvalid' =&gt; 'Validator message');
        $validatorTranslate = new Zend_Translate('array', $validatorTranslations);
        Zend_Validate_Abstract::setDefaultTranslator($validatorTranslate);
        
        // the default validate translator should beat the registry one
        $this-&gt;element-&gt;addValidator('Alpha');
        $this-&gt;assertFalse($this-&gt;element-&gt;isValid(123));
        $messages = $this-&gt;element-&gt;getMessages();
        $this-&gt;assertEquals('Form message', $messages['alphaInvalid']);
    }
    
    /**
     * @group ZF-9275
     */
    public function testElementsTranslatorDoesntOverrideValidatorsDirectlyAttachedTranslator()
    {
        $elementTranslations = array('alphaInvalid' =&gt; 'Element message');
        $elementTranslate = new Zend_Translate('array', $elementTranslations);
        
        $validatorTranslations = array('alphaInvalid' =&gt; 'Direct validator message');
        $validatorTranslate = new Zend_Translate('array', $validatorTranslations);
        
        $validator = new Zend_Validate_Alpha();
        $validator-&gt;setTranslator($validatorTranslate);
        $this-&gt;element-&gt;addValidator($validator);
        $this-&gt;assertFalse($this-&gt;element-&gt;isValid(123));
        $messages = $this-&gt;element-&gt;getMessages();
        $this-&gt;assertEquals('Direct validator message', $messages['alphaInvalid']);
    }  
</code></pre>

<p>This is the patch that passes this set of unit tests:</p>

<pre class="highlight"><code>
Index: library/Zend/Form.php
===================================================================
--- library/Zend/Form.php   (revision 21665)
+++ library/Zend/Form.php   (working copy)
@@ -2776,6 +2776,16 @@
     }
 
     /**
+     * Is there a default translation object set?
+     * 
+     * @return boolean
+     */
+    public static function hasDefaultTranslator()
+    { 
+        return (bool)self::$_translatorDefault;
+    }
+    
+    /**
      * Indicate whether or not translation should be disabled
      *
      * @param  bool $flag
Index: library/Zend/Form/Element.php
===================================================================
--- library/Zend/Form/Element.php   (revision 21664)
+++ library/Zend/Form/Element.php   (working copy)
@@ -1332,6 +1332,21 @@
             array_unshift($validators, $notEmpty);
             $this-&gt;setValidators($validators);
         }
+        
+        // Find the correct translator. Zend_Validate_Abstract::getDefaultTranslator()
+        // will get either the static translator attached to Zend_Validate_Abstract
+        // or the 'Zend_Translate' from Zend_Registry. 
+        if (Zend_Validate_Abstract::hasDefaultTranslator() &amp;&amp; 
+            !Zend_Form::hasDefaultTranslator()) 
+        {
+            $translator = Zend_Validate_Abstract::getDefaultTranslator();
+            if ($this-&gt;hasTranslator()) {
+                // only pick up this element's translator if it was attached directly.
+                $translator = $this-&gt;getTranslator();
+            }
+        } else {
+            $translator = $this-&gt;getTranslator();
+        }
 
         $this-&gt;_messages = array();
         $this-&gt;_errors   = array();
@@ -1339,7 +1354,13 @@
         $isArray         = $this-&gt;isArray();
         foreach ($this-&gt;getValidators() as $key =&gt; $validator) {
             if (method_exists($validator, 'setTranslator')) {
-                $validator-&gt;setTranslator($this-&gt;getTranslator());
+                if (method_exists($validator, 'hasTranslator')) {
+                    if (!$validator-&gt;hasTranslator()) {                    
+                        $validator-&gt;setTranslator($translator);
+                    }
+                } else {
+                    $validator-&gt;setTranslator($translator);
+                }
             }
 
             if (method_exists($validator, 'setDisableTranslator')) {
Index: library/Zend/Validate/Abstract.php
===================================================================
--- library/Zend/Validate/Abstract.php  (revision 21664)
+++ library/Zend/Validate/Abstract.php  (working copy)
@@ -353,6 +353,16 @@
     }
 
     /**
+     * Does this validator have its own specific translator?
+     * 
+     * @return bool
+     */
+    public function hasTranslator()
+    {
+        return (bool)$this-&gt;_translator;
+    }  
+    
+    /**
      * Set default translation object for all validate objects
      *
      * @param  Zend_Translate|Zend_Translate_Adapter|null $translator
@@ -393,6 +403,16 @@
     }
 
     /**
+     * Is there a default translation object set?
+     * 
+     * @return boolean
+     */
+    public static function hasDefaultTranslator()
+    { 
+        return (bool)self::$_defaultTranslator;
+    }
+    
+    /**
      * Indicate whether or not translation should be disabled
      *
      * @param  bool $flag

</code></pre>

<p>All other Zend_Form tests also continue to pass.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Rob Allen (rob) on 2010-03-28T09:55:38.000+0000</p> 
        <div class="body">
            <p>This patch fixes the reported issue and also ensures that related issues around the order of applied translate objects is now correct.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Rob Allen (rob) on 2010-03-31T12:57:55.000+0000</p> 
        <div class="body">
            <p>Fixed on trunk r21724 (test) r21725 (library)
Fixed on branch: r21726</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Dominique Lorre (dlorre) on 2010-05-11T09:19:12.000+0000</p> 
        <div class="body">
            <p>Hello, this issue is not fixed as of 1.10.4. Please reopen it.</p>

<p>This code is wrong:</p>

<pre class="highlight"><code>
        // Find the correct translator. Zend_Validate_Abstract::getDefaultTranslator()
        // will get either the static translator attached to Zend_Validate_Abstract
        // or the 'Zend_Translate' from Zend_Registry.
        if (Zend_Validate_Abstract::hasDefaultTranslator() &amp;&amp;
            !Zend_Form::hasDefaultTranslator())
        {
            $translator = Zend_Validate_Abstract::getDefaultTranslator();
            if ($this-&gt;hasTranslator()) {
                // only pick up this element's translator if it was attached directly.
                $translator = $this-&gt;getTranslator();
            }
        } else {
            $translator = $this-&gt;getTranslator();
        }
</code></pre>

<p>When Zend_Validate_Abstract::setdefaultTranslator() is used, it means we intend to use the special translation files for the validators which are included in the Zend Framework package under resources/languages/xx/Zend_Validate.php.
The one and only case when we don't want to use this translator for the validators is when we directly set the validator translator using $validator-&gt;setTranslator()
The code above prevents this behavior to work since the element always have a translator set with an init code like this one:</p>

<pre class="highlight"><code>
    protected function _initTranslate()
    {
        $translate = $this-&gt;getPluginResource("translate")-&gt;getTranslate() ;
        Zend_Registry::set('Zend_Translate', $translate);
        $locale = Zend_Registry::get('Zend_Locale') ;
        $translator = new Zend_Translate(
            Zend_Translate::AN_ARRAY,
            APPLICATION_PATH . '/resources/languages',
            $locale, 
            array('scan' =&gt; Zend_Translate::LOCALE_DIRECTORY)
        );
        Zend_Validate_Abstract::setDefaultTranslator($translator) ;     
        return $translate ;     
    }
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Dominique Lorre (dlorre) on 2010-05-11T09:30:45.000+0000</p> 
        <div class="body">
            <p>code should be:</p>

<pre class="highlight"><code>
        if (Zend_Validate_Abstract::hasDefaultTranslator())
        {
            $translator = Zend_Validate_Abstract::getDefaultTranslator();
        } else {
            $translator = $this-&gt;getTranslator();
        }
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Rob Allen (rob) on 2010-05-11T13:18:05.000+0000</p> 
        <div class="body">
            <p>"The one and only case when we don't want to use this translator for the validators is when we directly set the validator translator using $validator-&gt;setTranslator()"</p>

<p>I disagree. If a validator is set on the form, then it should override.</p>

<p>Can you provide a use-case where you would want to set a form translator, but expect the global Zend_Validate translator to win?</p>

<p>Alternatively, if you mean that the default Zend_Validate_Abstract static translator is never used, could you provide a unit test that shows this?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Dominique Lorre (dlorre) on 2010-05-12T02:14:06.000+0000</p> 
        <div class="body">
            <p>The part Zend_Form vs Zend_Validate is not the main issue. In my code I did not use Zend_Form default translator in first place.</p>

<p>I expect Zend_Validate translator to "win" when I use the translated files in resources/languages of the Zend Framework full package. I don't know any other case where the default translator for Zend_Validate is useful.</p>

<p>The problem is we get translations for most validators in many languages but there is no simple way to use them!</p>

<p>Actually I'm using a workaround by setting the form default translator. It works but using the form default translator for a validate translator is not correct.</p>

<pre class="highlight"><code>
    protected function _initTranslate()
    {
        $translate = $this-&gt;getPluginResource("translate")-&gt;getTranslate() ;
        Zend_Registry::set('Zend_Translate', $translate);
        $locale = Zend_Registry::get('Zend_Locale') ;
        $translator = new Zend_Translate(
            Zend_Translate::AN_ARRAY,
            APPLICATION_PATH . '/resources/languages',
            $locale, 
            array('scan' =&gt; Zend_Translate::LOCALE_DIRECTORY)
        );
        Zend_Form::setDefaultTranslator($translator);
        Zend_Validate_Abstract::setDefaultTranslator($translator) ;     
        return $translate ;     
    }
</code></pre>

<p>You don't need  test file, the default Zend_Validate translator is not used if a translator is set
for the form element:</p>

<pre class="highlight"><code>
            if ($this-&gt;hasTranslator()) {
                // only pick up this element's translator if it was attached directly.
                $translator = $this-&gt;getTranslator();
            }
</code></pre>

<p>and this happens always if a translator file is used. For instance:</p>

<pre class="highlight"><code>
resources.translate.adapter = Gettext
resources.translate.data = APPLICATION_PATH "/resources/languages/"
resources.translate.options.scan = filename
resources.translate.options.disableNotices = true
</code></pre>

<p>Used in conjunction with the init code I already mentioned. This part is the main issue. We are back to the title of this issue: "Zend_Form_Element overrides Zend_Validate DefaultTranslator"</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Christian Albrecht (alab) on 2010-05-12T03:18:49.000+0000</p> 
        <div class="body">
            <p>Dominique, my guess is this works as expected now if you stop
using your workaround setting the Form default Translator.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Dominique Lorre (dlorre) on 2010-05-12T05:13:43.000+0000</p> 
        <div class="body">
            <p>Christian, only if I remove the registry:</p>

<pre class="highlight"><code>
    Zend_Registry::set('Zend_Translate', $translate);
</code></pre>

<p>Then I wouldn't need the workaround, or else this would be set as the translator of all elements in Zend_Form::isValid, because of this code:</p>

<pre class="highlight"><code>
    public static function getDefaultTranslator()
    {
        if (null === self::$_translatorDefault) {
            require_once 'Zend/Registry.php';
            if (Zend_Registry::isRegistered('Zend_Translate')) {
                $translator = Zend_Registry::get('Zend_Translate');
                if ($translator instanceof Zend_Translate_Adapter) {
                    return $translator;
                } elseif ($translator instanceof Zend_Translate) {
                    return $translator-&gt;getAdapter();
                }
            }
        }
        return self::$_translatorDefault;
    }
</code></pre>

<p>Actually, commenting out this line would not help because this registry is already set in getTranslate() of Zend/Application/Resource/Translate.php, the other workaround would be to change the key name (untested atm)in application.ini.</p>

<pre class="highlight"><code>
         Zend_Registry::set($key, $this-&gt;_translate);
</code></pre>

<p>Now we clearly see the problem: the element translator is set in Form::isValid because the registry key Zend_Translate is initialized and since the element <em>has</em> a translator then Zend_Validate default translator is overriden.</p>

<p>Once again, setting Zend_Validate default translator has a special meaning, and should not be overriden in order to use the resources/languages translations.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Christian Albrecht (alab) on 2010-05-12T05:44:27.000+0000</p> 
        <div class="body">
            <p>oh, now i see what you mean - So you are arguing that the precedence list from [Rob's comment|#action_39619] should read</p>

<ol><li>Zend_Registry's 'Zend_Translate' translator</li>
<li>Zend_Form's static default translator</li>
<li>The form instance's directly attached translator</li>
<li>The element instance's directly attached translator</li>
<li>Zend_Validate_Abstract's static default translator</li>
<li>The validator instance's directly attached translator</li>
</ol>
        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Rob Allen (rob) on 2010-05-12T06:34:29.000+0000</p> 
        <div class="body">
            <p>My list was:</p>

<p>(most generic to most specific)
1. Zend_Registry's 'Zend_Translate' translator
2. Zend_Validate_Abstract's static default translator
3. Zend_Form's static default translator
4. The form instance's directly attached translator
5. The element instance's directly attached translator
6. The validator instance's directly attached translator</p>

<p>I could certainly be persuaded that 2 and 3 should be swapped around.</p>

<p>I definitely think that any translator attached to an instance object should "beat" a global static translator.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Dominique Lorre (dlorre) on 2010-05-12T08:25:53.000+0000</p> 
        <div class="body">
            <p>I am comfortable with any set of priorities as long as we can specify that:
a) we use a personal translation file
b) we use for the validators the Zend_Validate.php files from resources/languages
c) we can use specific translators for some validators (such as the Captcha validator which is not translated).</p>

<p>The problem is that the element translator is attached automatically when Zend_Translate is set in the registry. Thus it breaks your priority list Rob, since Zend_Translate goes between 4 and 5 when it should be 1.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Dominique Lorre (dlorre) on 2010-05-13T01:37:23.000+0000</p> 
        <div class="body">
            <p>Back to priorities. I think the keyword is 'reusability'. When you have a translation file you want to use it on your next projects. This is the case with Zend_Validate.php which is conveniently set with</p>

<pre class="highlight"><code>
Zend_Validate_Abstract::setDefaultTranslator($resourcetranslator);
</code></pre>

<p>When I set this I mean to reuse a file that is provided in Zend_Framework package. If I don't want to use this file then I don't set it. This is why I said the only case it should be overriden is when I directly set the validator translator (captcha for instance).</p>

<p>Rob asked:
{quote}
Can you provide a use-case where you would want to set a form translator, but expect the global Zend_Validate translator to win?{quote}
Yes. I create a couple forms (for example registration and options) in project A which uses validators such as emailaddress. I use Zend_Validate.php as</p>

<pre class="highlight"><code>
  Zend_Validate_Abstract::setDefaultTranslator($resourcetranslator);
</code></pre>

<p>and my own translation file for the forms which will translate sentences such as "Enter your email address".</p>

<pre class="highlight"><code>
    Zend_Form::setDefaultTranslator($formtranslator);
</code></pre>

<p>Now, why on earth would I want to add the validator messages to my form translation since I have them already translated? This goes against the reusability principle. When I create project B with the same forms I will reuse my custom form translation file and the Zend_Validate.php file.</p>

<p>Zend form elements have their own messages such as "Enter your email" or "Confirm deletion", and validators have other messages which are totally different such as "Invalid type given, value should be a string" or "A crc32 hash could not be evaluated for the given file".</p>

<p>Why would I want to insert all the validators error messages in my custom form translation file because I want to use one? This makes no sense.</p>

<p>Priority should be a fallback: I don't have set the validator translator or the validator default translator: then we fallback to the element translator. If the element translator is not set then I fallback to the form translator and so on.</p>

<p>Now lets see why the priority code is broken.</p>

<pre class="highlight"><code>
    protected function _initTranslate()
    {
        $translate = $this-&gt;getPluginResource("translate")-&gt;getTranslate() ;
        $locale = Zend_Registry::get('Zend_Locale') ;
        $translator = new Zend_Translate(
            Zend_Translate::AN_ARRAY,
            APPLICATION_PATH . '/resources/languages',
            $locale, 
            array('scan' =&gt; Zend_Translate::LOCALE_DIRECTORY)
        );
        Zend_Validate_Abstract::setDefaultTranslator($translator) ;     
        return $translate ;     
    }
</code></pre>

<p>This init code sets a translator file for the project and uses the default translation for validators.
As mentioned already, the call to getTranslate() sets 'Zend_Translate' in Zend_Registry:</p>

<pre class="highlight"><code>
            } else {
                $this-&gt;_translate = new Zend_Translate($options);
                Zend_Registry::set($key, $this-&gt;_translate);
            }
</code></pre>

<p>In Form::isValid:</p>

<pre class="highlight"><code>
        $translator = $this-&gt;getTranslator();
</code></pre>

<p>We look if the form has a translator.</p>

<p>This looks if the form has a default translator:</p>

<pre class="highlight"><code>
        if (null === $this-&gt;_translator) {
            return self::getDefaultTranslator();
        }
</code></pre>

<p>This in turn looks if Zend_Translate is set:</p>

<pre class="highlight"><code>
            if (Zend_Registry::isRegistered('Zend_Translate')) {
                $translator = Zend_Registry::get('Zend_Translate');
                if ($translator instanceof Zend_Translate_Adapter) {
                    return $translator;
</code></pre>

<p>Therefore the form gets a translator which is set to each element translator:</p>

<pre class="highlight"><code>
       $context = $data;
        foreach ($this-&gt;getElements() as $key =&gt; $element) {
            if (null !== $translator &amp;&amp; !$element-&gt;hasTranslator()) {
                $element-&gt;setTranslator($translator);
            }
</code></pre>

<p>Since the elements translators have been set, then the validator translator is overriden:</p>

<pre class="highlight"><code>
            $translator = Zend_Validate_Abstract::getDefaultTranslator();
            if ($this-&gt;hasTranslator()) {
                // only pick up this element's translator if it was attached directly.
                $translator = $this-&gt;getTranslator();
            }
</code></pre>

<p>This is why Zend_Translate is set to the element translators which in turn override the default translator for Zend_Validate. Your priority list is not working as expected Rob.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by David Salvador (dsalvador) on 2010-06-28T13:53:02.000+0000</p> 
        <div class="body">
            <p>$translate = new Zend_Translate('tmx', $tmxFileAndPath, $lang); 
$translatorForValidationMessages = new Zend_Translate('array',APPLICATION_PATH.'/resources/languages',$lang,array('scan' =&gt; Zend_Translate::LOCALE_DIRECTORY));
Zend_Validate_Abstract::setDefaultTranslator($translatorForValidationMessages);<br />
Zend_Registry::set('Zend_Translate', $translate);</p>

<h2>As it is, it translates the labels of the form, but leaves the validation messages in english.</h2>

<p>And if i comment the line setting the Zend_Registry for Zend_Translate as per below:
$translate = new Zend_Translate('tmx', $tmxFileAndPath, $lang); 
$translatorForValidationMessages = new Zend_Translate('array',APPLICATION_PATH.'/resources/languages',$lang,array('scan' =&gt; Zend_Translate::LOCALE_DIRECTORY));
Zend_Validate_Abstract::setDefaultTranslator($translatorForValidationMessages);<br />
//Zend_Registry::set('Zend_Translate', $translate);</p>

<p>Then it gives me the validation errors properly translated, but the form labels remain in english.</p>

<p>Should this issue be reopened? I have tested it with 10.4 and 10.5, none of them work. I do not have the rights to  reopen it,</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by David Salvador (dsalvador) on 2010-06-28T13:54:45.000+0000</p> 
        <div class="body">
            <pre class="highlight"><code>
$translate = new Zend_Translate('tmx', $tmxFileAndPath, $lang);
$translatorForValidationMessages = new Zend_Translate('array',APPLICATION_PATH.'/resources/languages',$lang,array('scan' =&gt; Zend_Translate::LOCALE_DIRECTORY));
Zend_Validate_Abstract::setDefaultTranslator($translatorForValidationMessages);
Zend_Registry::set('Zend_Translate', $translate);
</code></pre>

<p>As it is, it translates the labels of the form, but leaves the validation messages in english.
‚Äî</p>

<p>And if i comment the line setting the Zend_Registry for Zend_Translate as per below:</p>

<pre class="highlight"><code>
$translate = new Zend_Translate('tmx', $tmxFileAndPath, $lang);
$translatorForValidationMessages = new Zend_Translate('array',APPLICATION_PATH.'/resources/languages',$lang,array('scan' =&gt; Zend_Translate::LOCALE_DIRECTORY));
Zend_Validate_Abstract::setDefaultTranslator($translatorForValidationMessages);
//Zend_Registry::set('Zend_Translate', $translate);
</code></pre>

<p>Then it gives me the validation errors properly translated, but the form labels remain in english.</p>

<p>Should this issue be reopened? I have tested it with 10.4 and 10.5, none of them work. I do not have the rights to reopen it,</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Christian Albrecht (alab) on 2010-06-30T14:52:51.000+0000</p> 
        <div class="body">
            <p>Reopening.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2010-07-12T11:27:30.000+0000</p> 
        <div class="body">
            <p>Erasing fix version as the issue was reopened</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Kim Blomqvist (kblomqvist) on 2010-07-31T12:38:13.000+0000</p> 
        <div class="body">
            <p>Zend_Form::isValid() shouldn't set element translator by it's own default translator, because this leads into situation where form element has set translator which overrides Zend_Validate's default translator.</p>

<pre class="literal">
Index: Form.php
===================================================================
--- Form.php    (revision 22746)
+++ Form.php    (working copy)
@@ -2222,7 +2222,9 @@
         }
         $context = $data;
         foreach ($this-&gt;getElements() as $key =&gt; $element) {
-            if (null !== $translator &amp;&amp; !$element-&gt;hasTranslator()) {
+            if (null !== $translator &amp;&amp; $this-&gt;hasTranslator() &amp;&amp;
+                !$element-&gt;hasTranslator())
+            {
                 $element-&gt;setTranslator($translator);
             }
             $check = $data;
</pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Kim Blomqvist (kblomqvist) on 2010-08-01T00:16:02.000+0000</p> 
        <div class="body">
            <p>To make it more clear...</p>

<p>Init:
Only global Zend_Registry's 'Zend_Translate' translator has been set</p>

<p>What happens?
1) Zend_Form::hasTranslator() returns false
2) Zend_Form::getTranslator() returns Zend_Registry's 'Zend_Translate' translator</p>

<p>3) Zend_Form_Element::hasTranslator() returns true (wrong, should be false)
4) Zend_Form_Element::getTranslator() returns $this-&gt;_translator (wrong, should be Zend_Registry's 'Zend_Translate' translator)</p>

<p>Why it happens?
Because Zend_Form used Zend_Form_Element's setTranslator() by its default Zend_Registry's 'Zend_Translate' translator. Zend_Form should override Zend_Form_Element's validator only when its own hasTranslator() returns true &amp;&amp; Zend_Form_Element's hasTranslator() returns false.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Kim Blomqvist (kblomqvist) on 2010-08-07T02:38:27.000+0000</p> 
        <div class="body">
            <p>Zend.diff includes patch for Zend_Form
Form.diff includes new test for Zend_Form_FormTest</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Rob Allen (rob) on 2010-08-13T07:39:22.000+0000</p> 
        <div class="body">
            <p>Fixed on trunk in svn <a href="http://framework.zend.com/code/changelog/Standard_Library?cs=22833">r22833</a>.</p>

<p>Need to check with alab before merging to 1.10 branch.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Rob Allen (rob) on 2010-08-30T03:02:21.000+0000</p> 
        <div class="body">
            <p>As 1.10.8 is out, this fix will be released with 1.11</p>

        </div>
    </div>
    </div>

