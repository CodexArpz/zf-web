<h2>ZF-1387: Cannot connect to sslv2://server</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2007-05-15T09:21:27.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2007-07-05T14:44:10.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.0.0 RC1 (28/May/07)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Shahar Evron (shahar)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Http_Client</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
        <li><a href="/issues/secure/attachment/10471/phpinfo.html">phpinfo.html</a></li>
        </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>My PHP (5.2.2) is compiled (built through Gentoo's emerge) with support for OpenSSL. I also rebuild both PHP and OpenSSL today, checked dependencies - just to be sure.</p>

<p>On a phpinfo() it lists the following "Registered Stream Socket Transports":
tcp, udp, unix, udg, ssl, sslv3, sslv2, tls</p>

<p>Registered PHP Streams:
php, file, data, http, ftp, https, ftps, compress.bzip2, compress.zlib</p>

<p>Here is my test script - the request via Zend_Http_Client throws an exception, while a plain PHP call using file_get_contents() works on the same uri.</p>

<p>I also tried supplying "pieces" of it to Zend_Http_Client, e.g. URL and GET parameters seperately using the set-methods. But this didn't help either.</p>

<pre class="highlight"><code>

$url = '<a href="https://ssl.whatevermobile.com:7011/sendsm3.wm?user=foo&amp;password=bar&amp;to=phone&amp;from=phone&amp;message=Nachricht">https://ssl.whatevermobile.com/sendsm3.wm/â€¦</a>';

try {
    $client = new Zend_Http_Client($url);
    $client-&gt;setMethod(Zend_Http_Client::GET);
    $client-&gt;request();
}
catch (Zend_Exception $e) {
    $url = str_replace('=Nachricht', '=' . $e-&gt;getMessage(), $url);
}

$response = @file_get_contents($url);
if ($response === false) {
    ob_start();
    file_get_contents($url);
    $message = ob_get_contents();
    ob_end_clean();

    throw new Till_Exception($message);
}
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Shahar Evron (shahar) on 2007-05-15T09:29:59.000+0000</p> 
        <div class="body">
            <p>I have a few questions:</p>

<ol><li><p>Did you try with the latest revision? I made some changes yesterday and we no longer use sslv2:// as the default transport. Perhaps it's only sslv2 that's problematic (on the server side) and sslv1 or sslv3 will work better. If you update to the latest revision and run it as is, it should automatically chose the correct transport supported by the server (this is done on the openssl level, not in Zend_Http_Client).</p></li>
<li><p>Does it only happen with this server?</p></li>
<li><p>Any special settings in php.ini like disabled functions and such? If the above doesn't help please attach your phpinfo() output.</p></li>
</ol><p>Thanks.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Till Klampaeckel (till) on 2007-05-15T09:51:14.000+0000</p> 
        <div class="body">
            <p>1) No. ;-( Any advice on what to upgrade? So far we stuck with the "stable" releases.</p>

<p>2) No, it seems to be random behavior. I have another XMLRPC server which I query via SSL and it never threw this exception before.</p>

<p>3) No disabled functions, but allow_url_open is enabled. ;-)</p>

<p>I'll attach my phpinfo() regardless.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Till Klampaeckel (till) on 2007-05-15T09:52:16.000+0000</p> 
        <div class="body">
            <p>phpinfo() file.</p>

<p>I have two servers acting up. One is dev, one is production. Both run Gentoo (same kernels), same version of PHP and OpenSSL.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Shahar Evron (shahar) on 2007-05-15T10:02:07.000+0000</p> 
        <div class="body">
            <p>Ok, if you work with stable and not with Subversion, do the following instead of upgrading and let me know if it's better:</p>

<pre class="highlight"><code>
try {
    $config = array('ssltransport' =&gt; 'ssl');
    $client = new Zend_Http_Client($url, $config);
    $client-&gt;setMethod(Zend_Http_Client::GET);
    $client-&gt;request();
}
</code></pre>

<p>And then go on with your code.</p>

<p>Shahar.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Till Klampaeckel (till) on 2007-05-15T10:10:42.000+0000</p> 
        <div class="body">
            <p>Excellent! Works!</p>

<p>So is this issue more a <em>PHP bug</em> or more related to server configuration?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Shahar Evron (shahar) on 2007-05-15T10:17:33.000+0000</p> 
        <div class="body">
            <p>It's probably neither - it is possible that your sever simply doesn't support SSL v.2. By using 'ssl' as the transport layer, you allow PHP and the server to negotiate the SSL version used.</p>

<p>The transport was 'sslv2' for a long time due to some internal issues, but was lately set (in Subversion HEAD)  to 'ssl' so this issue is fixed as far as I am concerned.</p>

<p>Thanks for the report!</p>

<p>Shahar.</p>

        </div>
    </div>
    </div>

