<h2>ZF-6306: Zend_Rest_Client: Content-type for POST requests (JSON support)</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2009-04-15T10:05:43.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-05-04T08:06:37.000+0000</dd>

    <dt>Status:</dt>
    <dd>Open</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Davey Shafik (davey)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Rest_Client</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <pre class="highlight"><code>
    /**
     * Perform a POST or PUT
     *
     * Performs a POST or PUT request. Any data provided is set in the HTTP
     * client. String data is pushed in as raw POST data; array or object data
     * is pushed in as POST parameters.
     *
     * @param mixed $method
     * @param mixed $data
     * @param string $enctype
     * @return Zend_Http_Response
     */
    protected function _performPost($method, $data = null, $enctype = null)
    {
        $client = self::getHttpClient();
        if (is_string($data)) {
            $client-&gt;setRawData($data, $enctype);
        } elseif (is_array($data) || is_object($data)) {
            $client-&gt;setParameterPost((array) $data);
        }
        return $client-&gt;request($method);
    }

    /**
     * Performs an HTTP POST request to $path.
     *
     * @param string $path
     * @param mixed $data Raw data to send
     * @param string $enctype
     * @return Zend_Http_Response
     */
    final public function restPost($path, $data = null, $enctype = null)
    {
        $this-&gt;_prepareRest($path);
        return $this-&gt;_performPost('POST', $data, $enctype);
    }
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Bart Dens (dancet) on 2010-04-30T01:35:41.000+0000</p> 
        <div class="body">
            <p>This is a quite big issue, need to implement a REST client for one of my clients, and they require a specific enctype to be set.</p>

<p>However, the above issue blocks me from implementing it with Zend_Rest_Client as the setRawData function call now clears my previously set enctype through self::getHttpClient()-&gt;setEncType('MY_ENCTYPE')</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Pete Smith (httpete) on 2012-01-19T21:31:10.000+0000</p> 
        <div class="body">
            <p>Bart, you are right. We just fought like maniacs here trying to figure out why it wouldn't work, and patching Zend_Rest_Client as patched above worked first shot. Thanks but please fix in the core framework in 1.11.12.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Guido Faust (gfaust) on 2012-05-04T08:06:37.000+0000</p> 
        <div class="body">
            <p>Wouldn't it be better to change Zend_Http_Client's setRawData() ?</p>

<p>We don't need to overwrite the EncType there if it is NULL!</p>

<p>e.g.</p>

<pre class="literal">
/**
     * Set the raw (already encoded) POST data.
     *
     * This function is here for two reasons:
     * 1. For advanced user who would like to set their own data, already encoded
     * 2. For backwards compatibilty: If someone uses the old post($data) method.
     *    this method will be used to set the encoded data.
     *
     * $data can also be stream (such as file) from which the data will be read.
     *
     * @param string|resource $data
     * @param string $enctype
     * @return Zend_Http_Client
     */
    public function setRawData($data, $enctype = null)
    {
        $this-&gt;raw_post_data = $data;
        if (!is_null($enctype)) {
            $this-&gt;setEncType($enctype);
        }
        if (is_resource($data)) {
            // We've got stream data
            $stat = @fstat($data);
            if($stat) {
                $this-&gt;setHeaders(self::CONTENT_LENGTH, $stat['size']);
            }
        }
        return $this;
    }
</pre>

        </div>
    </div>
    </div>

