<h2>ZF-2103: Zend_Session_Namespace - Optional argument to create namespace in deeper nodes</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2007-10-26T10:57:55.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-01-10T10:20:40.000+0000</dd>

    <dt>Status:</dt>
    <dd>Closed</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.8.0 (30/Apr/09)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Ralph Schindler (ralph)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Session</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Currently, the namespace component creates namespaces only at the root of the session:</p>

<pre class="highlight"><code>
$user = new Zend_Session_Namespace( 'user' );

=&gt; $_SESSION['user'] = array()
</code></pre>

<p>What if I want to store data deeper in the auth node to just group it and reduce clutter (aka modules) and to be able to count the number of items/namespaces in a node:</p>

<pre class="highlight"><code>
$_SESSION['auth']['user']['id'] = 1;
([node][namespace][key] = value)
</code></pre>

<p>In the above case, it would be much more powerful to be able to create the namespace under the 'auth' node so we could configure the keys in the 'user' namespace. We could introduce an optional 'node' argument to the Zend_Session_Namespace::__construct(), like so:</p>

<pre class="highlight"><code>
$user = new Zend_Session_Namespace( 'user', 'auth' );
[create the user namespace under auth node - auth node created automatically if it does not exist in session]
</code></pre>

<p>We can even go as deeper as we could by specifying an intelligent node-path:</p>

<pre class="highlight"><code>
$user = new Zend_Session_Namespace( 'user', 'auth:node2:node3' );
(create the user namespace under $_SESSION[auth][node2][node3] - all created automatically if they do not exist in session)
</code></pre>

<p>I guess the above feature adds more muscle to the namespace component and enables us to use it more powerfully.</p>

<p>Thoughts...?</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-04-18T13:11:51.000+0000</p> 
        <div class="body">
            <p>This doesn't appear to have been fixed in 1.5.0. Please update if this is not correct.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ralph Schindler (ralph) on 2008-07-21T14:08:35.000+0000</p> 
        <div class="body">
            <p>How does this benefit over using a smarter naming convention for the namespaces?  For example like</p>

<pre class="highlight"><code>
$user = new Zend_Session_Namespace("user-auth"); 
</code></pre>

<p>OR over</p>

<pre class="highlight"><code>
$user = new Zend_Session_Namespace("user-auth"); 
$user-&gt;auth-&gt;node2 = 'value';
</code></pre>

<p>?</p>

<p>The bigger problem with adding more/deeper nodes is that the serialized version will take up more space in the file/database whatever.</p>

<p>Ill categorize as nice to have / next minor, but at currently I am not completely convinced yet.  Perhaps talk it over in #zftalk.dev with some other people.</p>

<p>-ralph</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Shekar Reddy (zendfw) on 2008-08-12T18:29:45.000+0000</p> 
        <div class="body">
            <p>That's what I've been doing these days but it involves a lot of consistent code and work to maintain data in appropriate nodes. If we have the namespace created in a deeper node, keys added to the namespace automatically appear in the child node of the namespaced node and so it becomes much easier to maintain data and focus on business logic. Furthermore, the items under the namespace node can now be counted, can be disabled from adding more keys than a specified threshold, configured to expire, etc. and so we can create categorized namespaces with typical behaviors for the data inside the namespaces.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ralph Schindler (ralph) on 2009-01-10T10:20:39.000+0000</p> 
        <div class="body">
            <p>Interesing feature, but I am not sure we'll have time to implement this within the 1.0 branch.</p>

<p>We concede that this component needs a rewrite, so ideas are being logged here:</p>

<p><a href="http://framework.zend.com/wiki/display/ZFDEV/Zend_Session+2.0">http://framework.zend.com/wiki/display/â€¦</a></p>

        </div>
    </div>
    </div>

