<h2>ZF-2705: Implement Zend_Cache_Backend_Blackhole</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2008-02-21T15:13:02.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-08-28T02:53:21.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                John Coggeshall (coogle)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Fabien MARTY (fab)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Cache</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-2468">ZF-2468</a></li>
            <li><a href="/issues/browse/ZF-6468">ZF-6468</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>It'd be nice for components which rely on Zend_Cache to have a Blackhole backend which just pretends to cache data for unit testing, etc..</p>

<pre class="highlight"><code>
&lt;?php

/**
 * Zend Framework
 *
 * LICENSE
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * <a href="http://framework.zend.com/license/new-bsd">http://framework.zend.com/license/new-bsd</a>
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@zend.com so we can send you a copy immediately.
 *
 * @category   Zend
 * @package    Zend_Cache
 * @subpackage Backend
 * @copyright  Copyright (c) 2005-2008 Zend Technologies USA Inc. (<a href="http://www.zend.com">http://www.zend.com</a>)
 * @license    <a href="http://framework.zend.com/license/new-bsd">http://framework.zend.com/license/new-bsd</a>     New BSD License
 * @author     John Coggeshall 
 */


/**
 * Zend_Cache_Backend_Interface
 */
require_once 'Zend/Cache/Backend/Interface.php';

/**
 * Zend_Cache_Backend
 */
require_once 'Zend/Cache/Backend.php';


/**
 * @package    Zend_Cache
 * @subpackage Backend
 * @copyright  Copyright (c) 2005-2008 Zend Technologies USA Inc. (<a href="http://www.zend.com">http://www.zend.com</a>)
 * @license    <a href="http://framework.zend.com/license/new-bsd">http://framework.zend.com/license/new-bsd</a>     New BSD License
 */
class Zend_Cache_Backend_Blackhole extends Zend_Cache_Backend implements Zend_Cache_Backend_Interface
{
   /**
     * Set the frontend directives
     *
     * @param array $directives assoc of directives
     */
    public function setDirectives($directives) 
    {
        /* ... - - - ... */
    }

    /**
     * Test if a cache is available for the given id and (if yes) return it (false else)
     *
     * Note : return value is always "string" (unserialization is done by the core not by the backend)
     *
     * @param string $id cache id
     * @param boolean $doNotTestCacheValidity if set to true, the cache validity won't be tested
     * @return string cached datas (or false)
     */
    public function load($id, $doNotTestCacheValidity = false)
    {
        return false;
    }

    /**
     * Test if a cache is available or not (for the given id)
     *
     * @param string $id cache id
     * @return mixed false (a cache is not available) or "last modified" timestamp (int) of the available cache record
     */
    public function test($id)
    {
        return false;
    }

    /**
     * Save some string datas into a cache record
     *
     * Note : $data is always "string" (serialization is done by the
     * core not by the backend)
     *
     * @param string $data datas to cache
     * @param string $id cache id
     * @param array $tags array of strings, the cache record will be tagged by each string entry
     * @param int $specificLifetime if != false, set a specific lifetime for this cache record (null =&gt; infinite lifetime)
     * @return boolean true if no problem
     */
    public function save($data, $id, $tags = array(), $specificLifetime = false)
    {
        return true;
    }

    /**
     * Remove a cache record
     *
     * @param string $id cache id
     * @return boolean true if no problem
     */
    public function remove($id)
    {
        return true;
    }

    /**
     * Clean some cache records
     *
     * Available modes are :
     * Zend_Cache::CLEANING_MODE_ALL (default)    =&gt; remove all cache entries ($tags is not used)
     * Zend_Cache::CLEANING_MODE_OLD              =&gt; remove too old cache entries ($tags is not used)
     * Zend_Cache::CLEANING_MODE_MATCHING_TAG     =&gt; remove cache entries matching all given tags
     *                                               ($tags can be an array of strings or a single string)
     * Zend_Cache::CLEANING_MODE_NOT_MATCHING_TAG =&gt; remove cache entries not {matching one of the given tags}
     *                                               ($tags can be an array of strings or a single string)
     *
     * @param string $mode clean mode
     * @param array $tags array of tags
     * @return boolean true if no problem
     */
    public function clean($mode = Zend_Cache::CLEANING_MODE_ALL, $tags = array())
    {
        return true;
    }
}
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Fabien MARTY (fab) on 2008-03-11T15:09:15.000+0000</p> 
        <div class="body">
            <p>what about the existing Test backend ? (used for unit tests)</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Vincent de Lau (vdelau) on 2008-03-20T05:01:15.000+0000</p> 
        <div class="body">
            <p>I was browsing the issue tracker, because I need a simmilar backend although I would have named it Dummy.</p>

<p>I linked this to the custom frontend/backend issue, because the current implementation of Zend_Cache is not open to add such a backend without a drasctic subclassing of Zend_Cache or modifying Zend_Cache.</p>

<p>A Blackhole/Dummy backend is different from the Test backend:
The Test backend returns data to be used in the unit tests. Implementing a custom backend selection method might help remove the requirement to to have this backend in the library.
The Blackhole/Dummy backend is a backend that doesn't realy cache anything. It always generates a cache mis, and data is never stored. Caching can thus easily be disabled by simply changing the backend (for instance in a configuration file).</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Fabien MARTY (fab) on 2008-04-04T17:32:55.000+0000</p> 
        <div class="body">
            <p>see <a href="http://framework.zend.com/issues/browse/ZF-2468">http://framework.zend.com/issues/browse/ZF-2468</a></p>

<p>if you need this dummy backend ("caching" option of Core is probably a better solution ?), you can implement it at your side</p>

        </div>
    </div>
    </div>

