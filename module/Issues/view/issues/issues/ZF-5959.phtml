<h2>ZF-5959: Picasa extension uses memory like it's going out of style</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Performance Improvement</dd>

    <dt>Created:</dt>
    <dd>2009-03-06T11:13:58.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-05-17T18:58:03.000+0000</dd>

    <dt>Status:</dt>
    <dd>Open</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Jochen Hartmann (jhartmann)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Gdata</li>
            <li>zf-crteam-padraic</li>
            <li>zf-crteam-priority</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Currently, the picasa extension takes 18MB of memory to parse an album with only 31 photos in it.</p>

<p>The below script reports 18846720 bytes of memory used for me. (This is right out of the developers guide)</p>

&lt;?php

require_once 'Zend/Loader.php';
Zend_Loader::loadClass('Zend_Gdata_Photos');
Zend_Loader::loadClass('Zend_Gdata_ClientLogin');
Zend_Loader::loadClass('Zend_Gdata_AuthSub');

//$serviceName = Zend_Gdata_Photos::AUTH_SERVICE_NAME;
//$user = "username";
//$pass = "password";

//$client = Zend_Gdata_ClientLogin::getHttpClient($user,$pass,$serviceName);
$gp = new Zend_Gdata_Photos();

try {

       $query = $gp-&gt;newAlbumQuery();
       $query-&gt;setUser("stephliu");
       $query-&gt;setAlbumId( "5257496817114515249" );
       $albumFeed = $gp-&gt;getAlbumFeed($query);

       foreach ($albumFeed as $albumEntry) {
               if ($albumEntry-&gt;getMediaGroup()-&gt;getContent() != null){
                       $url = $albumEntry-&gt;getMediaGroup()-&gt;getContent();
                       $url = $url[0]-&gt;getUrl();
                       print $url . "\n";
               }
       }

} catch (Zend_Gdata_App_HttpException $e) {
       echo "Error: " . $e-&gt;getMessage() . "<br />\n";
       if ($e-&gt;getResponse() != null) {
               echo "Body: <br />\n" . $e-&gt;getResponse()-&gt;getBody() .
                        "<br />\n";
       }
        echo "Request: <br />\n" . $e-&gt;getRequest() . "<br />\n";
} catch (Zend_Gdata_App_Exception $e) {
       echo "Error: " . $e-&gt;getMessage() . "<br />\n";
} catch( Zend_Uri_Exception $e){
       echo $e;
}


echo memory_get_peak_usage();

?&gt;

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Jeff Fisher (jfisher) on 2009-03-06T11:37:50.000+0000</p> 
        <div class="body">
            <p>For reference, retrieving a feed with a single entry uses 9197384  or about 9MB of memory.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Mike Willbanks (digitalstruct) on 2009-06-24T22:00:33.000+0000</p> 
        <div class="body">
            <p>This is likely due to the usage of DOM XML which has to parse the full feed which I believe would be up to the package maintainer to really rework this from the current requirements standpoint.  Maybe an option to state the parser that should be utilized could be added?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Shaun Farrell (farrelley) on 2010-03-03T03:21:30.000+0000</p> 
        <div class="body">
            <p>I am having this same issue on Gdata_Youtube when I grab a users uploaded videos.  My method that loops through the VideoFeed uses lots of memory.  Increments of 10megs.  I'm pretty sure it has to do the $videoFeed-&gt;getNextFeed();</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Adam Lundrigan (adamlundrigan) on 2012-05-17T18:58:02.000+0000</p> 
        <div class="body">
            <p>Reclassified (Performance Improvement, Major)</p>

        </div>
    </div>
    </div>

