<h2>ZF-5942: Zend_Form::addSubForm assumes order of element prefix path array</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2009-03-04T12:30:21.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-11-20T20:53:11.000+0000</dd>

    <dt>Status:</dt>
    <dd>Closed</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Chris Abernethy (brownoxford)
            </dd>

    <dt>Assignee:</dt>
    <dd>
        None
                    </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Form</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Zend_Form::addSubForm() iterates over the internal _elementPrefixPaths member in order to invoke Zend_Form_SubForm::addElementPrefixPath(). The latter takes three distinct arguments, which are produced by assigning the result of array_values() to a list(). If the element prefix paths have been assigned in an order other than the assumed order, the values will be transposed when calling Zend_Form_SubForm::addElementPrefixPath()</p>

<p>Consider the following example, where a form is created and options are passed:</p>

<pre><code>$options['elementPrefixPath'] = array(
    array('type' =&gt; Zend_Form_Element::VALIDATE, 'prefix' =&gt; 'My_Validate', 'path' =&gt; APPLICATION_PATH . '/../lib/My/Validate')
);
$form = new MyFormThatHasASubForm($options);
</code></pre>

<p>In this scenario, the element prefix path array members are set in the order (type, prefix, path).</p>

<p>This is the relevant code from Zend_Form::addSubForm:</p>

<pre><code>if (!empty($this-&gt;_elementPrefixPaths)) {
    foreach ($this-&gt;_elementPrefixPaths as $spec) {
        list($prefix, $path, $type) = array_values($spec);
        $form-&gt;addElementPrefixPath($prefix, $path, $type);
    }
}
</code></pre>

<p>When this code executes, $prefix will have the value we assigned to 'type', $path will contain 'prefix' and $type will contain 'path'.</p>

<p>I'm not really sure what the right answer here is, but in general it looks like Zend_Form should treat element prefix paths (in bulk) like Zend_Form_Element does.</p>

<p>Zend_Form_Element assumes that when assigning multiple prefix paths via Zend_Form_Element::addPrefixPaths($spec), that the $spec will be either an associative array with members 'type', 'path' and 'prefix', or an array of such associative arrays (possibly keyed on 'type'). In this case, the ordering of the array members is not really relevant, since they are looked up by key (type, path or prefix).</p>

<p>I imagine that Zend_Form::addElementPrefixPaths(array $spec) may also need attention.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Rob Allen (rob) on 2012-11-20T20:53:11.000+0000</p> 
        <div class="body">
            <p>Bulk change of all issues last updated before 1st January 2010 as "Won't Fix".</p>

<p>Feel free to re-open and provide a patch if you want to fix this issue.</p>

        </div>
    </div>
    </div>

