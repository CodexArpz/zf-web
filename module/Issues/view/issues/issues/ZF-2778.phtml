<h2>ZF-2778: Error in Zend_Db_Table::find() &amp; Zend_Filter_Inflector::filter() not initiating empty array() b4 setting value</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2008-03-01T12:32:17.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2008-09-02T10:39:22.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.6.0 (02/Sep/08)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Max Gordon (mgordon)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Simon Mundy (peptolab)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Db</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>PHP acts unpredictably when arrays are not initiated. Any array variable should be set to array() before setting any keys, ex. <em>$my_var[1] = "foo"</em> should be preceded with a <em>$my_var = array()</em>. I've found two errors based on this in 1.5RC1</p>

<p>In Zend_Db_Table::find() the following section should be changed:</p>

<pre class="highlight"><code>
$whereList = array();
$numberTerms = 0;
foreach ($args as $keyPosition =&gt; $keyValues) {
    // Coerce the values to an array.
    // Don't simply typecast to array, because the values
    // might be Zend_Db_Expr objects.
    if (!is_array($keyValues)) {
         $keyValues = array($keyValues);
     }

     if ($numberTerms == 0) {
          $numberTerms = count($keyValues);
     } else if (count($keyValues) != $numberTerms) {
          require_once 'Zend/Db/Table/Exception.php';
          throw new Zend_Db_Table_Exception("Missing value(s) for the primary key");
     }

     for ($i = 0; $i &lt; count($keyValues); ++$i) {
          $whereList[$i][$keyPosition] = $keyValues[$i];
     }
}
</code></pre>

<p>to:</p>

<pre class="highlight"><code>
$whereList = array();
$numberTerms = 0;
foreach ($args as $keyPosition =&gt; $keyValues) {
    // Coerce the values to an array.
    // Don't simply typecast to array, because the values
    // might be Zend_Db_Expr objects.
    if (!is_array($keyValues)) {
         $keyValues = array($keyValues);
     }

     if ($numberTerms == 0) {
          $numberTerms = count($keyValues);
     } else if (count($keyValues) != $numberTerms) {
          require_once 'Zend/Db/Table/Exception.php';
          throw new Zend_Db_Table_Exception("Missing value(s) for the primary key");
     }

     for ($i = 0; $i &lt; count($keyValues); ++$i) {
          if (!is_array($whereList[$i])){
               $whereList[$i] = array();
          }
          $whereList[$i][$keyPosition] = $keyValues[$i];
     }
}
</code></pre>

<p>On my computer the "$whereList[$i][$keyPosition] = $keyValues[$i];" creates a semi-random array that contains 3 elements instead of one element causin a annoying warning.</p>

<p>The same error seems to occur in Zend_Filter_Inflector::filter():</p>

<pre class="highlight"><code>
$processedParts = array(); // Add this row before the foreach statement
foreach ($this-&gt;_rules as $ruleName =&gt; $ruleValue) {...}
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-03-25T20:43:56.000+0000</p> 
        <div class="body">
            <p>Please categorize/fix as needed.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Simon Mundy (peptolab) on 2008-05-30T18:54:53.000+0000</p> 
        <div class="body">
            <p>Resolved in r9577</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-09-02T10:39:22.000+0000</p> 
        <div class="body">
            <p>Updating for the 1.6.0 release.</p>

        </div>
    </div>
    </div>

