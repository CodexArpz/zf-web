<h2>ZF-8380: Zend_Db_Adapter_Abstract: add method to fetch key-record pairs</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Docs:  Problem</dd>

    <dt>Created:</dt>
    <dd>2009-11-24T02:29:14.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2010-02-18T13:42:01.000+0000</dd>

    <dt>Status:</dt>
    <dd>Closed</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Erwin Derksen (erwind)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Michael Rehbein (tech13)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Db</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
        <li><a href="/issues/secure/attachment/12742/zf8380.r21050.patch">zf8380.r21050.patch</a></li>
        </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Currently, Zend_Db_Adapter_Abstract has a fetchPairs() method which returns an array of key-value pairs. Why not add a similar method that puts the complete records into the value of the resulting  array elements?</p>

<p>Typical use case: loading a complete table in memory at once and being able to directly access it by primary key. Type of table will typically be a lookup table that is referenced by (many) other tables (country codes, statuses, categories, ...) and contains (more than 1 scalar) information about the codes used (label, long description, parent, valid from, valid until). Note that these lookup tables have often more fields than just an id and a label and thus that fetchPairs cannot handle all situations.</p>

<p>Alternatives:
- joining these tables with all queries executed on other tables: complexity and performance hit (in the database and the amount of duplicate information sent over the connection)
- doing it yourself after executing a fetchAll: performance hit (creating 2 arrays)</p>

<p>The code could be as simple as that of fetchPairs (though I'm not totally happy with the name, but couldn't think of a better one for now):</p>

<pre class="highlight"><code>
    public function fetchKeyRecordPairs($sql, $bind = array())
    {
        $stmt = $this-&gt;query($sql, $bind);
        $data = array();
        while ($row = $stmt-&gt;fetch(Zend_Db::FETCH_NUM)) {
            $data[$row[0]] = $row;
        }
        return $data;
    }
</code></pre>

<p>Same restrictions hold here as for fetchPairs: first column should return unique values or they will be overwritten.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Mickael Perraud (mikaelkael) on 2009-11-24T04:33:52.000+0000</p> 
        <div class="body">
            <p>You describe the fetchAssoc() method</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Erwin Derksen (erwind) on 2009-11-24T05:04:05.000+0000</p> 
        <div class="body">
            <p>Then the on-line documentation is misleading. It does not say anything about the keys of the first dimension of the result array. Moreover, the example would fail???</p>

<p>15.1.3.3. Fetching a Result Set as an Associative Array
The fetchAssoc() method returns data in an array of associative arrays, regardless of what value you have set for the fetch mode.</p>

<p>Example 15.12. Using fetchAssoc()</p>

<pre class="highlight"><code>
$db-&gt;setFetchMode(Zend_Db::FETCH_OBJ);

$result = $db-&gt;fetchAssoc('SELECT * FROM bugs WHERE bug_id = ?', 2);

// $result is an array of associative arrays, in spite of the fetch mode
echo $result[0]['bug_description'];
</code></pre>

<p>I would expect only to have a $result[2] available when the first dimension contains the bug_id's as keys.</p>

<p>However, looking at the code of fetchAssoc I see that it is indeed what I requested for (and that my quick coding example would not work for the Zend_Db::FETCH_ASSOC mode (as the mode is hard set)).</p>

<p>note: should fetchAssoc not better use reset():</p>

<pre class="highlight"><code>
            // isn't this cleaner and faster???
            $key = reset($row);
            $data[$key] = $row;
</code></pre>

<pre class="highlight"><code>
            // than this???
            $tmp = array_values(array_slice($row, 0, 1));
            $data[$tmp[0]] = $row;
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Mickael Perraud (mikaelkael) on 2009-11-24T10:38:06.000+0000</p> 
        <div class="body">
            <p>I reopen as a documentation issue</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Michael Rehbein (tech13) on 2010-02-15T07:47:44.000+0000</p> 
        <div class="body">
            <p>Attached adjustments to the documentation for $db-&gt;fetchAssoc to try to make it clearer</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Mickael Perraud (mikaelkael) on 2010-02-18T13:42:01.000+0000</p> 
        <div class="body">
            <p>Fixed in documentation with r21080 and reported to 1.10 branch with r21081</p>

        </div>
    </div>
    </div>

