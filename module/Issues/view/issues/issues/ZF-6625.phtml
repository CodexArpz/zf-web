<h2>ZF-6625: Mayor security issue with Zend_Amf loading services via Zend_Loader</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2009-05-12T12:38:41.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-06-17T13:51:02.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.8.4 (23/Jun/09)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Stanislav Malyshev (stas)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Amf</li>
            <li>Zend_Loader</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Zend_Amf loads service-classes dynamically by using Zend_Loader in the following code:</p>

<p>--- Zend/Amf/Server.php (169-179) ---------------------------------------</p>

<pre><code>            foreach ($this-&gt;_directories as $dir) {
                $classPath[] = $dir . $uriclasspath;
            }

            require_once('Zend/Loader.php');
            try {
                Zend_Loader::loadClass($className, $classPath, true);
            } catch (Exception $e) {
                require_once 'Zend/Amf/Server/Exception.php';
                throw new Zend_Amf_Server_Exception('Class "' . $className . '" does not exist');
            }
</code></pre>

<hr /><p>This is a mayor security issue as Zend_Loader tries to find the passed class($className) in all set include-paths if it is not found in the passed paths($classPath).
As a result it is possible to access each and every Class that implements a public method and can be loaded via zend-loader!!</p>

<p>I can think of two solutions:
1. Extend the interface of the loadClass function like so: public static function loadClass($class, $dirs = null, $ignoreIncludePaths = false)
2. Implement an independent service/class loading mechanism in Zend_Amf</p>

<p>The first solution seems to be better as this functionality could be advantageous in other components.</p>

<p>greetings, Guille</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by HT (horiat) on 2009-06-01T18:34:51.000+0000</p> 
        <div class="body">
            <p>This issue also allows an attacker to call any methods for  classes included before the remoting class.
I agree with Guille, solution 1 is the simplest / elegant and requires minimum code change.</p>

<p>Any ideas when this will be implemented? as this is major security vulnerability affecting live sites</p>

<p>Cheers,
Horia</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wade Arnold (wadearnold) on 2009-06-16T14:52:04.000+0000</p> 
        <div class="body">
            <p>Stas, Can you check this out? I am not sure if you want to add something to Zend_Loader or make a modification inside of Zend_Amf_Server? How are the other Zend Server endpoints handling this?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Stanislav Malyshev (stas) on 2009-06-17T13:51:01.000+0000</p> 
        <div class="body">
            <p>Thanks, fixed it - now it will load only files from specified directories.</p>

        </div>
    </div>
    </div>

