<h2>ZF-7687: Zend_Rest_Server usage instructions</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Docs:  Improvement</dd>

    <dt>Created:</dt>
    <dd>2009-08-25T13:39:42.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-08-25T17:48:33.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Steve Pavarno (pavarnos)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Matthew Weier O'Phinney (matthew)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Rest_Server</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Hi</p>

<p>The documentation for Zend_Rest_Server and _Client is a good start, but I had to spend a fair bit of time Googling, experimenting, and digging through the source to get it to work. A few changes to the docs might make it easier for others...?</p>

<p>Zend_Rest_Server example 45.6 could be shown as part of a normal Zend_Controller_Action, giving the complete context that you need to get a server working.<br />
    function restAction()
    {
        $this-&gt;_helper-&gt;viewRenderer-&gt;setNoRender();
        $server = new Zend_Rest_Server();
        $server-&gt;setClass('My_Service_Class');
        $server-&gt;handle( $this-&gt;_request-&gt;getParams() );
    }</p>

<p>Note that My_Service_Class should do its own parameter validation in each public method.</p>

<p>Zend_Rest_Client example 45.1 is slightly misleading</p>

<p>Differences in Calling:
If you are calling a web service that is part of a standard Zend Framework application, you can't use the -&gt;get() method because it appends ?method=sayHello&amp;who=Davey&amp;when=Day to the URL (eg resulting in <a href="http://framework.zend.com/webservice/rest/?method=sayHello&amp;who=Davey&amp;when=Day">http://framework.zend.com/webservice/rest/â€¦</a>), which doesn't work. You need to use -&gt;post() instead so that the standard routers can correctly separate the parameters.</p>

<p>If your web service needs a session eg to maintain logged in status then call $client-&gt;getHTTPClient()-&gt;setCookieJar(); eg
$client = new Zend_Rest_Client('<a href="http://framework.zend.com/rest">http://framework.zend.com/rest</a>');
$client-&gt;getHTTPClient()-&gt;setCookieJar();
$client-&gt;login( $user, $password )-&gt;post(); 
echo $client-&gt;sayHello('Davey', 'Day')-&gt;post();</p>

<hr /><p>Thanks: have been very impressed with how easy this component is to use, and how well it is integrated with the rest of the framework.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2009-08-25T17:48:09.000+0000</p> 
        <div class="body">
            <p>We plan to deprecate Zend_Rest_Server in favor of Zend_Rest_Route + Zend_Rest_Controller; since this is the case, it makes no sense to spend more time documenting it.</p>

<p>I recommend using the MVC in order to create your RESTful services.</p>

        </div>
    </div>
    </div>

