<h2>ZF-8280: Zend_Validate_Hostname Throws Errors for Checks Not Passed to Constructor</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2009-11-10T10:12:40.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-11-16T12:42:54.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.10.0 (27/Jan/10)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Tom Walsh (slim1973)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Thomas Weidner (thomas)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Validate</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>The Zend_Validate_Hostname constructor takes a bitwise value to determine what checks to perform on the passed values.</p>

<p>If you instance the constructor with:</p>

<p>$validator = new Zend_Validate_Hostname( Zend_Validate_Hostname::ALLOW_DNS );</p>

<p>and then check a value of:</p>

<p>'foobar'</p>

<p>the validator throws two errors instead of one error.</p>

<p>The first error (self::INVALID_HOSTNAME) is expected and the desired result, since we passed in ALLOW_DNS to our constructor. The second error however should not be triggered (self::LOCAL_NAME_NOT_ALLOWED) because we did not want to allow hostname checks because we specifically didn't include them in the constructor.</p>

<p>The bitwise approach is a good idea for this validator, however throwing errors for checks that we didn't even want in the first place seems a bit outside the norm for how a validator is supposed to work.</p>

<p>I have worked around this particular behavior by wrapping each logic check ("Check input against IP address", etc ) with:</p>

<p>if( ($this-&gt;_allow &amp; self::ALLOW_IP) ) {</p>

<p>This will cut down on the processing time spent on results that are not desired anyways, as well as suppress errors for checks that are not allowed.</p>

<p>I have worked around this by extending the Zend_Validate_Hostname validator with my own and duplicating the isValid() method.</p>

<p>I should also note that by extending the class with my own, there are two parent class variables that are marked private and do not extend into the child class ($_validateIdn and $_validateTld). I do not see any reason for these two variables to be marked private.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2009-11-11T00:38:42.000+0000</p> 
        <div class="body">
            <p>The reason could be that these variables don't exist anymore within trunk.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2009-11-11T03:33:03.000+0000</p> 
        <div class="body">
            <p>You can not simply switch off the logic by wrapping as this would negotate existing behaviour.</p>

<p>Example:
A given hostname could also consist of IP numbers instead of a hostname.
By stripping of the IP check you would allow IP addresses when you set only DNS because a hostname can have digits. The DNS check does of course not check if an IP is given.</p>

<p>This is not intended behaviour.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2009-11-16T12:42:54.000+0000</p> 
        <div class="body">
            <p>Closing as non-issue.</p>

<p>DNS has been set, but a LDN has been given.
In this special case both messages are valid.</p>

<p>You can override this behaviour by
* allowing local domainnames
* setting the error message to ''
* translating the message to something comfortable</p>

        </div>
    </div>
    </div>

