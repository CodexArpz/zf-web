<h2>ZF-9048: Resource creation does not use appNamespace setting</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Sub-task</dd>

    <dt>Created:</dt>
    <dd>2010-02-01T13:43:54.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2010-06-07T02:14:12.000+0000</dd>

    <dt>Status:</dt>
    <dd>Closed</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.10.5 (26/May/10)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Matthew Weier O'Phinney (matthew)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Ralph Schindler (ralph)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Tool</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <ul><li>zf create db-table/model/form, etc</li>
</ul><p>While these generate the appropriate classfiles, they do not prepend them with the appropriate namespace.</p>

<p>"zf create project" defines the appNamespace key with a value of "Application" as we discussed. However, this namespace is not being prepended to the classes in the default module -- instead I get "Model_DbTable_Guestbook", "Model_Guestbook". If I try to use "zf create db-table guestbook guestbook application", it tells me there is no "application" module, and fails.</p>

<p>I'm not sure how to resolve this, but if the default module is going to use the prefix "Application", the zf command needs to use it.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by tritone (peterpitone) on 2010-03-29T07:09:35.000+0000</p> 
        <div class="body">
            <p>I've fixed the problem adding the namescape option in application's bootstrap file.</p>

<p>Regards</p>

<p>&lt;?php</p>

<p>class Bootstrap extends Zend_Application_Bootstrap_Bootstrap
{
protected function _initRequest()
{
$options = $this-&gt;getOptions();
$this-&gt;getApplication()-&gt;setAutoloaderNamespaces(array($options["appnamespace"]));
}
}</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ralf Eggert (ralf) on 2010-05-30T05:50:56.000+0000</p> 
        <div class="body">
            <p>This seems to be fixed in 1.10.5. When I create a model, form, db-table classs, the "Application_" prefix is added automatically. Issue could be closed.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by tritone (peterpitone) on 2010-06-05T01:54:21.000+0000</p> 
        <div class="body">
            <p>For me still doesn't work, i've simply created a class with the right name (Application_Class), in the right folder and try to instantiate it, but doesn't work.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ralf Eggert (ralf) on 2010-06-05T05:09:54.000+0000</p> 
        <div class="body">
            <p>What I did was the following:</p>

<p>zf create project whatever
cd whatever/
zf create db-table Users users</p>

<p>In whatever/application/models/DbTable/Users.php then I have the class Application_Model_DbTable_Users. In the IndexController::indexAction() method I just add</p>

<p>$users = new Application_Model_DbTable_Users();</p>

<p>When I run the project on <a href="http://localhost/whatever/public/">http://localhost/whatever/public/</a> I do get an application error which says "No adapter found for Application_Model_DbTable_Users" and indicates that Application_Model_DbTable_Users is loaded.</p>

<p>So, can you reproduce this? And does this still not work for you in 1.10.5?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by tritone (peterpitone) on 2010-06-07T00:20:20.000+0000</p> 
        <div class="body">
            <p>Reproducing your instructions the result is correct: the same of your.</p>

<p>But my problem is different and maybe is caused by my misunderstanding, this is my situation:</p>

<ul><li>i've an application created by "zf create project test"</li>
<li>In the folder that i've the "Zend" library folder i've created a folder "Application" that will my namespace for custom classes</li>
<li>I've created a test classes named Application_Test in the "Application" folder</li>
<li>In my "application.ini" file i've the directive appnamespace = "Application"</li>
<li>In my IndexController::indexAction() i would try to instantiate a class contained in the "Application" namespace without require it:
  $at = new Application_Test();</li>
</ul><p>So i've an error: the class can be found.</p>

<p>But if i add following lines in _initRequest() application's Bootstrap file</p>

<p>$options = $this-&gt;getOptions();
$this-&gt;getApplication()-&gt;setAutoloaderNamespaces(array($options["appnamespace"]));</p>

<p>the class is founded and correctly instantiated.</p>

<p>But maybe this is not the correctly usage...</p>

<p>Regards</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ralf Eggert (ralf) on 2010-06-07T01:03:27.000+0000</p> 
        <div class="body">
            <p>Yes, I think there is a little bit of misunderstanding in this issue. The namespace "Application" is used for all files in your default module of your project directory test/application/. The name for this namespace is set via the directiv "appnamespace".</p>

<p>If you want to extend the Zend library folder with you own extensions of the framework, you should use a different namespace. For example you create the directory test/library/Peter and therefore use the namespace "Peter". Then you should add the following directive to your application.ini:</p>

<p>autoloadernamespaces.Peter = "Peter"</p>

<p>You should rename your class to Peter_Test and this should be autoloaded.</p>

<p>If you want to use "Application" for your library extension you should configure a different name for the classes in your default module:</p>

<p>appnamespace = "Whatever"
autoloadernamespaces.Peter = "Peter"</p>

<p>But you have to make sure that your models, forms, db-tables, etc. in your default module have the class prefix "Whatever_" to be autoloaded.</p>

<p>Does this clarify and solve your problems? If yes, could this issue be closed?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by tritone (peterpitone) on 2010-06-07T01:44:06.000+0000</p> 
        <div class="body">
            <p>Yes, my problem is solved, i've added the autoloadernamespaces directive and the problem doesn't exists anymore.</p>

<p>So thanks a lot for your help, and excuse me for the misunderstanding on the issue :)</p>

<p>Best regards</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ralf Eggert (ralf) on 2010-06-07T02:14:10.000+0000</p> 
        <div class="body">
            <p>Can be closed due to a misunderstanding of the reporter (see discussion).</p>

        </div>
    </div>
    </div>

