<h2>ZF-9444: getPluginLoader($type = null) with none argument throws exception</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2010-03-17T10:52:58.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2010-03-18T01:54:23.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Marc Thomas (existenz)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Matthew Weier O'Phinney (matthew)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Form</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Hi,</p>

<p>When trying to call "getPluginLoader()" method on a form object, an exception is thrown.
It is not the excepted result I think.</p>

<p>I wanted to use the form's "PluginLoader" in the "DisplayGroup" constructor but that seems not possible with this exception.</p>

<p>In the init() method of a Zend_Form implementation :</p>

<p>new Zend_Form_DisplayGroup('name', $this-&gt;getPluginLoader()) does not work so.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2010-03-17T11:33:26.000+0000</p> 
        <div class="body">
            <p>Actually, it's behaving exactly as expected. Zend_Form supports two types of plugins, elements and decorators, and each has its own, configured plugin loader. As such, you need to specify the <em>type</em> of plugin loader you wish to retrieve ('element' or 'decorator') when you call getPluginLoader().</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Marc Thomas (existenz) on 2010-03-17T11:59:50.000+0000</p> 
        <div class="body">
            <p>Ok, thanks for the reply.</p>

<p>1/ Why do not remove optional parameter from the method, so ? (backwards compatibility ?)</p>

<p>2/ When instanciating a "DisplayGroup", we have to use an empty or with "decorator" key plugin loader ? No use of a plugin loader with "element" exists ?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2010-03-17T12:48:47.000+0000</p> 
        <div class="body">
            <p>1) yes -- cannot remove at this point due to BC issues
2) In display groups, the elements still belong to the parent form, and are created off the parent form and simply attached to the display group. (Subforms, on the other hand, simply extend Zend_Form, and thus can also create elements... and thus have a plugin loader dedicated to element creation.)</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Marc Thomas (existenz) on 2010-03-18T01:54:19.000+0000</p> 
        <div class="body">
            <p>Ok, thanks.</p>

<p>2/ Issue I was confronted was by instanciating a Zend_Form_DisplayGroup and performing a addElements() on it (with elements which have not been added to the form before) then putting it in the form through a addDisplayGroups(array($myDisplayGroup)).</p>

<p>In this case, even by passing the form plugin loader 'DECORATOR' in DisplayGroup constructor, the decorators paths were not considered for added elements.
&lt;!&gt; HERE seems to be an issue. The plugin loader DECORATOR' working with the form does not work with DisplayGroup : it just take into account the "Zend_" namespace and not others which wera added via addElementPrefixPath() on the form.</p>

<p>A way so that decorators paths are considered is to add elements to the form before adding them to the DisplayGroup element, but they are display twice (in a sense it is normal because elements objects are added in two elements which are distinct at this time).</p>

<p>The working (right ?) way beeing to add elements to the form and adding directly the DisplayGroup through addDisplayGroup() without instanciating it, then decorators will be take into account.</p>

        </div>
    </div>
    </div>

