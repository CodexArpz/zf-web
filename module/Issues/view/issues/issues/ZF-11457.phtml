<h2>ZF-11457: Zend_Form::isValid() incorrectly handles multi-option form element spanned into multiple Zend_Form elements</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2011-06-08T18:26:42.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2011-06-09T13:30:18.000+0000</dd>

    <dt>Status:</dt>
    <dd>Open</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Alexander Grimalovsky (flying)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Christian Albrecht (alab)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Form</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>For multi-option form elements, in particular for Zend_Form_Element_Radio it is possible to have situation when single element of HTML form is represented by several elements in Zend_Form. In this case these elements are added with names that are differs from HTML form element's name.</p>

<p>Such form renders and works correctly until it is tried to be validated: Zend_Form::isValid() expects that keys of form's elements matches to keys of form data passed to validation, but it is not so in scenario described above.</p>

<p>Correct behavior would be to check if element is instance of Zend_Form_Element_Multi and use $element-&gt;getName() as key in array of validated values.</p>

<p>Same behavior should be also applied to other methods of Zend_Form that performs iteration among form's elements and performs some actions using their keys. In particular following methods of Zend_Form may be affected by same problem:
setDefaults()
getValues()
getValidValues()
getUnfilteredValues()
isValidPartial()
getMessages()</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Alexander Grimalovsky (flying) on 2011-06-08T18:28:20.000+0000</p> 
        <div class="body">
            <p>Here is example script to demonstrate problem:
<a href="http://dl.dropbox.com/u/7763774/ZF-11457_example.php">http://dl.dropbox.com/u/7763774/…</a>
It is expected to get "VALID" as result of its run, but instead it gives array of form errors.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ryan Mauger (bittarman) on 2011-06-08T18:52:58.000+0000</p> 
        <div class="body">
            <p>Zend_Form also expects, and is designed to work with the multiOptions being on a <em>single</em> element. 
Its quite expected for this to cause problems, as its working well against the design of the form.</p>

<p>I believe this issue should be closed as won't fix.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Alexander Grimalovsky (flying) on 2011-06-09T09:49:05.000+0000</p> 
        <div class="body">
            <p>Ryan, I disagree with you. Zend_Form <em>allows</em> to set form element's names that are differs from key names in its $_elements registry, otherwise Zend_Form_Element::setName() and getName() methods should not be there or should not store element's name inside class but should ask owner form for their names. But it is not so.</p>

<p>Since Zend_Form_Element <em>can</em> have its own name - I didn't see why it can't be used to construct several form elements with same name. Moreover it is pretty real world situation, not something synthetic. Examples of such form includes all kinds of wizard style forms that provide several choices and additional options that became active depending on the choice made. Real world example of such form can be found, for example, in Terms and Conditions form of Google AdSense: <a href="https://www.google.com/adsense/gaiaauth2?hl=en_US">https://www.google.com/adsense/gaiaauth2?hl=en_US</a>
Here is screenshot of this form in its various states: 
<a href="http://dl.dropbox.com/u/7763774/ZF-11457_google_adsense_toc_example.png">http://dl.dropbox.com/u/7763774/…</a></p>

<p>But, as I wrote before - currently Zend_Form doesn't allow to validate such form properly because of lack of very simple additional check. I really doesn't see why Zend Framework should deny such functionality that is usable in various applications because of lack of such small change.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Kai Uwe (kaiuwe) on 2011-06-09T10:50:23.000+0000</p> 
        <div class="body">
            <p>Hi Alexander,
can you provide a patch for this?
I think Christian is very busy.</p>

<p>Thanks!</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Alexander Grimalovsky (flying) on 2011-06-09T13:30:18.000+0000</p> 
        <div class="body">
            <p>Hello,</p>

<p>After further coding/testing/thinking I came to conclusion that Ryan is right. Also I found that real source of a problem that causes this bug to be submitted is different - it is 1:1 relation between logical and visual structure of the form while in a case of splitted set of radiobuttons this relation is different - single logical form element should be partially rendered several times and represented by several independent elements in HTML.</p>

<p>As I can understand - this is not so easy to do with current design of Zend_Form because it will require adding some kind of "visual layout" of the form and it is not clearly fit into what is Zend_Form designed for.</p>

<p>Because of this I propose to follow Ryan's decision and close this bug as "not a bug" or "won't fix". Sorry for publishing this so early without getting deep enough into problem.</p>

        </div>
    </div>
    </div>

