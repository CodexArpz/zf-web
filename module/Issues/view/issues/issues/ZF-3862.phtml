<h2>ZF-3862: Zend_XmlRpc_Server does not correctly handle serialized objects returned from methods</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2008-08-05T21:21:02.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-08-22T19:24:11.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Dan Makovec (dmakovec)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Lars Strojny (lars)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_XmlRpc_Server</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-3947">ZF-3947</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>See <a href="http://bugs.php.net/bug.php?id=45244&amp;edit=2">http://bugs.php.net/bug.php?id=45244&amp;edit=2</a></p>

<p>Zend_XmlRpc_Server appears to rely on serialized objects being converted to a "displayable" as opposed to "storeable" form.  When an object with protected properties is serialized, serialize() inserts NULL characters before the representation of the protected property.</p>

<p>For an object of a class defined thus:</p>

<p>class Task
{</p>

<pre><code>public $_id;
protected $_name;
protected $_description;
protected $_key;
public function setName($name) {$this-&gt;_name = $name;}
public function setId($description) {$this-&gt;_description = $description;}
public function setKey($key) {$this-&gt;_key = $key;}
</code></pre>

<p>}</p>

<p>serialize() generates the following:</p>

<p>O:4:"Task":5:{s:3:"key";s:0:"";s:6:"<em>_id";s:1:"1";s:8:"</em>_name";s:6:"Task 1";s:15:"*_description";s:21:"This is my first task";s:7:"*_key";s:0:"";}</p>

<p>What's not clear from above is that the property definition for _id is actually : s:6:"[NULL]*[NULL]_id";s:1:"1";</p>

<p>Some part of XmlRpc_Server appears to be using string methods which determine a NULL character to be the end of a string, so the NULLs in the above serialised string cause the server to break when packaging it into a response.</p>

<p>So when XmlRpc_Server-&gt;handle() is called and the above is returned, it dispatches the following to the client within the response payload:</p>

<p>O:4:"Task":5:{s:3:"key";s:0:"";s:6:"</p>

<p>The client then can't call unserialize() on this value as much of the object definition is missing.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Lars Strojny (lars) on 2009-08-22T19:24:11.000+0000</p> 
        <div class="body">
            <p>XML does not handle null bytes at all. Encode your serialized object as a base64 string and everything will work fine. I've added a test to verify that it works. See Zend_XmlRpc_ValueTest::testMarshalSerializedObjectAsBase64.</p>

        </div>
    </div>
    </div>

