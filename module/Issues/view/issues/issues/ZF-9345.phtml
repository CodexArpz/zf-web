<h2>ZF-9345: &quot;Unknows Definition&quot; error when sending simple untyped objects</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2010-03-05T17:27:26.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2011-02-04T12:45:34.000+0000</dd>

    <dt>Status:</dt>
    <dd>Open</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Wade Arnold (wadearnold)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Amf</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
        <li><a href="/issues/secure/attachment/12834/example.as">example.as</a></li>
            <li><a href="/issues/secure/attachment/12833/input.bin">input.bin</a></li>
            <li><a href="/issues/secure/attachment/12832/test.php">test.php</a></li>
        </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>I upgraded to PHP 5.3.2 and Zend Framework 1.10.2 at the same time. Afterwards, a simple AMF call that used to work no longer does. When passing several untyped arrays ("Object" types from Flex) to the PHP function, the result is the following exception, which makes no sense to me:</p>

<p><b>Fatal error</b>:  Uncaught exception 'Zend_Amf_Exception' with message 'Unknows Definition reference: 0' in C:\svn\zend\ZendFramework-1.10.2-minimal\library\Zend\Amf\Parse\Amf3\Deserializer.php:304
Stack trace:</p>

<h1>0 C:\svn\zend\ZendFramework-1.10.2-minimal\library\Zend\Amf\Parse\Amf3\Deserializer.php(106): Zend_Amf_Parse_Amf3_Deserializer-&gt;readObject()</h1>

<h1>1 C:\svn\zend\ZendFramework-1.10.2-minimal\library\Zend\Amf\Parse\Amf0\Deserializer.php(293): Zend_Amf_Parse_Amf3_Deserializer-&gt;readTypeMarker()</h1>

<h1>2 C:\svn\zend\ZendFramework-1.10.2-minimal\library\Zend\Amf\Parse\Amf0\Deserializer.php(130): Zend_Amf_Parse_Amf0_Deserializer-&gt;readAmf3TypeMarker()</h1>

<h1>3 C:\svn\zend\ZendFramework-1.10.2-minimal\library\Zend\Amf\Parse\Amf0\Deserializer.php(217): Zend_Amf_Parse_Amf0_Deserializer-&gt;readTypeMarker()</h1>

<h1>4 C:\svn\zend\ZendFramework-1.10.2-minimal\library\Zend\Amf\Parse\Amf0\Deserializer.php(106): Zend_Amf_Parse_Amf0_Deserializer-&gt;readArray()</h1>

<h1>5 C:\svn\zend\ZendFramework-1.10.2-minimal\library\Zend\Amf\Request.php(173): Zend_Amf_Parse_Amf0_Deseria in <b>C:\svn\zend\ZendFramework-1.10.2-minimal\library\Zend\Amf\Request.php</b> on line <b>176</b><br /></h1>

<p>I will attach a skeleton PHP sample that exhibits the behavior. The calling code is a Flex function that looks like so:</p>

<pre><code>    public function login(username:String, password:String):void
    {
        var session:Object = new Object();
        session['code'] = _sessionID;

        var loginInfo:Object = new Object();
        loginInfo['username'] = username;
        loginInfo['password'] = SHA1.encrypt(_authSalt+password);

        var everything:Object = new Object();
        everything['session_info'] = session;
        everything['login_method'] = "password";
        everything['login_blob'] = loginInfo;

        var responder:Responder = new Responder(onLogin, onNetworkingError);
        _conn.call("XCRpcProtocol_AMF.login", responder, session, "password", loginInfo);
    }
</code></pre>

<p>In this example case it is called with both parameters set to "". I will attach the binary input (saved from Charles proxy) in case you have a method of importing it directly, to simplify repro. Thanks!</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Eric Heimburg (ericheimburg) on 2010-03-05T17:31:15.000+0000</p> 
        <div class="body">
            <p>test.php is a very simple example that does nothing much. (I am sure you will need to change the include path, I was making sure that the correct Zend library was getting used.)</p>

<p>input.bin is the binary data that is generated by the Flex client application, which causes the error.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Eric Heimburg (ericheimburg) on 2010-03-05T17:34:19.000+0000</p> 
        <div class="body">
            <p>The code snippet I pasted originally got malformed; here it is again as example.as. Not actually runnable, but it's pretty understandable (as it doesn't do much).</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Max Wagner (emeyex) on 2011-02-04T11:56:36.000+0000</p> 
        <div class="body">
            <p>Same exact exception and callstack. Using ZendFramework 1.11.3, PHP 5.3.2. In my case, it's only when I add a third argument to my PHP function, and only when that third argument is an object (can pass string and int fine).</p>

<p>in PHP service:
function failsToGetCalledFromAS3($tableName, $rowAsObject, $whereExpression)
{
  return TRUE;
}</p>

<p>from AS3:
connection.gateway.call("DevDb.failsToGetCalledFromAS3",new Responder(onResponse,onFault),tableName,row,{someValue:"128"});</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Max Wagner (emeyex) on 2011-02-04T12:45:33.000+0000</p> 
        <div class="body">
            <p>The obvious workaround I guess is just to pass all parameters to RPCs as a single array of arguments, and extract them inside my own functions. Seems a little ghetto but it works so far.</p>

        </div>
    </div>
    </div>

