<h2>ZF-802: Zend_Auth - Abstract Storage into Interface</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2007-01-26T08:10:40.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2007-07-05T14:43:42.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>0.8.0 (21/Feb/07)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Darby Felton (darby)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Auth</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>In the current Zend_Auth design, authentication tokens are stored in the PHP session by default using Zend_Session. If this behavior is not desired (e.g., a user wishes to store the authentication token elsewhere or using a different approach than Zend_Session), then the user must disable session storage of authentication tokens explicitly by providing {{false}} as the value for the {{useSession}} option. This is a tight coupling to Zend_Session within Zend_Auth.</p>

<p>Authentication token storage is not otherwise addressed by the current design. If we have a storage interface for the authentication tokens, then various storage mechanisms could be developed by users, and some might even make their way into the framework. Zend_Auth could then be storage agnostic, and unit testing may be improved by allowing for creation of mock storage objects. This is a bit of an implementation detail and would not need to be known by many users, but those who would store authentication tokens other than via Zend_Session would certainly benefit from abstracting the storage mechanism.</p>

<p>An example storage interface by [~ralph]:</p>

<pre class="highlight"><code>
interface Zend_Auth_Storage_Interface
{
    /**
     * has() - Method for checking if a value exists for supplied key
     *
     * @param string $name
     * @return bool
     */
    public function has($name);
    
    
    /**
     * get() - Method for getting a value for supplied key
     *
     * @param string $name
     * @return mixed
     */
    public function get($name);
    
    
    /**
     * set() - Method for setting a name/value pair
     *
     * @param string $name
     * @param mixed $value
     */
    public function set($name, $value);
    
    
    /**
     * remove() - Method for removing a key from storage
     *
     * @param string $name
     */
    public function remove($name);
    
    
}
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Darby Felton (darby) on 2007-02-14T16:31:14.000+0000</p> 
        <div class="body">
            <p>Resolved with SVN <a href="http://framework.zend.com/fisheye/changelog/Zend_Framework/?cs=3412">r3412</a>.</p>

        </div>
    </div>
    </div>

