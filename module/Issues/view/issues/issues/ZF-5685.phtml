<h2>ZF-5685: Zend_Json_Server does not respect the JSON RPC protocol</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2009-02-04T03:15:37.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2013-03-13T20:55:24.000+0000</dd>

    <dt>Status:</dt>
    <dd>Open</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>Next Mini Release ()</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Jean-François (aikido)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Matthew Weier O'Phinney (matthew)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Json_Server</li>
            <li>FixForZF1.12.1</li>
            <li>zf-crteam-review</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
        <li><a href="/issues/secure/attachment/12001/JsonServerNamedParameters.diff">JsonServerNamedParameters.diff</a></li>
        </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Hello,</p>

<p>I am French so, sorry for my bad English...</p>

<p>Zend_Json_Server does not respect the JSON RPC protocol.
Here "http://groups.google.com/group/json-rpc/web/json-rpc-1-2-proposal", we can read this:</p>

<p>Procedure Call with named parameters:</p>

<p>--&gt; {"jsonrpc": "2.0", "method": "subtract", "params": {"subtrahend": 23, "minuend": 42}, "id": 3}
&lt;-- {"jsonrpc": "2.0", "result": 19, "id": 3}</p>

<p>--&gt; {"jsonrpc": "2.0", "method": "subtract", "params": {"minuend": 42, "subtrahend": 23}, "id": 4}
&lt;-- {"jsonrpc": "2.0", "result": 19, "id": 4}</p>

<p>Or the Zend_Json_Server does not make this.
The order of the parameters is important but the protocol specify that the order of the parameters is not important (Look exeample)...</p>

<p>Zend_Json_Server must read the method arguments name for to sort the params correctly.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2009-02-04T12:08:33.000+0000</p> 
        <div class="body">
            <p>The 1.2 specification has never been officially adopted, and one area that has been especially contentious is the idea of parameter order. In fact, in the past week on the JSON-RPC lists, it was pointed out that supporting both unnamed and named parameters is something that's next to impossible to achieve in most languages. Zend_Json_Server, as a result, allows for either named keys, or an ordered array, and then passes them to the method -- and this is currently the recommendation that is being drafted in the 2.0 specification.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2009-02-04T12:39:50.000+0000</p> 
        <div class="body">
            <p>Actually... now that I look at the code again, I realize that named argument support is not currently implemented. I'm flagging this as an improvement.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2009-02-04T12:41:10.000+0000</p> 
        <div class="body">
            <p>Scheduling as "improvement", and marking as must have for 1.8.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Jean-François (aikido) on 2009-02-05T01:01:35.000+0000</p> 
        <div class="body">
            <p>If I understood, for the moment, Zend_Json_Server can do:</p>

<p>--&gt; {"jsonrpc": "2.0", "method": "subtract", "params": {"subtrahend": 23, "minuend": 42}, "id": 3}
&lt;-- {"jsonrpc": "2.0", "result": 19, "id": 3}</p>

<p>--&gt; {"jsonrpc": "2.0", "method": "subtract", "params": [23, 42], "id": 3}
&lt;-- {"jsonrpc": "2.0", "result": 19, "id": 3}</p>

<p>In these cases, the order of the parameters is important and must be the same that the order of the method parameters.
Zend_Json_Server is ok for these cases.</p>

<p>Now, Zend_Json_Server can not do that:</p>

<p>--&gt; {"jsonrpc": "2.0", "method": "subtract", "params": {"minuend": 42, "subtrahend": 23}, "id": 4}
&lt;-- {"jsonrpc": "2.0", "result": 19, "id": 4}</p>

<p>Here, the order is not respected. It is this case which is problematic.</p>

<p>Are you agree with me?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Rob Olmos (ndrtek_rob) on 2009-06-11T16:57:37.000+0000</p> 
        <div class="body">
            <p>I have the same issue. Attached is a simple patch that corrects the issue in my simple usage.</p>

<p>I added throwing of an "exception" for invalid parameters but feel free to remove if deemed too much additional functionality for a minor release.</p>

<p>Thanks for the JSON Server module!</p>

<p>Rob Olmos
Ender Technology Corp.
<a href="www.endertech.com">www.endertech.com</a></p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Rob Olmos (ndrtek_rob) on 2009-06-11T16:58:50.000+0000</p> 
        <div class="body">
            <p>Patch to correct the order of named parameters before dispatching.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by -.- (campasau) on 2009-06-18T16:30:19.000+0000</p> 
        <div class="body">
            <p>Maybe batched requests can also be added?!</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Marco Egli (egli) on 2009-07-07T00:53:03.000+0000</p> 
        <div class="body">
            <p>I'm using zf 1.8.4 an the bug is still open. Probably there is a need to change the "fix version" or to fix the issue. Thank you.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2009-07-07T04:49:22.000+0000</p> 
        <div class="body">
            <p>"next minor version" means the next minor version we release. We change it to the actual fix version once the issue is fixed.</p>

<p>I'll try and get it in for 1.9; patches are easier to accept when they include unit tests, however.</p>

        </div>
    </div>
    </div>

