<h2>ZF-1031: Zend_Db_* methods should throw only Zend_Db_Exception and/or derivatives </h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2007-03-09T13:18:48.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2007-07-05T14:43:55.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>0.9.1 (23/Mar/07)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Ralph Schindler (ralph)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Bill Karwin (bkarwin)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Db</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Zend_Db_* methods should throw only Zend_Db_Exception and/or derivatives regardless of the type of Adapter that the developer has deployed the use of.</p>

<p>Comments attached below shall be the list of all aspects that throw non Zend_Db_Exception or inherited exceptions..</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Ralph Schindler (ralph) on 2007-03-09T13:29:54.000+0000</p> 
        <div class="body">
            <p>After a quick review, it seems like the place where code meets the database is always in:</p>

<p>line 132~ish of Zend/Db/Adapter/Abstract.php --</p>

<pre><code>/**
 * Special handling for PDO query().
 * All bind parameter names must begin with ':'
 *
 * @param string|Zend_Db_Select $sql The SQL statement with placeholders.
 * @param array $bind An array of data to bind to the placeholders.
 * @return Zend_Db_Pdo_Statement
 */
public function query($sql, $bind = array())
{
    if (is_array($bind)) {
        foreach ($bind as $name =&gt; $value) {
            if (!is_int($name) &amp;&amp; !preg_match('/^:/', $name)) {
                $newName = ":$name";
                unset($bind[$name]);
                $bind[$newName] = $value;
            }
        }
    }
    return parent::query($sql, $bind);
}
</code></pre>

<p>Perhaps for granularity, all adapters should at the very least implement a query() that forwards the request to parent::query() and if errors occur, they should produce their own adapter flavored exception.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-03-09T14:16:57.000+0000</p> 
        <div class="body">
            <p>Thanks for the help!  I see where this needs to happen.</p>

<p>As for granular exceptions, we don't currently have distinct exceptions for the diffrent PDO adapters.  We only have distinct exceptions for non-PDO adapters (though I question why this is useful).  So I would just re-throw a Zend_Db_Adapter_Exception if we get a PDOException.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ralph Schindler (ralph) on 2007-03-09T14:31:33.000+0000</p> 
        <div class="body">
            <p>Thats fine, i saw that Db2/Exception existed, as did ORacle/Exception.php</p>

<p>The only reason i thought there might be a need for granular exceptions is so that if an exception had funky default messages (like the PDO [SQLSTATE]... prefix), a more friendly message could propagate down the stack to the caught DB/Exception.php type.. IE, there would be no more [SQLSTATE] #### stuff in the final caught Zend_Db_Exception::getMessage() output.</p>

<p>just some thoughts..</p>

<p>-ralph</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-03-09T14:46:16.000+0000</p> 
        <div class="body">
            <p>I plan to use a backend-neutral exception message, and "chain" the PDOException.</p>

<p>Cf. Zend_Gdata_HttpException.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ralph Schindler (ralph) on 2007-03-09T14:57:25.000+0000</p> 
        <div class="body">
            <p>That sounds like a winner.
Thanks,
Ralph</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-03-15T12:30:05.000+0000</p> 
        <div class="body">
            <p>Set component to Zend_Db.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-03-22T23:17:35.000+0000</p> 
        <div class="body">
            <p>As of revision 4202, the PDOException is now re-thrown as a Zend_Db_Adapter_Exception.  The original PDOException is added to the new exception in a "chained" fashion, and is accessible via a method "getChainedException()".</p>

        </div>
    </div>
    </div>

