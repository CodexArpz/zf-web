<h2>ZF-1057: Unique id generation</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>New Feature</dd>

    <dt>Created:</dt>
    <dd>2007-03-15T13:40:54.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-11-20T20:52:33.000+0000</dd>

    <dt>Status:</dt>
    <dd>Closed</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
        None
                    </dd>

    <dt>Tags:</dt>
    <dd><ul>    </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
        <li><a href="/issues/secure/attachment/12365/Zend_Guid.php">Zend_Guid.php</a></li>
        </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>That would be good to have something for unique id generation.</p>

<p><a href="http://ru.php.net/manual/en/function.uniqid.php">uniqid()</a> php function is based on current time and doesn't really guarantee the results are always unique.</p>

<p>"more_entropy" parameter adds entropy based on pseudo-random value, but also doesn't guarantee unique value (it's also large enough - 26 chars).</p>

<p>That would be good to have something in framework to solve this problem. Best solution is to have possibility to generate worldwide unique values.</p>

<p>For some cases problem may be solved at other levels.
Ex. Zend_Memory needs unique ids. Zend_Cache_Backend interface may be extended with unique id generation functionality, where returned id is unique in terms of specified backend (file name, database id or something else).</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-04-04T17:16:00.000+0000</p> 
        <div class="body">
            <p>Assign to Bill Karwin.
Categorize under new Zend_Guid proposed component.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-10-17T15:28:46.000+0000</p> 
        <div class="body">
            <p>Changing to 'Unassigned'</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Danny Verkade (d.verkade) on 2009-11-15T14:33:05.000+0000</p> 
        <div class="body">
            <p>Here is my version of a GUID class, maybe it can help:</p>

<p>&lt;?php</p>

<p>/**
 * Class representation of the globally unique identifier or GUID, a special type
 * of identifier used in software applications in order to provide a reference
 * number which is unique in any context.
 *
 * @author      Danny Verkade
 * @copyright   Â© 2009 MBWP Internetbureau
 */
class Zend_Guid
{
    /**
     * @var array
     */
    protected $bytes;</p>

<pre><code>/**
 * @var Zend_Guid
 */
protected static $emptyGuid;

/**
 * Constructs a new Guid instance given its underlying value as a byte
 * array.
 *
 * @param array $bytes a 16 element byte array.
 */
function __construct($bytes)
{
    if (!is_array($bytes) || count($bytes) != 16) {
        throw new Zend_Exception("The argument must be a 16 element byte array");
    }
    for ($i = 0; $i &lt; 16; $i++) {
        $b = $bytes[$i];
        if ((string)(int)$b !== (string)$b || $b &lt; 0 || $b &gt; 255) {
            throw new Zend_Exception("Value other than a byte at offset {$i}");
        }
    }
    $this-&gt;bytes = $bytes;
}

/**
 * Returns a Guid object that has all its bits set to zero.
 *
 * @return Zend_Guid a nil Guid.
 * @static
 */
public static function emptyGuid()
{
    if (!isset($this-&gt;emptyGuid)) {
        $this-&gt;emptyGuid = new Zend_Guid(array_pad(array(), 16, 0));
    }
    return $this-&gt;emptyGuid;
}

/**
 * Returns a new, pseudo-randomly generated Guid object.
 *
 * @return Zend_Guid a new Guid object.
 */
public static function generateGuid()
{
    $bytes = array();
    for ($i = 0; $i &lt; 16; $i++) {
        if ($i == 6) { // Version field (version 4)
            $b = mt_rand(0, 15) | 64;
        } else if ($i == 8) { // Variant field (type 2)
            $b = mt_rand(0, 63) | 128;
        } else {
            $b = mt_rand(0, 255);
        }
        $bytes[] = $b;
    }
    return new Zend_Guid($bytes);
}

/**
 * Parses a Guid object from the specified 32 character hexadecimal
 * string. Returns a nil Guid (see Guid::nilGuid) if the string could
 * not be parsed.
 *
 * @param string $str the string representation of a Guid.
 * @return Zend_Guid a Guid object parsed from its string representation.
 */
public static function parseGuid($str)
{
    $guid = null;
    $str = str_replace(array('{', '(', '-', ')', '}'), '', $str);
    if (strlen($str) == 32) {
        $bytes = array();
        for ($i = 1; $i &lt;= 32; $i++) {
            $ch = $str{$i - 1};
            if (($ch &lt; '0' || $ch &gt; '9')
                  &amp;&amp; ($ch &lt; 'a' || $ch &gt; 'f')
                  &amp;&amp; ($ch &lt; 'A' || $ch &gt; 'F')) {
                break;
            }
            $n = hexdec($ch);
            if ($i % 2 != 0) {
                $b = $n;
            } else {
                $bytes[] = $b * 16 + $n;
            }
        }
        if (count($bytes) == 16) {
            $guid = new Zend_Guid($bytes);
        }
    }
    if (is_null($guid)) {
        throw new Zend_Exception('[Guid::parseGuid()] '
            . "Could not parse string '{$str}'");

        $guid =&amp; Zend_Guid::emptyGuid();
    }
    return $guid;
}

/**
 * Returns a string representation of this Guid object.
 *
 * @return string a string in the format
 *  "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx", where "x" is a
 *  hexadecimal digit.
 */
public function toString()
{
    $str = '';
    for ($i = 1; $i &lt;= 16; $i++) {
        $b = $this-&gt;bytes[$i - 1];
        if ($b &lt; 16) {
            $str .= '0';
        }
        $str .= dechex($b);
        if ($i == 4 || $i == 6 || $i == 8 || $i == 10) {
            $str .= '-';
        }
    }
    return $str;
}

/**
 * Returns a string representation of this Guid object.
 *
 * @return string a string in the format
 *  "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx", where "x" is a
 *  hexadecimal digit.
 */
public function __toString()
{
    return $this-&gt;toString();
}

/**
 * Returns a 16 element byte array containing the underlying value of
 * this Guid object.
 *
 * @return array
 */
public function toByteArray()
{
    return $this-&gt;bytes;
}
</code></pre>

<p>}</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Rob Allen (rob) on 2012-11-20T20:52:33.000+0000</p> 
        <div class="body">
            <p>Bulk change of all issues last updated before 1st January 2010 as "Won't Fix".</p>

<p>Feel free to re-open and provide a patch if you want to fix this issue.</p>

        </div>
    </div>
    </div>

