<h2>ZF-9125: connection_timeout option not supported in Zend_Soap_Client</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2010-02-09T08:49:14.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-05-25T19:31:13.000+0000</dd>

    <dt>Status:</dt>
    <dd>Open</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Alexander Veremyev (alexander)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Soap_Client</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>The code to implement a connection timeout is present but commented out in the Zend_Soap_Client.php file;  support for connection timeout seems to work in the PHP Soap client - can this code be enabled?</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Oliver Milanovic (ollim) on 2010-03-26T00:26:09.000+0000</p> 
        <div class="body">
            <p>Same question here. How can a timeout be enabled for Zend_Soap_Client?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by David Abdemoulaie (hobodave) on 2010-08-10T11:09:41.000+0000</p> 
        <div class="body">
            <p>Bumping the priority on this. Is there any explanation as to why the connection timeout is explicitly ignored in Zend_Soap_Client? The soap library supports it. It's trivially simple to enable, but this gives me pause:</p>

<pre class="highlight"><code>
// Not used now
// case 'connection_timeout':
//     $this-&gt;_connection_timeout = $value;
//    break;
</code></pre>

<p>Why is this not used?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Kirill chEbba Chebunin (chebba) on 2010-11-08T23:35:47.000+0000</p> 
        <div class="body">
            <p>Bump.
Also, it will be cool to have full support of timeout, I mean this note for SoapClient options.
{quote}
The connection_timeout option defines a timeout in seconds for the connection to the SOAP service. <em>This option does not define a timeout for services with slow responses. To limit the time to wait for calls to finish the default_socket_timeout setting is available.</em>
{quote}
And some other timeout features.
I guess this information may be helpful <a href="http://www.darqbyte.com/2009/10/21/timing-out-php-soap-calls/">http://darqbyte.com/2009/10/…</a></p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Marc van de Geijn (mvdgeijn) on 2011-05-25T09:02:20.000+0000</p> 
        <div class="body">
            <p>This issue still exists in Zend Framework 1.11.6. Does anybody know the reason why this is not fixed?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Tim Hunt (timhunt) on 2011-09-28T13:49:18.000+0000</p> 
        <div class="body">
            <p>No idea, but just to report the result of my investigations:</p>

<ol><li><p>git history is useless. These lines of code seem not to have been changed since the initial check-in to git:
<a href="https://github.com/zendframework/zf2/commit/e443b8c12a05ad49b9a583e17f1a08b9db2be267#diff-6053">https://github.com/zendframework/zf2/…</a>
commit e443b8c12a05ad49b9a583e17f1a08b9db2be267 0 parents
Showing 6,457 changed files with 1,410,220 additions and 0 deletions.</p></li>
<li><p>Subversion is more helpful. This is the commit that changed this: <a href="http://framework.zend.com/code/revision.php?repname=Zend+Framework&amp;path=%2Ftrunk%2Flibrary%2FZend%2FSoap%2FClient.php&amp;rev=11560&amp;peg=23266">http://framework.zend.com/code/revision.php/…</a>. Argh, no, that is an irrelevant change ZF-4118.</p></li>
<li><p>And the previous change before that is <a href="http://framework.zend.com/code/revision.php?repname=Zend+Framework&amp;path=%2Ftrunk%2Flibrary%2FZend%2FSoap%2FClient.php&amp;rev=9984&amp;peg=11340">http://framework.zend.com/code/revision.php/…</a> / <a href="http://framework.zend.com/code/diff.php?repname=Zend+Framework&amp;path=%2Ftrunk%2Flibrary%2FZend%2FSoap%2FClient.php&amp;rev=9984&amp;peg=9984">http://framework.zend.com/code/diff.php/…</a> which is where the damage was really done. Commit message is "Zend_Soap_Client improvements" so that is nice and informative . No mention of any bug number.</p></li>
<li><p>This blog post explains the real issue: <a href="http://www.darqbyte.com/2009/10/21/timing-out-php-soap-calls/">http://darqbyte.com/2009/10/…</a>. Basically the SOAP connection_timeout does not actually do what you want. If you really want time-outs to work you have to do ini_set('default_socket_timeout', $timeout), but that is a global setting, so that is no good if you want time-outs on a per-client-class basis. The blog post also gives a possible solution, but it depends on curl.</p></li>
</ol><p>I hope that information is of some help.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Michael Johansen (michael.johansen) on 2012-03-20T09:49:38.000+0000</p> 
        <div class="body">
            <p>After doing some googling on this issue including the very helpfull post at <a href="http://www.darqbyte.com/2009/10/21/timing-out-php-soap-calls/">http://darqbyte.com/2009/10/…</a>
I have written a small but working version of this work around.</p>

<pre class="highlight"><code>
class Tc_Soap_Client extends Zend_Soap_Client {

    function setConnectionTimeout($timeout) {
        $this-&gt;_connection_timeout = $timeout;
    }

    function getOptions() {
        $options = parent::getOptions();
        if (is_integer($this-&gt;_connection_timeout)) {
            $options["connection_timeout"] = $this-&gt;_connection_timeout;
        }
        return $options;
    }

    public function _doRequest(Zend_Soap_Client_Common $client, $request, $location, $action, $version, $one_way = null) {
        if (!is_integer($this-&gt;_connection_timeout)) {
            return parent::_doRequest($client, $request, $location, $action, $version, $one_way);
        } else {
            $curl = curl_init($location);
            curl_setopt($curl, CURLOPT_VERBOSE, FALSE);
            curl_setopt($curl, CURLOPT_RETURNTRANSFER, TRUE);
            curl_setopt($curl, CURLOPT_POST, TRUE);
            curl_setopt($curl, CURLOPT_POSTFIELDS, $request);
            curl_setopt($curl, CURLOPT_HEADER, FALSE);
            curl_setopt($curl, CURLOPT_HTTPHEADER, array("Content-Type: text/xml"));
            curl_setopt($curl, CURLOPT_TIMEOUT, $this-&gt;_connection_timeout);
            $password = $this-&gt;getHttpPassword();
            if ($password) {
                curl_setopt($curl, CURLOPT_USERPWD, "{$this-&gt;getHttpLogin()}:$password");
                curl_setopt($curl, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);
            }
            $response = curl_exec($curl);
            if (curl_errno($curl)) {
                throw new Exception(curl_error($curl));
            }
            curl_close($curl);
            if (!$one_way) {
                return ($response);
            }
        }
    }
}
</code></pre>

<p>This could further be refined to just take the https calls and redirect them to curl as socket timeout in php seem to be a problem just for https. Hope this helps...</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Adar Porat (hpman28) on 2012-05-25T19:31:13.000+0000</p> 
        <div class="body">
            <p>Bump. I had to extend Zend_Soap_Client to a custom class, as such:</p>

<pre class="highlight"><code>
&lt;?php
class Application_Soap_Client extends Zend_Soap_Client {
    
    /**
     * Set Options
     *
     * Allows setting options as an associative array of option =&gt; value pairs.
     *
     * @param  array|Zend_Config $options
     * @return Zend_Soap_Client
     * @throws Zend_SoapClient_Exception
     */
    public function setOptions($options)
    {
        if($options instanceof Zend_Config) {
            $options = $options-&gt;toArray();
        }
    
        foreach ($options as $key =&gt; $value) {
            switch ($key) {
                case 'classmap':
                case 'classMap':
                    $this-&gt;setClassmap($value);
                    break;
                case 'encoding':
                    $this-&gt;setEncoding($value);
                    break;
                case 'soapVersion':
                case 'soap_version':
                    $this-&gt;setSoapVersion($value);
                    break;
                case 'wsdl':
                    $this-&gt;setWsdl($value);
                    break;
                case 'uri':
                    $this-&gt;setUri($value);
                    break;
                case 'location':
                    $this-&gt;setLocation($value);
                    break;
                case 'style':
                    $this-&gt;setStyle($value);
                    break;
                case 'use':
                    $this-&gt;setEncodingMethod($value);
                    break;
                case 'login':
                    $this-&gt;setHttpLogin($value);
                    break;
                case 'password':
                    $this-&gt;setHttpPassword($value);
                    break;
                case 'proxy_host':
                    $this-&gt;setProxyHost($value);
                    break;
                case 'proxy_port':
                    $this-&gt;setProxyPort($value);
                    break;
                case 'proxy_login':
                    $this-&gt;setProxyLogin($value);
                    break;
                case 'proxy_password':
                    $this-&gt;setProxyPassword($value);
                    break;
                case 'local_cert':
                    $this-&gt;setHttpsCertificate($value);
                    break;
                case 'passphrase':
                    $this-&gt;setHttpsCertPassphrase($value);
                    break;
                case 'compression':
                    $this-&gt;setCompressionOptions($value);
                    break;
                case 'stream_context':
                    $this-&gt;setStreamContext($value);
                    break;
                case 'features':
                    $this-&gt;setSoapFeatures($value);
                    break;
                case 'cache_wsdl':
                    $this-&gt;setWsdlCache($value);
                    break;
                case 'useragent':
                case 'userAgent':
                case 'user_agent':
                    $this-&gt;setUserAgent($value);
                    break;
    
                case 'connection_timeout':
                    $this-&gt;_connection_timeout = $value;
                break;
    
                    default:
                        require_once 'Zend/Soap/Client/Exception.php';
                        throw new Zend_Soap_Client_Exception('Unknown SOAP client option');
                        break;
            }
        }
    
        return $this;
    }
    
    /**
     * Return array of options suitable for using with SoapClient constructor
     *
     * @return array
     */
    public function getOptions()
    {
        $options = array();
    
        $options['classmap']       = $this-&gt;getClassmap();
        $options['encoding']       = $this-&gt;getEncoding();
        $options['soap_version']   = $this-&gt;getSoapVersion();
        $options['wsdl']           = $this-&gt;getWsdl();
        $options['uri']            = $this-&gt;getUri();
        $options['location']       = $this-&gt;getLocation();
        $options['style']          = $this-&gt;getStyle();
        $options['use']            = $this-&gt;getEncodingMethod();
        $options['login']          = $this-&gt;getHttpLogin();
        $options['password']       = $this-&gt;getHttpPassword();
        $options['proxy_host']     = $this-&gt;getProxyHost();
        $options['proxy_port']     = $this-&gt;getProxyPort();
        $options['proxy_login']    = $this-&gt;getProxyLogin();
        $options['proxy_password'] = $this-&gt;getProxyPassword();
        $options['local_cert']     = $this-&gt;getHttpsCertificate();
        $options['passphrase']     = $this-&gt;getHttpsCertPassphrase();
        $options['compression']    = $this-&gt;getCompressionOptions();
        $options['connection_timeout'] = $this-&gt;_connection_timeout;
        $options['stream_context'] = $this-&gt;getStreamContext();
        $options['cache_wsdl']     = $this-&gt;getWsdlCache();
        $options['features']       = $this-&gt;getSoapFeatures();
        $options['user_agent']     = $this-&gt;getUserAgent();
        
        foreach ($options as $key =&gt; $value) {
            /*
             * ugly hack as I don't know if checking for '=== null'
            * breaks some other option
            */
            if (in_array($key, array('user_agent', 'cache_wsdl', 'compression'))) {
                if ($value === null) {
                    unset($options[$key]);
                }
            } else {
                if ($value == null) {
                    unset($options[$key]);
                }
            }
        }
    
        return $options;
    }
    
    
    
    /**
     * Initialize SOAP Client object
     *
     * @throws Zend_Soap_Client_Exception
     */
    protected function _initSoapClientObject()
    {
        $wsdl = $this-&gt;getWsdl();
        $options = array_merge($this-&gt;getOptions(), array('trace' =&gt; false, 'exceptions' =&gt; 1));
    
        if ($wsdl == null) {
            if (!isset($options['location'])) {
                require_once 'Zend/Soap/Client/Exception.php';
                throw new Zend_Soap_Client_Exception('\'location\' parameter is required in non-WSDL mode.');
            }
            if (!isset($options['uri'])) {
                require_once 'Zend/Soap/Client/Exception.php';
                throw new Zend_Soap_Client_Exception('\'uri\' parameter is required in non-WSDL mode.');
            }
        } else {
            if (isset($options['use'])) {
                require_once 'Zend/Soap/Client/Exception.php';
                throw new Zend_Soap_Client_Exception('\'use\' parameter only works in non-WSDL mode.');
            }
            if (isset($options['style'])) {
                require_once 'Zend/Soap/Client/Exception.php';
                throw new Zend_Soap_Client_Exception('\'style\' parameter only works in non-WSDL mode.');
            }
        }
        unset($options['wsdl']);
            
        try {
            $this-&gt;_soapClient = new Zend_Soap_Client_Common(array($this, '_doRequest'), $wsdl, $options);
        } catch (SoapFault $e) {  
            throw new Zend_Exception($e-&gt;getMessage());
        }
    }
}

</code></pre>

        </div>
    </div>
    </div>

