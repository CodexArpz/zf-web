<h2>ZF-6331: Zend_Application classes violates against coding standards</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Coding Standards Violation</dd>

    <dt>Created:</dt>
    <dd>2009-04-16T23:12:25.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-05-06T01:35:34.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.8.0 (30/Apr/09)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Jan Pieper (jpieper)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Matthew Weier O'Phinney (matthew)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Application</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>||current||must be||
|Zend_Application_Bootstrap_BootstrapAbstract|Zend_Application_Bootstrap_Bootstrap_Abstract|
|Zend_Application_Bootstrap_Bootstrapper|something like Zend_Application_Bootstrap_Interface|
|Zend_Application_Bootstrap_ResourceBootstrapper|something like Zend_Application_Bootstrap_ResourceBootstrapper_Interface|
|Zend_Application_Module_Bootstrap|something like Zend_Application_Module_Bootstrap_Abstract|
|Zend_Application_Resource_ResourceAbstract|Zend_Application_Resource_Abstract|</p>

<p>And why are there such stupid (!?) class names like following?</p>

<p>||current||why not ...?||
|Zend_Application_Bootstrap_Bootstrap|Zend_Application_Bootstrap|
|Zend_Application_Bootstrap_BootstrapAbstract|Zend_Application_Bootstrap_Abstract|</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2009-04-17T04:48:40.000+0000</p> 
        <div class="body">
            <p>We are revising the coding standards, and the new standards will be published in the manual for 1.8. There are several concerns:</p>

<ul><li>When we move to using namespaces:
** having a final segment of just "Interface" or "Abstract" will not work, as they are reserved keywords
** the interface and the framework's concrete implementations should be in the same namespace</li>
<li>A desire to stay away from Hungarian Notation</li>
<li>A desire to comply with forthcoming PEAR2 standards:
** <a href="http://wiki.php.net/pear/rfc/pear2_class_naming">http://wiki.php.net/pear/rfc/pear2_class_naming</a><br />
** <a href="http://wiki.php.net/pear/rfc/pear2_naming_standards">http://wiki.php.net/pear/rfc/â€¦</a></li>
</ul><p>A summary of the new rules is as follows:
* Interfaces <em>must</em> be named descriptively, and fall under the same namespace as implementations
* Abstract classes <em>should</em> be named descriptively, but <em>may</em> include the suffix "Abstract" as part of the classname
* Abstract classes <em>must</em> fall under the same namespace as implementations</p>

<p>The reason we want the interfaces/abstracts to fall under the same namespace as implementations is to make it easy to package individual components, as well as to import and alias a single namespace .</p>

<p>To give an example, consider the following PHP 5.3 namespace-aware implementations:</p>

<pre class="highlight"><code>
namespace zend\application\bootstrap;

interface Bootstrapper
{
}

abstract class BootstrapAbstract implements Bootstrapper
{
}

class Bootstrap extends BootstrapAbstract
{
}
</code></pre>

<p>In a userland implementation, you might have the following:</p>

<pre class="highlight"><code>
namespace website;
use zend\application\bootstrap as App;

class Bootstrap extends App\Bootstrap
{
}
</code></pre>

<p>These changes to the standards have been discussed on the zf-contributors mailing list.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Adam Weinstock (adamweinstock) on 2009-05-06T01:35:31.000+0000</p> 
        <div class="body">
            <p>Why then is Zend_Application not Zend_Application_Application?</p>

        </div>
    </div>
    </div>

