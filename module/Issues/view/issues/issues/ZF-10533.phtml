<h2>ZF-10533: Validator for float is incorrect</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2010-10-08T09:52:32.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2011-08-06T05:48:57.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>Next Major Release ()</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Lyudmyla Udovichenko (happylu)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Thomas Weidner (thomas)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Validate</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
        <li><a href="/issues/secure/attachment/13547/ZF-10533.reproduce.patch">ZF-10533.reproduce.patch</a></li>
        </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>$validator = new Zend_Validate_Float(array('locale' =&gt; 'en_US'));
Zend_Debug::dump($validator-&gt;isValid('0,66')); -&gt;&gt; print false - that's correct
Zend_Debug::dump($validator-&gt;isValid('0.66')); -&gt;&gt; print true - that's correct as well
but
Zend_Debug::dump($validator-&gt;isValid('0,666')); -&gt;&gt; print true - that's INCORRECT, should be false</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Adam Lundrigan (adamlundrigan) on 2010-12-18T07:35:07.000+0000</p> 
        <div class="body">
            <p>I've attached a patch for this component's test suite which illustrates the issue.  Here is the resulting testdox when I run those tests:</p>

<pre class="literal">
 [x] Php locale en string type handles comma separator followed by two digits correctly
 [ ] Php locale en string type handles comma separator followed by three digits correctly
 [x] Php locale en string type handles comma separator followed by four digits correctly
 [x] Php locale en string type handles non zero number followed by comma separator followed by two digits correctly
 [ ] Php locale en string type handles non zero number followed by comma separator followed by three digits correctly
 [x] Php locale en string type handles non zero number followed by comma separator followed by four digits correctly
</pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Adam Lundrigan (adamlundrigan) on 2010-12-18T08:28:55.000+0000</p> 
        <div class="body">
            <p>I'm not entirely certain this is a bug.  The string '0,666' is a valid number (666), it's just that common convention would omit the '0,' as it's meaningless.  I'm not sure where that fits into the maintainer's vision of how Zend_Validate_Float should work.</p>

<p>Zend_Validate_Float::isValid() uses Zend_Locale_Data::isFloat(), which itself is just an alias of Zend_Locale_Data::isNumber(), which checks the number against the formats 'decimalnumber' and 'scientificnumber' in Zend/Locale/Data/en.xml:</p>

<pre class="literal">
#,##0.####E0</pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Adam Lundrigan (adamlundrigan) on 2010-12-19T12:09:40.000+0000</p> 
        <div class="body">
            <p>Zend Framework defers this type of validation to Unicode's CLDR (<a href="http://cldr.unicode.org">http://cldr.unicode.org</a>).  If you feel that the issue you have outlined here is indeed a bug which needs fixing, I would submit a bug report in CLDR's trac system at <a href="http://unicode.org/cldr/trac">http://unicode.org/cldr/trac</a></p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2011-08-06T05:47:39.000+0000</p> 
        <div class="body">
            <p>According to the numeric rules in english a "," is treated as separator for thousand and above. Each 3 digits "can" be combined in a block separated by a ",".</p>

<p>This means that values like "0,666" are logically converted into "666" as 0 for thousand is allowed and correct. It is allowed to have integer values within the float validator because integers are just a special variant of float values (en =&gt; 0,666 = 666 = 666.0)</p>

<p>Therefor this is not an issue but expected behaviour.
As Adam said: When you feel that this is an failure in it's handling feel free to open a bug at unicode.</p>

        </div>
    </div>
    </div>

