<h2>ZF-5533: Zend_Controller_Router_Route_Module fails to work when request url contains capital letters</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2009-01-12T13:51:34.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-03-09T19:47:26.000+0000</dd>

    <dt>Status:</dt>
    <dd>Open</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Matthew Weier O'Phinney (matthew)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Controller</li>
            <li>state:need-feedback</li>
            <li>zf-crteam-padraic</li>
            <li>zf-crteam-priority</li>
            <li>zf-crteam-review</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>h1. Replicating the Error</p>

<p>Set up a Zend Framework application that contains 2 modules: default and admin
Controller directories are setup via the front controller's addModuleDirectory() function
No custom routing is used, instead rely on ZF's module routing</p>

<p>h2. What works:</p>

<p><a href="http://hostname/index/index">http://hostname/index/index</a> correctly routes to the default module's IndexController and IndexAction
<a href="http://hostname/INDEX/index">http://hostname/INDEX/index</a> correctly routes to the default module's IndexController and IndexAction
<a href="http://hostname/bob/index/">http://hostname/bob/index/</a> correctly generates an error of type EXCEPTION_NO_CONTROLLER in the error handler plugin
<a href="http://hostname/admin/index/index">http://hostname/admin/index/index</a> correctly routes to the admin module's IndexController and IndexAction</p>

<p>h2.  What doesn't work:</p>

<p><a href="http://hostname/ADMIN/index/index">http://hostname/ADMIN/index/index</a> incorrectly generates an error of type EXCEPTION_NO_CONTROLLER in the error handler</p>

<p><em>Further, if notices are set to display, then Zend/Controller/Dispatcher/Standard.php generates a notice on line 373:</em></p>

<pre class="highlight"><code>

h1. What's wrong

Zend/Controller/Dispatcher/Standard.php stores the module names in all lower case in the _controllerDirs array, but multiple functions access the _controllerDirs array with the unformatted module string (which may have capital letters in it).  The formatModuleName function is not used in these function, but the formatModuleName also formats modules to have a uppercase first letter.

_This is what will happen:_

The dispatcher's isValidModule function correctly implements strtolower() to check if it is a valid module, but Zend/Controller/Dispatcher/Standard.php in getControllerClass() calls isValidModule() and then tries to access the controllerDirs array with the unformatted module name on line 373, generating the unexpected notice of a non-valid array index.

Since "ADMIN" is not a valid index of the controllerDirs directory, _curDirectory remains uninitialized, the isDispatchable function returns false and the "Invalid controller specified" exception is thrown.

Further, If the getControllerClass() function is fixed, the viewRenderer will fail when calling getControllerDirectory.

h1. Minimum required changes to fix this bug:

getControllerDirectory() of Zend_Controller_Dispatcher_Standard (called by the viewRenderer)
</code></pre>

<p>127    $module = (string) $module;
to
127    $module = strtolower($module);</p>

<pre class="highlight"><code>

and

getControllerClass() of Zend_Controller_Dispatcher_Standard
</code></pre>

<p>373  $this-&gt;_curDirectory = $controllerDirs[$module];
to
373  $this-&gt;_curDirectory = $controllerDirs[strtolower($module)];```</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Adam Lundrigan (adamlundrigan) on 2011-11-15T02:46:53.000+0000</p> 
        <div class="body">
            <p>What are the possible backwards-compatibility side-effects to implementing this change?  Can it be safely done at this stage without breaking existing implementations?</p>

        </div>
    </div>
    </div>

