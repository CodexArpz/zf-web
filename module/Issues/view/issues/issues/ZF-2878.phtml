<h2>ZF-2878: bcmath extension used by Zend_Locale doesn't support scientific notation for floats representation.</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2008-03-13T17:17:23.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-01-03T05:31:36.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.7.3 (19/Jan/09)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Thomas Weidner (thomas)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Locale</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-5374">ZF-5374</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>bcmath extension uses strings as an input. 
Some floats are automatically written using scientific notation while they are converted to strings (like '1.234E-6').</p>

<p>bcmath extension skips exponent part of the number (e.g. '1.234E-6' =&gt; '1.234'). That produces wrong results of mathimatical operations with some numbers.</p>

<p>Hopefully, bcmath functions are not used directly within Zend Framework (except some big integers arithmetic within Zend_OpenId which is not affected by this problem). So we can proxy bcmath calls and perform correct numbers transformation.</p>

<p>That also may help to solve problems with some locales having ',' as decimal separator.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Maxence Delannoy (mdelanno) on 2008-12-30T00:17:07.000+0000</p> 
        <div class="body">
            <p>We can solve this by adding this code to Zend_Locale_Math::normalize:</p>

<pre class="highlight"><code>
public static function normalize($value)
{
  [..]
  // Handle exponential notation
  $parts = preg_split('/e/i', $value);
  if (count($parts) &gt; 1) {
    $value = bcmul($parts[0], bcpow(10, $parts[1]));
  }
  return $value;
}
</code></pre>

<p>Test :</p>

<pre class="highlight"><code>
$this-&gt;assertEquals('1000', Zend_Locale_Math::normalize('1e3'));
$this-&gt;assertEquals('1000', Zend_Locale_Math::normalize('1E3'));
$this-&gt;assertEquals('1234', Zend_Locale_Math::normalize('1.234E3'));
$this-&gt;assertEquals('0.001', Zend_Locale_Math::normalize('1e-3'));

$this-&gt;assertEquals('12', Zend_Locale_Math::round('1.23e1'));
$this-&gt;assertEquals('12.3', Zend_Locale_Math::round('1.23e1', 1));
</code></pre>

<p>Note : bcmath is required.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Maxence Delannoy (mdelanno) on 2008-12-30T00:19:42.000+0000</p> 
        <div class="body">
            <p>{quote}
Hopefully, bcmath functions are not used directly within Zend Framework
{quote}</p>

<p>bcmath functions (and scientific notation) are used in Zend_Measure.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2008-12-30T10:47:37.000+0000</p> 
        <div class="body">
            <p>There are several places where bcmath are used.
But your code can not be used, as it does not work when bcmath is not available.</p>

<p>You can not use bcmath functions on a class which is used as workaround when no bcmath is installed.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2009-01-03T05:31:34.000+0000</p> 
        <div class="body">
            <p>Feature added with r13500</p>

        </div>
    </div>
    </div>

