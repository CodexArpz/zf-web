<h2>ZF-407: Provide a degree of automated coding standards compliance</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Coding Standards Violation</dd>

    <dt>Created:</dt>
    <dd>2006-09-29T11:40:38.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2008-09-02T10:39:34.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.6.0 (02/Sep/08)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Thomas Weidner (thomas)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>    </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-3065">ZF-3065</a></li>
            <li><a href="/issues/browse/ZF-3027">ZF-3027</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>It would be nice to have some level of automated coding standards compliance assistance, and below are a couple of options:</p>

<p>Most likely this is too old and doesn't work with PHP 5.1.4: <a href="">www.waterproof.fr/products/phpCodeBeautifier/</a>" rel="nofollow"&gt;phpCodeBeautifier
(Thanks, <a href="http://matrix.squiz.net/developer/tools/php_cs">~gavin])</a></p>

<p>To evaluate: [PHP_CodeSniffer
(Thanks, [~nicklo])</p>

<p><em>Help Wanted</em> - We would like help with evaluating such a system for Zend Framework code, as we would possibly integrate a good solution as a pre-commit hook to the Subversion repository.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Matthew Ratzloff (mratzloff) on 2006-12-06T10:37:52.000+0000</p> 
        <div class="body">
            <p>Not evaluated yet for quality yet, but:</p>

<p><a href="http://pear.php.net/package/PHP_Beautifier">http://pear.php.net/package/PHP_Beautifier</a></p>

<p>Most recent release was in June, built in PHP 5.  Works on the command line, and you write custom rules.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Ratzloff (mratzloff) on 2006-12-06T10:42:36.000+0000</p> 
        <div class="body">
            <p>That should read, "you can write custom rules if you like."</p>

<p>Here's a command line usage guide: 
<a href="http://php.apsique.com/PHP_Beautifier/PHP_Beautifier/tutorial_PHP_Beautifier.howtouse.commandline.pkg.html">http://php.apsique.com/PHP_Beautifier/â€¦</a></p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Gavin (gavin) on 2006-12-06T12:15:58.000+0000</p> 
        <div class="body">
            <p>These tools require a non-trivial effort to configure and setup "profiles".
If someone takes the initiative of codifying the ZF coding standards into configurations for these tools, then the chance for adoption would increase.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2006-12-06T13:19:19.000+0000</p> 
        <div class="body">
            <p>I've had bad luck with automated code beautifiers.  The risk is that there's some obscure corner case that the code beautifier doesn't handle well, and it inadvertently <em>changes</em> the functionality of the code and introduces bugs.</p>

<p>This actually happened on a Java project I was on in 2005.  We upgraded from Java 1.4 to Java 5 and the code beautifier tools didn't know about the new syntax in that release, so they totally ruined the code in the process of trying to beautify it.</p>

<p>It would be one thing to have a tool check and report mismatches between the code and the coding standard, but I wouldn't want it committing changes without a human reviewing them first.  Code beautifiers should be run manually and then the results checked visually and with unit tests.</p>

<p>We also have some points in our draft coding standards document that are not simply syntactic issues.  So enforcement by a code beautifier is not a complete solution.  Still, some automation is better than none.</p>

<p>Matthew, if you want to write a profile that does best-effort checks with respect to the Zend Framework coding standard, that would be much appreciated.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Gavin (gavin) on 2006-12-06T13:26:32.000+0000</p> 
        <div class="body">
            <p>The pre-commit SVN hook we previously discussed for code analysis/beautifier tools might simply result in an email under certain conditions instead of doing something drastic.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-10-17T15:28:41.000+0000</p> 
        <div class="body">
            <p>Changing to 'Unassigned'</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-03-21T17:05:26.000+0000</p> 
        <div class="body">
            <p>This issue should have been fixed for the 1.5 release.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-04-18T13:12:03.000+0000</p> 
        <div class="body">
            <p>This doesn't appear to have been fixed in 1.5.0. Please update if this is not correct.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-06-08T06:12:27.000+0000</p> 
        <div class="body">
            <p>Thomas, I believe you are currently working on this. Please update the issue with any changes to the original idea.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2008-06-08T09:02:06.000+0000</p> 
        <div class="body">
            <p>We have decide to use PHP_CodeSniffer.
Actually a testbed can already be found within incubator under tools.</p>

<p>This issue itself is seems to be duplicated by
ZF-3027 and ZF-3065.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-06-15T14:00:00.000+0000</p> 
        <div class="body">
            <p>Changing to comply with new IT coventions for components.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2008-06-16T07:52:34.000+0000</p> 
        <div class="body">
            <p>Closing due to duplication of existing issue ZF-3065</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-09-02T10:39:34.000+0000</p> 
        <div class="body">
            <p>Updating for the 1.6.0 release.</p>

        </div>
    </div>
    </div>

