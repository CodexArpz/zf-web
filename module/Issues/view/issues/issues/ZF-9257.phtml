<h2>ZF-9257: Method to test if controller (!) and action (!) is dispatchable</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2010-02-24T10:57:29.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2010-04-05T14:14:47.000+0000</dd>

    <dt>Status:</dt>
    <dd>Closed</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Aleksey V. Zapparov (ixti)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Matthew Weier O'Phinney (matthew)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Controller</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Some­times you need to check if request is dis­patch­able. The most com­mon place where you can meet this need is in con­trol­ler plug-in. I have met that I need to test if request is dis­patch­able when I have imple­men­ted my App_Controller_Plugin_Acl for ACL check­ing based on ZF pro­posal. So ACL test is run before request will be dis­patched. Of course I don't want to run ACL checks for requests that are not dis­patch­able. But that plug-in relayed on Zend_Controller_Disptcher_Interface::isDispatchable() method which checks only if controller's class exists.</p>

<p>So I propose to add another action method to check whenever method exists or not, into the dispatcher or at least into the Zend_Controller_Action_Plugin_Abstract as I did in my application extended abstract class:</p>

<pre class="highlight"><code>
&lt; ?php

/**
 * Zend_Controller_Plugin_Abstract
 */
require_once 'Zend/Controller/Plugin/Abstract.php';

class App_Controller_Plugin_Abstract extends Zend_Controller_Plugin_Abstract
{
    /**
     * Return whether a given request (module-controller-action) exists
     *
     * @param Zend_Controller_Request_Abstract $request Request to check
     * @return boolean Whether the action exists
     */
    protected function _actionExists(Zend_Controller_Request_Abstract $request)
    {
        $dispatcher = Zend_Controller_Front::getInstance()-&gt;getDispatcher();

        // Check controller
        if (!$dispatcher-&gt;isDispatchable($request)) {
            return false;
        }

        $class  = $dispatcher-&gt;loadClass($dispatcher-&gt;getControllerClass($request));
        $method = $dispatcher-&gt;formatActionName($request-&gt;getActionName());

        return is_callable(array($class, $method));
    }
}
</code></pre>

<p>Of course it's just an example, but it shows my idea. According to Nabble's archives I'm not the only one who need this ;))</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2010-02-24T11:10:47.000+0000</p> 
        <div class="body">
            <p>While I understand the point behind this, the actual location where an action is determined dispatchable is within a controller. The dispatcher actually calls the controller's dispatch() method; while by default this will use the Action() convention, does not have to. In fact, you can even trap action calls via __call() to do custom dispatching (something I've done a number of times).</p>

<p>Taking away this flexibility is not something we plan to do; if anything, we'll likely make it more flexible in 2.0 (action controllers will act basically like plugins, and simply define __invoke()).</p>

<p>The above plugin will work for most use cases, but since it doesn't work for <em>all</em> use cases, we likely will not adopt it.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Aleksey V. Zapparov (ixti) on 2010-03-20T04:07:21.000+0000</p> 
        <div class="body">
            <p>Well, I was not proposed to add this like an additional plugin, I just proposed to extend existing Abstract class, to have this method. About __call() methods, resulting decision can be extended, to handle such situation, so return will become like this:</p>

<pre class="highlight"><code>
return ( is_callable(array($class, $method))
         || is_callable(array($class, '__call')) );
</code></pre>

<p>The main reason why I needed this method was to decide do I need to do real action of some plug-in (Acl in my case) or not, as I don't want to run any Acl logic on non-existing actions.</p>

<p>But I respect your opinion, and don't insist on my proposal adoption. Anyway, as we live in a free world, I can use my proposal for myself :))</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Glen Ainscow (darkangel) on 2010-04-05T14:14:46.000+0000</p> 
        <div class="body">
            <p>I need this as well. :(</p>

        </div>
    </div>
    </div>

