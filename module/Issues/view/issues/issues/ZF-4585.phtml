<h2>ZF-4585: Allow Zend_Config to cache its data</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2008-10-13T06:41:45.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-03-21T14:08:17.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Rob Allen (rob)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Config</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
        <li><a href="/issues/secure/attachment/11676/Zend_Config.patch">Zend_Config.patch</a></li>
            <li><a href="/issues/secure/attachment/11677/Zend_Config_Ini.patch">Zend_Config_Ini.patch</a></li>
        </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>As performance is a critical point, I think Zend_Config should be given some kind of setCache(Zend_Cache_Core $cache) method to cache its data (or to cache itself, why not ?).
This would prevent opening and parsing the backend (xml or ini) file each time we create the Zend_Config instance.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Fabien MARTY (fab) on 2008-10-13T10:19:36.000+0000</p> 
        <div class="body">
            <p>why not but it's probably a Zend_Config work, isn't it ?</p>

<p>so I changed the component to Zend_Config</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by julien PAULI (doctorrock83) on 2008-10-13T10:23:26.000+0000</p> 
        <div class="body">
            <p>Oups, sorry about that, I thought I chose Zend_Config ....</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Rob Allen (rob) on 2008-10-13T12:02:10.000+0000</p> 
        <div class="body">
            <p>Generally the logic around Zend_Config object is not just as simple as creating one. There's also merging etc. Also, you may not want to cache the config loading at all times.</p>

<p>I would have thought that it's just as easy to cache outside the config object?</p>

<p>Maybe something like:</p>

<pre class="highlight"><code>
$cacheName = 'config';
$configArray = $cache-&gt;load($cacheName);
if ($configArray === false || $configSection == 'dev') {
    $config = new Zend_Config_Ini(...);
    // do merging or whatver else you need to do

    $query_cache-&gt;save(config-&gt;toArray(), $cacheName);
} else {
    $config = new Zend_Config($configArray());
}
</code></pre>

<p>Having said that, if you have a concept of what setCache() would do and how it would be used I'm interested in looking at what we can do.</p>

<p>Rob...</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by julien PAULI (doctorrock83) on 2008-10-13T13:47:20.000+0000</p> 
        <div class="body">
            <p>Yes Rob you are right.</p>

<p>I have a solution, but it still stats the FS even if it prevents from loading the data back from the file.
So it's no good as we cant prevent the stat() call on the FS (probably often the highest 'cost'), can we ?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by julien PAULI (doctorrock83) on 2008-12-11T09:36:54.000+0000</p> 
        <div class="body">
            <p>Hey Rob, I found a way to make it :-)</p>

<p>Anyway, the cache should be memory-backend based to prevent any stat call.
It's a mess to cache data from a file into a file-based cache....</p>

<p>What do you suggest ?
If I let the user specify its own Zend_Cache_Core instance, it might use a file-based backend : no good solution</p>

<p>I could force him to set a memory-based backend instance instead.</p>

<p>Patches attached</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by julien PAULI (doctorrock83) on 2008-12-11T09:37:37.000+0000</p> 
        <div class="body">
            <p>Patches.</p>

<p>Not commented/tested yet, just as a reflection base.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Rob Allen (rob) on 2008-12-11T11:31:47.000+0000</p> 
        <div class="body">
            <p>To be honest, I'm not yet convinced.</p>

<p>My current issues:
1. It unnecessarily couples Zend_Config to Zend_Cache which makes it harder to extract Zend_Config for using in a non ZF app.</p>

<ol><li><p>It's common to manipulate the config object before you would want to cache it. It's not clear how caching within the object would handle this.</p></li>
<li><p>It's not clear how it would work in practice.  Most components use a setCache() function, but Zend_Config loads directly in the constructor. Ideally, if we really wanted integrated caching, we'd refactor Zend_Config so that we could call setCache() before calling some sort of load() method.</p></li>
</ol><p>With your patches, we have to use a static function to set the cache which seems counter-intuitive to me and I wonder how you would handle having different caching strategies for different configs.</p>

<p>I still think that it's easier to do it outside of the Zend_Config as cited above.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Rob Allen (rob) on 2008-12-11T12:26:50.000+0000</p> 
        <div class="body">
            <p>Postponing until we start thinking about ZF2.0, as to add caching properly to Zend_Config requires API changes that will probably break B/C.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Rob Allen (rob) on 2009-03-21T14:08:16.000+0000</p> 
        <div class="body">
            <p>Closing this issue as it's now noted on the Zend_Config 2.0 wiki page (<a href="http://framework.zend.com/wiki/display/ZFDEV/Zend_Config+2.0">http://framework.zend.com/wiki/display/â€¦</a>) .</p>

<p>Will reopen/create a new issue if we actually decide to go ahead with this one.</p>

        </div>
    </div>
    </div>

