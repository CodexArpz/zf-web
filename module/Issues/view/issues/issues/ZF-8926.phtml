<h2>ZF-8926: Zend_Validate_Digits inconsistent behaviour with floats</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2010-01-25T06:46:19.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2010-01-27T12:27:31.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.10.0 (27/Jan/10)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Chris Buckley (cbuckley)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Thomas Weidner (thomas)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Validate</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>If this is not a bug, then it may be worth mentioning as a special case in the documentation, because it caught me out.</p>

<pre class="highlight"><code>require_once 'Zend/Validate/Digits.php';
$validator = new Zend_Validate_Digits();

var_dump($validator-&gt;isValid('1234567890123')); // bool(true)
var_dump($validator-&gt;isValid(1234567890123)); // bool(false)
var_dump($validator-&gt;getMessages());
</code></pre>

<p>A message is generated containing "'1.23456789012E+12' contains not only digit characters". Zend_Validate_Digits converts the value to a string and filters that.</p>

<p>If the above is the desired behaviour, then as mentioned before I think it's worth mentioning in the documentation that large floats are converted to scientific notation in the class.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2010-01-25T11:04:21.000+0000</p> 
        <div class="body">
            <p>Note that this is a language behaviour.
I don't think that we must mention within the manual how to code with PHP.</p>

<p>Simply try the following:</p>

<pre class="highlight"><code>
$var = 1234567890123456789012345;
var_dump($var);
</code></pre>

<p>As you see PHP itself converts numbers to float when they exceed a set value. When a number will be converted automatically is set by your PHP.ini configuration.</p>

<p>The reason why we can't simply say that floats are always digits is, that when someone really expects to get ONLY digits and we say OK for "1.2345E-11" then there would be a problem as there is a E and a - char which are no digits.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2010-01-25T11:04:45.000+0000</p> 
        <div class="body">
            <p>Closing as non-issue</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Chris Buckley (cbuckley) on 2010-01-26T02:12:04.000+0000</p> 
        <div class="body">
            <p>Hi Thomas, I know the behaviour of PHP and converting to floats, but this is a comment about the string representation of floats. I wouldn't expect that string '1.23456789012E+24' be validated by the class, as this would be wrong. But is it not at least worth mentioning that validating a float greater than 10^12 will behave differently than a float which is less than 10^12 but greater than PHP_INT_MAX? It might not be inherently obvious why 2147483648 validates but 1234567890123456789012345 doesn't.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2010-01-27T12:27:31.000+0000</p> 
        <div class="body">
            <p>I don't think so... because this validator checks only DIGITS...
even a integer with a negative sign is not valid as the minus is no digit.</p>

<p>People working with such big numbers know what this works only with BCMath which means to have only strings.</p>

<p>Note that "Digit" does not mean "Number"!</p>

        </div>
    </div>
    </div>

