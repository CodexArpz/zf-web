<h2>ZF-2128: Zend_Input_Filter::getEscaped() does not return fields that are not part of the validation rules. </h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2007-11-01T03:56:43.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-08-28T13:26:04.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.9.3 (22/Sep/09)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Laurent Melmoux (laurent melmoux)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Thomas Weidner (thomas)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Filter_Input</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Zend_Input_Filter::getEscaped() does not return fields that are not part of the validation rules even if they are declared in the filters array (see exemple below).</p>

<p>I was expecting to get back both the validated and filtered fields.</p>

<p>To have it to work a validator has to exist for all form elements so we need to add '*' =&gt; array() to the validators.</p>

<p>Is it the normal behaviour and way to do it? If so this should be add to the documentation.</p>

<pre class="highlight"><code>
require_once('Zend/Filter/Input.php'); 

$data = array('test1'=&gt;'test1', 'test2'=&gt;'', 'test3'=&gt;'test3'); 

$validators = array( 
   'test1' =&gt; array('presence' =&gt; 'required'), 
   'test3' =&gt; array('Alpha', 'presence' =&gt; 'required') 
); 

$filters = array( 
   '*'     =&gt; 'StripTags' 
); 

$input = new Zend_Filter_Input($filters, $validators, $data); 
  if ($input-&gt;isValid()) { 
       print_r($input-&gt;getEscaped()); 
} 


OUTPUT : 

Array ( [test1] =&gt; test1 [test3] =&gt; test )
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Eran Galperin (erangalp) on 2008-03-31T19:52:58.000+0000</p> 
        <div class="body">
            <p>I agree, this is not expected behavior. I could understand if a non-selective filter ('*') is not considered to validate a field, but when I add field-specific filters I expect the returned value to be considered valid. For now I am forced to set a matching validator for each filter in the chain so it will be returned with the getEscaped() method. Is there a plan to fix this?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-04-18T13:12:00.000+0000</p> 
        <div class="body">
            <p>This doesn't appear to have been fixed in 1.5.0. Please update if this is not correct.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2008-04-18T16:58:30.000+0000</p> 
        <div class="body">
            <p>Please evaluate and categorize/assign as necessary.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Wil Sinclair (wil) on 2009-01-26T10:48:08.000+0000</p> 
        <div class="body">
            <p>Ralph, please evaluate and find a way to close out this issue.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Leandro Rodrigues Chaves (leandrorc) on 2009-04-24T17:03:27.000+0000</p> 
        <div class="body">
            <p>It's not solved yet. I'm using 1.7.6 and i can't get a field that has no validator rules. The only way is:
$unknownData = $input-&gt;getUnknown();
$data = $unknownData['fieldName'];</p>

<p>or subclassing Zend_Input_Filter and it's __get method.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Denis Portnov (denix) on 2009-05-04T18:33:25.000+0000</p> 
        <div class="body">
            <p>another workaround is subclassing and creating an extra array</p>

<pre><code>/**
* @var array After processing this contains initial data filtered
*
*/     
protected $_filteredFields = array();

// next is you patch _process() method

protected function _process()
{
    if ($this-&gt;_processed === false) {
        $this-&gt;_filter();
        $this-&gt;_filteredFields = $this-&gt;_data;

        $this-&gt;_validate();
        $this-&gt;_processed = true;
    }
}
</code></pre>

<p>//and extra getter</p>

<pre><code>public function getFiltered()
{
    $this-&gt;_process();
    return $this-&gt;_filteredFields;
}
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Leandro Rodrigues Chaves (leandrorc) on 2009-05-09T15:19:31.000+0000</p> 
        <div class="body">
            <p>Yeah, of course we can subclassing everything in order to make workarounds, but we need to help the framework team to make the best framework.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2009-08-28T12:39:10.000+0000</p> 
        <div class="body">
            <p>getEscaped() returns "secured" values... they are all validated.
To change this behaviour and return also unsecured/unvalidated data means to introduce a security problem.</p>

<p>This means that the actual behaviour is correct.
Only because a field is filtered, it does not automatically mean that it is secure/valid.</p>

<p>When you want to get all unvalidated values you can use "getUnescaped()".
When you want to allow ALL values to be returned, even if they are not valid you need to add '*' =&gt; array() to the validators.</p>

<p>We will add a description to the manual to make this behaviour more clear.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2009-08-28T13:26:02.000+0000</p> 
        <div class="body">
            <p>Described behaviour within the manual.
Therefor closing as Non Issue</p>

        </div>
    </div>
    </div>

