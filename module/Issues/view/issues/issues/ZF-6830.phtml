<h2>ZF-6830: Allow editing/updating of options for decorators already in a zend_form_elements stack.</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2009-05-27T22:51:01.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-05-28T03:59:23.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Matthew Weier O'Phinney (matthew)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Form</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Sometimes its particularly useful to be able to change options of individual decorators out of an elements decorator stack without having to re-set the entire thing manually (ie when using a preset list of elements and customising minor aspects for the current output). At the moment the closest thing to this would be to use removeDecorator and then addDecorator with the new options list. (which only works for the item on the end of the stack, not the most useful since the order of the stack is important in this case)</p>

<p>something like $element -&gt; setDecoratorOption($decoratoridentifier, $option)  and $element -&gt; removeDecoratorOption($decoratoridentifier, $option)</p>

<p>of course the tricky bit i can see here is that decorators dont really get names, at best they're identifiable by their type and the order of that type in the stack. (ie if the stack was viewhelper,htmltag,label,htmltag to ident the htmltags would be htmltag:0, htmltag:1 etc. not ideal since you cant always guarantee the order of the stack if something else is setting it.)</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Tomoaki Kosugi (noopable) on 2009-05-27T23:59:04.000+0000</p> 
        <div class="body">
            <p>Try addDecorator without removeDecorator.  Options could be changed by addDecorator without breaking the order. 
If you like,you can change options of decorator it has explicitly-defined name.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Joshua Hogendorn (devians) on 2009-05-28T00:45:03.000+0000</p> 
        <div class="body">
            <p>hrm, add decorator seems to work pretty admirably at this task (many thanks). its a little clunky though since you have to redo all the options that were a part of that decorator previously, rather than change just the one you want to change. so i think the improvement request still stands?</p>

<p>decorators also seem to have issues when you want to attach a single decorator to the element multiple times since it uses the assoc array to build the stack. is there a design reason for this?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2009-05-28T03:59:05.000+0000</p> 
        <div class="body">
            <p>There's a <em>much</em> easier way to do this; simply retrieve the decorator from the element and call the appropriate methods:</p>

<pre class="highlight"><code>
$decorator = $element-&gt;getDecorator('foo');
$decorator-&gt;setOption('bar', 'baz');
$decorator-&gt;removeOption('baz');
</code></pre>

<p>As for using the same decorator multiple times, you can't. You <em>can</em> have multiple <em>instances</em> of the same decorator, and the way to do this is via aliases; the methodology is described in the manual. The reason behind this is that the decorators are stateful, and can use different options.</p>

        </div>
    </div>
    </div>

