<h2>ZF-520: [Incubator] Zend_Controller_Front::addParam() doesn't push args to action constructor</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Docs:  Improvement</dd>

    <dt>Created:</dt>
    <dd>2006-11-08T23:48:42.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2007-07-05T14:43:26.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>0.6.0 (16/Dec/06)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Matthew Ratzloff (mratzloff)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Matthew Weier O'Phinney (matthew)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Controller</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Maybe I'm missing something, but in the new MVC model, shouldn't I be able to do this?</p>

<p>// bootstrap
$controller-&gt;addParam('foo', 'bar');</p>

<p>// action constructor
print $request-&gt;getParam('foo');</p>

<p>...where $request is the Zend_Controller_Request_Http object passed as an argument.</p>

<p>That doesn't work.  I'm only able to add parameters if I manually create a request object in the bootstrap and add parameters to that.</p>

<p>The summary for Zend_Controller_Front::addParam() is "Add a parameter to use when instantiating an action controller" so unless I'm doing something wrong, I'm guessing something is failing somewhere along the way.</p>

<p>If I add the following in Zend_Controller_Front line 460 (in dispatch()), it works:</p>

<p>```</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2006-11-09T08:11:11.000+0000</p> 
        <div class="body">
            <p>The parameters added to the front controller are different in scope to those found in the request. The point of the Zend_Controller_Front::addParam() is to allow pushing configuration parameters/objects from the front controller to the action controllers.</p>

<p>As an example, you may wish to have a registry object available to all actions, the dispatcher, and the router. This is not really the domain of the Request object, which is supposed to be a container for the actual request, but more the domain of the controller environment.</p>

<p>So, as an example:</p>

<pre class="highlight"><code>
$registry = new Zend_Registry();

// add some objects to the registry, and then...

$request  = new Zend_Controller_Request_Http();
$fc = new Zend_Controller_Front();
$fc-&gt;addParam('registry', $registry); // note, signature for addParam has changed
$fc-&gt;dispatch($request);

class FooController extends Zend_Controller_Action
{
    public function init()
    {
        // retrieve the 'registry' invocation argument and assign to local
        // property
        $this-&gt;_registry = $this-&gt;getInvokeArg('registry');
    }

    public function barAction()
    {
        $auth = $this-&gt;_registry-&gt;auth;
        if (!$auth-&gt;isValid()) {
            $this-&gt;_forward('/login/form');
            return;
        }

        $foo = $this-&gt;_getParam('foo'); // get 'foo' param from request
        // ...
    }
}
</code></pre>

<p>The place where parameters are added to the Request object is the Router, which will decide if there are URL segments that should create Request parameters. As an example, in the default router, Zend_Controller_Router, a URL like '<a href="http://example.com/foo/bar/key1/value1/key2/value2">http://example.com/foo/bar/key1/value1/key2/value2</a>' will be decomposed and two parameters added to the request object, key1 with value1 and key2 with value2.</p>

<p>I consider this a documentation issue, and will try to make the use cases clearer in the docs.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2006-11-09T08:12:09.000+0000</p> 
        <div class="body">
            <p>Changing priority to trivial and issue type to documentation improvement.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Ratzloff (mratzloff) on 2006-11-09T10:32:37.000+0000</p> 
        <div class="body">
            <p>Oh--yes, this is a documentation issue, then.  I was using __construct() instead of init().</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2006-11-09T14:26:58.000+0000</p> 
        <div class="body">
            <p>Well, in the 0.2.0 release, __construct() was final, and was gathering all arguments into a single array. In a recent subversion revision, this was changed to pass a single array as the third parameter to the constructor, and this parameter is then registered with the _invokeArgs property.</p>

<p>I'll update the docs shortly.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2006-11-09T14:49:36.000+0000</p> 
        <div class="body">
            <p>Revisions 1516 and 1517 introduce some changes to the documentation, particularly in the Subclassing chapter. Please check and indicate if this makes usage clearer.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2006-11-13T15:08:10.000+0000</p> 
        <div class="body">
            <p>Changing fix version to unknown.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2006-11-13T15:24:58.000+0000</p> 
        <div class="body">
            <p>Changing fix version to 0.6.0.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2006-11-28T14:01:32.000+0000</p> 
        <div class="body">
            <p>Documentation has been updated.</p>

        </div>
    </div>
    </div>

