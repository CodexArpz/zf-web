<h2>ZF-9898: hardcoded environment in Zend_Tool_Project_Context_Zf_BootstrapFile::getApplicationInstance()</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2010-05-27T03:47:46.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2011-01-03T09:19:37.000+0000</dd>

    <dt>Status:</dt>
    <dd>Open</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Michael Rolli (mrolli)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Ralph Schindler (ralph)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Tool</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>I'm currently trying to implement some Zend_Tool_Project_Provider to do application jobs (like search indexing) and therefore require to use resources from the webapp bootstrap, i.e. db connection. That's the way I'm doing it a provider right now:</p>

<pre class="highlight"><code>
$profile = $this-&gt;_loadProfileRequired();
$app = $profile-&gt;search('BootstrapFile')-&gt;getApplicationInstance();
$app-&gt;bootstrap();
$db = $app-&gt;getBootstrap()-&gt;getResource('db');
</code></pre>

<p>Right now, the environment which is used for the Zend_Application instance generated in Zend_Tool_Project_Context_Zf_BootstrapFile::getApplicationInstance() is hardcoded to "development" but I need another environment to run the job in.</p>

<p>I suggest to slightly modify Zend_Tool_Project_Context_Zf_BootstrapFile::getApplicationInstance() in the following way to be able to provide the needed environment while remaining bc:</p>

<pre class="highlight"><code>
Index: Tool/Project/Context/Zf/BootstrapFile.php
===================================================================
--- Tool/Project/Context/Zf/BootstrapFile.php   (revision 22308)
+++ Tool/Project/Context/Zf/BootstrapFile.php   (working copy)
@@ -99,7 +99,7 @@
         return $codeGenFile-&gt;generate();
     }
     
-    public function getApplicationInstance()
+    public function getApplicationInstance($environment = 'development')
     {
         if ($this-&gt;_applicationInstance == null) {
             if ($this-&gt;_applicationConfigFile-&gt;getContext()-&gt;exists()) {
@@ -108,7 +108,7 @@
                 $applicationOptions['config'] = $this-&gt;_applicationConfigFile-&gt;getPath();
     
                 $this-&gt;_applicationInstance = new Zend_Application(
-                    'development',
+                    $environment,
                     $applicationOptions
                     );
             }
</code></pre>

<p>Then I could simply set the environment within my provider:</p>

<pre class="highlight"><code>
$app = $profile-&gt;search('BootstrapFile')-&gt;getApplicationInstance('cli');
</code></pre>

<p>Any downside that I don't see?</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by B. Charbonneau (beeboo) on 2010-10-07T16:32:23.000+0000</p> 
        <div class="body">
            <p>This issue is frustrating when working with [~beberlei]'s zf-doctrine and doing anything migration related in any non-development environment</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Stepan Tanasiychuk (stfalcon) on 2010-12-14T01:18:22.000+0000</p> 
        <div class="body">
            <p>Yep. I want use zf-doctrine on staging/production server to database migrations. But it makes it difficult.</p>

<p>I can set APPLICATION_ENV in command line "$ APPLICATION_ENV=staging zf"
And get it in the script from "getenv('APPLICATION_ENV')"</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Shane (nvoyageur) on 2011-01-03T09:19:37.000+0000</p> 
        <div class="body">
            <p>I've done just that and edited it to pull the APPLICATION_ENV with the getenv('APPLICATION_ENV') function.</p>

<pre class="literal">
--- BootstrapFile.php (saved version)
+++ (current document)
@@ -106,9 +106,11 @@
                 define('APPLICATION_PATH', $this-&gt;_applicationDirectory-&gt;getPath());
                 $applicationOptions = array();
                 $applicationOptions['config'] = $this-&gt;_applicationConfigFile-&gt;getPath();
+                
+                $env = getenv('APPLICATION_ENV') ? getenv('APPLICATION_ENV') : 'development';
     
                 $this-&gt;_applicationInstance = new Zend_Application(
-                    'development',
+                    $env,
                     $applicationOptions
                     );
             }
,

</pre>

<p>Now I just store an environment variable in my shell for APPLICATION_ENV="local" and it will use the "local" environment in the application.ini file.</p>

        </div>
    </div>
    </div>

