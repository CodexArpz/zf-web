<h2>ZF-10505: Zend_Cache_Frontend_Page should be able to match against routes as well as regex</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2010-09-29T14:43:01.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-11-20T21:38:09.000+0000</dd>

    <dt>Status:</dt>
    <dd>Open</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
        None
                    </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Cache</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Since routes are already defined somewhere else in the application and they all have a name, defining them again (or at least some of them) for caching purposes doesn't seem very DRY. It would be very useful if the Zend_Cache_Frontend_Page frontend could also match against route names.</p>

<p>Of course having the router parse all routes and match against the URI implies some overhead and would be slower than using the more immediate regex method available in Zend_Cache_Frontend_Page. Having said that I think this performance issue should be left to be evaluated by users. I can think of many cases where this would have come in handy for me.</p>

<p>The implementation would look something like this: 
<em>this code sample was taken from the actual Zend_Cache_Frontend_Page docs and slightly changed to exemplify my proposal</em></p>

<pre class="highlight"><code>      $frontendOptions = array(
         'lifetime' =&gt; 7200,
         'debug_header' =&gt; true, 
         'routes' =&gt; array(

             'someRouteName' =&gt; array('cache' =&gt; true),

             'someOtherRouteName' =&gt; array('cache' =&gt; true),

             'andAnotherRouteName' =&gt; array(

                 'cache' =&gt; true,

                 // and we cache even there are some variables in $_POST
                 'cache_with_post_variables' =&gt; true,

                 // but the cache will be dependent on the $_POST array
                 'make_id_with_post_variables' =&gt; true
             )
         )
      );
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>
    <p class="comments">No comments to display</p>
    
</div>

