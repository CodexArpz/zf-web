<h2>ZF-9151: Zend_Dojo_View_Helper path overrides Zend_View_Helper path</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2010-02-11T13:20:58.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-11-20T21:37:59.000+0000</dd>

    <dt>Status:</dt>
    <dd>Open</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
        None
                    </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Dojo</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-9852">ZF-9852</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Cannot believe it, first time I use Zend_Dojo and I'm finding a major bug in the first 10 minutes (with another hour of following backtraces)... anyway, following problem:</p>

<p>When registering the Zend_Dojo_View_Helper path in the view, and trying to render a <em>usual</em> form (which is a usual Zend_Form without dijits nor dojo-enabled), Zend_Form runs through its own decorators, of which one of the default decorators wants to call the "Form" view helper. As it tries so, a naming conflict hinders it from getting Zend_View_Helper_Form, and Zend_Dojo_View_Helper_Form is rendered instead.</p>

<p>This triggers Zend_Dojo_View_Helper_Dijit to be loaded by Zend_View_Abstract, which then calls the setView() method on this view helper, which finally enables Zend_Dojo_View_Helper_DojoContainer, without any need of it to be enabled. Additionally, it creates JavaScript code for the Dijit view helper, which is not required at all.</p>

<p>Generated JS code, which causes a complete DOM scan:</p>

<pre class="highlight"><code>
</code></pre>

<p>Just to make it even more interesting, it will also generate the following JavaScript error:</p>

<pre class="highlight"><code>
Error: Could not load 'dijit.form.Form'; last tried '../dijit/form/Form.js'
File: <a href="http://dasprids.local/media/js/dojo.js">http://dasprids.local/media/js/dojo.js</a>
Line: 16
</code></pre>

<p>Using dojo.js from <a href="http://download.dojotoolkit.org/release-1.4.1/">http://download.dojotoolkit.org/release-1.4.1/</a></p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2010-02-11T13:34:43.000+0000</p> 
        <div class="body">
            <p>This is a known issue, and I plan to create a different decorator for this and the Textarea dijit as well so that naming collisions with these two won't occur. Unfortunately, I don't have a workaround possible for you to try in the immediate future.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ben Scholzen (dasprid) on 2010-02-11T13:41:18.000+0000</p> 
        <div class="body">
            <p>Any chance to fix that in a mini release, or would that be considered a BC break which <em>has</em> to wait for 2.0? Also, will there be any steps taken in 2.0 that those naming conflicts cannot occur anymore?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ben Scholzen (dasprid) on 2010-02-13T07:33:12.000+0000</p> 
        <div class="body">
            <p>For those of you interested in a workaround:</p>

<p>Extend the Form-decorator in your application library, and set $_helper = 'formForm'.
Then extends the Form-view-helper in your application library as FormForm, and route the formForm() call to form().
This will avoid the naming conflict for now.</p>

        </div>
    </div>
    </div>

