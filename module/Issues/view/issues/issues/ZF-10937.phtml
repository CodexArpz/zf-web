<h2>ZF-10937: Remove the ZendView::useStreamWrapper() in the next major release</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2011-01-11T11:19:13.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2011-01-22T10:54:53.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Dolf Schimmel (Freeaqingme) (freak)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_View</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <ul><li><p>using short_open_tag is never a technical requirement, and is against Zend coding standards :
<a href="http://framework.zend.com/manual/en/coding-standard.coding-style.html">http://framework.zend.com/manual/en/â€¦</a></p></li>
<li><p>the current implementation is broken, based on simple regexp which does not take the context into account :</p></li>
</ul>

&lt;?php
require_once 'Zend/View/Stream.php';
stream_wrapper_register('zend.view', 'Zend_View_Stream');
echo file_get_contents('zend.<a>view://test.php</a>');
?&gt;

<p>This test.php file :
&lt;? echo htmlspecialchars('&lt;? /* this is an example of a short_open_tag */ ?&gt;'); ?&gt;</p>

<p>Gets rewritten to :
&lt;?php  echo htmlspecialchars('&lt;?php  /* this is an example of a short_open_tag */ ?&gt;'); ?&gt;</p>

<p>Which is an undesired behaviour.
Needless to say that if the script contains binary data embedded with __halt_compiler(), its result is unpredictable. Of course, this scenario is not very likely to happen in a view script, but this implementation is still not a good practice. A good wrapper would parse the file with token_get_all(), with the obvious performance loss that goes with it.</p>

<p>Keeping in mind that short_open_tag will probably not survive in future versions of PHP, and the bad<br />
 design of a stream wrapper that fully loads an unknown-size file in memory to browse it, I think it's worth planning to remove this feature in the next major release.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Ryan Mauger (bittarman) on 2011-01-11T11:35:05.000+0000</p> 
        <div class="body">
            <p>I would argue that this alone is not a good reason to remove usage of the stream wrappers.</p>

<p>Also, I'd argue that the one for __halt_compiler() would actually be completely irrelevant, as using that in a view script would actually break the functionality of Zend_View anyway, and additionally, the fact that the file size is unknown is completely irrelevant, as no checking of the file size is currently in place when the view partial is simply included by zend_view when not run through the stream wrapper, and the fact that it is using a stream instead of something like file_get_contents means that the additional memory overhead is very minimal if any.</p>

<p>Some people in the community have expressed a desire for an option to automatically escape variables output in a view script, and an excellent implementation of this was posted to the mailing list.</p>

<p>short opening tags are not the only use-case for which stream wrappers are suitable, so to remove them for the above reasons would be flawed, and they should only be removed if the templating implemented in Zend\View moves to a completely different approach, which should also be avoided to ease the transition from ZF1 to ZF2.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Strict Coding (strictcoding) on 2011-01-11T11:55:12.000+0000</p> 
        <div class="body">
            <p>Sorry for the possible misinterpretation. I'm not saying that the concept of Zend_View stream wrappers should be totally avoided, I mean that the current Zend_View_Stream just designed for handling short_open_tag is useless and flawed, as explained above.</p>

<p>About your comments :
* __halt_compiler() only halts the compiler for the current script, and does work in a view
* the file size is theoretically relevant: when Zend_View includes a file, it just passes it to the PHP parser. This is totally different from including the same file with a stream wrapper which loads it into the application memory first; although I obviously agree that for small view scripts, the argument is weak as the difference may be unnoticeable.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Dolf Schimmel (Freeaqingme) (freak) on 2011-01-21T13:17:32.000+0000</p> 
        <div class="body">
            <p>Strict Coding (I find it hart to believe that to be your real name), please read the coding guidelines. __halt_compiler() is not to be used inside viewscripts.</p>

<p>{quote}This is totally different from including the same file with a stream wrapper which loads it into the application memory first; {quote}</p>

<p>That's the bonus when using a wrapper.</p>

<p>=&gt; Closing as not an issue.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Strict Coding (strictcoding) on 2011-01-22T10:54:52.000+0000</p> 
        <div class="body">
            <p>Dorf, you may have guessed this is my company name.
Sorry for the bad argument about __halt_compiler(), my mistake, it's indeed against the coding standards.</p>

<p>However, closing as <em>not an issue</em> without taking the time to comment on the fact that if, for any reason, we have to include the tag in a string, this breaks the behavior, is maybe a bit expeditious?</p>

<p>&lt;? echo $this-&gt;escape('&lt;? /* this short_open_tag should not be rewritten */ ?&gt;'); ?&gt;</p>

<p>Thanks for your answer; we're all here to make this framework better.
Benjamin</p>

        </div>
    </div>
    </div>

