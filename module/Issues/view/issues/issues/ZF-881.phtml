<h2>ZF-881: Zend_Validate_Hostname - UTF-8 hostnames valid?</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Task</dd>

    <dt>Created:</dt>
    <dd>2007-02-08T14:23:36.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2007-07-05T14:43:48.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>0.9.0 (17/Mar/07)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Simon R Jones (studio24)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Validate</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-84">ZF-84</a></li>
            <li><a href="/issues/browse/ZF-1083">ZF-1083</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
        <li><a href="/issues/secure/attachment/10320/Hostname.tgz">Hostname.tgz</a></li>
            <li><a href="/issues/secure/attachment/10322/HostnameTest.php">HostnameTest.php</a></li>
            <li><a href="/issues/secure/attachment/10324/HostnameTestForm.php">HostnameTestForm.php</a></li>
            <li><a href="/issues/secure/attachment/10323/HostnameTestStandalone.php">HostnameTestStandalone.php</a></li>
        </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Unit tests for Zend_Validate_Hostname contain an entry for 'bürger.de' that is considered valid (the test fails with the current default regular expressions). Either UTF-8 hostnames must be considered invalid, or we should change the default regular expressions for Zend_Validate_Hostname to allow for such hostnames as 'bürger.de' to be considered valid.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Gavin (gavin) on 2007-02-08T15:04:06.000+0000</p> 
        <div class="body">
            <p>Both of the options above would produce erroneous behavior.</p>

<p>The correct set of permitted characters and the correct regular expression to properly identify valid and invalid hostnames depends on the TLD.</p>

<p>In summary, I think supporting the precise character set (and correct regular expression) permitted by each registry is a large task.  Unless we find an organization maintaining these tables of information (similar to the CLDR), I think this is currently beyond our scope for ZF 1.0.  Additionally, I would urge anyone creating an international website to consider the implications for foreigners regarding spoofing concerns, where visually identical (or almost indistinguishable) domain names might exist.</p>

<p>For example, consider the supported characters for the ".de" TLD:
<a href="http://www.denic.de/en/domains/idns/liste.html">http://www.denic.de/en/domains/idns/liste.html</a></p>

<p>More information on IDNA:
<a href="http://en.wikipedia.org/wiki/Internationalized_domain_name">http://en.wikipedia.org/wiki/…</a></p>

<p>Before IDNA was adopted, we only had the following:</p>

<p><a href="http://www.icann.org/tlds/org/applications/isoc/AppendixJ.html#JE">http://icann.org/tlds/org/…</a></p>

<p>{quote}
E. Domain Name Character Set</p>

<ol><li>Usage</li>
</ol><p>This character set will be used in places where a domain name is to be specified. It does not govern the specification of internationalised domain names, which are not authorized by the current specification.</p>

<ol><li>Definition</li>
</ol><p>The rules for the format and character set of domain names are defined by the following:</p>

<p>dot = %x2E ; "."</p>

<p>alpha = %x41-5A | %x61-7A ; A-Z | a-z</p>

<p>digit = %x30-39 ; 0-9</p>

<p>dash = %x2D ; "-"</p>

<p>dns-char = alpha | digit | dash</p>

<p>id-prefix = alpha | digit</p>

<p>label = id-prefix [*61dns-char id-prefix]</p>

<p>sldn = label dot label ; not to exceed 254 characters</p>

<p>hostname = 1*(label dot) sldn; not to exceed 254 characters
{quote}</p>

<p>Cheers,
Gavin</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Darby Felton (darby) on 2007-02-08T15:16:13.000+0000</p> 
        <div class="body">
            <p><a href="http://www.nabble.com/forum/ViewPost.jtp?post=8874153&amp;framed=y&amp;skin=16154">Original message</a> by [~thomas]:</p>

<p>Well... Denic changed some months ago the hostname supported signs...
since then also hostnames like <a href="www.kettenz%C3%BCge.de">www.kettenzüge.de</a> are regular hostnames.</p>

<p>So from this view Zend_Validate_Hostname should also support those characters.
There are 92 new characters which are supported....</p>

<p>This means DNS names with for example chinese or UTF8 charsets are not supported.
But all characters like "ä ö ü ß é í á ó à è ì ò" and much more.</p>

<p>Here is a list of all new supported chars...
<a href="http://www.denic.de/de/domains/idns/liste.html">http://www.denic.de/de/domains/idns/liste.html</a></p>

<p>Greetings
Thomas
(I18N Team Leader)</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Gavin (gavin) on 2007-02-08T15:22:31.000+0000</p> 
        <div class="body">
            <p>{quote}So from this view Zend_Validate_Hostname should also support those characters.{quote}</p>

<p>.. only for the ".de" TLD.  Also, the regular expression for this TLD would not be the same as used by ICANN (see my first comment).</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2007-02-08T15:55:07.000+0000</p> 
        <div class="body">
            <p>Well... ICAN defines that all unicode characters can be supported.</p>

<ol><li><p>In implementing the IDN standards, top-level domain registries will employ an "inclusion-based" approach (meaning that code points that are not explicitly permitted by the registry are prohibited) for identifying permissible code points from among the full Unicode repertoire.</p></li>
<li><p>In implementing the IDN standards, top-level domain registries will (a) associate each registered internationalized domain name with one language or set of languages, (b) employ language-specific registration and administration rules that are documented and publicly available, such as the reservation of all domain names with equivalent character variants in the languages associated with the registered domain name, and, (c) where the registry finds that the registration and administration rules for a given language would benefit from a character variants table, allow registrations in that language only when an appropriate table is available.</p></li>
</ol><p>So the question is if we get a list of supported unicode charsets for each IDN registar or if we should accept all unicode characters.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ahmed Shreef (shreef) on 2007-02-08T17:10:18.000+0000</p> 
        <div class="body">
            <p>ok, just accept any Unicode characters. I found that there is some host names like " <a href="/">http://www.جهينة.com/</a> " .</p>

<p>I read minutes ago an Arabic forum post about this type of domains. one of the guys said that you can just get a domain like this from any domains registrar . for example, if you want to register the domain " <a href="/">http://www.جهينة.com/</a> " just register the domain " <a href="http://www.xn--ogbf2fdp.com/">http://www.xn--ogbf2fdp.com/</a> ". if the user types the Arabic domain, the browser will translate the Arabic characters to a mix of English ones and will take the user to the website.</p>

<p>so if we can do this in Arabic, there will be possibility to create Japanese and Chinese ones too .</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Gavin (gavin) on 2007-02-08T17:28:07.000+0000</p> 
        <div class="body">
            <p><a href="http://www.iana.org/cctld/specifications-policies-cctlds-01apr02.htm">http://iana.org/cctld/…</a></p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Gavin (gavin) on 2007-02-08T19:24:08.000+0000</p> 
        <div class="body">
            <p>I expect the managers of TLDs would heavily frown on permitting illegal characters in domain names for their TLDs.</p>

<p>For example, using a non-Icelandic approved characters for a ".is" domain would open the door to a form of spoofing attacks, by allowing other characters that look similar or identical to the special characters added by the ".is" TLD to the permitted list of characters for their domain names.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Simon R Jones (studio24) on 2007-02-09T03:40:46.000+0000</p> 
        <div class="body">
            <p>We have a French member of staff here, French domains (.fr) do not use special characters - the official site indicates tthe following characters are only allowed: "a-z", "0-9" and "-"</p>

<p>As of 2004 Belgium domains (.be) can include special characters as defined by the IDN. I am not sure how widely used this is, however.</p>

<p>I agree with Thomas it is useful to support these character sets. A sensible approach would be to accept a restrictive set of characters for all domains, then extend this on a tld by tld basis. Each tld should then allow additional character sets as defined by the relevant authority.</p>

<p>I don't see how we can hope to cover all domains, but at least a core number can be achieved and as long as users can extend the system to add their own characters for other domains that should be workable.</p>

<p>Of course all of this is different for local hostnames. I think there was talk that the Hostname validator should allow local name validations. Is this right?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2007-02-09T12:34:10.000+0000</p> 
        <div class="body">
            <p>Well, for DE such a list exists...</p>

<p>I am sure that also for other IDNs such a list can be found.
So if we dont accept all unicode characters we should only include the IDN's from which we have the extended charset.</p>

<p>Others would only have ToAscii instead of ToUnicode.</p>

<p>@Ahmed:
What you've mentioned does not what's meant here.</p>

<p>Not all IDNs accept unicode.
<a href="http://www.xn--ogbf2fdp.com/">http://www.xn--ogbf2fdp.com/</a>  is only what a IDN does after receiving unicode characters.</p>

<p><a href="/">http://www.جهينة.com/</a>  is the unicode which we have to parse/validate.
The unicode letters are then changed by the ToAscii function in the browser/IDN to Ascii letters, where xn-- (and also others) are defining which unicode charset to use.</p>

<p>But an arabic IDN would not accept xd-- because it's not arabic.
Look at the links which gavin placed for further explanation.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Simon R Jones (studio24) on 2007-02-11T16:56:16.000+0000</p> 
        <div class="body">
            <p>My suggested approach (which I am now testing) involves having a more basic regex (as per the IANA spec mentioned above) for standard domains which matches up with that specified at iana.org</p>

<p>I will also match against a known TLD for DNS-based domains. If a special regex exists for a TLD, then this is used. I'll set up .de and .be as a test to start with</p>

<p>I will have a large array for the known TLDs (generated from <a href="ftp://data.iana.org/TLD/tlds-alpha-by-domain.txt">ftp://data.iana.org/TLD/tlds-alpha-by-domain.txt</a>) and custom regexes for each TLD that we set up for. I will store these as properties in Zend_Validate_Hostname.</p>

<p>I did think about seperating them out into different files in something like Zend_Validate_Hostname/Data but the benefit of such organisation seems outweighed by the speed hit such an act will inpact and the fact the data will be so small.</p>

<p>I have a script to generate the TLD array. Should this be stored somewhere within the ZF folder structure?</p>

<p>Darby, I'll probably have to drop your regex constant organisation since the DNS regex will be too complex to fit into one line and will require further checks (i.e. against the tld). Hope that's ok!</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Simon R Jones (studio24) on 2007-02-12T15:39:35.000+0000</p> 
        <div class="body">
            <p>I've added support for the following countries: Austria (.AT),  Switzerland (.CH), Liechtenstein (.LI),  Germany (.DE), Finland (.FE),  Hungary (.HU), Norway (.NO), and Sweden (.SE). Seems Belgium doesn't accept IDN at present.</p>

<p>So far I've placed the additional characters regex in Zend_Validate_Hostname but this isn't going to work for Far East languages such as Japan (which has 6534 additional characters available for IDN domains according to <a href="http://www.iana.org/assignments/idn/jp-japanese.html">http://iana.org/assignments/idn/…</a> ). May have to rethink how the country regexes are stored.</p>

<p>Any objections to storing these in a Zend_Validate_Hostname/Data folder as straightforward PHP arrays? I could encapsulate these in a class such as Zend_Validate_Hostname_Data_Jp if this is considered better practise.</p>

<p>I also notice exceptions are raised in the current Zend_Validate_Hostname, seemingly to detect whether a preg_match fails. This seems different from all other Validator classes and gets a bit messy now I've extended the validation somewhat for domains. Is it OK to just set messages wherever there's a failure?</p>

<p>Any input appreciated, otherwise I'll go ahead and commit these changes in the next day or two.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Gavin (gavin) on 2007-02-12T16:37:31.000+0000</p> 
        <div class="body">
            <p>{quote}I have a script to generate the TLD array. Should this be stored somewhere within the ZF folder structure?{quote}
Yes, see the  build-tools/ directory.</p>

<p>Eventually, some will use a configuration scripts for installing the ZF and/or ZF apps.
This will some day affect how developers and users want to deal with the bloat associated with supporting all locales, TLDs, and other optional code in the ZF.</p>

<p>Ideally, using isHostname() would not force all TLD regex's into RAM ;)
I personally like the efficient approach of storing appropriate data into PHP arrays in *.php files, ready for inclusion, if needed.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Simon R Jones (studio24) on 2007-02-13T17:17:43.000+0000</p> 
        <div class="body">
            <p>Having a issue matching UTF-8 characters within a preg_match using hex characters. From the docs \x{XXXX} should match a UTF-8 character, however the following two tests return false (when they should return true)</p>

<pre class="highlight"><code>
var_dump(preg_match("/\x{00E4}/u", 'ä'));

var_dump(preg_match("/^[a-zA-Z0-9\x{00E0}\x{00E1}\x{00E2}\x{00E3}\x{00E4}\x{00E5}\x{00E6}\x{00E7}\x{00E8}\x{00E9}\x{00EA}\x{00EB}\x{00EC}\x{00ED}\x{00EE}\x{00EF}\x{00F0}\x{00F1}\x{00F2}\x{00F3}\x{00F4}\x{00F5}\x{00F6}\x{00F8}\x{00F9}\x{00FA}\x{00FB}\x{00FC}\x{00FD}\x{00FE}\x{00FF}\x{0153}\x{0161}\x{017E}]{1,63}$/u", "bächer"));
</code></pre>

<p>If I remove the /u modifier the first example works, but the second fails on the preg_match with a warning:   preg_match(): Compilation failed: character value in \x{...} sequence is too large at offset 266 in C:\wamp\www\zf-test\mb_test.php on line 7</p>

<p>This seems to indicate the character \x{0153} but that is valid</p>

<p>Anyone have experience in this?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Simon R Jones (studio24) on 2007-02-13T17:19:09.000+0000</p> 
        <div class="body">
            <p>sorry about the long line length, if someone can edit the code example to go across multiple lines that would be good :-)</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Simon R Jones (studio24) on 2007-02-15T08:37:58.000+0000</p> 
        <div class="body">
            <p>Revision 3429, which will be released with 0.8, has a rewrite of DNS hostname matching which is accurate for all normal domain names including a check for a current valid TLD.</p>

<p>I have developed test scripts for IDN support for a number of country TLDs but due to the complexity of testing UTF-8 characters this isn't ready for release at this time. I will continue testing with the aim to have this complete for 0.9</p>

<p>So far I have placed arrays for TLD additional characters in separate files within Zend/Validate/Hostname/ with files named in the format De.php and the class name Zend_Validate_Hostname_De - these classes are based on an interface which describes their usage.</p>

<p>IDN characters are stored as 4-char hex codes, ie ```</p>

<p>While this is fine for regexes, I've had problems including UTF-8 characters in the Unit tests. I believe this to be to do with the Byte-Order-Mark of the actual file. Zend_Validate_Hostname will likely be used in the real world for validating data from POST or a database such as MySQL so BOMs may be less important. I will be undertaking some tests to see what needs to be done to ensure real-world  IDN domain name matching works with UTF-8 characters.</p>

<p>I've changed the default behaviour of Zend_Validate_Hostname to only match DNS hostnames since after discussion with my co-developers in the office I believe this is the most common practical usage of Zend_Validate_Hostname. Other options can be set as normal via the contstructor. The ability to change the regex for local domains has been kept, but this may be deprecated by 0.9</p>

<p>Usage documentation for the current version has been added to the end-user manual.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Philip Iezzi (iezzip) on 2007-02-25T05:16:09.000+0000</p> 
        <div class="body">
            <p>Why should we take the complexity of validating UTF-8 characters in Zend_Validate_Hostname?
Doesn't it make more sense to just allow punycoded IDNA hostnames? I guess this regex would be much easier to implement.</p>

<p>'kettenzüge.de' would result in 'xn--kettenzge-w9a.de' which currently does not validate in Zend_Validate_Hostname.
To make such a hostname available for other applications (e.g. zonefiles in Bind or Apache's VirtualHosts) anyway we need to convert them to punycode. Why not just do this prior to validation to simplify life?
I'm using PEAR's Net_IDNA, e.g.:</p>

<pre class="highlight"><code>
$idna = Net_IDNA::getInstance();
$encodedHostname = $idna-&gt;encode(utf8_encode($hostname));

$validator = new Zend_Validate_Hostname();
if (!$validator-&gt;isValid($encodedHostname)) {
    // would be nice if this would validate!
}
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Simon R Jones (studio24) on 2007-03-13T14:21:36.000+0000</p> 
        <div class="body">
            <p>I have added IDN domain support to Zend_Validate_Hostname to match a domain such as bürger.de</p>

<p>However I've had some real problems getting the actual Unit Tests to run and validate an IDN domain. Most of these seem to be due to UTF-8 characters in the test file getting mucked up (encoding is great fun!).</p>

<p>So far I cannot actually run my Unit Tests successfully (I am on Windows with WAMP and so far have not managed to get PHPUnit running on a Unix box here) but if I copy the code into standalone test scripts using the actual Zend Framework validate functions they pass fine. Test scripts which validate a hostname via POST also work fine (given form encoding is working OK).</p>

<p>I would like someone with more experience of PHPUnit to run my tests to see if they pass OK. If so, I'll submit the code into the repository and hopefully all will be well.</p>

<p>Otherwise is it OK to commit this new feature without a Unit Test? I rather suspect even if we can sort out encoding in one file Subversion may muck up the encoding and thus make it impossible to get a stable Unit test for this in the trunk.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Simon R Jones (studio24) on 2007-03-13T15:31:34.000+0000</p> 
        <div class="body">
            <p>sorry, forgot - Hostname unit test file attached. This file should be encoded as UTF-8</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Simon R Jones (studio24) on 2007-03-13T15:56:54.000+0000</p> 
        <div class="body">
            <p>Final comment today.. I am using mb_strtolower() to reliably force hostnames to lower-case for matching against IDN characters.</p>

<p>Looking at comments on ZF-269 this seems not to be the ideal way to do things? If this is so, I can look at adding all the upper-case versions of the allowed characters though it may take a while..</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2007-03-13T17:17:26.000+0000</p> 
        <div class="body">
            <p>only one small point:</p>

<p>Why do you use the mb-extension ?
I thought that it is depreciated and instead iconv should be used ?</p>

<p>Btw:
Instead of Zend_Locale_UTF8 (ZF-269) we use the iconv library for localization. :-)</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Simon R Jones (studio24) on 2007-03-14T03:55:01.000+0000</p> 
        <div class="body">
            <p>Thomas: can I convert to lower case with iconv? From looking over the manual I can't find a solution to that with iconv</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2007-03-14T05:03:36.000+0000</p> 
        <div class="body">
            <pre class="highlight"><code>
public function iconv_strtolower($value)
{
    return iconv(strtolower(iconv($value, "UTF-8", "windows-1251")), "windows-1251", "UTF-8");
}
</code></pre>

<p>So simple that sometimes you dont see the tree within the wood ;-)</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2007-03-14T05:08:09.000+0000</p> 
        <div class="body">
            <p>For linux an other encoding should be selected of course. ;-)</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Simon R Jones (studio24) on 2007-03-14T06:27:38.000+0000</p> 
        <div class="body">
            <p>Thanks Thomas!</p>

<p>Am testing with the i modifier in preg which seems to be UTF-8 safe if I'm in UTF-8 mode</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Simon R Jones (studio24) on 2007-03-14T06:43:20.000+0000</p> 
        <div class="body">
            <p>Silly me, using the i and u modifier works fine for UTF-8 safe lower-casing regexes. Thanks for the advice though Thomas :-)</p>

<p>I have had to create two standalone test scripts in the tests/Zend/Validate folder since I can't get the Unit Test to work with IDN characters.</p>

<p>The first is tests/Zend/Validate/HostnameTestStandalone.php which is designed to be run on  the command line.</p>

<p>The second is tests/Zend/Validate/HostnameTestForm.php which is designed to be run via HTML  to allow users to test entering UTF-8 characters in a form.</p>

<p>Is it OK to commit these to SVN or is this not really the place for non-unit tests?</p>

<p>Finally, I had some issues trying to filter incoming POST data with UTF-8 characters. Bar stripping tags, any advice on how to make use of Zend_Filter on wider character sets?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Simon R Jones (studio24) on 2007-03-14T11:31:41.000+0000</p> 
        <div class="body">
            <p>Fixed in version 3927</p>

<p>IDN support is described in Zend_Validate_Hostname and Zend_Validate_Hostname_Interface. Documentation to be updated shortly.</p>

<p>Initially supported TLDs are: .at, .ch, .li, .de, .fi, .hu, .no, .se</p>

<p>I have a script to create a .jp character list but since it weighs in over 6000 characters I want to test this on smaller character set IDNs as mentioned above</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Simon R Jones (studio24) on 2007-03-14T11:36:51.000+0000</p> 
        <div class="body">
            <p>In case of any issues with testing the Unit test for Hostname, please try this standalone script - HostnameTestStandalone.php</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Simon R Jones (studio24) on 2007-03-14T11:37:15.000+0000</p> 
        <div class="body">
            <p>In case of any issues with testing the Unit test for Hostname, please try this standalone script intended for testing IDN domains via a form - HostnameTestForm.php</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Gavin (gavin) on 2007-03-27T13:31:31.000+0000</p> 
        <div class="body">
            <p>Summarizing from historical threads:
- the mbstring extension is not deprecated and is the <em>recommended</em> way to fully UTF-8 enable an entire PHP application
- the mbstring extension should <em>not</em> be required in ZF /library core code (the extension is not a ZF requirement)
- the /u modifier for PCRE does not work in all conditions and situations (see past topic threads and pcre.org for details)
- test suites might make use of more "tools" (e.g. mbstring) than are available in ZF /library core, but the tests then need to be optional</p>

        </div>
    </div>
    </div>

