<h2>ZF-12264: Lost value from first file element in form with several file elements.</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2012-05-30T06:41:39.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-05-30T12:02:48.000+0000</dd>

    <dt>Status:</dt>
    <dd>Open</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Kirill Brus (kimonniez)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Christian Albrecht (alab)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Form</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>I have a form which allows to manage an information in DB. This form contains few text inputs, textareas and three file elements. When I submit the form, information is saved to DB (from file elements are saved names of files). In a class for this form I've set a 'required' only for first file element. And when I submit form, to DB get only second and third names of files. But in any another cases (first and second, first and third, only first) name of the first file gets to DB. And if I remove 'required' condition for first file element and submit form - everething is ok and all three names get to DB.</p>

<p>If you need little more information - ask.
Thx in advance.</p>

<p>UPD: sorry for Form class view. I dont know why it looks like piece of text.</p>

<p>Class for my form:</p>

<pre class="highlight"><code>
class Form_AdminHotels extends Zend_Form
{
    public function init() {    
        $this-&gt;setMethod('POST');
        $this-&gt;setAttrib('enctype', 'multipart/form-data');     
        $this-&gt;setDecorators(array( 
            'FormElements', 
            array('HtmlTag', array('tag' =&gt; 'table')), 
            'Form' 
        )); 
        
        $this-&gt;setElementDecorators(array( 
            'ViewHelper', 
            'Errors', 
            array('decorator' =&gt; array('td' =&gt; 'HtmlTag'), 'options' =&gt; array('tag' =&gt; 'td')), 
            array('Label', array('tag' =&gt; 'td')), 
            array('decorator' =&gt; array('tr' =&gt; 'HtmlTag'), 'options' =&gt; array('tag' =&gt; 'tr')), 
        )); 
    
        $this-&gt;addElement('text', 'id', array(
            'label' =&gt; '#',
            'attribs' =&gt; array(
                'maxlength' =&gt; 100,
                'size' =&gt; 30,
                'readonly' =&gt; 'readonly'
            ),
            
            
        ));
        
        $this-&gt;addElement('text', 'name', array(
            'label' =&gt; 'Имя*',
            'attribs' =&gt; array(
                'maxlength' =&gt; 100,
                'size' =&gt; 30
            ),
            'validators' =&gt; array(
                array('StringLength', false, array(3,100, 'messages' =&gt; 'Введите корректное имя')),
                array('NotEmpty', true, array('messages' =&gt; 'Имя не может быть пустым')),
            ),          
            'required' =&gt; TRUE
        ));
        
                            
        $this-&gt;addElement('textarea', 'description', array(
            'label' =&gt; 'Описание',
            'attribs' =&gt; array(
                'maxlength' =&gt; 1000,
                'rows' =&gt; 10,
                'cols' =&gt; 35,
                'id' =&gt; 'replaced1'
            ),           
            'required' =&gt; TRUE
        ));
        
        
        $this-&gt;addElement('file', 'img1', array(
            'label' =&gt; 'Картинка 1',
            'attribs' =&gt; array(
                'maxlength' =&gt; 100,
                'size' =&gt; 30
            ),    
            
           //'required' =&gt; TRUE    &lt;-- remove this comment
        ));
        $this-&gt;getElement('img1')-&gt;setDecorators(
            array(
                'File',
                'Errors',
                array(array('data' =&gt; 'HtmlTag'), array('tag' =&gt; 'td')),
                array('Label', array('tag' =&gt; 'th')),
                array(array('row' =&gt; 'HtmlTag'), array('tag' =&gt; 'tr'))
            )
        );
        
        $this-&gt;addElement('file', 'img2', array(
            'label' =&gt; 'Картинка 2',
            'attribs' =&gt; array(
                'maxlength' =&gt; 100,
                'size' =&gt; 30
            ),
                
            
        ));
        $this-&gt;getElement('img2')-&gt;setDecorators(
            array(
                'File',
                'Errors',
                array(array('data' =&gt; 'HtmlTag'), array('tag' =&gt; 'td')),
                array('Label', array('tag' =&gt; 'th')),
                array(array('row' =&gt; 'HtmlTag'), array('tag' =&gt; 'tr'))
            )
        );
        $this-&gt;addElement('file', 'img3', array(
            'label' =&gt; 'Картинка 3',
            'attribs' =&gt; array(
                'maxlength' =&gt; 100,
                'size' =&gt; 30
            ),
            
        ));
        $this-&gt;getElement('img3')-&gt;setDecorators(
            array(
                'File',
                'Errors',
                array(array('data' =&gt; 'HtmlTag'), array('tag' =&gt; 'td')),
                array('Label', array('tag' =&gt; 'th')),
                array(array('row' =&gt; 'HtmlTag'), array('tag' =&gt; 'tr'))
            )
        );
        
        $this-&gt;addElement('textarea', 'inside', array(
            'label' =&gt; 'Подробное описание',
            'attribs' =&gt; array(
                'maxlength' =&gt; 100000,
                'rows' =&gt; 10,
                'cols' =&gt; 35,
                'id' =&gt; 'replaced2'
            ),           
            'required' =&gt; TRUE
        ));
        
        $this-&gt;addElement('textarea', 'inHotel', array(
            'label' =&gt; 'Подробное описание',
            'attribs' =&gt; array(
                'maxlength' =&gt; 100000,
                'rows' =&gt; 10,
                'cols' =&gt; 35,
                'id' =&gt; 'replaced3'
            ),           
            'required' =&gt; TRUE
        ));
        
        $this-&gt;addElement('textarea', 'outside', array(
            'label' =&gt; 'Подробное описание',
            'attribs' =&gt; array(
                'maxlength' =&gt; 100000,
                'rows' =&gt; 10,
                'cols' =&gt; 35,
                'id' =&gt; 'replaced4'
            ),           
            'required' =&gt; TRUE
        ));
        
        
    }

}   
</code></pre>

<p>Action from controller:</p>

<pre class="highlight"><code>
public function hotelseditAction() {
        $this-&gt;view-&gt;ckeditor = 1;
        $this-&gt;view-&gt;datepicker = 1;        
        $hotelsMapper = new Application_Model_HotelsMapper();
        $id = $this-&gt;getRequest()-&gt;getParam('hotelId');
        $form = new Form_AdminHotels;
        $this-&gt;view-&gt;form = $form;
        if($id != 0) {
            $hotel = $hotelsMapper-&gt;getHotelById($id);
            //die(print_r($hotel-&gt;toArray()));
            $form-&gt;populate($hotel-&gt;toArray());         
        } 
        if ($this-&gt;getRequest()-&gt;isPost()) {
            $values = $this-&gt;getRequest()-&gt;getParams(); 
            if($form-&gt;isValid($values)){    
                $adapter = new Zend_File_Transfer_Adapter_Http();       
                $adapter-&gt;setDestination(APPLICATION_PATH.'/uploads');
                $adapter-&gt;receive();
                if (!$adapter-&gt;receive()) {
                    $messages = $adapter-&gt;getMessages();
                    echo implode("\n", $messages);
                    //die(print_r());
                }
                //die(print_r($form-&gt;getValues()));
                $hotel = new Application_Model_Hotels($form-&gt;getValues());          
                $hotelsMapper-&gt;save($hotel);
                
                $this-&gt;_helper-&gt;getHelper('redirector')-&gt;goToUrlAndExit($this-&gt;view-&gt;url(array(),'admin_hotels'));
            } else {
                $form-&gt;populate($values);
            }   
        }
    }
</code></pre>

<p>Application_Model_HotelsMapper class</p>

<pre class="highlight"><code>
class Application_Model_HotelsMapper
{
    protected $_dbTable;
    protected $_dbTableClass = 'Application_Model_DbTable_Hotels';
    protected $_select;

    public function __construct() {
        $this-&gt;_select = $this-&gt;getDbTable()-&gt;select();
    }
    
    public function setDbTable($dbTable)
    {       
        if (is_string($dbTable)) {          
            $dbTable = new $dbTable();
        }
        if (!$dbTable instanceof Zend_Db_Table_Abstract) {
            throw new Exception('Invalid table data gateway provided');
        }
        $this-&gt;_dbTable = $dbTable;
        return $this;
    }

    public function getDbTable()
    {       
        if (null === $this-&gt;_dbTable) {
            $this-&gt;setDbTable($this-&gt;_dbTableClass);
        }       
        return $this-&gt;_dbTable;
    }

    public function setJoins() {
        
    }
    
    public function save(Application_Model_Hotels $tour)
    {
        $data = array(            
            'description' =&gt; $tour-&gt;getDescription(),            
            'name' =&gt; $tour-&gt;getName(),
            'img1' =&gt; $tour-&gt;getImg1(),
            'img2' =&gt; $tour-&gt;getImg2(),
            'img3' =&gt; $tour-&gt;getImg3(),
            'inside' =&gt; $tour-&gt;getInside(),
            'inHotel' =&gt; $tour-&gt;getInHotel(),           
            'outside' =&gt; $tour-&gt;getOutside(),           
        );      
        if (null === ($id = $tour-&gt;getId())) {
            unset($data['id']);
            $this-&gt;getDbTable()-&gt;insert($data);
        } else {
            $this-&gt;getDbTable()-&gt;update($data, array('id = ?' =&gt; $id));
        }
    }
                
    public function getHotelById($hotelId) {
        $select = $this-&gt;_select-&gt;where('id = ?', $hotelId);
        return $this-&gt;getDbTable()-&gt;fetchRow($select);
    }
    
    public function deleteHotel($idList) {
        $this-&gt;getDbTable()-&gt;delete('id in ('.$idList.')');
    } 
    
    public function getAll() {      
        $select = $this-&gt;_select;       
        return $this-&gt;getDbTable()-&gt;fetchAll($select);
    }
    
    
}
</code></pre>

<p>Application_Model_Hotels Class</p>

<pre class="highlight"><code>
class Application_Model_Hotels
{
    protected $_name;
    protected $_id;
    protected $_description;    
    protected $_img1;
    protected $_img2;
    protected $_img3;
    protected $_inside;
    protected $_inHotel;
    protected $_outside;
    
    public function __construct(array $options = null)
    {
        if (is_array($options)) {
            $this-&gt;setOptions($options);
        }
    }

    public function __set($name, $value)
    {
        $method = 'set' . $name;
        if (('mapper' == $name) || !method_exists($this, $method)) {
            throw new Exception('Invalid comment property');
        }
        $this-&gt;$method($value);
    }

    public function __get($name)
    {
        $method = 'get' . $name;
        if (('mapper' == $name) || !method_exists($this, $method)) {
            throw new Exception('Invalid comment property');
        }
        return $this-&gt;$method();
    }

    public function setOptions(array $options)
    {       
        $methods = get_class_methods($this);        
        foreach ($options as $key =&gt; $value) {              
            $method = 'set' . ucfirst($key);                
            if (in_array($method, $methods)) {
                        
                $this-&gt;$method($value);
            }           
        }
        return $this;
    }

    public function setDescription($description)
    {
        $this-&gt;_description = $description;
        return $this;
    }

    public function getDescription()
    {
        return $this-&gt;_description;
    }   

    public function setName($name)
    {       
        $this-&gt;_name =  $name;      
        return $this;
    }

    public function getName()
    {
        return $this-&gt;_name;
    }
    
    public function setId($id)
    {
        $this-&gt;_id = (int) $id;
        return $this;
    }

    public function getId()
    {
        return $this-&gt;_id;
    }
    
        
    public function setImg1($img1)
    {
        $this-&gt;_img1 = $img1;
        return $this;
    }

    public function getImg1()
    {
        return $this-&gt;_img1;
    }
    
    public function setImg2($img2)
    {
        $this-&gt;_img2 = $img2;
        return $this;
    }

    public function getImg2()
    {
        return $this-&gt;_img2;
    }
    
    public function setImg3($img3)
    {
        $this-&gt;_img3 = $img3;
        return $this;
    }

    public function getImg3()
    {
        return $this-&gt;_img3;
    }
    
    public function setInside($inside)
    {
        $this-&gt;_inside = $inside;
        return $this;
    }

    public function getInside()
    {
        return $this-&gt;_inside;
    }
    
    public function setInHotel($inHotel)
    {
        $this-&gt;_inHotel = $inHotel;
        return $this;
    }

    public function getInHotel()
    {
        return $this-&gt;_inHotel;
    }
    
    public function setOutside($outside)
    {
        $this-&gt;_outside = $outside;
        return $this;
    }

    public function getOutside()
    {
        return $this-&gt;_outside;
    }
    
}
</code></pre>

<p>Table into DB:</p>

<pre class="highlight"><code>
CREATE TABLE IF NOT EXISTS `hotels` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `description` text COLLATE utf8_unicode_ci NOT NULL,
  `name` varchar(100) COLLATE utf8_unicode_ci NOT NULL,
  `img1` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `img2` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `img3` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `inside` text COLLATE utf8_unicode_ci NOT NULL,
  `inHotel` text COLLATE utf8_unicode_ci NOT NULL,
  `outside` text COLLATE utf8_unicode_ci NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci AUTO_INCREMENT=2 ;
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Kirill Brus (kimonniez) on 2012-05-30T10:41:30.000+0000</p> 
        <div class="body">
            <p>UPD: if you upload all files and before it set them as 'required' in form class - all names of files will not put into DB</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Frank Brückner (frosch) on 2012-05-30T12:02:48.000+0000</p> 
        <div class="body">
            <p>Code tags added.</p>

        </div>
    </div>
    </div>

