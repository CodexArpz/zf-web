<h2>ZF-6708: Zend_Filter_Input skips ALLOW_EMPTY metacommand processing if any validator is applied to the field</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2009-05-18T05:48:41.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-10-25T10:31:56.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.8.2 (27/May/09)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Alexander Veremyev (alexander)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Filter_Input</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Zend_Filter_Input skips ALLOW_EMPTY metacommand processing if any validator is applied to the field:</p>

<pre class="highlight"><code>
/**
 * @param array $validatorRule
 * @return void
 */
protected function _validateRule(array $validatorRule)
{
    ....
    /**
     * Evaluate the inputs against the validator chain.
     */
    if (count((array) $validatorRule[self::FIELDS]) &gt; 1) {
        if (!$validatorRule[self::VALIDATOR_CHAIN]-&gt;isValid($data)) {
            $this-&gt;_invalidMessages[$validatorRule[self::RULE]] = $validatorRule[self::VALIDATOR_CHAIN]-&gt;getMessages();
            $this-&gt;_invalidErrors[$validatorRule[self::RULE]] = $validatorRule[self::VALIDATOR_CHAIN]-&gt;getErrors();
            return;
        }
    ....
</code></pre>

<pre class="highlight"><code>
foreach ($field as $value) {
    if (empty($value)) {
        if ($validatorRule[self::ALLOW_EMPTY] == true) {
            continue;
        }
        if ($validatorRule[self::VALIDATOR_CHAIN_COUNT] == 0) {
            $notEmptyValidator = $this-&gt;_getValidator('NotEmpty');
            $notEmptyValidator-&gt;setMessage($this-&gt;_getNotEmptyMessage($validatorRule[self::RULE], $fieldKey));
            $validatorRule[self::VALIDATOR_CHAIN]-&gt;addValidator($notEmptyValidator);
        }
    }
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Alexander Veremyev (alexander) on 2009-05-18T06:09:29.000+0000</p> 
        <div class="body">
            <p>That was probably done to avoid 'empty value' messages duplication since these messages may come from Validators as well as from Zend_Filter_Input::ALLOW_EMPTY metacommand.</p>

<p>There are two options:
* Zend_Filter_Input should interact with Validators in terms of messages semantics and skip their 'empty string' messages.
* Throw all messages. So user will be responsibile to turn on Zend_Filter_Input::ALLOW_EMPTY (which is off by default) for specified field.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Alexander Veremyev (alexander) on 2009-05-18T07:59:38.000+0000</p> 
        <div class="body">
            <p>Right behavior is to skip any validation and throw NOT_EMPTY_MESSAGE if empty value is not allowed, but present.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Alexander Veremyev (alexander) on 2009-05-22T08:03:23.000+0000</p> 
        <div class="body">
            <p>Fixed</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Kevin McArthur (kevin) on 2009-09-16T14:34:07.000+0000</p> 
        <div class="body">
            <p>I think this may have introduced a backwards compatibility break. Scenario:</p>

<pre class="highlight"><code> 
$validation = array(
  'offset' =&gt; array (
     'digits',
     'presence' =&gt; 'required'
  )
)

$params = new Zend_Filter_Input(null, $validation, $this-&gt;_getAllParams());
</code></pre>

<p>Prior to this change, integer values of zero would correctly pass. After this change a zero value results in an empty field error.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2009-09-17T11:59:09.000+0000</p> 
        <div class="body">
            <p>Behavior now fixed in trunk and 1.9 release branch; integer 0 is now considered non-empty by the NotEmpty validator.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Simon Corless (sico) on 2009-10-25T10:31:52.000+0000</p> 
        <div class="body">
            <p>This fix with the NotEmpty validator has caused me nothing but trouble as it has broken a number of my forms. I used the fact that 0 in PHP is considered empty to validate lists where element 0 is a title thus not required.</p>

<p>I feel that the NotEmpty validator should behave in exactly the same way as the php function empty() with regards to integer 0. For the time being I have extended the notEmpty validator to disallow integer 0.</p>

<p>Should we fix this or implement another validator to cover such situations?</p>

        </div>
    </div>
    </div>

