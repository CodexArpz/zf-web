<h2>ZF-213: Trim on construction</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2006-07-09T05:08:17.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2007-07-05T14:43:13.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>0.6.0 (16/Dec/06)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Darby Felton (darby)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Filter</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Me again. I'm making a lot of use of Zend_Filter_Input atm so noticing a lot of stuff.
It would be really nice if you could optionally trim all the elements of the source array.</p>

<p>I extended Zend_Filter_Input and actually did this</p>

<pre class="highlight"><code>
class SomeClass extend Zend_Filter_Input 
{
    const TRIM = 1;
    const WHITESPACE = 2;
    /**
     * @param array $source the data you want to filter
     * @param int $trimAll data cleaning method, use class constant
     */
    public function __construct(array &amp;$source, $cleaning) 
    {
        switch ($cleaning) {
            case self::TRIM: 
                foreach ($source as $key =&gt; $value) {
                    if (is_string($value)) {    // preserve non-string types
                        $source[$key] = trim($value);
                    }
                }
                break;
            case self::WHITESPACE:
                foreach ($source as $key =&gt; $value) {
                    if (is_string($value)) {    // preserve non-string types
                        $source[$key] = preg_replace('/\s{2,}/', ' ', $value);
                    }
                }
                break;
            default:
                // no action
                break;
        }
        $this-&gt;_source = $source;
        $source = null;
    }
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Darby Felton (darby) on 2006-11-07T19:26:33.000+0000</p> 
        <div class="body">
            <p>Extending the class for your specific purposes is exactly the right thing to do here. Since we will have a major refactoring of the filtering and validation technologies for 0.9.0, I do not want to mislead by placing this new and specific functionality into the existing design. Thus, instead of adding this to the current implementation, I have made a note to include such commonly-needed functionality into the new design.</p>

        </div>
    </div>
    </div>

