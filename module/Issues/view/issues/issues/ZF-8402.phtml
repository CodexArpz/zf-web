<h2>ZF-8402: Zend_View_Helper_Navigation_Menu ignores pages visiblity</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Bug</dd>

    <dt>Created:</dt>
    <dd>2009-11-26T12:17:15.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2012-05-09T16:20:43.000+0000</dd>

    <dt>Status:</dt>
    <dd>Closed</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Frank Brückner (frosch)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Navigation</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-10146">ZF-10146</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>From Reference Guide section 37.2.1. Common page features:</p>

<p>{quote}
visible | bool | TRUE | Whether page should be visible for the user, or just be a part of the structure. Invisible pages are skipped by view helpers.
{quote}</p>

<p>I tried to take advantage of this property, adding the following element in the navigation xml file</p>

<pre class="literal">
...
    Usuários
        Clique para visualizar os usuários registrados.usersindexuserRegistrar usuário
                Clique para registrar um novo usuário.usersnewuserEditar usuário
                Clique para editar um usuário.usersedituser
                *false*
            
...
</pre>

<p>but looks like this property isn't properly handled by navigation helpers.</p>

<p>My call for sub menu rendering is as follows:</p>

<pre class="literal">
&lt;?php echo $this-&gt;navigation()-&gt;menu()-&gt;setOnlyActiveBranch(true)
                                      -&gt;setRenderParents(false)
                                      -&gt;setRenderInvisible(false) ?&gt;
</pre>

<p>Zend_View_Helper_Navigation_Menu doesn't seems to check which a page is visible or not before rendering. A look in the Zend_View_Helper_Navigation_Helper interface shown that there is a method called setRenderInvisible and this is honored by the Zend_View_Helper_Navigation_HelperAbstract class but doesn't seems to be used in the Zend_View_Helper_Navigation_Menu component.
A search for the 'visible' string in the component's source code don't return anything.</p>

<p>To help to understand the issue, I followed the navigation helper rendering flow:</p>

<h1>Zend_View_Helper_Navigation helpers proxy to the appropriated helper, menu in this case;</h1>

<h1>Zend_View_Helper_Navigation_Menu return itself;</h1>

<h1>setOnlyActiveBranch() is called;</h1>

<h1>The $_onlyActiveBranch is defined;</h1>

<h1>setRenderParents() is called;</h1>

<h1>The $_renderParents is defined;</h1>

<h1>setRenderInvisible() is called from Zend_View_Helper_Navigation_HelperAbstract;</h1>

<h1>The $_renderInvisible is defined;</h1>

<h1>Zend_View_Helper_Navigation_Menu calls __toString() - inherited from Zend_View_Helper_Navigation_HelperAbstract;</h1>

<h1>Zend_View_Helper_Navigation_Menu calls render() - also inherited from Zend_View_Helper_Navigation_HelperAbstract;</h1>

<h1>Zend_View_Helper_Navigation_Menu calls renderMenu - no partial specified;</h1>

<h1>_renderDeepestMenu() is called - as onlyActiveBranch is true and renderParents is false. The $_renderInvisible is not used;</h1>

<p>Maybe there is missing additional check for the visible property before rendering pages.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Ankit Aggarwal (ankitaggarwal) on 2010-01-20T10:05:39.000+0000</p> 
        <div class="body">
            <p>I have the same problem as you, Bruno. I found that the "visible" tag is not being set properly by the Zend_Navigation_xyz class(es). Working through the code systematically resulted in reaching the setVisible() method under Zend_Navigation_Page, which is expected. What was not expected, however, was that the method was designed as:</p>

<pre class="highlight"><code>
public function setVisible($visible = true)
{
    $this-&gt;_visible = (bool) $visible;

    return $this;
}
</code></pre>

<p>The page properties, especially if read from a config INI/XML file, are usually in the form of strings. The boolean value of a string that isn't empty and isn't "0" is true. Thus, anytime you tried to set a page invisible via a string representation for false (i.e. "false" or "FALSE"), the function sets the property to true since this is the value returned when type-casting a non-null, non-empty, non-zero string to a boolean value.</p>

<p>Here's the fix:</p>

<pre class="highlight"><code>
public function setVisible($visible = true)
{
    if (is_string($visible) &amp;&amp;
        (strtolower($visible) == 'false' || !((bool)$visible))
    {
        $this-&gt;_visible = false;
    }
    else
    {
        $this-&gt;_visible = (bool) $visible;
    }

    return $this;
}
</code></pre>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Bruno Pirajá Moyle (brunitto) on 2010-01-20T10:18:16.000+0000</p> 
        <div class="body">
            <p>Very good, at the first impression your solution is fine.</p>

<p>Did you test this solution in a running application? Were you able to hide the pages by setting the visible property for false?</p>

<p>I will make some tests as soon as possible.</p>

<p>Thanks :)</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ankit Aggarwal (ankitaggarwal) on 2010-01-20T11:02:05.000+0000</p> 
        <div class="body">
            <p>@Bruno
In my web application I was trying to hide certain links in my navigation menu from showing, but I couldn't remove the links from my XML file completely because I wanted navigation-&gt;breadcrumbs() to still function properly for these pages.</p>

<p>So, yes, I am using the code posted above and so far I haven't run into any issues. Of course, I haven't tested the code incessantly for input validation purposes, but assuming you type 0, 1, false, or true within the  tags in your INI/XML file nothing should break. I might have to go through the Page.php file to ensure that other setter methods don't have bugs either.</p>

        </div>
    </div>
    </div>

