<h2>ZF-287: Check final methods in controller</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2006-07-26T15:11:55.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2007-07-05T14:43:16.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>0.2.0 (29/Oct/06)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Bill Karwin (bkarwin)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Controller</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p><em>from the mailing list:</em></p>

<p>I noticed that Zend_Controller_Action has a final modifier on the public
run method.  What I would like to do is this:</p>

<p>abstract class Lanalot_Json_Controller_Action extends
Zend_Controller_Action
{
    public function run(Zend_Controller_Dispatcher_Interface
$dispatcher,
                        Zend_Controller_Dispatcher_Token $action)
    {
        try {
            parent::run($dispatcher, $action);
        } catch(Lanalot_User_Exception $ex) {
            $response = array('error' =&gt; $ex-&gt;getMessage());
            echo Zend_Json::encode($response);
        } catch(Lanalot_User_Exception $ex) {
            Lanalot_Log::logException($ex);
            $response = array('error' =&gt; 'A system error occurred.');
            echo Zend_Json::encode($response);
        }
}</p>

<p>The reason why I want to do this is pretty simple.  I have two exception
types, user exceptions and normal exceptions.  User exceptions are
things like 'Invalid username or password', 'That field value is too
long', etc.  Normal exceptions include everything you don't want a user
to see, like 'Unable to connect to the db' kind of exceptions.</p>

<p>I would really like to be able to make 3 of these classes, one for Json
web service controllers, one for Xml web service controllers and one for
xhtml web pages.</p>

<p>I understand this may not be the best approach, but I chose to try this
because the controller can easily be made to only handle one type of
request (xhtml, json, xml, etc).  Trying to catch it futher down the
line becomes problematic because I wont know why type of controller I am
working with.  I am open to other suggestions though.</p>

<p>I guess my main question is why is the run method final?</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2006-09-25T19:44:21.000+0000</p> 
        <div class="body">
            <p>Reassigning from Jayson to Bill Karwin, pending further triage.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2006-11-07T15:30:09.000+0000</p> 
        <div class="body">
            <p>run() was deprecated in the MVC rewrite, and is only used when utilizing the action controller as a page controller; it is no longer a final method.</p>

<p>Please use the MVC version in the incubator, either from the 0.2.0 release or subversion.</p>

        </div>
    </div>
    </div>

