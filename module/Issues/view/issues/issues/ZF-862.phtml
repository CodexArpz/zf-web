<h2>ZF-862: Zend_Db_Table constructor arguments for specifying table name and primary key</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>New Feature</dd>

    <dt>Created:</dt>
    <dd>2007-02-06T13:25:58.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2007-07-05T14:43:45.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>0.8.0 (21/Feb/07)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Bill Karwin (bkarwin)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Db_Table</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>nerVo writes:</p>

<p>In some cases (mines, for example :)), i think it should be useful to define table name and primary key on a Zend_Db_Table object instantiation.</p>

<p>Something like that :</p>

<pre class="highlight"><code>
$table = new Zend_Db_Table(array('name'=&gt;'myname', 'primary'=&gt;'myprimary'));
</code></pre>

<p>It can be implemented adding those lines at the beginning of the __construct method of Zend/Db/Table.php :</p>

<pre class="highlight"><code>
if ( !empty($config['name'])
        $this-&gt;_name = $config['name'];
if ( !empty($config['primary']) )
        $this-&gt;_primary = $config['primary']; 
</code></pre>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Bill Karwin (bkarwin) on 2007-02-16T17:28:45.000+0000</p> 
        <div class="body">
            <p>This has been implemented in revision 3504.</p>

<p>I wasn't too sure about this feature request, because the usage for Zend_Db_Table is to subclass it for each table.  So you should declare the name and primary key of the table as member variables in the subclass.  No need to specify them in the options array.</p>

<p>But it turned out that this feature was handy for testing.  I need to spell the table name and column name in all caps for Oracle and DB2.  So making some polymorphic generic Zend_Db_Table subclass that has both lowercase and uppercase strings for its name and primary key column is made possible by this feature of specifying the strings in the options array.</p>

        </div>
    </div>
    </div>

