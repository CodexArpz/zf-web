<h2>ZF-8201: ZendRegistry should support trees of keys</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2009-11-01T09:43:37.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2009-11-03T02:44:36.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Jack Tanner (jacktanner)
            </dd>

    <dt>Assignee:</dt>
    <dd>
                Matthew Weier O'Phinney (matthew)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Registry</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>Zend_Registry is useful for storing arrays, but there's no API for accessing just some element(s) of an array. This means that the application retrieving values from the registry must retrieve the array and then manually traverse it.</p>

<p>$a = array('foo', 'bar');
Zend_Registry::set('a', $a);</p>

<p>Pattern today:
$my_a = Zend_Registry::get('a');
echo "at 1: " . $my_a[1];</p>

<p>Desired pattern:
$at_1 = Zend_Registry::get(array('a', 1));
echo "at 1: " . $at_1;</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2009-11-02T04:49:34.000+0000</p> 
        <div class="body">
            <p>This is a limitation of PHP, not Zend_Registry. If you want to traverse array keys or multi-dimensional arrays, the best approach is to cast your array to a Zend_Config object:</p>

<pre class="highlight"><code>
Zend_Registry::set('a', new Zend_Config($array));

// retrieving:
$at_1 = Zend_Registry::get('a')-&gt;{1};
</code></pre>

<p>This is a simpler notation than the one suggested, and fully supported already.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Jack Tanner (jacktanner) on 2009-11-02T08:12:19.000+0000</p> 
        <div class="body">
            <p>Zend_Config is a neat trick, but I don't like that your solution still places the burden on the registry user. Wouldn't it be neater to cast to Zend_Config on the Zend_Registry side?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Matthew Weier O'Phinney (matthew) on 2009-11-03T02:44:33.000+0000</p> 
        <div class="body">
            <p>No. Some developers simply use Zend_Registry as a data store -- and casting to Zend_Config would break expectations, as they may actually be expecting to receive an array.</p>

<p>Until PHP allows array access to the results of function calls (not likely to happen until PHP 6, if ever), casting to a Zend_Config object is your best bet if you want to access individual items in an array via the registry.</p>

        </div>
    </div>
    </div>

