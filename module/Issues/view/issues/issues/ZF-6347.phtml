<h2>ZF-6347: DefaultComplexType strategy doesn't support nillable class properties</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2009-04-19T14:20:26.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2013-01-22T21:12:50.000+0000</dd>

    <dt>Status:</dt>
    <dd>Open</dd>

    <dt>Fix version(s):</dt>
    <dd><ul></ul></dd>

    <dt>Reporter:</dt>
    <dd>
                Fabien Crespel (fcrespel)
            </dd>

    <dt>Assignee:</dt>
    <dd>
        None
                    </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Soap_Wsdl</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
        <li><a href="/issues/browse/ZF-10153">ZF-10153</a></li>
        </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
        <li><a href="/issues/secure/attachment/11879/Zend_Soap_Wsdl_Strategy_DefaultComplexType-NillableClassProperties.diff">Zend_Soap_Wsdl_Strategy_DefaultComplexType-NillableClassProperties.diff</a></li>
        </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>The {{DefaultComplexType}} WSDL strategy only uses the first type declared in the {{@var}} docblock of a class property.
Suppose the following docblock:</p>

<pre class="highlight"><code>
/** @var int|null My nillable integer variable */
public $myvariable;
</code></pre>

<p>In this case the variable is not considered nillable and a C# client (for example) will use the "int" type (which cannot be null) instead of "int?" (which can be null). There is sometimes a big difference between "0" and "null" for certain fields, especially booleans where null could mean "undefined".</p>

<p>Of course the following case also causes problems with the current code:</p>

<pre class="highlight"><code>
/** @var null|int My nillable integer variable */
public $myvariable;
</code></pre>

<p>Only the "null" type would be taken into account, and, well, this is not a type.</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Fabien Crespel (fcrespel) on 2009-04-19T14:28:54.000+0000</p> 
        <div class="body">
            <p>This patch fixes the issue by adding the {{nillable}} attribute to the {{element}} node when "null" is present among the {{@var}} types. The first non-null type is used for the {{type}} attribute.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Robert F. Ludwick (rfludwick) on 2009-05-04T14:51:51.000+0000</p> 
        <div class="body">
            <p>Wouldn't this only fix nillable complex types? What if you wanted to make a string member var null, like so:</p>

<pre class="literal">
/** @var string|null Some var... */
public $some_var;
</pre>

<p>The {{DefaultComplexType}} strategy, at least in my usage experience, doesn't handle those, as {{Zend_Soap_Wsdl}} does instead.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Fabien Crespel (fcrespel) on 2009-05-07T05:39:50.000+0000</p> 
        <div class="body">
            <p>String member variables can also be null. Actually, it works with any type, and for example I use {{string}}, {{int}} and {{bool}} nillable class properties in a personal project.</p>

<p>{{DefaultComplexType}} iterates over the class properties, detects the "null" (with my patch), and then calls {{$this-&gt;getContext()-&gt;getType()}}. So getting the type goes back to Zend_Soap_Wsdl, yes, but only after detecting "null". Whether the actual type is a native type handled by Zend_Soap_Wsdl directly, or a complexType handled by a strategy, doesn't matter :)</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Amr Mostafa (alienbrain) on 2009-07-29T09:30:55.000+0000</p> 
        <div class="body">
            <p>Does this apply to class methods and functions as well, or would this be an issue of AutoDiscover?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Fabien Crespel (fcrespel) on 2009-07-30T04:44:11.000+0000</p> 
        <div class="body">
            <p>This only applies to class properties (variables).</p>

<p>For class methods, you can make parameters optional (nillable) by giving them a null default value. This would only work with ZF 1.9 and the document/literal style though, as the rpc style doesn't let you use nillable parts. See ZF-6349 and ZF-6351.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Amr Mostafa (alienbrain) on 2009-07-30T07:23:47.000+0000</p> 
        <div class="body">
            <p>Very helpful, thank you.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Alex (aalbino) on 2009-11-02T13:09:25.000+0000</p> 
        <div class="body">
            <p>The .diff file, when applied to Zend_Soap_Wsdl_Strategy_DefaultComplexType, worked for me. Because Zend_Soap_Wsdl_Strategy_ArrayOfTypeComplex extends the "DefaultComplexType" strategy, it too correctly picked up on the following php docblock:</p>

<p>@var string|null</p>

<p>...And made the variable "nillable"</p>

<p>Thanks!</p>

<p>PS - Any chance this fix can be applied to the trunk?</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Ramon Henrique Ornelas (ramon) on 2010-08-25T21:27:36.000+0000</p> 
        <div class="body">
            <p>I think that this issue was fixed in trunk by [~rquadling] see ZF-10153.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Richard Quadling (rquadling) on 2010-09-13T09:18:54.000+0000</p> 
        <div class="body">
            <p>My patch works by relying on a default value not being set for the property, rather than examining the different @var values.</p>

<p>e.g.</p>

<p>/**
 * Date Added
 *
 * @var xsd:datetime
 */
public $DateAdded;</p>

<p>becomes ...</p>

<p></p>

<p>in the wsdl file.</p>

<p>This is working for me (PHP) and my client's client (.NET based - I've no idea about their code).</p>

<p>Everyone happy.</p>

<p>And if you are wondering how xsd:datetime is working, I've made another patch to the AutoDiscovery code to allow for standard XSD types to be declared. Not 100% of them, but those I use.</p>

<p>I don't enough about getting my patches released, so hopefully someone can review them and make suggestions.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by oscar (oscaroxy) on 2013-01-22T21:12:50.000+0000</p> 
        <div class="body">
            <p>If I wrote:</p>

<p>class MyClass{
   /*
   *  @var xsd:dateTime
   */
   public $myProp;</p>

<p>}</p>

<p>I obtain an error, while if I write:</p>

<p>class MyClass{
   /*
   *  @var dateTime
   */
   public $myProp;</p>

<p>}</p>

<p>in wsdl I read "complex object" with namespase tns and not xsd. Why? How do I do for resolve this problem? 
thanks</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by oscar (oscaroxy) on 2013-01-22T21:12:50.000+0000</p> 
        <div class="body">
            <p>If I wrote:</p>

<p>class MyClass{
   /*
   *  @var xsd:dateTime
   */
   public $myProp;</p>

<p>}</p>

<p>I obtain an error, while if I write:</p>

<p>class MyClass{
   /*
   *  @var dateTime
   */
   public $myProp;</p>

<p>}</p>

<p>in wsdl I read "complex object" with namespase tns and not xsd. Why? How do I do for resolve this problem? 
thanks</p>

        </div>
    </div>
    </div>

