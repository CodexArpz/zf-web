<h2>ZF-1974: library/Zend/Locale/Math/PhpMath.php contains globally-scoped functions and executed code</h2>

<dl class="metadata">
    <dt>Issue Type:</dt>
    <dd>Improvement</dd>

    <dt>Created:</dt>
    <dd>2007-09-20T12:22:55.000+0000</dd>

    <dt>Last Updated:</dt>
    <dd>2007-11-15T14:13:28.000+0000</dd>

    <dt>Status:</dt>
    <dd>Resolved</dd>

    <dt>Fix version(s):</dt>
    <dd><ul>        <li>1.0.3 (30/Nov/07)</li>
    </ul></dd>

    <dt>Reporter:</dt>
    <dd>
        None
                    </dd>

    <dt>Assignee:</dt>
    <dd>
                Thomas Weidner (thomas)
            </dd>

    <dt>Tags:</dt>
    <dd><ul>        <li>Zend_Locale</li>
        </ul></dd>

    <dt>Related issues:</dt>
    <dd><ul>
    </ul></dd>

    <dt>Attachments:</dt>
    <dd><ul>
    </ul></dd>
</dl>

<div class="description">
    <h3>Description</h3>

    <div class="body">
        <p>library/Zend/Locale/Math/PhpMath.php contains globally-scoped functions and a line of executed code, instead of having such things encapsulated in a class, which appears to break the object-oriented spirit of the Zend Framework to a degree:</p>

<pre class="highlight"><code>
class Zend_Locale_Math_PhpMath
{
...
}
function Zend_Locale_Math_Add($op1, $op2, $op3 = null)...
function Zend_Locale_Math_Sub($op1, $op2, $op3 = null)...
...
function Zend_Locale_Math_Scale($op1)...
Zend_Locale_Math_PhpMath::disable();
</code></pre>

<p>Are there compelling reasons that these cannot be refactored into object-oriented code? If so, what are they?</p>

    </div>
</div>

<div class="comments">
    <h3>Comments</h3>

    <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2007-09-20T13:14:26.000+0000</p> 
        <div class="body">
            <p>The reason is that the code looks like this:</p>

<pre class="highlight"><code>
        $prec   = call_user_func(Zend_Locale_Math::$sub, $value, $number, $options['precision']);
</code></pre>

<p>$sub is declared as</p>

<pre class="highlight"><code>
    public static $sub   = 'bcsub';
</code></pre>

<p>When bcmath is not loaded within Zend_Locale_Math the Zend_Locale_Math_PhpMath file is loaded.
It redefines the following</p>

<pre class="highlight"><code>
        self::$sub   = 'Zend_Locale_Math_Sub';
</code></pre>

<p>Myself is not happy about the "call_user_func" syntax  but this was done by gavin and as I have no experience with this on different environments until then I did not change the relevant code.</p>

<p>If you can give me a hint on how refactoring would be "coding standard" ok, it would be nice.
Problems are related to
* calling eighter bcmath or class function
* calling from testbed without integrating extra testbed code into the class
* Probably not working on lower 5.2 ?</p>

<p>I do not know why gavin used this approach...</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Darby Felton (darby) on 2007-09-20T13:51:44.000+0000</p> 
        <div class="body">
            <p>Thanks for the background information, Thomas. :) I'll forward this issue to the Zend team to get their feedback, too, and then we can see if we need to make changes, and if so, how we can do this nicely.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2007-10-19T08:14:41.000+0000</p> 
        <div class="body">
            <p>I found a way to rework it.</p>

<p>Please review SVN 6658 and give feedback.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2007-10-25T15:33:57.000+0000</p> 
        <div class="body">
            <p>Closing ticket because of lacking response.
Issue already fixed.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Darby Felton (darby) on 2007-11-07T13:09:07.000+0000</p> 
        <div class="body">
            <p>Is there no good way to avoid line 201?</p>

<pre class="highlight"><code>
Zend_Locale_Math_PhpMath::disable(); // disable use of bcmath functions
</code></pre>

<p>Probably I'm missing something, but currently, it appears that by merely including the class, this line disables the bcmath functions? This seems like a bad side-effect.</p>

<p>It also looks like this class should {{require_once 'Zend/Locale/Math.php';}}, since {{Zend_Locale_Math_PhpMath}} extends {{Zend_Locale_Math}}, but again, I could be missing something.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2007-11-07T15:27:23.000+0000</p> 
        <div class="body">
            <p>Actually there is no way because of two reasons:</p>

<p>First:
The methods are called statically because otherwise we would not be able to overload the original bcmath functios. We are not creating an instance and therefor we are not able to add this line to the constructor.</p>

<p>Second:
When the class is tested or called it would not work because the bcmath would not be disabled because the original constants are set through math.php. If we add this line to math.php the testbed would not work any longer.</p>

<p>Also the include path for phpmath is in math.php because within there is the selection if bcmath is avaiable or not. PhpMath is not allowed to be used alone nor will it be documented because it's really a internal class. Therefor there is no require within phpmath included.</p>

<p>If you think this can be avoided somehow I would listen to any idea... I have thought some time but got not an idea how to change this so it works on any environment like it does now.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2007-11-07T15:28:33.000+0000</p> 
        <div class="body">
            <p>Btw: PhpMath was build to disable the bcmath useage... this is no side-effect !!! 
THIS IS WHAT THE CLASS WAS BUILT FOR !!!</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Darby Felton (darby) on 2007-11-07T15:39:48.000+0000</p> 
        <div class="body">
            <p>bq. The methods are called statically because otherwise we would not be able to overload the original bcmath functios. We are not creating an instance and therefor we are not able to add this line to the constructor.</p>

<p>Right, but the methods are being called from somewhere, and this calling code may be able to know which functions are to be called. If using these static methods, simply call {{Zend_Locale_Math_PhpMath::disable()}} before using the functions. Why would this not work? I'm not trying to be difficult, I'm just trying to understand. :)</p>

<p>Since I'm not so familiar with this component, I'll simply defer to whatever you and [~alexander] decide. Resolving as fixed.</p>

        </div>
    </div>
        <div class="comment">
        <p class="metadata">Posted by Thomas Weidner (thomas) on 2007-11-07T17:10:50.000+0000</p> 
        <div class="body">
            <p>Arg... I already wrote an answer and all is now away... it would be great if comments could be redone if you press the back button on error... :-(</p>

<p>So let's recollect what I've written before:</p>

<p>The user calls</p>

<pre class="highlight"><code>
require_once 'Zend/Locale/Math.php';
call_user_func(Zend_Locale_Math::$add, 10, 10);
</code></pre>

<p>At loading the math class recognises if bcmath is avaiable or not.
If not the PhpMath.php class is loaded.</p>

<p>At Loading Time the constants from math.php which refers to bcmath are overloaded to refer to the class functions.</p>

<p>So we could add this line to the math.php class but there is already class-less code at math.php. So it would be useless.</p>

<p>As the phpmath class is really only internal and must not be used standalone the require of math.php is not included as it is already loaded when using the right way... by automatically let detect math.php is bcmath or not is used.</p>

<p>Anyway... if Alex has an idea on how to simplify this and fit your needs I would have two open ears.</p>

<p>For details look into
Measure/Abstract.php for zf bcmath useage.
Locale/Math.php for autodetecting bcmath and redirecting
Locale/Math/PhpMath.php for disabling bcmath and class usage.</p>

        </div>
    </div>
    </div>

